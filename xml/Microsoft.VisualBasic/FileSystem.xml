<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f2c75410841f3d95315962d26a30d03df56ba8f2" /><Meta Name="ms.sourcegitcommit" Value="367e1eae0725e6da7136cd073aaa856ded5d5c29" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/13/2019" /><Meta Name="ms.locfileid" Value="75016222" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6f693-101"><see langword="FileSystem" /> モジュールに含まれるプロシージャを使って、ファイル、ディレクトリ、またはフォルダー、およびシステムの操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="6f693-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="6f693-102"><see langword="My" /> 機能を使用すると、<see langword="FileSystem" /> モジュールを使用した場合よりファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="6f693-103">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-104">このモジュールは、ファイルとフォルダーにアクセスする Visual Basic 言語キーワードとランタイムライブラリメンバーをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="6f693-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-105">この例では、`GetAttr` 関数を使用して、ファイル、ディレクトリ、またはフォルダーの属性を決定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="6f693-106">ディレクトリとファイルの概要</span><span class="sxs-lookup"><span data-stu-id="6f693-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="6f693-107">入出力の概要</span><span class="sxs-lookup"><span data-stu-id="6f693-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="6f693-108">キーワード (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="6f693-109">ランタイムライブラリのメンバーの Visual Basic</span><span class="sxs-lookup"><span data-stu-id="6f693-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChDir(string Path) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="6f693-110">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-110">Required.</span></span> <span data-ttu-id="6f693-111">新しい既定ディレクトリまたはフォルダーになるディレクトリまたはフォルダーを識別する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-111">A string expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="6f693-112"><paramref name="Path" /> にはドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="6f693-113">ドライブを指定しない場合、<see langword="ChDir" /> は現在のドライブの既定ディレクトリまたは既定フォルダーを変更します。</span><span class="sxs-lookup"><span data-stu-id="6f693-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="6f693-114">現在のディレクトリまたはフォルダーを変更します。</span><span class="sxs-lookup"><span data-stu-id="6f693-114">Changes the current directory or folder.</span></span> <span data-ttu-id="6f693-115"><see langword="My" /> 機能を使用すると、<see langword="ChDir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="6f693-116">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-117">`ChDir` 関数は既定のディレクトリを変更しますが、既定のドライブは変更しません。</span><span class="sxs-lookup"><span data-stu-id="6f693-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="6f693-118">たとえば、既定のドライブが C の場合、次のステートメントではドライブ D の既定のディレクトリが変更されますが、C は既定のドライブのままです。</span><span class="sxs-lookup"><span data-stu-id="6f693-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="6f693-119">相対ディレクトリを変更するには、次のように2つのピリオドを入力します。</span><span class="sxs-lookup"><span data-stu-id="6f693-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-120">`ChDir` 関数には、部分信頼状況での実行に影響する可能性があるアンマネージコードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="6f693-121">詳細については、「」および「<xref:System.Security.Permissions.SecurityPermission>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-122">この例では、`ChDir` 関数を使用して、現在のディレクトリまたはフォルダーを変更します。</span><span class="sxs-lookup"><span data-stu-id="6f693-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-123"><paramref name="Path" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="6f693-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6f693-124">指定されたドライブが無効です。または利用できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="6f693-125">方法 : Visual Basic でファイル パスを解析する</span><span class="sxs-lookup"><span data-stu-id="6f693-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="6f693-126">Visual Basic でのファイルおよびディレクトリの作成、削除、および移動</span><span class="sxs-lookup"><span data-stu-id="6f693-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6f693-127">現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="6f693-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChDrive(char Drive) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="6f693-128">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-128">Required.</span></span> <span data-ttu-id="6f693-129">既存のドライブを指定する文字列式。</span><span class="sxs-lookup"><span data-stu-id="6f693-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="6f693-130">長さ 0 の文字列 ("") を指定した場合、現在のドライブは変更されません。</span><span class="sxs-lookup"><span data-stu-id="6f693-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="6f693-131"><paramref name="Drive" /> 引数が複数の文字で構成される文字列の場合、<see langword="ChDrive" /> は先頭の文字だけを使用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="6f693-132">現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="6f693-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-133">`ChDrive` 関数には、部分信頼状態での実行に影響する可能性があるアンマネージコードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="6f693-134">詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-135">この例では、`ChDrive` 関数を使用して現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="6f693-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="6f693-136">この関数は、ドライブが存在しない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="6f693-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-137">指定されたドライブが無効です。または利用できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-138">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChDrive(string Drive) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="6f693-139">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-139">Required.</span></span> <span data-ttu-id="6f693-140">既存のドライブを指定する文字列式。</span><span class="sxs-lookup"><span data-stu-id="6f693-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="6f693-141">長さ 0 の文字列 ("") を指定した場合、現在のドライブは変更されません。</span><span class="sxs-lookup"><span data-stu-id="6f693-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="6f693-142"><paramref name="Drive" /> 引数が複数の文字で構成される文字列の場合、<see langword="ChDrive" /> は先頭の文字だけを使用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="6f693-143">現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="6f693-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-144">`ChDrive` 関数には、部分信頼状態での実行に影響する可能性があるアンマネージコードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="6f693-145">詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-146">この例では、`ChDrive` 関数を使用して現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="6f693-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="6f693-147">この関数は、ドライブが存在しない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="6f693-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-148">指定されたドライブが無効です。または利用できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-149">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6f693-150">現在のパスを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-150">Returns a string representing the current path.</span></span> <span data-ttu-id="6f693-151"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="6f693-152">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CurDir() cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6f693-153">現在のパスを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-153">Returns a string representing the current path.</span></span> <span data-ttu-id="6f693-154"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="6f693-155">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="6f693-156">現在のパスを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="6f693-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6f693-157">この例では、`CurDir` 関数を使用して現在のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CurDir(char Drive) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="6f693-158">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-158">Optional.</span></span> <span data-ttu-id="6f693-159">既存のドライブを指定する <see langword="Char" /> 式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="6f693-160">ドライブが指定されていない場合、または <paramref name="Drive" /> が長さ 0 の文字列 ("") である場合は、<see langword="CurDir" /> により現在のドライブのパスが返されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="6f693-161">現在のパスを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-161">Returns a string representing the current path.</span></span> <span data-ttu-id="6f693-162"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="6f693-163">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="6f693-164">現在のパスを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="6f693-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6f693-165">この例では、`CurDir` 関数を使用して現在のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6f693-166">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="6f693-167"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="6f693-168">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir() cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6f693-169">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="6f693-170"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="6f693-171">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="6f693-172">指定されたパターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="6f693-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-173">`Dir` 関数では、複数のファイルを指定するために複数の文字 (`*`) と1文字の (`?`) ワイルドカードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="6f693-174">`VbVolume` は、特定のファイル名ではなく、ドライブのボリュームラベルを返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="6f693-175">`Dir` 関数を初めて呼び出すときは、`PathName` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="6f693-176">次の項目を取得するには、パラメーターを指定せずに `Dir` 関数への後続の呼び出しを行うことができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-177">正常に実行するには、`Dir` 関数で、実行中のコードに対して <xref:System.Security.Permissions.FileIOPermission> の <xref:System.Security.Permissions.FileIOPermissionAccess.Read> と <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> フラグを与える必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="6f693-178">詳細については、「<xref:System.Security.Permissions.FileIOPermission>、<xref:System.Security.SecurityException>、および[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="6f693-179">`Attributes` 引数の列挙値は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="6f693-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="6f693-180">[値]</span><span class="sxs-lookup"><span data-stu-id="6f693-180">Value</span></span>|<span data-ttu-id="6f693-181">定数</span><span class="sxs-lookup"><span data-stu-id="6f693-181">Constant</span></span>|<span data-ttu-id="6f693-182">説明</span><span class="sxs-lookup"><span data-stu-id="6f693-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="6f693-183">既定モード。</span><span class="sxs-lookup"><span data-stu-id="6f693-183">Default.</span></span> <span data-ttu-id="6f693-184">属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="6f693-185">読み取り専用ファイルと、属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="6f693-186">隠しファイル、および属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="6f693-187">システムファイル、および属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="6f693-188">ボリュームラベルを指定します。他の属性が指定されている場合、`vbVolume` は無視されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="6f693-189">ディレクトリまたはフォルダー、および属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="6f693-190">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="6f693-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="6f693-191">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="6f693-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="6f693-192">これらの列挙は Visual Basic 言語によって指定され、実際の値の代わりにコード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-193">この例では、`Dir` 関数を使用して、特定のファイルとディレクトリが存在するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6f693-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="6f693-194">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-194">Optional.</span></span> <span data-ttu-id="6f693-195">ファイル名、ディレクトリまたはフォルダー名、あるいはドライブ ボリューム ラベルを指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-195">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="6f693-196"><paramref name="PathName" /> が見つからない場合は、長さ 0 の文字列 (<see langword="&quot;&quot;" />) が返されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname"><span data-ttu-id="6f693-197">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-197">Optional.</span></span> <span data-ttu-id="6f693-198">ファイル名、ディレクトリまたはフォルダー名、あるいはドライブ ボリューム ラベルを指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-198">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="6f693-199"><paramref name="Pathname" /> が見つからない場合は、長さ 0 の文字列 (<see langword="&quot;&quot;" />) が返されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-199">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="Pathname" /> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="6f693-200">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-200">Optional.</span></span> <span data-ttu-id="6f693-201">値がファイル属性を指定する列挙式または数式。</span><span class="sxs-lookup"><span data-stu-id="6f693-201">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="6f693-202">省略した場合、<see langword="Dir" /> は、<paramref name="Pathname" /> に一致する、属性のないファイルを返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-202">If omitted, <see langword="Dir" /> returns files that match <paramref name="Pathname" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="6f693-203">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-203">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="6f693-204"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-204">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="6f693-205">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-205">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="6f693-206">指定されたパターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="6f693-206">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-207">`Dir` 関数では、複数のファイルを指定するために複数の文字 (`*`) と1文字の (`?`) ワイルドカードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-207">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
 <span data-ttu-id="6f693-208">`VbVolume` は、特定のファイル名ではなく、ドライブのボリュームラベルを返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-208">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
 <span data-ttu-id="6f693-209">`Dir` 関数を初めて呼び出すときは、`PathName` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-209">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="6f693-210">次の項目を取得するには、パラメーターを使用せずに `Dir` 関数への後続の呼び出しを行うことができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-210">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-211">正常に実行するには、`Dir` 関数で、実行中のコードに対して <xref:System.Security.Permissions.FileIOPermission> の <xref:System.Security.Permissions.FileIOPermissionAccess.Read> と <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> フラグを与える必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-211">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="6f693-212">詳細については、「<xref:System.Security.Permissions.FileIOPermission>、<xref:System.Security.SecurityException>、および[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-212">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
 <span data-ttu-id="6f693-213">`Attributes` 引数の列挙値は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="6f693-213">The `Attributes` argument enumeration values are as follows:</span></span>  
|<span data-ttu-id="6f693-214">[値]</span><span class="sxs-lookup"><span data-stu-id="6f693-214">Value</span></span>|<span data-ttu-id="6f693-215">定数</span><span class="sxs-lookup"><span data-stu-id="6f693-215">Constant</span></span>|<span data-ttu-id="6f693-216">説明</span><span class="sxs-lookup"><span data-stu-id="6f693-216">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="6f693-217">既定モード。</span><span class="sxs-lookup"><span data-stu-id="6f693-217">Default.</span></span> <span data-ttu-id="6f693-218">属性を持たないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-218">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="6f693-219">属性を持たないファイルに加えて、読み取り専用ファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-219">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="6f693-220">属性を持たないファイルに加えて、隠しファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-220">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="6f693-221">属性を持たないファイルに加えて、システムファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-221">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="6f693-222">ボリュームラベルを指定します。他の属性が指定されている場合、`vbVolume` は無視されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-222">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="6f693-223">属性を持たないファイルに加えて、ディレクトリまたはフォルダーを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-223">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="6f693-224">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="6f693-224">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="6f693-225">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="6f693-225">File has a different name.</span></span>|  
> [!NOTE]
>  <span data-ttu-id="6f693-226">これらの列挙は Visual Basic 言語によって指定され、実際の値の代わりにコード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-226">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
## Examples  
 <span data-ttu-id="6f693-227">この例では、`Dir` 関数を使用して、特定のファイルとディレクトリが存在するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6f693-227">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EOF(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-228">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-228">Required.</span></span> <span data-ttu-id="6f693-229">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="6f693-229">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="6f693-230"><see langword="True" /> モードまたはシーケンシャル <see langword="Random" /> モードで開いたファイルの現在位置がファイルの末尾に達している場合、ブール値 <see langword="Input" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-230">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="6f693-231"><see langword="True" /> モードまたはシーケンシャル <see langword="Random" /> モードで開いたファイルの現在位置がファイルの末尾に達している場合、ブール値 <see langword="Input" /> です。</span><span class="sxs-lookup"><span data-stu-id="6f693-231">A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-232">ファイルの末尾を越えて入力を取得しようとしたときに発生したエラーを回避するには、`EOF` を使用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-232">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="6f693-233">`EOF` 関数は、ファイルの末尾に到達するまで `False` を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-233">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="6f693-234">`Random` または `Binary` アクセスのために開かれたファイルを使用すると `EOF`、最後に実行された `FileGet` 関数がレコード全体を読み取ることができなくなるまで、`False` が返されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-234">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="6f693-235">`Binary` アクセスのために開かれたファイルでは、`EOF` が `True` 返されるまで、`Input` 関数を使用してファイルを読み取ろうとすると、エラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-235">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="6f693-236">`Input`でバイナリファイルを読み取る場合は `EOF` ではなく `LOF` および `Loc` 関数を使用するか、`Get` 関数を使用する場合は `EOF` を使用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-236">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="6f693-237">`Output`用に開かれたファイルでは、`EOF` は常に `True`を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-237">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-238">この例では、`EOF` 関数を使用して、ファイルの終わりを検出します。</span><span class="sxs-lookup"><span data-stu-id="6f693-238">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="6f693-239">この例では、`Testfile` が複数行のテキストを含むテキストファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-239">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-240">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-240">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-241">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-241">Required.</span></span> <span data-ttu-id="6f693-242"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="6f693-242"><see langword="Integer" />.</span></span> <span data-ttu-id="6f693-243">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-243">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="6f693-244"><see langword="FileOpen" /> 関数を使用して開いたファイルのファイル モードを表す列挙体を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-244">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="6f693-245"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="FileAttr" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-245">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="6f693-246">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-246">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="6f693-247">次の列挙型値は、ファイルのアクセス モードを示します。</span><span class="sxs-lookup"><span data-stu-id="6f693-247">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="6f693-248">[値]</span><span class="sxs-lookup"><span data-stu-id="6f693-248">Value</span></span> 
 </term><description> <span data-ttu-id="6f693-249">モード</span><span class="sxs-lookup"><span data-stu-id="6f693-249">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="6f693-250">1</span><span class="sxs-lookup"><span data-stu-id="6f693-250">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="6f693-251">2</span><span class="sxs-lookup"><span data-stu-id="6f693-251">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="6f693-252">4</span><span class="sxs-lookup"><span data-stu-id="6f693-252">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="6f693-253">8</span><span class="sxs-lookup"><span data-stu-id="6f693-253">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="6f693-254">32</span><span class="sxs-lookup"><span data-stu-id="6f693-254">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-255">この関数は、`FileOpen` 関数を使用して開かれたファイルのファイルモードを表す列挙体を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-255">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-256">この例では、`FileAttr` 関数を使用して、開いているファイルのファイルモードを返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-256">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-257">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-257">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileClose(int32[] FileNumbers) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="6f693-258">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-258">Optional.</span></span> <span data-ttu-id="6f693-259">閉じる対象となる、0 以上のチャネルで構成されるパラメーター配列。</span><span class="sxs-lookup"><span data-stu-id="6f693-259">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="6f693-260"><see langword="FileOpen" /> 関数で開いたファイルへの入出力を終了して、ファイルを閉じます。</span><span class="sxs-lookup"><span data-stu-id="6f693-260">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="6f693-261"><see langword="My" /> を使用すると、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-261"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="6f693-262">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-262">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-263">`FileClose` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-263">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-264">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-264">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-265">詳細については、「[方法: StreamReader を使用してファイルからテキストを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)」、「[方法: StreamWriter を使用してファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)」、「[チュートリアル: Visual Basic でのファイルとディレクトリの操作](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-265">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="6f693-266">`FileNumbers`を省略した場合は、`FileOpen` 関数によって開かれたすべてのアクティブなファイルが閉じられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-266">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="6f693-267">`Output` または `Append`用に開かれたファイルを閉じると、出力の最終的なバッファーがそのファイルのオペレーティングシステムバッファーに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-267">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="6f693-268">閉じたファイルに関連付けられているすべてのバッファー領域が解放されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-268">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="6f693-269">`FileClose` 関数が実行されると、ファイルとファイル番号の関連付けが終了します。</span><span class="sxs-lookup"><span data-stu-id="6f693-269">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-270">この例では、`FileClose` 関数を使用して、`Input`用に開かれたファイルを閉じます。</span><span class="sxs-lookup"><span data-stu-id="6f693-270">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-271"><paramref name="FileNumber" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="6f693-271"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="6f693-272">End ステートメント</span><span class="sxs-lookup"><span data-stu-id="6f693-272">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="6f693-273">Stop ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-273">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-274">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-274">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileCopy(string Source, string Destination) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="6f693-275">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-275">Required.</span></span> <span data-ttu-id="6f693-276">コピーするファイルの名前を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-276">A string expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="6f693-277"><paramref name="Source" /> には、コピー先ファイルのディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-277"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="6f693-278">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-278">Required.</span></span> <span data-ttu-id="6f693-279">コピー先のファイルの名前を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-279">A string expression that specifies the destination file name.</span></span> <span data-ttu-id="6f693-280"><paramref name="Destination" /> には、コピー先ファイルのディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-280"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="6f693-281">ファイルをコピーします。</span><span class="sxs-lookup"><span data-stu-id="6f693-281">Copies a file.</span></span> <span data-ttu-id="6f693-282"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="FileCopy" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-282">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="6f693-283">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-283">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-284">現在開いているファイルで `FileCopy` 関数を使用しようとすると、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-284">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="6f693-285">`FileCopy` ローカルドライブでの完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-285">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-286">この例では、`FileCopy` 関数を使用して、あるファイルを別のファイルにコピーします。</span><span class="sxs-lookup"><span data-stu-id="6f693-286">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="6f693-287">この例では、`SrcFile` がデータを含むファイルであることを想定しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-287">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-288"><paramref name="Source" /> または <paramref name="Destination" /> が無効であるか、指定されていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-288"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-289">ファイルは既に開いています。</span><span class="sxs-lookup"><span data-stu-id="6f693-289">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6f693-290">ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="6f693-290">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="6f693-291">方法 : Visual Basic でファイルのコピーを別のディレクトリに作成する</span><span class="sxs-lookup"><span data-stu-id="6f693-291">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="6f693-292">方法 : Visual Basic でファイルのコピーを同じディレクトリに作成する</span><span class="sxs-lookup"><span data-stu-id="6f693-292">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="6f693-293">方法 : Visual Basic でディレクトリを別のディレクトリにコピーする</span><span class="sxs-lookup"><span data-stu-id="6f693-293">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FileDateTime(string PathName) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="6f693-294">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-294">Required.</span></span> <span data-ttu-id="6f693-295">ファイル名を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-295">A string expression that specifies a file name.</span></span> <span data-ttu-id="6f693-296"><paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-296"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="6f693-297">ファイルへの書き込み日時を示す <see langword="Date" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-297">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="6f693-298"><see langword="My" /> 機能を使用すると、<see langword="FileDateTime" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-298">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="6f693-299">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-299">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="6f693-300">ファイルの作成日時または最終変更日時を示す <see langword="Date" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-300"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6f693-301">この例では、`FileDateTime` 関数を使用して、ファイルが作成された日時または最後に変更された日時を確認します。</span><span class="sxs-lookup"><span data-stu-id="6f693-301">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="6f693-302">表示される日付と時刻の形式は、システムのロケール設定に基づいています。</span><span class="sxs-lookup"><span data-stu-id="6f693-302">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-303"><paramref name="PathName" /> が無効です。またはワイルドカードを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="6f693-303"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6f693-304">対象のファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="6f693-304">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-305">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-305">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6f693-306">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-306">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-307"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-307">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-308">詳細については、「 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-308">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-309">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-309">Required.</span></span> <span data-ttu-id="6f693-310">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-310">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-311">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-311">Required.</span></span> <span data-ttu-id="6f693-312">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-312">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-313">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-313">Optional.</span></span> <span data-ttu-id="6f693-314">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-314">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="6f693-315">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-315">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-316"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-316">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-317">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-317">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-318">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-318">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-319">`FileGet` で読み取られるデータは、通常、`FilePut`を持つファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-319">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-320">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-320">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-321">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-321">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-322">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-322">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-323">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-323">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-324">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-324">Random Mode</span></span>  
 <span data-ttu-id="6f693-325">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-325">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-326">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-326">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-327">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-327">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-328">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-328">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-329">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-329">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-330">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-330">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-331">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-331">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-332">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-332">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-333">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-333">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-334">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-334">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-335">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-335">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-336">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-336">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-337">記述子が使用されていない場合は、`FileGet` に渡される配列のサイズと境界によって、読み取る内容が決まります。</span><span class="sxs-lookup"><span data-stu-id="6f693-337">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-338">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-338">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-339">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-339">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-340">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-340">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-341">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-341">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-342">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-342">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-343">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-343">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-344">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-344">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-345">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-345">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-346">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-347">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-347">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-348">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-348">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-349">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-349">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-350">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-350">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-351">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-351">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-352">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-352">Binary Mode</span></span>  
 <span data-ttu-id="6f693-353">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-353">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-354">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-354">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-355">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-355">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-356">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-356">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-357">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-357">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-358">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-358">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-359">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-359">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-360">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-360">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-361">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-361">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-362"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-362"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-363">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-363">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-364">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-364">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-365">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-365">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-366">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-366">Required.</span></span> <span data-ttu-id="6f693-367">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-367">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-368">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-368">Required.</span></span> <span data-ttu-id="6f693-369">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-369">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-370">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-370">Optional.</span></span> <span data-ttu-id="6f693-371">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-371">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="6f693-372">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-372">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-373"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-373">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-374">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-374">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-375">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-375">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-376">`FileGet` で読み取られるデータは、通常、`FilePut`を持つファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-376">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-377">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-377">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-378">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-378">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-379">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-379">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-380">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-380">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-381">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-381">Random Mode</span></span>  
 <span data-ttu-id="6f693-382">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-382">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-383">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-383">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-384">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-384">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-385">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-385">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-386">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-386">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-387">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-387">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-388">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-388">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-389">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-389">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-390">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-390">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-391">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-392">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-392">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-393">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-393">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-394">記述子が使用されていない場合は。</span><span class="sxs-lookup"><span data-stu-id="6f693-394">If the descriptor is not used.</span></span> <span data-ttu-id="6f693-395">次に、に渡される配列のサイズと境界を `FileGet` て、読み取る対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-395">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-396">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-396">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-397">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-397">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-398">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-398">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-399">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-399">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-400">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-400">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-401">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-401">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-402">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-402">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-403">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-403">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-404">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-405">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-405">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-406">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-406">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-407">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-407">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-408">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-408">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-409">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-409">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-410">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-410">Binary Mode</span></span>  
 <span data-ttu-id="6f693-411">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-411">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-412">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-412">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-413">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-413">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-414">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-414">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-415">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-415">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-416">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-416">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-417">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-417">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-418">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-418">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-419">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-419">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-420"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-420"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-421">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-422">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-422">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-423">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-423">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-424">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-424">Required.</span></span> <span data-ttu-id="6f693-425">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-425">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-426">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-426">Required.</span></span> <span data-ttu-id="6f693-427">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-427">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-428">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-428">Optional.</span></span> <span data-ttu-id="6f693-429">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-429">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="6f693-430">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-430">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-431"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-431">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-432">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-432">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-433">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-433">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-434">`FileGet` で読み取られるデータは、通常、`FilePut`を持つファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-434">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-435">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-435">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-436">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-436">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-437">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-437">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-438">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-438">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-439">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-439">Random Mode</span></span>  
 <span data-ttu-id="6f693-440">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-440">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-441">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-441">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-442">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-442">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-443">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-443">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-444">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-444">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-445">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-445">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-446">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-446">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-447">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-447">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-448">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-448">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-449">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-449">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-450">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-450">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-451">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-451">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-452">記述子が使用されていない場合は、`FileGet` に渡される配列のサイズと境界によって、読み取る内容が決まります。</span><span class="sxs-lookup"><span data-stu-id="6f693-452">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-453">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-453">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-454">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-454">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-455">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-455">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-456">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-456">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-457">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-457">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-458">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-458">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-459">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-459">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-460">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-460">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-461">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-462">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-462">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-463">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-463">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-464">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-464">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-465">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-465">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-466">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-466">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-467">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-467">Binary Mode</span></span>  
 <span data-ttu-id="6f693-468">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-468">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-469">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-469">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-470">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-470">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-471">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-471">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-472">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-472">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-473">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-473">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-474">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-474">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-475">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-475">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-476">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-476">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-477"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-477"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-478">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-478">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-479">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-479">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-480">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-480">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-481">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-481">Required.</span></span> <span data-ttu-id="6f693-482">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-482">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-483">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-483">Required.</span></span> <span data-ttu-id="6f693-484">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-484">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-485">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-485">Optional.</span></span> <span data-ttu-id="6f693-486">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-486">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="6f693-487">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-487">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-488"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-488">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-489">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-489">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-490">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-490">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-491">`FileGet` で読み取られるデータは、通常、`FilePut`を持つファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-491">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-492">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-492">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-493">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-493">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-494">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-494">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-495">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-495">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-496">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-496">Random Mode</span></span>  
 <span data-ttu-id="6f693-497">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-497">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-498">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-498">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-499">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-499">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-500">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-500">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-501">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-501">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-502">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-502">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-503">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-503">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-504">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-504">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-505">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-505">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-506">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-506">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-507">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-507">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-508">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-508">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-509">記述子が使用されていない場合は、`FileGet` に渡される配列のサイズと境界によって、読み取る内容が決まります。</span><span class="sxs-lookup"><span data-stu-id="6f693-509">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-510">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-510">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-511">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-511">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-512">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-512">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-513">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-513">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-514">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-514">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-515">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-515">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-516">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-516">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-517">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-517">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-518">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-519">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-519">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-520">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-520">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-521">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-521">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-522">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-522">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-523">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-523">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-524">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-524">Binary Mode</span></span>  
 <span data-ttu-id="6f693-525">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-525">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-526">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-526">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-527">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-527">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-528">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-528">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-529">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-529">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-530">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-530">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-531">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-531">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-532">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-532">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-533">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-533">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-534"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-534"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-535">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-535">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-536">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-536">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-537">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-537">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-538">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-538">Required.</span></span> <span data-ttu-id="6f693-539">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-539">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-540">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-540">Required.</span></span> <span data-ttu-id="6f693-541">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-541">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-542">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-542">Optional.</span></span> <span data-ttu-id="6f693-543">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-543">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="6f693-544">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-544">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-545"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-546">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-546">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-547">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-547">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-548">`FileGet` で読み取られるデータは通常、`FilePut`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-548">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-549">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-549">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-550">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-550">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-551">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-551">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-552">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-552">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-553">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-553">Random Mode</span></span>  
 <span data-ttu-id="6f693-554">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-554">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-555">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-555">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-556">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-556">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-557">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-557">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-558">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-558">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-559">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-559">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-560">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-560">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-561">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-561">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-562">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-562">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-563">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-563">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-564">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-564">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-565">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-565">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-566">記述子が使用されていない場合は、`FileGet` に渡される配列のサイズと境界によって、読み取る内容が決まります。</span><span class="sxs-lookup"><span data-stu-id="6f693-566">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-567">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-568">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-569">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-569">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-570">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-571">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-571">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-572">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-572">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-573">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-573">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-574">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-574">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-575">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-576">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-576">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-577">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-577">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-578">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-578">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-579">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-579">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-580">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-580">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-581">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-581">Binary Mode</span></span>  
 <span data-ttu-id="6f693-582">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-582">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-583">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-583">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-584">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-584">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-585">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-585">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-586">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-586">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-587">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-587">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-588">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-588">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-589">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-589">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-590">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-590">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-591"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-591"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-592">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-592">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-593">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-593">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-594">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-594">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-595">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-595">Required.</span></span> <span data-ttu-id="6f693-596">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-596">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-597">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-597">Required.</span></span> <span data-ttu-id="6f693-598">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-598">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-599">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-599">Optional.</span></span> <span data-ttu-id="6f693-600">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-600">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="6f693-601">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-601">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-602"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-603">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-604">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-604">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-605">`FileGet` で読み取られるデータは通常、`FilePut`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-605">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-606">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-606">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-607">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-607">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-608">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-608">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-609">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-609">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-610">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-610">Random Mode</span></span>  
 <span data-ttu-id="6f693-611">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-612">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-612">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-613">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-614">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-615">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-615">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-616">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-616">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-617">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-617">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-618">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-618">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-619">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-619">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-620">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-621">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-621">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-622">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-622">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-623">記述子が使用されていない場合は、`FileGet` に渡される配列のサイズと境界によって、読み取る内容が決まります。</span><span class="sxs-lookup"><span data-stu-id="6f693-623">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-624">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-625">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-626">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-626">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-627">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-628">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-628">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-629">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-629">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-630">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-630">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-631">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-631">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-632">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-633">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-633">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-634">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-634">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-635">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-635">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-636">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-636">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-637">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-637">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-638">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-638">Binary Mode</span></span>  
 <span data-ttu-id="6f693-639">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-640">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-641">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-642">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-642">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-643">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-643">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-644">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-644">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-645">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-645">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-646">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-646">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-647">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-647">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-648"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-648"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-649">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-649">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-650">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-650">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-651">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-652">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-652">Required.</span></span> <span data-ttu-id="6f693-653">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-654">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-654">Required.</span></span> <span data-ttu-id="6f693-655">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-655">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-656">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-656">Optional.</span></span> <span data-ttu-id="6f693-657">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="6f693-658">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-658">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-659"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-660">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-661">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-661">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-662">`FileGet` で読み取られるデータは通常、`FilePut`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-662">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-663">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-664">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-664">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-665">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-665">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-666">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-666">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-667">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-667">Random Mode</span></span>  
 <span data-ttu-id="6f693-668">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-668">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-669">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-669">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-670">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-670">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-671">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-671">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-672">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-672">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-673">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-673">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-674">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-674">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-675">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-675">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-676">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-676">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-677">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-677">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-678">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-678">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-679">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-679">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-680">記述子が使用されていない場合は、`FileGet` に渡される配列のサイズと境界によって、読み取る内容が決まります。</span><span class="sxs-lookup"><span data-stu-id="6f693-680">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-681">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-682">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-683">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-683">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-684">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-685">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-685">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-686">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-686">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-687">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-687">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-688">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-688">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-689">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-690">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-690">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-691">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-691">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-692">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-693">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-693">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-694">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-695">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-695">Binary Mode</span></span>  
 <span data-ttu-id="6f693-696">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-696">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-697">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-697">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-698">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-698">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-699">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-699">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-700">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-700">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-701">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-701">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-702">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-702">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-703">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-703">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-704">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-704">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-705"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-705"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-706">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-706">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-707">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-707">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-708">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-709">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-709">Required.</span></span> <span data-ttu-id="6f693-710">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-711">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-711">Required.</span></span> <span data-ttu-id="6f693-712">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-712">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-713">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-713">Optional.</span></span> <span data-ttu-id="6f693-714">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="6f693-715">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-715">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-716"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-717">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-718">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-718">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-719">`FileGet` で読み取られるデータは通常、`FilePut`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-719">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-720">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-721">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-721">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-722">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-722">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-723">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-723">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-724">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-724">Random Mode</span></span>  
 <span data-ttu-id="6f693-725">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-725">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-726">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-726">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-727">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-727">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-728">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-728">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-729">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-729">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-730">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-730">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-731">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-731">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-732">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-732">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-733">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-733">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-734">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-734">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-735">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-735">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-736">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-736">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-737">記述子が使用されていない場合は、`FileGet` に渡される配列のサイズと境界によって、読み取る内容が決まります。</span><span class="sxs-lookup"><span data-stu-id="6f693-737">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-738">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-738">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-739">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-739">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-740">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-741">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-741">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-742">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-742">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-743">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-743">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-744">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-744">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-745">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-745">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-746">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-747">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-747">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-748">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-748">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-749">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-750">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-750">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-751">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-752">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-752">Binary Mode</span></span>  
 <span data-ttu-id="6f693-753">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-753">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-754">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-754">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-755">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-755">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-756">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-756">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-757">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-757">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-758">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-758">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-759">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-759">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-760">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-760">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-761">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-761">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-762"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-762"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-763">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-763">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-764">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-764">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-765">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-765">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-766">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-766">Required.</span></span> <span data-ttu-id="6f693-767">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-767">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-768">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-768">Required.</span></span> <span data-ttu-id="6f693-769">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-769">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-770">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-770">Optional.</span></span> <span data-ttu-id="6f693-771">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-771">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="6f693-772">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-772">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-773"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-774">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-775">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-775">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-776">`FileGet` で読み取られるデータは通常、`FilePut`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-776">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-777">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-777">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-778">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-778">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-779">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-779">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-780">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-780">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-781">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-781">Random Mode</span></span>  
 <span data-ttu-id="6f693-782">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-783">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-783">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-784">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-785">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-786">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-786">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-787">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-787">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-788">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-788">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-789">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-789">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-790">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-790">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-791">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-791">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-792">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-792">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-793">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-793">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-794">記述子が使用されていない場合は、`FileGet` に渡される配列のサイズと境界によって、読み取る内容が決まります。</span><span class="sxs-lookup"><span data-stu-id="6f693-794">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-795">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-795">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-796">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-796">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-797">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-798">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-798">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-799">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-799">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-800">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-800">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-801">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-801">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-802">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-802">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-803">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-804">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-804">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-805">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-805">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-806">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-807">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-807">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-808">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-808">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-809">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-809">Binary Mode</span></span>  
 <span data-ttu-id="6f693-810">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-811">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-812">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-813">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-813">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-814">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-814">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-815">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-815">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-816">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-816">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-817">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-817">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-818">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-818">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-819"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-819"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-820">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-820">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-821">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-822">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-823">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-823">Required.</span></span> <span data-ttu-id="6f693-824">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-824">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-825">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-825">Required.</span></span> <span data-ttu-id="6f693-826">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-826">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-827">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-827">Optional.</span></span> <span data-ttu-id="6f693-828">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="6f693-829">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-829">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-830"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-831">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-832">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-832">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-833">`FileGet` で読み取られるデータは通常、`FilePut`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-833">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-834">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-834">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-835">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-835">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-836">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-836">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-837">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-837">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-838">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-838">Random Mode</span></span>  
 <span data-ttu-id="6f693-839">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-839">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-840">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-840">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-841">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-841">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-842">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-842">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-843">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-843">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-844">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-844">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-845">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-845">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-846">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-846">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-847">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-847">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-848">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-848">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-849">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-849">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-850">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-850">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-851">記述子が使用されていない場合は、`FileGet` に渡される配列のサイズと境界によって、読み取る内容が決まります。</span><span class="sxs-lookup"><span data-stu-id="6f693-851">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-852">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-852">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-853">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-853">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-854">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-855">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-855">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-856">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-856">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-857">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-857">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-858">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-858">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-859">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-859">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-860">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-861">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-861">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-862">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-862">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-863">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-863">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-864">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-864">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-865">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-865">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-866">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-866">Binary Mode</span></span>  
 <span data-ttu-id="6f693-867">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-867">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-868">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-868">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-869">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-869">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-870">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-870">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-871">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-871">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-872">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-872">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-873">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-873">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-874">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-874">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-875">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-875">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-876"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-876"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-877">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-877">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-878">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-878">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-879">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-879">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-880">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-880">Required.</span></span> <span data-ttu-id="6f693-881">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-881">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-882">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-882">Required.</span></span> <span data-ttu-id="6f693-883">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-883">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-884">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-884">Optional.</span></span> <span data-ttu-id="6f693-885">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-885">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="6f693-886">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-886">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-887"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-887">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-888">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-888">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-889">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-889">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-890">`FileGet` で読み取られるデータは通常、`FilePut`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-890">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-891">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-891">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-892">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-892">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-893">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-893">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-894">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-894">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-895">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-895">Random Mode</span></span>  
 <span data-ttu-id="6f693-896">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-896">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-897">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-897">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-898">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-898">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-899">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-899">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-900">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-900">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-901">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-901">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-902">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-902">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-903">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-903">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-904">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-904">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-905">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-905">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-906">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-906">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-907">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-907">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-908">記述子が使用されていない場合は、`FileGet` に渡される配列のサイズと境界によって、読み取る内容が決まります。</span><span class="sxs-lookup"><span data-stu-id="6f693-908">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-909">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-909">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-910">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-910">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-911">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-911">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-912">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-912">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-913">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-913">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-914">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-914">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-915">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-915">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-916">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-916">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-917">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-918">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-918">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-919">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-919">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-920">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-920">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-921">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-921">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-922">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-922">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-923">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-923">Binary Mode</span></span>  
 <span data-ttu-id="6f693-924">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-924">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-925">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-925">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-926">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-926">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-927">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-927">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-928">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-928">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-929">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-929">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-930">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-930">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-931">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-931">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-932">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-932">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-933"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-933"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-934">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-934">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-935">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-935">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-936">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-936">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-937">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-937">Required.</span></span> <span data-ttu-id="6f693-938">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-938">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-939">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-939">Required.</span></span> <span data-ttu-id="6f693-940">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-940">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-941">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-941">Optional.</span></span> <span data-ttu-id="6f693-942">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-942">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="6f693-943">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-943">Optional.</span></span> <span data-ttu-id="6f693-944">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-944">Applies only when writing a string.</span></span> <span data-ttu-id="6f693-945">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-945">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="6f693-946">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="6f693-946">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="6f693-947">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-947">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-948"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-948">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-949">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-949">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-950">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-950">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-951">`FileGet` で読み取られるデータは通常、`FilePut`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-951">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-952">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-952">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-953">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-953">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-954">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-954">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-955">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-955">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-956">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-956">Random Mode</span></span>  
 <span data-ttu-id="6f693-957">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-957">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-958">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-958">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-959">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-959">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-960">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-960">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-961">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-961">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-962">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-962">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-963">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-963">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-964">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-964">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-965">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-965">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-966">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-966">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-967">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-967">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-968">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-968">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-969">記述子が使用されていない場合は、`FileGet` に渡される配列のサイズと境界によって、読み取る内容が決まります。</span><span class="sxs-lookup"><span data-stu-id="6f693-969">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-970">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-970">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-971">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-971">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-972">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-972">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-973">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-973">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-974">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-974">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-975">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-975">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-976">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-976">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-977">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-977">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-978">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-979">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-979">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-980">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-980">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-981">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-981">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-982">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-982">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-983">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-983">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-984">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-984">Binary Mode</span></span>  
 <span data-ttu-id="6f693-985">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-985">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-986">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-986">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-987">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-987">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-988">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-988">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-989">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-989">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-990">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-990">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-991">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-991">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-992">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-992">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-993">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-993">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-994"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-994"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-995">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-996">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-996">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-997">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-997">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-998">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-998">Required.</span></span> <span data-ttu-id="6f693-999">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-999">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1000">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1000">Required.</span></span> <span data-ttu-id="6f693-1001">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-1001">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1002">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1002">Optional.</span></span> <span data-ttu-id="6f693-1003">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1003">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="6f693-1004">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1004">Optional.</span></span> <span data-ttu-id="6f693-1005">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1005">Applies only when writing an array.</span></span> <span data-ttu-id="6f693-1006">配列を動的として扱うかどうか、およびサイズと境界を表す配列記述子が必要かどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1006">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="6f693-1007">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1007">Optional.</span></span> <span data-ttu-id="6f693-1008">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1008">Applies only when writing a string.</span></span> <span data-ttu-id="6f693-1009">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1009">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="6f693-1010">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1010">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="6f693-1011">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1011">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="6f693-1012"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="6f693-1013">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1014">`FileGet` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1014">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1015">`FileGet` で読み取られるデータは通常、`FilePut`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1015">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6f693-1016">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1016">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1017">`RecordNumber`を省略した場合は、最後の `FileGet` または `FilePut` 関数の次のレコードまたはバイト (または最後の `Seek` 関数が指す) が読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1017">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-1018">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1018">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-1019">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1019">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1020">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1020">Random Mode</span></span>  
 <span data-ttu-id="6f693-1021">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1021">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1022">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGet` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1022">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1023">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1023">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1024">埋め込みデータの量はいかなる確実性でも判断できないため、通常は、レコードの長さを読み取り中のデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1024">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-1025">既定では、に読み込む変数が文字列の場合、`FileGet` は文字列長を含む2バイト記述子を読み取り、変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1025">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1026">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1026">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1027">Visual Basic 6.0 以前のバージョンでは固定長文字列がサポートされています。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1027">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-1028">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1028">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1029">に読み取る変数が配列の場合は、配列のサイズと次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1029">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6f693-1030">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1030">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1031">配列を読み取るときは、配列の記述方法と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1031">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6f693-1032">記述子を使用して記述されている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1032">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6f693-1033">記述子が使用されていない場合は、`FileGet` に渡される配列のサイズと境界によって、読み取る内容が決まります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1033">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6f693-1034">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1034">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1035">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1035">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1036">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1036">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1037">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1037">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6f693-1038">218バイトは次のように分散されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1038">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6f693-1039">記述子の18バイト: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6f693-1039">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6f693-1040">データの200バイト: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1040">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-1041">読み取り先の変数が、可変長文字列またはオブジェクトではなく、他の型の変数である場合、`FileGet` は変数データだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1041">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6f693-1042">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、読み取るデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-1043">`FileGet` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1043">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-1044">ディスク上では、(`FilePut`で記述された) ユーザー定義型の動的配列に、長さが 2 + 次元数の8倍の記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1044">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1045">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、個々の要素を読み取るために必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1045">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6f693-1046">これには、すべての配列とその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1046">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-1047">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1047">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1048">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1048">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1049">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1049">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1050">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1050">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1051">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1051">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1052">`FileGet` は、すべての変数をディスクから連続して読み取ります。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1052">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1053">構造体の配列以外の配列の場合、`FileGet` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1053">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6f693-1054">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1054">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6f693-1055">`FileGet` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1055">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1056">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1056">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6f693-1057">`FileGet` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1057">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1058"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1058"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1059">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1059">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-1060">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-1060">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1061">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1061">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1062">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1062">Required.</span></span> <span data-ttu-id="6f693-1063">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1063">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1064">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1064">Required.</span></span> <span data-ttu-id="6f693-1065">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="6f693-1065">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1066">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1066">Optional.</span></span> <span data-ttu-id="6f693-1067">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1067">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1068">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1068">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="6f693-1069"><see langword="My" /> 機能を使用すると、<see langword="FileGetObject" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1069">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="6f693-1070">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1070">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1071">`Integer`、`Long`、`Short`などの別の型ではなく型 `Object` が返される場合、コンパイル時のあいまいさを避けるために、`FileGet` の代わりに `FileGetObject` 関数が使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1071">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="6f693-1072">`Variant` 型を書き出す場合は、`FileGetObject` が必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1072">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="6f693-1073">2番目のパラメーターにオブジェクトを使用している場合は、常に `FilePutObject` と `FileGetObject`を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1073">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="6f693-1074">`FileGetObject` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1074">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1075">`FileGetObject` で読み取られるデータは、通常、`FilePutObject`を使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1075">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="6f693-1076">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1076">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1077">`RecordNumber`を省略した場合、`FileGetObject` は最後の `FileGetObject` または `FilePutObject` 関数の後 (または最後の `Seek` 関数によってポイントされた) の後にレコードまたはバイトを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1077">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1078">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1078">Random Mode</span></span>  
 <span data-ttu-id="6f693-1079">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1079">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1080">読み取られるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FileGetObject` は、レコード長の境界の後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1080">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1081">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1081">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1082">埋め込みデータの量は正確には特定できないため、レコードの長さは、読み取るデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1082">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6f693-1083">に読み取る変数が文字列の場合、既定では `FileGetObject` は文字列長を含む2バイト記述子を読み取り、次に変数に入力されたデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1083">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1084">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1084">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1085">Visual Basic 6.0 以前のバージョンでは固定長の文字列がサポートされており、ファイルに読み取るときに長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1085">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6f693-1086">記述子を使用せずに文字列を読み取る場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1086">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1087">に読み取る変数が配列の場合、`FileOpen` 関数の `RecordLength` パラメーターで指定されるレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1087">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1088">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1088">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1089">長さは 2 + 8 ×次元の数になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1089">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="6f693-1090">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1090">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="6f693-1091">218バイトは次のように分散されます。記述子の場合は18バイト (2 + 8 \* 2)、データの場合は100バイト (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1091">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6f693-1092">`FileGetObject` は、それぞれが個別に読み取られているかのように構造体の要素を読み取ります。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1092">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6f693-1093">ディスク上では、(`FilePutObject`を使用して記述された) ユーザー定義型の動的配列には、長さが 2 + 次元数が8倍である記述子 (2 + 8 \* NumberOfDimensions) がプレフィックスとして付けられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1093">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="6f693-1094">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列とその記述子を含む、個々の要素の読み取りに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1094">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="6f693-1095"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> クラスは、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1095">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1096">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1096">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1097">`Binary` モードで開かれたファイルの場合、`Random` のすべての規則が適用されます。ただし、次のような例外があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1097">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="6f693-1098">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1098">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1099">`FileGetObject` は、ディスクからすべての変数を連続的に読み取ります。つまり、レコード間に埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1099">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1100">構造体の配列以外の配列の場合、`FileGetObject` はデータだけを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1100">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="6f693-1101">記述子が読み取られません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1101">No descriptor is read.</span></span>  
  
 <span data-ttu-id="6f693-1102">`FileGetObject` は、2バイト長の記述子を予期せずに、構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1102">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1103">読み取るバイト数は、既に文字列に含まれている文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1103">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-1104">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1104">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-1105">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1105">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1106">次の例では、レコードをテストファイルに読み込んで取得します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1106">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-1107">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-1107">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1108">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1108">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 FileLen(string PathName) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="6f693-1109">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1109">Required.</span></span> <span data-ttu-id="6f693-1110">ファイルを指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1110">A string expression that specifies a file.</span></span> <span data-ttu-id="6f693-1111"><paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1111"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="6f693-1112">ファイルの長さをバイト数で指定する値を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1112">Returns a value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="6f693-1113"><see langword="My" /> 機能を使用すると、<see langword="FileLen" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="6f693-1114">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1114">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="6f693-1115">バイト単位のファイルの長さです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1115">The length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1116">`FileLen` 関数が呼び出されたときに、指定したファイルが開いている場合、返される値は、ファイルが開かれたときのファイルのサイズを表します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1116">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-1117">開いているファイルの現在の長さを取得するには、`LOF` 関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1117">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1118">この例では、`FileLen` 関数を使用して、ファイルの長さをバイト単位で返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1118">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="6f693-1119">この例では、`TestFile` がデータを含むファイルであることを想定しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1119">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6f693-1120">ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1120">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-1121">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-1121">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1122">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1122">Required.</span></span> <span data-ttu-id="6f693-1123">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1123">Any valid file number.</span></span> <span data-ttu-id="6f693-1124"><see langword="FreeFile" /> 関数を使用して、次に使用できるファイル番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1124">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="6f693-1125">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1125">Required.</span></span> <span data-ttu-id="6f693-1126">ファイル名を指定する文字列式。ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1126">A string expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="6f693-1127">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1127">Required.</span></span> <span data-ttu-id="6f693-1128">ファイル モード (<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" />、または <see langword="Random" />) を指定する列挙体。</span><span class="sxs-lookup"><span data-stu-id="6f693-1128">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="6f693-1129">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenMode" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1129">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="6f693-1130">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1130">Optional.</span></span> <span data-ttu-id="6f693-1131">開いているファイルで許可されている操作 (<see langword="Read" />、<see langword="Write" />、または <see langword="ReadWrite" />) を示す列挙体。</span><span class="sxs-lookup"><span data-stu-id="6f693-1131">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="6f693-1132">既定値は <see langword="ReadWrite" /> です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1132">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="6f693-1133">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenAccess" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1133">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="6f693-1134">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1134">Optional.</span></span> <span data-ttu-id="6f693-1135">他のプロセスによって開かれたファイルで許可されていない操作 (<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" />、および <see langword="Lock Read Write" />) を指定する列挙体。</span><span class="sxs-lookup"><span data-stu-id="6f693-1135">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="6f693-1136">既定値は <see langword="Lock Read Write" /> です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1136">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="6f693-1137">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenShare" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1137">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="6f693-1138">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1138">Optional.</span></span> <span data-ttu-id="6f693-1139">32,767 以下の値 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1139">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="6f693-1140">ランダム アクセス ファイルの場合は、レコード長を表します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1140">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="6f693-1141">シーケンシャル ファイルの場合は、バッファー内の文字数を表します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1141">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="6f693-1142">ファイルを開いて入出力を行います。</span><span class="sxs-lookup"><span data-stu-id="6f693-1142">Opens a file for input or output.</span></span> <span data-ttu-id="6f693-1143"><see langword="My" /> 機能を使用すると、<see langword="FileOpen" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1143">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="6f693-1144">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1144">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1145">`FileOpen` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1145">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-1146">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1146">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-1147">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1147">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-1148">I/o 操作を実行する前に、ファイルを開く必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1148">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="6f693-1149">`FileOpen` は、i/o 用のバッファーをファイルに割り当て、バッファーで使用するアクセスモードを決定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1149">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-1150">ファイルに書き込むときに、書き込み先のファイルが存在しない場合、アプリケーションでファイルを作成する必要がある場合があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1150">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="6f693-1151">これを行うには、ファイルを作成するディレクトリに対するアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1151">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="6f693-1152">ただし、`FileName` によって指定されたファイルが存在する場合、アプリケーションはファイル自体に対してのみ `Write` アクセス許可を必要とします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1152">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="6f693-1153">可能な限り、セキュリティを強化するために、展開中にファイルを作成し、そのファイルに対する `Write` アクセス許可を付与します (ディレクトリ全体ではなく)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1153">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="6f693-1154">セキュリティを強化するために、ルートディレクトリや Program Files ディレクトリではなく、ユーザーディレクトリにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1154">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="6f693-1155">開くチャネルは、`FreeFile()` 関数を使用して見つけることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1155">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-1156">`FileOpen` 関数は `FileIOPermissionAccess` 列挙からアクセス `Read` 必要があります。これは、部分信頼状況での実行に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1156">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="6f693-1157">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙型」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1157">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1158">この例では、ファイルへの入力と出力を可能にするための `FileOpen` 関数のさまざまな使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1158">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="6f693-1159">次のコードでは、ファイル `TestFile` を `Input` モードで開きます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1159">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6f693-1160">この例では、書き込み操作のみを `Binary` モードでファイルを開きます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1160">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6f693-1161">次の例では、`Random` モードでファイルを開きます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1161">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="6f693-1162">このファイルには `Person`構造体のレコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1162">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="6f693-1163">このコード例では、`Output` モードでファイルを開きます。すべてのプロセスでファイルの読み取りまたは書き込みを行うことができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1163">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="6f693-1164">このコード例では、読み取り用に `Binary` モードでファイルを開きます。他のプロセスがファイルを読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1164">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1165">レコード長が、-1 ではない負の値です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1165">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1166"><paramref name="FileName" /> が既に開かれています。または <paramref name="FileName" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1166"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-1167">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-1167">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1168">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1168">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6f693-1169">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1169">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1170"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1170">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1171">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1171">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1172">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1172">Required.</span></span> <span data-ttu-id="6f693-1173">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1173">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1174">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1174">Required.</span></span> <span data-ttu-id="6f693-1175">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1175">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1176">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1176">Optional.</span></span> <span data-ttu-id="6f693-1177">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1177">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1178">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1178">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1179"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1179">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1180">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1180">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1181">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1181">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1182">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1182">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1183">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1183">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1184">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1184">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1185">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1185">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1186">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1186">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1187">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1187">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1188">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1188">Random Mode</span></span>  
 <span data-ttu-id="6f693-1189">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1189">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1190">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1190">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1191">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1191">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1192">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1192">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1193">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1193">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1194">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1194">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1195">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1195">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1196">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1196">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1197">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1197">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1198">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1198">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1199">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1199">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1200">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1201">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1201">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1202">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1202">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1203">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1203">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1204">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1204">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1205">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1205">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1206">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1206">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1207">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1207">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1208">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1208">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1209">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1210">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1210">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1211">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1211">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1212">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1213">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1213">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1214">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1214">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1215">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1215">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1216">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1216">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1217">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1217">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1218">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1218">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1219">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1219">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1220">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1220">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1221">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1221">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1222">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1222">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1223">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1223">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1224">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1224">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1225">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1225">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1226">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1226">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1227">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1227">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1228">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1228">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1229"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1229"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1230">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1230">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1231">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1231">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1232">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1232">Required.</span></span> <span data-ttu-id="6f693-1233">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1233">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1234">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1234">Required.</span></span> <span data-ttu-id="6f693-1235">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1235">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1236">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1236">Optional.</span></span> <span data-ttu-id="6f693-1237">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1237">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1238">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1238">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1239"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1239">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1240">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1240">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1241">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1241">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1242">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1242">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1243">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1243">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1244">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1244">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1245">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1245">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1246">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1246">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1247">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1247">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1248">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1248">Random Mode</span></span>  
 <span data-ttu-id="6f693-1249">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1249">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1250">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1250">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1251">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1251">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1252">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1252">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1253">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1253">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1254">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1254">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1255">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1255">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1256">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1256">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1257">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1257">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1258">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1258">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1259">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1259">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1260">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1261">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1261">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1262">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1262">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1263">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1263">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1264">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1264">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1265">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1265">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1266">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1266">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1267">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1267">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1268">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1268">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1269">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1270">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1270">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1271">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1271">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1272">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1272">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1273">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1273">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1274">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1274">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1275">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1275">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1276">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1276">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1277">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1277">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1278">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1278">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1279">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1279">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1280">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1280">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1281">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1281">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1282">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1282">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1283">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1283">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1284">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1284">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1285">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1285">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1286">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1286">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1287">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1287">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1288">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1288">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1289"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1289"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1290">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1290">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1291">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1291">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1292">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1292">Required.</span></span> <span data-ttu-id="6f693-1293">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1293">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1294">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1294">Required.</span></span> <span data-ttu-id="6f693-1295">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1295">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1296">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1296">Optional.</span></span> <span data-ttu-id="6f693-1297">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1298">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1298">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1299"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1300">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1301">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1302">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1303">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1304">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1305">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1306">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1307">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1308">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1308">Random Mode</span></span>  
 <span data-ttu-id="6f693-1309">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1310">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1311">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1312">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1313">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1314">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1315">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1316">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1317">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1318">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1319">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1320">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1321">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1322">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1323">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1324">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1325">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1326">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1327">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1328">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1329">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1330">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1331">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1332">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1333">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1334">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1335">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1336">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1336">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1337">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1338">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1339">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1340">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1341">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1342">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1343">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1344">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1345">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1346">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1347">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1348">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1349"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1349"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1350">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1350">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1351">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1351">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1352">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1352">Required.</span></span> <span data-ttu-id="6f693-1353">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1354">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1354">Required.</span></span> <span data-ttu-id="6f693-1355">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1355">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1356">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1356">Optional.</span></span> <span data-ttu-id="6f693-1357">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1358">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1358">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1359"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1360">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1361">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1362">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1363">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1364">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1365">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1366">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1367">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1368">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1368">Random Mode</span></span>  
 <span data-ttu-id="6f693-1369">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1370">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1371">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1372">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1373">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1374">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1375">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1376">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1377">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1378">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1379">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1380">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1381">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1382">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1383">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1384">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1385">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1386">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1387">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1388">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1389">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1390">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1391">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1392">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1393">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1394">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1395">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1396">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1396">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1397">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1398">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1399">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1400">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1401">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1402">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1403">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1404">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1405">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1406">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1407">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1408">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1409"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1409"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1410">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1410">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1411">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1411">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1412">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1412">Required.</span></span> <span data-ttu-id="6f693-1413">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1413">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1414">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1414">Required.</span></span> <span data-ttu-id="6f693-1415">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1415">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1416">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1416">Optional.</span></span> <span data-ttu-id="6f693-1417">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1417">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1418">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1418">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1419"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1419">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1420">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1420">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1421">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1421">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1422">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1422">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1423">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1423">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1424">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1424">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1425">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1425">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1426">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1426">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1427">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1427">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1428">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1428">Random Mode</span></span>  
 <span data-ttu-id="6f693-1429">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1429">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1430">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1430">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1431">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1431">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1432">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1432">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1433">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1433">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1434">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1434">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1435">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1435">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1436">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1436">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1437">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1437">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1438">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1439">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1439">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1440">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1440">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1441">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1441">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1442">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1442">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1443">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1443">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1444">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1444">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1445">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1445">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1446">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1446">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1447">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1447">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1448">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1448">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1449">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1450">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1450">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1451">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1451">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1452">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1452">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1453">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1453">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1454">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1454">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1455">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1455">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1456">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1456">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1457">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1457">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1458">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1458">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1459">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1459">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1460">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1460">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1461">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1461">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1462">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1462">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1463">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1463">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1464">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1464">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1465">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1465">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1466">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1466">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1467">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1467">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1468">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1468">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1469"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1469"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1470">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1470">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1471">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1471">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1472">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1472">Required.</span></span> <span data-ttu-id="6f693-1473">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1473">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1474">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1474">Required.</span></span> <span data-ttu-id="6f693-1475">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1475">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1476">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1476">Optional.</span></span> <span data-ttu-id="6f693-1477">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1477">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1478">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1478">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1479"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1480">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1481">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1481">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1482">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1482">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1483">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1483">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1484">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1484">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1485">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1485">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1486">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1486">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1487">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1487">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1488">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1488">Random Mode</span></span>  
 <span data-ttu-id="6f693-1489">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1489">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1490">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1490">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1491">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1491">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1492">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1492">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1493">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1493">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1494">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1494">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1495">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1495">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1496">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1496">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1497">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1497">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1498">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1499">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1499">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1500">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1500">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1501">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1501">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1502">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1502">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1503">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1503">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1504">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1504">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1505">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1505">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1506">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1506">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1507">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1508">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1509">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1510">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1511">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1511">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1512">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1512">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1513">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1513">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1514">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1514">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1515">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1515">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1516">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1516">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1517">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1517">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1518">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1518">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1519">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1519">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1520">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1520">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1521">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1521">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1522">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1522">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1523">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1523">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1524">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1524">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1525">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1525">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1526">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1526">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1527">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1527">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1528">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1528">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1529"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1529"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1530">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1530">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1531">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1531">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1532">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1532">Required.</span></span> <span data-ttu-id="6f693-1533">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1533">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1534">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1534">Required.</span></span> <span data-ttu-id="6f693-1535">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1535">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1536">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1536">Optional.</span></span> <span data-ttu-id="6f693-1537">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1537">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1538">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1538">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1539"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1539">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1540">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1540">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1541">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1541">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1542">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1542">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1543">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1543">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1544">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1544">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1545">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1545">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1546">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1546">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1547">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1547">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1548">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1548">Random Mode</span></span>  
 <span data-ttu-id="6f693-1549">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1549">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1550">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1550">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1551">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1551">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1552">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1552">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1553">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1553">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1554">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1554">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1555">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1555">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1556">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1556">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1557">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1557">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1558">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1558">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1559">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの`VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1559">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1560">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1560">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1561">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1561">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1562">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1562">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1563">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1563">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1564">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1564">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1565">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1565">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1566">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1566">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1567">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1568">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1569">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1570">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1571">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1571">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1572">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1573">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1573">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1574">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1574">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1575">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1575">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1576">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1576">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1577">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1577">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1578">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1578">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1579">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1579">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1580">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1580">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1581">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1581">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1582">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1582">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1583">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1583">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1584">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1584">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1585">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1585">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1586">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1586">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1587">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1587">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1588">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1588">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1589"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1589"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1590">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1590">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1591">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1592">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1592">Required.</span></span> <span data-ttu-id="6f693-1593">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1594">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1594">Required.</span></span> <span data-ttu-id="6f693-1595">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1595">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1596">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1596">Optional.</span></span> <span data-ttu-id="6f693-1597">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1598">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1598">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1599"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1600">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1601">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1601">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1602">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1602">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1603">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1604">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1604">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1605">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1605">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1606">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1606">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1607">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1607">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1608">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1608">Random Mode</span></span>  
 <span data-ttu-id="6f693-1609">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1609">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1610">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1610">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1611">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1611">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1612">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1612">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1613">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1613">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1614">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1614">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1615">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1615">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1616">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1616">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1617">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1617">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1618">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1618">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1619">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1619">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1620">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1621">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1621">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1622">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1622">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1623">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1623">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1624">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1624">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1625">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1625">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1626">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1626">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1627">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1627">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1628">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1628">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1629">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1630">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1630">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1631">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1631">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1632">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1633">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1633">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1634">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1635">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1635">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1636">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1636">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1637">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1637">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1638">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1638">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1639">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1639">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1640">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1640">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1641">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1641">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1642">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1642">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1643">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1643">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1644">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1644">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1645">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1645">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1646">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1646">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1647">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1647">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1648">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1648">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1649"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1649"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1650">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1650">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1651">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1652">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1652">Required.</span></span> <span data-ttu-id="6f693-1653">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1654">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1654">Required.</span></span> <span data-ttu-id="6f693-1655">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1655">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1656">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1656">Optional.</span></span> <span data-ttu-id="6f693-1657">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1658">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1658">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1659"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1660">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1661">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1661">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1662">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1662">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1663">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1664">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1664">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1665">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1665">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1666">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1666">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1667">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1667">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1668">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1668">Random Mode</span></span>  
 <span data-ttu-id="6f693-1669">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1669">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1670">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1670">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1671">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1671">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1672">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1672">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1673">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1673">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1674">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1674">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1675">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1675">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1676">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1676">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1677">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1677">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1678">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1678">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1679">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1679">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1680">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1681">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1681">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1682">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1682">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1683">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1683">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1684">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1684">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1685">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1685">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1686">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1686">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1687">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1687">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1688">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1688">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1689">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1690">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1690">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1691">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1691">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1692">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1693">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1693">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1694">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1695">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1695">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1696">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1696">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1697">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1697">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1698">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1698">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1699">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1699">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1700">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1700">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1701">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1701">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1702">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1702">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1703">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1703">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1704">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1704">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1705">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1705">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1706">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1706">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1707">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1707">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1708">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1708">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1709"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1709"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1710">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1710">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1711">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1711">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1712">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1712">Required.</span></span> <span data-ttu-id="6f693-1713">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1714">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1714">Required.</span></span> <span data-ttu-id="6f693-1715">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1716">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1716">Optional.</span></span> <span data-ttu-id="6f693-1717">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1718">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1719"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1720">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1721">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1722">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1723">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1724">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1725">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1726">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1727">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1728">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1728">Random Mode</span></span>  
 <span data-ttu-id="6f693-1729">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1730">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1730">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1731">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1732">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1733">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1734">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1735">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1736">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1737">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1738">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1739">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1740">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1741">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1742">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1743">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1744">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1745">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1746">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1747">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1748">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1749">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1750">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1751">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1752">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1753">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1754">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1755">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1756">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1756">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1757">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1758">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1759">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1760">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1761">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1762">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1763">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1764">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1765">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1766">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1767">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1768">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1769"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1770">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1771">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1771">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1772">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1772">Required.</span></span> <span data-ttu-id="6f693-1773">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1773">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1774">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1774">Required.</span></span> <span data-ttu-id="6f693-1775">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1775">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1776">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1776">Optional.</span></span> <span data-ttu-id="6f693-1777">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1777">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1778">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1778">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1779"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1780">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1781">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1781">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1782">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1782">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1783">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1783">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1784">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1784">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1785">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1785">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1786">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1786">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1787">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1787">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1788">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1788">Random Mode</span></span>  
 <span data-ttu-id="6f693-1789">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1789">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1790">書き込まれるデータの長さが、`FileOpen` 関数の`RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1790">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1791">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1791">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1792">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1792">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1793">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1793">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1794">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1794">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1795">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1795">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1796">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1796">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1797">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1797">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1798">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1798">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1799">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1799">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1800">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1800">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1801">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1801">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1802">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1802">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1803">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1803">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1804">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1804">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1805">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1806">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1806">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1807">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1807">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1808">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1808">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1809">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1810">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1810">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1811">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1811">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1812">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1812">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1813">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1813">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1814">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1814">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1815">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1815">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1816">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1816">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1817">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1817">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1818">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1818">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1819">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1819">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1820">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1820">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1821">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1821">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1822">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1822">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1823">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1823">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1824">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1824">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1825">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1825">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1826">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1826">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1827">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1827">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1828">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1828">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1829"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1829"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1830">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1830">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1831">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1831">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber);" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, RecordNumber As Object)" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FilePut(System::Object ^ FileNumber, System::Object ^ Value, System::Object ^ RecordNumber);" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1832">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1832">Required.</span></span> <span data-ttu-id="6f693-1833">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1833">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1834">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1834">Required.</span></span> <span data-ttu-id="6f693-1835">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1835">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1836">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1836">Optional.</span></span> <span data-ttu-id="6f693-1837">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1837">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-1838">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1838">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1839"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1839">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1840">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1840">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1841">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1841">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1842">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1842">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1843">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1843">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1844">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1844">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1845">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1845">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1846">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1846">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1847">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1847">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1848">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1848">Random Mode</span></span>  
 <span data-ttu-id="6f693-1849">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1849">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1850">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1850">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1851">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1851">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1852">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1852">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1853">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1853">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1854">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1854">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1855">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1855">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1856">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1856">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1857">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1857">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1858">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1858">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1859">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1859">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1860">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1861">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1861">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1862">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1862">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1863">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1863">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1864">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1864">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1865">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1865">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1866">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1866">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1867">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1867">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1868">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1868">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1869">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1870">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1870">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1871">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1871">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1872">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1873">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1873">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1874">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1874">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1875">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1875">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1876">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1876">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1877">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1877">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1878">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1878">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1879">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1879">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1880">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1880">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1881">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1881">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1882">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1882">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1883">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1883">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1884">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1884">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1885">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1885">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1886">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1886">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1887">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1887">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1888">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1888">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1889"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1889"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1890">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1890">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1891">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1891">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1892">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1892">Required.</span></span> <span data-ttu-id="6f693-1893">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1893">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1894">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1894">Required.</span></span> <span data-ttu-id="6f693-1895">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1895">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1896">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1896">Optional.</span></span> <span data-ttu-id="6f693-1897">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1897">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="6f693-1898">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1898">Optional.</span></span> <span data-ttu-id="6f693-1899">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1899">Applies only when writing a string.</span></span> <span data-ttu-id="6f693-1900">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1900">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="6f693-1901">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1901">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="6f693-1902">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1902">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1903"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1903">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1904">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1904">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1905">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1905">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1906">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1906">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1907">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1907">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1908">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1908">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1909">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1909">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1910">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1910">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1911">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1911">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1912">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1912">Random Mode</span></span>  
 <span data-ttu-id="6f693-1913">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1913">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1914">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1914">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1915">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1915">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1916">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1916">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1917">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1917">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1918">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1918">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1919">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1919">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1920">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1920">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1921">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1921">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1922">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1923">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1923">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1924">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1925">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1925">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1926">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1926">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1927">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1927">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1928">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1928">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1929">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1929">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1930">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1930">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1931">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1931">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1932">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1932">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-1933">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-1934">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1934">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-1935">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1935">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-1936">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1936">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-1937">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1937">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-1938">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1938">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-1939">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1939">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-1940">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1940">Binary Mode</span></span>  
 <span data-ttu-id="6f693-1941">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1941">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-1942">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1942">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-1943">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1943">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-1944">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1944">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-1945">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1945">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-1946">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1946">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-1947">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1947">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-1948">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1948">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-1949">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1949">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-1950">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1950">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-1951">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1951">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-1952">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1952">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-1953"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-1954">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1954">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-1955">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-1955">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-1956">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1956">Required.</span></span> <span data-ttu-id="6f693-1957">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-1957">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-1958">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1958">Required.</span></span> <span data-ttu-id="6f693-1959">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-1959">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-1960">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1960">Optional.</span></span> <span data-ttu-id="6f693-1961">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1961">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="6f693-1962">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1962">Optional.</span></span> <span data-ttu-id="6f693-1963">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1963">Applies only when writing an array.</span></span> <span data-ttu-id="6f693-1964">配列を動的として扱うかどうか、および長さを表す文字列の配列記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1964">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="6f693-1965">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-1965">Optional.</span></span> <span data-ttu-id="6f693-1966">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1966">Applies only when writing a string.</span></span> <span data-ttu-id="6f693-1967">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1967">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="6f693-1968">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1968">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="6f693-1969">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1969">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="6f693-1970"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1970">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="6f693-1971">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-1971">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-1972">`FilePut` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-1972">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-1973">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1973">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6f693-1974">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-1975">`RecordNumber`を省略した場合、最後の `FileGet` または `FilePut` 関数の後、または最後の `Seek` 関数によってポイントされた次のレコードまたはバイトが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1975">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6f693-1976">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-1977">引数が `True`場合、`FilePut` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-1977">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-1978">`FilePut`で `StringIsFixedLength` = `True` を使用する場合は、`FileGet`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1978">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-1979">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-1979">Random Mode</span></span>  
 <span data-ttu-id="6f693-1980">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-1981">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePut` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-1982">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-1983">埋め込みデータの量は確実性によって判断できないため、通常は、記録されるデータの長さとレコードの長さを一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-1983">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-1984">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6f693-1985">書き込まれている変数が文字列の場合、`FilePut` は文字列の長さを含む2バイトの記述子を書き込み、変数に入力されたデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1985">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6f693-1986">したがって、`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、文字列の実際の長さより2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1986">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6f693-1987">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1987">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-1988">たとえば、整数を含むオブジェクトを書き込む場合、`FilePut` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-1988">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-1989">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-1990">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePut` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1990">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-1991">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1991">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-1992">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1992">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-1993">書き込まれている変数が配列の場合は、配列のサイズと次元の記述子を書き込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1993">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6f693-1994">Visual Basic 6.0 以前のバージョンでは、固定サイズの配列ではなく、動的配列のファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-1994">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6f693-1995">Visual Basic 2005 では、既定で記述子を書き込まないようになっています。</span><span class="sxs-lookup"><span data-stu-id="6f693-1995">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6f693-1996">記述子を書き込むには、`ArrayIsDynamic` パラメーターを `True`に設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1996">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6f693-1997">配列を書き込むときは、配列が読み取られる方法と一致する必要があります。記述子を使用して読み取る場合は、記述子を書き込む必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-1997">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6f693-1998">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-1998">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-1999">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-1999">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6f693-2000">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-2001">たとえば、次の配列宣言では、配列がディスクに書き込まれるときに218バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2001">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6f693-2002">書き込まれている変数が他の種類の変数 (可変長文字列またはオブジェクトではない) である場合、`FilePut` は変数データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2002">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6f693-2003">`FileOpen` 関数の `RecordLength` 句によって指定されたレコードの長さは、書き込まれるデータの長さ以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2003">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6f693-2004">`FilePut` は、それぞれが個別に記述されているかのように構造体の要素を書き込みます。ただし、要素間にパディングはありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2004">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6f693-2005">`VBFixedString` 属性は、ディスクに書き込まれるときに文字列のサイズを示すために、構造体の文字列フィールドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2005">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6f693-2006">`VBFixedString` 属性によって指定されたよりも多くのバイトを持つ文字列フィールドは、ディスクに書き込まれるときに切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2006">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-2007">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-2007">Binary Mode</span></span>  
 <span data-ttu-id="6f693-2008">`Binary` モードで開かれたファイルの場合は、ほとんどの `Random` モードの規則が適用されますが、例外もあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2008">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6f693-2009">`Binary` モードで開かれたファイルの次の規則は、`Random` モードの規則とは異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2009">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6f693-2010">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2010">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-2011">`FilePut` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2011">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6f693-2012">構造体の配列以外の配列の場合、`FilePut` はデータだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2012">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6f693-2013">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2013">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6f693-2014">`FilePut` は、2バイト長記述子のない構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2014">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6f693-2015">書き込まれたバイト数は、文字列の文字数と同じです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2015">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6f693-2016">たとえば、次のステートメントは11バイトをファイル番号1に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2016">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6f693-2017">`FilePut` 関数を使用してファイルに書き込むには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2017">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2018">この例では、`FilePut` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2018">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6f693-2019">構造 `Person` の5つのレコードがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2019">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-2020"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2020"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2021">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2021">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-2022">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-2022">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2023">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2023">Required.</span></span> <span data-ttu-id="6f693-2024">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2024">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2025">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2025">Required.</span></span> <span data-ttu-id="6f693-2026">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="6f693-2026">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="6f693-2027">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-2027">Optional.</span></span> <span data-ttu-id="6f693-2028">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="6f693-2028">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="6f693-2029">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2029">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="6f693-2030"><see langword="My" /> 機能を使用すると、<see langword="FilePutObject" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2030">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="6f693-2031">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2031">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2032">`FilePutObject` 関数は、`Integer`、`Long`、`Short`などの別の型ではなく型 `Object` が渡される場合に、コンパイル時のあいまいさを避けるために、`FilePut` の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2032">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="6f693-2033">`FilePutObject` は、オブジェクトを記述する記述子を書き込み、読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2033">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="6f693-2034">`Variant` 型を書き出す場合は、`FilePutObject` が必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2034">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="6f693-2035">2番目のパラメーターとしてオブジェクトを使用している場合は、常に `FilePutObject` と `FileGetObject`を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-2035">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="6f693-2036">`FilePutObject` は `Random` モードと `Binary` モードでのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2036">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-2037">`FilePutObject` を使用して書き込まれたデータは通常、`FileGetObject` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2037">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="6f693-2038">ファイル内の最初のレコードまたはバイトの位置は1、2番目のレコード、またはバイトの位置は2になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2038">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6f693-2039">`RecordNumber`を省略した場合、`FilePutObject` は最後の `FileGetObject` または `FilePutObject` 関数の後に次のレコードまたはバイト (または最後の `Seek` 関数によって示されるレコードまたはバイト) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2039">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="6f693-2040">`StringIsFixedLength` 引数は、関数が文字列を変数または固定長として解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2040">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6f693-2041">引数が `True`場合、`FilePutObject` は長さ記述子を書き込みません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2041">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6f693-2042">`FilePutObject`で `StringIsFixedLength` = `True` を使用する場合は、`FileGetObject`で同じ操作を行う必要があります。また、文字列が必要な長さに初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2042">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6f693-2043">ランダムモード</span><span class="sxs-lookup"><span data-stu-id="6f693-2043">Random Mode</span></span>  
 <span data-ttu-id="6f693-2044">`Random` モードで開かれたファイルについては、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2044">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6f693-2045">書き込まれるデータの長さが、`FileOpen` 関数の `RecordLength` 句で指定された長さよりも少ない場合、`FilePutObject` は、後続のレコードをレコード長の境界に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2045">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6f693-2046">1つのレコードの末尾と次のレコードの先頭との間のスペースは、ファイルバッファーの既存の内容に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2046">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6f693-2047">埋め込みデータの量は正確には特定できないため、通常は、レコードの長さを、書き込まれるデータの長さと一致させることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6f693-2047">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6f693-2048">書き込まれているデータの長さが、`FileOpen` 関数の `RecordLength` 句に指定された長さよりも大きい場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2048">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="6f693-2049">書き込まれている変数が数値型を含むオブジェクトの場合、`FilePutObject` は、オブジェクトの `VarType` を識別する2バイトを書き込み、変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2049">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6f693-2050">たとえば、整数を含むオブジェクトを書き込む場合、`FilePutObject` は6バイトを書き込みます。これは、オブジェクトを `VarType(3)` (`Integer`) として識別する2バイトと、データを格納する4バイトです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2050">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6f693-2051">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、変数を格納するために必要な実際のバイト数よりも2バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2051">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6f693-2052">書き込み中の変数が文字列を含むオブジェクトの場合、`FilePutObject` は、オブジェクトの `VarType(8)` を識別する2バイト記述子、文字列の長さを示す2バイト記述子を書き込み、文字列データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2052">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6f693-2053">`FileOpen` 関数の `RecordLength` パラメーターによって指定されたレコードの長さは、文字列の実際の長さよりも少なくとも4バイト以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2053">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6f693-2054">記述子を含まない文字列を指定する場合は、`True` を `StringIsFixedLength` パラメーターに渡す必要があります。また、読み取る文字列は正しい長さである必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2054">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6f693-2055">書き込む変数が配列の場合、`FileOpen` 関数の `RecordLength` 句で指定されたレコードの長さは、配列データと配列記述子の書き込みに必要なすべてのバイトの合計以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2055">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6f693-2056">記述子は、配列のランク、サイズ、および各ランクの下限を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2056">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6f693-2057">長さは 2 + 次元数の8倍になります (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6f693-2057">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6f693-2058">バイナリモード</span><span class="sxs-lookup"><span data-stu-id="6f693-2058">Binary Mode</span></span>  
 <span data-ttu-id="6f693-2059">`Binary` モードで開かれたファイルについては、次の場合を除き、すべての `Random` モードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2059">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="6f693-2060">`FileOpen` 関数の `RecordLength` 句には効果がありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2060">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6f693-2061">`FilePutObject` は、すべての変数を連続してディスクに書き込みます。つまり、レコード間の埋め込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2061">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2062">この例では、`FilePutObject` 関数を使用して、ファイルに文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2062">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-2063">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-2063">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2064">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2064">Required.</span></span> <span data-ttu-id="6f693-2065">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2065">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="6f693-2066">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2066">Required.</span></span> <span data-ttu-id="6f693-2067">改行される前に 1 行に表示できる文字数を表す 0 から 255 の範囲の数式。</span><span class="sxs-lookup"><span data-stu-id="6f693-2067">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="6f693-2068"><paramref name="RecordWidth" /> が 0 の場合は、行の長さに制限がないことを示します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2068">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="6f693-2069"><paramref name="RecordWidth" /> の既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2069">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="6f693-2070"><see langword="FileOpen" /> 関数を使用して開いたファイルに出力行の桁数を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2070">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6f693-2071">この例では、`FileWidth` 関数を使用して、ファイルの出力線の幅を設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2071">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2072">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2073">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2073">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FreeFile() cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6f693-2074"><see langword="Integer" /> 関数で使用できる次のファイル番号を表す <see langword="FileOpen" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2074">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="6f693-2075"><see langword="FileOpen" /> 関数で使用できる次のファイル番号を表す整数値。</span><span class="sxs-lookup"><span data-stu-id="6f693-2075">An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2076">`FreeFile` を使用して、まだ使用されていないファイル番号を指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2076">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2077">この例では、`FreeFile` 関数を使用して、次に使用可能なファイル番号を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2077">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="6f693-2078">ループ内の出力用に5つのファイルが開かれ、いくつかのサンプルデータがそれぞれに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2078">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2079">使用中のファイルが 255 個を超えています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2079">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-2080">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-2080">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="6f693-2081">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2081">Required.</span></span> <span data-ttu-id="6f693-2082">ファイル、ディレクトリ、またはフォルダーの名前を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2082">A string expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="6f693-2083"><paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2083"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="6f693-2084">ファイル、ディレクトリ、またはフォルダーの属性を表す <see langword="FileAttribute" /> 型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2084">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="6f693-2085"><see langword="My" /> 機能を使用すると、<see langword="FileAttribute" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2085">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="6f693-2086">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2086">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="6f693-2087">列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="6f693-2087">A bitwise combination of the enumeration values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2088">どの属性が設定されているかを判断するには、`And` 演算子を使用して、`GetAttr` 関数によって返される値と、必要な個々のファイル属性の値のビットごとの比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2088">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="6f693-2089">結果が0でない場合は、その属性が名前付きファイルに対して設定されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2089">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="6f693-2090">たとえば、次の `And` 式の戻り値は、`Archive` 属性が設定されていない場合は0になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2090">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="6f693-2091">`Archive` の属性が設定されている場合は、0以外の値が返されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2091">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2092">この例では、`GetAttr` 関数を使用して、ファイル、ディレクトリ、またはフォルダーの属性を決定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2092">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2093"><paramref name="Pathname" /> が無効です。またはワイルドカードを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2093"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6f693-2094">対象のファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2094">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="6f693-2095">And 演算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2095">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2096">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2096">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6f693-2097">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2097">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, bool&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2098">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2098">Required.</span></span> <span data-ttu-id="6f693-2099">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2099">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2100">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2100">Required.</span></span> <span data-ttu-id="6f693-2101">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2101">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="6f693-2102">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2102">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2103">`Input` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2103">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2104">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2104">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2105">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2105">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2106">`Input` で読み取られるデータは通常、`Write`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2106">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6f693-2107">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2107">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2108">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2108">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2109">たとえば、Form1.vb という名前のファイルを Visual Basic 2005 ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2109">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6f693-2110">読み取り時に、標準の文字列または数値データが変更されずに変数に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2110">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6f693-2111">次の表は、他の入力データがどのように処理されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2111">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6f693-2112">Data</span><span class="sxs-lookup"><span data-stu-id="6f693-2112">Data</span></span>|<span data-ttu-id="6f693-2113">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="6f693-2113">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6f693-2114">コンマまたは空白行の区切り</span><span class="sxs-lookup"><span data-stu-id="6f693-2114">Delimiting comma or blank line</span></span>|<span data-ttu-id="6f693-2115">空</span><span class="sxs-lookup"><span data-stu-id="6f693-2115">Empty</span></span>|  
|<span data-ttu-id="6f693-2116">#NULL#</span><span class="sxs-lookup"><span data-stu-id="6f693-2116">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6f693-2117">#TRUE # または #FALSE#</span><span class="sxs-lookup"><span data-stu-id="6f693-2117">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6f693-2118">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="6f693-2118">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6f693-2119">式で表される日付/時刻</span><span class="sxs-lookup"><span data-stu-id="6f693-2119">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6f693-2120">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6f693-2120">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6f693-2121">`errornumber` (変数はエラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="6f693-2121">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6f693-2122">データ項目の入力中にファイルの末尾に近づいた場合は、入力が停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2122">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2123">`Input` 関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2123">The `Input` function is not localized.</span></span> <span data-ttu-id="6f693-2124">たとえば、ドイツ語版では、3, 14159 を入力した場合、3だけが返されます。これは、コンマが小数点としてではなく変数区切り記号として扱われるためです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2124">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2125">`Input` 関数を使用してファイルを読み取るには、`FileIOPermissionAccess` 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2125">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2126">詳細については、「 <xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2126">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2127">この例では、`Input` 関数を使用して、ファイルから2つの変数にデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2127">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6f693-2128">この例では、`TestFile` が、`Write` 関数を使用してデータ行に書き込まれたファイルであることを前提としています。各行には、引用符で区切った文字列と、コンマで区切られた数値 ("Hello", 234) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2128">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2129">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2129">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2130">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2130">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2131">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2131">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2132">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2132">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * byte -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2133">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2133">Required.</span></span> <span data-ttu-id="6f693-2134">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2134">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2135">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2135">Required.</span></span> <span data-ttu-id="6f693-2136">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2136">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="6f693-2137">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2137">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2138">`Input` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2138">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2139">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2139">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2140">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2140">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2141">`Input` で読み取られるデータは通常、`Write`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2141">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6f693-2142">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2142">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2143">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2143">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2144">たとえば、Form1.vb という名前のファイルを Visual Basic 2005 ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2144">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6f693-2145">読み取り時に、標準の文字列または数値データが変更されずに変数に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2145">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6f693-2146">次の表は、他の入力データがどのように処理されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2146">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6f693-2147">Data</span><span class="sxs-lookup"><span data-stu-id="6f693-2147">Data</span></span>|<span data-ttu-id="6f693-2148">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="6f693-2148">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6f693-2149">コンマまたは空白行の区切り</span><span class="sxs-lookup"><span data-stu-id="6f693-2149">Delimiting comma or blank line</span></span>|<span data-ttu-id="6f693-2150">空</span><span class="sxs-lookup"><span data-stu-id="6f693-2150">Empty</span></span>|  
|<span data-ttu-id="6f693-2151">#NULL#</span><span class="sxs-lookup"><span data-stu-id="6f693-2151">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6f693-2152">#TRUE # または #FALSE#</span><span class="sxs-lookup"><span data-stu-id="6f693-2152">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6f693-2153">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="6f693-2153">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6f693-2154">式で表される日付/時刻</span><span class="sxs-lookup"><span data-stu-id="6f693-2154">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6f693-2155">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6f693-2155">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6f693-2156">`errornumber` (変数はエラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="6f693-2156">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6f693-2157">データ項目の入力中にファイルの末尾に近づいた場合は、入力が停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2157">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2158">`Input` 関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2158">The `Input` function is not localized.</span></span> <span data-ttu-id="6f693-2159">たとえば、ドイツ語版では、3, 14159 を入力した場合、3だけが返されます。これは、コンマが小数点としてではなく変数区切り記号として扱われるためです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2159">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2160">`Input` 関数を使用してファイルを読み取るには、`FileIOPermissionAccess` 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2160">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2161">詳細については、「 <xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2161">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2162">この例では、`Input` 関数を使用して、ファイルから2つの変数にデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2162">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6f693-2163">この例では、`TestFile` が、`Write` 関数を使用してデータ行に書き込まれたファイルであることを前提としています。各行には、引用符で区切った文字列と、コンマで区切られた数値 ("Hello", 234) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2163">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2164">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2164">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2165">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2165">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2166">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2166">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2167">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2167">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, char&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2168">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2168">Required.</span></span> <span data-ttu-id="6f693-2169">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2169">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2170">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2170">Required.</span></span> <span data-ttu-id="6f693-2171">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2171">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="6f693-2172">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2172">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2173">`Input` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2173">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2174">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2174">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2175">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2175">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2176">`Input` で読み取られるデータは通常、`Write`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2176">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6f693-2177">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2177">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2178">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2178">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2179">たとえば、Form1.vb という名前のファイルを Visual Basic 2005 ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2179">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6f693-2180">読み取り時に、標準の文字列または数値データが変更されずに変数に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2180">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6f693-2181">次の表は、他の入力データがどのように処理されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2181">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6f693-2182">Data</span><span class="sxs-lookup"><span data-stu-id="6f693-2182">Data</span></span>|<span data-ttu-id="6f693-2183">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="6f693-2183">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6f693-2184">コンマまたは空白行の区切り</span><span class="sxs-lookup"><span data-stu-id="6f693-2184">Delimiting comma or blank line</span></span>|<span data-ttu-id="6f693-2185">空</span><span class="sxs-lookup"><span data-stu-id="6f693-2185">Empty</span></span>|  
|<span data-ttu-id="6f693-2186">#NULL#</span><span class="sxs-lookup"><span data-stu-id="6f693-2186">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6f693-2187">#TRUE # または #FALSE#</span><span class="sxs-lookup"><span data-stu-id="6f693-2187">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6f693-2188">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="6f693-2188">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6f693-2189">式で表される日付/時刻</span><span class="sxs-lookup"><span data-stu-id="6f693-2189">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6f693-2190">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6f693-2190">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6f693-2191">`errornumber` (変数はエラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="6f693-2191">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6f693-2192">データ項目の入力中にファイルの末尾に近づいた場合は、入力が停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2192">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2193">`Input` 関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2193">The `Input` function is not localized.</span></span> <span data-ttu-id="6f693-2194">たとえば、ドイツ語版では、3, 14159 を入力した場合、3だけが返されます。これは、コンマが小数点としてではなく変数区切り記号として扱われるためです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2194">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2195">`Input` 関数を使用してファイルを読み取るには、`FileIOPermissionAccess` 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2195">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2196">詳細については、「 <xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2196">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2197">この例では、`Input` 関数を使用して、ファイルから2つの変数にデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2197">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6f693-2198">この例では、`TestFile` が、`Write` 関数を使用して複数行のデータが書き込まれたファイルであることを前提としています。各行には、引用符で区切った文字列と、コンマで区切られた数値 ("Hello"、234など) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2198">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2199">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2199">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2200">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2200">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2201">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2201">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2202">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2202">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * DateTime -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2203">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2203">Required.</span></span> <span data-ttu-id="6f693-2204">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2204">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2205">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2205">Required.</span></span> <span data-ttu-id="6f693-2206">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2206">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="6f693-2207">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2207">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2208">`Input` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2208">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2209">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2209">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2210">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2210">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2211">`Input` で読み取られるデータは通常、`Write`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2211">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6f693-2212">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2212">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2213">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2213">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2214">たとえば、Form1.vb という名前のファイルを Visual Basic 2005 ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2214">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6f693-2215">読み取り時に、標準の文字列または数値データが変更されずに変数に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2215">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6f693-2216">次の表は、他の入力データがどのように処理されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2216">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6f693-2217">Data</span><span class="sxs-lookup"><span data-stu-id="6f693-2217">Data</span></span>|<span data-ttu-id="6f693-2218">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="6f693-2218">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6f693-2219">コンマまたは空白行の区切り</span><span class="sxs-lookup"><span data-stu-id="6f693-2219">Delimiting comma or blank line</span></span>|<span data-ttu-id="6f693-2220">空</span><span class="sxs-lookup"><span data-stu-id="6f693-2220">Empty</span></span>|  
|<span data-ttu-id="6f693-2221">#NULL#</span><span class="sxs-lookup"><span data-stu-id="6f693-2221">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6f693-2222">#TRUE # または #FALSE#</span><span class="sxs-lookup"><span data-stu-id="6f693-2222">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6f693-2223">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="6f693-2223">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6f693-2224">式で表される日付/時刻</span><span class="sxs-lookup"><span data-stu-id="6f693-2224">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6f693-2225">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6f693-2225">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6f693-2226">`errornumber` (変数はエラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="6f693-2226">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6f693-2227">データ項目の入力中にファイルの末尾に近づいた場合は、入力が停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2227">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2228">`Input` 関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2228">The `Input` function is not localized.</span></span> <span data-ttu-id="6f693-2229">たとえば、ドイツ語版では、3, 14159 を入力した場合、3だけが返されます。これは、コンマが小数点としてではなく変数区切り記号として扱われるためです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2229">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2230">`Input` 関数を使用してファイルを読み取るには、`FileIOPermissionAccess` 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2230">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2231">詳細については、「 <xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2231">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2232">この例では、`Input` 関数を使用して、ファイルから2つの変数にデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2232">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6f693-2233">この例では、`TestFile` が、`Write` 関数を使用して複数行のデータが書き込まれたファイルであることを前提としています。各行には、引用符で区切った文字列と、コンマで区切られた数値 ("Hello"、234など) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2233">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2234">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2234">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2235">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2235">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2236">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2236">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2237">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2237">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * decimal -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2238">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2238">Required.</span></span> <span data-ttu-id="6f693-2239">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2239">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2240">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2240">Required.</span></span> <span data-ttu-id="6f693-2241">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2241">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="6f693-2242">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2242">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2243">`Input` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2243">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2244">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2244">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2245">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2245">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2246">`Input` で読み取られるデータは通常、`Write`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2246">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6f693-2247">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2247">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2248">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2248">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2249">たとえば、Form1.vb という名前のファイルを Visual Basic 2005 ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2249">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6f693-2250">読み取り時に、標準の文字列または数値データが変更されずに変数に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2250">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6f693-2251">次の表は、他の入力データがどのように処理されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2251">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6f693-2252">Data</span><span class="sxs-lookup"><span data-stu-id="6f693-2252">Data</span></span>|<span data-ttu-id="6f693-2253">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="6f693-2253">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6f693-2254">コンマまたは空白行の区切り</span><span class="sxs-lookup"><span data-stu-id="6f693-2254">Delimiting comma or blank line</span></span>|<span data-ttu-id="6f693-2255">空</span><span class="sxs-lookup"><span data-stu-id="6f693-2255">Empty</span></span>|  
|<span data-ttu-id="6f693-2256">#NULL#</span><span class="sxs-lookup"><span data-stu-id="6f693-2256">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6f693-2257">#TRUE # または #FALSE#</span><span class="sxs-lookup"><span data-stu-id="6f693-2257">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6f693-2258">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="6f693-2258">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6f693-2259">式で表される日付/時刻</span><span class="sxs-lookup"><span data-stu-id="6f693-2259">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6f693-2260">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6f693-2260">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6f693-2261">`errornumber` (変数はエラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="6f693-2261">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6f693-2262">データ項目の入力中にファイルの末尾に近づいた場合は、入力が停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2262">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2263">`Input` 関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2263">The `Input` function is not localized.</span></span> <span data-ttu-id="6f693-2264">たとえば、ドイツ語版では、3, 14159 を入力した場合、3だけが返されます。これは、コンマが小数点としてではなく変数区切り記号として扱われるためです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2264">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2265">`Input` 関数を使用してファイルを読み取るには、`FileIOPermissionAccess` 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2265">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2266">詳細については、「 <xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2266">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2267">この例では、`Input` 関数を使用して、ファイルから2つの変数にデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2267">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6f693-2268">この例では、`TestFile` が、`Write` 関数を使用して複数行のデータが書き込まれたファイルであることを前提としています。各行には、引用符で区切った文字列と、コンマで区切られた数値 ("Hello"、234など) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2268">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2269">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2269">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2270">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2270">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2271">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2271">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2272">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2272">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, float64&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * double -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2273">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2273">Required.</span></span> <span data-ttu-id="6f693-2274">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2274">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2275">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2275">Required.</span></span> <span data-ttu-id="6f693-2276">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2276">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="6f693-2277">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2277">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2278">`Input` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2278">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2279">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2279">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2280">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2280">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2281">`Input` で読み取られるデータは通常、`Write`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2281">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6f693-2282">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2282">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2283">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2283">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2284">たとえば、Form1.vb という名前のファイルを Visual Basic 2005 ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2284">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6f693-2285">読み取り時に、標準の文字列または数値データが変更されずに変数に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2285">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6f693-2286">次の表は、他の入力データがどのように処理されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2286">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6f693-2287">Data</span><span class="sxs-lookup"><span data-stu-id="6f693-2287">Data</span></span>|<span data-ttu-id="6f693-2288">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="6f693-2288">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6f693-2289">コンマまたは空白行の区切り</span><span class="sxs-lookup"><span data-stu-id="6f693-2289">Delimiting comma or blank line</span></span>|<span data-ttu-id="6f693-2290">空</span><span class="sxs-lookup"><span data-stu-id="6f693-2290">Empty</span></span>|  
|<span data-ttu-id="6f693-2291">#NULL#</span><span class="sxs-lookup"><span data-stu-id="6f693-2291">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6f693-2292">#TRUE # または #FALSE#</span><span class="sxs-lookup"><span data-stu-id="6f693-2292">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6f693-2293">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="6f693-2293">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6f693-2294">式で表される日付/時刻</span><span class="sxs-lookup"><span data-stu-id="6f693-2294">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6f693-2295">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6f693-2295">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6f693-2296">`errornumber` (変数はエラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="6f693-2296">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6f693-2297">データ項目の入力中にファイルの末尾に近づいた場合は、入力が停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2297">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2298">`Input` 関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2298">The `Input` function is not localized.</span></span> <span data-ttu-id="6f693-2299">たとえば、ドイツ語版では、3, 14159 を入力した場合、3だけが返されます。これは、コンマが小数点としてではなく変数区切り記号として扱われるためです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2299">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2300">`Input` 関数を使用してファイルを読み取るには、`FileIOPermissionAccess` 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2300">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2301">詳細については、「 <xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2301">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2302">この例では、`Input` 関数を使用して、ファイルから2つの変数にデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2302">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6f693-2303">この例では、`TestFile` が、`Write` 関数を使用して複数行のデータが書き込まれたファイルであることを前提としています。各行には、引用符で区切った文字列と、コンマで区切られた数値 ("Hello"、234など) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2303">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2304">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2304">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2305">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2305">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2306">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2306">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2307">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2307">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, int16&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * int16 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2308">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2308">Required.</span></span> <span data-ttu-id="6f693-2309">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2309">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2310">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2310">Required.</span></span> <span data-ttu-id="6f693-2311">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2311">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="6f693-2312">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2312">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2313">`Input` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2313">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2314">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2314">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2315">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2315">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2316">`Input` で読み取られるデータは通常、`Write`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2316">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6f693-2317">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2317">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2318">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2318">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2319">たとえば、Form1.vb という名前のファイルを Visual Basic 2005 ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2319">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6f693-2320">読み取り時に、標準の文字列または数値データが変更されずに変数に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2320">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6f693-2321">次の表は、他の入力データがどのように処理されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2321">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6f693-2322">Data</span><span class="sxs-lookup"><span data-stu-id="6f693-2322">Data</span></span>|<span data-ttu-id="6f693-2323">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="6f693-2323">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6f693-2324">コンマまたは空白行の区切り</span><span class="sxs-lookup"><span data-stu-id="6f693-2324">Delimiting comma or blank line</span></span>|<span data-ttu-id="6f693-2325">空</span><span class="sxs-lookup"><span data-stu-id="6f693-2325">Empty</span></span>|  
|<span data-ttu-id="6f693-2326">#NULL#</span><span class="sxs-lookup"><span data-stu-id="6f693-2326">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6f693-2327">#TRUE # または #FALSE#</span><span class="sxs-lookup"><span data-stu-id="6f693-2327">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6f693-2328">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="6f693-2328">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6f693-2329">式で表される日付/時刻</span><span class="sxs-lookup"><span data-stu-id="6f693-2329">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6f693-2330">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6f693-2330">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6f693-2331">`errornumber` (変数はエラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="6f693-2331">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6f693-2332">データ項目の入力中にファイルの末尾に近づいた場合は、入力が停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2332">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2333">`Input` 関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2333">The `Input` function is not localized.</span></span> <span data-ttu-id="6f693-2334">たとえば、ドイツ語版では、3, 14159 を入力した場合、3だけが返されます。これは、コンマが小数点としてではなく変数区切り記号として扱われるためです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2334">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2335">`Input` 関数を使用してファイルを読み取るには、`FileIOPermissionAccess` 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2335">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2336">詳細については、「 <xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2336">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2337">この例では、`Input` 関数を使用して、ファイルから2つの変数にデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2337">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6f693-2338">この例では、`TestFile` が、`Write` 関数を使用して複数行のデータが書き込まれたファイルであることを前提としています。各行には、引用符で区切った文字列と、コンマで区切られた数値 ("Hello"、234など) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2338">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2339">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2339">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2340">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2340">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2341">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2341">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2342">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2342">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, int32&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2343">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2343">Required.</span></span> <span data-ttu-id="6f693-2344">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2344">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2345">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2345">Required.</span></span> <span data-ttu-id="6f693-2346">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2346">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="6f693-2347">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2347">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2348">`Input` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2348">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2349">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2349">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2350">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2350">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2351">`Input` で読み取られるデータは通常、`Write`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2351">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6f693-2352">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2352">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2353">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2353">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2354">たとえば、Form1.vb という名前のファイルを Visual Basic 2005 ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2354">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6f693-2355">読み取り時に、標準の文字列または数値データが変更されずに変数に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2355">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6f693-2356">次の表は、他の入力データがどのように処理されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2356">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6f693-2357">Data</span><span class="sxs-lookup"><span data-stu-id="6f693-2357">Data</span></span>|<span data-ttu-id="6f693-2358">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="6f693-2358">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6f693-2359">コンマまたは空白行の区切り</span><span class="sxs-lookup"><span data-stu-id="6f693-2359">Delimiting comma or blank line</span></span>|<span data-ttu-id="6f693-2360">空</span><span class="sxs-lookup"><span data-stu-id="6f693-2360">Empty</span></span>|  
|<span data-ttu-id="6f693-2361">#NULL#</span><span class="sxs-lookup"><span data-stu-id="6f693-2361">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6f693-2362">#TRUE # または #FALSE#</span><span class="sxs-lookup"><span data-stu-id="6f693-2362">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6f693-2363">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="6f693-2363">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6f693-2364">式で表される日付/時刻</span><span class="sxs-lookup"><span data-stu-id="6f693-2364">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6f693-2365">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6f693-2365">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6f693-2366">`errornumber` (変数はエラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="6f693-2366">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6f693-2367">データ項目の入力中にファイルの末尾に近づいた場合は、入力が停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2367">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2368">`Input` 関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2368">The `Input` function is not localized.</span></span> <span data-ttu-id="6f693-2369">たとえば、ドイツ語版では、3, 14159 を入力した場合、3だけが返されます。これは、コンマが小数点としてではなく変数区切り記号として扱われるためです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2369">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2370">`Input` 関数を使用してファイルを読み取るには、`FileIOPermissionAccess` 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2370">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2371">詳細については、「 <xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2371">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2372">この例では、`Input` 関数を使用して、ファイルから2つの変数にデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2372">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6f693-2373">この例では、`TestFile` が、`Write` 関数を使用して複数行のデータが書き込まれたファイルであることを前提としています。各行には、引用符で区切った文字列と、コンマで区切られた数値 ("Hello"、234など) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2373">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2374">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2374">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2375">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2375">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2376">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2376">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2377">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2377">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, int64&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2378">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2378">Required.</span></span> <span data-ttu-id="6f693-2379">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2379">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2380">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2380">Required.</span></span> <span data-ttu-id="6f693-2381">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2381">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="6f693-2382">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2382">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2383">`Input` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2383">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2384">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2384">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2385">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2385">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2386">`Input` で読み取られるデータは通常、`Write`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2386">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6f693-2387">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2387">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2388">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2388">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2389">たとえば、Form1.vb という名前のファイルを Visual Basic 2005 ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2389">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6f693-2390">読み取り時に、標準の文字列または数値データが変更されずに変数に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2390">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6f693-2391">次の表は、他の入力データがどのように処理されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2391">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6f693-2392">Data</span><span class="sxs-lookup"><span data-stu-id="6f693-2392">Data</span></span>|<span data-ttu-id="6f693-2393">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="6f693-2393">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6f693-2394">コンマまたは空白行の区切り</span><span class="sxs-lookup"><span data-stu-id="6f693-2394">Delimiting comma or blank line</span></span>|<span data-ttu-id="6f693-2395">空</span><span class="sxs-lookup"><span data-stu-id="6f693-2395">Empty</span></span>|  
|<span data-ttu-id="6f693-2396">#NULL#</span><span class="sxs-lookup"><span data-stu-id="6f693-2396">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6f693-2397">#TRUE # または #FALSE#</span><span class="sxs-lookup"><span data-stu-id="6f693-2397">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6f693-2398">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="6f693-2398">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6f693-2399">式で表される日付/時刻</span><span class="sxs-lookup"><span data-stu-id="6f693-2399">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6f693-2400">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6f693-2400">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6f693-2401">`errornumber` (変数はエラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="6f693-2401">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6f693-2402">データ項目の入力中にファイルの末尾に近づいた場合は、入力が停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2402">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2403">`Input` 関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2403">The `Input` function is not localized.</span></span> <span data-ttu-id="6f693-2404">たとえば、ドイツ語版では、3, 14159 を入力した場合、3だけが返されます。これは、コンマが小数点としてではなく変数区切り記号として扱われるためです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2404">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2405">`Input` 関数を使用してファイルを読み取るには、`FileIOPermissionAccess` 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2405">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2406">詳細については、「 <xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2406">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2407">この例では、`Input` 関数を使用して、ファイルから2つの変数にデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2407">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6f693-2408">この例では、`TestFile` が、`Write` 関数を使用して複数行のデータが書き込まれたファイルであることを前提としています。各行には、引用符で区切った文字列と、コンマで区切られた数値 ("Hello"、234など) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2408">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2409">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2409">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2410">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2410">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2411">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2411">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2412">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2412">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, object&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2413">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2413">Required.</span></span> <span data-ttu-id="6f693-2414">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2414">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2415">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2415">Required.</span></span> <span data-ttu-id="6f693-2416">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2416">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="6f693-2417">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2417">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2418">`Input` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2418">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2419">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2419">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2420">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2420">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2421">`Input` で読み取られるデータは通常、`Write`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2421">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6f693-2422">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2422">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2423">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2423">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2424">たとえば、Form1.vb という名前のファイルを Visual Basic 2005 ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2424">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6f693-2425">読み取り時に、標準の文字列または数値データが変更されずに変数に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2425">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6f693-2426">次の表は、他の入力データがどのように処理されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2426">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6f693-2427">Data</span><span class="sxs-lookup"><span data-stu-id="6f693-2427">Data</span></span>|<span data-ttu-id="6f693-2428">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="6f693-2428">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6f693-2429">コンマまたは空白行の区切り</span><span class="sxs-lookup"><span data-stu-id="6f693-2429">Delimiting comma or blank line</span></span>|<span data-ttu-id="6f693-2430">空</span><span class="sxs-lookup"><span data-stu-id="6f693-2430">Empty</span></span>|  
|<span data-ttu-id="6f693-2431">#NULL#</span><span class="sxs-lookup"><span data-stu-id="6f693-2431">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6f693-2432">#TRUE # または #FALSE#</span><span class="sxs-lookup"><span data-stu-id="6f693-2432">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6f693-2433">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="6f693-2433">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6f693-2434">式で表される日付/時刻</span><span class="sxs-lookup"><span data-stu-id="6f693-2434">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6f693-2435">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6f693-2435">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6f693-2436">`errornumber` (変数はエラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="6f693-2436">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6f693-2437">データ項目の入力中にファイルの末尾に近づいた場合は、入力が停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2437">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2438">`Input` 関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2438">The `Input` function is not localized.</span></span> <span data-ttu-id="6f693-2439">たとえば、ドイツ語版では、3, 14159 を入力した場合、3だけが返されます。これは、コンマが小数点としてではなく変数区切り記号として扱われるためです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2439">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2440">`Input` 関数を使用してファイルを読み取るには、`FileIOPermissionAccess` 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2440">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2441">詳細については、「 <xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2441">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2442">この例では、`Input` 関数を使用して、ファイルから2つの変数にデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2442">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6f693-2443">この例では、`TestFile` が、`Write` 関数を使用して複数行のデータが書き込まれたファイルであることを前提としています。各行には、引用符で区切った文字列と、コンマで区切られた数値 ("Hello"、234など) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2443">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2444">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2444">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2445">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2445">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2446">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2446">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2447">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2447">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, float32&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * single -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2448">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2448">Required.</span></span> <span data-ttu-id="6f693-2449">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2449">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2450">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2450">Required.</span></span> <span data-ttu-id="6f693-2451">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2451">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="6f693-2452">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2452">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2453">`Input` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2453">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2454">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2454">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2455">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2455">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2456">`Input` で読み取られるデータは通常、`Write`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2456">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6f693-2457">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2457">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2458">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2458">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2459">たとえば、Form1.vb という名前のファイルを Visual Basic 2005 ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2459">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6f693-2460">読み取り時に、標準の文字列または数値データが変更されずに変数に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2460">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6f693-2461">次の表は、他の入力データがどのように処理されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2461">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6f693-2462">Data</span><span class="sxs-lookup"><span data-stu-id="6f693-2462">Data</span></span>|<span data-ttu-id="6f693-2463">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="6f693-2463">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6f693-2464">コンマまたは空白行の区切り</span><span class="sxs-lookup"><span data-stu-id="6f693-2464">Delimiting comma or blank line</span></span>|<span data-ttu-id="6f693-2465">空</span><span class="sxs-lookup"><span data-stu-id="6f693-2465">Empty</span></span>|  
|<span data-ttu-id="6f693-2466">#NULL#</span><span class="sxs-lookup"><span data-stu-id="6f693-2466">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6f693-2467">#TRUE # または #FALSE#</span><span class="sxs-lookup"><span data-stu-id="6f693-2467">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6f693-2468">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="6f693-2468">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6f693-2469">式で表される日付/時刻</span><span class="sxs-lookup"><span data-stu-id="6f693-2469">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6f693-2470">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6f693-2470">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6f693-2471">`errornumber` (変数はエラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="6f693-2471">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6f693-2472">データ項目の入力中にファイルの末尾に近づいた場合は、入力が停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2472">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2473">`Input` 関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2473">The `Input` function is not localized.</span></span> <span data-ttu-id="6f693-2474">たとえば、ドイツ語版では、3, 14159 を入力した場合、3だけが返されます。これは、コンマが小数点としてではなく変数区切り記号として扱われるためです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2474">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2475">`Input` 関数を使用してファイルを読み取るには、`FileIOPermissionAccess` 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2475">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2476">詳細については、「 <xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2476">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2477">この例では、`Input` 関数を使用して、ファイルから2つの変数にデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2477">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6f693-2478">この例では、`TestFile` が、`Write` 関数を使用して複数行のデータが書き込まれたファイルであることを前提としています。各行には、引用符で区切った文字列と、コンマで区切られた数値 ("Hello"、234など) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2478">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2479">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2479">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2480">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2480">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2481">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2481">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2482">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2482">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, string&amp; Value) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2483">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2483">Required.</span></span> <span data-ttu-id="6f693-2484">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2484">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="6f693-2485">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2485">Required.</span></span> <span data-ttu-id="6f693-2486">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2486">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="6f693-2487">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2487">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2488">`Input` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2488">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2489">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2489">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2490">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2490">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2491">`Input` で読み取られるデータは通常、`Write`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2491">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6f693-2492">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2492">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2493">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2493">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2494">たとえば、Form1.vb という名前のファイルを Visual Basic 2005 ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2494">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6f693-2495">読み取り時に、標準の文字列または数値データが変更されずに変数に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2495">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6f693-2496">次の表は、他の入力データがどのように処理されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2496">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6f693-2497">Data</span><span class="sxs-lookup"><span data-stu-id="6f693-2497">Data</span></span>|<span data-ttu-id="6f693-2498">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="6f693-2498">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6f693-2499">コンマまたは空白行の区切り</span><span class="sxs-lookup"><span data-stu-id="6f693-2499">Delimiting comma or blank line</span></span>|<span data-ttu-id="6f693-2500">空</span><span class="sxs-lookup"><span data-stu-id="6f693-2500">Empty</span></span>|  
|<span data-ttu-id="6f693-2501">#NULL#</span><span class="sxs-lookup"><span data-stu-id="6f693-2501">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6f693-2502">#TRUE # または #FALSE#</span><span class="sxs-lookup"><span data-stu-id="6f693-2502">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6f693-2503">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="6f693-2503">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6f693-2504">式で表される日付/時刻</span><span class="sxs-lookup"><span data-stu-id="6f693-2504">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6f693-2505">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6f693-2505">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6f693-2506">`errornumber` (変数はエラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="6f693-2506">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6f693-2507">データ項目の入力中にファイルの末尾に近づいた場合は、入力が停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2507">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2508">`Input` 関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2508">The `Input` function is not localized.</span></span> <span data-ttu-id="6f693-2509">たとえば、ドイツ語版では、3, 14159 を入力した場合、3だけが返されます。これは、コンマが小数点としてではなく変数区切り記号として扱われるためです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2509">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2510">`Input` 関数を使用してファイルを読み取るには、`FileIOPermissionAccess` 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2510">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2511">詳細については、「 <xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2511">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2512">この例では、`Input` 関数を使用して、ファイルから2つの変数にデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2512">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6f693-2513">この例では、`TestFile` が、`Write` 関数を使用して複数行のデータが書き込まれたファイルであることを前提としています。各行には、引用符で区切った文字列と、コンマで区切られた数値 ("Hello"、234など) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2513">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2514">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2514">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2515">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2515">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2516">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2516">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2517">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2517">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string InputString(int32 FileNumber, int32 CharCount) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2518">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2518">Required.</span></span> <span data-ttu-id="6f693-2519">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2519">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="6f693-2520">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2520">Required.</span></span> <span data-ttu-id="6f693-2521">読み込む文字数を指定する有効な任意の数式。</span><span class="sxs-lookup"><span data-stu-id="6f693-2521">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="6f693-2522"><see langword="String" /> モードまたは <see langword="Input" /> モードで開いたファイルから読み取る文字を表す文字列型 (<see langword="Binary" />) の値を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2522">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="6f693-2523"><see langword="My" /> 機能を使用すると、<see langword="InputString" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2523">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="6f693-2524">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2524">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="6f693-2525"><see langword="Input" /> モードまたは <see langword="Binary" /> モードで開いたファイルからの文字が格納された文字列です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2525">A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="6f693-2526"><see langword="My" /> 機能を使用すると、<see langword="InputString" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2526">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2527">`InputString` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2527">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2528">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2528">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2529">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2529">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2530">`InputString` 関数で読み取られるデータは通常、`Print` または `FilePut`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2530">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="6f693-2531">この関数は、`Input` モードまたは `Binary` モードで開かれたファイルでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2531">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="6f693-2532">`Input` 関数とは異なり、`InputString` 関数は読み取るすべての文字を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2532">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="6f693-2533">これには、コンマ、キャリッジリターン、ラインフィード、引用符、および先頭のスペースが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2533">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="6f693-2534">`Binary` アクセスのために開かれたファイルを使用すると、`True` `EOF` によってエラーが生成されるまで、`InputString` 関数を使用してファイルを読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2534">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="6f693-2535">`InputString`を使用してバイナリファイルを読み取るときに `EOF` ではなく `LOF` および `Loc` 関数を使用するか、`FileGet` 関数を使用するときに `EOF` を使用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2535">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2536">ファイルから読み取る場合は、ファイル名拡張子に基づいて、ファイルの内容に関するセキュリティ上の決定を行うことは避けてください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2536">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6f693-2537">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2537">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2538">この例では、`InputString` 関数を使用して、ファイルから一度に1つの文字を読み取り、`Output` ウィンドウに出力します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2538">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="6f693-2539">この例では、`MyFile` が複数行のサンプルデータを含むテキストファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2539">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2540"><paramref name="FileNumber" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2540"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-2541"><paramref name="CharCount" /> は &lt; 0 または &gt; 214 です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2541"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2542">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2542">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2543">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2543">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2544">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2544">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Kill(string PathName) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="6f693-2545">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2545">Required.</span></span> <span data-ttu-id="6f693-2546">削除する 1 つ以上のファイル名を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2546">A string expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="6f693-2547"><paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2547"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="6f693-2548">ファイルをディスクから削除します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2548">Deletes files from a disk.</span></span> <span data-ttu-id="6f693-2549"><see langword="My" /> 機能を使用すると、<see langword="Kill" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2549">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="6f693-2550">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2550">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2551">`Kill` では、複数文字 (`*`) と1文字 (`?`) のワイルドカードを使用して複数のファイルを指定できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2551">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="6f693-2552">**セキュリティ**に関する注意を実行するには、`Kill` 関数で、実行中のコードに <xref:System.Security.Permissions.FileIOPermission> のフラグ `Read` と `PathDiscovery` を与える必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2552">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="6f693-2553">詳細については、「<xref:System.Security.SecurityException>[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2553">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2554">この例では、`Kill` 関数を使用して、ディスクからファイルを削除します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2554">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2555">対象のファイルが開かれています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2555">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6f693-2556">対象のファイルが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2556">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="6f693-2557">アクセス許可は拒否されました。</span><span class="sxs-lookup"><span data-stu-id="6f693-2557">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LineInput(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2558">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2558">Required.</span></span> <span data-ttu-id="6f693-2559">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2559">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="6f693-2560">開かれたシーケンシャル ファイルから 1 行を読み込み、<see langword="String" /> 変数に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2560">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="6f693-2561">開かれたシーケンシャル ファイルから 1 行を読み込み、<see langword="String" /> 変数に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2561">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2562">`LineInput` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2562">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2563">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2563">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2564">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2564">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2565">`LineInput` で読み取られるデータは通常、`Print`を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2565">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2566">ファイルから読み取る場合は、ファイル名拡張子に基づいてファイルの内容を決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2566">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6f693-2567">たとえば、Form1.vb という名前のファイルを Visual Basic ソースファイルにすることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2567">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="6f693-2568">`LineInput` 関数は、キャリッジリターン (`Chr(13)`) またはキャリッジリターン/ラインフィード (`Chr(13) + Chr(10)`) シーケンスが検出されるまで、一度に1文字ずつファイルを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2568">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="6f693-2569">キャリッジリターン/ラインフィードシーケンスは、文字列に追加されるのではなく、スキップされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2569">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2570">`LineInput` 関数を使用してファイルを読み取るには、<xref:System.Security.Permissions.FileIOPermissionAccess> 列挙からの `Read` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2570">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2571">この例では、`LineInput` 関数を使用して、シーケンシャルファイルから行を読み取り、それを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2571">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="6f693-2572">この例では、`TestFile` が複数行のサンプルデータを含むテキストファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2572">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="6f693-2573">ファイルの終端に達しました。</span><span class="sxs-lookup"><span data-stu-id="6f693-2573">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2574"><paramref name="FileNumber" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2574"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2575">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2575">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2576">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2576">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2577">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2577">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Loc(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2578">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2578">Required.</span></span> <span data-ttu-id="6f693-2579">有効な任意の <see langword="Integer" /> 型のファイル番号。</span><span class="sxs-lookup"><span data-stu-id="6f693-2579">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="6f693-2580">開かれたファイル内の現在の読み込みと書き込みの位置を指定する値を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2580">Returns a value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="6f693-2581">開かれたファイル内の現在の読み取り/書き込み位置です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2581">The current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2582">`Loc` 関数は0から始まります。これを使用してファイル内の最初のバイトを取得すると、0が返されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2582">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="6f693-2583">`Loc` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2583">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2584">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2584">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2585">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2585">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2586">次に、各ファイルアクセスモードの戻り値について説明します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2586">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="6f693-2587">モード</span><span class="sxs-lookup"><span data-stu-id="6f693-2587">Mode</span></span>|<span data-ttu-id="6f693-2588">戻り値</span><span class="sxs-lookup"><span data-stu-id="6f693-2588">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="6f693-2589">ファイルから読み取られた、またはファイルに書き込まれた最後のレコードの番号。</span><span class="sxs-lookup"><span data-stu-id="6f693-2589">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="6f693-2590">ファイル内の現在のバイト位置を128で割った値。</span><span class="sxs-lookup"><span data-stu-id="6f693-2590">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="6f693-2591">ただし、シーケンシャルファイルの `Loc` によって返される情報は、使用も必須でもありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2591">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="6f693-2592">読み取りまたは書き込みが最後に読み取られたバイトの位置。</span><span class="sxs-lookup"><span data-stu-id="6f693-2592">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2593">この例では、`Loc` 関数を使用して、開いているファイル内の現在の読み取り/書き込み位置を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2593">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="6f693-2594">この例では、`MyFile` が複数行のサンプルデータを含むテキストファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2594">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2595">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2595">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6f693-2596"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2596">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="6f693-2597"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2597">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="6f693-2598">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2598">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Lock(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2599">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2599">Required.</span></span> <span data-ttu-id="6f693-2600">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2600">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="6f693-2601"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2601">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="6f693-2602"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="6f693-2603">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2604">`Lock` および `Unlock` 関数は、複数のプロセスが同じファイルへのアクセスを必要とする環境で使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2604">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="6f693-2605">`Lock` 関数と `Unlock` 関数は、常にペアで使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2605">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="6f693-2606">`Lock` と `Unlock` の引数は、同一である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2606">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="6f693-2607">`Record`、または `FromRecord` と `ToRecord` が指定されていない場合、ファイル全体に対してロックが設定されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2607">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="6f693-2608">`Record` だけを指定した場合は、1つのレコードがロックまたはロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2608">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="6f693-2609">ファイルがシーケンシャル入力または出力用に開かれている場合、`FromRecord` と`ToRecord`で指定された範囲に関係なく、`Lock` と `Unlock` はファイル全体に影響します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2609">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2610">この例では、`Lock` 関数と `Unlock` 関数の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2610">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="6f693-2611">この例では、`People.txt` が `Person`構造のレコードを含むファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2611">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2612">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2612">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2613">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2613">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Lock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2614">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2614">Required.</span></span> <span data-ttu-id="6f693-2615">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2615">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="6f693-2616">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-2616">Optional.</span></span> <span data-ttu-id="6f693-2617">ロックまたはアンロックされる唯一のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="6f693-2617">Number of the only record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="6f693-2618"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2618">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="6f693-2619"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2619">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="6f693-2620">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2620">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2621">`Lock` および `Unlock` 関数は、複数のプロセスが同じファイルへのアクセスを必要とする環境で使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2621">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="6f693-2622">`Lock` 関数と `Unlock` 関数は、常にペアで使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2622">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="6f693-2623">`Lock` と `Unlock` の引数は、同一である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2623">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="6f693-2624">`Record`、または `FromRecord` と `ToRecord` が指定されていない場合、ファイル全体に対してロックが設定されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2624">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="6f693-2625">`Record` だけを指定した場合は、1つのレコードがロックまたはロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2625">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="6f693-2626">ファイルがシーケンシャル入力または出力用に開かれている場合、`FromRecord` と`ToRecord`で指定された範囲に関係なく、`Lock` と `Unlock` はファイル全体に影響します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2626">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2627">この例では、`Lock` 関数と `Unlock` 関数の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2627">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="6f693-2628">この例では、`People.txt` が `Person`構造のレコードを含むファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2628">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2629">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2629">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2630">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2630">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2631">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2631">Required.</span></span> <span data-ttu-id="6f693-2632">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2632">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="6f693-2633">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-2633">Optional.</span></span> <span data-ttu-id="6f693-2634">ロックまたはアンロックされる最初のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="6f693-2634">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="6f693-2635">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-2635">Optional.</span></span> <span data-ttu-id="6f693-2636">ロックまたはアンロックされる最後のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="6f693-2636">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="6f693-2637"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2637">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="6f693-2638"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2638">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="6f693-2639">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2639">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2640">`Lock` および `Unlock` 関数は、複数のプロセスが同じファイルへのアクセスを必要とする環境で使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2640">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="6f693-2641">`Lock` 関数と `Unlock` 関数は、常にペアで使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2641">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="6f693-2642">`Lock` と `Unlock` の引数は、同一である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2642">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="6f693-2643">`Record`、または `FromRecord` と `ToRecord` が指定されていない場合、ファイル全体に対してロックが設定されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2643">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="6f693-2644">`Record` だけを指定した場合は、1つのレコードがロックまたはロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2644">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="6f693-2645">ファイルがシーケンシャル入力または出力用に開かれている場合、`FromRecord` と`ToRecord`で指定された範囲に関係なく、`Lock` と `Unlock` はファイル全体に影響します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2645">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2646">この例では、`Lock` 関数と `Unlock` 関数の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2646">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="6f693-2647">この例では、`People.txt` が `Person`構造のレコードを含むファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2647">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2648">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2648">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2649">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2649">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LOF(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2650">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2650">Required.</span></span> <span data-ttu-id="6f693-2651">有効なファイル番号が格納された整数です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2651">An integer that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="6f693-2652"><see langword="FileOpen" /> 関数を使用して開かれたファイルのサイズをバイト単位で返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2652">Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="6f693-2653"><see langword="My" /> 機能を使用すると、<see langword="LOF" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="6f693-2654">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="6f693-2655"><see langword="FileOpen" /> 関数を使用して開かれたファイルのサイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="6f693-2655">The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="6f693-2656"><see langword="My" /> 機能を使用すると、<see langword="LOF" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2657">開かれていないファイルの長さを取得するには、`FileLen` 関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2657">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2658">この例では、`LOF` 関数を使用して、開いているファイルのサイズを決定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2658">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="6f693-2659">この例では、`TestFile` がサンプルデータを含むテキストファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2659">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2660">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2660">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-2661">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-2661">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-2662">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-2662">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MkDir(string Path) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="6f693-2663">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2663">Required.</span></span> <span data-ttu-id="6f693-2664">作成されるディレクトリを識別する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2664">A string expression that identifies the directory to be created.</span></span> <span data-ttu-id="6f693-2665"><paramref name="Path" /> にはドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2665">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="6f693-2666">ドライブを指定しない場合、<see langword="MkDir" /> は現在のドライブに新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2666">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="6f693-2667">新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2667">Creates a new directory.</span></span> <span data-ttu-id="6f693-2668"><see langword="My" /> 機能を使用すると、<see langword="MkDir" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2668">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="6f693-2669">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2669">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2670">この関数は、新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2670">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2671">この例では、`MkDir` 関数を使用してディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2671">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="6f693-2672">ドライブが指定されていない場合は、現在のドライブに新しいディレクトリが作成されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2672">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-2673"><paramref name="Path" /> が指定されていません。または空です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2673"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="6f693-2674">アクセス許可は拒否されました。</span><span class="sxs-lookup"><span data-stu-id="6f693-2674">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2675">ディレクトリが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2675">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="6f693-2676">方法 : Visual Basic でディレクトリを作成する</span><span class="sxs-lookup"><span data-stu-id="6f693-2676">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2677">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2677">Required.</span></span> <span data-ttu-id="6f693-2678">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2678">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="6f693-2679">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-2679">Optional.</span></span> <span data-ttu-id="6f693-2680">ファイルへ書き込む 0 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="6f693-2680">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="6f693-2681"><paramref name="Output" /> 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2681">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="6f693-2682"><see langword="T:System.IO.IOException" />:ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2682"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="6f693-2683"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2683"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="6f693-2684">表示形式データをシーケンシャル ファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2684">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2685">`Print` 関数と `PrintLine` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2685">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2686">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2686">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2687">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2687">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2688">`Print` には、行の末尾に改行が含まれていません。ただし、`PrintLine` にはラインフィードが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2688">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="6f693-2689">通常、`Print` で書き込まれたデータは、`LineInput` または `Input`を使用してファイルから読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2689">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="6f693-2690">`PrintLine`に対して `Output` を省略した場合、空白行がファイルに出力されます。`Print`の場合、何も出力されません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2690">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="6f693-2691">コンマで区切られた複数の式はタブ境界に沿って配置されますが、コンマと `TAB` が混在していると結果が矛盾する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2691">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="6f693-2692">`Boolean` データの場合、`True` または `False` のいずれかが印刷されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2692">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="6f693-2693">ロケールに関係なく、`True` キーワードと `False` キーワードは翻訳されません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2693">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="6f693-2694">日付データは、システムによって認識される標準の短い日付形式を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2694">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="6f693-2695">日付または時刻コンポーネントが見つからないかゼロの場合は、指定された部分だけがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2695">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="6f693-2696">`Output` データが空の場合、ファイルには何も書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2696">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="6f693-2697">ただし、`Output` リストのデータが `DBNull`場合は、`Null` がファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2697">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="6f693-2698">`Error` データの場合、出力は `Error errorcode`として表示されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2698">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="6f693-2699">`Error` キーワードは、ロケールに関係なく変換されません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2699">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="6f693-2700">`Print` を使用してファイルに書き込まれるすべてのデータは、国際的に認識されます。つまり、適切な小数点区切り記号を使用してデータが正しく書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2700">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="6f693-2701">ユーザーが複数のロケールで使用するデータを出力する場合は、`Write` を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2701">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="6f693-2702">`Print` または `PrintLine` 関数を使用してファイルに書き込むには、`FileIOPermissionAccess` 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2702">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2703">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2703">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2704">この例では、`Print` 関数と `PrintLine` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2704">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2705">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2705">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2706">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2706">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2707">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2707">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PrintLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2708">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2708">Required.</span></span> <span data-ttu-id="6f693-2709">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2709">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="6f693-2710">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-2710">Optional.</span></span> <span data-ttu-id="6f693-2711">ファイルへ書き込む 0 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="6f693-2711">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="6f693-2712"><paramref name="Output" /> 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2712">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="6f693-2713"><see langword="T:System.IO.IOException" />:ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2713"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="6f693-2714"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2714"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="6f693-2715">表示形式データをシーケンシャル ファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2715">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2716">`Print` 関数と `PrintLine` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2716">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2717">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2717">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2718">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2718">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2719">`Print` には、行の末尾に改行が含まれていません。ただし、`PrintLine` にはラインフィードが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2719">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="6f693-2720">通常、`Print` で書き込まれたデータは、`LineInput` または `Input`を使用してファイルから読み取られます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2720">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="6f693-2721">`PrintLine`に対して `Output` を省略した場合、空白行がファイルに出力されます。`Print`の場合、何も出力されません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2721">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="6f693-2722">コンマで区切られた複数の式はタブ境界に沿って配置されますが、コンマと `TAB` が混在していると結果が矛盾する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2722">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="6f693-2723">`Boolean` データの場合、`True` または `False` のいずれかが印刷されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2723">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="6f693-2724">ロケールに関係なく、`True` キーワードと `False` キーワードは翻訳されません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2724">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="6f693-2725">日付データは、システムによって認識される標準の短い日付形式を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2725">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="6f693-2726">日付または時刻コンポーネントが見つからないかゼロの場合は、指定された部分だけがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2726">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="6f693-2727">`Output` データが空の場合、ファイルには何も書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2727">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="6f693-2728">ただし、`Output` リストのデータが `DBNull`場合は、`Null` がファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2728">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="6f693-2729">`Error` データの場合、出力は `Error errorcode`として表示されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2729">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="6f693-2730">`Error` キーワードは、ロケールに関係なく変換されません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2730">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="6f693-2731">`Print` を使用してファイルに書き込まれるすべてのデータは、国際的に認識されます。つまり、適切な小数点区切り記号を使用してデータが正しく書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2731">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="6f693-2732">ユーザーが複数のロケールで使用するデータを出力する場合は、`Write` を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2732">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="6f693-2733">`Print` または `PrintLine` 関数を使用してファイルに書き込むには、`FileIOPermissionAccess` 列挙からの `Write` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2733">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2734">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2734">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2735">この例では、`Print` 関数と `PrintLine` 関数を使用して、データをファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2735">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2736">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2736">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2737">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2737">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2738">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2738">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Rename(string OldPath, string NewPath) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="6f693-2739">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2739">Required.</span></span> <span data-ttu-id="6f693-2740">既存のファイルの名前と場所を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2740">A string expression that specifies the existing file name and location.</span></span> <span data-ttu-id="6f693-2741"><paramref name="OldPath" /> には、ファイルのディレクトリおよびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2741"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="6f693-2742">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2742">Required.</span></span> <span data-ttu-id="6f693-2743">新しいファイルの名前と場所を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2743">A string expression that specifies the new file name and location.</span></span> <span data-ttu-id="6f693-2744"><paramref name="NewPath" /> には、出力先のディレクトリおよびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2744"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="6f693-2745"><paramref name="NewPath" /> には、既に存在しているファイル名は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2745">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="6f693-2746">ディスク ファイルまたはディレクトリの名前を変更します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2746">Renames a disk file or directory.</span></span> <span data-ttu-id="6f693-2747"><see langword="My" /> 機能を使用すると、<see langword="Rename" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2747">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="6f693-2748">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2748">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2749">`Rename` 関数は、ファイルの名前を変更し、必要に応じて別のディレクトリに移動します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2749">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="6f693-2750">`Rename` 関数は、ドライブ間でファイルを移動できますが、`NewPath` と `OldPath` の両方が同じドライブに配置されている場合にのみ、既存のディレクトリの名前を変更できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2750">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="6f693-2751">新しいファイルまたはディレクトリを作成 `Rename` ことはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2751">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="6f693-2752">開いているファイルで `Rename` 関数を使用すると、エラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2752">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="6f693-2753">名前を変更する前に、開いているファイルを閉じる必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2753">You must close an open file before renaming it.</span></span> <span data-ttu-id="6f693-2754">`Rename` の引数には、複数の文字 (\*) と1文字 (?) のワイルドカードを含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2754">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6f693-2755">`Rename` を使用して保護されていない場所から保護された場所にファイルをコピーする場合、ファイルは制限の少ない権限を保持します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2755">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="6f693-2756">セキュリティリスクが生じる可能性がないことを確認してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2756">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2757">この例では、`Rename` 関数を使用してファイルの名前を変更します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2757">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="6f693-2758">この例では、指定されたディレクトリが既に存在することを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2758">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-2759">パスが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2759">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6f693-2760"><paramref name="OldPath" /> ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2760"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2761">異なるデバイスには名前を変更できません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2761">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="6f693-2762">方法 : Visual Basic でファイルの名前を変更する</span><span class="sxs-lookup"><span data-stu-id="6f693-2762">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reset() cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6f693-2763"><see langword="FileOpen" /> 関数を使用して開いたすべてのディスク ファイルを閉じます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2763">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="6f693-2764"><see langword="My" /> 機能を使用すると、<see langword="Reset" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2764">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="6f693-2765">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2765">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2766">`Reset` 関数は、`FileOpen` 関数によって開かれたすべてのアクティブなファイルを閉じ、パラメーターを指定せずに `FileClose()` と同じ機能を持ちます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2766">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2767">この例では、`Reset` 関数を使用して開いているすべてのファイルを閉じ、すべてのファイルバッファーの内容をディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2767">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="6f693-2768">`Object` 変数 `FileNumber` 文字列と数値の両方として使用されていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2768">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="6f693-2769">End ステートメント</span><span class="sxs-lookup"><span data-stu-id="6f693-2769">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RmDir(string Path) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="6f693-2770">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2770">Required.</span></span> <span data-ttu-id="6f693-2771">削除するディレクトリまたはフォルダーを識別する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2771">A string expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="6f693-2772"><paramref name="Path" /> にはドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2772"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="6f693-2773">ドライブを指定しない場合、<see langword="RmDir" /> は現在のドライブのディレクトリを削除します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2773">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="6f693-2774">既存のディレクトリを削除します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2774">Removes an existing directory.</span></span> <span data-ttu-id="6f693-2775"><see langword="My" /> 機能を使用すると、<see langword="RmDir" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="6f693-2776">詳細については、「<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2776">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2777">ファイルが格納されているディレクトリで `RmDir` を使用しようとすると、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2777">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="6f693-2778">`Kill` 関数を使用して、ディレクトリを削除する前にすべてのファイルを削除します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2778">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2779">この例では、`RmDir` 関数を使用して、既存のディレクトリを削除します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2779">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-2780"><paramref name="Path" /> が指定されていません。または空です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2780"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2781">対象のディレクトリにファイルが存在しています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2781">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6f693-2782">ディレクトリが存在していません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2782">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6f693-2783"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2783">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="6f693-2784"><see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="6f693-2785">詳細については、「 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2785">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Seek(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2786">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2786">Required.</span></span> <span data-ttu-id="6f693-2787">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="6f693-2787">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="6f693-2788"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2788">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="6f693-2789"><see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2789">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="6f693-2790">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2790">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="6f693-2791"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" />。または、<see langword="FileOpen" /> 関数を使用して開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2791">A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2792">`Seek` は、1 ~ 2147483647 (2 ^ 31-1 に相当) の値を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2792">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="6f693-2793">次に、各ファイルアクセスモードの戻り値について説明します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2793">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="6f693-2794">モード</span><span class="sxs-lookup"><span data-stu-id="6f693-2794">Mode</span></span>|<span data-ttu-id="6f693-2795">戻り値</span><span class="sxs-lookup"><span data-stu-id="6f693-2795">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="6f693-2796">次のレコードの読み取りまたは書き込みの番号</span><span class="sxs-lookup"><span data-stu-id="6f693-2796">Number of the next record read or written</span></span>|  
|<span data-ttu-id="6f693-2797">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="6f693-2797">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="6f693-2798">次の操作が発生するバイト位置。</span><span class="sxs-lookup"><span data-stu-id="6f693-2798">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="6f693-2799">ファイルの最初のバイトの位置は1で、2番目のバイトは2の位置にあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2799">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2800">この例では、`Seek` 関数を使用して、現在のファイルの位置を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2800">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="6f693-2801">この例では `TestFile` が `Record`構造のレコードを含むファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2801">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="6f693-2802">`Random` モードで開かれたファイルの場合、`Seek` は次のレコードの数を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2802">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="6f693-2803">`Random` モード以外のモードで開かれたファイルの場合、`Seek` は次の操作が行われるバイト位置を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2803">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="6f693-2804">`TestFile` が複数行のテキストを含むファイルであるとします。</span><span class="sxs-lookup"><span data-stu-id="6f693-2804">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="6f693-2805">この例では、`Seek` 関数を使用して、ファイル内の次の読み取りまたは書き込みの位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2805">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="6f693-2806">`Random` モード以外のモードで開かれたファイルの場合、`Seek` は次の操作が行われるバイト位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2806">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="6f693-2807">`TestFile` が複数行のテキストを含むファイルであるとします。</span><span class="sxs-lookup"><span data-stu-id="6f693-2807">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2808">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2808">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-2809">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-2809">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-2810">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-2810">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Seek(int32 FileNumber, int64 Position) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2811">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2811">Required.</span></span> <span data-ttu-id="6f693-2812">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="6f693-2812">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="6f693-2813">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2813">Required.</span></span> <span data-ttu-id="6f693-2814">次の読み書き操作が発生する場所を示す 1 から 2,147,483,647 の範囲の数値。</span><span class="sxs-lookup"><span data-stu-id="6f693-2814">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="6f693-2815"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2815">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="6f693-2816"><see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2816">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="6f693-2817">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2817">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2818">`Seek` は、1 ~ 2147483647 (2 ^ 31-1 に相当) の値を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2818">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="6f693-2819">次に、各ファイルアクセスモードの戻り値について説明します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2819">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="6f693-2820">モード</span><span class="sxs-lookup"><span data-stu-id="6f693-2820">Mode</span></span>|<span data-ttu-id="6f693-2821">戻り値</span><span class="sxs-lookup"><span data-stu-id="6f693-2821">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="6f693-2822">次のレコードの読み取りまたは書き込みの番号</span><span class="sxs-lookup"><span data-stu-id="6f693-2822">Number of the next record read or written</span></span>|  
|<span data-ttu-id="6f693-2823">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="6f693-2823">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="6f693-2824">次の操作が発生するバイト位置。</span><span class="sxs-lookup"><span data-stu-id="6f693-2824">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="6f693-2825">ファイルの最初のバイトの位置は1で、2番目のバイトは2の位置にあります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2825">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2826">この例では、`Seek` 関数を使用して、現在のファイルの位置を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2826">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="6f693-2827">この例では `TestFile` が `Record`構造のレコードを含むファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2827">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="6f693-2828">`Random` モードで開かれたファイルの場合、`Seek` は次のレコードの数を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2828">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="6f693-2829">`Random` モード以外のモードで開かれたファイルの場合、`Seek` は次の操作が行われるバイト位置を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2829">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="6f693-2830">`TestFile` が複数行のテキストを含むファイルであるとします。</span><span class="sxs-lookup"><span data-stu-id="6f693-2830">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="6f693-2831">この例では、`Seek` 関数を使用して、ファイル内の次の読み取りまたは書き込みの位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2831">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="6f693-2832">`Random` モード以外のモードで開かれたファイルの場合、`Seek` は次の操作が行われるバイト位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2832">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="6f693-2833">`TestFile` が複数行のテキストを含むファイルであるとします。</span><span class="sxs-lookup"><span data-stu-id="6f693-2833">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2834">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2834">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="6f693-2835">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="6f693-2835">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="6f693-2836">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="6f693-2836">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="6f693-2837">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2837">Required.</span></span> <span data-ttu-id="6f693-2838">ファイル名を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2838">A string expression that specifies a file name.</span></span> <span data-ttu-id="6f693-2839"><paramref name="PathName" /> にはディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2839"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="6f693-2840">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2840">Required.</span></span> <span data-ttu-id="6f693-2841">定数式または数式の合計がファイル属性を指定する場合の定数式または数式。</span><span class="sxs-lookup"><span data-stu-id="6f693-2841">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="6f693-2842">ファイルの属性情報を設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2842">Sets attribute information for a file.</span></span> <span data-ttu-id="6f693-2843"><see langword="My" /> 機能を使用すると、<see langword="SetAttr" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2843">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="6f693-2844">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2844">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2845">開いているファイルの属性を設定しようとすると、実行時エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2845">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="6f693-2846">`Attributes` 引数の列挙値は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="6f693-2846">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="6f693-2847">値</span><span class="sxs-lookup"><span data-stu-id="6f693-2847">Value</span></span>|<span data-ttu-id="6f693-2848">定数</span><span class="sxs-lookup"><span data-stu-id="6f693-2848">Constant</span></span>|<span data-ttu-id="6f693-2849">説明</span><span class="sxs-lookup"><span data-stu-id="6f693-2849">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="6f693-2850">Normal (既定値)。</span><span class="sxs-lookup"><span data-stu-id="6f693-2850">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="6f693-2851">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2851">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="6f693-2852">Hidden。</span><span class="sxs-lookup"><span data-stu-id="6f693-2852">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="6f693-2853">システム ファイル。</span><span class="sxs-lookup"><span data-stu-id="6f693-2853">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="6f693-2854">ボリューム ラベル</span><span class="sxs-lookup"><span data-stu-id="6f693-2854">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="6f693-2855">ディレクトリまたはフォルダー。</span><span class="sxs-lookup"><span data-stu-id="6f693-2855">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="6f693-2856">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2856">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="6f693-2857">ファイルの名前が異なります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2857">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2858">これらの列挙体は Visual Basic 言語で指定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2858">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="6f693-2859">名前は、実際の値ではなく、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2859">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2860">この例では、`SetAttr` 関数を使用して、ファイルの属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2860">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6f693-2861"><paramref name="Attribute" /> の型が無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2861"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="6f693-2862">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2862">Required.</span></span> <span data-ttu-id="6f693-2863">リストの次の式を表示または出力する前に挿入する空白の数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2863">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="6f693-2864"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2864">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="6f693-2865"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2865">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2866">`Count` が出力線の幅よりも小さい場合は、次の印刷位置が、印刷されるスペースの数の直後になります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2866">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="6f693-2867">`Count` が出力線の幅より大きい場合、`SPC` は次の式を使用して次の印刷位置を計算します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2867">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="6f693-2868">`currentprintposition`(+ (`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="6f693-2868">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="6f693-2869">たとえば、現在の印刷位置が24で、出力線の幅が80で、`SPC(90)`を指定した場合、次の印刷は位置 34 (現在の印刷位置 + 90/80 の剰余) から開始されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2869">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="6f693-2870">現在の印刷位置と出力行の幅の差が `Count` (または `Count` `Mod`*幅*) よりも小さい場合、`SPC` 関数は次の行の先頭にスキップし、`Count`-(*width* - *currentprintposition*) と同じスペースを生成します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2870">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2871">表形式の列に、ワイド文字を許可するのに十分な幅があることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2871">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2872">この例では、`SPC` 関数を使用して、出力をファイルと**出力**ウィンドウに配置します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2872">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="6f693-2873">Mod 演算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2873">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6f693-2874"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6f693-2875"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2875">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="6f693-2876"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2876">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2877">現在の行の現在の印刷位置が `Column`より大きい場合、`TAB` は次の出力行の `Column` に等しい列値にスキップします。</span><span class="sxs-lookup"><span data-stu-id="6f693-2877">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="6f693-2878">`Column` が1未満の場合、`TAB` は印刷位置を列1に移動します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2878">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="6f693-2879">`Column` が出力線の幅より大きい場合、`TAB` は次の式を使用して次の印刷位置を計算します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2879">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="6f693-2880">列の Mod の幅</span><span class="sxs-lookup"><span data-stu-id="6f693-2880">Column Mod width</span></span>  
  
 <span data-ttu-id="6f693-2881">たとえば、 *width*が80で `TAB(90)`指定した場合、次の印刷は列 10 (90/80 の剰余) から開始されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2881">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="6f693-2882">`Column` が現在の印刷位置より小さい場合は、計算された印刷位置の次の行で印刷が開始されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2882">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="6f693-2883">計算された印刷位置が現在の印刷位置より大きい場合は、同じ行の計算された印刷位置から印刷が開始されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2883">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="6f693-2884">出力行の左端の印刷位置は常に1です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2884">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="6f693-2885">`Print` または `PrintLine` 関数を使用してファイルに出力すると、出力ファイルの現在の幅が右端の印刷位置になります。これは、`FileWidth` 関数を使用して設定できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2885">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="6f693-2886">`TAB` 関数は、`WriteLine` 関数と共に使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2886">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="6f693-2887"><xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> または <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>と共に使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2887">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2888">表形式の列に、ワイド文字を格納するのに十分な幅があることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2888">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2889">この例では、`TAB` 関数を使用して、出力をファイルと**出力**ウィンドウに配置します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2889">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="6f693-2890">Mod 演算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2890">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="6f693-2891">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-2891">Optional.</span></span> <span data-ttu-id="6f693-2892">リスト内の次の式を表示または出力する前に移動する先の列番号。</span><span class="sxs-lookup"><span data-stu-id="6f693-2892">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="6f693-2893">省略した場合、<see langword="TAB" /> は挿入位置を次の印字領域の最初に移動します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2893">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="6f693-2894"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2894">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="6f693-2895"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2895">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2896">現在の行の現在の印刷位置が `Column`よりも大きい場合、`TAB` は次の出力行の `Column` に等しい列値にスキップします。</span><span class="sxs-lookup"><span data-stu-id="6f693-2896">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="6f693-2897">`Column` が1未満の場合、`TAB` は印刷位置を列1に移動します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2897">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="6f693-2898">`Column` が出力線の幅より大きい場合、`TAB` は次の式を使用して次の印刷位置を計算します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2898">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="6f693-2899">列の Mod の幅</span><span class="sxs-lookup"><span data-stu-id="6f693-2899">Column Mod width</span></span>  
  
 <span data-ttu-id="6f693-2900">たとえば、 *width*が80で `TAB(90)`指定した場合、次の印刷は列 10 (90/80 の剰余) から開始されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2900">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="6f693-2901">`Column` が現在の印刷位置より小さい場合は、計算された印刷位置の次の行で印刷が開始されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2901">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="6f693-2902">計算された印刷位置が現在の印刷位置より大きい場合は、同じ行の計算された印刷位置から印刷が開始されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2902">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="6f693-2903">出力行の左端の印刷位置は常に1です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2903">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="6f693-2904">`Print` または `PrintLine` 関数を使用してファイルに出力すると、出力ファイルの現在の幅が右端の印刷位置になります。これは、`FileWidth` 関数を使用して設定できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2904">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="6f693-2905">`TAB` 関数は、`WriteLine` 関数と共に使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2905">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="6f693-2906"><xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> または <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>と共に使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2906">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f693-2907">表形式の列に、ワイド文字を格納するのに十分な幅があることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2907">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2908">この例では、`TAB` 関数を使用して、出力をファイルと**出力**ウィンドウに配置します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2908">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="6f693-2909">Mod 演算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2909">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6f693-2910"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2910">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="6f693-2911"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2911">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="6f693-2912">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2912">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unlock(int32 FileNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2913">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2913">Required.</span></span> <span data-ttu-id="6f693-2914">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2914">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="6f693-2915"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2915">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="6f693-2916"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2916">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="6f693-2917">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2917">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2918">`Lock` および `Unlock` 関数は、複数のプロセスが同じファイルへのアクセスを必要とする環境で使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2918">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="6f693-2919">`Lock` 関数と `Unlock` 関数は、常にペアで使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2919">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="6f693-2920">`Lock` と `Unlock` の引数は、同一である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2920">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="6f693-2921">`Record`、または `FromRecord` と `ToRecord` が指定されていない場合、ファイル全体に対してロックが設定されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2921">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="6f693-2922">`Record` だけを指定した場合は、1つのレコードがロックまたはロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2922">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="6f693-2923">ファイルがシーケンシャル入力または出力用に開かれている場合、`FromRecord` と`ToRecord`で指定された範囲に関係なく、`Lock` と `Unlock` はファイル全体に影響します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2923">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2924">この例では、`Lock` 関数と `Unlock` 関数の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2924">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="6f693-2925">この例では、`People.txt` が `Person`構造のレコードを含むファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2925">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2926">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2926">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2927">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2927">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unlock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2928">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2928">Required.</span></span> <span data-ttu-id="6f693-2929">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2929">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="6f693-2930">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-2930">Optional.</span></span> <span data-ttu-id="6f693-2931">ロックまたはアンロックされる唯一のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="6f693-2931">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="6f693-2932"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2932">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="6f693-2933"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2933">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="6f693-2934">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2934">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2935">`Lock` および `Unlock` 関数は、複数のプロセスが同じファイルへのアクセスを必要とする環境で使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2935">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="6f693-2936">`Lock` 関数と `Unlock` 関数は、常にペアで使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2936">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="6f693-2937">`Lock` と `Unlock` の引数は、同一である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2937">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="6f693-2938">`Record`、または `FromRecord` と `ToRecord` が指定されていない場合、ファイル全体に対してロックが設定されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2938">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="6f693-2939">`Record` だけを指定した場合は、1つのレコードがロックまたはロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2939">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="6f693-2940">ファイルがシーケンシャル入力または出力用に開かれている場合、`FromRecord` と`ToRecord`で指定された範囲に関係なく、`Lock` と `Unlock` はファイル全体に影響します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2940">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2941">この例では、`Lock` 関数と `Unlock` 関数の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2941">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="6f693-2942">この例では、`People.txt` が `Person`構造のレコードを含むファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2942">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2943">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2943">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2944">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2944">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2945">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2945">Required.</span></span> <span data-ttu-id="6f693-2946">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="6f693-2946">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="6f693-2947">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-2947">Optional.</span></span> <span data-ttu-id="6f693-2948">ロックまたはアンロックされる最初のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="6f693-2948">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="6f693-2949">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-2949">Optional.</span></span> <span data-ttu-id="6f693-2950">ロックまたはアンロックされる最後のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="6f693-2950">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="6f693-2951"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2951">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="6f693-2952"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2952">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="6f693-2953">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2953">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2954">`Lock` および `Unlock` 関数は、複数のプロセスが同じファイルへのアクセスを必要とする環境で使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2954">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="6f693-2955">`Lock` 関数と `Unlock` 関数は、常にペアで使用されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2955">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="6f693-2956">`Lock` と `Unlock` の引数は、同一である必要があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2956">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="6f693-2957">`Record`、または `FromRecord` と `ToRecord` が指定されていない場合、ファイル全体に対してロックが設定されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2957">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="6f693-2958">`Record` だけを指定した場合は、1つのレコードがロックまたはロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2958">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="6f693-2959">ファイルがシーケンシャル入力または出力用に開かれている場合、`FromRecord` と`ToRecord`で指定された範囲に関係なく、`Lock` と `Unlock` はファイル全体に影響します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2959">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2960">この例では、`Lock` 関数と `Unlock` 関数の使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2960">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="6f693-2961">この例では、`People.txt` が `Person`構造のレコードを含むファイルであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="6f693-2961">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2962">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2962">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2963">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2963">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2964">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2964">Required.</span></span> <span data-ttu-id="6f693-2965">任意の有効なファイル数を含む <see langword="Integer" /> 式。</span><span class="sxs-lookup"><span data-stu-id="6f693-2965">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="6f693-2966">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-2966">Optional.</span></span> <span data-ttu-id="6f693-2967">ファイルへ書き込む 1 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="6f693-2967">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="6f693-2968">シーケンシャル ファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2968">Writes data to a sequential file.</span></span> <span data-ttu-id="6f693-2969"><see langword="Write" /> を使用して書き込まれたデータは通常、<see langword="Input" /> を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2969">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-2970">`Write` 関数と `WriteLine` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-2970">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-2971">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2971">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-2972">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2972">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-2973">`Output`を省略した場合は、空白行がファイルに出力されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2973">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="6f693-2974">複数の式は、コンマで区切ることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2974">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="6f693-2975">`Print` 関数とは異なり、`Write` 関数は、ファイルに書き込まれるときに文字列の前後にコンマを挿入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2975">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="6f693-2976">明示的な区切り記号を一覧に含める必要はありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2976">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="6f693-2977">データをファイルに書き込むために `Write` を使用する場合、数値、`Boolean`、日付、null、および `Error` のデータ形式のみがサポートされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2977">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="6f693-2978">次の汎用的な仮定に従うと、ロケールに関係なく、常に `Input`を使用してデータを読み取って正しく解釈できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2978">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="6f693-2979">数値データは、常に小数点区切り文字としてピリオドを使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2979">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="6f693-2980">`Boolean` データの場合、`#TRUE#` または `#FALSE#` のいずれかが印刷されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2980">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="6f693-2981">ロケールに関係なく、`True` キーワードと `False` キーワードは翻訳されません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2981">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="6f693-2982">日付データは、ユニバーサル日付形式を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2982">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="6f693-2983">日付または時刻コンポーネントが見つからないかゼロの場合は、指定された部分だけがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2983">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="6f693-2984">`Output` データが空の場合、ファイルには何も書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2984">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="6f693-2985">ただし、null データの場合は `#NULL#` が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2985">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="6f693-2986">`Error` データの場合、出力は `#ERROR errorcode#`として表示されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2986">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="6f693-2987">`Error` キーワードは、ロケールに関係なく、変換されません。</span><span class="sxs-lookup"><span data-stu-id="6f693-2987">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="6f693-2988">`WriteLine` は、`Output` の最後の文字がファイルに書き込まれた後に、改行文字 (つまり、復帰/ラインフィード、または `Chr(13) + Chr(10)`) を挿入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2988">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="6f693-2989">二重引用符または "" を使用して、文字列に引用符を埋め込むことができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2989">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="6f693-2990">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2990">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="6f693-2991">`Double quotation marks aren't "difficult" to handle`の値を持つ文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-2991">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="6f693-2992">`Write` または `WriteLine` 関数を使用してファイルに書き込むには、`FileIOPermissionAccess` 列挙からの `Append` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2992">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-2993">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-2993">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-2994">この例では、`Write` 関数を使用して、生データをシーケンシャルファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-2994">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="6f693-2995">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-2996">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-2996">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-2997">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2997">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-2998">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-2998">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="6f693-2999">必須です。</span><span class="sxs-lookup"><span data-stu-id="6f693-2999">Required.</span></span> <span data-ttu-id="6f693-3000">任意の有効なファイル数を含む <see langword="Integer" /> 式。</span><span class="sxs-lookup"><span data-stu-id="6f693-3000">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="6f693-3001">任意。</span><span class="sxs-lookup"><span data-stu-id="6f693-3001">Optional.</span></span> <span data-ttu-id="6f693-3002">ファイルへ書き込む 1 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="6f693-3002">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="6f693-3003">シーケンシャル ファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3003">Writes data to a sequential file.</span></span> <span data-ttu-id="6f693-3004"><see langword="Write" /> を使用して書き込まれたデータは通常、<see langword="Input" /> を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3004">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f693-3005">`Write` 関数と `WriteLine` 関数は、旧バージョンとの互換性のために用意されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6f693-3005">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6f693-3006">レガシ以外のアプリケーションの場合、`My.Computer.FileSystem` オブジェクトによってパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="6f693-3006">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6f693-3007">詳細については、「 [Visual Basic を使用したファイルアクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-3007">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6f693-3008">`Output`を省略した場合は、空白行がファイルに出力されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3008">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="6f693-3009">複数の式は、コンマで区切ることができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3009">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="6f693-3010">`Print` 関数とは異なり、`Write` 関数は、ファイルに書き込まれるときに文字列の前後にコンマを挿入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-3010">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="6f693-3011">明示的な区切り記号を一覧に含める必要はありません。</span><span class="sxs-lookup"><span data-stu-id="6f693-3011">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="6f693-3012">データをファイルに書き込むために `Write` を使用する場合、数値、`Boolean`、日付、null、および `Error` のデータ形式のみがサポートされます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3012">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="6f693-3013">次の汎用的な仮定に従うと、ロケールに関係なく、常に `Input`を使用してデータを読み取って正しく解釈できます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3013">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="6f693-3014">数値データは、常に小数点区切り文字としてピリオドを使用して書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3014">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="6f693-3015">`Boolean` データの場合、`#TRUE#` または `#FALSE#` のいずれかが印刷されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3015">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="6f693-3016">ロケールに関係なく、`True` キーワードと `False` キーワードは翻訳されません。</span><span class="sxs-lookup"><span data-stu-id="6f693-3016">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="6f693-3017">日付データは、ユニバーサル日付形式を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3017">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="6f693-3018">日付または時刻コンポーネントが見つからないかゼロの場合は、指定された部分だけがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3018">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="6f693-3019">`Output` データが空の場合、ファイルには何も書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="6f693-3019">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="6f693-3020">ただし、null データの場合は `#NULL#` が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3020">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="6f693-3021">`Error` データの場合、出力は `#ERROR errorcode#`として表示されます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3021">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="6f693-3022">`Error` キーワードは、ロケールに関係なく、変換されません。</span><span class="sxs-lookup"><span data-stu-id="6f693-3022">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="6f693-3023">`WriteLine` は、`Output` の最後の文字がファイルに書き込まれた後に、改行文字 (つまり、復帰/ラインフィード、または `Chr(13) + Chr(10)`) を挿入します。</span><span class="sxs-lookup"><span data-stu-id="6f693-3023">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="6f693-3024">二重引用符または "" を使用して、文字列に引用符を埋め込むことができます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3024">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="6f693-3025">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="6f693-3025">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="6f693-3026">`Double quotation marks aren't "difficult" to handle`の値を持つ文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6f693-3026">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="6f693-3027">`Write` または `WriteLine` 関数を使用してファイルに書き込むには、`FileIOPermissionAccess` 列挙からの `Append` アクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="6f693-3027">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6f693-3028">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="6f693-3028">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f693-3029">この例では、`Write` 関数を使用して、生データをシーケンシャルファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="6f693-3029">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="6f693-3030">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="6f693-3030">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="6f693-3031">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-3031">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="6f693-3032">方法: Streamwriter を使用してファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="6f693-3032">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
