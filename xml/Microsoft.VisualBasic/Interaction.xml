<Type Name="Interaction" FullName="Microsoft.VisualBasic.Interaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9e9ba0548c86abc96d8c1797f85c3c8fbd95022f" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73377163" /></Metadata><TypeSignature Language="C#" Value="public sealed class Interaction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Interaction extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Interaction" />
  <TypeSignature Language="VB.NET" Value="Public Module Interaction" />
  <TypeSignature Language="C++ CLI" Value="public ref class Interaction sealed" />
  <TypeSignature Language="F#" Value="type Interaction = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Interaction" /> モジュールに含まれるプロシージャを使って、オブジェクト、アプリケーション、システムと対話します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このモジュールは、他のプログラムを実行したり、メソッドまたはプロパティを呼び出したり、コンピューターからビープ音を鳴らしたり、コマンドライン文字列を指定したり、COM オブジェクトを操作したり、コントロールのダイアログボックスを操作したりする、Visual Basic の言語キーワードとランタイムライブラリメンバーをサポートしています。  
  
## Examples  
 次の例では、`Shell` 関数を使用して、ユーザーによって指定されたアプリケーションを実行します。 2番目の引数として <xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType> を指定すると、アプリケーションは通常のサイズで開き、フォーカスが与えられます。  
  
```vb  
Dim procID As Integer  
' Run calculator.  
procID = Shell("C:\Windows\system32\calc.exe", AppWinStyle.NormalFocus)  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">情報と対話の概要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">キーワード (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">ランタイムライブラリのメンバーの Visual Basic</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="AppActivate">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>既に実行中のアプリケーションをアクティブにします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (int ProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AppActivate(int32 ProcessId) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (ProcessId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(int ProcessId);" />
      <MemberSignature Language="F#" Value="static member AppActivate : int -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate ProcessId" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(int32 ProcessId) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProcessId" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="ProcessId">このプロセスに割り当てられた Win32 プロセス ID 番号を指定する <see langword="Integer" />。 <see cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" /> によって返される ID がゼロでなければ、その ID を使用できます。</param>
        <summary>既に実行中のアプリケーションをアクティブにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `AppActivate` を使用して、アプリケーションのアクティブなウィンドウをフォーカスさせることができます。 アクティブウィンドウへのハンドルや参照がない場合や、特定の時点でアクティブになっているウィンドウがわかっている場合があります。 このような場合は、<xref:System.Windows.Forms.Control.Focus%2A> メソッドを使用することはできません。  
  
 `AppActivate` 関数は、フォーカスを名前付きのアプリケーションまたはウィンドウに変更しますが、最大化または最小化されているかどうかには影響しません。 フォーカスを変更したりウィンドウを閉じたりするためにユーザーが何らかの操作を実行すると、アクティブ化されたアプリケーションウィンドウからフォーカスが移動します。 `Shell` 関数を使用すると、アプリケーションを起動し、ウィンドウのスタイルを設定できます。  
  
 `Title` パラメーターを使用する場合、`AppActivate` では大文字と小文字を区別しない比較が使用されますが、それ以外の場合はタイトルバーの内容と完全に一致する必要があります。 最初にトップレベルウィンドウを参照し、次に子ウィンドウを表示します。 一致するものが見つからない場合は、<xref:System.ArgumentException> がスローされます。  
  
 `AppActivate` は、windows を所有するプロセスでのみ使用できます。 ほとんどのコンソールアプリケーションは、windows を所有していません。つまり、検索を `AppActivate` プロセスの一覧には表示されません。 コンソールアプリケーションから実行する場合、システムは、アプリケーションを実行するための個別のプロセスを作成し、出力をコンソールプロセスに返します。 その結果、現在のプロセス ID を要求すると、コンソールアプリケーションのプロセス ID ではなく、このプロセスのプロセス ID が取得されます。  
  
 実行時に `AppActivate` 関数は、実行中のすべてのアプリケーションを、`Title` と一致するタイトル、または `ProcessId` に一致するプロセス ID でアクティブ化します。 完全に一致するものがない場合は、タイトル文字列の末尾が `Title` であるすべてのアプリケーションがアクティブ化されます。 `Title`という名前のアプリケーションが複数ある場合、`AppActivate` 関数は、アクティブ化するアプリケーションを任意に選択します。  
  
> [!NOTE]
>  `AppActivate` 関数は、部分信頼状況での実行に影響する可能性がある <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> レベルで `UIPermission` を必要とします。 詳細については、「<xref:System.Security.Permissions.UIPermission>」を参照してください。  
  
   
  
## Examples  
 この例では、`AppActivate` 関数を使用してアプリケーションウィンドウをアクティブ化する方法を示します。 メモ帳のプロセスが実行されていない場合、この例では <xref:System.ArgumentException> がスローされます。 `Shell` の手順では、アプリケーションが指定されたパスにあることを前提としています。  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (string Title);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AppActivate(string Title) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (Title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(System::String ^ Title);" />
      <MemberSignature Language="F#" Value="static member AppActivate : string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate Title" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(string Title) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Title" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Title">アクティブにするアプリケーションのタイトル バーに表示されているタイトルを指定する <see langword="String" /> 式。 起動時にアプリケーションに割り当てられたタイトルを使用できます。</param>
        <summary>既に実行中のアプリケーションをアクティブにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `AppActivate` を使用して、アプリケーションのアクティブなウィンドウをフォーカスさせることができます。 アクティブウィンドウへのハンドルや参照がない場合や、特定の時点でアクティブになっているウィンドウがわかっている場合があります。 このような場合は、<xref:System.Windows.Forms.Control.Focus%2A> メソッドを使用することはできません。  
  
 `AppActivate` 関数は、フォーカスを名前付きのアプリケーションまたはウィンドウに変更しますが、最大化または最小化されているかどうかには影響しません。 フォーカスを変更したりウィンドウを閉じたりするためにユーザーが何らかの操作を実行すると、アクティブ化されたアプリケーションウィンドウからフォーカスが移動します。 `Shell` 関数を使用すると、アプリケーションを起動し、ウィンドウのスタイルを設定できます。  
  
 `Title` パラメーターを使用する場合、`AppActivate` では大文字と小文字を区別しない比較が使用されますが、それ以外の場合はタイトルバーの内容と完全に一致する必要があります。 最初にトップレベルウィンドウを参照し、次に子ウィンドウを表示します。 一致するものが見つからない場合は、<xref:System.ArgumentException> がスローされます。  
  
 `AppActivate` は、windows を所有するプロセスでのみ使用できます。 ほとんどのコンソールアプリケーションは、windows を所有していません。つまり、検索を `AppActivate` プロセスの一覧には表示されません。 コンソールアプリケーションから実行する場合、システムは、アプリケーションを実行するための個別のプロセスを作成し、出力をコンソールプロセスに返します。 その結果、現在のプロセス ID を要求すると、コンソールアプリケーションのプロセス ID ではなく、このプロセスのプロセス ID が取得されます。  
  
 実行時に `AppActivate` 関数は、実行中のすべてのアプリケーションを、`Title` と一致するタイトル、または `ProcessId` に一致するプロセス ID でアクティブ化します。 完全に一致するものがない場合は、タイトル文字列の末尾が `Title` であるすべてのアプリケーションがアクティブ化されます。 `Title`という名前のアプリケーションが複数ある場合、`AppActivate` 関数は、アクティブ化するアプリケーションを任意に選択します。  
  
> [!NOTE]
>  `AppActivate` 関数は、部分信頼状況での実行に影響する可能性がある <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> レベルで `UIPermission` を必要とします。 詳細については、「<xref:System.Security.Permissions.UIPermission>」を参照してください。  
  
   
  
## Examples  
 この例では、`AppActivate` 関数を使用してアプリケーションウィンドウをアクティブ化する方法を示します。 メモ帳のプロセスが実行されていない場合、この例では <xref:System.ArgumentException> がスローされます。 `Shell` の手順では、アプリケーションが指定されたパスにあることを前提としています。  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep() cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberSignature Language="F#" Value="static member Beep : unit -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.Beep " />
      <MemberSignature Language="ILAsm" Value=".method public static void Beep() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コンピューターのスピーカーを鳴らします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ビープ音のピッチと期間は、ハードウェアとシステムのソフトウェアによって異なります。そのため、コンピューターによって異なります。  
  
> [!NOTE]
>  `Beep` 関数は、部分信頼状況での実行に影響する可能性がある <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> レベルで `UIPermission` を必要とします。 詳細については、「<xref:System.Security.Permissions.UIPermission>」を参照してください。  
  
   
  
## Examples  
 この例では、`Beep` 関数を使用して、コンピューターのスピーカーの音を鳴らします。  
  
 [!code-vb[VbVbalrCatRef#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">ランタイムライブラリのメンバーの Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/playing-sounds.md">サウンドの再生</related>
      </Docs>
    </Member>
    <Member MemberName="CallByName">
      <MemberSignature Language="C#" Value="public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, params object[] Args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CallByName(object ObjectRef, string ProcName, valuetype Microsoft.VisualBasic.CallType UseCallType, object[] Args) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CallByName (ObjectRef As Object, ProcName As String, UseCallType As CallType, ParamArray Args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CallByName(System::Object ^ ObjectRef, System::String ^ ProcName, Microsoft::VisualBasic::CallType UseCallType, ... cli::array &lt;System::Object ^&gt; ^ Args);" />
      <MemberSignature Language="F#" Value="static member CallByName : obj * string * Microsoft.VisualBasic.CallType * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CallByName (ObjectRef, ProcName, UseCallType, Args)" />
      <MemberSignature Language="ILAsm" Value=".method public static object CallByName(object ObjectRef, string ProcName, valuetype Microsoft.VisualBasic.CallType UseCallType, object[] Args) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ObjectRef" Type="System.Object" />
        <Parameter Name="ProcName" Type="System.String" />
        <Parameter Name="UseCallType" Type="Microsoft.VisualBasic.CallType" />
        <Parameter Name="Args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ObjectRef">必須です。 <see langword="Object" />。 プロパティまたはメソッドを公開しているオブジェクトへのポインターです。</param>
        <param name="ProcName">必須です。 <see langword="String" />。 オブジェクトのプロパティまたはメソッドの名前を含む文字列式です。</param>
        <param name="UseCallType">必須です。 呼び出されるプロシージャの型を表す、<see cref="T:Microsoft.VisualBasic.CallType" /> 型の列挙体のメンバーです。 <see langword="CallType" /> の値は、<see langword="Method" />、<see langword="Get" />、<see langword="Set" /> のいずれかになります。</param>
        <param name="Args">任意。 <see langword="ParamArray" />。 呼び出されるプロパティまたはメソッドに渡される引数を格納するパラメーター配列です。</param>
        <summary>オブジェクトに対してメソッドを実行するか、オブジェクトのプロパティを設定または取得します。</summary>
        <returns>オブジェクトに対してメソッドを実行するか、オブジェクトのプロパティを設定または取得します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CallByName` 関数は、実行時にプロパティを取得したり、プロパティを設定したり、メソッドを呼び出したりするために使用されます。  
  
   
  
## Examples  
 次の例では、最初の行で `CallByName` を使用してテキストボックスの `Text` プロパティを設定し、2行目で `Text` プロパティの値を取得し、3番目の行で `Move` のメソッドを呼び出してテキストボックスを移動します。  
  
 [!code-vb[VbVbalrFunctions#99](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#99)]  
  
 [!code-vb[VbVbalrFunctions#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#20)]  
  
 次の例では、`CallByName` 関数を使用して、コレクションオブジェクトの `Add` メソッドと `Item` メソッドを呼び出します。  
  
 [!code-vb[VbVbalrFunctions#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="UseCallType" /> の値が無効です。<see langword="Method" />、<see langword="Get" />、または <see langword="Set" /> のいずれかを指定してください。</exception>
        <altmember cref="T:Microsoft.VisualBasic.CallType" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/parameter-arrays.md">パラメーター配列</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/calling-a-property-or-method-using-a-string-name.md">文字列名によるプロパティまたはメソッドの呼び出し</related>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public static object Choose (double Index, params object[] Choice);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Choose(float64 Index, object[] Choice) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Index As Double, ParamArray Choice As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Choose(double Index, ... cli::array &lt;System::Object ^&gt; ^ Choice);" />
      <MemberSignature Language="F#" Value="static member Choose : double * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Choose (Index, Choice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Double" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Choice" Type="System.Object[]" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Index">必須です。 <see langword="Double" />。 1 から <paramref name="Choice" /> 引数で渡された要素の数までの範囲の値を返す数式です。</param>
        <param name="Choice">必須です。 <see langword="Object" /> パラメーター配列。 <see langword="Object" /> データ型、<see langword="Object" /> 変数または式のコンマ区切りの一覧、あるいは <see langword="Object" /> 要素の 1 次元配列として評価される、単一の変数または式を指定できます。</param>
        <summary>引数のリストから値を選択し、返します。</summary>
        <returns>引数のリストから値を選択し、返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Choose` 関数は、`Index`の値に基づいて `Choice()`渡されたリストのメンバーを返します。 `Index` が1の場合は、リストの最初のメンバーが選択されます。 `Index` が `UBound`(`Choice()`) の場合は、リストの最後のメンバーが選択されます。 `Index` がこれらの制限を超えている場合、`Choose` は `Nothing`を返します。  
  
 `Index` が整数でない場合は、評価される前に、最も近い整数に丸められます。  
  
 `Choose` を使用すると、可能性の一覧で値を検索できます。  
  
> [!NOTE]
>  引数リスト内の式には、関数呼び出しを含めることができます。 `Choose`の呼び出しの引数リストを準備する過程で、Visual Basic コンパイラはすべての式のすべての関数を呼び出します。 つまり、`Index` によって別の式が選択されている場合、呼び出されていない特定の関数に依存することはできません。  
  
   
  
## Examples  
 この例では、`Choose` 関数を使用して、`Ind` パラメーターのプロシージャに渡されたインデックスへの応答として名前を表示します。  
  
 [!code-vb[VbVbalrFunctions#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public static string Command ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Command() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Command" />
      <MemberSignature Language="VB.NET" Value="Public Function Command () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Command();" />
      <MemberSignature Language="F#" Value="static member Command : unit -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Command " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visual Basic を起動するために使用されるコマンド ライン、または Visual Basic を使って開発した実行可能プログラムの引数の部分を返します。 <see langword="My" /> 機能は、<see langword="Command" /> 関数よりも高い生産性とパフォーマンスを実現します。 詳細については、「<see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />」を参照してください。</summary>
        <returns>Visual Basic を起動するために使用されるコマンド ライン、または Visual Basic を使って開発した実行可能プログラムの引数の部分。  
  
<see langword="My" /> 機能は、<see langword="Command" /> 関数よりも高い生産性とパフォーマンスを実現します。 詳細については、「<see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />」を参照してください。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引数が返されたら、スペース、後ろまたはスラッシュ、ハイフン、引用符などの一般的な区切り記号を検索して、個々のパラメーターの文字列を分割または検索することができます。  
  
 Visual Basic で開発され、.exe ファイルにコンパイルされたアプリケーションの場合、`Command` 関数は、コマンドラインでアプリケーションの名前の後に出現するすべての引数を `MyApp(cmdlineargs)` という形式で返します。  
  
   
  
## Examples  
 この例では、`Command` 関数を使用して、配列を含むオブジェクト内のコマンドライン引数を返します。  
  
 [!code-vb[VbVbalrCatRef#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Environment.GetCommandLineArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">ランタイムライブラリのメンバーの Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/reference/command-line-compiler/index.md">Visual Basic コマンドラインコンパイラ</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/program-structure/structure-of-a-visual-basic-program.md">Visual Basic プログラムの構造</related>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public static object CreateObject (string ProgId, string ServerName = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateObject(string ProgId, string ServerName) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (ProgId As String, Optional ServerName As String = &quot;&quot;) As Object" />
      <MemberSignature Language="F#" Value="static member CreateObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CreateObject (ProgId, ServerName)" />
      <MemberSignature Language="ILAsm" Value=".method public static object CreateObject(string ProgId, string ServerName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="ServerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ProgId">必須です。 <see langword="String" />。 作成するオブジェクトのプログラム ID。</param>
        <param name="ServerName">任意。 <see langword="String" />。 オブジェクトが作成されるネットワーク サーバーの名前。 <paramref name="ServerName" /> が空の文字列 ("") の場合、ローカル コンピューターが使用されます。</param>
        <summary>COM オブジェクトへの参照を作成して返します。 Visual Basic では、クラスが COM コンポーネントとして明示的に公開されない限り、<see langword="CreateObject" /> を使用してそのクラスのインスタンスを作成することはできません。</summary>
        <returns>COM オブジェクトへの参照を作成して返します。 Visual Basic では、クラスが COM コンポーネントとして明示的に公開されない限り、<see langword="CreateObject" /> を使用してそのクラスのインスタンスを作成することはできません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 COM コンポーネントのインスタンスを作成するには、`CreateObject` によって返されるオブジェクトをオブジェクト変数に割り当てます。  
  
```vb  
Sub CreateADODB()  
   Dim adoApp As Object  
   adoApp = CreateObject("ADODB.Connection")  
End Sub  
```  
  
 返されたオブジェクトを格納するために使用するオブジェクト変数の型が、アプリケーションのパフォーマンスに影響を与える可能性があります。 `As Object` 句を使用してオブジェクト変数を宣言すると、任意の型のオブジェクトへの参照を含むことができる変数が作成されます。 ただし、その変数を介したオブジェクトへのアクセスは*遅延*バインディングされます。つまり、プログラムの実行時にバインディングが発生します。 アプリケーションのパフォーマンスの低下を含め、遅延バインディングを避ける必要がある理由は多数あります。  
  
 初期バインディングであるオブジェクト変数を作成できます。つまり、プログラムがコンパイルされるとバインドされます。 これを行うには、**[プロジェクト]** メニューの **[参照の追加]** ダイアログボックスの **[COM]** タブから、オブジェクトのタイプライブラリへの参照を追加します。 次に、オブジェクトの特定の型のオブジェクト変数を宣言します。 ほとんどの場合、`CreateObject` 関数を使用する場合よりも、`Dim` ステートメントとプライマリ相互運用機能アセンブリを使用してオブジェクトを作成する方が効率的です。  
  
## <a name="interacting-with-unmanaged-code"></a>アンマネージコードとの対話  
 もう1つの問題として、COM オブジェクトでは、共通言語ランタイムを使用しないと、アンマネージコードコードが使用されます。 Visual Basic のマネージコードと COM のアンマネージコードを混在させることには、かなりの複雑さが伴います。 COM オブジェクトへの参照を追加すると、Visual Basic はそのライブラリのプライマリ相互運用機能アセンブリ (PIA) を検索します。見つかった場合は、それを使用します。 PIA が見つからない場合は、COM ライブラリ内の各クラスのローカル相互運用性クラスを含む相互運用性アセンブリを作成します。 詳細については、「 [.NET Framework アプリケーションでの COM 相互運用性](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)」を参照してください。  
  
 一般に、可能な限り、厳密にバインドされたオブジェクトとプライマリ相互運用機能アセンブリを使用する必要があります。 次の例では、デモンストレーションのみを目的として、Microsoft Office オブジェクトで `CreateObject` 関数を使用します。 ただし、これらのオブジェクトは、適切なプライマリ相互運用機能アセンブリと共に使用すると、より簡単に使用でき、信頼性も高くなります。  
  
## <a name="creating-an-object-on-a-remote-computer"></a>リモートコンピューター上にオブジェクトを作成する  
 コンピューターの名前を `CreateObject` 関数の `ServerName` 引数に渡すことによって、リモートコンピューター上にオブジェクトを作成できます。 この名前は、共有名のコンピューター名の部分と同じです。 "\\\MyServer\Public" という名前の共有の場合、`ServerName` は "MyServer" になります。  
  
> [!NOTE]
>  リモートネットワークコンピューターでアプリケーションにアクセスできるようにする方法の詳細については、COM のドキュメント (「Microsoft Developer Network」を参照してください) を参照してください。 場合によっては、アプリケーションのレジストリキーを追加する必要があります。  
  
 次のコードは、`MyServer` という名前のリモートコンピューター上で実行されている Excel のインスタンスのバージョン番号を返します。  
  
```vb  
Sub CreateRemoteExcelObj()  
    Dim xlApp As Object  
    ' Replace string "\\MyServer" with name of the remote computer.  
    xlApp = CreateObject("Excel.Application", "\\MyServer")  
    MsgBox(xlApp.Version)  
End Sub  
```  
  
 リモートサーバー名が正しくない場合、または使用できない場合は、実行時エラーが発生します。  
  
> [!NOTE]
>  オブジェクトの現在のインスタンスが存在しない場合は `CreateObject` を使用します。 オブジェクトのインスタンスが既に実行されている場合は、新しいインスタンスが開始され、指定された型のオブジェクトが作成されます。 現在のインスタンスを使用する場合、またはアプリケーションを起動してファイルを読み込む場合は、`GetObject` 関数を使用します。 オブジェクトが単独インスタンスのオブジェクトとして登録されている場合は、オブジェクトのインスタンスが1つだけ作成されます。何回実行しても `CreateObject` が実行される回数は関係ありません。  
  
## <a name="creating-framework-objects"></a>フレームワークオブジェクトの作成  
 `CreateObject` 関数は、COM オブジェクトの作成にのみ使用できます。 .NET Framework オブジェクトを作成するための同等のメカニズムはありませんが、<xref:System> 名前空間の <xref:System.Activator> には、ローカルまたはリモートのオブジェクトを作成するメソッドが含まれています。 特に、<xref:System.Activator.CreateInstance%2A> メソッドまたは <xref:System.Activator.CreateInstanceFrom%2A> メソッドが役に立つ場合があります。  
  
> [!IMPORTANT]
>  `CreateObject` 関数には、部分信頼の状況での実行に影響する可能性があるアンマネージコードのアクセス許可が必要です。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。  
  
   
  
## Examples  
 次の例では、`CreateObject` 関数を使用して Microsoft Excel ワークシートを作成し、ワークシートをファイルに保存します。 この例を使用するには、このプログラムを実行するコンピューターに Excel がインストールされている必要があります。 また、**[プロジェクト]** メニューの **[参照の追加]** ダイアログボックスの **[COM]** タブから、タイプライブラリへの参照を追加する必要があります。 タイプライブラリの名前は、コンピューターにインストールされている Excel のバージョンによって異なります。 たとえば、Microsoft Excel 2002 のタイプライブラリには、 **Microsoft excel 10.0 オブジェクトライブラリ**という名前が付けられています。  
  
 [!code-vb[VbVbalrExcelObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">サーバーを利用できません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定された型のオブジェクトが存在していません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.Activator" />
        <altmember cref="Overload:System.Activator.CreateInstance" />
        <altmember cref="Overload:System.Activator.CreateInstanceFrom" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim ステートメント (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/declare-statement.md">Declare Statement</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">.NET Framework アプリケーションにおける COM 相互運用性</related>
        <related type="Article" href="~/docs/framework/interop/index.md">アンマネージ コードとの相互運用</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteSetting">
      <MemberSignature Language="C#" Value="public static void DeleteSetting (string AppName, string Section = null, string Key = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteSetting(string AppName, string Section, string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteSetting (AppName As String, Optional Section As String = null, Optional Key As String = null)" />
      <MemberSignature Language="F#" Value="static member DeleteSetting : string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.DeleteSetting (AppName, Section, Key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Key" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">必須です。 セクションまたはキーの設定を適用するアプリケーションまたはプロジェクトの名前が含まれている <see langword="String" /> 型の式。</param>
        <param name="Section">必須です。 キーの設定を削除するセクションの名前を含む <see langword="String" /> 型の式。 <paramref name="AppName" /> と <paramref name="Section" /> のみを指定した場合、指定したセクションとそれに関連するキー設定がすべて削除されます。</param>
        <param name="Key">任意。 削除するキー設定の名前を含む <see langword="String" /> 型の式。</param>
        <summary>Windows レジストリのアプリケーションのエントリから、セクションやキーの設定を削除します。 <see langword="My" /> 機能を使用すると、<see langword="DeleteSetting" /> 関数を使用した場合よりも生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての引数が指定されている場合、指定された設定は削除されます。 存在しないセクションまたはキーの設定で `DeleteSetting` を使用しようとすると、実行時エラーが発生します。  
  
 `DeleteSetting` にすると、ユーザーが対話形式でログオンするまでアクティブではない `HKEY_LOCAL_USER` レジストリキーで動作するため、ユーザーがログオンしている必要があります。  
  
 非対話形式のプロセス (Mtx.exe など) からアクセスされるレジストリ設定は、`HKEY_LOCAL_MACHINE\Software\` または `HKEY_USER\DEFAULT\Software` のいずれかのレジストリキーの下に格納する必要があります。  
  
   
  
## Examples  
 次の例では、最初に `SaveSetting` のプロシージャを使用して、`MyApp` アプリケーションの Windows レジストリにエントリを作成してから、`DeleteSetting` 関数を使用して削除します。 `Key` 引数が指定されていないため、セクション名とそのすべてのキーを含め、`Startup` セクション全体が削除されます。  
  
 [!code-vb[VbVbalrCatRef#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ユーザーがログインしていません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Environ">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オペレーティング システム環境変数に関連付けられた文字列を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Environ(int32 Expression) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(int Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(int32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 環境変数の名前を含む文字列、または環境文字列テーブルにおける環境文字列の番号に対応する整数値を評価する式です。</param>
        <summary>オペレーティング システム環境変数に関連付けられた文字列を返します。</summary>
        <returns>オペレーティング システム環境変数に関連付けられた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Expression` に文字列が含まれている場合、<xref:Microsoft.VisualBasic.Interaction.Environ%2A> 関数は、指定された環境文字列に割り当てられたテキスト、つまり、環境変数の環境文字列テーブル内の等号 (=) に続くテキストを返します。 `Expression` 内の文字列が環境文字列テーブルに見つからない場合は、長さ0の文字列 ("") が返されます。  
  
 `Expression` に整数が含まれている場合、環境文字列テーブル内でその数値位置を占有する文字列が返されます。 この場合、<xref:Microsoft.VisualBasic.Interaction.Environ%2A> は、環境変数の名前を含むすべてのテキストを返します。 指定された位置に環境文字列がない場合、<xref:Microsoft.VisualBasic.Interaction.Environ%2A> は長さ0の文字列を返します。  
  
> [!IMPORTANT]
>  <xref:Microsoft.VisualBasic.Interaction.Environ%2A> 関数には、部分信頼の状況での実行に影響する可能性がある環境のアクセス許可が必要です。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。  
  
   
  
## Examples  
 この例では、<xref:Microsoft.VisualBasic.Interaction.Environ%2A> 関数を使用して、`PATH` ステートメントのエントリ番号と長さを環境文字列テーブルから指定します。  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> が指定されていません。</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">ランタイムライブラリのメンバーの Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Environ(string Expression) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(string Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 環境変数の名前を含む文字列、または環境文字列テーブルにおける環境文字列の番号に対応する整数値を評価する式です。</param>
        <summary>オペレーティング システム環境変数に関連付けられた文字列を返します。</summary>
        <returns>オペレーティング システム環境変数に関連付けられた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Expression` に文字列が含まれている場合、<xref:Microsoft.VisualBasic.Interaction.Environ%2A> 関数は、指定された環境文字列に割り当てられたテキスト、つまり、環境変数の環境文字列テーブル内の等号 (=) に続くテキストを返します。 `Expression` 内の文字列が環境文字列テーブルに見つからない場合は、長さ0の文字列 ("") が返されます。  
  
 `Expression` に整数が含まれている場合、環境文字列テーブル内でその数値位置を占有する文字列が返されます。 この場合、<xref:Microsoft.VisualBasic.Interaction.Environ%2A> は、環境変数の名前を含むすべてのテキストを返します。 指定された位置に環境文字列がない場合、<xref:Microsoft.VisualBasic.Interaction.Environ%2A> は長さ0の文字列を返します。  
  
> [!IMPORTANT]
>  <xref:Microsoft.VisualBasic.Interaction.Environ%2A> 関数には、部分信頼の状況での実行に影響する可能性がある環境のアクセス許可が必要です。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。  
  
   
  
## Examples  
 この例では、<xref:Microsoft.VisualBasic.Interaction.Environ%2A> 関数を使用して、`PATH` ステートメントのエントリ番号と長さを環境文字列テーブルから指定します。  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> が指定されていません。</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">ランタイムライブラリのメンバーの Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllSettings">
      <MemberSignature Language="C#" Value="public static string[,] GetAllSettings (string AppName, string Section);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[,] GetAllSettings(string AppName, string Section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllSettings (AppName As String, Section As String) As String(,)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^, 2&gt; ^ GetAllSettings(System::String ^ AppName, System::String ^ Section);" />
      <MemberSignature Language="F#" Value="static member GetAllSettings : string * string -&gt; string[,]" Usage="Microsoft.VisualBasic.Interaction.GetAllSettings (AppName, Section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[,]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">必須です。 キー設定が必要となるアプリケーションまたはプロジェクトの名前を含む <see langword="String" /> 型の式。</param>
        <param name="Section">必須です。 キー設定が必要となるセクションの名前を含む <see langword="String" /> 型の式。 <see langword="GetAllSettings" /> は、文字列の 2 次元配列を含むオブジェクトを返します。 文字列には、指定されたセクションにあるすべてのキー設定に加え、その設定に対応する値も含まれます。</param>
        <summary>Windows レジストリのアプリケーションのエントリから、キー設定のリストと各キー設定の値 (以前に <see langword="SaveSetting" /> を使用して作成されたもの) を返します。 <see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</summary>
        <returns>Windows レジストリのアプリケーションのエントリからの、キー設定のリストと各キー設定の値 (以前に <see langword="SaveSetting" /> を使用して作成されたもの)。  
  
<see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetAllSettings` `AppName` または `Section` のいずれかが存在しない場合は、初期化されていない `Object` を返します。  
  
 ユーザーが対話形式でログオンするまでアクティブではない `HKEY_LOCAL_USER` レジストリキーで動作するため、`GetAllSettings` ではユーザーがログオンしている必要があります。  
  
 非対話形式のプロセス (Mtx.exe など) からアクセスされるレジストリ設定は、`HKEY_LOCAL_MACHINE\Software\` または `HKEY_USER\DEFAULT\Software` のいずれかのレジストリキーの下に格納する必要があります。  
  
   
  
## Examples  
 この例では、最初に `SaveSetting` 関数を使用して、`AppName` として指定されたアプリケーションの Windows レジストリにエントリを作成し、次に `GetAllSettings` 関数を使用して設定を表示します。 アプリケーション名と `Section` の名前は、`GetAllSettings` では取得できないことに注意してください。 最後に、`DeleteSetting` 関数は、アプリケーションのエントリを削除します。  
  
 [!code-vb[VbVbalrCatRef#68](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ユーザーがログインしていません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (string PathName = null, string Class = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static object GetObject(string PathName, string Class) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObject (Optional PathName As String = null, Optional Class As String = null) As Object" />
      <MemberSignature Language="F#" Value="static member GetObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.GetObject (PathName, Class)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Class" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="PathName">任意。 <see langword="String" />。 取得するオブジェクトが含まれているファイルの完全パスと名前です。 <paramref name="PathName" /> を省略した場合、<paramref name="Class" /> が必須になります。</param>
        <param name="Class"><paramref name="PathName" /> が指定されていない場合は必須。 <see langword="String" />。 オブジェクトのクラスを表す文字列です。 <paramref name="Class" /> 引数の構文と指定項目を次に示します。 
 <c>appname</c><c>.</c><c>objecttype</c>  
  
[1|1] パラメーター 
[1|2] 説明 
[2|1] <c>appname</c>  
  
[2|2] 必須。 <see langword="String" />。 オブジェクトを提供するアプリケーションの名前です。  
  
[3|1] <c>objecttype</c>  
  
[3|2] 必須。 <see langword="String" />。 作成するオブジェクトの型またはクラスです。</param>
        <summary>COM コンポーネントにより得られたオブジェクトへの参照を返します。</summary>
        <returns>COM コンポーネントにより得られたオブジェクトへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ファイルから COM コンポーネントのインスタンスを読み込むには、`GetObject` 関数を使用します。 次に例を示します。  
  
```vb  
Dim CADObject As Object  
CADObject = GetObject("C:\CAD\schema.cad")  
```  
  
 このコードが実行されると、指定した `PathName` に関連付けられているアプリケーションが起動され、指定したファイル内のオブジェクトがアクティブ化されます。  
  
## <a name="default-cases"></a>既定のケース  
 `PathName` が長さ0の文字列 (`""`) の場合、`GetObject` は、指定されたクラス型の新しいオブジェクトインスタンスを返します。 `PathName` 引数を省略した場合、`GetObject` は `Class`で指定されたクラス型の現在アクティブなオブジェクトを返します。 指定した型のオブジェクトが存在しない場合は、エラーが発生します。  
  
## <a name="accessing-a-subobject"></a>サブオブジェクトへのアクセス  
 一部のアプリケーションでは、ファイルに関連付けられたサブオブジェクトをアクティブにすることができます。 これを行うには、ファイル名の末尾に感嘆符 (`!`) を追加し、アクティブ化するファイルの部分を識別する文字列を続けます。 この文字列を作成する方法の詳細については、オブジェクトを作成したアプリケーションのドキュメントを参照してください。  
  
 たとえば、描画アプリケーションでは、ファイルに格納されている図面に複数のレイヤーを含めることができます。 次のコードを使用して、`schema.cad` という名前の描画内のレイヤーをアクティブ化することができます。  
  
```vb  
layerObject = GetObject("C:\CAD\schema.cad!Layer3")  
```  
  
## <a name="specifying-a-class"></a>クラスの指定  
 オブジェクトの `Class` を指定しない場合、指定したファイル名に基づいて、オートメーションによって起動するアプリケーションとアクティブ化するオブジェクトが決定されます。 ただし、ファイルによっては、オブジェクトの複数のクラスをサポートする場合があります。 たとえば、1つの描画では、`Application` オブジェクト、`Drawing` オブジェクト、および `Toolbar` オブジェクトという3種類のオブジェクトがサポートされています。これらはすべて同じファイルに含まれています。 アクティブ化するファイル内のオブジェクトを指定するには、省略可能な `Class` 引数を使用します。 次に例を示します。  
  
```vb  
Dim drawObj As Object  
drawObj = GetObject("C:\Drawings\sample.drw", "Figment.Drawing")  
```  
  
 前の例では、`Figment` は描画アプリケーションの名前で、`Drawing` はサポートしているオブジェクトの種類の1つです。  
  
## <a name="using-the-object"></a>オブジェクトを使用する  
 オブジェクトがアクティブ化されたら、宣言したオブジェクト変数を使用して、コード内でオブジェクトを参照します。 前の例では、オブジェクト変数 `drawObj` を使用して、新しいオブジェクトのプロパティとメソッドにアクセスします。 次に例を示します。  
  
```vb  
drawObj.Line(9, 90)  
drawObj.InsertText(9, 100, "Hello, world.")  
drawObj.SaveAs("C:\Drawings\sample.drw")  
```  
  
> [!NOTE]
>  オブジェクトの現在のインスタンスが存在する場合、またはファイルが読み込まれたオブジェクトを作成する場合は、`GetObject` 関数を使用します。 現在のインスタンスがなく、読み込まれたファイルでオブジェクトを開始したくない場合は、<xref:Microsoft.VisualBasic.Interaction.CreateObject%2A> 関数を使用します。  
>   
>  オブジェクトが ActiveX 単一インスタンスオブジェクトとして登録されている場合は、オブジェクトの1つのインスタンスのみが作成されます。 `CreateObject` が呼び出された回数に関係なく発生します。 単一インスタンスオブジェクトを使用した場合、`GetObject` は、長さが0の文字列 (`""`) 構文で呼び出されたときに常に同じインスタンスを返し、`PathName` 引数を省略した場合はエラーを発生させます。 `GetObject` を使用して、Visual Basic で作成されたクラスへの参照を取得することはできません。  
  
> [!IMPORTANT]
>  `GetObject` 関数には、部分信頼の状況での実行に影響する可能性があるアンマネージコードのアクセス許可が必要です。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。  
  
   
  
## Examples  
 次の例では、`GetObject` 関数を使用して、特定の Microsoft Excel ワークシート (`excelObj`) への参照を取得します。 ワークシートの `Application` プロパティを使用して、Excel が表示されるようにしたり、閉じたり、その他の操作を実行したりします。 2つの API 呼び出しを使用すると、`detectExcel` プロシージャは Excel を検索し、実行されている場合は、実行中のオブジェクトテーブルに入力します。 Excel がまだ実行されていない場合、`GetObject` を呼び出すとエラーが発生します。この例では、`excelWasNotRunning` フラグは `True` に設定されます。 `GetObject` の2回目の呼び出しでは、開くファイルを指定します。 Excel がまだ実行されていない場合は、2回目の呼び出しによって開始され、指定したファイルによって表されるワークシートへの参照が返されます (`test.xls`)。 ファイルは、指定された場所に存在する必要があります。それ以外の場合、Visual Basic は <xref:System.IO.FileNotFoundException>をスローします。 次に、この例のコードでは、Excel と、指定したワークシートを含むウィンドウの両方が表示されます。  
  
 この例では `Option Strict Off` が必要です。これは、オブジェクトが型 `Object` の変数に割り当てられる遅延バインディングを使用するためです。 Visual Studio で **[プロジェクト]** メニューの **[参照の追加]** ダイアログボックスの **[COM]** タブから Excel タイプライブラリへの参照を追加すると、特定のオブジェクトの種類の `Option Strict On` を指定して宣言できます。  
  
 [!code-vb[VbVbalrExcelObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#2)]  
  
 [!code-vb[VbVbalrExcelObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#4)]  
  
 [!code-vb[VbVbalrExcelObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#5)]  
  
 `getExcel` 関数を呼び出すと、Excel が既に実行されているかどうかを確認するためのチェックが行われます。 そうでない場合は、インスタンスが作成されます。  
  
> [!IMPORTANT]
>  わかりやすくするために、前の例では `XLMAIN` というウィンドウが Microsoft Excel のインスタンスに属していることを前提としています。 不正な改ざんによって起動された別のオブジェクトが、その名前のウィンドウを作成した場合は、Excel 用に指定したすべてのメッセージを受信します。 実稼働環境で使用するアプリケーションでは、`XLMAIN` が Excel に本当に属していることを確認するために、より厳密なテストを行う必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">指定されたクラス型のオブジェクトが存在しません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定されたパスおよびファイル名を持つオブジェクトが存在しません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/declare-statement.md">Declare Statement</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-strict-statement.md">Option Strict Statement</related>
      </Docs>
    </Member>
    <Member MemberName="GetSetting">
      <MemberSignature Language="C#" Value="public static string GetSetting (string AppName, string Section, string Key, string Default = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetSetting(string AppName, string Section, string Key, string Default) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetting (AppName As String, Section As String, Key As String, Optional Default As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member GetSetting : string * string * string * string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.GetSetting (AppName, Section, Key, Default)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Key" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Default" Type="System.String" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">必須です。 キー設定が必要となるアプリケーションまたはプロジェクトの名前を含む <see langword="String" /> 型の式。</param>
        <param name="Section">必須です。 キーの設定が存在しているセクションの名前を含む <see langword="String" /> 型の式。</param>
        <param name="Key">必須です。 返されるキー設定の名前を含む <see langword="String" /> 型の式。</param>
        <param name="Default">任意。 <paramref name="Key" /> 設定に値が設定されていない場合に返される値を含む式です。 省略した場合、<paramref name="Default" /> は長さ 0 の文字列 ("") と想定されます。</param>
        <summary>Windows レジストリのアプリケーションのエントリから、キーの設定値を返します。 <see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</summary>
        <returns>Windows レジストリのアプリケーションのエントリからの、キーの設定値。  
  
<see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetSetting` 引数に指定された項目のいずれかが存在しない場合、`GetSetting` は `Default`の値を返します。  
  
 ユーザーが対話形式でログオンするまでアクティブではない `HKEY_LOCAL_USER` レジストリキーで動作するため、`GetSetting` ではユーザーがログオンしている必要があります。  
  
 非対話形式のプロセス (Mtx.exe など) からアクセスされるレジストリ設定は、`HKEY_LOCAL_MACHINE\Software\` または `HKEY_USER\DEFAULT\Software` のいずれかのレジストリキーの下に格納する必要があります。  
  
 `GetSetting` には `Read`<xref:System.Security.Permissions.RegistryPermission> が必要です。  
  
   
  
## Examples  
 この例では、最初に `SaveSetting` 関数を使用して、`AppName` として指定されたアプリケーションの Windows レジストリにエントリを作成し、次に `GetSetting` 関数を使用して設定の1つを表示します。 `Default` 引数が指定されているため、一部の値が返されることが保証されます。 `GetSetting`では `Section` 名を取得できないことに注意してください。 最後に、`DeleteSetting` 関数は、すべてのアプリケーションのエントリを削除します。  
  
 [!code-vb[VbVbalrCatRef#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">文字列型 (<see langword="String" />) の式でない引数が含まれるか、ユーザーがログインしていません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IIf">
      <MemberSignature Language="C#" Value="public static object IIf (bool Expression, object TruePart, object FalsePart);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object IIf(bool Expression, object TruePart, object FalsePart) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IIf (Expression As Boolean, TruePart As Object, FalsePart As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ IIf(bool Expression, System::Object ^ TruePart, System::Object ^ FalsePart);" />
      <MemberSignature Language="F#" Value="static member IIf : bool * obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.IIf (Expression, TruePart, FalsePart)" />
      <MemberSignature Language="ILAsm" Value=".method public static object IIf(bool Expression, object TruePart, object FalsePart) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
        <Parameter Name="TruePart" Type="System.Object" />
        <Parameter Name="FalsePart" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 <see langword="Boolean" />。 評価する式。</param>
        <param name="TruePart">必須です。 <see langword="Object" />。 <paramref name="Expression" /> が <see langword="True" /> に評価された場合に返されます。</param>
        <param name="FalsePart">必須です。 <see langword="Object" />。 <paramref name="Expression" /> が <see langword="False" /> に評価された場合に返されます。</param>
        <summary>式の評価に応じて、2 つのオブジェクトのうち 1 つを返します。</summary>
        <returns>式の評価に応じて、2 つのオブジェクトのうち 1 つを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IIf` 関数は、Visual C++の三項[条件演算子:?:](https://msdn.microsoft.com/library/88643ee8-7100-4f86-880a-705ec22b6271)に対応するを提供します。  
  
   
  
## Examples  
 この例では、`IIf` 関数を使用して `checkIt` プロシージャの `testMe` パラメーターを評価し、値が1000より大きい場合は "Large" という単語を返します。それ以外の場合は、"Small" という単語を返します。  
  
 [!code-vb[VbVbalrFunctions#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#33)]  
  
 `Option Strict` が `On`場合は、`CStr` キーワードを使用して、`Object` から `String`に戻り値を明示的に変換する必要があることに注意してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-strict-statement.md">Option Strict Statement</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/if-then-else-statement.md">If...Then...Else ステートメント (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="InputBox">
      <MemberSignature Language="C#" Value="public static string InputBox (string Prompt, string Title = &quot;&quot;, string DefaultResponse = &quot;&quot;, int XPos = -1, int YPos = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputBox(string Prompt, string Title, string DefaultResponse, int32 XPos, int32 YPos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputBox (Prompt As String, Optional Title As String = &quot;&quot;, Optional DefaultResponse As String = &quot;&quot;, Optional XPos As Integer = -1, Optional YPos As Integer = -1) As String" />
      <MemberSignature Language="F#" Value="static member InputBox : string * string * string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.InputBox (Prompt, Title, DefaultResponse, XPos, YPos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Title" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="DefaultResponse" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="XPos" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="YPos" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Prompt">必須。ダイアログ ボックスにメッセージとして表示する <see langword="String" /> 式です。 <paramref name="Prompt" /> の最大長は、約 1024 文字です。使用される文字の幅によって変わります。 <paramref name="Prompt" /> が複数の行で構成される場合、復帰文字 (<see langword="Chr(" />13<see langword=")" />)、ライン フィード文字 (<see langword="Chr(" />10<see langword=")" />)、または復帰文字とライン フィード文字の組み合わせ (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) を各行の間で使用して、行を分割できます。</param>
        <param name="Title">任意。 ダイアログ ボックスのタイトル バーに表示される <see langword="String" /> 型の式。 <paramref name="Title" /> を省略した場合、タイトル バーにはアプリケーションの名前が表示されます。</param>
        <param name="DefaultResponse">任意。 他に入力がない場合に、テキスト ボックスに既定値として表示される <see langword="String" /> 型の式。 <paramref name="DefaultResponse" /> を省略すると、表示されるテキスト ボックスは空になります。</param>
        <param name="XPos">任意。 ダイアログ ボックスの左端から画面の左端までの距離を twip 単位で指定する数式です。 <paramref name="XPos" /> を省略すると、ダイアログ ボックスの水平位置が中央になります。</param>
        <param name="YPos">任意。 ダイアログ ボックスの上端から画面の上端までの距離を twip 単位で指定する数式です。 <paramref name="YPos" /> を省略すると、ダイアログ ボックスは垂直方向に対して画面の上端から約 1/3 の位置に配置されます。</param>
        <summary>ダイアログ ボックスにプロンプトを表示して、ユーザーがテキストを入力するか、ボタンをクリックするのを待った後、テキスト ボックスの内容を含む文字列を返します。</summary>
        <returns>ダイアログ ボックスにプロンプトを表示して、ユーザーがテキストを入力するか、ボタンをクリックするのを待った後、テキスト ボックスの内容を含む文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーが **[キャンセル**] をクリックすると、長さ0の文字列が返されます。  
  
 最初の引数よりも大きい値を指定するには、式で `InputBox` 関数を使用する必要があります。 位置指定引数を省略した場合は、対応するコンマ区切り記号を保持する必要があります。  
  
> [!NOTE]
>  `InputBox` 関数は、部分信頼状況での実行に影響する可能性がある <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> レベルで `UIPermission` を必要とします。 詳細については、「[アクセス許可の要求](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/yd267cce(v%3dvs.100))と <xref:System.Security.Permissions.UIPermission>」を参照してください。  
  
   
  
## Examples  
 この例では、`InputBox` 関数を使用して、ユーザーに値の入力を求めるさまざまな方法を示します。 X と y の位置を省略した場合、ダイアログボックスは自動的に各軸の中央に配置されます。 変数 `MyValue` には、ユーザーが [OK] をクリックするか ENTER キーを押すと、ユーザーが入力した値が含まれます。  
  
 [!code-vb[VbVbalrCatRef#67](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MsgBox">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.MsgBoxResult MsgBox(object Prompt, valuetype Microsoft.VisualBasic.MsgBoxStyle Buttons, object Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MsgBox (Prompt As Object, Optional Buttons As MsgBoxStyle = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, Optional Title As Object = null) As MsgBoxResult" />
      <MemberSignature Language="F#" Value="static member MsgBox : obj * Microsoft.VisualBasic.MsgBoxStyle * obj -&gt; Microsoft.VisualBasic.MsgBoxResult" Usage="Microsoft.VisualBasic.Interaction.MsgBox (Prompt, Buttons, Title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Buttons" Type="Microsoft.VisualBasic.MsgBoxStyle" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Title" Type="System.Object" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Prompt">必須です。 ダイアログ ボックスにメッセージとして表示される <see langword="String" /> 型の式。 <paramref name="Prompt" /> の最大長は、約 1024 文字です。使用される文字の幅によって変わります。 <paramref name="Prompt" /> が複数の行で構成される場合、復帰文字 (<see langword="Chr(" />13<see langword=")" />)、ライン フィード文字 (<see langword="Chr(" />10<see langword=")" />)、または復帰文字とライン フィード文字の組み合わせ (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) を各行の間で使用して、行を分割できます。</param>
        <param name="Buttons">任意。 表示するボタンの種類と数、使用するアイコンのスタイル、既定のボタンの ID、メッセージ ボックスのモーダル性を指定する値の総計を表す数式です。 <paramref name="Buttons" /> を省略した場合、既定値は 0 になります。</param>
        <param name="Title">任意。 ダイアログ ボックスのタイトル バーに表示される <see langword="String" /> 型の式。 <paramref name="Title" /> を省略した場合、タイトル バーにはアプリケーションの名前が表示されます。</param>
        <summary>ダイアログ ボックスにメッセージを表示し、ユーザーがボタンをクリックするのを待った後、ユーザーのクリックしたボタンを示す整数値を返します。</summary>
        <returns><list type="table">
            <item>
              <term> 定数 
 </term>
              <description> [値] 
 </description>
            </item>
            <item>
              <term>
                <see langword="OK" />
              </term>
              <description> 1 
 </description>
            </item>
            <item>
              <term>
                <see langword="Cancel" />
              </term>
              <description> 2 
 </description>
            </item>
            <item>
              <term>
                <see langword="Abort" />
              </term>
              <description> 3 
 </description>
            </item>
            <item>
              <term>
                <see langword="Retry" />
              </term>
              <description> 4 
 </description>
            </item>
            <item>
              <term>
                <see langword="Ignore" />
              </term>
              <description> 5 
 </description>
            </item>
            <item>
              <term>
                <see langword="Yes" />
              </term>
              <description> 6 
 </description>
            </item>
            <item>
              <term>
                <see langword="No" />
              </term>
              <description> 7 
 </description>
            </item>
          </list>
.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 位置指定引数を省略した場合は、対応するコンマ区切り記号を保持する必要があります。  
  
 ダイアログボックスに **[キャンセル**] ボタンが表示されている場合は、ESC キーを押すと、 **[キャンセル**] をクリックした場合と同じ効果があります。  
  
 ダイアログボックスに **[ヘルプ]** ボタンが表示されている場合は、ダイアログボックスに状況依存のヘルプが表示されます。 ただし、他のいずれかのボタンが選択されるまで値は返されません。 Windows フォームアプリケーションでは、**[ヘルプ]** ボタンをクリックすると、フォームの <xref:System.Windows.Forms.Control.HelpRequested> イベントが実行されます。  
  
> [!NOTE]
>  `MsgBox` 関数は、部分信頼状況での実行に影響する可能性がある <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> レベルで `UIPermission` を必要とします。 詳細については、「<xref:System.Security.Permissions.UIPermission>」を参照してください。  
  
 `MsgBoxStyle` 列挙値を次の表に示します。  
  
|メンバー|[値]|説明|  
|-|-|-|  
|メンバー|[値]|説明|  
|`OKOnly`|0|[OK] ボタンのみを表示します。|  
|`OKCancel`|1|[OK] ボタンと [キャンセル] ボタンを表示します。|  
|`AbortRetryIgnore`|2|[中止]、[再試行]、および [無視] ボタンを表示します。|  
|`YesNoCancel`|3|[はい]、[いいえ]、および [キャンセル] の各ボタンを表示します。|  
|`YesNo`|4|[はい] および [いいえ] ボタンを表示します。|  
|`RetryCancel`|5|[再試行] ボタンと [キャンセル] ボタンを表示します。|  
|`Critical`|16|重大なメッセージアイコンを表示します。|  
|`Question`|32|警告クエリアイコンを表示します。|  
|`Exclamation`|48|警告メッセージアイコンを表示します。|  
|`Information`|64|情報メッセージアイコンを表示します。|  
|`DefaultButton1`|0|最初のボタンは既定値です。|  
|`DefaultButton2`|256|2 番目のボタンは既定値です。|  
|`DefaultButton3`|512|3 番目のボタンは既定値です。|  
|`ApplicationModal`|0|アプリケーションはモーダルです。 ユーザーは、現在のアプリケーションで作業を続行する前に、メッセージボックスに応答する必要があります。|  
|`SystemModal`|4096|システムはモーダルです。 すべてのアプリケーションは、ユーザーがメッセージボックスに応答するまで中断されます。|  
|`MsgBoxSetForeground`|65536|メッセージボックスウィンドウをフォアグラウンドウィンドウとして指定します。|  
|`MsgBoxRight`|524288|テキストは右に固定されています。|  
|`MsgBoxRtlReading`|1048576|ヘブライ語およびアラビア語のシステムでテキストを右から左に読むことを指定します。|  
  
 最初の値のグループ (0-5) には、ダイアログボックスに表示されるボタンの数と種類が記述されています。 2番目のグループ (16、32、48、64) には、アイコンのスタイルが記述されています。 3番目のグループ (0、256、512) は、どのボタンが既定値であるかを決定します。 4番目のグループ (0, 4096) によってメッセージボックスの表示が決定され、5番目のグループでは、メッセージボックスウィンドウがテキストの配置と方向と共に前景ウィンドウであるかどうかを指定します。 数値を追加して `Buttons` 引数の最終的な値を作成する場合は、各グループの数値を1つだけ使用します。  
  
   
  
## Examples  
 この例では、`MsgBox` 関数を使用して、[はい] ボタンと [いいえ] ボタンを持つダイアログボックスに重大なエラーメッセージを表示します。 既定の応答として [いいえ] ボタンが指定されています。 これを行うには、`MsgBox` 定数値を1つの数値式に結合します。 この場合、4 ([はい]/[いいえ] ボタンの組み合わせ) と 16 (**重要なメッセージ**ウィンドウ)、および 256 (既定のボタンとして2番目のボタン) を追加すると、合計は276になります。 `MsgBox` 関数によって返される値は、ユーザーが選択したボタンによって異なります。 Yes は値6を返します。No は7の値を返します。  
  
 [!code-vb[VbVbalrCatRef#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Prompt" /> が文字列型 (<see langword="String" />) の式でないか、<paramref name="Title" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">プロセスがユーザー対話モードで動作していません。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see langword="MsgBoxResult" /> 列挙型または <see langword="MsgBoxStyle" /> 列挙型のメンバーでないパラメーターが含まれています。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MessageBox.Show(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Partition">
      <MemberSignature Language="C#" Value="public static string Partition (long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Partition(int64 Number, int64 Start, int64 Stop, int64 Interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Partition (Number As Long, Start As Long, Stop As Long, Interval As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Partition(long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="F#" Value="static member Partition : int64 * int64 * int64 * int64 -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Partition (Number, Start, Stop, Interval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int64" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Stop" Type="System.Int64" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Interval" Type="System.Int64" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">必須です。 <see langword="Long" />。 計算済み範囲のいずれかに存在する整数値です。</param>
        <param name="Start">必須です。 <see langword="Long" />。 計算済み範囲のセットの最小値を示す整数です。 <paramref name="Start" /> を 0 未満に設定することはできません。</param>
        <param name="Stop">必須です。 <see langword="Long" />。 計算済み範囲のセットの最大値を示す整数です。 <paramref name="Stop" /> には <paramref name="Start" /> 以下の値を指定できません。</param>
        <param name="Interval">必須です。 <see langword="Long" />。 <paramref name="Start" /> と <paramref name="Stop" /> の間で計算される、各範囲のサイズを示す整数値です。 <paramref name="Interval" /> を 1 未満に設定することはできません。</param>
        <summary>ある数値が含まれる計算済み範囲を表す文字列を返します。</summary>
        <returns>ある数値が含まれる計算済み範囲を表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Partition` 関数は、`Interval`によって指定された値の数を含む一連の数値範囲を計算します。 最初の範囲は `Start` から始まり、最後の範囲は `Stop` で終了します。 次に、`Partition` 関数は、`Number` を含む範囲を識別し、その範囲を記述する文字列を返します。 範囲は、文字列で "*lowervalue*:*uppervalue*" として表されます。この場合、範囲の下限 (*lowervalue*) は、コロン (:) で終わり (*uppervalue*) から分離されます。  
  
 必要に応じて、`Partition` 関数は、 *lowervalue*と*uppervalue*の前に先頭のスペースを挿入して、両方の文字数が値の文字列形式 (`Stop` + 1) と同じになるようにします。 これにより、`Number` の複数の値を使用して `Partition` 関数の出力を使用すると、その結果のテキストが、後続の並べ替え操作中に適切に処理されるようになります。  
  
 次の表は、3つの `Start`、`Stop`、`Interval` のセットを使用して計算された範囲のサンプル文字列を示しています。 「最初の範囲」列と「最後の範囲」列には、`Start` と `Stop`の値が指定された場合に可能な最小および最大の範囲が示されます。 "Before first range" 列と "last range" 列には、`Start` 未満の値に対して返される文字列と、`Stop`より大きい `Number` が表示されます。  
  
|`Start`|`Stop`|`Interval`|最初の範囲の前|最初の範囲|最後の範囲|最後の範囲の後|  
|-|-|-|-|-|-|-|  
|0|99|5|":-1"|"0: 4"|"95:99"|"100:"|  
|20|199|10|":19"|"20:29"|"190:199"|"200:"|  
|100|1010|20|":99"|"100: 119"|"1000:1010"|"1011:"|  
  
 上の表では、3番目の行は `Start` の場合は結果を示し、`Stop` の場合は `Interval` で均等に割ることができない一連の数値を定義します。 最後の範囲は `Stop`で終了し、`Interval` が20の場合でも11の数値のみになります。  
  
 `Interval` が1の場合、`Start` および `Stop` の引数に関係なく、範囲は "`Number`:`Number`" になります。 たとえば、`Number` が267、`Stop` が1000、`Interval` が1の場合、`Partition` は "267: 267" を返します。  
  
 `Partition` は、データベースクエリを構築するときに役立ちます。 さまざまな値の範囲内で発生する注文の数を示す SELECT クエリを作成できます。たとえば、請求書の値を 1 ~ 1000、1001から2000のように指定します。  
  
   
  
## Examples  
 次の例では、1950 ~ 2049 の範囲で数十年の一連の範囲を設定しています。 適切な範囲内で `year` の値を検索し、その範囲を示す `String` の値を返します。 たとえば、`year` の値が1984の場合、`Partition` は "1980:1989" を返します。  
  
 [!code-vb[VbVbalrFunctions#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 0、<paramref name="Stop" /> &lt;= <paramref name="Start" />、または <paramref name="Interval" /> &lt; 1。</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveSetting">
      <MemberSignature Language="C#" Value="public static void SaveSetting (string AppName, string Section, string Key, string Setting);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SaveSetting(string AppName, string Section, string Key, string Setting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveSetting (AppName As String, Section As String, Key As String, Setting As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SaveSetting(System::String ^ AppName, System::String ^ Section, System::String ^ Key, System::String ^ Setting);" />
      <MemberSignature Language="F#" Value="static member SaveSetting : string * string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.SaveSetting (AppName, Section, Key, Setting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Section" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Key" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Setting" Type="System.String" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="AppName">必須です。 設定を適用するアプリケーションまたはプロジェクトの名前が含まれている <see langword="String" /> 型の式。</param>
        <param name="Section">必須です。 キーの設定を保存するセクションの名前を含む <see langword="String" /> 型の式。</param>
        <param name="Key">必須です。 保存するキー設定の名前を含む <see langword="String" /> 型の式。</param>
        <param name="Setting">必須です。 <paramref name="Key" /> に設定する値を含む式です。</param>
        <summary>Windows レジストリにアプリケーションのエントリを保存または作成します。 <see langword="My" /> 機能を使用すると、<see langword="SaveSetting" /> を使用した場合より生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SaveSetting` 関数は、`HKEY_CURRENT_USER\Software\VB and VBA Program Settings`にキーを追加します。  
  
 何らかの理由でキーの設定を保存できない場合は、エラーが発生します。  
  
 `SaveSetting` にすると、ユーザーが対話形式でログオンするまでアクティブではない `HKEY_LOCAL_USER` レジストリキーで動作するため、ユーザーがログオンしている必要があります。  
  
 非対話形式のプロセス (Mtx.exe など) からアクセスされるレジストリ設定は、`HKEY_LOCAL_MACHINE\Software\` または `HKEY_USER\DEFAULT\Software` のいずれかのレジストリキーの下に格納する必要があります。  
  
 `SaveSetting` には、`Write` と `Create`の <xref:System.Security.Permissions.RegistryPermission> が必要です。  
  
   
  
## Examples  
 次の例では、最初に `SaveSetting` 関数を使用して `MyApp` アプリケーションの Windows レジストリにエントリを作成した後、`DeleteSetting` 関数を使用して削除します。  
  
 [!code-vb[VbVbalrCatRef#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">キーのレジストリを作成できませんでした。または、ユーザーがログインしていません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Shell">
      <MemberSignature Language="C#" Value="public static int Shell (string Pathname, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string Pathname, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (Pathname As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (Pathname, Style, Wait, Timeout)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string PathName, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (PathName As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (PathName, Style, Wait, Timeout)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Style" Type="Microsoft.VisualBasic.AppWinStyle" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Wait" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Timeout" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Pathname">必須です。 <see langword="String" />。 実行するプログラムの名前に、必要な引数とコマンド ライン スイッチを加えたものです。 <paramref name="PathName" /> には、ドライブ名とディレクトリ パスまたはフォルダー名も指定できます。
プログラムのパスがわからない場合には、<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />を使用するとパスを調べることができます。 たとえば <c>My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt")</c> を呼び出すと、ドライブ C:\\\ 内で名前が <c>testFile.txt</c> であるすべてのファイルの完全パスが返されます。</param>
        <param name="PathName">必須です。 <see langword="String" />。 実行するプログラムの名前に、必要な引数とコマンド ライン スイッチを加えたものです。 <paramref name="PathName" /> には、ドライブ名とディレクトリ パスまたはフォルダー名も指定できます。  
 プログラムのパスがわからない場合には、<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />を使用するとパスを調べることができます。 たとえば <c>My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt")</c> を呼び出すと、ドライブ C:\\\ 内で名前が <c>testFile.txt</c> であるすべてのファイルの完全パスが返されます。</param>
        <param name="Style">任意。 <see langword="AppWinStyle" />。 プログラムが実行されるウィンドウのスタイルを指定する、<see cref="T:Microsoft.VisualBasic.AppWinStyle" /> から選択した値です。 <paramref name="Style" /> を省略すると、<see langword="Shell" /> では <see langword="AppWinStyle.MinimizedFocus" /> が使用されます。この場合、プログラムは最小化し、フォーカスのある状態で起動します。</param>
        <param name="Wait">任意。 <see langword="Boolean" />。 <see langword="Shell" /> 関数で、プログラムが完了するまで待つかどうかを示す値です。 <paramref name="Wait" /> を省略した場合、<see langword="Shell" /> では <see langword="False" /> が使用されます。</param>
        <param name="Timeout">任意。 <see langword="Integer" />。 <paramref name="Wait" /> が <see langword="True" /> の場合に、プログラムの完了を待つ時間をミリ秒単位で指定する数値です。 <paramref name="Timeout" /> を省略すると、<see langword="Shell" /> では -1 が使用されます。この場合、タイムアウトは発生せず、<see langword="Shell" /> はプログラムが終了するまで値を返しません。 したがって、<paramref name="Timeout" /> を省略するか -1 に設定した場合、<see langword="Shell" /> からプログラムに制御が返されなくなる可能性があります。</param>
        <summary>実行可能プログラムを実行します。プログラムがまだ実行中の場合には、プログラムのプロセス ID を含む整数値を返します。</summary>
        <returns>プログラムがまだ実行中の場合には、プログラムのプロセス ID を含む整数値を返します。 プログラムが既に実行を完了している場合は 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Shell` 関数の戻り値は、`Shell` が返されたときに `PathName` で指定されたプログラムが実行中かどうかによって異なります。 `Wait` を `True` に設定し、タイムアウトが経過する前にプログラムが終了した場合、`Shell` は0を返します。 タイムアウトが経過した場合、または `Wait` を省略した場合、または `False`に設定した場合、`Shell` はプログラムのプロセス ID を返します。 プロセス ID は、実行中のプログラムを識別する一意の番号です。  
  
## <a name="failure-to-start"></a>開始できません  
 `Shell` 関数が名前付きプログラムを開始できない場合、<xref:System.IO.FileNotFoundException> エラーが発生します。 これは、たとえば、<xref:System.Windows.Forms?displayProperty=nameWithType> を使用してアプリケーションから16ビットプログラム (`command.com` など) を実行しようとしたときに発生する可能性があります。 回避策として、必要な16ビットプログラムを呼び出す32ビットプログラムを実行することができます。 `command.com`の場合は、代替手段として `cmd.exe` を実行できます。  
  
## <a name="waiting-for-completion"></a>完了を待機しています  
 既定では、`Shell` 関数はプログラムを非同期に実行します。 つまり、`Shell` 関数の後に続くステートメントが実行される前に、`Shell` 関数で開始されたプログラムが実行を完了しないことがあります。 続行する前にプログラムの終了を待機する場合は、`Wait` を `True` に設定します。  
  
## <a name="determining-the-exit-code"></a>終了コードの決定  
 プロセスは、終了時に*終了コード*を返すことができます。 ただし、`Shell` を使用してこの終了コードを取得することはできません。これは、`Shell` が終了を待機している場合は0を返し、プロセスは `Shell` とは別のオブジェクトで実行されるためです。  
  
 プロセスから終了コードを取得するには、プロセスを開始するための独自のコードを記述し、終了を待機する必要があります。 次の例では、プロセスを開始し、終了するまで待機し、終了コードを取得する方法を示します。  
  
```vb  
Dim procID As Integer  
Dim newProc As Diagnostics.Process  
newProc = Diagnostics.Process.Start("C:\WINDOWS\NOTEPAD.EXE")  
procID = newProc.Id  
newProc.WaitForExit()  
Dim procEC As Integer = -1  
If newProc.HasExited Then  
    procEC = newProc.ExitCode  
End If  
MsgBox("Process with ID " & CStr(ProcID) & _  
    " terminated with exit code " & CStr(procEC))  
```  
  
## <a name="protecting-the-file-specification"></a>ファイル指定の保護  
 次の例に示すように、パスとファイルの指定全体を引用符で囲む必要があります。  
  
```vb  
ID = Shell("""C:\Program Files\display.exe"" -a -q", , True, 100000)  
```  
  
 文字列リテラル内の隣接する二重引用符 (`" "`) の各ペアは、文字列内で1つの二重引用符として解釈されます。 したがって、前の例では、`Shell` 関数に次の文字列を示しています。  
  
```console  
"C:\Program Files\display.exe" -a -q  
```  
  
 パスが引用符で囲まれていない場合、Windows は C:\ で `Program.exe` という名前のファイルを探します。C:\Program Files ディレクトリの `display.exe` ではなく、ディレクトリです。  
  
> [!IMPORTANT]
>  パスとファイルの指定を引用符で囲まないと、ファイル名またはパスノードにスペースが含まれている場合、セキュリティ上のリスクがあります。 前の例では、パスノード `\Program Files` にはスペースが含まれています。 仕様が引用符で囲まれておらず、`Program.exe` という名前のプログラムが C: \\ でインストールされている場合 (たとえば、違法な改ざんなど)、Windows は `display.exe` ではなく実行します。  
  
> [!IMPORTANT]
>  `Shell` 関数には、部分信頼の状況での実行に影響する可能性があるアンマネージコードのアクセス許可が必要です。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。  
  
   
  
## Examples  
 次の例では、`Shell` 関数を使用して、ユーザーによって指定されたアプリケーションを実行します。 2番目の引数として <xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType> を指定すると、アプリケーションは通常のサイズで開き、フォーカスが与えられます。  
  
 [!code-vb[VbVbalrFunctions#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Style" /> が 0 ～ 9 (両端を含む) の範囲内の値ではありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="Shell" /> が <paramref name="PathName" /> ファイルを見つけられません。</exception>
        <exception cref="T:System.NullReferenceException"><paramref name="PathName" /> が <see langword="Nothing" /> です。</exception>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.NullReferenceException" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />
        <altmember cref="Overload:Microsoft.VisualBasic.Interaction.AppActivate" />
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static object Switch (params object[] VarExpr);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Switch(object[] VarExpr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Switch (ParamArray VarExpr As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Switch(... cli::array &lt;System::Object ^&gt; ^ VarExpr);" />
      <MemberSignature Language="F#" Value="static member Switch : obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Switch VarExpr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarExpr" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="VarExpr">必須です。 <see langword="Object" /> パラメーター配列。 偶数個の要素が含まれている必要があります。 <see langword="Object" /> の変数または式をコンマで区切ったリストか、<see langword="Object" /> 要素の 1 次元配列を指定します。</param>
        <summary>式のリストを評価し、リスト内で最初に <see langword="Object" /> に評価された式に対応する <see langword="True" /> 値を返します。</summary>
        <returns>式のリストを評価し、リスト内で最初に <see langword="Object" /> に評価された式に対応する <see langword="True" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VarExpr` に指定される引数は、ペアの式と値で構成されます。 `Switch` 関数は、`VarExpr`内の最も小さいインデックスから最も大きいインデックスの奇数の式を評価し、`True`に評価される最初の式に関連付けられている偶数の値を返します。 たとえば、`VarExpr(0)` が `True`の場合、`Switch` は `VarExpr(1)`を返し、`VarExpr(0)` が `False` で `VarExpr(2)` は `True`を返します。`Switch``VarExpr(3)`  
  
 `VarExpr` 引数を指定しない場合、`Switch` は `Nothing`を返します。  
  
> [!NOTE]
>  引数リスト内の式には、関数呼び出しを含めることができます。 `Switch`の呼び出しの引数リストを準備する過程で、Visual Basic コンパイラはすべての式のすべての関数を呼び出します。 つまり、引数リストの前の式が `True` の場合、呼び出されていない特定の関数に依存することはできません。  
  
   
  
## Examples  
 次の例では、`Switch` 関数を使用して、都市名と一致する言語の名前を返します。 `Option Strict` `Off`する必要があります。  
  
 [!code-vb[VbVbalrFunctions#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#48)]  
  
 <xref:System.Diagnostics> 名前空間には <xref:System.Diagnostics.Switch>と呼ばれるクラスも含まれているため、`Switch` 関数の呼び出しは <xref:Microsoft.VisualBasic> 名前空間で修飾する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">引数の数は奇数です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case ステートメント (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/parameter-arrays.md">パラメーター配列</related>
      </Docs>
    </Member>
  </Members>
</Type>
