<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="86b9d568a2dab23e7740434c97b16717ca9c2d51" /><Meta Name="ms.sourcegitcommit" Value="f6fc130f7b9399b2b130a137d6b0b2b73c1d17b3" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/18/2019" /><Meta Name="ms.locfileid" Value="74153879" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <TypeSignature Language="VB.NET" Value="Public Module DateAndTime" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateAndTime sealed" />
  <TypeSignature Language="F#" Value="type DateAndTime = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="DateAndTime" /> モジュールには、日付と時刻の操作に使用されるプロシージャとプロパティが含まれています。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このモジュールは、現在の日付または時刻を取得したり、日付の計算を実行したり、日付または時刻を返したり、プロセスの日付または時刻を設定したりする、Visual Basic 言語キーワードとランタイムライブラリメンバーをサポートします。  
  
   
  
## Examples  
 この例では、`Today` プロパティを使用して、現在のシステム日付を返します。  
  
```vb  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/dates-and-times-summary.md">日付と時刻の概要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">キーワード (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">ランタイムライブラリのメンバーの Visual Basic</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された時間間隔を加算した日付と時刻を含む <see langword="Date" /> 値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As DateInterval, Number As Double, DateValue As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(Microsoft::VisualBasic::DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : Microsoft.VisualBasic.DateInterval * double * DateTime -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">必須です。 加算する時間間隔を表す <see cref="T:Microsoft.VisualBasic.DateInterval" /> 列挙値または文字列式。</param>
        <param name="Number">必須です。 加算する時間間隔を表す浮動小数点式。 これは、正の値 (未来の日付/時刻の値を取得する場合) または負の値 (過去の日付/時刻の値を取得する場合) とすることができます。 <paramref name="Interval" /> で時、分、または秒を指定する場合、小数部を含めることができます。 その他の値を <paramref name="Interval" /> で指定する場合、<paramref name="Number" /> の小数部は無視されます。</param>
        <param name="DateValue">必須です。 時間間隔を加算する日時を表す式。 <paramref name="DateValue" /> 自体は、呼び出し元のプログラムでは変更されません。</param>
        <summary>指定された時間間隔を加算した日付と時刻を含む値を返します。</summary>
        <returns>指定された時間間隔を加算した日付と時刻を含む値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateAdd` 関数を使用すると、指定した時間間隔を日付から加算または減算できます。 たとえば、今日または45分前の時点から30日前までの日付を計算できます。  
  
 `DateValue`に日を追加するには、`DateInterval.Day`、`DateInterval.DayOfYear`、または `DateInterval.Weekday`を使用します。 `DayOfYear` と `Weekday` は意味のある時間間隔ではないため、これらは同等として扱われます。  
  
 `DateAdd` 関数は、無効な日付を返しません。 必要に応じて、結果として得られる日付の日部分が、結果の年の結果として得られる月の最後の日まで下方に調整されます。 次の例では、1か月31日を追加します。  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 この例では、`DateAdd` は `#2/31/1995#`ではなく `#2/28/1995#`を返します。 `DateValue` が `#1/31/1996#`場合、1996は閏年であるため `#2/29/1996#` を返します。  
  
> [!NOTE]
>  `DateAdd` は、<xref:System.Globalization> 名前空間の <xref:System.Globalization.CultureInfo> クラスの <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティの現在のカレンダー設定を使用します。 既定の <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 値は、**コントロールパネル**の設定によって決まります。  
  
 `Date` のすべての値は <xref:System.DateTime> 構造体によってサポートされているため、そのメソッドでは、時間間隔を追加するための追加オプションを指定できます。 たとえば、次のように、ミリ秒単位で丸めた日数を `Date` 変数に追加できます。  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|String|追加する時間間隔の単位|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|毎日整数値に切り捨てられました|  
|`DateInterval.DayOfYear`|Y|毎日整数値に切り捨てられました|  
|`DateInterval.Hour`|h|時最も近いミリ秒に丸める|  
|`DateInterval.Minute`|n|数分最も近いミリ秒に丸める|  
|`DateInterval.Month`|m|翌月整数値に切り捨てられました|  
|`DateInterval.Quarter`|q|実績整数値に切り捨てられました|  
|`DateInterval.Second`|s|Second最も近いミリ秒に丸める|  
|`DateInterval.Weekday`|週|毎日整数値に切り捨てられました|  
|`DateInterval.WeekOfYear`|各地|前週整数値に切り捨てられました|  
|`DateInterval.Year`|yyyy|比整数値に切り捨てられました|  
  
   
  
## Examples  
 この例では、日付を指定し、`DateAdd` 関数を使用して、対応する日付を指定した月数だけ後に表示します。  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> を日付型 (<see langword="Date" />) に強制変換できません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> が無効です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">計算された日付が西暦 1 年 1 月 1 日 00:00:00 より前であるか、西暦 9999 年 12 月 31 日 23:59:59 より後です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As String, Number As Double, DateValue As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(System::String ^ Interval, double Number, System::Object ^ DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : string * double * obj -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">必須です。 加算する時間間隔を表す <see cref="T:Microsoft.VisualBasic.DateInterval" /> 列挙値または文字列式。</param>
        <param name="Number">必須です。 加算する時間間隔を表す浮動小数点式。 <paramref name="Number" /> には正の値 (未来の日付/時刻の値を取得する場合) または負の値 (過去の日付/時刻の値を取得する場合) を指定できます。 <paramref name="Interval" /> で時、分、または秒を指定する場合、小数部を含めることができます。 その他の値を <paramref name="Interval" /> で指定する場合、<paramref name="Number" /> の小数部は無視されます。</param>
        <param name="DateValue">必須です。 時間間隔を加算する日時を表す式。 <paramref name="DateValue" /> 自体は、呼び出し元のプログラムでは変更されません。</param>
        <summary>指定された時間間隔を加算した日付と時刻を含む値を返します。</summary>
        <returns>指定された時間間隔を加算した日付と時刻を含む値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateAdd` 関数を使用すると、指定した時間間隔を日付から加算または減算できます。 たとえば、今日または45分前の時点から30日前までの日付を計算できます。  
  
 `DateValue`に日を追加するには、`DateInterval.Day`、`DateInterval.DayOfYear`、または `DateInterval.Weekday`を使用します。 `DayOfYear` と `Weekday` は意味のある時間間隔ではないため、これらは同等として扱われます。  
  
 `DateAdd` 関数は、無効な日付を返しません。 必要に応じて、結果として得られる日付の日部分が、結果の年の結果として得られる月の最後の日まで下方に調整されます。 次の例では、1か月31日を追加します。  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 この例では、`DateAdd` は `#2/31/1995#`ではなく `#2/28/1995#`を返します。 `DateValue` が `#1/31/1996#`場合、1996は閏年であるため `#2/29/1996#` を返します。  
  
> [!NOTE]
>  `DateAdd` は、<xref:System.Globalization> 名前空間の <xref:System.Globalization.CultureInfo> クラスの <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティの現在のカレンダー設定を使用します。 既定の <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 値は、**コントロールパネル**の設定によって決まります。  
  
 `Date` のすべての値は <xref:System.DateTime> 構造体によってサポートされているため、そのメソッドでは、時間間隔を追加するための追加オプションを指定できます。 たとえば、次のように、ミリ秒単位で丸めた日数を `Date` 変数に追加できます。  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|String|追加する時間間隔の単位|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|毎日整数値に切り捨てられました|  
|`DateInterval.DayOfYear`|Y|毎日整数値に切り捨てられました|  
|`DateInterval.Hour`|h|時最も近いミリ秒に丸める|  
|`DateInterval.Minute`|n|数分最も近いミリ秒に丸める|  
|`DateInterval.Month`|m|翌月整数値に切り捨てられました|  
|`DateInterval.Quarter`|q|実績整数値に切り捨てられました|  
|`DateInterval.Second`|s|Second最も近いミリ秒に丸める|  
|`DateInterval.Weekday`|週|毎日整数値に切り捨てられました|  
|`DateInterval.WeekOfYear`|各地|前週整数値に切り捨てられました|  
|`DateInterval.Year`|yyyy|比整数値に切り捨てられました|  
  
   
  
## Examples  
 この例では、日付を指定し、`DateAdd` 関数を使用して、対応する日付を指定した月数だけ後に表示します。  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> を日付型 (<see langword="Date" />) に強制変換できません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> が無効です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">計算された日付が西暦 1 年 1 月 1 日 00:00:00 より前であるか、西暦 9999 年 12 月 31 日 23:59:59 より後です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの <see langword="Date" /> 値の間に含まれる時間間隔の数を指定する値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As DateInterval, Date1 As DateTime, Date2 As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : Microsoft.VisualBasic.DateInterval * DateTime * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必須です。 <paramref name="Date1" /> と <paramref name="Date2" /> の差分の単位として使用する時間間隔を表す <see cref="T:Microsoft.VisualBasic.DateInterval" /> 列挙値または文字列式。</param>
        <param name="Date1">必須です。 計算で使用する 1 番目の日付/時刻の値。</param>
        <param name="Date2">必須です。 計算で使用する 2 番目の日付/時刻の値。</param>
        <param name="DayOfWeek">任意。 週の最初の曜日を指定する <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> が使用されます。</param>
        <param name="WeekOfYear">任意。 年の最初の週を指定する <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> が使用されます。</param>
        <summary>2 つの <see langword="Date" /> 値の間に含まれる時間間隔の数を指定する long 型の値を返します。</summary>
        <returns>2 つの <see langword="Date" /> 値の間に含まれる時間間隔の数を指定する long 型の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateDiff` 関数を使用すると、2つの日付/時刻値の間に存在する指定された時間間隔の数を確認できます。 たとえば、`DateDiff` を使用して、2つの日付の間の日数、または今日から年末までの週数を計算することができます。  
  
## <a name="behavior"></a>動作  
  
-   **パラメーターの処理。** `DateDiff` は、`Date1` の値を `Date2` の値から減算して、差を生成します。 呼び出し元のプログラムでは、どちらの値も変更されません。  
  
-   **戻り値。** `Date1` と `Date2` は `Date` データ型であるため、日付と時刻の値はシステムタイマーの100ナノ秒刻みに正確に格納されます。 ただし、`DateDiff` は常に、`Long` 値として時間間隔の数を返します。  
  
     `Date1` が `Date2`よりも後の日付と時刻を表している場合、`DateDiff` は負の値を返します。  
  
-   **日付間隔。** `Interval` が `DateInterval.DayOfYear`に設定されている場合、`DayOfYear` は時間間隔にとって意味のある単位ではないため、`DateInterval.Day`と同じように扱われます。  
  
-   **週間隔。** `Interval` が `DateInterval.WeekOfYear`に設定されている場合、戻り値は `Date1` を含む最初の曜日から `Date2`を含む週の最初の曜日までの週数を表します。 次の例では、`DateInterval.Weekday`によって異なる結果が生成される方法を示します。  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     前の例では、2つの日付の差が7日未満であるため、`DateDiff` は `wD` 0 を返しますが、それぞれのカレンダー週の最初の日には7日間の差があるため、1を `wY` に返します。  
  
-   **間隔が長くなっています。** `Interval` が `DateInterval.Year`に設定されている場合、戻り値は `Date1` と `Date2`の年の部分からのみ計算されます。 同様に、`DateInterval.Month` の戻り値は、引数の年と月の部分から純粋に計算され、2つの日付を含む四半期からの `DateInterval.Quarter` に対してのみ計算されます。  
  
     たとえば、次の年の12月31日を年1月31日と比較すると、`DateDiff` は1日に1日しか経過していないにもかかわらず、`DateInterval.Year`、`DateInterval.Quarter`、または `DateInterval.Month`に対して1を返します。  
  
     複数の時代 (年号) を持つ日本語などのカルチャでは、`DateDiff` メソッドは、差が2つ以上の時代 (年号) にまたがる場合に、年単位の差を返しません。 代わりに、次の例に示すように、<xref:System.DateTime.Year%2A> プロパティによって返される値の差を計算することができます。例: `date2.Year - date1.Year`。  
  
-   **その他の間隔。** すべての `Date` 値は <xref:System.DateTime> 構造体によってサポートされるため、そのメソッドによって、時間間隔を検索するための追加オプションが提供されます。 たとえば、オーバーロードされた形式のいずれかで `Subtract` メソッドを使用することができます。 `Date` 変数から <xref:System.TimeSpan> を減算して別の `Date` 値を返す <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType>、<xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> 値を減算して `Date` を返すことができます。<xref:System.TimeSpan> 次の例に示すように、プロセスで、所要時間 (ミリ秒) を調べることができます。  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|文字列値|時差の単位|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y"|Day|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|月|  
|`DateInterval.Quarter`|"q"|四半期|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|週|  
|`DateInterval.WeekOfYear`|"ww"|カレンダーの週|  
|`DateInterval.Year`|"yyyy"|Year|  
  
 `DayOfWeek` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|[値]|説明|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|システム設定で指定された週の最初の曜日|  
|`FirstDayOfWeek.Sunday`|1|日曜日 (既定値)|  
|`FirstDayOfWeek.Monday`|2|月曜日 (ISO standard 8601、セクション3.17 に準拠)|  
|`FirstDayOfWeek.Tuesday`|3|火曜日|  
|`FirstDayOfWeek.Wednesday`|4|水曜日|  
|`FirstDayOfWeek.Thursday`|5|木曜日|  
|`FirstDayOfWeek.Friday`|6|金曜日|  
|`FirstDayOfWeek.Saturday`|7|土曜日|  
  
 `WeekOfYear` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|[値]|説明|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|システム設定で指定された年の最初の週|  
|`FirstWeekOfYear.Jan1`|1|1月1日が発生する週 (既定値)|  
|`FirstWeekOfYear.FirstFourDays`|2|新しい年に少なくとも4日ある週 (ISO standard 8601、セクション3.17 に準拠)|  
|`FirstWeekOfYear.FirstFullWeek`|3|新しい年の最初の週|  
  
   
  
## Examples  
 この例では、`DateDiff` 関数を使用して、指定された日付と今日の間の日数を表示します。  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">該当する <paramref name="Date1" />、<paramref name="Date2" />、<paramref name="DayofWeek" /> がありません。</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> または <paramref name="Date2" /> が無効な型です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As String, Date1 As Object, Date2 As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : string * obj * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必須です。 <paramref name="Date1" /> と <paramref name="Date2" /> の差分の単位として使用する時間間隔を表す <see cref="T:Microsoft.VisualBasic.DateInterval" /> 列挙値または文字列式。</param>
        <param name="Date1">必須です。 計算で使用する 1 番目の日付/時刻の値。</param>
        <param name="Date2">必須です。 計算で使用する 2 番目の日付/時刻の値。</param>
        <param name="DayOfWeek">任意。 週の最初の曜日を指定する <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> が使用されます。</param>
        <param name="WeekOfYear">任意。 年の最初の週を指定する <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> が使用されます。</param>
        <summary>2 つの <see langword="Date" /> 値の間に含まれる時間間隔の数を指定する long 型の値を返します。</summary>
        <returns>2 つの <see langword="Date" /> 値の間に含まれる時間間隔の数を指定する long 型の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateDiff` 関数を使用すると、2つの日付/時刻値の間に存在する指定された時間間隔の数を確認できます。 たとえば、`DateDiff` を使用して、2つの日付の間の日数、または今日から年末までの週数を計算することができます。  
  
## <a name="behavior"></a>動作  
  
-   **パラメーターの処理。** `DateDiff` は、`Date1` の値を `Date2` の値から減算して、差を生成します。 呼び出し元のプログラムでは、どちらの値も変更されません。  
  
-   **戻り値。** `Date1` と `Date2` は `Date` データ型であるため、日付と時刻の値はシステムタイマーの100ナノ秒刻みに正確に格納されます。 ただし、`DateDiff` は常に、`Long` 値として時間間隔の数を返します。  
  
     `Date1` が `Date2`よりも後の日付と時刻を表している場合、`DateDiff` は負の値を返します。  
  
-   **日付間隔。** `Interval` が `DateInterval.DayOfYear`に設定されている場合、`DayOfYear` は時間間隔にとって意味のある単位ではないため、`DateInterval.Day`と同じように扱われます。  
  
-   **週間隔。** `Interval` が `DateInterval.WeekOfYear`に設定されている場合、戻り値は `Date1` を含む最初の曜日から `Date2`を含む週の最初の曜日までの週数を表します。 次の例では、`DateInterval.Weekday`によって異なる結果が生成される方法を示します。  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     前の例では、2つの日付の差が7日未満であるため、`DateDiff` は `wD` 0 を返しますが、それぞれのカレンダー週の最初の日には7日間の差があるため、1を `wY` に返します。  
  
-   **間隔が長くなっています。** `Interval` が `DateInterval.Year`に設定されている場合、戻り値は `Date1` と `Date2`の年の部分からのみ計算されます。 同様に、`DateInterval.Month` の戻り値は、引数の年と月の部分から純粋に計算され、2つの日付を含む四半期からの `DateInterval.Quarter` に対してのみ計算されます。  
  
     たとえば、次の年の12月31日を年1月31日と比較すると、`DateDiff` は1日に1日しか経過していないにもかかわらず、`DateInterval.Year`、`DateInterval.Quarter`、または `DateInterval.Month`に対して1を返します。  
  
     複数の時代 (年号) を持つ日本語などのカルチャでは、`DateDiff` メソッドは、差が2つ以上の時代 (年号) にまたがる場合に、年単位の差を返しません。 代わりに、次の例に示すように、<xref:System.DateTime.Year%2A> プロパティによって返される値の差を計算することができます。例: `date2.Year - date1.Year`。  
  
-   **その他の間隔。** すべての `Date` 値は <xref:System.DateTime> 構造体によってサポートされるため、そのメソッドによって、時間間隔を検索するための追加オプションが提供されます。 たとえば、オーバーロードされた形式のいずれかで `Subtract` メソッドを使用することができます。 `Date` 変数から <xref:System.TimeSpan> を減算して別の `Date` 値を返す <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType>、<xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> 値を減算して `Date` を返すことができます。<xref:System.TimeSpan> 次の例に示すように、プロセスで、所要時間 (ミリ秒) を調べることができます。  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|文字列値|時差の単位|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y"|Day|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|月|  
|`DateInterval.Quarter`|"q"|四半期|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|週|  
|`DateInterval.WeekOfYear`|"ww"|カレンダーの週|  
|`DateInterval.Year`|"yyyy"|Year|  
  
 `DayOfWeek` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|[値]|説明|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|システム設定で指定された週の最初の曜日|  
|`FirstDayOfWeek.Sunday`|1|日曜日 (既定値)|  
|`FirstDayOfWeek.Monday`|2|月曜日 (ISO standard 8601、セクション3.17 に準拠)|  
|`FirstDayOfWeek.Tuesday`|3|火曜日|  
|`FirstDayOfWeek.Wednesday`|4|水曜日|  
|`FirstDayOfWeek.Thursday`|5|木曜日|  
|`FirstDayOfWeek.Friday`|6|金曜日|  
|`FirstDayOfWeek.Saturday`|7|土曜日|  
  
 `WeekOfYear` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|[値]|説明|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|システム設定で指定された年の最初の週|  
|`FirstWeekOfYear.Jan1`|1|1月1日が発生する週 (既定値)|  
|`FirstWeekOfYear.FirstFourDays`|2|新しい年に少なくとも4日ある週 (ISO standard 8601、セクション3.17 に準拠)|  
|`FirstWeekOfYear.FirstFullWeek`|3|新しい年の最初の週|  
  
   
  
## Examples  
 この例では、`DateDiff` 関数を使用して、指定された日付と今日の間の日数を表示します。  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">該当する <paramref name="Date1" />、<paramref name="Date2" />、<paramref name="DayofWeek" /> がありません。</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> または <paramref name="Date2" /> が無効な型です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定の <see langword="Date" /> 型値の中の指定されたコンポーネントを含む整数値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As DateInterval, DateValue As DateTime, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional FirstWeekOfYearValue As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : Microsoft.VisualBasic.DateInterval * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, FirstDayOfWeekValue, FirstWeekOfYearValue)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必須です。 返される日付/時刻値の一部を表す <see cref="T:Microsoft.VisualBasic.DateInterval" /> 列挙値または文字列式。</param>
        <param name="DateValue">必須です。 評価する <see langword="Date" /> 値。</param>
        <param name="FirstDayOfWeekValue">任意。 週の最初の曜日を指定する <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> が使用されます。</param>
        <param name="FirstWeekOfYearValue">任意。 年の最初の週を指定する <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> が使用されます。</param>
        <summary>特定の <see langword="Date" /> 型値の中の指定されたコンポーネントを含む整数値を返します。</summary>
        <returns>特定の <see langword="Date" /> 型値の中の指定されたコンポーネントを含む整数値の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DatePart` 関数を使用すると、日付/時刻値を評価し、特定のコンポーネントを返すことができます。 たとえば、`DatePart` を使用して、曜日または現在の時間を計算することができます。  
  
 `Interval` 引数に対して `DateInterval.Weekday` を選択した場合、戻り値は `FirstDayOfWeek` 列挙体の値と一致します。 `DateInterval.WeekOfYear`を選択した場合、`DatePart` は <xref:System.Globalization> 名前空間の <xref:System.Globalization.Calendar> および <xref:System.Globalization.CultureInfo> クラスを使用して、現在の設定を決定します。  
  
 `FirstDayOfWeekValue` 引数は、`DateInterval.Weekday` と `DateInterval.WeekOfYear` `Interval` の設定を使用する計算に影響します。 `FirstWeekOfYearValue` 引数は `Interval`の `DateInterval.WeekOfYear` を指定する計算に影響します。  
  
 すべての `Date` 値は <xref:System.DateTime> 構造体によってサポートされるため、そのメソッドでは、日付/時刻部分を取得するための追加オプションが提供されます。 たとえば、次のように、時刻値を午前0時に設定して、`Date` 変数の日付値全体を取得できます。  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|String|返される日付/時刻値の一部|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|日 (1 ～ 31)|  
|`DateInterval.DayOfYear`|Y|年間通算日 (1 ～ 366)|  
|`DateInterval.Hour`|h|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|月|  
|`DateInterval.Quarter`|q|四半期|  
|`DateInterval.Second`|s|Second|  
|`DateInterval.Weekday`|週|曜日 (1 ～ 7)|  
|`DateInterval.WeekOfYear`|各地|週 (1 ～ 53)|  
|`DateInterval.Year`|yyyy|Year|  
  
 `FirstDayOfWeekValue` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|[値]|説明|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|システム設定で指定された週の最初の曜日|  
|`FirstDayOfWeek.Sunday`|1|日曜日 (既定値)|  
|`FirstDayOfWeek.Monday`|2|月曜日 (ISO standard 8601、セクション3.17 に準拠)|  
|`FirstDayOfWeek.Tuesday`|3|火曜日|  
|`FirstDayOfWeek.Wednesday`|4|水曜日|  
|`FirstDayOfWeek.Thursday`|5|木曜日|  
|`FirstDayOfWeek.Friday`|6|金曜日|  
|`FirstDayOfWeek.Saturday`|7|土曜日|  
  
 `FirstWeekOfYearValue` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|[値]|説明|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|システム設定で指定された年の最初の週|  
|`FirstWeekOfYear.Jan1`|1|1月1日が発生する週 (既定値)|  
|`FirstWeekOfYear.FirstFourDays`|2|新しい年に少なくとも4日ある週 (ISO standard 8601、セクション3.17 に準拠)|  
|`FirstWeekOfYear.FirstFullWeek`|3|新しい年の最初の週|  
  
   
  
## Examples  
 この例では、日付が使用され、`DatePart` 関数を使用して、その年の四半期が表示されます。  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> が無効です。</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> を日付型 (<see langword="Date" />) に強制変換できません。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As String, DateValue As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : string * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, DayOfWeek, WeekOfYear)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必須です。 返される日付/時刻値の一部を表す <see cref="T:Microsoft.VisualBasic.DateInterval" /> 列挙値または文字列式。</param>
        <param name="DateValue">必須です。 評価する <see langword="Date" /> 値。</param>
        <param name="DayOfWeek">任意。 週の最初の曜日を指定する <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> が使用されます。</param>
        <param name="WeekOfYear">任意。 年の最初の週を指定する <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> が使用されます。</param>
        <summary>特定の <see langword="Date" /> 型値の中の指定された要素を含む値を返します。</summary>
        <returns>特定の <see langword="Date" /> 型値の中の指定されたコンポーネントを含む整数値の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DatePart` 関数を使用すると、日付/時刻値を評価し、特定のコンポーネントを返すことができます。 たとえば、`DatePart` を使用して、曜日または現在の時間を計算することができます。  
  
 `Interval` 引数に対して `DateInterval.Weekday` を選択した場合、戻り値は `FirstDayOfWeek` 列挙体の値と一致します。 `DateInterval.WeekOfYear`を選択した場合、`DatePart` は <xref:System.Globalization> 名前空間の <xref:System.Globalization.Calendar> および <xref:System.Globalization.CultureInfo> クラスを使用して、現在の設定を決定します。  
  
 `FirstDayOfWeekValue` 引数は、`DateInterval.Weekday` と `DateInterval.WeekOfYear` `Interval` の設定を使用する計算に影響します。 `FirstWeekOfYearValue` 引数は `Interval`の `DateInterval.WeekOfYear` を指定する計算に影響します。  
  
 すべての `Date` 値は <xref:System.DateTime> 構造体によってサポートされるため、そのメソッドでは、日付/時刻部分を取得するための追加オプションが提供されます。 たとえば、次のように、時刻値を午前0時に設定して、`Date` 変数の日付値全体を取得できます。  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|String|返される日付/時刻値の一部|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|日 (1 ～ 31)|  
|`DateInterval.DayOfYear`|Y|年間通算日 (1 ～ 366)|  
|`DateInterval.Hour`|h|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|月|  
|`DateInterval.Quarter`|q|四半期|  
|`DateInterval.Second`|s|Second|  
|`DateInterval.Weekday`|週|曜日 (1 ～ 7)|  
|`DateInterval.WeekOfYear`|各地|週 (1 ～ 53)|  
|`DateInterval.Year`|yyyy|Year|  
  
 `FirstDayOfWeekValue` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|[値]|説明|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|システム設定で指定された週の最初の曜日|  
|`FirstDayOfWeek.Sunday`|1|日曜日 (既定値)|  
|`FirstDayOfWeek.Monday`|2|月曜日 (ISO standard 8601、セクション3.17 に準拠)|  
|`FirstDayOfWeek.Tuesday`|3|火曜日|  
|`FirstDayOfWeek.Wednesday`|4|水曜日|  
|`FirstDayOfWeek.Thursday`|5|木曜日|  
|`FirstDayOfWeek.Friday`|6|金曜日|  
|`FirstDayOfWeek.Saturday`|7|土曜日|  
  
 `FirstWeekOfYearValue` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|[値]|説明|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|システム設定で指定された年の最初の週|  
|`FirstWeekOfYear.Jan1`|1|1月1日が発生する週 (既定値)|  
|`FirstWeekOfYear.FirstFourDays`|2|新しい年に少なくとも4日ある週 (ISO standard 8601、セクション3.17 に準拠)|  
|`FirstWeekOfYear.FirstFullWeek`|3|新しい年の最初の週|  
  
   
  
## Examples  
 この例では、日付が使用され、`DatePart` 関数を使用して、その年の四半期が表示されます。  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> が無効です。</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> を日付型 (<see langword="Date" />) に強制変換できません。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateSerial (Year As Integer, Month As Integer, Day As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateSerial(int Year, int Month, int Day);" />
      <MemberSignature Language="F#" Value="static member DateSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateSerial (Year, Month, Day)" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">必須です。 1 から 9999 の整数式。 ただし、この範囲より小さい値も受け入れられます。 <paramref name="Year" /> が 0 ～ 99 の場合、下の「解説」で説明しているように、1930 ～ 2029 年として解釈されます。 <paramref name="Year" /> が 1 未満の場合、現在の年からその値が減算されます。</param>
        <param name="Month">必須です。 1 から 12 の整数式。 ただし、この範囲外の値も受け入れられます。 <paramref name="Month" /> の値は 1 だけオフセットされた後、計算対象の年の 1 月に加算されます。 つまり、(<paramref name="Month" /> - 1) が 1 月に加算されます。 年は必要に応じて再計算されます。 この処理による結果の例を次に示します。 
<paramref name="Month" /> が 1 の場合、結果は計算対象の年の 1 月になります。  
  
<paramref name="Month" /> が 0 の場合、結果は前年の 12 月になります。  
  
If <paramref name="Month" /> が -1 の場合、結果は前年の 11 月になります。  
  
<paramref name="Month" /> が 13 の場合、結果は翌年の 1 月になります。</param>
        <param name="Day">必須です。 1 から 31 の整数式。 ただし、この範囲外の値も受け入れられます。 <paramref name="Day" /> の値は 1 だけオフセットされた後、計算対象の月の最初の日に加算されます。 つまり、(<paramref name="Day" /> - 1) がその月の最初の日に加算されます。 必要に応じて月と年が再計算されます。 この処理による結果の例を次に示します。 
<paramref name="Day" /> が 1 の場合、結果は計算対象の月の最初の日になります。  
  
<paramref name="Day" /> が 0 の場合、結果は前月の末日になります。  
  
<paramref name="Day" /> が -1 の場合、結果は前月の末日の前日になります。  
  
<paramref name="Day" /> が現在の月の末日を過ぎている場合、結果は翌月の適切な日になります。 たとえば、<paramref name="Month" /> が 4 で <paramref name="Day" /> が 31 の場合、結果は 5 月 1 日になります。</param>
        <summary>指定された年、月、日を表す <see langword="Date" /> 値を返します。時刻情報は午前 0 時 (00:00:00) に設定されます。</summary>
        <returns>指定された年、月、日を表す <see langword="Date" /> 値であり、時刻情報は午前 0 時 (00:00:00) に設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 98 または Windows 2000 では、`Year` 引数の2桁表記の年は、ユーザー定義のコンピューター設定に基づいて解釈されます。 既定の設定では、0 ~ 29 の値は2000-2029 年と解釈され、30 ~ 99 の値は年数1930-1999 として解釈されます。 その他のすべての `Year` 引数には、4桁の年を使用します。たとえば、1924のようになります。  
  
 以前のバージョンの Windows では、前に説明した既定値に基づいて2桁の年が解釈されます。 関数が適切な値を返すようにするには、4桁の `Year`を使用します。  
  
 次の例では、負の値、ゼロ、および正の引数の値を示します。 ここでは、`DateSerial` 関数は、年3月の最初の日の前日から現在の年の10年前までの日付を表す `Date` を返します。つまり、2月10年前の最終日です。  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 `Month` または `Day` のいずれかが通常の範囲を超えている場合は、必要に応じて次の大きな単位に適用されます。 たとえば、32日を指定すると、`Month`の値に応じて、1か月として評価されます。 `Year` が9999より大きい場合、またはいずれかの引数が-2147483648 ~ 2147483647 の範囲外の場合、<xref:System.ArgumentException> エラーが発生します。 3つの引数で指定された日付が、1年1月1日の00:00:00 より前、または9999年12月31日の23:59:59 よりも前の場合、<xref:System.ArgumentOutOfRangeException> エラーが発生します。  
  
 `Date` データ型には、時刻コンポーネントが含まれています。 `DateSerial` は、これらのすべてを0に設定するため、返される値は計算された日の先頭を表します。  
  
 すべての `Date` 値は <xref:System.DateTime> 構造体によってサポートされているため、`Date` 値をアセンブルするときに、そのメソッドによって追加のオプションが提供されます。 たとえば、オーバーロードされた <xref:System.DateTime.%23ctor%2A> コンストラクターのいずれかを使用して、必要なコンポーネントの組み合わせを使用して `Date` 変数を設定できます。 次の例では、`NewDateTime` を午前5時8:30 の1秒の午前1時に1978に設定します。  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 この例では、`DateSerial` 関数を使用して、指定した年、月、および日の日付を返します。  
  
 [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberSignature Language="VB.NET" Value="Public Property DateString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DateString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>システムの現在の日付を表す文字列値を返すか設定します。</summary>
        <value>システムの現在の日付を表す文字列値を返すか設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateString` は、月の省略名を使用する、MM-yyyy 形式のシステム日付を返します。 日付に使用できる形式は、M-d-yyyy、M-d-y、M/d/yyyy、M/d/y です。 これは、2バイト文字セット (DBCS) を使用するものを除くすべてのシステムロケールに当てはまります。 システムロケールで2バイト文字セットが使用されている場合、`DateString` は yyyy-MM-dd 形式のシステム日付を返します。 システムロケールは、**コントロールパネル**の [**時計]、[言語]、[地域**] の項目を使用して設定します。  
  
 **メモ**`DateString` プロパティは、Silverlight 内で Visual Basic を実行している場合に、`zh` (簡体字中国語)、`ko` (韓国語)、および `ja` (日本語) システムロケールの yyyy-MM-dd 形式のシステム日付のみを返します。  
  
 現在のシステム時刻を `String`として取得または設定するには、<xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> プロパティを使用します。  
  
 現在のシステム日付または時刻をロケールの形式またはカスタム形式で取得するには、<xref:Microsoft.VisualBasic.DateAndTime.Now%2A> プロパティを <xref:Microsoft.VisualBasic.Strings.Format%2A> 関数に指定し、定義済みまたはユーザー定義の日付/時刻形式を指定します。 次に例を示します。  
  
```vb  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 現在のシステム日付に `Date`としてアクセスするには、<xref:Microsoft.VisualBasic.DateAndTime.Today%2A> プロパティを使用します。  
  
> [!IMPORTANT]
>  システムの日付または時刻を設定するには、アンマネージコードのアクセス許可が必要です。これは、部分信頼状況での実行に影響を与える可能性があります。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。  
  
   
  
## Examples  
 次の例では、`DateString` プロパティを使用して、現在のシステム日付を表示します。  
  
 [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><see cref="P:Microsoft.VisualBasic.DateAndTime.DateString" /> の値を設定するのに使用する無効な形式。</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime DateValue(string StringDate) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateValue (StringDate As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateValue(System::String ^ StringDate);" />
      <MemberSignature Language="F#" Value="static member DateValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateValue StringDate" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">必須です。 1 年 1 月 1 日の 00:00:00 から、9999 年 12 月 31 日の 23:59:59 までの日付/時刻値を表す文字列式。</param>
        <summary>文字列で表した日付情報を含む <see langword="Date" /> 値を返します。時刻情報は午前 0 時 (00:00:00) に設定されます。</summary>
        <returns>文字列で表した日付情報を含む <see langword="Date" /> 値であり、時刻情報は午前 0 時 (00:00:00) に設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `StringDate` に有効な日付の区切り記号で区切られた 1 ~ 12 の数字のみが含まれる場合、`DateValue` は、システムに指定されている短い日付形式に従って、月、日、および年の順序を認識します。 `DateValue` は、<xref:System.Globalization> 名前空間の <xref:System.Globalization.CultureInfo> クラスの <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティの現在のカレンダー設定を使用します。 既定の <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 値は、**コントロールパネル**の設定によって決まります。 短い日付形式をオーバーライドするには、<xref:System.Globalization> 名前空間の <xref:System.Globalization.DateTimeFormatInfo> クラスの <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> プロパティを設定します。  
  
 `DateValue` は、長い形式、省略形、および数値形式で月の名前を認識します。 たとえば、12/30/1991 と12/30/91 を認識するだけでなく、`DateValue` も1991、、および10月30日の1991を認識します。  
  
 `StringDate` の年の部分が省略されている場合、`DateValue` はコンピューターのシステム日付の現在の年を使用します。  
  
 `StringDate` 引数に時刻情報が含まれている場合、`DateValue` は戻り値には含まれません。 ただし、`StringDate` に "89:98" などの無効な時刻情報が含まれている場合、<xref:System.InvalidCastException> エラーが発生します。  
  
   
  
## Examples  
 この例では、`DateValue` 関数を使用して、文字列を日付に変換します。 また、日付リテラルを使用して、`Object` または `Date` 変数 (`oldDate = #2/12/69#`など) に日付を直接割り当てることもできます。  
  
 [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringDate" /> に無効な時刻情報が含まれています。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Day(valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Day (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Day(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Day : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Day DateValue" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">必須です。 日を抽出する <see langword="Date" /> 値。</param>
        <summary>日付を表す 1 から 31 の整数値を返します。</summary>
        <returns>日付を表す 1 から 31 の整数値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Day` 関数を使用する場合は、`Microsoft.VisualBasic` 名前空間で修飾することが必要になる場合があります。これは、<xref:System.Windows.Forms> 名前空間が <xref:System.Windows.Forms.Day> を列挙体として定義するためです。 次の例は、限定 `Day` がこのあいまいさを解決する方法を示しています。  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 また、`DatePart` を呼び出し、 *Interval*引数に `DateInterval.Day` を指定して、月の日付を取得することもできます。  
  
   
  
## Examples  
 次の例では、`Day` 関数を使用して、指定した日付から月の日を取得します。 開発環境では、日付リテラルは、コードのロケール設定を使用して、標準の短い形式 ("02/12/1969" など) で表示されます。  
  
 [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day` は、<xref:System.Windows.Forms.Day?displayProperty=nameWithType> 列挙と区別するために修飾されています。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Hour(valuetype System.DateTime TimeValue) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hour (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Hour(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Hour : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Hour TimeValue" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">必須です。 時を抽出する <see langword="Date" /> 値。</param>
        <summary>時刻を表す 0 から 23 の整数値を返します。</summary>
        <returns>時刻を表す 0 から 23 の整数値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 また、`DatePart` を呼び出し、`Interval` 引数に `DateInterval.Hour` を指定して、1日の時間を取得することもできます。  
  
   
  
## Examples  
 この例では、`Hour` 関数を使用して、指定された時間から時間を取得します。 開発環境では、時刻リテラルは、コードのロケール設定を使用して短い時刻形式で表示されます。  
  
 [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Minute(valuetype System.DateTime TimeValue) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Minute (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Minute(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Minute : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Minute TimeValue" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">必須です。 分を抽出する <see langword="Date" /> 値。</param>
        <summary>分を表す 0 から 59 の整数値を返します。</summary>
        <returns>分を表す 0 から 59 の整数値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 また、`DatePart` を呼び出し、`Interval` 引数に `DateInterval.Minute` を指定することによって、1時間分を取得することもできます。  
  
   
  
## Examples  
 この例では、`Minute` 関数を使用して、指定された時間から時間の分を取得します。 開発環境では、時刻リテラルは、コードのロケール設定を使用して短い時刻形式で表示されます。  
  
 [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Month(valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Month (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Month(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Month : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Month DateValue" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">必須です。 月を抽出する <see langword="Date" /> 値。</param>
        <summary>月を表す 1 から 12 の整数値を返します。</summary>
        <returns>月を表す 1 から 12 の整数値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 また、`DatePart` を呼び出し、`Interval` 引数に `DateInterval.Month` を指定して、年の月を取得することもできます。  
  
   
  
## Examples  
 この例では、`Month` 関数を使用して、指定した日付から月を取得します。 開発環境では、日付リテラルは、コードのロケール設定を使用して短い日付形式で表示されます。  
  
 [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string MonthName(int32 Month, bool Abbreviate) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MonthName (Month As Integer, Optional Abbreviate As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member MonthName : int * bool -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.MonthName (Month, Abbreviate)" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">必須です。 数値 (1 ～ 13) による月の指定です。1 は 1 月を示し、12 は 12 月を示します。 13 か月カレンダーでは値 13 を使用できます。 システムで 12 か月カレンダーを使用しているとき、<paramref name="Month" /> に 13 を指定すると、<c>MonthName</c> からは空の文字列が返されます。</param>
        <param name="Abbreviate">任意。 月の名前を省略する場合は <see langword="True" />。それ以外の場合は <see langword="False" />。 既定値は、<see langword="False" /> です。</param>
        <summary>指定された月の名前を含む文字列値を返します。</summary>
        <returns>指定された月の名前を含む文字列値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `MonthName` によって返される文字列は、入力引数だけでなく、Windows の**コントロールパネル**で指定されている**地域のオプション**の設定にも依存します。  
  
> [!NOTE]
>  `MonthName` は、<xref:System.Globalization> 名前空間の <xref:System.Globalization.CultureInfo> クラスの <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティの現在のカレンダー設定を使用します。 既定の <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 値は、**コントロールパネル**の設定によって決まります。  
  
   
  
## Examples  
 この例では、`MonthName` 関数を使用して、指定された整数で月の名前を決定します。 ブール値によって、完全な名前 (`False`) と省略名 (`True`) のどちらが表示されるかが決まります。  
  
 [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Month" /> が 1 より小さいか、または 13 を超えています。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ご利用のシステムに従った現在の日付と時刻を含む日付型の値を返します。</summary>
        <value>システムに従った現在の日付と時刻。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 システム日付を設定するには、<xref:Microsoft.VisualBasic.DateAndTime.Today%2A> プロパティを使用します。 システム時刻を設定するには、<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> プロパティを使用します。  
  
   
  
## Examples  
 次の例では、`Now` プロパティを使用して、現在のシステムの日付と時刻を返します。  
  
 [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Second(valuetype System.DateTime TimeValue) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Second (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Second(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Second : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Second TimeValue" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">必須です。 秒を抽出する <see langword="Date" /> 値。</param>
        <summary>秒を表す 0 から 59 の整数値を返します。</summary>
        <returns>秒を表す 0 から 59 の整数値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 また、`DatePart` を呼び出し、`Interval` 引数に `DateInterval.Second` を指定することによって、2番目の分を取得することもできます。  
  
   
  
## Examples  
 次の例では、`Second` 関数を使用して、指定した時刻から分の2番目のを取得します。 開発環境では、時刻リテラルは、コードのロケール設定を使用して短い時刻形式で表示されます。  
  
 [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeOfDay As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime TimeOfDay { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>システムに従った現在の時刻を含む日付型 (<see langword="Date" />) の値を取得または設定します。</summary>
        <value>システムに従った現在の時刻を含む日付型 (<see langword="Date" />) の値を取得または設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` データ型には、日付コンポーネントが含まれています。 システム時刻を返す場合、`TimeOfDay` はこれらすべてを1に設定します。したがって、戻り値は1年の最初の日を表します。 システム時刻を設定すると、`TimeOfDay` は日付のコンポーネントを無視します。  
  
 現在のシステム時刻に `String`としてアクセスするには、<xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> プロパティを使用します。  
  
 現在のシステム日付を取得または設定するには、<xref:Microsoft.VisualBasic.DateAndTime.Today%2A> プロパティを使用します。  
  
> [!IMPORTANT]
>  システムの日付または時刻を設定するには、アンマネージコードのアクセス許可が必要です。これは、部分信頼状況での実行に影響を与える可能性があります。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。  
  
   
  
## Examples  
 この例では、`TimeOfDay` プロパティを使用して、現在のシステム時刻を返します。  
  
 [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timer As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property double Timer { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Timer : double" Usage="Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>午前 0 時から経過した秒数を表す倍精度浮動小数点数型 (<see cref="T:System.Double" />) の値を返します。</summary>
        <value>午前0時から経過した秒数を表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Timer` プロパティは、秒と、最新の深夜0時からのミリ秒の両方を返します。 秒は戻り値の整数部分にあり、ミリ秒は小数部に含まれます。  
  
   
  
## Examples  
 この例では、`Timer` プロパティを使用して、アプリケーションを一時停止します。 一時停止中に他の処理を実行できます。  
  
 [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 `Timer` プロパティを <xref:Microsoft.VisualBasic?displayProperty=nameWithType> 名前空間で修飾する必要があることに注意してください。 `Timer` は、<xref:System.Threading?displayProperty=nameWithType>、<xref:System.Timers?displayProperty=nameWithType>、および <xref:System.Windows.Forms?displayProperty=nameWithType> 名前空間の定義済みのクラスでもあるためです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeSerial (Hour As Integer, Minute As Integer, Second As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeSerial(int Hour, int Minute, int Second);" />
      <MemberSignature Language="F#" Value="static member TimeSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeSerial (Hour, Minute, Second)" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">必須です。 0 から 23 の整数式。 ただし、この範囲外の値も受け入れられます。</param>
        <param name="Minute">必須です。 0 から 59 の整数式。 ただし、この範囲外の値も受け入れられます。 計算される時には <paramref name="Minute" />  の値が加算されるため、負の値を指定するとその時からさかのぼる分数が指定されます。</param>
        <param name="Second">必須です。 0 から 59 の整数式。 ただし、この範囲外の値も受け入れられます。 算出される分には <paramref name="Second" />  の値が加算されるため、負の値を指定するとその分からさかのぼる秒数が指定されます。</param>
        <summary>1 年 1 月 1 日を基準に設定された日付情報を使用して、指定された時、分、秒を表す <see langword="Date" /> 値を返します。</summary>
        <returns>1 年 1 月 1 日を基準に設定された日付情報を使用して、指定された時、分、秒を表す <see langword="Date" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の例では、負の値、ゼロ、および正の引数の値を示します。 `TimeSerial` 関数は、正午から3時間前、または 8:45:00 AM の15分前の時間を返します。  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 `Minute` または `Second` のいずれかが通常の範囲を超えている場合は、必要に応じて次の大きな単位に適用されます。 たとえば、75分を指定した場合、1時間15分として評価されます。  
  
 `TimeSerial` を使用すると、1日の秒数を秒単位で示す合計86400秒数を減らすことができます。 したがって、返される時刻は常に 00:00:00 ~ 23:59:59 です。  
  
 `Date` データ型には、日付コンポーネントが含まれています。 `TimeSerial` は、これらのすべてを1に設定するため、返される値は1年の最初の日を表します。 ただし、引数の値によって計算された時間が24時間を超えた場合、その日は必要に応じてインクリメントされます。 次の例では、`Hour` と `Minute` の値によって、合計24時間を超える時間が計算されます。  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 引数の値が負の計算時間になると、日付情報は1/1/0001 に設定され、時刻情報は00:00:00 と23:59:59 の間に調整されます。 ただし、計算された時間が負の24時間未満の場合は、<xref:System.ArgumentOutOfRangeException> エラーが発生します。  
  
 すべての `Date` 値は <xref:System.DateTime?displayProperty=nameWithType> 構造体によってサポートされているため、`Date` 値をアセンブルするときに、そのメソッドによって追加のオプションが提供されます。 たとえば、オーバーロードされた <xref:System.DateTime.%23ctor%2A> コンストラクターのいずれかを使用して、必要なコンポーネントの組み合わせを使用して `Date` 変数を設定できます。 次の例では、`newDateTime` を午前5時8:30 の1秒の午前1時に1978に設定します。  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 次の例では、`TimeSerial` 関数を使用して、指定した時間、分、秒の時間を返します。  
  
 [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">引数が -2,147,483,648 ～ 2,147,483,647 の範囲外です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">計算された時刻が負の 24 時間より小さくなっています。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TimeString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>システムの現在の時刻を表す文字列値を返すか設定します。</summary>
        <value>システムの現在の時刻を表す文字列値を返すか設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TimeString` は常に、システム時刻を24時間形式の "HH: mm: ss" として返します。 この形式はカルチャに依存しないため、**コントロールパネル**の **[地域のオプション]** を変更しても変更されません。  
  
 現在のシステム日付を `String`として取得または設定するには、<xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> プロパティを使用します。  
  
 現在のシステム日付または時刻をロケールの形式またはカスタム形式で取得するには、<xref:Microsoft.VisualBasic.DateAndTime.Now%2A> プロパティを <xref:Microsoft.VisualBasic.Strings.Format%2A> 関数に指定し、定義済みまたはユーザー定義の日付/時刻形式を指定します。 次に例を示します。  
  
```vb  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 現在のシステム時刻に `Date`としてアクセスするには、<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> プロパティを使用します。  
  
> [!IMPORTANT]
>  システムの日付または時刻を設定するには、アンマネージコードのアクセス許可が必要です。これは、部分信頼状況での実行に影響を与える可能性があります。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。  
  
   
  
## Examples  
 この例では、`TimeString` プロパティを使用して、現在のシステム時刻を表示します。  
  
 [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><see langword="TimeString" /> の値を設定するのに使用する無効な形式。</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime TimeValue(string StringTime) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeValue (StringTime As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeValue(System::String ^ StringTime);" />
      <MemberSignature Language="F#" Value="static member TimeValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeValue StringTime" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">必須です。 1 年 1 月 1 日の 00:00:00 から、9999 年 12 月 31 日の 23:59:59 までの日付/時刻値を表す文字列式。</param>
        <summary>文字列で表した時刻情報を含む <see langword="Date" /> 値を返します。日付情報は 1 年 1 月 1 日に設定されます。</summary>
        <returns>文字列で表した時刻情報を含む <see langword="Date" /> 値であり、日付情報は 1 年 1 月 1 日に設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有効な時刻を入力するには、12時間または24時間制を使用します。 たとえば、`"2:24 P.M."` と `"14:24"` は両方とも有効な `StringTime` 引数です。  
  
 `StringTime` 引数に日付情報が含まれている場合、`TimeValue` は戻り値には含まれません。 ただし、`StringTime` に無効な日付情報が含まれている場合 (たとえば、32年1月の場合)、<xref:System.InvalidCastException> エラーが発生します。  
  
   
  
## Examples  
 次の例では、`TimeValue` 関数を使用して、文字列を時刻に変換します。 また、日付リテラルを使用して、時刻を `Date` 変数に直接割り当てることもできます。  
  
 [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringTime" /> に無効な日付情報が含まれています。</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>システムに従った現在の日付を含む日付型 (<see langword="Date" />) の値を取得または設定します。</summary>
        <value>システムに従った現在の日付を含む日付型 (<see langword="Date" />) の値を取得または設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` データ型には、時刻コンポーネントが含まれています。 システム日付を返す場合、`Today` はこれらのすべてを0に設定します。したがって、戻り値は午前0時 (00:00:00) を表します。 システム日付を設定した場合、`Today` は時刻のコンポーネントを無視します。  
  
 現在のシステム日付に `String`としてアクセスするには、<xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> プロパティを使用します。  
  
 現在のシステム時刻を取得または設定するには、<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> プロパティを使用します。  
  
> [!IMPORTANT]
>  システムの日付または時刻を設定するには、アンマネージコードのアクセス許可が必要です。これは、部分信頼状況での実行に影響を与える可能性があります。 詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。  
  
   
  
## Examples  
 この例では、`Today` プロパティを使用して、現在のシステム日付を返します。  
  
 [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (DateValue As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday) As Integer" />
      <MemberSignature Language="F#" Value="static member Weekday : DateTime * Microsoft.VisualBasic.FirstDayOfWeek -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Weekday (DateValue, DayOfWeek)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">必須です。 曜日を調べる <see langword="Date" /> 値。</param>
        <param name="DayOfWeek">任意。 週の最初の曜日を指定する <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 列挙体から選択する値。 指定しない場合は、<see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> が使用されます。</param>
        <summary>曜日を表す数値を含む整数値を返します。</summary>
        <returns>曜日を表す数値を含む整数値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Weekday` 関数によって返される値は、`FirstDayOfWeek` 列挙型の値に対応します。つまり、1は日曜日を表し、7は土曜日を示します。  
  
> [!NOTE]
>  `Weekday` は、<xref:System.Globalization> 名前空間の <xref:System.Globalization.CultureInfo> クラスの <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティの現在のカレンダー設定を使用します。 既定の <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 値は、**コントロールパネル**の設定によって決まります。  
  
 `DayOfWeek` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|[値]|説明|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|システム設定で指定された週の最初の曜日|  
|`FirstDayOfWeek.Sunday`|1|日曜日 (既定値)|  
|`FirstDayOfWeek.Monday`|2|月曜日 (ISO standard 8601、セクション3.17 に準拠)|  
|`FirstDayOfWeek.Tuesday`|3|火曜日|  
|`FirstDayOfWeek.Wednesday`|4|水曜日|  
|`FirstDayOfWeek.Thursday`|5|木曜日|  
|`FirstDayOfWeek.Friday`|6|金曜日|  
|`FirstDayOfWeek.Saturday`|7|土曜日|  
  
   
  
## Examples  
 次の例では、`Weekday` 関数を使用して、指定した日付から曜日を取得します。  
  
 [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="DayOfWeek" /> が 0 より小さいか、または 7 を超えています。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekdayName (Weekday As Integer, Optional Abbreviate As Boolean = false, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.System) As String" />
      <MemberSignature Language="F#" Value="static member WeekdayName : int * bool * Microsoft.VisualBasic.FirstDayOfWeek -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.WeekdayName (Weekday, Abbreviate, FirstDayOfWeekValue)" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">必須です。 Integer。 曜日を指定する 1 ～ 7 の数値。1 は週の最初の曜日を表し、7 は週の最後の曜日を表します。 最初と最後の曜日は、<paramref name="FirstDayOfWeekValue" /> の設定により決まります。</param>
        <param name="Abbreviate">任意。 曜日の名前を省略するかどうかを示す <see langword="Boolean" /> 値。 省略した場合、既定値の <see langword="False" /> が使用され、曜日の名前は省略されません。</param>
        <param name="FirstDayOfWeekValue">任意。 週の最初の曜日を指定する <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> 列挙体から選択する値。 指定しない場合は、<see langword="FirstDayOfWeek.System" /> が使用されます。</param>
        <summary>指定された曜日の名前を含んでいる文字列値を返します。</summary>
        <returns>指定された曜日の名前を含んでいる文字列値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WeekdayName` によって返される文字列は、入力引数だけでなく、Windows の**コントロールパネル**で指定されている**地域のオプション**の設定にも依存します。  
  
> [!NOTE]
>  `WeekdayName` は、<xref:System.Globalization> 名前空間の <xref:System.Globalization.CultureInfo> クラスの <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティの現在のカレンダー設定を使用します。 既定の <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 値は、**コントロールパネル**の設定によって決まります。  
  
 `FirstDayOfWeekValue` 引数には、次のいずれかの設定を指定できます。  
  
|列挙値|[値]|説明|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|システム設定で指定された週の最初の曜日 (既定)|  
|`FirstDayOfWeek.Sunday`|1|日曜日|  
|`FirstDayOfWeek.Monday`|2|月曜日 (ISO standard 8601、セクション3.17 に準拠)|  
|`FirstDayOfWeek.Tuesday`|3|火曜日|  
|`FirstDayOfWeek.Wednesday`|4|水曜日|  
|`FirstDayOfWeek.Thursday`|5|木曜日|  
|`FirstDayOfWeek.Friday`|6|金曜日|  
|`FirstDayOfWeek.Saturday`|7|土曜日|  
  
   
  
## Examples  
 次の例では、`Weekday` 関数を使用して、指定した日付から曜日を取得した後、`WeekDayName` 関数を使用してその数字から曜日の名前を取得します。  
  
 [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Weekday" /> が 1 より小さいか 7 を超えています。または <paramref name="FirstDayOfWeekValue" /> が 0 より小さいか 7 を超えています。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Year(valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Year (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Year(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Year : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Year DateValue" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">必須です。 年を抽出する <see langword="Date" /> 値。</param>
        <summary>年を表す 1 から 9999 の整数値を返します。</summary>
        <returns>年を表す 1 から 9999 の整数値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 また、`DatePart` を呼び出し、`Interval` 引数に `DateInterval.Year` を指定して、年を取得することもできます。  
  
   
  
## Examples  
 次の例では、`Year` 関数を使用して、指定された日付から年を取得します。 開発環境では、日付リテラルは、コードのロケール設定を使用して短い日付形式で表示されます。  
  
 [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
  </Members>
</Type>
