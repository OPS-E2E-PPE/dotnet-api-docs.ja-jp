<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="832d83873c6cbf36518e1732725165db13f148da" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75156217" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="31e13-101"><see langword="Conversion" /> モジュールに含まれるプロシージャを使って、さまざまな変換演算を実行します。</span><span class="sxs-lookup"><span data-stu-id="31e13-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-102">このモジュールは Visual Basic 言語キーワードとランタイムライブラリメンバーをサポートしています。このメンバーは、10進数を他の基数、数値から文字列、数値に変換し、1つのデータ型を別の型に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-103">この例では、`Hex` 関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-104">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="31e13-105">キーワード (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="31e13-106">ランタイムライブラリのメンバーの Visual Basic</span><span class="sxs-lookup"><span data-stu-id="31e13-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="31e13-107">変換するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31e13-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="31e13-108">変換後のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="31e13-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="31e13-109">オブジェクトを指定された型に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="31e13-110">実行時の種類が要求されたターゲットの種類であるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31e13-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-111">`CTypeDynamic` メソッドは、`Expression` パラメーターとして渡されたオブジェクトを、`TargetType` パラメーターによって指定された型に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="31e13-112">オブジェクトが動的オブジェクトの場合は、`CTypeDynamic` メソッドによって、使用可能な動的変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="31e13-113">`CTypeDynamic` メソッドは、オブジェクト自体によって定義された変換セマンティクスに従って動的変換を適用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="31e13-114">動的オブジェクトが <xref:System.Dynamic.DynamicObject>から継承する場合、`CTypeDynamic` メソッドはまず、ユーザー定義の静的な変換を使用して変換を実行しようとします。</span><span class="sxs-lookup"><span data-stu-id="31e13-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="31e13-115">ユーザー定義の静的変換が失敗した場合、`CTypeDynamic` メソッドは、動的変換を使用して変換を実行しようとします。</span><span class="sxs-lookup"><span data-stu-id="31e13-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="31e13-116">動的オブジェクトが <xref:System.Dynamic.IDynamicMetaObjectProvider>を実装している場合、`CTypeDynamic` メソッドは、ユーザー定義の静的変換を使用した動的変換に優先します。</span><span class="sxs-lookup"><span data-stu-id="31e13-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-117">次の例では、`CTypeDynamic` メソッドを使用して、動的オブジェクトによって定義された変換を使用して、動的オブジェクトを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="31e13-118">動的オブジェクトの使用 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="31e13-119">チュートリアル: 動的オブジェクトの作成と使用 (C# および Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="31e13-120">変換後のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="31e13-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="31e13-121">変換するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31e13-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="31e13-122">指定したジェネリック型にオブジェクトを変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="31e13-123">要求されたジェネリック型として静的に型指定されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31e13-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-124">`CTypeDynamic` メソッドは、`Expression` パラメーターとして渡されたオブジェクトを、ジェネリックパラメーターの型によって指定された型に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="31e13-125">オブジェクトが動的オブジェクトの場合は、`CTypeDynamic` メソッドによって、使用可能な動的変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="31e13-126">`CTypeDynamic` メソッドは、オブジェクト自体によって定義された変換セマンティクスに従って動的変換を適用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="31e13-127">動的オブジェクトが <xref:System.Dynamic.DynamicObject>から継承する場合、`CTypeDynamic` メソッドはまず、ユーザー定義の静的な変換を使用して変換を実行しようとします。</span><span class="sxs-lookup"><span data-stu-id="31e13-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="31e13-128">ユーザー定義の静的変換が失敗した場合、`CTypeDynamic` メソッドは、動的変換を使用して変換を実行しようとします。</span><span class="sxs-lookup"><span data-stu-id="31e13-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="31e13-129">動的オブジェクトが <xref:System.Dynamic.IDynamicMetaObjectProvider>を実装している場合、`CTypeDynamic` メソッドは、ユーザー定義の静的変換を使用した動的変換に優先します。</span><span class="sxs-lookup"><span data-stu-id="31e13-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-130">次の例では、`CTypeDynamic` メソッドを使用して、動的オブジェクトによって定義された変換を使用して、動的オブジェクトを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="31e13-131">動的オブジェクトの使用 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="31e13-132">チュートリアル: 動的オブジェクトの作成と使用 (C# および Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31e13-133">特定のエラー番号に対応するエラー メッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ErrorToString() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31e13-134">特定のエラー番号に対応するエラー メッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="31e13-135">直前の実行時エラーに対応するエラー メッセージ。</span><span class="sxs-lookup"><span data-stu-id="31e13-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-136">`ErrorToString` 関数は、`Err` オブジェクトのプロパティ設定を調べて、最新の実行時エラーを識別します。</span><span class="sxs-lookup"><span data-stu-id="31e13-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="31e13-137">`ErrorToString` 関数の戻り値は、`Err` オブジェクトの `Description` プロパティに対応します。</span><span class="sxs-lookup"><span data-stu-id="31e13-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="31e13-138">実行時エラーが発生しなかった場合、`ErrorToString` は長さ0の文字列 ("") を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="31e13-139">Visual Basic バージョン6.0 以前では、この機能は `Error` 関数によって提供されていました。</span><span class="sxs-lookup"><span data-stu-id="31e13-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-140">次のコードでは、`ErrorToString` 関数を使用して、指定されたエラー番号に対応するエラーメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-141"><paramref name="ErrorNumber" /> が範囲外です。</span><span class="sxs-lookup"><span data-stu-id="31e13-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ErrorToString(int32 ErrorNumber) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="31e13-142">省略可。</span><span class="sxs-lookup"><span data-stu-id="31e13-142">Optional.</span></span> <span data-ttu-id="31e13-143">有効なエラー番号。</span><span class="sxs-lookup"><span data-stu-id="31e13-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="31e13-144">特定のエラー番号に対応するエラー メッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="31e13-145">特定のエラー番号に対応するエラー メッセージ。</span><span class="sxs-lookup"><span data-stu-id="31e13-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-146">`ErrorToString` 関数は、`Err` オブジェクトのプロパティ設定を調べて、最新の実行時エラーを識別します。</span><span class="sxs-lookup"><span data-stu-id="31e13-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="31e13-147">`ErrorToString` 関数の戻り値は、`Err` オブジェクトの `Description` プロパティに対応します。</span><span class="sxs-lookup"><span data-stu-id="31e13-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="31e13-148">`ErrorNumber` が有効なエラー番号ですが、定義されていない場合、`ErrorToString` は `"Application-defined or object-defined error."` 文字列を返します。 `ErrorNumber` が有効でない場合は、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="31e13-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="31e13-149">`ErrorNumber` を省略すると、最新の実行時エラーに対応するメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="31e13-150">実行時エラーが発生しなかった場合、または `ErrorNumber` が0の場合、`ErrorToString` は長さ0の文字列 ("") を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="31e13-151">Visual Basic バージョン6.0 以前では、この機能は `Error` 関数によって提供されていました。</span><span class="sxs-lookup"><span data-stu-id="31e13-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-152">次のコードでは、`ErrorToString` 関数を使用して、指定されたエラー番号に対応するエラーメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-153"><paramref name="ErrorNumber" /> が範囲外です。</span><span class="sxs-lookup"><span data-stu-id="31e13-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31e13-154">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-155">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-155">Required.</span></span> <span data-ttu-id="31e13-156"><see langword="Decimal" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-157">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-158">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-159">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-160">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-161">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-162">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="31e13-163">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-164">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-165">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-166">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-167">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-168">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-169">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-170">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-171">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-172">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-173">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-174">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-175">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-176">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-177">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-178">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Fix(float64 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-179">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-179">Required.</span></span> <span data-ttu-id="31e13-180"><see langword="Double" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-181">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-182">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-183">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-184">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-185">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-186">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="31e13-187">Visual Basic 15.8 以降では、`Fix` メソッドによって返された値を任意の[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)に渡す場合、または `Fix` によって返される `Double` 値が、 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)が `Off`に設定された整数に暗黙的に変換される場合、`Double`から整数への変換のパフォーマンスが最適化されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="31e13-188">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="31e13-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="31e13-189">次の例は、このように最適化された変換を示しています。</span><span class="sxs-lookup"><span data-stu-id="31e13-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="31e13-190">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-191">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-192">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-193">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-194">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-195">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-196">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-197">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-198">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-199">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-200">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-201">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-202">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-203">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-204">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-205">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Fix(int16 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-206">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-206">Required.</span></span> <span data-ttu-id="31e13-207"><see langword="Short" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-208">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-209">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-210">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-211">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-212">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-213">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-214">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-215">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-216">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-217">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-218">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-219">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-220">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-221">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-222">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-223">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-224">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-225">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-226">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-227">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-228">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-229">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Fix(int32 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-230">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-230">Required.</span></span> <span data-ttu-id="31e13-231"><see langword="Integer" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-232">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-233">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-234">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-235">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-236">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-237">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-238">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-239">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-240">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-241">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-242">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-243">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-244">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-245">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-246">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-247">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-248">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-249">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-250">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-251">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-252">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-253">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Fix(int64 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-254">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-254">Required.</span></span> <span data-ttu-id="31e13-255"><see langword="Long" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-256">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-257">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-258">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-259">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-260">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-261">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-262">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-263">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-264">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-265">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-266">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-267">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-268">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-269">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-270">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-271">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-272">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-273">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-274">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-275">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-276">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-277">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Fix(object Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-278">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-278">Required.</span></span> <span data-ttu-id="31e13-279"><see langword="Object" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="31e13-280"><paramref name="Number" /> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="31e13-281">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-282">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-283">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-284">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-285">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-286">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="31e13-287">Visual Basic 15.8 以降では、`Number` 引数が、ランタイム型が `Double` または `Single`のオブジェクトである場合、`Fix` メソッドから返された値を任意の[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)に渡すと、浮動小数点から整数への変換のパフォーマンスが最適化されます。また、`Fix` によって返される値が[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)が Off に設定されている整数に自動的に</span><span class="sxs-lookup"><span data-stu-id="31e13-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="31e13-288">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="31e13-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="31e13-289">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="31e13-290">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-291">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-292">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-293">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-294">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-295">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-296">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-297">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-298">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-299">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-300">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-301">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-302">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-303">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-304">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-305">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Fix(float32 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-306">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-306">Required.</span></span> <span data-ttu-id="31e13-307"><see langword="Single" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-308">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-309">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-310">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-311">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-312">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-313">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="31e13-314">Visual Basic 15.8 以降では、`Fix` メソッドによって返された値を任意の[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)に渡す場合、または `Fix` によって返される `Single` 値が[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)が Off に設定されている整数に自動的に変換される場合、`Single`から整数への変換のパフォーマンスが最適化されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="31e13-315">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="31e13-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="31e13-316">次の例は、このように最適化された変換を示しています。</span><span class="sxs-lookup"><span data-stu-id="31e13-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="31e13-317">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-318">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-319">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-320">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-321">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-322">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-323">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-324">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-325">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-326">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-327">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-328">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-329">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-330">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-331">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-332">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31e13-333">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int8 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-334">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-334">Required.</span></span> <span data-ttu-id="31e13-335">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-336">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-337">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-338">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-339">`Number` の場合</span><span class="sxs-lookup"><span data-stu-id="31e13-339">If `Number` is</span></span>|<span data-ttu-id="31e13-340">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-341">空</span><span class="sxs-lookup"><span data-stu-id="31e13-341">Empty</span></span>|<span data-ttu-id="31e13-342">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-342">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-343">任意の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-343">Any numeric value</span></span>|<span data-ttu-id="31e13-344">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="31e13-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="31e13-345">`&H`を使用して、適切な範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="31e13-346">たとえば、`&H10` は16進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="31e13-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-347">この例では、`Hex` 関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-348"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-349"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-350">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="31e13-351">方法 : 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="31e13-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int16 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-352">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-352">Required.</span></span> <span data-ttu-id="31e13-353">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-354">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-355">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-356">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-357">`Number` の場合</span><span class="sxs-lookup"><span data-stu-id="31e13-357">If `Number` is</span></span>|<span data-ttu-id="31e13-358">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-359">空</span><span class="sxs-lookup"><span data-stu-id="31e13-359">Empty</span></span>|<span data-ttu-id="31e13-360">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-360">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-361">任意の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-361">Any numeric value</span></span>|<span data-ttu-id="31e13-362">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="31e13-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="31e13-363">`&H`を使用して、適切な範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="31e13-364">たとえば、`&H10` は16進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="31e13-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-365">この例では、`Hex` 関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-366"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-367"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-368">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="31e13-369">方法 : 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="31e13-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int32 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-370">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-370">Required.</span></span> <span data-ttu-id="31e13-371">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-372">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-373">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-374">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-375">`Number` の場合</span><span class="sxs-lookup"><span data-stu-id="31e13-375">If `Number` is</span></span>|<span data-ttu-id="31e13-376">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-377">空</span><span class="sxs-lookup"><span data-stu-id="31e13-377">Empty</span></span>|<span data-ttu-id="31e13-378">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-378">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-379">任意の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-379">Any numeric value</span></span>|<span data-ttu-id="31e13-380">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="31e13-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="31e13-381">`&H`を使用して、適切な範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="31e13-382">たとえば、`&H10` は16進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="31e13-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-383">この例では、`Hex` 関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-384"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-385"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-386">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="31e13-387">方法 : 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="31e13-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int64 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-388">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-388">Required.</span></span> <span data-ttu-id="31e13-389">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-390">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-391">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-392">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-393">`Number` の場合</span><span class="sxs-lookup"><span data-stu-id="31e13-393">If `Number` is</span></span>|<span data-ttu-id="31e13-394">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-395">空</span><span class="sxs-lookup"><span data-stu-id="31e13-395">Empty</span></span>|<span data-ttu-id="31e13-396">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-396">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-397">任意の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-397">Any numeric value</span></span>|<span data-ttu-id="31e13-398">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="31e13-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="31e13-399">`&H`を使用して、適切な範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="31e13-400">たとえば、`&H10` は16進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="31e13-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-401">この例では、`Hex` 関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-402"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-403"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-404">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="31e13-405">方法 : 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="31e13-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(object Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-406">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-406">Required.</span></span> <span data-ttu-id="31e13-407">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-408">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-409">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-410">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-411">`Number` の場合</span><span class="sxs-lookup"><span data-stu-id="31e13-411">If `Number` is</span></span>|<span data-ttu-id="31e13-412">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-413">空</span><span class="sxs-lookup"><span data-stu-id="31e13-413">Empty</span></span>|<span data-ttu-id="31e13-414">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-414">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-415">任意の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-415">Any numeric value</span></span>|<span data-ttu-id="31e13-416">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="31e13-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="31e13-417">`&H`を使用して、適切な範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="31e13-418">たとえば、`&H10` は16進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="31e13-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-419">この例では、`Hex` 関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-420"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-421"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-422">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="31e13-423">方法 : 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="31e13-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int8 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-424">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-424">Required.</span></span> <span data-ttu-id="31e13-425">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-426">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-427">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-428">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-429">`Number` の場合</span><span class="sxs-lookup"><span data-stu-id="31e13-429">If `Number` is</span></span>|<span data-ttu-id="31e13-430">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-431">空</span><span class="sxs-lookup"><span data-stu-id="31e13-431">Empty</span></span>|<span data-ttu-id="31e13-432">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-432">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-433">任意の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-433">Any numeric value</span></span>|<span data-ttu-id="31e13-434">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="31e13-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="31e13-435">`&H`を使用して、適切な範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="31e13-436">たとえば、`&H10` は16進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="31e13-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-437">この例では、`Hex` 関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-438"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-439"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-440">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="31e13-441">方法 : 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="31e13-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int16 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-442">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-442">Required.</span></span> <span data-ttu-id="31e13-443">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-444">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-445">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-446">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-447">`Number` の場合</span><span class="sxs-lookup"><span data-stu-id="31e13-447">If `Number` is</span></span>|<span data-ttu-id="31e13-448">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-449">空</span><span class="sxs-lookup"><span data-stu-id="31e13-449">Empty</span></span>|<span data-ttu-id="31e13-450">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-450">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-451">任意の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-451">Any numeric value</span></span>|<span data-ttu-id="31e13-452">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="31e13-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="31e13-453">`&H`を使用して、適切な範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="31e13-454">たとえば、`&H10` は16進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="31e13-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-455">この例では、`Hex` 関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-456"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-457"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-458">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="31e13-459">方法 : 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="31e13-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int32 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-460">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-460">Required.</span></span> <span data-ttu-id="31e13-461">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-462">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-463">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-464">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-465">`Number` の場合</span><span class="sxs-lookup"><span data-stu-id="31e13-465">If `Number` is</span></span>|<span data-ttu-id="31e13-466">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-467">空</span><span class="sxs-lookup"><span data-stu-id="31e13-467">Empty</span></span>|<span data-ttu-id="31e13-468">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-468">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-469">任意の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-469">Any numeric value</span></span>|<span data-ttu-id="31e13-470">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="31e13-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="31e13-471">`&H`を使用して、適切な範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="31e13-472">たとえば、`&H10` は16進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="31e13-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-473">この例では、`Hex` 関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-474"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-475"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-476">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="31e13-477">方法 : 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="31e13-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int64 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-478">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-478">Required.</span></span> <span data-ttu-id="31e13-479">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-480">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-481">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-482">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-483">`Number` の場合</span><span class="sxs-lookup"><span data-stu-id="31e13-483">If `Number` is</span></span>|<span data-ttu-id="31e13-484">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-485">空</span><span class="sxs-lookup"><span data-stu-id="31e13-485">Empty</span></span>|<span data-ttu-id="31e13-486">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-486">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-487">任意の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-487">Any numeric value</span></span>|<span data-ttu-id="31e13-488">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="31e13-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="31e13-489">`&H`を使用して、適切な範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="31e13-490">たとえば、`&H10` は16進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="31e13-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-491">この例では、`Hex` 関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-492"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-493"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-494">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="31e13-495">方法 : 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="31e13-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31e13-496">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-497">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-497">Required.</span></span> <span data-ttu-id="31e13-498"><see langword="Decimal" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-499">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-500">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-501">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-502">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-503">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-504">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="31e13-505">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-506">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-507">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-508">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-509">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-510">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-511">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-512">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-513">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-514">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-515">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-516">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-517">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-518">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-519">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-520">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Int(float64 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-521">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-521">Required.</span></span> <span data-ttu-id="31e13-522"><see langword="Double" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-523">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-524">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-525">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-526">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-527">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-528">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="31e13-529">Visual Basic 15.8 以降では、`Int` メソッドから返された値を任意の[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)に渡す場合、または `Int` によって返される double 値が[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)が Off に設定されている整数に自動的に変換される場合は、倍精度整数変換のパフォーマンスが最適化されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="31e13-530">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="31e13-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="31e13-531">次の例は、このように最適化された変換を示しています。</span><span class="sxs-lookup"><span data-stu-id="31e13-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="31e13-532">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-533">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-534">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-535">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-536">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-537">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-538">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-539">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-540">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-541">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-542">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-543">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-544">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-545">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-546">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-547">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Int(int16 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-548">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-548">Required.</span></span> <span data-ttu-id="31e13-549"><see langword="Short" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-550">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-551">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-552">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-553">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-554">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-555">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-556">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-557">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-558">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-559">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-560">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-561">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-562">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-563">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-564">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-565">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-566">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-567">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-568">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-569">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-570">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-571">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Int(int32 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-572">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-572">Required.</span></span> <span data-ttu-id="31e13-573"><see langword="Integer" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-574">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-575">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-576">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-577">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-578">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-579">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-580">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-581">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-582">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-583">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-584">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-585">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-586">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-587">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-588">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-589">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-590">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-591">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-592">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-593">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-594">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-595">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Int(int64 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-596">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-596">Required.</span></span> <span data-ttu-id="31e13-597"><see langword="Long" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-598">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-599">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-600">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-601">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-602">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-603">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-604">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-605">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-606">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-607">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-608">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-609">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-610">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-611">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-612">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-613">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-614">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-615">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-616">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-617">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-618">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-619">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Int(object Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-620">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-620">Required.</span></span> <span data-ttu-id="31e13-621"><see langword="Object" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="31e13-622"><paramref name="Number" /> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="31e13-623">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-624">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-625">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-626">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-627">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-628">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="31e13-629">Visual Basic 15.8 以降では、`Number` 引数が、ランタイム型が `Double` または `Single`のオブジェクトである場合、`Int` メソッドから返された値を任意の[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)に渡すと、浮動小数点から整数への変換のパフォーマンスが最適化されます。また、`Int` によって返される値が[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)が Off に設定されている整数に自動的に</span><span class="sxs-lookup"><span data-stu-id="31e13-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="31e13-630">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="31e13-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="31e13-631">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="31e13-632">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-633">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-634">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-635">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-636">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-637">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-638">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-639">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-640">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-641">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-642">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-643">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-644">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-645">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-646">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-647">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Int(float32 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-648">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-648">Required.</span></span> <span data-ttu-id="31e13-649"><see langword="Single" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="31e13-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-650">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-651">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="31e13-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-652">`Int` 関数と `Fix` 関数はどちらも `Number` の小数部を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="31e13-653">`Int` 関数と `Fix` 関数の違いは、`Number` が負の場合、`Int` は `Number`以下の最初の負の整数を返し、`Fix` は `Number`以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="31e13-654">たとえば、`Int` は-8.4 を-9 に変換し、`Fix` は-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="31e13-655">`Fix(number)` は `Sign(number) * Int(Abs(number)).` と同じです。</span><span class="sxs-lookup"><span data-stu-id="31e13-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="31e13-656">Visual Basic 15.8 以降では、`Int` メソッドによって返された値を任意の[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)に渡す場合、または `Int` によって返される `Single` 値が[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)が Off に設定されている整数に自動的に変換される場合、`Single`から整数への変換のパフォーマンスが最適化されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="31e13-657">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="31e13-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="31e13-658">次の例は、このように最適化された変換を示しています。</span><span class="sxs-lookup"><span data-stu-id="31e13-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="31e13-659">この例では、`Int` および `Fix` 関数が数値の整数部分を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="31e13-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="31e13-660">負の数の引数の場合、`Int` 関数は、数値以下の最初の負の整数を返します。`Fix` 関数は、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="31e13-661">次の例では、`Option Strict On`で型 `Double` から型 `Integer` への暗黙的な変換は許可されていないため、`Option Strict Off` を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="31e13-662">`CInt` 関数を使用すると、他のデータ型を明示的に変換して、`Option Strict Off`で `Integer` 型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="31e13-663">ただし、`CInt` は、数値の小数部を切り捨てるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="31e13-664">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="31e13-665">`CInt` 関数を使用すると、`Fix` または `Int` を呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="31e13-666">例 :</span><span class="sxs-lookup"><span data-stu-id="31e13-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="31e13-667">`CInt`の詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31e13-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-668">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-669">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-670">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="31e13-671">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="31e13-672">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="31e13-673">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="31e13-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-674">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31e13-675">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int8 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-676">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-676">Required.</span></span> <span data-ttu-id="31e13-677">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-678">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-679">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-680">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-681">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="31e13-681">If Number is</span></span>|<span data-ttu-id="31e13-682">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-683">空</span><span class="sxs-lookup"><span data-stu-id="31e13-683">Empty</span></span>|<span data-ttu-id="31e13-684">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-684">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-685">その他の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-685">Any other number</span></span>|<span data-ttu-id="31e13-686">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="31e13-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="31e13-687">`&O`を使用すると、適切な範囲内の数値を先行して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="31e13-688">たとえば、`&O10` は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="31e13-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-689">この例では、`Oct` 関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-690"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-691"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-692">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-693">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int16 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-694">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-694">Required.</span></span> <span data-ttu-id="31e13-695">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-696">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-697">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-698">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-699">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="31e13-699">If Number is</span></span>|<span data-ttu-id="31e13-700">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-701">空</span><span class="sxs-lookup"><span data-stu-id="31e13-701">Empty</span></span>|<span data-ttu-id="31e13-702">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-702">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-703">その他の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-703">Any other number</span></span>|<span data-ttu-id="31e13-704">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="31e13-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="31e13-705">`&O`を使用すると、適切な範囲内の数値を先行して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="31e13-706">たとえば、`&O10` は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="31e13-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-707">この例では、`Oct` 関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-708"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-709"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-710">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-711">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int32 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-712">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-712">Required.</span></span> <span data-ttu-id="31e13-713">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-714">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-715">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-716">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-717">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="31e13-717">If Number is</span></span>|<span data-ttu-id="31e13-718">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-719">空</span><span class="sxs-lookup"><span data-stu-id="31e13-719">Empty</span></span>|<span data-ttu-id="31e13-720">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-720">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-721">その他の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-721">Any other number</span></span>|<span data-ttu-id="31e13-722">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="31e13-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="31e13-723">`&O`を使用すると、適切な範囲内の数値を先行して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="31e13-724">たとえば、`&O10` は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="31e13-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-725">この例では、`Oct` 関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-726"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-727"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-728">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-729">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int64 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-730">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-730">Required.</span></span> <span data-ttu-id="31e13-731">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-732">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-733">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-734">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-735">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="31e13-735">If Number is</span></span>|<span data-ttu-id="31e13-736">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-737">空</span><span class="sxs-lookup"><span data-stu-id="31e13-737">Empty</span></span>|<span data-ttu-id="31e13-738">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-738">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-739">その他の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-739">Any other number</span></span>|<span data-ttu-id="31e13-740">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="31e13-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="31e13-741">`&O`を使用すると、適切な範囲内の数値を先行して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="31e13-742">たとえば、`&O10` は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="31e13-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-743">この例では、`Oct` 関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-744"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-745"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-746">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-747">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(object Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-748">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-748">Required.</span></span> <span data-ttu-id="31e13-749">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-750">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-751">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-752">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-753">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="31e13-753">If Number is</span></span>|<span data-ttu-id="31e13-754">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-755">空</span><span class="sxs-lookup"><span data-stu-id="31e13-755">Empty</span></span>|<span data-ttu-id="31e13-756">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-756">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-757">その他の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-757">Any other number</span></span>|<span data-ttu-id="31e13-758">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="31e13-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="31e13-759">`&O`を使用すると、適切な範囲内の数値を先行して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="31e13-760">たとえば、`&O10` は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="31e13-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-761">この例では、`Oct` 関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-762"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-763"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-764">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-765">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int8 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-766">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-766">Required.</span></span> <span data-ttu-id="31e13-767">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-768">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-769">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-770">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-771">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="31e13-771">If Number is</span></span>|<span data-ttu-id="31e13-772">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-773">空</span><span class="sxs-lookup"><span data-stu-id="31e13-773">Empty</span></span>|<span data-ttu-id="31e13-774">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-774">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-775">その他の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-775">Any other number</span></span>|<span data-ttu-id="31e13-776">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="31e13-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="31e13-777">`&O`を使用すると、適切な範囲内の数値を先行して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="31e13-778">たとえば、`&O10` は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="31e13-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-779">この例では、`Oct` 関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-780"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-781"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-782">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-783">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int16 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-784">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-784">Required.</span></span> <span data-ttu-id="31e13-785">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-786">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-787">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-788">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-789">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="31e13-789">If Number is</span></span>|<span data-ttu-id="31e13-790">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-791">空</span><span class="sxs-lookup"><span data-stu-id="31e13-791">Empty</span></span>|<span data-ttu-id="31e13-792">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-792">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-793">その他の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-793">Any other number</span></span>|<span data-ttu-id="31e13-794">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="31e13-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="31e13-795">`&O`を使用すると、適切な範囲内の数値を先行して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="31e13-796">たとえば、`&O10` は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="31e13-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-797">この例では、`Oct` 関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-798"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-799"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-800">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-801">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int32 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-802">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-802">Required.</span></span> <span data-ttu-id="31e13-803">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-804">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-805">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-806">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-807">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="31e13-807">If Number is</span></span>|<span data-ttu-id="31e13-808">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-809">空</span><span class="sxs-lookup"><span data-stu-id="31e13-809">Empty</span></span>|<span data-ttu-id="31e13-810">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-810">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-811">その他の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-811">Any other number</span></span>|<span data-ttu-id="31e13-812">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="31e13-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="31e13-813">`&O`を使用すると、適切な範囲内の数値を先行して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="31e13-814">たとえば、`&O10` は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="31e13-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-815">この例では、`Oct` 関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-816"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-817"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-818">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-819">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int64 Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-820">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-820">Required.</span></span> <span data-ttu-id="31e13-821">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="31e13-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="31e13-822">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-823">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="31e13-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-824">`Number` がまだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="31e13-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="31e13-825">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="31e13-825">If Number is</span></span>|<span data-ttu-id="31e13-826">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="31e13-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="31e13-827">空</span><span class="sxs-lookup"><span data-stu-id="31e13-827">Empty</span></span>|<span data-ttu-id="31e13-828">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="31e13-828">Zero (0)</span></span>|  
|<span data-ttu-id="31e13-829">その他の数値</span><span class="sxs-lookup"><span data-stu-id="31e13-829">Any other number</span></span>|<span data-ttu-id="31e13-830">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="31e13-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="31e13-831">`&O`を使用すると、適切な範囲内の数値を先行して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31e13-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="31e13-832">たとえば、`&O10` は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="31e13-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-833">この例では、`Oct` 関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-834"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-835"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-836">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-837">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Str(object Number) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="31e13-838">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-838">Required.</span></span> <span data-ttu-id="31e13-839">任意の有効な数式を含む <see langword="Object" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="31e13-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="31e13-840">数値を表す <see langword="String" /> 型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="31e13-841">数値の <see langword="String" /> 表現です。</span><span class="sxs-lookup"><span data-stu-id="31e13-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-842">数値を文字列に変換した場合、先頭のスペースは常に `Number`の符号に予約されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="31e13-843">`Number` が正の値の場合、返される文字列には先頭のスペースが含まれ、正符号は暗黙的に指定されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="31e13-844">負の値にはマイナス記号 (-) が含まれ、先頭にスペースは挿入されません。</span><span class="sxs-lookup"><span data-stu-id="31e13-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="31e13-845">`Format` 関数を使用すると、日付、時刻、通貨、または他のユーザー定義形式で書式設定する数値を変換できます。</span><span class="sxs-lookup"><span data-stu-id="31e13-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="31e13-846">`Str` 関数とは異なり、`Format` 関数には `Number`の符号の先頭のスペースは含まれません。</span><span class="sxs-lookup"><span data-stu-id="31e13-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31e13-847">`Str` 関数は、有効な小数点区切り文字としてピリオド (`.`) のみを認識します。</span><span class="sxs-lookup"><span data-stu-id="31e13-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="31e13-848">異なる小数点区切り記号が使用されている場合 (国際対応アプリケーションなど)、`CStr` または `Format` 関数を使用して数値を文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="31e13-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="31e13-849">特定のカルチャの数値の文字列形式を取得するには、数値の `ToString(IFormatProvider)` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="31e13-850">たとえば、`Double` 型の値を文字列に変換する場合は、<xref:System.Double.ToString%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e13-851">この例では、`Str` 関数を使用して、数値の `String` 表現を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="31e13-852">正の数値を文字列に変換した場合、先頭のスペースは常にその符号に予約されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e13-853"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="31e13-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="31e13-854"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="31e13-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="31e13-855">変換の概要</span><span class="sxs-lookup"><span data-stu-id="31e13-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-856">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31e13-857">適切な型の数値として文字列に含まれる数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Val(char Expression) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="31e13-858">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-858">Required.</span></span> <span data-ttu-id="31e13-859">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span><span class="sxs-lookup"><span data-stu-id="31e13-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="31e13-860"><paramref name="Expression" /> が <see langword="Object" /> 型の場合に、その値が <see langword="String" /> に変換できる必要があります。または <see cref="T:System.ArgumentException" /> エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="31e13-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="31e13-861">適切な型の数値として文字列に含まれる数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="31e13-862">適切な型で表された、文字列に含まれる数値。</span><span class="sxs-lookup"><span data-stu-id="31e13-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-863">`Val` 関数は、数値の一部として認識できない最初の文字の文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="31e13-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="31e13-864">多くの場合、ドル記号やコンマなど、数値の一部と見なされる記号と文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="31e13-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="31e13-865">ただし、関数は `&O` (8 進数の場合) と `&H` (16 進数の場合) を認識します。</span><span class="sxs-lookup"><span data-stu-id="31e13-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="31e13-866">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="31e13-867">次の呼び出しでは、値1615198が返されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="31e13-868">次の呼び出しは、10進値-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="31e13-869">`Val` 関数は、有効な小数点区切り文字としてピリオド (`.`) のみを認識します。</span><span class="sxs-lookup"><span data-stu-id="31e13-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="31e13-870">異なる小数点区切り記号を使用する場合は、国際対応アプリケーションの場合と同様に、文字列を数値に変換するために、代わりに `CDbl` または `CInt` を使用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="31e13-871">特定のカルチャに含まれる数値の文字列形式を数値に変換するには、数値型の `Parse(String, IFormatProvider)` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="31e13-872">たとえば、文字列を `Double`に変換する場合は、<xref:System.Double.Parse%2A?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="31e13-873"><xref:System.InvalidCastException> の例外は、一般的ではない数値形式に応答してスローされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="31e13-874">たとえば、次のコードではこの例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="31e13-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="31e13-875">`Double` として書式設定された数値と、文字列に含まれていない場合は、コンパイラによって `Integer` と `Long` 型の文字の間の競合が検出されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="31e13-876">次の例では、`Val` 関数を使用して、各文字列に含まれている数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="31e13-877">`Val` は、数字、数値修飾子、数字の区切り文字、空白文字として解釈できない最初の文字で変換を停止します。</span><span class="sxs-lookup"><span data-stu-id="31e13-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="31e13-878"><paramref name="InputStr" /> が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="31e13-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-879"><paramref name="Expression" /> は <see langword="Object" /> に変換できない <see langword="String" /> 型の式です。</span><span class="sxs-lookup"><span data-stu-id="31e13-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-880">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Val(object Expression) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="31e13-881">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-881">Required.</span></span> <span data-ttu-id="31e13-882">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span><span class="sxs-lookup"><span data-stu-id="31e13-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="31e13-883"><paramref name="Expression" /> が <see langword="Object" /> 型の場合に、その値が <see langword="String" /> に変換できる必要があります。または <see cref="T:System.ArgumentException" /> エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="31e13-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="31e13-884">適切な型の数値として文字列に含まれる数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="31e13-885">適切な型で表された、文字列に含まれる数値。</span><span class="sxs-lookup"><span data-stu-id="31e13-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-886">`Val` 関数は、数値の一部として認識できない最初の文字の文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="31e13-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="31e13-887">多くの場合、ドル記号やコンマなど、数値の一部と見なされる記号と文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="31e13-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="31e13-888">ただし、関数は `&O` (8 進数の場合) と `&H` (16 進数の場合) を認識します。</span><span class="sxs-lookup"><span data-stu-id="31e13-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="31e13-889">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="31e13-890">次の呼び出しでは、値1234123が返されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="31e13-891">次の呼び出しは、10進値-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="31e13-892">`Val` 関数は、有効な小数点区切り文字としてピリオド (`.`) のみを認識します。</span><span class="sxs-lookup"><span data-stu-id="31e13-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="31e13-893">他の小数点区切り記号を使用する場合は、国際対応アプリケーションの場合と同様に、文字列を数値に変換するために、代わりに `CDbl` または `CInt` を使用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="31e13-894">特定のカルチャに含まれる数値の文字列形式を数値に変換するには、数値型の `Parse(String, IFormatProvider)` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="31e13-895">たとえば、文字列を `Double`に変換する場合は、<xref:System.Double.Parse%2A?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31e13-896"><xref:System.InvalidCastException> の例外は、一般的ではない数値形式に応答してスローされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="31e13-897">たとえば、次のコードではこの例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="31e13-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="31e13-898">`Double` として書式設定された数値と、その競合が文字列に含まれていない場合、コンパイラによって `Integer` と `Long` 型の文字の間の競合が検出されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="31e13-899">次の例では、`Val` 関数を使用して、各文字列に含まれている数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="31e13-900">`Val` は、数字、数値修飾子、数字の区切り文字、空白文字として解釈できない最初の文字で変換を停止します。</span><span class="sxs-lookup"><span data-stu-id="31e13-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="31e13-901"><paramref name="InputStr" /> が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="31e13-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-902"><paramref name="Expression" /> は <see langword="Object" /> に変換できない <see langword="String" /> 型の式です。</span><span class="sxs-lookup"><span data-stu-id="31e13-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-903">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Val(string InputStr) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="31e13-904">必須。</span><span class="sxs-lookup"><span data-stu-id="31e13-904">Required.</span></span> <span data-ttu-id="31e13-905">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span><span class="sxs-lookup"><span data-stu-id="31e13-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="31e13-906"><paramref name="Expression" /> が <see langword="Object" /> 型の場合に、その値が <see langword="String" /> に変換できる必要があります。または <see cref="T:System.ArgumentException" /> エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="31e13-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="31e13-907">適切な型の数値として文字列に含まれる数を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="31e13-908">適切な型で表された、文字列に含まれる数値。</span><span class="sxs-lookup"><span data-stu-id="31e13-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e13-909">`Val` 関数は、数値の一部として認識できない最初の文字の文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="31e13-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="31e13-910">多くの場合、ドル記号やコンマなど、数値の一部と見なされる記号と文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="31e13-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="31e13-911">ただし、関数は `&O` (8 進数の場合) と `&H` (16 進数の場合) を認識します。</span><span class="sxs-lookup"><span data-stu-id="31e13-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="31e13-912">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="31e13-913">次の呼び出しでは、値1234123が返されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="31e13-914">次の呼び出しは、10進値-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="31e13-915">`Val` 関数は、有効な小数点区切り文字としてピリオド (`.`) のみを認識します。</span><span class="sxs-lookup"><span data-stu-id="31e13-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="31e13-916">他の小数点区切り記号を使用する場合は、国際対応アプリケーションの場合と同様に、文字列を数値に変換するために、代わりに `CDbl` または `CInt` を使用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="31e13-917">特定のカルチャに含まれる数値の文字列形式を数値に変換するには、数値型の `Parse(String, IFormatProvider)` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="31e13-918">たとえば、文字列を `Double`に変換する場合は、<xref:System.Double.Parse%2A?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="31e13-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31e13-919">特定の一般的ではない数値形式に応答して、<xref:System.InvalidCastException> 例外が発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="31e13-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="31e13-920">たとえば、次のコードではこの例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="31e13-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="31e13-921">`Double` として書式設定された数値と、その競合が文字列に含まれていない場合、コンパイラによって `Integer` と `Long` 型の文字の間の競合が検出されます。</span><span class="sxs-lookup"><span data-stu-id="31e13-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="31e13-922">次の例では、`Val` 関数を使用して、各文字列に含まれている数値を返します。</span><span class="sxs-lookup"><span data-stu-id="31e13-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="31e13-923">`Val` は、数字、数値修飾子、数字の区切り文字、空白文字として解釈できない最初の文字で変換を停止します。</span><span class="sxs-lookup"><span data-stu-id="31e13-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="31e13-924"><paramref name="InputStr" /> が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="31e13-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e13-925"><paramref name="Expression" /> は <see langword="Object" /> に変換できない <see langword="String" /> 型の式です。</span><span class="sxs-lookup"><span data-stu-id="31e13-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="31e13-926">CString</span><span class="sxs-lookup"><span data-stu-id="31e13-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
