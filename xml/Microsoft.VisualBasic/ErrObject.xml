<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7dae5102978916194e205a82c4192c8f1b15c650" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78804503" /></Metadata><TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ErrObject extends System.Object" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see langword="ErrObject" /> モジュールに含まれているプロパティおよびプロシージャを使用して、<see langword="Err" /> オブジェクトによる実行時エラーの識別と処理を実行します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrObject` モジュールは、`Err` オブジェクトをサポートしています。 詳細については、<xref:Microsoft.VisualBasic.Information.Err%2A> を参照してください。  
  
   
  
## Examples  
 この例では、`Err` オブジェクトのプロパティを使用して、エラーメッセージダイアログボックスを構築します。 最初に `Clear` メソッドを使用したときに発生することに注意してください。 `Raise` メソッドで Visual Basic エラーを生成すると、Visual Basic の既定値が `Err` オブジェクトのプロパティになります。  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error ステートメント (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally ステートメント (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">キーワード (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">ランタイムライブラリのメンバーの Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="Err" /> オブジェクトのプロパティ設定をすべてクリアします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `On Error Resume Next`で遅延エラー処理を使用する場合など、エラーが処理された後に `Err` オブジェクトを明示的にクリアするには、`Clear` を使用します。 `Clear` メソッドは、次のいずれかのステートメントが実行されるたびに自動的に呼び出されます。  
  
-   任意の種類の `Resume` ステートメント  
  
-   `Exit Sub`、`Exit Function`、または `Exit Property`  
  
-   任意の `On Error` ステートメント  
  
-   任意の `Try...Catch...Finally` ステートメント  
  
    > [!NOTE]
    >  `On Error Resume Next` コンストラクトは、他のオブジェクトへのアクセス中に発生したエラーを処理する場合に `On Error GoTo` することをお勧めします。 オブジェクトとの各操作の後に `Err` をチェックすると、コードによってアクセスされたオブジェクトがあいまいになります。どのオブジェクトがエラーコードを `Err.Number`に配置したか、および最初にエラーを生成したオブジェクト (`Err.Source`で指定されたオブジェクト) を確認できます。  
  
   
  
## Examples  
 この例では、`Err` オブジェクトの `Clear` メソッドを使用して、`Err` オブジェクトの数値プロパティを0に、その文字列プロパティを長さ0の文字列にリセットします。 `Clear`を呼び出さないと、`MsgBox` への2回目の呼び出しで同じエラーメッセージが表示されます。  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エラーに関連する説明文字列を含む <see langword="String" /> 型の式を返すか、または設定します。 読み取り/書き込み。</summary>
        <value>エラーに関連する説明文字列を含む <see langword="String" /> 型の式を返すか、または設定します。 読み取り/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Description` プロパティの設定は、エラーの簡単な説明で構成されています。 このプロパティを使用して、ユーザーに処理することができない、または処理しないエラーを通知します。 ユーザー定義エラーを生成する場合は、エラーの簡単な説明を `Description` プロパティに割り当てます。 `Description` プロパティが設定されておらず、<xref:Microsoft.VisualBasic.ErrObject.Number%2A> プロパティの値が Visual Basic の実行時エラーに対応する場合は、エラーが生成されたときに、<xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> 関数によって返された文字列が `Description` プロパティに設定されます。  
  
   
  
## Examples  
 この例では、`Err` オブジェクトの `Description` プロパティにユーザー定義メッセージを割り当てます。  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最後に実行されたステートメントの行番号を示す整数を取得します。</summary>
        <value>最後に実行されたステートメントの行番号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic で行番号が検出されなかった場合は、0を返します。  
  
   
  
## Examples  
 この例では、`Erl` プロパティを使用して、行番号を示します。  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception GetException() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>発生したエラーを表す例外を返します。</summary>
        <returns>発生したエラーを表す例外。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetException` 関数は、`Err` object クラスからのみ使用できます。 `Err` オブジェクトの `Exception` プロパティと連携して、発生したエラーを表示します。  
  
   
  
## Examples  
 次のコードは、`Err` オブジェクト内の例外に割り当てられたメッセージを表示します。  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ヘルプ ファイルのトピックのコンテキスト ID を含む <see langword="Integer" /> を返すか、または設定します。 読み取り/書き込み。</summary>
        <value>ヘルプ ファイルのトピックのコンテキスト ID を含む <see langword="Integer" /> を返すか、または設定します。 読み取り/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HelpContext` プロパティは、アプリケーションの状況依存のヘルプを表示するために使用されます。 `HelpFile`でヘルプファイルが指定されている場合は、`HelpContext` プロパティを使用して、識別されたヘルプファイルが自動的に表示されます。 `HelpFile` と `HelpContext` の両方のプロパティが空の場合、<xref:Microsoft.VisualBasic.ErrObject.Number%2A> プロパティの値がチェックされます。 `Number` プロパティの値が Visual Basic の実行時エラー値に対応する場合、エラーの Visual Basic ヘルプコンテキスト ID が使用されます。 `Number` プロパティの値が Visual Basic エラーと対応していない場合は、Visual Basic ヘルプファイルの [コンテンツ] 画面が表示されます。  
  
> [!NOTE]
>  一般的なエラーを処理するには、アプリケーションにルーチンを記述する必要があります。 オブジェクトを使用してプログラミングする場合は、オブジェクトのヘルプファイルを使用してエラー処理の品質を向上させたり、エラーが回復できない場合にユーザーにわかりやすいメッセージを表示したりすることができます。  
  
   
  
## Examples  
 この例では、`Err` オブジェクトの `HelpContext` プロパティを使用して、`Overflow` エラーの Visual Basic ヘルプトピックを表示します。  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ヘルプ ファイルへの絶対パスを含む <see langword="String" /> 型の式を返すか、または設定します。 読み取り/書き込み。</summary>
        <value>ヘルプ ファイルへの絶対パスを含む <see langword="String" /> 型の式を返すか、または設定します。 読み取り/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ヘルプ ファイルを `HelpFile` プロパティで指定すると、エラー メッセージが表示されるダイアログ ボックスの [ヘルプ] をクリックするか、または F1 キーを押したときにヘルプ ファイルが自動的に呼び出されます。 `HelpContext` プロパティに指定したファイルの有効なコンテキスト ID が格納されている場合、そのトピックが自動的に表示されます。 `HelpFile` が指定されていない場合は、Visual Basic ヘルプファイルが表示されます。  
  
> [!NOTE]
>  一般的なエラーを処理するには、アプリケーションにルーチンを記述する必要があります。 オブジェクトを使用してプログラミングする場合は、オブジェクトのヘルプファイルを使用してエラー処理の品質を向上させたり、エラーが回復できない場合にユーザーにわかりやすいメッセージを表示したりすることができます。  
  
   
  
## Examples  
 この例では、`Err` オブジェクトの `HelpFile` プロパティを使用して、ヘルプシステムを起動します。 既定では、`HelpFile` プロパティに Visual Basic ヘルプファイルの名前が含まれています。  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ダイナミック リンク ライブラリ (DLL) の呼び出しによって生成されたシステム エラー コードを取得します。</summary>
        <value>ダイナミックリンクライブラリ (DLL) への呼び出しによって生成されたシステムエラーコード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> プロパティは、Visual Basic コードから行われた DLL 呼び出しにのみ適用されます。 このような呼び出しが行われると、呼び出された関数は、通常は成功または失敗を示すコードを返し、<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> プロパティは塗りつぶされます。 DLL の関数のドキュメントを参照して、成功または失敗を示す戻り値を確認します。 エラーコードが返されるたびに、Visual Basic アプリケーションは <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> プロパティをすぐに確認する必要があります。 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> プロパティが設定されている場合、例外は発生しません。  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> プロパティは <xref:System.Security.Permissions.SecurityAction.LinkDemand>によって保護されているため、信頼されていないコードからのアクセスを防ぐことができます。 ただし、<xref:System.Security.Permissions.SecurityAction.LinkDemand> には、直接の呼び出し元だけが <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> アクセス許可を持つ必要があります。 部分的に信頼されているコードからコードを呼び出すことができる場合、検証せずに <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> の値を公開すると、セキュリティ上のリスクがあります。  
>   
>  <xref:System.Security.Permissions.SecurityAction.LinkDemand> メンバーの使用方法に関する重要な制限事項については、「 [Demand と LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5)」を参照してください。 アクセス許可の詳細については、「<xref:System.Security.Permissions.SecurityPermission>」および「[コードアクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)」を参照してください。  
  
 注: スマートデバイスの場合、このプロパティは常に0を返します。  
  
   
  
## Examples  
 次の例は、Windows API で関数を呼び出した後に `LastDllError` プロパティを使用する方法を示しています。 `PrintWindowCoordinates` プロシージャは、ウィンドウへのハンドルを受け取り、`GetWindowRect` 関数を呼び出します。 `GetWindowRect` は、ウィンドウを構成する四角形の辺の長さで RECT データ構造体を塗りつぶします。 無効なハンドルを渡した場合、エラーが発生し、エラー番号は `LastDllError` プロパティを通じて取得できます。  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エラーを示す数値を返すか、または設定します。 読み取り/書き込み。</summary>
        <value>エラーを示す数値を返すか、または設定します。 読み取り/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Number` を除くすべての `Raise` 引数は省略可能です。 省略可能な引数を省略し、`Err` オブジェクトのプロパティ設定にクリアされていない値が含まれている場合、それらの値はエラーの値として機能します。  
  
 `Err` オブジェクトは、`Error` ステートメントを使用してエラーを生成する場合よりも豊富な情報を提供するため、クラスモジュールの記述時にエラーを生成するには `Raise` が役立ちます。 たとえば、`Raise` メソッドを使用すると、エラーを生成したソースを `Source` プロパティで指定できます。エラーのオンラインヘルプを参照することもできます。  
  
 オブジェクトからユーザー定義エラーを返す場合は、選択した数値をエラーコードとして `VbObjectError` 定数に追加することによって、`Err.Number` を設定します。 たとえば、次のコードを使用して、エラーコードとして数値1051を返します。  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 この例は、エラー処理ルーチンでの `Number` プロパティの一般的な使用方法を示しています。  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 この例では、`Err` オブジェクトの `Raise` メソッドを使用して、Visual Basic で記述された関数内で元のエラーを生成します。 呼び出し元の関数は、エラーをキャッチしてユーザーに報告できます。 プロシージャ `CallingProcedure` では、`Err` オブジェクトから派生できる情報の種類が、`Exception` オブジェクトから派生できる情報と比較されることに注意してください。  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> が 65535 より大きい値です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = default, object Description = default, object HelpFile = default, object HelpContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必須。 エラーの性質を識別する <see langword="Long" /> 型の整数。 Visual Basic エラーの番号は 0 から 65535 の範囲です。0 から 512 はシステム エラー用に予約されています。513 から 65535 はユーザー定義エラーに使用できます。 クラス モジュールの <see langword="Number" /> プロパティに固有のエラー コードを設定する場合は、エラー コード番号を <see langword="vbObjectError" /> 定数に追加する必要があります。 たとえば、エラー番号 513 を生成するには、<c>vbObjectError + 513</c> を <see langword="Number" /> プロパティに割り当てます。</param>
        <param name="Source">省略可。 エラーが生成されたオブジェクトまたはアプリケーションを指定する <see langword="String" /> 型の式。 オブジェクトに対してこのプロパティを設定する場合は、<c>project</c>.<c>class</c> の形式を使用します。 <paramref name="Source" /> が指定されていない場合は、現在の Visual Basic プロジェクトのプロセス ID が使用されます。</param>
        <param name="Description">省略可。 エラーを説明する <see langword="String" /> 型の式。 省略した場合、<see langword="Number" /> プロパティの値が調べられます。 Visual Basic 実行時エラー コードに対応する可能性がある場合、<see langword="Error" /> 関数によって返される文字列は <see langword="Description" /> プロパティとして使用されます。 <see langword="Number" /> プロパティに対応する Visual Basic エラーがなかった場合は、"アプリケーション定義エラーまたはオブジェクト定義エラー" メッセージが使用されます。</param>
        <param name="HelpFile">省略可。 このエラーのヘルプが含まれているヘルプ ファイルへの絶対パス。 省略した場合、Visual Basic は Visual Basic ヘルプ ファイルの完全修飾されたドライブ、パス、およびファイル名を使用します。</param>
        <param name="HelpContext">省略可。 エラーのヘルプを提供する <paramref name="HelpFile" /> 内のトピックを識別するコンテキスト ID。 省略した場合、<see langword="Number" /> プロパティに対応するエラーの Visual Basic ヘルプ ファイルのコンテキスト ID が使用されます (存在する場合)。</param>
        <summary>実行時エラーを生成します。<see langword="Error" /> ステートメントの代わりに使用できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Number` を除くすべての `Raise` 引数は省略可能です。 省略可能な引数を省略し、`Err` オブジェクトのプロパティ設定にクリアされていない値が含まれている場合、それらの値はエラーの値として機能します。  
  
 `Err` オブジェクトは、`Error` ステートメントを使用してエラーを生成する場合よりも豊富な情報を提供するため、クラスモジュールの記述時にエラーを生成するには `Raise` が役立ちます。 たとえば、`Raise` メソッドを使用すると、エラーを生成したソースを `Source` プロパティで指定できます。エラーのオンラインヘルプを参照することもできます。  
  
   
  
## Examples  
 この例では、`Err` オブジェクトの `Raise` メソッドを使用して、Visual Basic で記述された関数内でエラーを生成します。 呼び出し元の関数は、エラーをキャッチし、メッセージボックスを使用してユーザーに報告できます。  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error ステートメント</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最初にエラーを生成したオブジェクトまたはアプリケーションの名前を示す <see langword="String" /> 型の式を返すか、または設定します。 読み取り/書き込み。</summary>
        <value>最初にエラーを生成したオブジェクトまたはアプリケーションの名前を示す <see langword="String" /> 型の式を返すか、または設定します。 読み取り/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source` プロパティは、エラーを生成したオブジェクトを表す `String` 式を指定します。式は、通常、オブジェクトのクラス名またはプロセス ID です。 アクセスしたオブジェクトで生成されたエラーをコードが処理できない場合に情報を提供するには、`Source` プロパティを使用します。 たとえば、Microsoft Excel にアクセスして `Division by zero` エラーが生成された場合、Microsoft Excel はそのエラーのエラーコードに `Err.Number` を設定し、`Source` を "Excel. Application" に設定します。  
  
 アプリケーションがコードからエラーを生成している場合、`Source` はアプリケーションのプログラム ID です。 クラス内の `Source` には、フォーム*プロジェクト*を持つ名前が含まれている必要があります。*クラス*。 コードで予期しないエラーが発生すると、`Source` のプロパティが自動的に入力されます。 モジュールのエラーの場合、`Source` にはプロジェクト名が含まれます。  
  
   
  
## Examples  
 この例では、一般的なエラー処理ルーチンでの `Source` プロパティの使用方法を示します。 `Class1`からエラーが発生した場合、文字列 `"Class1"` は `Err` オブジェクトの `Source` プロパティに割り当てられます。 この文字列は、エラーのソースと番号を示す情報メッセージに表示されます。  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
