<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c63f3de412a748dc2ab519586c79b8d9e855c75" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75156178" /></Metadata><TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Financial" /> モジュールに含まれるプロシージャを使って、財務関連の操作を実行します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このモジュールは、減価償却、現在および将来の値、金利、返品率、支払い率などの財務計算を実行する Visual Basic ランタイムライブラリメンバーをサポートしています。  
  
   
  
## Examples  
 この例では、`Rate` 関数を使用して、ローンの利率を計算します。支払いの合計数 (`TotPmts`)、ローンの支払い (`Payment`) の金額 (`PVal`)、ローンの現在の値または元金 (`FVal`)、支払期間の開始日または終了日 (`PayType`)、および予想される利率 (`Guess`) の概算による支払いが発生したかどうかを示す数値。  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">キーワード (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">ランタイムライブラリのメンバーの Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必須。 資産を購入した時点での価格です。</param>
        <param name="Salvage">必須。 耐用年数が終了した時点での資産の価値です。</param>
        <param name="Life">必須。 資産の耐用年数です。</param>
        <param name="Period">必須。 減価償却費を計算する期です。</param>
        <param name="Factor">省略可。 減価償却率です。 省略した場合は、2 (倍率逓減法) を指定したものと見なされます。</param>
        <summary>倍率逓減法などの指定した方法を使用して算出された、特定の期における資産の減価償却費を示す値を返します。</summary>
        <returns>倍率逓減法などの指定した方法を使用して算出された、特定の期における資産の減価償却費です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 倍額定率法では、加速率で減価償却が計算されます。 減価償却は、最初の期間において最も高く、連続した期間に短縮されます。  
  
 `Life` 引数と `Period` 引数は、同じ単位で表す必要があります。 たとえば、`Life` が月単位で指定されている場合、`Period` も月単位で指定する必要があります。 すべての引数は正の数値である必要があります。  
  
 `DDB` 関数は、次の式を使用して、指定された期間の減価償却を計算します。  
  
 減価償却/期間 = ((Cost-救済) * Factor)/耐用年数  
  
   
  
## Examples  
 この例では、`DDB` 関数を使用して、初期コスト (`InitCost`)、資産の耐用年数 (`SalvageVal`) の最後にある salvage 値、年数 (`LifeTime`) の資産の総有効期間、および減価償却の計算に使用される年数 (`Depr`) によって、指定された期間の資産の減価償却を返します。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Factor" /> &lt;= 0、<paramref name="Salvage" /> &lt; 0、<paramref name="Period" /> &lt;= 0、または <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じての一定の利率です。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
        <param name="NPer">必須。 投資期間全体での支払い回数の合計です。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
        <param name="Pmt">必須。 毎回の支払い額です。 通常、支払い額には元金と利息が含まれます。支払い額を投資期間内に変更することはできません。</param>
        <param name="PV">省略可。 現在の投資額、つまり将来行われる一連の支払いを現時点で一括支払いした場合の合計金額です。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。 省略した場合は、0 と見なされます。</param>
        <param name="Due">省略可。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 各期の期末に支払う場合は <see langword="DueDate.EndOfPeriod" /> を、各期の期首に支払う場合は <see langword="DueDate.BegOfPeriod" /> をそれぞれ引数に指定します。 省略した場合は、<see langword="DueDate.EndOfPeriod" /> を指定したものと見なされます。</param>
        <summary>定期的な定額の支払いおよび一定した利率に基づいて、投資の将来価値を指定する値を返します。</summary>
        <returns>定期的な定額の支払いおよび一定した利率に基づいた投資の将来価値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金とは、一定期間にわたって行われる一連の固定キャッシュ支払いです。 年金は、ローン (住宅ローンなど) または投資 (毎月の貯蓄計画など) にすることができます。  
  
 `Rate` 引数と `NPer` 引数は、同じ単位で表される支払期間を使用して計算する必要があります。 たとえば、`Rate` が月を使用して計算される場合、`NPer` も月を使用して計算する必要があります。  
  
 すべての引数については、現金支払 (預金の節約など) が負の数値で表されます。取得した現金 (被除数のチェックなど) は、正の数値で表されます。  
  
   
  
## Examples  
 この例では、`FV` 関数を使用して、期間あたりの計上率 (`APR / 12`)、支払いの合計数 (`TotPmts`)、支払い (`Payment`)、投資の現在の金額 (`PVal`)、支払いが支払期間の開始時または終了時に行われるかどうかを示す数値 (`PayType`) を指定して、投資の将来価値を返します。 `Payment` は現金支払額を表しているため、負の数になることに注意してください。  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じての一定の利率です。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
        <param name="Per">必須。 金利支払い額を求める期を示す、1 から <paramref name="NPer" /> の範囲です。</param>
        <param name="NPer">必須。 投資期間全体での支払い回数の合計です。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
        <param name="PV">必須。 現在の投資額、つまり将来行われる一連の支払いや受け取りを現時点で一括した場合の合計金額です。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
        <param name="FV">省略可。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支です。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
        <param name="Due">省略可。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>定期的な定額の支払いおよび一定した利率に基づいて、特定の期に支払う金利を指定する値を返します。</summary>
        <returns>定期的な定額の支払いおよび一定した利率に基づいて、特定の期に支払う金利です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金とは、一定期間にわたって行われる一連の固定キャッシュ支払いです。 年金は、ローン (住宅ローンなど) または投資 (毎月の貯蓄計画など) にすることができます。  
  
 `Rate` 引数と `NPer` 引数は、同じ単位で表される支払期間を使用して計算する必要があります。 たとえば、`Rate` が月を使用して計算される場合、`NPer` も月を使用して計算する必要があります。  
  
 すべての引数については、現金支払 (預金の節約など) が負の数値で表されます。取得した現金 (被除数のチェックなど) は、正の数値で表されます。  
  
   
  
## Examples  
 この例では、`IPmt` 関数を使用して、すべての支払いが同じ値である場合の支払額を計算します。 指定された期間あたりの利率 (`APR / 12`) 関心のある期間 (`Period`)、支払いの合計数 (`TotPmts`)、現在の値または元金 (`PVal`)、ローンの将来価値 (`FVal`)、支払いが支払期間の開始または終了 (`PayType`) であるかどうかを示す数値 () を指定します。  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;= 0 または <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR : Double[] * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必須。 キャッシュ フローの値を示す <see langword="Double" /> 型の配列。 配列には、負の値 (支払い額) と正の値 (受け取り額) が少なくとも 1 つずつ含まれている必要があります。</param>
        <param name="Guess">省略可。 <see langword="IRR" /> 関数によって返される推定値を示すオブジェクト。 省略した場合、<paramref name="Guess" /> に 0.1 (10%) を指定したものと見なされます。</param>
        <summary>一連の定期的なキャッシュ フロー (支払いと受け取り) の内部利益率を指定する値を返します。</summary>
        <returns>一連の定期的なキャッシュ フロー (支払いと受け取り) の内部利益率です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内部利益率は、一定の間隔で発生した支払いと受領で構成される投資に対して受信した利率です。  
  
 `IRR` 関数は、配列内の値の順序を使用して、支払と受領の順序を解釈します。 支払いと受領の値は正しい順序で入力してください。 各期間のキャッシュフローは、年金のために修正する必要はありません。  
  
 `IRR` はイテレーションによって計算されます。 `Guess`の値から、`IRR` は、結果が0.00001% 以内に正確になるまで、計算を順番に切り替えます。 20回試行しても結果が見つからない場合 `IRR` は失敗します。  
  
   
  
## Examples  
 この例では、`IRR` 関数は、配列 `Values()`に含まれる一連の5つのキャッシュフローに対する内部的な戻り速度を返します。 最初の配列要素は、ビジネスの開始コストを表す負のキャッシュフローです。 残りの4つのキャッシュフローは、後続の4年間の正のキャッシュフローを表します。 `Guess` は、予想される内部利益率です。  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">配列引数の値が無効または <paramref name="Guess" /> &lt;= -1 です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR : Double[] * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必須。 キャッシュ フローの値を示す <see langword="Double" /> 型の配列。 配列には、負の値 (支払い額) と正の値 (受け取り額) が少なくとも 1 つずつ含まれている必要があります。</param>
        <param name="FinanceRate">必須。 支払い額に対する利率です。</param>
        <param name="ReinvestRate">必須。 現金の再投資に対する受け取り利率です。</param>
        <summary>一連の定期的なキャッシュ フロー (支払いと受け取り) の修正内部利益率を指定する値を返します。</summary>
        <returns>一連の定期的なキャッシュ フロー (支払いと受け取り) の修正内部利益率です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変更された内部利益率は、支払いと領収書が異なるレートで financed た場合の内部収益率です。 `MIRR` 関数では、投資のコスト (`FinanceRate`) と、貸付 (`ReinvestRate`) で受信した利率の両方が考慮されます。  
  
 `FinanceRate` 引数と `ReinvestRate` 引数は、10進値で表されるパーセンテージです。 たとえば、12% は0.12 として表されます。  
  
 `MIRR` 関数は、配列内の値の順序を使用して、支払と受領の順序を解釈します。 支払いと受領の値は正しい順序で入力してください。  
  
   
  
## Examples  
 この例では、`MIRR` 関数を使用して、配列 `Values()`に含まれる一連のキャッシュフローの変更された内部レートを返します。 `LoanAPR` は、貸付で受信した金利を表す `InvAPR` を表します。  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" /> のランクが 1 ではない、<paramref name="FinanceRate" /> = -1、または <paramref name="ReinvestRate" /> = -1。</exception>
        <exception cref="T:System.DivideByZeroException">0 による除算が行われました。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じての一定の利率です。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
        <param name="Pmt">必須。 毎回の支払い額です。 通常、支払い額には元金と利息が含まれます。支払い額を投資期間内に変更することはできません。</param>
        <param name="PV">必須。 現在の投資額、つまり将来行われる一連の支払いや受け取りを現時点で一括した場合の合計金額です。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
        <param name="FV">省略可。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支です。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
        <param name="Due">省略可。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>定期的な定額の支払いおよび一定した利率に基づいて、投資に必要な期間を指定する値を返します。</summary>
        <returns>定期的な定額の支払いおよび一定した利率に基づいた、投資に必要な期間です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金とは、一定期間にわたって行われる一連の固定キャッシュ支払いです。 年金は、ローン (住宅ローンなど) または投資 (毎月の貯蓄計画など) にすることができます。  
  
 すべての引数については、現金支払 (預金の節約など) が負の数値で表されます。取得した現金 (被除数のチェックなど) は、正の数値で表されます。  
  
   
  
## Examples  
 この例では、`NPer` 関数を使用して、`PVal`に値が含まれているローンを支払うために支払いを行う必要がある期間の数を返します。 また、期間あたりの利率 (`APR / 12`)、支払い (`Payment`)、ローンの将来価値 (`FVal`)、支払いが支払期間の開始または終了であるかどうかを示す数値 (`PayType`) も提供されます。  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Rate" /> = 0 かつ <paramref name="Pmt" /> = 0 です。</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double * Double[] -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じて一定である公定歩合であり、小数点を使用して示されます。</param>
        <param name="ValueArray">必須。 キャッシュ フローの値を示す <see langword="Double" /> 型の配列。 配列には、負の値 (支払い額) と正の値 (受け取り額) が少なくとも 1 つずつ含まれている必要があります。</param>
        <summary>一連の定期的なキャッシュ フロー (支払いと受け取り) および公定歩合に基づいて、出資の正味現在価値を指定する値を返します。</summary>
        <returns>一連の定期的なキャッシュ フロー (支払いと受け取り) および公定歩合に基づいて、出資の正味現在価値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 投資の正味現在価値は、今後の一連の支払いと領収書の現在の価値です。  
  
 `NPV` 関数は、配列内の値の順序を使用して、支払と受領の順序を解釈します。 支払いと受領の値は正しい順序で入力してください。  
  
 `NPV` 投資は、最初のキャッシュフロー値の日付の1期間前に開始され、配列の最後のキャッシュフロー値で終了します。  
  
 正味現在価値の計算は、将来のキャッシュフローに基づいています。 最初のキャッシュフローが最初の期間の開始時に発生する場合は、最初の値を `NPV` によって返される値に追加し、`ValueArray`のキャッシュフローの値に含めないようにする必要があります。  
  
 `NPV` 関数は、`PV` 関数 (現在の値) に似ています。ただし、`PV` 関数により、キャッシュフローは、期間の末尾または先頭で開始することができます。 キャッシュフロー値 `NPV` 変数とは異なり、投資全体で `PV` のキャッシュフローを修正する必要があります。  
  
   
  
## Examples  
 この例では、`NPV` 関数を使用して、配列 `values()`に含まれる一連のキャッシュフローの正味現在の値を返します。 `FixedRetRate`に格納されている戻り値は、固定された内部利益率を表します。  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" /> が <see langword="Nothing" />、<paramref name="ValueArray" /> のランクが &lt;&gt; 1、または <paramref name="Rate" /> = -1 です</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じての一定の利率です。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
        <param name="NPer">必須。 投資期間全体での支払い回数の合計です。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
        <param name="PV">必須。 現在の投資額、つまり将来行われる一連の支払いを現時点で一括支払いした場合の合計金額です。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
        <param name="FV">省略可。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支です。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
        <param name="Due">省略可。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>定期的な定額の支払いおよび一定した利率に基づいて、投資に必要な定期支払い額を指定する値を返します。</summary>
        <returns>定期的な定額の支払いおよび一定した利率に基づく、投資に必要な定期支払い額です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金とは、一定期間内に行われる一連の固定キャッシュ支払いです。 年金は、ローン (住宅ローンなど) または投資 (毎月の貯蓄計画など) にすることができます。  
  
 `Rate` 引数と `NPer` 引数は、同じ単位で表される支払期間を使用して計算する必要があります。 たとえば、`Rate` が月を使用して計算される場合、`NPer` も月を使用して計算する必要があります。  
  
 すべての引数について、現金の支払い (預金の節約など) は負の数値で表されます。取得した現金 (被除数のチェックなど) は、正の数値で表されます。  
  
   
  
## Examples  
 この例では、`Pmt` 関数を使用して、一定期間のローンの毎月の支払い額を返します。 これは、期間あたりの利率 (`APR / 12`)、合計支払数 (`TotPmts`)、ローンの現在の値またはプリンシパル (`PVal`)、ローンの将来の値 (`FVal`)、支払いが支払期間の開始または終了であるかどうかを示す数値のいずれかになり `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じての一定の利率です。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
        <param name="Per">必須。 金利支払い額を求める期を示す、1 から <paramref name="NPer" /> の範囲です。</param>
        <param name="NPer">必須。 投資期間全体での支払い回数の合計です。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
        <param name="PV">必須。 将来行われる一連の支払いや受け取りを現時点で一括した場合の合計金額です。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
        <param name="FV">省略可。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支です。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
        <param name="Due">省略可。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>定期的な定額の支払いおよび一定した利率に基づいて、指定された期間の元金の支払いを示す値を返します。</summary>
        <returns>定期的な定額の支払いおよび一定した利率に基づいた、指定された期間の元金の支払いです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金とは、一定期間にわたって行われる一連の固定キャッシュ支払いです。 年金は、ローン (住宅ローンなど) または投資 (毎月の貯蓄計画など) にすることができます。  
  
 `Rate` 引数と `NPer` 引数は、同じ単位で表される支払期間を使用して計算する必要があります。 たとえば、`Rate` が月を使用して計算される場合、`NPer` も月を使用して計算する必要があります。  
  
 すべての引数について、現金の支払い (預金の節約など) は負の数値で表されます。取得した現金 (被除数のチェックなど) は、正の数値で表されます。  
  
   
  
## Examples  
 この例では、`PPmt` 関数を使用して、すべての支払いが等しい値である場合に、特定の期間の支払いの量を計算します。 指定された期間あたりの利率 (`APR / 12`) 元金を求める期間 (`Period`)、支払いの合計数 (`TotPmts`)、現在の値または元金 (`PVal`)、ローンの将来価値 (`FVal`)、支払いが支払期間の開始時または終了日 (`PayType`) であるかどうかを示す数値を指定します。  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;=0 または <paramref name="Per" /> &gt; <paramref name="NPer" /> です。</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じての一定の利率です。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
        <param name="NPer">必須。 投資期間全体での支払い回数の合計です。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、4 × 12 (= 48) の返済期間があることになります。</param>
        <param name="Pmt">必須。 毎回の支払い額です。 通常、支払い額には元金と利息が含まれます。支払い額を投資期間内に変更することはできません。</param>
        <param name="FV">省略可。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支です。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
        <param name="Due">省略可。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>将来の定期的な定額の支払いおよび一定した利率に基づいて、投資の現在価値を指定する値を返します。</summary>
        <returns>将来の定期的な定額の支払いおよび一定した利率に基づいた、投資の現在価値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金とは、一定期間にわたって行われる一連の固定キャッシュ支払いです。 年金は、ローン (住宅ローンなど) または投資 (毎月の貯蓄計画など) にすることができます。  
  
 `Rate` 引数と `NPer` 引数は、同じ単位で表される支払期間を使用して計算する必要があります。 たとえば、`Rate` が月を使用して計算される場合、`NPer` も月を使用して計算する必要があります。  
  
 すべての引数については、現金支払 (預金の節約など) が負の数値で表されます。取得した現金 (被除数のチェックなど) は、正の数値で表されます。  
  
   
  
## Examples  
 この例では、`PV` 関数は、次の20年間に $5万年を提供する $100万年金の現在の値を返します。 予想される年間割合 (`APR`)、支払いの合計数 (`TotPmts`)、各支払い額 (`YrIncome`)、合計投資額 (`FVal`)、および支払期間の開始日または終了時に各支払いが行われるかどうかを示す数値 (`PayType`) を指定します。 `YrIncome` が負の値であることに注意してください。これは、毎年年金から支払われた現金を表しているためです。  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">必須。 投資期間全体での支払い回数の合計です。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
        <param name="Pmt">必須。 毎回の支払い額です。 通常、支払い額には元金と利息が含まれます。支払い額を投資期間内に変更することはできません。</param>
        <param name="PV">必須。 現在の投資額、つまり将来行われる一連の支払いや受け取りを現時点で一括した場合の合計金額です。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
        <param name="FV">省略可。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支です。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
        <param name="Due">省略可。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <param name="Guess">省略可。 <see langword="Rate" /> によって返される推定値です。 省略した場合、<paramref name="Guess" /> に 0.1 (10%) を指定したものと見なされます。</param>
        <summary>投資期間を通じての利率を指定する値を返します。</summary>
        <returns>投資期間を通じての利率です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金とは、一定期間にわたって行われる一連の固定キャッシュ支払いです。 年金は、ローン (住宅ローンなど) または投資 (毎月の貯蓄計画など) にすることができます。  
  
 すべての引数については、現金支払 (預金の節約など) が負の数値で表されます。取得した現金 (被除数のチェックなど) は、正の数値で表されます。  
  
 `Rate` はイテレーションによって計算されます。 `Guess`の値から、`Rate` は、結果が0.00001% 以内に正確になるまで、計算を順番に切り替えます。 20回試行しても結果が見つからない場合 `Rate` は失敗します。 推測が10% で `Rate` が失敗した場合は、`Guess`に対して別の値を試してください。  
  
   
  
## Examples  
 この例では、`Rate` 関数を使用して、支払いの合計数 (`TotPmts`) を指定して、ローンの金利を計算します。ローンの支払い (`Payment`)、現在のローンの金額 (`PVal`)、ローンの将来の値 (`FVal`)、支払いが支払期間の開始または終了であるかどうかを示す数値 (`PayType`)、および予想される利率 (`Guess`) についての概算です。  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> &lt;= 0 です。</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必須。 資産を購入した時点での価格です。</param>
        <param name="Salvage">必須。 耐用年数が終了した時点での資産の価値です。</param>
        <param name="Life">必須。 資産の耐用年数です。</param>
        <summary>定額法を用いて資産の 1 期あたりの減価償却費を示す値を返します。</summary>
        <returns>定額法を用いて算出される、資産の 1 期あたりの減価償却費です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 減価償却期間は、`Life` 引数と同じ単位で表す必要があります。 すべての引数は正の数値である必要があります。  
  
   
  
## Examples  
 この例では、`SLN` 関数を使用して、資産の初期コスト (`InitCost`)、資産の耐用年数 (`SalvageVal`) の最後にある salvage 値、および資産の総耐用年数 (`LifeTime`) を指定して、1つの期間に対して資産の定額償却を返します。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必須。 資産を購入した時点での価格です。</param>
        <param name="Salvage">必須。 耐用年数が終了した時点での資産の価値です。</param>
        <param name="Life">必須。 資産の耐用年数です。</param>
        <param name="Period">必須。 減価償却費を計算する期です。</param>
        <summary>定額逓減法を使用して、指定した期の減価償却費を示す値を返します。</summary>
        <returns>定額逓減法を使用した、指定した期の減価償却費です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Life` 引数と `Period` 引数は、同じ単位で表す必要があります。 たとえば、`Life` が月単位で指定されている場合、`Period` も月単位で指定する必要があります。 すべての引数は正の数値である必要があります。  
  
   
  
## Examples  
 この例では、`SYD` 関数を使用して、資産の初期コスト (`InitCost`)、資産の耐用年数 (`SalvageVal`) の最後にある salvage 値、および資産の総耐用年数 (`LifeTime`) によって、指定された期間の資産の減価償却を返します。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Salvage" /> &lt; 0、<paramref name="Period" /> &gt; <paramref name="Life" />、または <paramref name="Period" /> &lt;=0 です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務処理の概要</related>
      </Docs>
    </Member>
  </Members>
</Type>
