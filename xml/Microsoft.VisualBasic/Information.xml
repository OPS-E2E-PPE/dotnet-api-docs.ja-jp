<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6df0db71df27dae844940b4603d05f7798ae0dea" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73377396" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="43562-101"><see langword="Information" /> モジュールに含まれるプロシージャを使って、情報の取得、テスト、検証を行います。</span><span class="sxs-lookup"><span data-stu-id="43562-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-102">このモジュールは、エラー情報の提供、データの検証、配列の境界の決定、およびデータ型と色情報の取得を行う、Visual Basic 言語キーワードとランタイムライブラリメンバーをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="43562-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-103">次の例では、`VbTypeName` 関数を使用して、複数の変数のデータ型名を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md"><span data-ttu-id="43562-104">情報と対話の概要</span><span class="sxs-lookup"><span data-stu-id="43562-104">Information and Interaction Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md"><span data-ttu-id="43562-105">Data Types Summary</span><span class="sxs-lookup"><span data-stu-id="43562-105">Data Types Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md"><span data-ttu-id="43562-106">宣言と定数の概要</span><span class="sxs-lookup"><span data-stu-id="43562-106">Declarations and Constants Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="43562-107">キーワード (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-107">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="43562-108">ランタイムライブラリのメンバーの Visual Basic</span><span class="sxs-lookup"><span data-stu-id="43562-108">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43562-109">最後に実行されたステートメントの行番号を示す整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-109">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="43562-110">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="43562-110">Read-only.</span></span></summary>
        <returns><span data-ttu-id="43562-111">最後に実行されたステートメントの行番号を示す整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-111">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="43562-112">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="43562-112">Read-only.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-113">Visual Basic で行番号が検出されなかった場合は、0を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-113">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-114">この例では、`Erl` プロパティを使用して、行番号を示します。</span><span class="sxs-lookup"><span data-stu-id="43562-114">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.VisualBasic.ErrObject Err() cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="43562-115">ランタイム エラーに関する情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="43562-115">Contains information about run-time errors.</span></span></summary>
        <returns><span data-ttu-id="43562-116">ランタイム エラーに関する情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="43562-116">Contains information about run-time errors.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-117">`Err` オブジェクトのプロパティは、エラー Visual Basic、オブジェクト、またはプログラマのジェネレーターによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="43562-117">The properties of the `Err` object are set by the generator of an error - Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="43562-118">実行時エラーが発生すると、`Err` オブジェクトのプロパティに、エラーを一意に識別し、エラーを処理するために使用できる情報が格納されます。</span><span class="sxs-lookup"><span data-stu-id="43562-118">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="43562-119">コードで実行時エラーを生成するには、`Raise` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43562-119">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="43562-120">`Err` オブジェクトのプロパティは、エラー処理ルーチン内の `Exit Sub`、`Exit Function`、`Exit Property`、または `Resume Next` ステートメントの後、0個または長さ0の文字列 ("") にリセットされます。</span><span class="sxs-lookup"><span data-stu-id="43562-120">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="43562-121">エラー処理ルーチンの外部で任意の形式の `Resume` ステートメントを使用しても、`Err` オブジェクトのプロパティはリセットされません。</span><span class="sxs-lookup"><span data-stu-id="43562-121">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="43562-122">`Clear` メソッドを使用して、`Err`を明示的にリセットできます。</span><span class="sxs-lookup"><span data-stu-id="43562-122">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="43562-123">システムエラーおよびクラスモジュールの実行時エラーを生成するには、`Error` ステートメントではなく、`Raise` メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="43562-123">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="43562-124">`Raise` メソッドを他のコードで使用するかどうかは、返す情報の豊富さによって決まります。</span><span class="sxs-lookup"><span data-stu-id="43562-124">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="43562-125">`Err` オブジェクトは、グローバルスコープの組み込みオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="43562-125">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="43562-126">したがって、コード内にそのインスタンスを作成する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="43562-126">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-127">この例では、`Err` オブジェクトのプロパティを使用して、エラーメッセージダイアログボックスを構築します。</span><span class="sxs-lookup"><span data-stu-id="43562-127">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="43562-128">最初に `Clear` メソッドを使用する場合、`Raise` メソッドで Visual Basic エラーを生成すると、Visual Basic の既定値が `Err` オブジェクトのプロパティになります。</span><span class="sxs-lookup"><span data-stu-id="43562-128">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md"><span data-ttu-id="43562-129">Error ステートメント</span><span class="sxs-lookup"><span data-stu-id="43562-129">Error Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md"><span data-ttu-id="43562-130">On Error ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-130">On Error Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md"><span data-ttu-id="43562-131">Exit ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-131">Exit Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md"><span data-ttu-id="43562-132">Resume ステートメント</span><span class="sxs-lookup"><span data-stu-id="43562-132">Resume Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md"><span data-ttu-id="43562-133">エラー メッセージ (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-133">Error Messages (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="43562-134">Try...Catch...Finally ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-134">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsArray(object VarName) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="43562-135">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-135">Required.</span></span> <span data-ttu-id="43562-136"><see langword="Object" /> 変数。</span><span class="sxs-lookup"><span data-stu-id="43562-136"><see langword="Object" /> variable.</span></span></param>
        <summary><span data-ttu-id="43562-137">変数が配列を参照しているかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-137">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></summary>
        <returns><span data-ttu-id="43562-138">変数が配列を参照しているかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-138">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-139">変数が配列を指している場合、`IsArray` は `True` を返します。それ以外の場合は `False`を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-139">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="43562-140">`IsArray` は、配列を含む可能性のあるオブジェクトで特に便利です。</span><span class="sxs-lookup"><span data-stu-id="43562-140">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-141">この例では、`IsArray` 関数を使用して、複数の変数が配列を参照しているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="43562-141">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md"><span data-ttu-id="43562-142">Visual Basic における配列</span><span class="sxs-lookup"><span data-stu-id="43562-142">Arrays in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDate(object Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="43562-143">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-143">Required.</span></span> <span data-ttu-id="43562-144">整数型 (<see langword="Object" />) の式を指定します。</span><span class="sxs-lookup"><span data-stu-id="43562-144"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="43562-145">式が有効な <see langword="Boolean" /> 値を表しているかどうかを示す <see langword="Date" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-145">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></summary>
        <returns><span data-ttu-id="43562-146">式が有効な <see langword="Boolean" /> 値を表しているかどうかを示す <see langword="Date" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-146">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-147">`Expression` が <xref:System.DateTime> データ型であるか、またはそれに変換できる場合、`IsDate` は `True` を返します。それ以外の場合は `False`を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-147">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="43562-148"><xref:System.DateTime> データ型には、日付値と時刻値の両方が格納されます。</span><span class="sxs-lookup"><span data-stu-id="43562-148">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="43562-149">`Expression` が有効な日付、有効な時刻、または有効な日付と時刻を表す場合、`IsDate` は `True` を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-149">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-150">次の例では、`IsDate` 関数を使用して、複数の変数が有効な <xref:System.DateTime> 値を表しているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43562-150">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="43562-151">前の例では、`IsDate` は、最初の4回の呼び出しと最後の呼び出しの `False` に対して `True` を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-151">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDBNull(object Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="43562-152">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-152">Required.</span></span> <span data-ttu-id="43562-153">整数型 (<see langword="Object" />) の式を指定します。</span><span class="sxs-lookup"><span data-stu-id="43562-153"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="43562-154">式が <see cref="T:System.DBNull" /> クラスに評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-154">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></summary>
        <returns><span data-ttu-id="43562-155">式が <see cref="T:System.DBNull" /> クラスに評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-155">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-156">`Expression` のデータ型が <xref:System.DBNull> 型に評価される場合、`IsDBNull` は `True` を返します。それ以外の場合、`IsDBNull` は `False`を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-156">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="43562-157"><xref:System.DBNull?displayProperty=nameWithType> 値は、`Object` が存在しないデータまたは存在しないデータを表していることを示します。</span><span class="sxs-lookup"><span data-stu-id="43562-157">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="43562-158">`DBNull` は `Nothing`と同じではありません。これは、変数がまだ初期化されていないことを示します。</span><span class="sxs-lookup"><span data-stu-id="43562-158">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="43562-159">また `DBNull` は、長さが0の文字列 (`""`) と同じではありません。これは、null 文字列と呼ばれることもあります。</span><span class="sxs-lookup"><span data-stu-id="43562-159">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-160">この例では、`IsDBNull` 関数を使用して、変数が `DBNull`に評価されるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43562-160">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsError(object Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="43562-161">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-161">Required.</span></span> <span data-ttu-id="43562-162">整数型 (<see langword="Object" />) の式を指定します。</span><span class="sxs-lookup"><span data-stu-id="43562-162"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="43562-163">式が例外の種類かどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-163">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></summary>
        <returns><span data-ttu-id="43562-164">式が例外の種類かどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-164">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-165">式が <xref:System> 名前空間の <xref:System.Exception> クラスから派生した `Object` 変数を表す場合、`IsError` は `True` を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-165">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="43562-166"><xref:System.Exception?displayProperty=nameWithType> から派生した例外は、`Try...Catch...Finally` ステートメントでキャッチできます。</span><span class="sxs-lookup"><span data-stu-id="43562-166">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-167">次の例では、`IsError` 関数を使用して、式がシステム例外を表しているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="43562-167">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNothing(object Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="43562-168">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-168">Required.</span></span> <span data-ttu-id="43562-169">整数型 (<see langword="Object" />) の式を指定します。</span><span class="sxs-lookup"><span data-stu-id="43562-169"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="43562-170">式にオブジェクトが割り当てられていないかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-170">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></summary>
        <returns><span data-ttu-id="43562-171">式にオブジェクトが割り当てられていないかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-171">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-172">`IsNothing` は、現在オブジェクトが割り当てられていないオブジェクト変数を式が表している場合に `True` を返します。それ以外の場合は `False`を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-172">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="43562-173">`IsNothing` は、参照型を使用することを目的としています。</span><span class="sxs-lookup"><span data-stu-id="43562-173">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="43562-174">値型は、値を保持することはできません。また、値型に `Nothing` 割り当てた場合[は、既定](~/docs/visual-basic/language-reference/nothing.md)値に戻ります。</span><span class="sxs-lookup"><span data-stu-id="43562-174">A value type cannot hold a value of [Nothing](~/docs/visual-basic/language-reference/nothing.md) and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="43562-175">`Expression`で値型を指定した場合、`IsNothing` は常に `False`を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-175">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-176">次の例では、`IsNothing` 関数を使用して、オブジェクト変数が任意のオブジェクトインスタンスに関連付けられているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43562-176">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="43562-177">値型と参照型</span><span class="sxs-lookup"><span data-stu-id="43562-177">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumeric(object Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="43562-178">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-178">Required.</span></span> <span data-ttu-id="43562-179">整数型 (<see langword="Object" />) の式を指定します。</span><span class="sxs-lookup"><span data-stu-id="43562-179"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="43562-180">式が数値として評価できるかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-180">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></summary>
        <returns><span data-ttu-id="43562-181">式が数値として評価できるかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-181">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-182">`Expression` のデータ型が `Boolean`、`Byte`、`Decimal`、`Double`、`Integer`、`Long`、`SByte`、`Short`、`Single`、`UInteger`の場合、`IsNumeric` は `True` を返し、`ULong`、または `UShort`。</span><span class="sxs-lookup"><span data-stu-id="43562-182">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="43562-183">また、`Expression` が、正常に数値に変換できる `Char`、`String`、または `Object` である場合にも `True` を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-183">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="43562-184">`Expression` には、数字以外の文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="43562-184">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="43562-185">`Expression` が有効な16進数または8進数を含む文字列である場合、`IsNumeric` は `True` を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-185">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="43562-186">また、`IsNumeric` は、+ または-文字で始まる有効な数値式が `Expression` に含まれているか、またはコンマを含んでいる場合にも `True` を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-186">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="43562-187">`Expression` のデータ型が `Date`の場合、`IsNumeric` は `False` を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-187">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="43562-188">`Expression` が `Char`、`String`、または `Object` で、正常に数値に変換できない場合に `False` を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-188">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-189">次の例では、`IsNumeric` 関数を使用して、変数の内容を数値として評価できるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="43562-189">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsReference(object Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="43562-190">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-190">Required.</span></span> <span data-ttu-id="43562-191">整数型 (<see langword="Object" />) の式を指定します。</span><span class="sxs-lookup"><span data-stu-id="43562-191"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="43562-192">式が参照型に評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-192">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></summary>
        <returns><span data-ttu-id="43562-193">式が参照型に評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-193">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-194">`Expression` が参照型 (クラスインスタンス、`String` 型、または任意の型の配列など) を表す場合、`IsReference` は `True` を返します。それ以外の場合は `False`を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-194">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="43562-195">参照型には、メモリ内の他の場所に格納されているデータへのポインターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="43562-195">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="43562-196">値型には、独自のデータが含まれます。</span><span class="sxs-lookup"><span data-stu-id="43562-196">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-197">この例では、`IsReference` 関数を使用して、複数の変数が参照型を参照しているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="43562-197">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="43562-198">前の例では、`IsReference` の最初の3つの呼び出しが `True`を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-198">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="43562-199">`Integer` は参照型ではなく値型であるため、最後の呼び出しでは `False`が返されます。</span><span class="sxs-lookup"><span data-stu-id="43562-199">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="43562-200">値型と参照型</span><span class="sxs-lookup"><span data-stu-id="43562-200">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LBound(class System.Array Array, int32 Rank) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="43562-201">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-201">Required.</span></span> <span data-ttu-id="43562-202">任意のデータ型の配列です。</span><span class="sxs-lookup"><span data-stu-id="43562-202">Array of any data type.</span></span> <span data-ttu-id="43562-203">ある次元で最も小さいインデックスを探す対象となる配列です。</span><span class="sxs-lookup"><span data-stu-id="43562-203">The array in which you want to find the lowest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="43562-204">任意。</span><span class="sxs-lookup"><span data-stu-id="43562-204">Optional.</span></span> <span data-ttu-id="43562-205"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="43562-205"><see langword="Integer" />.</span></span> <span data-ttu-id="43562-206">最も小さいインデックスが返される次元です。</span><span class="sxs-lookup"><span data-stu-id="43562-206">The dimension for which the lowest possible subscript is to be returned.</span></span> <span data-ttu-id="43562-207">1 番目の次元の場合は 1、2 番目の次元の場合は 2 という形で指定します。</span><span class="sxs-lookup"><span data-stu-id="43562-207">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="43562-208"><paramref name="Rank" /> を省略した場合、1 が使用されます。</span><span class="sxs-lookup"><span data-stu-id="43562-208">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="43562-209">配列内の指定された次元における最も小さいインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="43562-209">Returns the lowest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="43562-210"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="43562-210"><see langword="Integer" />.</span></span> <span data-ttu-id="43562-211">指定した次元に設定できるインデックスの最小値です。</span><span class="sxs-lookup"><span data-stu-id="43562-211">The lowest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="43562-212"><paramref name="Array" /> が初期化されていれば、たとえばそれが長さ 0 の文字列のときなど要素を含んでいない場合でも、<see langword="LBound" /> は常に 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-212"><see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span></span> <span data-ttu-id="43562-213"><paramref name="Array" /> が <see langword="Nothing" /> の場合、<see langword="LBound" /> は <see cref="T:System.ArgumentNullException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="43562-213">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-214">配列の添字は 0 から始まるため、各次元で使用できる添字の最小値は常に 0 です。</span><span class="sxs-lookup"><span data-stu-id="43562-214">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="43562-215">次の次元の配列の場合、`LBound` は次の表の値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-215">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="43562-216">LBound への呼び出し</span><span class="sxs-lookup"><span data-stu-id="43562-216">Call to LBound</span></span>|<span data-ttu-id="43562-217">戻り値</span><span class="sxs-lookup"><span data-stu-id="43562-217">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="43562-218">0</span><span class="sxs-lookup"><span data-stu-id="43562-218">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="43562-219">0</span><span class="sxs-lookup"><span data-stu-id="43562-219">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="43562-220">0</span><span class="sxs-lookup"><span data-stu-id="43562-220">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="43562-221">次の例では、`LBound` 関数を使用して、配列の指定した次元で使用可能な最小の添字を判断します。</span><span class="sxs-lookup"><span data-stu-id="43562-221">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43562-222"><paramref name="Array" /> は <see langword="Nothing" />です。</span><span class="sxs-lookup"><span data-stu-id="43562-222"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="43562-223"><paramref name="Rank" /> が 1 未満か、<paramref name="Rank" /> が <paramref name="Array" /> のランクを超えています。</span><span class="sxs-lookup"><span data-stu-id="43562-223"><paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="43562-224">Dim ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-224">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="43562-225">ReDim ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-225">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 QBColor(int32 Color) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color"><span data-ttu-id="43562-226">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-226">Required.</span></span> <span data-ttu-id="43562-227">0 から 15 の範囲の整数値。</span><span class="sxs-lookup"><span data-stu-id="43562-227">A whole number in the range 0-15.</span></span></param>
        <summary><span data-ttu-id="43562-228">指定したカラー番号に対応する RGB カラー コードを表す <see langword="Integer" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-228">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></summary>
        <returns><span data-ttu-id="43562-229">指定したカラー番号に対応する RGB カラー コードを表す <see langword="Integer" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-229">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-230">最下位バイト以降では、返される値は、Visual Basic 言語で使用される RGB システムの適切な色を設定するために使用される赤、緑、および青の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="43562-230">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="43562-231">`Color` 引数にはこれらの設定があります。</span><span class="sxs-lookup"><span data-stu-id="43562-231">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="43562-232">数値</span><span class="sxs-lookup"><span data-stu-id="43562-232">Number</span></span>|<span data-ttu-id="43562-233">色</span><span class="sxs-lookup"><span data-stu-id="43562-233">Color</span></span>|<span data-ttu-id="43562-234">数値</span><span class="sxs-lookup"><span data-stu-id="43562-234">Number</span></span>|<span data-ttu-id="43562-235">色</span><span class="sxs-lookup"><span data-stu-id="43562-235">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="43562-236">0</span><span class="sxs-lookup"><span data-stu-id="43562-236">0</span></span>|<span data-ttu-id="43562-237">黒</span><span class="sxs-lookup"><span data-stu-id="43562-237">Black</span></span>|<span data-ttu-id="43562-238">8</span><span class="sxs-lookup"><span data-stu-id="43562-238">8</span></span>|<span data-ttu-id="43562-239">暗く</span><span class="sxs-lookup"><span data-stu-id="43562-239">Gray</span></span>|  
|<span data-ttu-id="43562-240">1</span><span class="sxs-lookup"><span data-stu-id="43562-240">1</span></span>|<span data-ttu-id="43562-241">青</span><span class="sxs-lookup"><span data-stu-id="43562-241">Blue</span></span>|<span data-ttu-id="43562-242">9</span><span class="sxs-lookup"><span data-stu-id="43562-242">9</span></span>|<span data-ttu-id="43562-243">薄い青</span><span class="sxs-lookup"><span data-stu-id="43562-243">Light blue</span></span>|  
|<span data-ttu-id="43562-244">2</span><span class="sxs-lookup"><span data-stu-id="43562-244">2</span></span>|<span data-ttu-id="43562-245">緑</span><span class="sxs-lookup"><span data-stu-id="43562-245">Green</span></span>|<span data-ttu-id="43562-246">10</span><span class="sxs-lookup"><span data-stu-id="43562-246">10</span></span>|<span data-ttu-id="43562-247">明るい緑</span><span class="sxs-lookup"><span data-stu-id="43562-247">Light green</span></span>|  
|<span data-ttu-id="43562-248">3</span><span class="sxs-lookup"><span data-stu-id="43562-248">3</span></span>|<span data-ttu-id="43562-249">シアン</span><span class="sxs-lookup"><span data-stu-id="43562-249">Cyan</span></span>|<span data-ttu-id="43562-250">11</span><span class="sxs-lookup"><span data-stu-id="43562-250">11</span></span>|<span data-ttu-id="43562-251">水色</span><span class="sxs-lookup"><span data-stu-id="43562-251">Light cyan</span></span>|  
|<span data-ttu-id="43562-252">4</span><span class="sxs-lookup"><span data-stu-id="43562-252">4</span></span>|<span data-ttu-id="43562-253">赤</span><span class="sxs-lookup"><span data-stu-id="43562-253">Red</span></span>|<span data-ttu-id="43562-254">12</span><span class="sxs-lookup"><span data-stu-id="43562-254">12</span></span>|<span data-ttu-id="43562-255">薄い赤</span><span class="sxs-lookup"><span data-stu-id="43562-255">Light red</span></span>|  
|<span data-ttu-id="43562-256">5</span><span class="sxs-lookup"><span data-stu-id="43562-256">5</span></span>|<span data-ttu-id="43562-257">マゼンタ</span><span class="sxs-lookup"><span data-stu-id="43562-257">Magenta</span></span>|<span data-ttu-id="43562-258">13</span><span class="sxs-lookup"><span data-stu-id="43562-258">13</span></span>|<span data-ttu-id="43562-259">淡いマゼンタ</span><span class="sxs-lookup"><span data-stu-id="43562-259">Light magenta</span></span>|  
|<span data-ttu-id="43562-260">6</span><span class="sxs-lookup"><span data-stu-id="43562-260">6</span></span>|<span data-ttu-id="43562-261">黄</span><span class="sxs-lookup"><span data-stu-id="43562-261">Yellow</span></span>|<span data-ttu-id="43562-262">14</span><span class="sxs-lookup"><span data-stu-id="43562-262">14</span></span>|<span data-ttu-id="43562-263">薄い黄色</span><span class="sxs-lookup"><span data-stu-id="43562-263">Light yellow</span></span>|  
|<span data-ttu-id="43562-264">7</span><span class="sxs-lookup"><span data-stu-id="43562-264">7</span></span>|<span data-ttu-id="43562-265">白</span><span class="sxs-lookup"><span data-stu-id="43562-265">White</span></span>|<span data-ttu-id="43562-266">15</span><span class="sxs-lookup"><span data-stu-id="43562-266">15</span></span>|<span data-ttu-id="43562-267">明るい白</span><span class="sxs-lookup"><span data-stu-id="43562-267">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="43562-268">この例では、`QBColor` 関数を使用して、`colorInteger`によって示される色に変更します。</span><span class="sxs-lookup"><span data-stu-id="43562-268">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="43562-269">`QBColor` は、0から15までの整数値を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="43562-269">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43562-270"><paramref name="Color" /> が 0 ～ 15 (両端を含む) の範囲内の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43562-270"><paramref name="Color" /> is outside of range 0 to 15, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red"><span data-ttu-id="43562-271">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-271">Required.</span></span> <span data-ttu-id="43562-272">赤の色要素の輝度を表す、0 から 255 の範囲の <see langword="Integer" /> 値です。</span><span class="sxs-lookup"><span data-stu-id="43562-272"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the red component of the color.</span></span></param>
        <param name="Green"><span data-ttu-id="43562-273">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-273">Required.</span></span> <span data-ttu-id="43562-274">緑の色要素の輝度を表す、0 から 255 の範囲の <see langword="Integer" /> 値です。</span><span class="sxs-lookup"><span data-stu-id="43562-274"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the green component of the color.</span></span></param>
        <param name="Blue"><span data-ttu-id="43562-275">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-275">Required.</span></span> <span data-ttu-id="43562-276">青の色要素の輝度を表す、0 から 255 の範囲の <see langword="Integer" /> 値です。</span><span class="sxs-lookup"><span data-stu-id="43562-276"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the blue component of the color.</span></span></param>
        <summary><span data-ttu-id="43562-277">赤、緑、青の色要素のセットを受け取り、RGB カラー値を表す <see langword="Integer" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-277">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></summary>
        <returns><span data-ttu-id="43562-278">赤、緑、青の色要素のセットを受け取り、RGB カラー値を表す <see langword="Integer" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-278">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-279">色の指定を受け入れるアプリケーションのメソッドとプロパティは、その仕様が RGB 色の値を表す数値であることを想定しています。</span><span class="sxs-lookup"><span data-stu-id="43562-279">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="43562-280">RGB 色の値は、赤、緑、および青の相対的な輝度を指定して、特定の色が表示されるようにします。</span><span class="sxs-lookup"><span data-stu-id="43562-280">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="43562-281">`RGB` の引数の値が255より大きい場合は、255が使用されます。</span><span class="sxs-lookup"><span data-stu-id="43562-281">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="43562-282">次の表に、標準色と、その中に含まれる赤、緑、および青の値を示します。</span><span class="sxs-lookup"><span data-stu-id="43562-282">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="43562-283">色</span><span class="sxs-lookup"><span data-stu-id="43562-283">Color</span></span>|<span data-ttu-id="43562-284">赤の値</span><span class="sxs-lookup"><span data-stu-id="43562-284">Red value</span></span>|<span data-ttu-id="43562-285">緑の値</span><span class="sxs-lookup"><span data-stu-id="43562-285">Green value</span></span>|<span data-ttu-id="43562-286">青の値</span><span class="sxs-lookup"><span data-stu-id="43562-286">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="43562-287">黒</span><span class="sxs-lookup"><span data-stu-id="43562-287">Black</span></span>|<span data-ttu-id="43562-288">0</span><span class="sxs-lookup"><span data-stu-id="43562-288">0</span></span>|<span data-ttu-id="43562-289">0</span><span class="sxs-lookup"><span data-stu-id="43562-289">0</span></span>|<span data-ttu-id="43562-290">0</span><span class="sxs-lookup"><span data-stu-id="43562-290">0</span></span>|  
|<span data-ttu-id="43562-291">青</span><span class="sxs-lookup"><span data-stu-id="43562-291">Blue</span></span>|<span data-ttu-id="43562-292">0</span><span class="sxs-lookup"><span data-stu-id="43562-292">0</span></span>|<span data-ttu-id="43562-293">0</span><span class="sxs-lookup"><span data-stu-id="43562-293">0</span></span>|<span data-ttu-id="43562-294">255</span><span class="sxs-lookup"><span data-stu-id="43562-294">255</span></span>|  
|<span data-ttu-id="43562-295">緑</span><span class="sxs-lookup"><span data-stu-id="43562-295">Green</span></span>|<span data-ttu-id="43562-296">0</span><span class="sxs-lookup"><span data-stu-id="43562-296">0</span></span>|<span data-ttu-id="43562-297">255</span><span class="sxs-lookup"><span data-stu-id="43562-297">255</span></span>|<span data-ttu-id="43562-298">0</span><span class="sxs-lookup"><span data-stu-id="43562-298">0</span></span>|  
|<span data-ttu-id="43562-299">シアン</span><span class="sxs-lookup"><span data-stu-id="43562-299">Cyan</span></span>|<span data-ttu-id="43562-300">0</span><span class="sxs-lookup"><span data-stu-id="43562-300">0</span></span>|<span data-ttu-id="43562-301">255</span><span class="sxs-lookup"><span data-stu-id="43562-301">255</span></span>|<span data-ttu-id="43562-302">255</span><span class="sxs-lookup"><span data-stu-id="43562-302">255</span></span>|  
|<span data-ttu-id="43562-303">赤</span><span class="sxs-lookup"><span data-stu-id="43562-303">Red</span></span>|<span data-ttu-id="43562-304">255</span><span class="sxs-lookup"><span data-stu-id="43562-304">255</span></span>|<span data-ttu-id="43562-305">0</span><span class="sxs-lookup"><span data-stu-id="43562-305">0</span></span>|<span data-ttu-id="43562-306">0</span><span class="sxs-lookup"><span data-stu-id="43562-306">0</span></span>|  
|<span data-ttu-id="43562-307">マゼンタ</span><span class="sxs-lookup"><span data-stu-id="43562-307">Magenta</span></span>|<span data-ttu-id="43562-308">255</span><span class="sxs-lookup"><span data-stu-id="43562-308">255</span></span>|<span data-ttu-id="43562-309">0</span><span class="sxs-lookup"><span data-stu-id="43562-309">0</span></span>|<span data-ttu-id="43562-310">255</span><span class="sxs-lookup"><span data-stu-id="43562-310">255</span></span>|  
|<span data-ttu-id="43562-311">黄</span><span class="sxs-lookup"><span data-stu-id="43562-311">Yellow</span></span>|<span data-ttu-id="43562-312">255</span><span class="sxs-lookup"><span data-stu-id="43562-312">255</span></span>|<span data-ttu-id="43562-313">255</span><span class="sxs-lookup"><span data-stu-id="43562-313">255</span></span>|<span data-ttu-id="43562-314">0</span><span class="sxs-lookup"><span data-stu-id="43562-314">0</span></span>|  
|<span data-ttu-id="43562-315">白</span><span class="sxs-lookup"><span data-stu-id="43562-315">White</span></span>|<span data-ttu-id="43562-316">255</span><span class="sxs-lookup"><span data-stu-id="43562-316">255</span></span>|<span data-ttu-id="43562-317">255</span><span class="sxs-lookup"><span data-stu-id="43562-317">255</span></span>|<span data-ttu-id="43562-318">255</span><span class="sxs-lookup"><span data-stu-id="43562-318">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="43562-319">この例では、`RGB` 関数を使用して、`RGB` 色の値を表す整数を返す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="43562-319">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="43562-320"><paramref name="Green" />、<paramref name="Blue" /> または <paramref name="Red" /> が 0 ～ 255 (両端を含む) の範囲内の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="43562-320"><paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SystemTypeName(string VbName) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName"><span data-ttu-id="43562-321">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-321">Required.</span></span> <span data-ttu-id="43562-322">Visual Basic の型名を含む <see langword="String" /> 変数です。</span><span class="sxs-lookup"><span data-stu-id="43562-322">A <see langword="String" /> variable containing a Visual Basic type name.</span></span></param>
        <summary><span data-ttu-id="43562-323">変数のシステム データ型名を含む <see langword="String" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-323">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="43562-324">変数のシステム データ型名を含む <see langword="String" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-324">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-325">`SystemTypeName` は、Visual Basic 型名に対応する完全修飾共通言語ランタイム (CLR) 型名を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-325">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="43562-326">たとえば、`VbName` に "Date" が含まれている場合、`SystemTypeName` は "system.string" を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-326">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="43562-327">`SystemTypeName` が `VbName`の値を認識しない場合は、(文字列 "Nothing" ではなく) `Nothing` が返されます。</span><span class="sxs-lookup"><span data-stu-id="43562-327">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-328">次の例では、`SystemTypeName` 関数を使用して、複数の変数のデータ型名を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-328">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="43562-329">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-329">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string TypeName(object VarName) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="43562-330">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-330">Required.</span></span> <span data-ttu-id="43562-331"><see langword="Object" /> 変数。</span><span class="sxs-lookup"><span data-stu-id="43562-331"><see langword="Object" /> variable.</span></span> <span data-ttu-id="43562-332"><see langword="Option Strict" /> が <see langword="Off" /> の場合、構造体以外の任意のデータ型の変数を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="43562-332">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="43562-333">変数に関するデータ型情報を含む <see langword="String" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-333">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></summary>
        <returns><span data-ttu-id="43562-334">変数に関するデータ型情報を含む <see langword="String" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-334">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-335">次の表は、`VarName`のさまざまなコンテンツに対して `TypeName` によって返される `String` 値を示しています。</span><span class="sxs-lookup"><span data-stu-id="43562-335">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="43562-336">`VarName` の内容</span><span class="sxs-lookup"><span data-stu-id="43562-336">`VarName` contents</span></span>|<span data-ttu-id="43562-337">返される文字列</span><span class="sxs-lookup"><span data-stu-id="43562-337">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="43562-338">16ビット `True` または `False` 値の型</span><span class="sxs-lookup"><span data-stu-id="43562-338">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="43562-339">演算</span><span class="sxs-lookup"><span data-stu-id="43562-339">"Boolean"</span></span>|  
|<span data-ttu-id="43562-340">8ビットのバイナリ値型</span><span class="sxs-lookup"><span data-stu-id="43562-340">8-bit binary value type</span></span>|<span data-ttu-id="43562-341">バイト</span><span class="sxs-lookup"><span data-stu-id="43562-341">"Byte"</span></span>|  
|<span data-ttu-id="43562-342">16ビット文字値型</span><span class="sxs-lookup"><span data-stu-id="43562-342">16-bit character value type</span></span>|<span data-ttu-id="43562-343">Char</span><span class="sxs-lookup"><span data-stu-id="43562-343">"Char"</span></span>|  
|<span data-ttu-id="43562-344">64ビットの日付と時刻の値の型</span><span class="sxs-lookup"><span data-stu-id="43562-344">64-bit date and time value type</span></span>|<span data-ttu-id="43562-345">予定</span><span class="sxs-lookup"><span data-stu-id="43562-345">"Date"</span></span>|  
|<span data-ttu-id="43562-346">欠損データまたは存在しないデータを示す参照型</span><span class="sxs-lookup"><span data-stu-id="43562-346">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="43562-347">DBNull</span><span class="sxs-lookup"><span data-stu-id="43562-347">"DBNull"</span></span>|  
|<span data-ttu-id="43562-348">128ビット固定小数点数値型</span><span class="sxs-lookup"><span data-stu-id="43562-348">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="43562-349">位</span><span class="sxs-lookup"><span data-stu-id="43562-349">"Decimal"</span></span>|  
|<span data-ttu-id="43562-350">64ビット浮動小数点数値型</span><span class="sxs-lookup"><span data-stu-id="43562-350">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="43562-351">小数</span><span class="sxs-lookup"><span data-stu-id="43562-351">"Double"</span></span>|  
|<span data-ttu-id="43562-352">32ビット整数値型</span><span class="sxs-lookup"><span data-stu-id="43562-352">32-bit integer value type</span></span>|<span data-ttu-id="43562-353">以外</span><span class="sxs-lookup"><span data-stu-id="43562-353">"Integer"</span></span>|  
|<span data-ttu-id="43562-354">非特殊オブジェクトを指す参照型</span><span class="sxs-lookup"><span data-stu-id="43562-354">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="43562-355">素材</span><span class="sxs-lookup"><span data-stu-id="43562-355">"Object"</span></span>|  
|<span data-ttu-id="43562-356">クラス*objectclass*から作成された特殊なオブジェクトを指す参照型</span><span class="sxs-lookup"><span data-stu-id="43562-356">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="43562-357">"*objectclass*"</span><span class="sxs-lookup"><span data-stu-id="43562-357">"*objectclass*"</span></span>|  
|<span data-ttu-id="43562-358">64ビット整数値型</span><span class="sxs-lookup"><span data-stu-id="43562-358">64-bit integer value type</span></span>|<span data-ttu-id="43562-359">長い</span><span class="sxs-lookup"><span data-stu-id="43562-359">"Long"</span></span>|  
|<span data-ttu-id="43562-360">現在割り当てられているオブジェクトがない参照型</span><span class="sxs-lookup"><span data-stu-id="43562-360">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="43562-361">影響</span><span class="sxs-lookup"><span data-stu-id="43562-361">"Nothing"</span></span>|  
|<span data-ttu-id="43562-362">8ビット符号付き整数値型</span><span class="sxs-lookup"><span data-stu-id="43562-362">8-bit signed integer value type</span></span>|<span data-ttu-id="43562-363">SByte</span><span class="sxs-lookup"><span data-stu-id="43562-363">"SByte"</span></span>|  
|<span data-ttu-id="43562-364">16ビット整数値型</span><span class="sxs-lookup"><span data-stu-id="43562-364">16-bit integer value type</span></span>|<span data-ttu-id="43562-365">短い</span><span class="sxs-lookup"><span data-stu-id="43562-365">"Short"</span></span>|  
|<span data-ttu-id="43562-366">32ビット浮動小数点数値型</span><span class="sxs-lookup"><span data-stu-id="43562-366">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="43562-367">1</span><span class="sxs-lookup"><span data-stu-id="43562-367">"Single"</span></span>|  
|<span data-ttu-id="43562-368">16ビット文字の文字列を指す参照型</span><span class="sxs-lookup"><span data-stu-id="43562-368">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="43562-369">文字列</span><span class="sxs-lookup"><span data-stu-id="43562-369">"String"</span></span>|  
|<span data-ttu-id="43562-370">32ビット符号なし整数値型</span><span class="sxs-lookup"><span data-stu-id="43562-370">32-bit unsigned integer value type</span></span>|<span data-ttu-id="43562-371">UInteger</span><span class="sxs-lookup"><span data-stu-id="43562-371">"UInteger"</span></span>|  
|<span data-ttu-id="43562-372">64ビット符号なし整数値型</span><span class="sxs-lookup"><span data-stu-id="43562-372">64-bit unsigned integer value type</span></span>|<span data-ttu-id="43562-373">ULong</span><span class="sxs-lookup"><span data-stu-id="43562-373">"ULong"</span></span>|  
|<span data-ttu-id="43562-374">16ビット符号なし整数値型</span><span class="sxs-lookup"><span data-stu-id="43562-374">16-bit unsigned integer value type</span></span>|<span data-ttu-id="43562-375">UShort</span><span class="sxs-lookup"><span data-stu-id="43562-375">"UShort"</span></span>|  
  
 <span data-ttu-id="43562-376">`VarName` が配列の場合、返される文字列には、前の表に示す空のかっこが追加された文字列のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="43562-376">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="43562-377">たとえば、`VarName` が整数の配列を指している場合、`TypeName` は "Integer ()" を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-377">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="43562-378">`TypeName` が、クラスなどの参照型の名前を返すと、修飾名ではなく、名前だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="43562-378">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="43562-379">たとえば、`VarName` が <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>クラスのオブジェクトを指している場合、`TypeName` は "Pagesource" を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-379">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="43562-380">変数が特定のクラス型として宣言されていても、オブジェクトが割り当てられていない場合、`TypeName` は "Nothing" を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-380">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-381">次の例では、`TypeName` 関数を使用して、いくつかの変数に関するデータ型情報を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-381">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="43562-382">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-382">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 UBound(class System.Array Array, int32 Rank) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="43562-383">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-383">Required.</span></span> <span data-ttu-id="43562-384">任意のデータ型の配列です。</span><span class="sxs-lookup"><span data-stu-id="43562-384">Array of any data type.</span></span> <span data-ttu-id="43562-385">ある次元で最も大きいインデックスを探す対象となる配列です。</span><span class="sxs-lookup"><span data-stu-id="43562-385">The array in which you want to find the highest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="43562-386">任意。</span><span class="sxs-lookup"><span data-stu-id="43562-386">Optional.</span></span> <span data-ttu-id="43562-387"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="43562-387"><see langword="Integer" />.</span></span> <span data-ttu-id="43562-388">最も大きいインデックスが返される次元です。</span><span class="sxs-lookup"><span data-stu-id="43562-388">The dimension for which the highest possible subscript is to be returned.</span></span> <span data-ttu-id="43562-389">1 番目の次元の場合は 1、2 番目の次元の場合は 2 という形で指定します。</span><span class="sxs-lookup"><span data-stu-id="43562-389">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="43562-390"><paramref name="Rank" /> を省略した場合、1 が使用されます。</span><span class="sxs-lookup"><span data-stu-id="43562-390">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="43562-391">配列内の指定された次元における最も大きいインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="43562-391">Returns the highest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="43562-392"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="43562-392"><see langword="Integer" />.</span></span> <span data-ttu-id="43562-393">指定した次元に設定できるインデックスの最大値です。</span><span class="sxs-lookup"><span data-stu-id="43562-393">The highest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="43562-394"><paramref name="Array" /> に要素が 1 つしかない場合、<see langword="UBound" /> は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-394">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span></span> <span data-ttu-id="43562-395"><paramref name="Array" /> に要素が存在しない場合 (長さ 0 の文字列の場合など)、<see langword="UBound" /> は -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-395">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-396">配列の添字は0から始まるため、次元の長さは、その次元で使用可能な最大のインデックスよりも大きくなります。</span><span class="sxs-lookup"><span data-stu-id="43562-396">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="43562-397">次の次元の配列の場合、`UBound` は次の表の値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-397">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="43562-398">UBound への呼び出し</span><span class="sxs-lookup"><span data-stu-id="43562-398">Call to UBound</span></span>|<span data-ttu-id="43562-399">戻り値</span><span class="sxs-lookup"><span data-stu-id="43562-399">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="43562-400">100</span><span class="sxs-lookup"><span data-stu-id="43562-400">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="43562-401">5</span><span class="sxs-lookup"><span data-stu-id="43562-401">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="43562-402">4</span><span class="sxs-lookup"><span data-stu-id="43562-402">4</span></span>|  
  
 <span data-ttu-id="43562-403">`UBound` を使用すると、配列内の要素の合計数を確認できますが、添字が0から始まるという事実を考慮して、返される値を調整する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43562-403">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="43562-404">次の例では、前の例で `a` 配列の合計サイズを計算します。</span><span class="sxs-lookup"><span data-stu-id="43562-404">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="43562-405">`total` に対して計算される値は3030で、101 \* 6 \* 5 です。</span><span class="sxs-lookup"><span data-stu-id="43562-405">The value calculated for `total` is 3030, which is 101 \* 6 \* 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-406">次の例では、`UBound` 関数を使用して、配列の指定した次元で使用できる最大の添字を決定します。</span><span class="sxs-lookup"><span data-stu-id="43562-406">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="43562-407"><paramref name="Array" /> が <see langword="Nothing" /> です。</span><span class="sxs-lookup"><span data-stu-id="43562-407"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="43562-408"><paramref name="Rank" /> が 1 未満か、<paramref name="Rank" /> が <paramref name="Array" /> のランクを超えています。</span><span class="sxs-lookup"><span data-stu-id="43562-408"><paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="43562-409">Dim ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-409">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="43562-410">ReDim ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-410">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="43562-411">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-411">Required.</span></span> <span data-ttu-id="43562-412"><see langword="Object" /> 変数。</span><span class="sxs-lookup"><span data-stu-id="43562-412"><see langword="Object" /> variable.</span></span> <span data-ttu-id="43562-413"><see langword="Option Strict" /> が <see langword="Off" /> の場合、構造体以外の任意のデータ型の変数を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="43562-413">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="43562-414">変数のデータ型の分類を含む <see langword="Integer" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-414">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></summary>
        <returns><span data-ttu-id="43562-415">変数のデータ型の分類を含む <see langword="Integer" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-415">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-416">`VarType` によって返される整数値は、<xref:Microsoft.VisualBasic.VariantType>のメンバーです。</span><span class="sxs-lookup"><span data-stu-id="43562-416">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="43562-417">次の表は、`VarName`の特殊なケースに対して `VarType` によって返される値を示しています。</span><span class="sxs-lookup"><span data-stu-id="43562-417">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="43562-418">`VarName` によって表されるデータ型</span><span class="sxs-lookup"><span data-stu-id="43562-418">Data type represented by `VarName`</span></span>|<span data-ttu-id="43562-419">`VarType` によって返される値</span><span class="sxs-lookup"><span data-stu-id="43562-419">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="43562-420">Nothing</span><span class="sxs-lookup"><span data-stu-id="43562-420">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="43562-421">列挙</span><span class="sxs-lookup"><span data-stu-id="43562-421">Enumeration</span></span>|<span data-ttu-id="43562-422">基になるデータ型 (`SByte`、`Byte`、`Short`、`UShort`、`Integer`、`UInteger`、`Long`、`ULong`)</span><span class="sxs-lookup"><span data-stu-id="43562-422">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="43562-423">配列</span><span class="sxs-lookup"><span data-stu-id="43562-423">Array</span></span>|<span data-ttu-id="43562-424">配列要素型および `VariantType.Array` のビットごとの OR</span><span class="sxs-lookup"><span data-stu-id="43562-424">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="43562-425">配列の配列</span><span class="sxs-lookup"><span data-stu-id="43562-425">Array of arrays</span></span>|<span data-ttu-id="43562-426">`VariantType.Object` と `VariantType.Array` のビットごとの OR</span><span class="sxs-lookup"><span data-stu-id="43562-426">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="43562-427">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="43562-427">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="43562-428">不明</span><span class="sxs-lookup"><span data-stu-id="43562-428">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="43562-429">次の例では、`VarType` 関数を使用して、いくつかの変数に関するデータ型の分類情報を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-429">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="43562-430">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-430">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VbTypeName(string UrtName) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName"><span data-ttu-id="43562-431">必須です。</span><span class="sxs-lookup"><span data-stu-id="43562-431">Required.</span></span> <span data-ttu-id="43562-432">共通言語ランタイムにより使用される型名を含む <see langword="String" /> 変数。</span><span class="sxs-lookup"><span data-stu-id="43562-432"><see langword="String" /> variable containing a type name used by the common language runtime.</span></span></param>
        <summary><span data-ttu-id="43562-433">変数の Visual Basic データ型名を含む <see langword="String" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-433">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="43562-434">変数の Visual Basic データ型名を含む <see langword="String" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-434">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43562-435">`VbTypeName` は、共通言語ランタイムの型名に対応する Visual Basic 型名を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-435">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="43562-436">たとえば、`UrtName` に "Int32" または "system.string" が含まれている場合、`VbTypeName` は "Integer" を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-436">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="43562-437">`VbTypeName` が `UrtName`の値を認識しない場合は、(文字列 "Nothing" ではなく) `Nothing` が返されます。</span><span class="sxs-lookup"><span data-stu-id="43562-437">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="43562-438">`UrtName` の型名は、<xref:System.Type> クラスの <xref:System.Reflection.MemberInfo> 配列の <xref:System.Reflection.MemberInfo.Name%2A> プロパティなど、さまざまなソースから取得できます。</span><span class="sxs-lookup"><span data-stu-id="43562-438">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43562-439">次の例では、`VbTypeName` 関数を使用して、複数の変数のデータ型名を返します。</span><span class="sxs-lookup"><span data-stu-id="43562-439">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="43562-440">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="43562-440">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
