<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f3d8336fb3091707bd9291d357c0518485ad5c9" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83951658" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Strings extends System.Object" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netcore-3.1;net-5.0">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Strings" /> モジュールに含まれるプロシージャを使って、文字列操作を実行します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このモジュールは、文字列を操作する Visual Basic 言語キーワードとランタイムライブラリメンバーをサポートしています。  
  
   
  
## Examples  
 次の例では、文字列をスペースで分割する方法を示します。  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/">キーワード (Visual Basic)</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/runtime-library-members">ランタイムライブラリのメンバーの Visual Basic</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字に対応する文字コードを表す整数値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Asc(char String) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="String">必須。 任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。 <paramref name="String" /> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。 <paramref name="String" /> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</param>
        <summary>文字に対応する文字コードを表す整数値を返します。</summary>
        <returns>文字に対応する文字コードです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` は、入力文字の*コードポイント*(文字コード) を返します。 1バイト文字セット (SBCS) の値には 0 ~ 255、2バイト文字セット (DBCS) の値には-32768 ~ 32767 の値を指定できます。  
  
 `AscW` は、入力文字の Unicode コードポイントを返します。 0 ~ 65535 を指定できます。 返される値は、現在のスレッドのカルチャおよびコードページ設定とは無関係です。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `AscB` 関数は、文字ではなく、バイトのコードを返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 Visual Basic 2005 文字列はすべて Unicode 形式で、`AscB` はサポートされなくなりました。  
  
   
  
## Examples  
 次の例では、`Asc` 関数を使用して、各文字列の最初の文字に対応する `Integer` 文字コードを返します。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/">関数 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Asc(string String) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="String">必須。 任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。 <paramref name="String" /> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。 <paramref name="String" /> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</param>
        <summary>文字に対応する文字コードを表す整数値を返します。</summary>
        <returns>文字に対応する文字コードです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` は、入力文字の*コードポイント*(文字コード) を返します。 1バイト文字セット (SBCS) の値には 0 ~ 255、2バイト文字セット (DBCS) の値には-32768 ~ 32767 の値を指定できます。  
  
 `AscW` は、入力文字の Unicode コードポイントを返します。 0 ~ 65535 を指定できます。 返される値は、現在のスレッドのカルチャおよびコードページ設定とは無関係です。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `AscB` 関数は、文字ではなく、バイトのコードを返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 Visual Basic 2005 文字列はすべて Unicode 形式で、`AscB` はサポートされなくなりました。  
  
   
  
## Examples  
 次の例では、`Asc` 関数を使用して、各文字列の最初の文字に対応する `Integer` 文字コードを返します。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/">関数 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字に対応する文字コードを表す整数値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AscW(char String) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">必須。 任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。 <paramref name="String" /> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。 <paramref name="String" /> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</param>
        <summary>文字に対応する文字コードを表す整数値を返します。</summary>
        <returns>文字に対応する文字コードです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` は、入力文字の*コードポイント*(文字コード) を返します。 1バイト文字セット (SBCS) の値には 0 ~ 255、2バイト文字セット (DBCS) の値には-32768 ~ 32767 の値を指定できます。  
  
 `AscW` は、入力文字の Unicode コードポイントを返します。 0 ~ 65535 を指定できます。 返される値は、現在のスレッドのカルチャおよびコードページ設定とは無関係です。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `AscB` 関数は、文字ではなく、バイトのコードを返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 Visual Basic 2005 文字列はすべて Unicode 形式で、`AscB` はサポートされなくなりました。  
  
   
  
## Examples  
 次の例では、`Asc` 関数を使用して、各文字列の最初の文字に対応する `Integer` 文字コードを返します。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/">関数 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AscW(string String) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">必須。 任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。 <paramref name="String" /> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。 <paramref name="String" /> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</param>
        <summary>文字に対応する文字コードを表す整数値を返します。</summary>
        <returns>文字に対応する文字コードです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` は、入力文字の*コードポイント*(文字コード) を返します。 1バイト文字セット (SBCS) の値には 0 ~ 255、2バイト文字セット (DBCS) の値には-32768 ~ 32767 の値を指定できます。  
  
 `AscW` は、入力文字の Unicode コードポイントを返します。 0 ~ 65535 を指定できます。 返される値は、現在のスレッドのカルチャおよびコードページ設定とは無関係です。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `AscB` 関数は、文字ではなく、バイトのコードを返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 Visual Basic 2005 文字列はすべて Unicode 形式で、`AscB` はサポートされなくなりました。  
  
   
  
## Examples  
 次の例では、`Asc` 関数を使用して、各文字列の最初の文字に対応する `Integer` 文字コードを返します。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/">関数 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char Chr(int32 CharCode) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="CharCode">必須。 文字の <c>code point</c> (文字コード) を表す <see langword="Integer" /> 型の式。</param>
        <summary>指定された文字コードに対応する文字を返します。</summary>
        <returns>指定された文字コードに対応する文字です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CharCode` に許容される非対称範囲は、`Short` と `Integer`間のストレージの違いを補正します。 たとえば、-29183 は `Short` ですが、+ 36353 は `Integer`です。 これにより、Visual Basic 6.0 との互換性も容易になります。  
  
 `Chr` は、<xref:System.Text?displayProperty=nameWithType> 名前空間の <xref:System.Text.Encoding> クラスを使用して、現在のスレッドが1バイト文字セット (SBCS) と2バイト文字セット (DBCS) のどちらを使用しているかを判断します。 次に、適切なセット内のコードポイントとして `CharCode` を実行します。 範囲は、SBCS 文字の場合は 0 ~ 255、DBCS 文字の場合は-32768 ~ 65535 です。  
  
 戻り値は、現在のスレッドのコードページによって異なります。これは、<xref:System.Globalization> 名前空間の <xref:System.Globalization.TextInfo> クラスの <xref:System.Globalization.TextInfo.ANSICodePage%2A> プロパティに含まれています。 `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`を指定することによって、<xref:System.Globalization.TextInfo.ANSICodePage%2A> を取得できます。  
  
 `ChrW` は、`CharCode` を Unicode コードポイントとして受け取ります。 範囲は、現在のスレッドのカルチャとコードページの設定とは関係がありません。 -32768 から-1 の値は、+ 32768 から + 65535 までの範囲の値と同じように扱われます。  
  
 0 ~ 31 の数値は、標準の印刷されない ASCII コードと同じです。 たとえば、`Chr(10)` はラインフィード文字を返します。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `ChrB` 関数は、1バイトを返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 Visual Basic と .NET Framework 内のすべての文字列は Unicode 形式であり、`ChrB` はサポートされなくなりました。  
  
   
  
## Examples  
 次の例では、`Chr` 関数を使用して、指定された文字コードに関連付けられた文字を返します。  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="Chr" /> の <paramref name="CharCode" /> は、&lt; 0 または &gt; 255。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ChrW(int32 CharCode) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">必須。 文字の <c>code point</c> (文字コード) を表す <see langword="Integer" /> 型の式。</param>
        <summary>指定された文字コードに対応する文字を返します。</summary>
        <returns>指定された文字コードに対応する文字です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CharCode` に許容される非対称範囲は、`Short` と `Integer`間のストレージの違いを補正します。 たとえば、-29183 は `Short` ですが、+ 36353 は `Integer`です。 これにより、Visual Basic 6.0 との互換性も容易になります。  
  
 `Chr` は、<xref:System.Text?displayProperty=nameWithType> 名前空間の <xref:System.Text.Encoding> クラスを使用して、現在のスレッドが1バイト文字セット (SBCS) と2バイト文字セット (DBCS) のどちらを使用しているかを判断します。 次に、適切なセット内のコードポイントとして `CharCode` を実行します。 範囲は、SBCS 文字の場合は 0 ~ 255、DBCS 文字の場合は-32768 ~ 65535 です。  
  
 戻り値は、現在のスレッドのコードページによって異なります。これは、<xref:System.Globalization> 名前空間の <xref:System.Globalization.TextInfo> クラスの <xref:System.Globalization.TextInfo.ANSICodePage%2A> プロパティに含まれています。 `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`を指定することによって、<xref:System.Globalization.TextInfo.ANSICodePage%2A> を取得できます。  
  
 `ChrW` は、`CharCode` を Unicode コードポイントとして受け取ります。 範囲は、現在のスレッドのカルチャとコードページの設定とは関係がありません。 -32768 から-1 の値は、+ 32768 から + 65535 までの範囲の値と同じように扱われます。  
  
 0 ~ 31 の数値は、標準の印刷されない ASCII コードと同じです。 たとえば、`Chr(10)` はラインフィード文字を返します。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `ChrB` 関数は、1バイトを返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 Visual Basic と .NET Framework 内のすべての文字列は Unicode 形式であり、`ChrB` はサポートされなくなりました。  
  
   
  
## Examples  
 次の例では、`Chr` 関数を使用して、指定された文字コードに関連付けられた文字を返します。  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="ChrW" /> の <paramref name="CharCode" /> は、&lt; -32768 または &gt; 65535。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">必須。 検索対象の文字列の 1 次元配列。</param>
        <param name="Match">必須。 検索する文字列。</param>
        <param name="Include">省略可能。 戻り値の部分文字列に <paramref name="Match" /> を含むか含まないかを指定する <see langword="Boolean" /> 値。 <paramref name="Include" /> が <see langword="True" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <paramref name="Match" /> を含む配列のサブセットを返します。 <paramref name="Include" /> が <see langword="False" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <paramref name="Match" /> を含まない配列のサブセットを返します。</param>
        <param name="Compare">省略可能。 使用する文字列比較の種類を示す数値。 値については、「設定」を参照してください。</param>
        <summary>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</summary>
        <returns>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source`内に `Match` の一致が見つからない場合、`Filter` 関数は空の配列を返します。 `Source` が `Nothing` に設定されているか、1次元配列ではない場合、エラーが発生します。  
  
 `Filter` 関数によって返される配列には、一致する項目の数を格納するのに十分な要素のみが含まれています。  
  
 `Compare` 引数には、次の値を指定できます。  
  
|常時|説明|  
|-|-|  
|常時|説明|  
|`CompareMethod.Binary`|バイナリ比較を実行します|  
|`CompareMethod.Text`|テキスト比較を実行します。|  
  
   
  
## Examples  
 この例では、`Filter` 関数の使用方法を示します。  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> が <see langword="Nothing" /> であるか、1 次元の配列ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">必須。 検索対象の文字列の 1 次元配列。</param>
        <param name="Match">必須。 検索する文字列。</param>
        <param name="Include">省略可能。 戻り値の部分文字列に <paramref name="Match" /> を含むか含まないかを指定する <see langword="Boolean" /> 値。 <paramref name="Include" /> が <see langword="True" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <paramref name="Match" /> を含む配列のサブセットを返します。 <paramref name="Include" /> が <see langword="False" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <paramref name="Match" /> を含まない配列のサブセットを返します。</param>
        <param name="Compare">省略可能。 使用する文字列比較の種類を示す数値。 値については、「設定」を参照してください。</param>
        <summary>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</summary>
        <returns>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source`内に `Match` の一致が見つからない場合、`Filter` 関数は空の配列を返します。 `Source` が `Nothing` に設定されているか、1次元配列ではない場合、エラーが発生します。  
  
 `Filter` 関数によって返される配列には、一致する項目の数を格納するのに十分な要素のみが含まれています。  
  
 `Compare` 引数には、次の値を指定できます。  
  
|常時|説明|  
|-|-|  
|`CompareMethod.Binary`|バイナリ比較を実行します|  
|`CompareMethod.Text`|テキスト比較を実行します。|  
  
   
  
## Examples  
 この例では、`Filter` 関数の使用方法を示します。  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> が <see langword="Nothing" /> であるか、1 次元の配列ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(object Expression, string Style) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Style" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必須。 任意の有効な式。</param>
        <param name="Style">省略可能。 有効な名前の付いた、またはユーザー定義による <see langword="String" /> 型の書式指定式</param>
        <summary>書式指定文字列 (<see langword="String" />) 式に含まれる指示に従って書式設定された文字列を返します。</summary>
        <returns>書式指定文字列 (<see langword="String" />) 式に含まれる指示に従って書式設定された文字列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType> メソッドは同様の機能も提供します。  
  
 ローカライズされていない数値文字列を書式設定する場合は、ユーザー定義の数値書式を使用して、希望どおりの外観にする必要があります。  
  
 `Style`を指定せずに数値の書式を設定しようとすると、`Format` 関数は、`Str` 関数と同様の機能を提供しますが、これは国際的に認識されます。 ただし、`Format` 関数を使用して文字列として書式設定された正の数値には、値の符号用に予約されている先頭のスペースは含まれません。`Str` 関数を使用して変換された関数は、先頭のスペースを保持します。  
  
## <a name="different-formats-for-different-numeric-values"></a>異なる数値に対する異なる形式  
 ユーザー定義の数値書式には、セミコロンで区切って最大 3 つのセクションを含めることができます。 `Format` 関数の `Style` 引数に定義済みの数値形式のいずれかが含まれている場合は、1つのセクションのみが許可されます。  
  
|使用するセクション|結果|  
|-|-|  
|1 つのセクションのみ|このフォーマット式は、すべての値に適用されます。|  
|2 つのセクション|最初のセクションは正の値と0に適用されます。2つ目は負の値に適用されます。|  
|3 つのセクション|最初のセクションは正の値に適用され、2番目のセクションは負の値に適用され、3番目のセクションは0に適用されます。|  
  
 次の例には2つのセクションがあります。1つ目は、正の値と0の形式を定義します。2番目のセクションでは、負の値の形式を定義します。 `Format` 関数の `Style` 引数は文字列を受け取るため、引用符で囲まれています。  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 これらの間に何も含まれていないセミコロンを含めると、不足しているセクションが正の値の形式で出力されます。 たとえば、次の形式では、最初のセクションの書式を使用して正と負の値が表示され、値が0の場合は `Zero` が表示されます。  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>定義済みの数値書式  
 次の表は、定義済み数値書式の名前を示しています。 これらは、名前によって `Format` 関数の `Style` 引数として使用される場合があります。  
  
|書式名|説明|  
|-|-|  
|`General Number`、`G`、または `g`|桁区切り記号を付けずに数値を表示します。<br /><br /> たとえば、`Format(&H3FA, "g")` では `1018` が返されます。|  
|`Currency`、`C`、または `c`|必要に応じて、数値を桁区切り記号付きで表示します。小数点区切り文字の右側に2桁の数字が表示されます。 出力はシステムのロケール設定に基づきます。<br /><br /> たとえば、`Format(1234567, "c")` では `$1,234,567.00` が返されます。|  
|`Fixed`、`F`、または `f`|少なくとも、小数点区切り記号の左側に 1 桁、右側に 2 桁の数字を表示します。<br /><br /> たとえば、`Format(1234567, "f")` では `1234567.00` が返されます。|  
|`Standard`、`N`、または `n`|数値を桁区切り記号付きで表示します。少なくとも1つの数字を左に1桁、小数点区切り文字の右側に2桁の数字を表示します。<br /><br /> たとえば、`Format(1234567, "n")` では `1,234,567.00` が返されます。|  
|`Percent`|数値を 100 倍して、右側にパーセント記号 (%) を付けて表示します。小数点区切り記号の右側に、常に 2 桁の数字を表示します。<br /><br /> たとえば、`Format(0.4744, "Percent")` では `47.44%` が返されます。|  
|`P` または `p`|数値を 100 倍して桁区切り記号を付け、数値の右側にスペース 1 文字とパーセント記号 (%) を表示します。小数点区切り記号の右側に、常に 2 桁の数字を表示します。<br /><br /> たとえば、`Format(0.80345, "p")` では `80.35 %` が返されます。|  
|`Scientific`|標準的な科学的表記法を使用します。有効桁数は 2 桁です。<br /><br /> たとえば、`Format(1234567, "Scientific")` では `1.23E+06` が返されます。|  
|`E` または `e`|標準的な科学的表記法を使用します。有効桁数は 6 桁です。<br /><br /> たとえば、`Format(1234567, "e")` では `1.234567e+006` が返されます。|  
|`D` または `d`|数値を 10 進数形式の値を格納する文字列として表示します。 このオプションは、整数型 (`Byte`、`Short`、`Integer`、`Long`) でのみサポートされています。<br /><br /> たとえば、`Format(&H7F, "d")` では `127` が返されます。|  
|`X` または `x`|数値を 16 進数形式の値を格納する文字列として表示します。 このオプションは、整数型 (`Byte`、`Short`、`Integer`、`Long`) でのみサポートされています。<br /><br /> たとえば、`Format(127, "x")` では `7f` が返されます。|  
|`Yes/No`|数値が0の場合に `No` を表示します。それ以外の場合は `Yes`が表示されます。<br /><br /> たとえば、`Format(0, "Yes/No")` では `No` が返されます。|  
|`True/False`|数値が0の場合に `False` を表示します。それ以外の場合は `True`が表示されます。<br /><br /> たとえば、`Format(1, "True/False")` では `True` が返されます。|  
|`On/Off`|数値が0の場合に `Off` を表示します。それ以外の場合は `On`が表示されます。<br /><br /> たとえば、`Format(1, "On/Off")` では `On` が返されます。|  
  
### <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Yes/No`、`True/False`、および `On/Off` 形式はサポートされていません。  
  
## <a name="user-defined-numeric-formats"></a>ユーザー定義の数値書式  
 次の表は、ユーザー定義の数値書式の作成に使用できる文字を示しています。 これらは、`Format` 関数の `Style` 引数を構築するために使用できます。  
  
|文字|説明|  
|-|-|  
|なし|書式なしで数値を表示します。|  
|(`0`)|数字のプレースホルダー。 数字または 0 が表示されます。 式の位置に、書式指定文字列にゼロが含まれている数字がある場合は、それを表示します。それ以外の場合は、その位置に0が表示されます。<br /><br /> 小数点の両側について、数字の桁数がフォーマット式の 0 の数より少ない数値の場合は、値の先頭または後ろに 0 が表示されます。 小数点区切り文字の右側の桁数がフォーマット式の小数点区切り文字の右側の 0 の数より多い数値の場合は、小数点以下の桁数が 0 の数と同じになるように丸められます。 小数点区切り文字の左側の桁数が、フォーマット式の小数点区切り文字の左側の 0 の数より多い数値の場合は、小数点以上の桁数がそのまま表示されます。|  
|(`#`)|数字のプレースホルダー。 数字が表示されるか、何も表示されません。 式の `#` 文字が書式文字列に含まれる位置に数字がある場合は、それが表示されます。それ以外の場合、その位置には何も表示されません。<br /><br /> この記号は、`0` digit プレースホルダーと同様に機能します。ただし、数値の桁数が、フォーマット式の小数点区切り記号の両側にある `#` 文字の数よりも小さい場合、先頭と末尾のゼロは表示されません。|  
|(`.`)|小数点のプレースホルダー。 小数点区切り文字の左右に表示される数字の桁数を決定する、小数点のプレースホルダーです。 書式式がこの記号の左側に `#` 文字のみを含む場合は。1より小さい数値は、小数点区切り文字で始まります。 小数部の前に 0 を表示するには、小数点区切り文字の左側に使用する最初の数字プレースホルダーとしてゼロ (0) を使用してください。 いくつかのロケールでは、小数点区切り文字としてコンマが使用されます。 書式設定された出力で実際にどの文字が小数点のプレースホルダーとして使用されるかは、使用しているシステムで認識される数値書式によって決まります。 したがって、小数点のプレースホルダーとしてコンマを使用するロケールの場合でも、書式では小数点のプレースホルダーとしてピリオドを使用してください。 書式設定された文字列は、ロケールに適した書式で表示されます。|  
|(`%`)|パーセントのプレースホルダー。 式に 100 を乗算します。 書式指定文字列内の位置にパーセント文字 (`%`) が挿入されます。|  
|(`,`)|桁区切り記号。 桁区切り記号は、小数点区切り文字の左側が 4 桁以上である数値の中で、百の位と千の位を区切ります。 数字のプレースホルダー (`0` または `#`) で桁区切り記号が含まれている場合は、桁区切り記号の標準的な使用法が指定されます。<br /><br /> 小数が指定されているかどうかに関係なく、小数点区切り文字のすぐ左側または文字列の右端の文字として桁区切り記号を使用すると、「数値を 1000 で除算して、必要に応じて丸める」という意味になります。 1000よりも小さいが、500以上の数値は `1`として表示され、500よりも小さい数値は `0`として表示されます。 この位置で 2 つの連続する桁区切り記号を使用すると、100 万分の 1 の数値になり、区切り記号を 1 つ追加するごとに値が 1,000 分の 1 になります。<br /><br /> 小数点区切り文字のすぐ左側または文字列の右端の位置以外の位置に複数の桁区切り記号を使用すると、1 つの桁区切り記号を指定しているものとして扱われます。 ロケールによっては、桁区切り記号としてピリオドが使用されます。 書式設定された出力で実際にどの文字が桁区切り記号として使用されるかは、使用しているシステムで認識される数値書式によって決まります。 したがって、桁区切り記号としてピリオドを使用するロケールの場合でも、書式では桁区切り記号としてコンマを使用してください。 書式設定された文字列は、ロケールに適した書式で表示されます。<br /><br /> 例として、以下に 3 つの書式設定文字列を挙げます。<br /><br /> -   `"#,0."`。桁区切り記号を使用して、数値1億を文字列 "1億" として書式設定します。<br />-   `"#0,."`では、スケールを使用して1000の係数を使用し、数値1億を文字列 "10万" として書式設定します。<br />-   `"#,0,."`では、桁区切り記号と1000によるスケーリングを使用して、数値1億を文字列 "10万" として書式設定します。|  
|(`:`)|時刻の区切り記号。 ロケールによっては、時刻の区切り記号を表すために他の文字が使用されます。 時刻の区切り記号は、時刻値の書式設定時に、時、分、および秒を区切ります。 書式設定された出力で実際にどの文字が時刻区切り記号として使用されるかは、使用しているシステム設定によって決まります。|  
|(`/`)|日付の区切り記号。 ロケールによっては、日付の区切り記号を表すために他の文字が使用されます。 日付の区切り記号は、日付値の書式設定時に、日、月、および年を区切ります。 書式設定された出力で実際にどの文字が日付の区切り記号として使用されるかは、使用しているシステム設定によって決まります。|  
|(`E-``E+``e-``e+`)|指数書式。 書式式に、`E-`、`E+`、`e-`、または `e+`の左側に少なくとも1つの数字のプレースホルダー (`0` または `#`) が含まれている場合は、数値が科学的形式で表示され、数値と指数の間に `E` が挿入されます。`e` 左側にある数字のプレースホルダーの数によって指数部の桁数が決まります。 負の指数の横にマイナス記号を付けるには、`E-` または `e-` を使用します。 負の指数の横にマイナス記号を付け、正の指数の横にプラス記号を付けるには、`E+` または `e+` を使用します。 正しく書式設定するには、この記号の右側にも数字のプレースホルダーを挿入する必要があります。|  
|`-` `+` `$` ()|リテラル文字。 リテラル文字は、書式設定文字列に入力されたとおりに表示されます。 一覧に表示されていない文字を表示するには、その文字の前に円記号 (`\`) を付けるか、二重引用符 ("") で囲みます。|  
|(`\`)|書式文字列の次の文字を表示します。 リテラル文字として特別な意味を持つ文字を表示するには、その文字の前に円記号 (`\`) を付けます。 円記号自体は表示されません。 円記号の使用は、次の文字を二重引用符で囲むことと同じです。 円記号を表示するには、2つの円記号 (`\\`) を使用します。<br /><br /> リテラル文字として表示できない文字の例としては、日付と時刻の書式設定文字 (`a`、`c`、`d`、`h`、`m`、`n`、`p`、`q`、`s`、`t`、`w`)、数値の書式設定文字 (`y`、`/`、`:`、`#`、`0`、コンマ、およびピリオド) と、文字列の書式設定文字 (`%`、`E`、`e`、`@`、`&`)。`<``>``!`|  
|(`"``ABC``"`)|二重引用符 ("") 内の文字列を表示します。 コード内からスタイル引数に文字列を含めるには、`Chr(34)` を使用してテキストを囲む必要があります (`34` は引用符 (") の文字コードです)。|  
  
### <a name="legacy-code-example"></a>レガシ コードの例  
 次の表に、数値のフォーマット式のサンプルをいくつか示します (これらの例では、システムのロケール設定が英語-U. S であることを前提としています)。最初の列には、`Format` 関数の `Style` 引数の書式文字列が含まれています。その他の列には、書式設定されたデータに列見出しの値が指定されている場合、結果として得られる出力が格納されます。  
  
|形式 (`Style`)|"5" を書式設定|"-5" を書式設定|"0.5" を書式設定|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>定義済みの日付/時刻形式  
 定義済みの日付/時刻書式名を次の表に示します。 これらは、名前によって `Format` 関数のスタイル引数として使用される場合があります。  
  
|書式名|説明|  
|-|-|  
|`General Date` または `G`|日付か時刻、または両方を表示します。 たとえば、「 `3/12/2008 11:07:31 AM` 」のように入力します。 日付表示はアプリケーションの現在のカルチャの値で決まります。|  
|`Long Date`、`Medium Date`、または `D`|現在のカルチャの長い日付形式に従って日付を表示します。 たとえば、「 `Wednesday, March 12, 2008` 」のように入力します。|  
|`Short Date` または `d`|現在のカルチャの短い日付形式に従って日付を表示します。 たとえば、「 `3/12/2008` 」のように入力します。<br /><br /> `d` 文字は、ユーザー定義の日付形式で日を表示します。|  
|`Long Time`、`Medium Time`、または `T`|現在のカルチャの長い時刻書式に従って、通常、時分秒を含む時刻を表示します。 たとえば、「 `11:07:31 AM` 」のように入力します。|  
|`Short Time` または `t`|現在のカルチャの短い時刻書式に従って時刻を表示します。 たとえば、「 `11:07 AM` 」のように入力します。<br /><br /> `t` 文字は、ユーザー定義の時刻形式で12時間制を使用するロケールの `AM` または `PM` 値を表示します。|  
|`f`|現在のカルチャの書式に従って、長い日付と短い時刻を表示します。 たとえば、「 `Wednesday, March 12, 2008 11:07 AM` 」のように入力します。|  
|`F`|現在のカルチャの書式に従って長い日付と長い時刻を表示します。 たとえば、「 `Wednesday, March 12, 2008 11:07:31 AM` 」のように入力します。|  
|`g`|現在のカルチャの書式に従って、短い日付と短い時刻を表示します。 たとえば、「 `3/12/2008 11:07 AM` 」のように入力します。|  
|`M`, `m`|月と日を表示します。 たとえば、「 `March 12` 」のように入力します。<br /><br /> `M` 文字は、ユーザー定義の日付形式で月を表示します。 `m` 文字は、ユーザー定義の時刻形式で分を表示します。|  
|`R`, `r`|<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> プロパティに従って日付の書式を設定します。 たとえば、「 `Wed, 12 Mar 2008 11:07:31 GMT` 」のように入力します。 書式設定された日付では、日付と時刻の値は調整されません。 `Format` 関数を呼び出す前に、日付/時刻値を GMT に調整する必要があります。|  
|`s`|日付と時刻を並べ替え可能なインデックスとして設定します。 たとえば、「 `2008-03-12T11:07:31` 」のように入力します。<br /><br /> `s` 文字は、ユーザー定義の時刻形式で秒を表示します。|  
|`u`|日付と時刻を GMT 形式の並べ替え可能なインデックスとして設定します。 たとえば、「 `2008-03-12 11:07:31Z` 」のように入力します。|  
|`U`|日付と時刻を GMT 形式の長い日付と長い時刻で設定します。 たとえば、「 `Wednesday, March 12, 2008 6:07:31 PM` 」のように入力します。|  
|`Y`, `y`|日付を年と月として設定します。 たとえば、「 `March, 2008` 」のように入力します。<br /><br /> `Y` と `y` 文字は、ユーザー定義の日付形式で年を表示します。|  
  
 アプリケーションの現在のカルチャ情報の詳細については、「[カルチャが Visual Basic 内の文字列に与える影響](/dotnet/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings)」を参照してください。  
  
## <a name="user-defined-datetime-formats"></a>ユーザー定義の日付/時刻形式  
 次の表は、ユーザー定義の日付/時刻書式の作成に使用できる文字を示しています。 以前のバージョンの Visual Basic とは異なり、これらの書式指定文字では大文字と小文字が区別されます。  
  
|文字|説明|  
|-|-|  
|(`:`)|時刻の区切り記号。 ロケールによっては、時刻の区切り記号を表すために他の文字が使用されます。 時刻の区切り記号は、時刻値の書式設定時に、時、分、および秒を区切ります。 書式設定された出力で実際に時刻の区切り記号として使用される文字は、アプリケーションの現在のカルチャ値によって決まります。|  
|(`/`)|日付の区切り記号。 ロケールによっては、日付の区切り記号を表すために他の文字が使用されます。 日付の区切り記号は、日付値の書式設定時に、日、月、および年を区切ります。 書式設定された出力で実際に日付の区切り記号として使用される文字は、アプリケーションの現在のカルチャによって決まります。|  
|(`%`)|後続の文字にかかわらず、次の文字を 1 文字書式として読み取ることを示すために使用します。 また、ユーザー定義の書式として 1 文字書式を読み取ることも示します。 詳細については、次を参照してください。|  
|`d`|先頭に0を付けずに、日を数値として表示します (たとえば、`1`)。 この文字がユーザー定義の数値書式でのみ使用されている場合は、`%d` を使用します。|  
|`dd`|先頭に0を付けた数値 (`01`など) で日を表示します。|  
|`ddd`|曜日を省略形で表示します (例 `Sun`)。|  
|`dddd`|曜日を完全な名前で表示します (例 `Sunday`)。|  
|`M`|前に0を付けずに、月を数値として表示します (たとえば、1月は `1`として表されます)。 この文字がユーザー定義の数値書式でのみ使用されている場合は、`%M` を使用します。|  
|`MM`|前に0を付けた数値で月を表示します (たとえば、`01/12/01`)。|  
|`MMM`|月を省略形で表示します (たとえば、`Jan`)。|  
|`MMMM`|月を月の完全な名前として表示します (たとえば、`January`)。|  
|`gg`|期間/時代 (`A.D.`) 文字列を表示します。|  
|`h`|12時間形式 (`1:15:15 PM`など) を使用して、先頭に0を付けない数値で時間を表示します。 この文字がユーザー定義の数値書式でのみ使用されている場合は、`%h` を使用します。|  
|`hh`|12時間形式 (`01:15:15 PM`など) を使用して、先頭に0を付けた数値として時間を表示します。|  
|`H`|24時間制 (`1:15:15`など) を使用して、先行ゼロを含まない数値として時間を表示します。 この文字がユーザー定義の数値書式でのみ使用されている場合は、`%H` を使用します。|  
|`HH`|24時間制 (`01:15:15`など) を使用して、先頭に0を付けた数値として時間を表示します。|  
|`m`|分を先頭に0を付けずに数値として表示します (たとえば、`12:1:15`)。 この文字がユーザー定義の数値書式でのみ使用されている場合は、`%m` を使用します。|  
|`mm`|先頭に0を付けた数値で分を表示します (たとえば、`12:01:15`)。|  
|`s`|2番目のを先頭に0を付けない数値として表示します (たとえば、`12:15:5`)。 この文字がユーザー定義の数値書式でのみ使用されている場合は、`%s` を使用します。|  
|`ss`|2番目のを先頭に0を付けた数値として表示します (たとえば、`12:15:05`)。|  
|`f`|秒の小数部を表示します。 たとえば `ff` は1/100 秒単位で表示され、`ffff` には10分の10分の秒が表示されます。 ユーザー定義形式では、最大7つの `f` 記号を使用できます。 この文字がユーザー定義の数値書式でのみ使用されている場合は、`%f` を使用します。|  
|`t`|12時間制を使用して、正午より前の時間に大文字の `A` を表示します。正午から午後11:59 の間の任意の時間に大文字の `P` を表示します。 この文字がユーザー定義の数値書式でのみ使用されている場合は、`%t` を使用します。|  
|`tt`|12時間制を使用するロケールの場合、正午より前の時間に大文字の `AM` が表示されます。正午から午後11:59 の間の任意の時間に大文字の `PM` を表示します。<br /><br /> 24 時間制を使用するロケールの場合は、何も表示されません。|  
|`y`|前に 0 を付けずに年を表示します (0 ～ 9)。 この文字がユーザー定義の数値書式でのみ使用されている場合は、`%y` を使用します。|  
|`yy`|前に 0 を付けた 2 桁の数値書式で年を表示します (該当する場合)。|  
|`yyy`|4 桁の数値書式で年を表示します。|  
|`yyyy`|4 桁の数値書式で年を表示します。|  
|`z`|先頭に0を付けずにタイムゾーンオフセットを表示します (たとえば、`-8`)。 この文字がユーザー定義の数値書式でのみ使用されている場合は、`%z` を使用します。|  
|`zz`|先頭に0を付けたタイムゾーンオフセットを表示します (たとえば、`-08`)。|  
|`zzz`|完全なタイムゾーンオフセットを表示します (例 `-08:00`)。|  
  
### <a name="legacy-code-example"></a>レガシ コードの例  
 `December 7, 1958, 8:50 PM, 35 seconds`のユーザー定義の日付と時刻の形式の例を次に示します。  
  
|Format|表示|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 デバイスの最小時間の解像度は、デバイスの製造元によって決まります。 デバイスの時刻の解像度が十分に粗い場合、そのデバイスで実行すると、`f` フォーマット文字は0を返します。  
  
   
  
## Examples  
 `Format` の書式指定とユーザー定義の書式指定の両方を使って値の書式を指定する、`String` 関数のさまざまな使用例を次に示します。 日付の区切り記号 (`/`)、時刻の区切り記号 (`:`)、および午前/午後を示す文字 (`t` および `tt`) について、システムで実際に表示される書式は、コードが使用するロケール設定によって決まります。 時刻と日付を開発環境で表示する場合は、コード ロケールの短い時刻書式と短い日付書式が使用されます。  
  
> [!NOTE]
>  24 時間制を使用するロケールでは、午前/午後を示す記号 (`t` および `tt`) では何も表示されません。  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必須。 書式指定される式。</param>
        <param name="NumDigitsAfterDecimal">省略可能。 表示される小数点以下の桁数を示す数値。 既定値は -1 です。これは、コンピューターの地域設定が使用されることを示しています。</param>
        <param name="IncludeLeadingDigit">省略可能。 小数値の先頭の 0 を表示するかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 列挙体。 値については、「解説」を参照してください。</param>
        <param name="UseParensForNegativeNumbers">省略可能。 負の値をかっこで囲むかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 列挙体。 値については、「解説」を参照してください。</param>
        <param name="GroupDigits">省略可能。 コンピューターの地域設定で指定されている桁区切り記号を使用して数値を区切るかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 列挙体。 値については、「解説」を参照してください。</param>
        <summary>システムの [コントロール パネル] で定義されている通貨記号を使って通貨形式の文字列に書式設定して返す文字列処理関数です。</summary>
        <returns>システムのコントロール パネルで定義された通貨記号を使用して、通貨の値に形式が変換された式です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1つ以上の省略可能な引数を省略すると、コンピューターの対応する地域設定値が代わりに使用されます。  
  
 通貨記号の相対的な位置は、システムの地域設定によって決まります。  
  
> [!NOTE]
>  すべての設定情報は、アプリケーションのロケールから取得されます。 既定では、これはコントロールパネルで設定されたロケールになります。 ただし、.NET Framework を使用してプログラムで変更することもできます。これは、[`Number`] タブの [先頭の 0] を除きます。  
  
 `IncludeLeadingDigit`、`UseParensForNegativeNumbers`、および `GroupDigits` 引数は、次の TriState 列挙値を受け取ります。  
  
|値|説明|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|コンピューターの地域設定|  
  
   
  
## Examples  
 `FormatCurrency` 関数の使用例を次に示します。  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">小数点以下の桁数が 99 を超えています。</exception>
        <exception cref="T:System.InvalidCastException">型が数字ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作</related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必須。 <see langword="Date" /> expression to be formatted.</param>
        <param name="NamedFormat">省略可能。 使用する日付/時刻形式を示す数値。 省略した場合は、<see langword="DateFormat.GeneralDate" /> が使用されます。</param>
        <summary>日時の値を表す文字列式を返します。</summary>
        <returns>日時の値を表す文字列式です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` データ型には、常に日付と時刻の両方の情報が含まれています。 型変換の場合、Visual Basic は 1/1/1 (1 年1月1日) を日付のニュートラル値と見なし、00:00:00 (午前0時) はその時刻のニュートラル値と見なされます。 `Date` 値を日付/時刻文字列として書式設定した場合、`FormatDateTime` には、結果の文字列にニュートラル値は含まれません。 たとえば、#1/1/0001 9:30:00 # を文字列に変換した場合、結果は "9:30:00 AM" になります。日付情報は表示されません。 ただし、日付情報は元の `Date` 値には引き続き存在しているため、`DatePart` などの関数を使用して回復できます。  
  
> [!NOTE]
>  `Expression` 引数を `String` リテラルとして渡すと、`FormatDateTime` は、アプリケーションの <xref:System.Globalization.CultureInfo.CurrentCulture%2A> の設定に従って解釈されます。 ただし、これを `Date` リテラルとして渡す場合、`FormatDateTime` は常に英語 (米国) のカルチャに従って `Date` リテラルを解釈するため、#mm/dd/yyyy # の形式を使用します。 これは、アプリケーションが1つのカルチャの `Date` リテラルを使用して開発およびコーディングされていても、別のカルチャを持つプラットフォームで実行される場合、`Date` リテラルが正しく解析されない可能性があるために必要です。  
  
 `NamedFormat` 引数には、次の設定があります。  
  
|常時|説明|  
|-|-|  
|`DateFormat.GeneralDate`|日付、時刻、またはそのいずれかを表示します。 日付部分を短い日付で表示します。 時刻部分がある場合は、長い時間として表示します。 存在する場合は、両方のパーツが表示します。|  
|`DateFormat.LongDate`|コンピューターの地域の設定に指定されている長い日付形式を使用して日付を表示します。|  
|`DateFormat.ShortDate`|コンピューターの [地域の設定] で指定されている短い日付形式を使用して日付を表示します。|  
|`DateFormat.LongTime`|コンピューターの地域設定に指定されている時刻形式を使用して時刻を表示します。|  
|`DateFormat.ShortTime`|24時間形式 (hh: mm) を使用して時刻を表示します。|  
  
   
  
## Examples  
 この例では、`FormatDateTime` 関数の使用方法を示します。  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NamedFormat" /> の設定が有効ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必須。 書式指定される式。</param>
        <param name="NumDigitsAfterDecimal">省略可能。 表示される小数点以下の桁数を示す数値。 既定値は -1 です。これは、コンピューターの地域設定が使用されることを示しています。</param>
        <param name="IncludeLeadingDigit">省略可能。 小数値の先頭の 0 を表示するかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数。 値については、「設定」を参照してください。</param>
        <param name="UseParensForNegativeNumbers">省略可能。 負の値をかっこで囲むかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数。 値については、「設定」を参照してください。</param>
        <param name="GroupDigits">省略可能。 ロケール設定で指定されている桁区切り記号を使用して、数値を区切るかどうかを表す<see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
        <summary>数値形式の文字列に書式設定して返す文字列処理関数です。</summary>
        <returns>数値に形式が変換された式です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 省略可能な引数を省略すると、ロケール設定によって省略された引数の値が指定されます。  
  
> [!NOTE]
>  すべての設定情報は、アプリケーションのロケールから取得されます。 既定では、これはコントロールパネルで設定されたロケールになります。 ただし、.NET Framework を使用してプログラムで変更することもできます。  
  
 `IncludeLeadingDigit`、`UseParensForNegativeNumbers`、および `GroupDigits` 引数には、次の設定があります。  
  
|常時|説明|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|コンピューターの地域設定|  
  
   
  
## Examples  
 この例では、`FormatNumber` 関数を示します。  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">型が数字ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必須。 書式指定される式。</param>
        <param name="NumDigitsAfterDecimal">省略可能。 小数点以下に表示する桁数を表す数値を指定します。 既定値は -1 であり、ロケール設定が使用されることを示しています。</param>
        <param name="IncludeLeadingDigit">省略可能。 小数点の左側のゼロを表示するかどうかを表す<see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
        <param name="UseParensForNegativeNumbers">省略可能。 負の値をかっこで囲むかどうかを表す<see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
        <param name="GroupDigits">省略可能。 ロケール設定で指定されている桁区切り記号を使用して、数値を区切るかどうかを表す<see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
        <summary>パーセント記号 (%) が付加されたパーセント形式 (100 で乗算した) の文字列に書式設定して返す文字列処理関数です。</summary>
        <returns>末尾に % 文字を付けた割合の値 (100 を乗算) に形式が変換された式です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 省略可能な引数を省略すると、ロケール設定によって省略された引数の値が指定されます。  
  
> [!NOTE]
>  すべての設定情報は、アプリケーションのロケールから取得されます。 既定では、これはコントロールパネルで設定されたロケールになります。 ただし、.NET Framework を使用してプログラムで変更することもできます。  
  
 `IncludeLeadingDigit`、`UseParensForNegativeNumbers`、および `GroupDigits` 引数には、次の設定があります。  
  
|常時|説明|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|コンピューターの地域設定|  
  
   
  
## Examples  
 この例では、`FormatPercent` 関数の使用方法を示します。  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">型が数字ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char GetChar(string str, int32 Index) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Index" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必須。 任意の有効な <see langword="String" /> 型の式。</param>
        <param name="Index">必須。 整数型 (<see langword="Integer" />) の式を指定します。 <paramref name="str" /> から取り出す部分の文字を指定する (1 から始まる) インデックス。</param>
        <summary>指定された文字列の指定されたインデックス位置にある文字を表す <see langword="Char" /> 値を返します。</summary>
        <returns>指定された文字列の指定されたインデックス位置にある文字を表す <see langword="Char" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Index` が1より小さいか、`str`の最後の文字のインデックスより大きい場合、`ArgumentException` がスローされます。  
  
   
  
## Examples  
 この例では、`GetChar` 関数を使用して、`String`内の指定したインデックスから文字を取得する方法を示します。  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="str" /> が <see langword="Nothing" />、<paramref name="Index" /> &lt; 1、または <paramref name="Index" /> が <paramref name="str" /> の最後の文字のインデックスよりも大きいです。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。  一致するものが見つかった場合は、整数は、1 から始まるインデックスです。  一致するものが見つからない場合は、関数は 0 を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">必須。 検索対象の <see langword="String" /> 型の式。</param>
        <param name="String2">必須。 検索対象の <see langword="String" /> 型の式。</param>
        <param name="Compare">省略可能。 文字列比較の種類を指定します。 <paramref name="Compare" /> が省略されている場合、<see langword="Option Compare" /> 設定により比較の種類を決定します。</param>
        <summary>ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。</summary>
        <returns><list type="table">
            <item>
              <term> 状況 
 </term>
              <description> InStr の戻り値 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> の長さが 0、または <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> の長さが 0、または <see langword="Nothing" /></term>
              <description> 既定では最初の文字の位置となる、検索の開始位置です。  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> が見つかりません。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> が内部にある <paramref name="String1" /></term>
              <description> 一致する文字列の開始位置 
 </description>
            </item>
            <item>
              <term>
              </term>
              <description>
              </description>
            </item>
          </list>
。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、`InStr` 関数は、文字列を解析するときに使用されます。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `InStrB` 関数は、文字位置ではなく、複数のバイトを返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 Visual Basic 2005 文字列はすべて Unicode 形式で、`InStrB` はサポートされなくなりました。  
  
 `Compare` 引数の設定は以下の通りです。  
  
|常時|値|説明|  
|-|-|-|  
|`Binary`|0|バイナリ比較を実行します|  
|`Text`|1|テキスト比較を実行します|  
  
   
  
## Examples  
 `InStr` 関数を使って、ある文字列の中から指定された文字列を検索し、最初に見つかった文字位置を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">Visual Basic における文字列</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">Visual Basic の文字列の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/option-compare-statement">Option Compare ステートメント</related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int StartPos, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 StartPos, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (StartPos As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (StartPos, String1, String2, Compare)" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0" />
        <Parameter Name="StartPos" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="String1" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0;netcore-3.1;net-5.0" />
        <Parameter Name="String2" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">省略可能。 各検索の開始位置を設定する数式。 省略した場合、検索は最初の文字位置から開始されます。 開始インデックスは 1 から始まっています。</param>
        <param name="StartPos">To be added.</param>
        <param name="String1">必須。 検索対象の <see langword="String" /> 型の式。</param>
        <param name="String2">必須。 検索対象の <see langword="String" /> 型の式。</param>
        <param name="Compare">省略可能。 文字列比較の種類を指定します。 <paramref name="Compare" /> が省略されている場合、<see langword="Option Compare" /> 設定により比較の種類を決定します。</param>
        <summary>ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。</summary>
        <returns><list type="table">
            <item>
              <term> 状況 
 </term>
              <description> InStr の戻り値 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> の長さが 0、または <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> の長さが 0、または <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> が見つかりません。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> が内部にある <paramref name="String1" /></term>
              <description> 一致する文字列の開始位置 
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; <paramref name="String1" /> の長さ</term>
              <description> 0 
 </description>
            </item>
          </list>
。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、`InStr` 関数は、文字列を解析するときに使用されます。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `InStrB` 関数は、文字位置ではなく、複数のバイトを返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 Visual Basic 2005 文字列はすべて Unicode 形式で、`InStrB` はサポートされなくなりました。  
  
 `Compare` 引数の設定は以下の通りです。  
  
|常時|値|説明|  
|-|-|-|  
|`Binary`|0|バイナリ比較を実行します|  
|`Text`|1|テキスト比較を実行します|  
  
   
  
## Examples  
 `InStr` 関数を使って、ある文字列の中から指定された文字列を検索し、最初に見つかった文字位置を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">Visual Basic における文字列</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">Visual Basic の文字列の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/option-compare-statement">Option Compare ステートメント</related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="StringMatch" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Start" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">必須。 検索対象の文字列式。</param>
        <param name="StringMatch">必須。 検索対象の文字列式。</param>
        <param name="Start">省略可能。 文字列の左側から開始して、各検索に対して 1 から始まる開始位置を設定する数式。 <paramref name="Start" /> を省略した場合は -1 が使用されます。この値は、検索が最後の文字位置から開始されることを示しています。 検索は右から左へと行われます。</param>
        <param name="Compare">省略可能。 部分文字列を評価する場合に使用する比較の種類を示す数値。 省略した場合、バイナリ比較が実行されます。 値については、「設定」を参照してください。</param>
        <summary>ある文字列の中から指定された文字列を最後の文字位置から検索を開始し、最初に見つかった文字位置 (先頭からその位置までの文字数) を返します。</summary>
        <returns><list type="table">
            <item>
              <term> 状況 
 </term>
              <description> InStrRev の戻り値 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> が長さ 0 の文字列 ("") のとき 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> が長さ 0 の文字列 ("") のとき 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> が見つかりません。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> が内部にある <paramref name="StringCheck" /></term>
              <description> 文字列の先頭から検索して最初に文字列が見つかった位置  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> が <paramref name="StringMatch" /> の長さよりも大きいとき</term>
              <description> 0 
 </description>
            </item>
          </list>
。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `InStrRev` 関数の構文は、`InStr` 関数の構文と同じではないことに注意してください。  
  
 `Compare` 引数には、次の値を指定できます。  
  
|常時|説明|  
|-|-|  
|`Binary`|バイナリ比較を実行します。|  
|`Text`|テキスト比較を実行します。|  
  
   
  
## Examples  
 この例では、`InStrRev` 関数の使用方法を示します。  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> = 0 または <paramref name="Start" /> &lt; -1。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">Visual Basic における文字列</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">Visual Basic の文字列の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(object[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">必須。 結合する部分文字列を含む 1 次元配列。</param>
        <param name="Delimiter">省略可能。 返される文字列内で部分文字列を区切るために使用する任意の文字列。 省略した場合は、空白文字 (" ") が使用されます。 <paramref name="Delimiter" /> が長さ 0 の文字列 ("") または <see langword="Nothing" /> の場合、リスト内のすべてのアイテムが区切り文字なしで連結されます。</param>
        <summary>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</summary>
        <returns>配列に含まれる多数の部分文字列を結合して作成される文字列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Join` と `Split` 関数の間にはパリティがあります。 `Join` 関数は、文字列の配列を受け取り、区切り文字列を使用して結合し、1つの文字列を返します。 `Split` 関数は文字列を受け取り、区切り記号で区切り、文字列の配列を返します。 ただし、大きな違いとして、`Join` は文字列を任意の区切り記号文字列と連結でき、`Split` は1文字の区切り記号を使用して文字列を区切ることができます。  
  
   
  
## Examples  
 次の例では、`Join` 関数を使用して、複数の文字列からリストを作成する方法を示します。  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> が 1 次元ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">必須。 結合する部分文字列を含む 1 次元配列。</param>
        <param name="Delimiter">省略可能。 返される文字列内で部分文字列を区切るために使用する任意の文字列。 省略した場合は、空白文字 (" ") が使用されます。 <paramref name="Delimiter" /> が長さ 0 の文字列 ("") または <see langword="Nothing" /> の場合、リスト内のすべてのアイテムが区切り文字なしで連結されます。</param>
        <summary>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</summary>
        <returns>配列に含まれる多数の部分文字列を結合して作成される文字列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Join` と `Split` 関数の間にはパリティがあります。 `Join` 関数は、文字列の配列を受け取り、区切り文字列を使用して結合し、1つの文字列を返します。 `Split` 関数は文字列を受け取り、区切り記号で区切り、文字列の配列を返します。 ただし、大きな違いとして、`Join` は文字列を任意の区切り記号文字列と連結でき、`Split` は1文字の区切り記号を使用して文字列を区切ることができます。  
  
   
  
## Examples  
 次の例では、`Join` 関数を使用して、複数の文字列からリストを作成する方法を示します。  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> が 1 次元ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>小文字に変換した文字列または文字を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char LCase(char Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Value">必須。 任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</param>
        <summary>小文字に変換した文字列または文字を返します。</summary>
        <returns>小文字に変換した文字列または文字を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大文字のみが小文字に変換されます。すべての小文字と nonletter 文字は変更されません。  
  
 この関数は、文字列を操作するときにアプリケーションのカルチャ情報を使用して、アプリケーションが使用されているロケールに対して大文字と小文字の変更が適切になるようにします。  
  
> [!IMPORTANT]
>  アプリケーションが比較または大文字と小文字の変更操作の結果に基づいてセキュリティの決定を行う場合、操作では <xref:System.String.Compare%2A?displayProperty=nameWithType> メソッドを使用し、`comparisonType` 引数に対して <xref:System.StringComparison.Ordinal> または <xref:System.StringComparison.OrdinalIgnoreCase> を渡す必要があります。 詳細については、「[カルチャが Visual Basic 内の文字列に与える影響](/dotnet/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings)」を参照してください。  
  
   
  
## Examples  
 この例では、`LCase` 関数を使用して、文字列の小文字のバージョンを返します。  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">Visual Basic における文字列</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">Visual Basic の文字列の概要</related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LCase(string Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Value">必須。 任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</param>
        <summary>小文字に変換した文字列または文字を返します。</summary>
        <returns>小文字に変換した文字列または文字を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大文字のみが小文字に変換されます。すべての小文字と nonletter 文字は変更されません。  
  
 この関数は、文字列を操作するときにアプリケーションのカルチャ情報を使用して、アプリケーションが使用されているロケールに対して大文字と小文字の変更が適切になるようにします。  
  
> [!IMPORTANT]
>  アプリケーションが比較または大文字と小文字の変更操作の結果に基づいてセキュリティの決定を行う場合、操作では <xref:System.String.Compare%2A?displayProperty=nameWithType> メソッドを使用し、`comparisonType` 引数に対して <xref:System.StringComparison.Ordinal> または <xref:System.StringComparison.OrdinalIgnoreCase> を渡す必要があります。 詳細については、「[カルチャが Visual Basic 内の文字列に与える影響](/dotnet/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings)」を参照してください。  
  
   
  
## Examples  
 この例では、`LCase` 関数を使用して、文字列の小文字のバージョンを返します。  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">Visual Basic における文字列</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">Visual Basic の文字列の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Left(string str, int32 Length) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必須。 左端の文字が返される <see langword="String" /> 型の式。</param>
        <param name="Length">必須。 整数型 (<see langword="Integer" />) の式を指定します。 返す文字の数を示す数式。 0 を指定すると、長さ 0 の文字列 ("") が返されます。 <paramref name="str" /> 内の文字数以上を指定すると、文字列全体が返されます。</param>
        <summary>指定された文字数を含む文字列を返します。</summary>
        <returns>文字列の左側から数えて、指定された文字数を含んでいる文字列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `str`の文字数を確認するには、`Len` 関数を使用します。 Windows フォームアプリケーション、または `Left` プロパティを持つその他のクラスで使用する場合は、関数を `Microsoft.VisualBasic.Left`で完全修飾する必要があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LeftB` 関数は、文字列を文字ではなくバイト単位で返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LeftB` はサポートされなくなりました。  
  
   
  
## Examples  
 この例では、`Left` 関数を使用して、特定の `String`の部分文字列を返す方法を示します。 `Left` プロパティを持つクラスでは、`Left` 関数を完全修飾する必要がある場合があります。  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(bool Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int8 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(char Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(valuetype System.DateTime Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(valuetype System.Decimal Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(float64 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int16 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int32 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int64 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int8 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(float32 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(string Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int16 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int32 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int64 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列の文字数、または変数の格納に必要なバイト数のいずれかを含んでいる整数値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Len` 関数は、ユーザー定義型と `Object` 変数を使用して、`FilePut` 関数によってファイルに書き込まれるときのサイズを返します。 `Object` に `String`が含まれている場合は、文字列の長さが返されます。 `Object` に他の型が含まれている場合は、`FilePut` 関数によってファイルに書き込まれるため、オブジェクトのサイズが返されます。  
  
 `VBFixedString` 属性は、ディスクに書き込まれるときの文字列のサイズ (バイト単位) を示すために、オブジェクトの文字列フィールドに適用できます。 `Len` 関数は、`Object` 変数のサイズを決定するときに、使用可能な場合は `VBFixedString` 属性を使用します。  
  
> [!NOTE]
>  `Len` 関数は、ユーザー定義データ型で可変長文字列を使用する場合に必要なストレージの実際のバイト数を特定できない可能性があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `LenB` 関数は、文字ではなく文字列のバイト数を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`LenB` はサポートされなくなりました。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイス開発者向けのメモ  
 `Len` 関数は、パラメーターとして `String` と `Object` 変数のみを受け取ります。 `Object` に `String`が含まれている場合は、`String`の長さが返されます。 パラメーターが NULL `Object` 参照の場合、この関数は0を返します。 `Object` に他の型が含まれている場合は、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LSet(string Source, int32 Length) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Source">必須。 整数型 (<see langword="String" />) の式を指定します。 変数の名前を指定します。</param>
        <param name="Length">必須。 整数型 (<see langword="Integer" />) の式を指定します。 返される文字列の長さを指定します。</param>
        <summary>指定の文字列が含まれている文字列を左寄せで指定の長さに調整して返します。</summary>
        <returns>指定の長さに調整された指定の文字列が含まれている左寄せの文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定した文字列が指定した長さより長い場合、返される文字列は指定した長さに短縮されます。 指定した文字列が指定した長さより短い場合は、返された文字列の右端に空白が追加され、適切な長さが生成されます。  
  
   
  
## Examples  
 この例では、`LSet` 関数の使用方法を示します。  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types">データ型の有効な使用方法</related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LTrim(string str) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必須。 任意の有効な <see langword="String" /> 型の式。</param>
        <summary>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</summary>
        <returns>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`、`RTrim`、および `Trim` の各関数は、文字列の末尾からスペースを削除します。  
  
   
  
## Examples  
 この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。 また、`Trim` 関数を使って両方のタイプの空白を除去しています。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された文字列からの文字を含む文字列を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Mid(string str, int32 Start) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必須。 文字が返される <see langword="String" /> 型の式。</param>
        <param name="Start">必須。 整数型 (<see langword="Integer" />) の式を指定します。 返す文字の開始位置。 <paramref name="Start" /> の値が <paramref name="str" /> 内の文字数よりも大きい場合、<see langword="Mid" /> 関数は長さ 0 の文字列 ("") を返します。 <paramref name="Start" /> は 1 から始まります。</param>
        <summary>文字列の指定の位置から始まるすべての文字を含む文字列を返します。</summary>
        <returns>文字列の指定の位置から始まるすべての文字を含む文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `str`の文字数を確認するには、`Len` 関数を使用します。  
  
 Visual Basic には `Mid` 関数と `Mid` ステートメントがあります。 これらの要素は、どちらも文字列内の指定された文字数に対して動作しますが、`Mid` ステートメントによって文字が置き換えられる間、`Mid` 関数は文字を返します。 詳細については、「 [Mid ステートメント](/dotnet/visual-basic/language-reference/statements/mid-statement)」を参照してください。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `MidB` 関数は、文字列を文字ではなくバイト単位で返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 すべての Visual Basic 文字列は Unicode 形式であり、`MidB` はサポートされなくなりました。  
  
   
  
## Examples  
 この例の最後の行では、`Mid` 関数のこのオーバーロードを使用して、文字列から5番目以降の文字を返します。  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 または <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">Visual Basic における文字列</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">Visual Basic の文字列の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/mid-statement">Mid ステートメント</related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Mid(string str, int32 Start, int32 Length) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必須。 文字が返される <see langword="String" /> 型の式。</param>
        <param name="Start">必須。 整数型 (<see langword="Integer" />) の式を指定します。 返す文字の開始位置。 <paramref name="Start" /> の値が <paramref name="str" /> 内の文字数よりも大きい場合、<see langword="Mid" /> 関数は長さ 0 の文字列 ("") を返します。 <paramref name="Start" /> は 1 から始まります。</param>
        <param name="Length">省略可能。 整数型 (<see langword="Integer" />) の式を指定します。 返される文字数。 省略した場合、またはテキスト内の <paramref name="Length" /> の文字数 (位置 <paramref name="Start" /> の文字を含む) よりも少なかった場合は、開始位置から文字列の末尾までのすべての文字が返されます。</param>
        <summary>文字列の指定の位置から始まる指定の数の文字を含む文字列を返します。</summary>
        <returns>文字列の指定の位置から始まる指定の数の文字を含む文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `str`の文字数を確認するには、`Len` 関数を使用します。  
  
 Visual Basic には `Mid` 関数と `Mid` ステートメントがあります。 これらの要素は、どちらも文字列内の指定された文字数に対して動作しますが、`Mid` ステートメントによって文字が置き換えられる間、`Mid` 関数は文字を返します。 詳細については、「 [Mid ステートメント](/dotnet/visual-basic/language-reference/statements/mid-statement)」を参照してください。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `MidB` 関数は、文字列を文字ではなくバイト単位で返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 すべての Visual Basic 文字列は Unicode 形式であり、`MidB` はサポートされなくなりました。  
  
   
  
## Examples  
 この例の最初の2つの `Mid` 関数は、指定された位置から開始して、文字列から指定された数の文字を返します。 (最後の関数は、<xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> のオーバーロードを示し、文字列抽出の開始点を指定するだけです)。  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 または <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">Visual Basic における文字列</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">Visual Basic の文字列の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/mid-statement">Mid ステートメント</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Find" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Replacement" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Start" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Count" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">必須。 置換する部分文字列を含む文字列式。</param>
        <param name="Find">必須。 検索する部分文字列。</param>
        <param name="Replacement">必須。 置換する部分文字列。</param>
        <param name="Start">省略可能。 置換に使用される部分文字列を開始する、<paramref name="Expression" /> 内の位置。 <see langword="Replace" /> の戻り値は、<paramref name="Start" /> で始まる、適切な置換を行った文字列です。 省略した場合、1 が使用されます。</param>
        <param name="Count">省略可能。 置換する部分文字列の数。 省略した場合、既定値は -1 となります。この値は、すべての候補が置換されることを示しています。</param>
        <param name="Compare">省略可能。 部分文字列を評価する場合に使用する比較の種類を示す数値。 値については、「設定」を参照してください。</param>
        <summary>指定された文字列の一部を指定された回数分別の部分文字列で置換した文字列を返します。</summary>
        <returns><see langword="Replace" /> 関数の戻り値は次のとおりです。  
  
 <list type="table"><item><term> 状況 
 </term><description> Replace の戻り値 
 </description></item><item><term><paramref name="Find" /> の長さが 0、または <see langword="Nothing" /></term><description> <paramref name="Expression" /> のコピー</description></item><item><term><paramref name="Replace" /> が長さ 0 の文字列 ("") のとき 
 </term><description> <paramref name="Expression" /> の出現しない <paramref name="Find" /> のコピー</description></item><item><term><paramref name="Expression" /> の長さが 0 か <see langword="Nothing" />、または <paramref name="Start" /> の値が <paramref name="Expression" /> の長さよりも大きいとき</term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> が 0 のとき 
 </term><description> <paramref name="Expression" /> のコピー</description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Replace` 関数の戻り値は、`Start` によって指定された位置から開始し、`Expression` 文字列の末尾にある文字列であり、`Find` および `Replace` の値によって指定された置換が行われます。  
  
 `Compare` 引数には、次の値を指定できます。  
  
|常時|説明|  
|-|-|  
|`Binary`|バイナリ比較を実行します|  
|`Text`|テキスト比較を実行します。|  
  
   
  
## Examples  
 この例では、`Replace` 関数を示します。  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Count" /> &lt; -1 または <paramref name="Start" /> &lt;= 0。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Right(string str, int32 Length) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必須。 右端の文字が返される <see langword="String" /> 型の式。</param>
        <param name="Length">必須。 [https://login.microsoftonline.com/consumers/](<see langword="Integer" />) 返す文字の数を示す数式。 0 を指定すると、長さ 0 の文字列 ("") が返されます。 <paramref name="str" /> 内の文字数以上を指定すると、文字列全体が返されます。</param>
        <summary>文字列の右端から指定された文字数分の文字列を返します。</summary>
        <returns>文字列の右端から指定された文字数分の文字列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `str`の文字数を確認するには、`Len` 関数を使用します。 Windows フォームまたは `Right` プロパティを持つその他のクラスで使用する場合は、関数を `Microsoft.VisualBasic.Strings.Right`で完全修飾する必要があります。  
  
> [!NOTE]
>  以前のバージョンの Visual Basic の `RightB` 関数は、文字ではなく、バイト単位の文字列を返します。 これは主に、2バイト文字セット (DBCS) アプリケーションで文字列を変換するために使用されます。 現在の Visual Basic 文字列はすべて Unicode 形式であり、`RightB` はサポートされなくなりました。  
  
   
  
## Examples  
 この例では、`Right` 関数を使用して、特定の `String`の部分文字列を返す方法を示します。 `Right` プロパティを持つクラスでは、`Right` 関数を完全修飾する必要がある場合があります。  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RSet(string Source, int32 Length) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Source">必須。 整数型 (<see langword="String" />) の式を指定します。 変数の名前を指定します。</param>
        <param name="Length">必須。 整数型 (<see langword="Integer" />) の式を指定します。 返される文字列の長さを指定します。</param>
        <summary>文字列と長さが指定され、その長さに調整された文字列右揃えにして文字列を返します。</summary>
        <returns>指定の長さに調整された指定の文字列が含まれている右寄せの文字列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source` が `Length`より長い場合、`RSet` は、返された文字列内の左端の文字だけを `Source`の長さまで配置します。 指定した文字列が指定した長さよりも短い場合、適切な長さを生成するために、文字列の左端にスペースが追加されます。 指定した文字列が指定した長さより長い場合は、指定した長さに短縮されます。  
  
   
  
## Examples  
 この例では、`RSet` 関数の使用方法を示します。  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">データ型の概要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types">データ型の有効な使用方法</related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RTrim(string str) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必須。 任意の有効な <see langword="String" /> 型の式。</param>
        <summary>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</summary>
        <returns>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`、`RTrim`、および `Trim` の各関数は、文字列の末尾からスペースを削除します。  
  
   
  
## Examples  
 この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。 また、`Trim` 関数を使って両方のタイプの空白を除去しています。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Space(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Number">必須。 整数型 (<see langword="Integer" />) の式を指定します。 文字列に必要な空白の数。</param>
        <summary>指定された数のスペースから成る文字列を返します。</summary>
        <returns>指定された数のスペースから成る文字列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space` 関数は、出力の書式設定や固定長文字列のデータのクリアに役立ちます。  
  
   
  
## Examples  
 この例では、`Space` 関数を使用して、指定された数のスペースから成る文字列を返します。  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Limit" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">必須。 部分文字列および区切り記号を含む <see langword="String" /> 型の式。</param>
        <param name="Delimiter">省略可能。 文字列の区切りを識別するために使用する任意の 1 文字。 <paramref name="Delimiter" /> が省略された場合、空白文字 (" ") が区切り記号として使用されます。</param>
        <param name="Limit">省略可能。 入力文字列を分割する場合の部分文字列の最大数。 既定値の -1 は、<paramref name="Delimiter" /> 文字列が出現するたびに入力文字列が分割されることを示しています。</param>
        <param name="Compare">省略可能。 部分文字列を評価する場合に使用する比較を示す数値。 値については、「設定」を参照してください。</param>
        <summary>部分文字列ごとに区切られた文字列からゼロ ベースの 1 次元配列を作成し、返します。</summary>
        <returns><see langword="String" /> 配列 <paramref name="Expression" /> が長さ 0 の文字列 ("") の場合、<see langword="Split" /> は、長さ 0 の文字列を含む単一要素の配列を返します。 <paramref name="Delimiter" /> が長さ 0 の文字列である場合、または <paramref name="Expression" /> に Delimiter がない場合に、<see langword="Split" /> は <paramref name="Expression" /> 型の文字列を含む単一要素の配列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、または `Limit` が-1 の場合、`Split` 関数は、区切り記号文字列が出現するたびに入力文字列を分割し、配列内の部分文字列を返します。 `Limit` パラメーターが0より大きい場合、`Split` 関数は、区切り記号の最初の `Limit`1 回の文字列を分割し、結果として得られた部分文字列を含む配列を返します。 たとえば、`Split("a:b:c", ":")` は配列 `{"a", "b", "c"}`を返し、`Split("a:b:c", ":", 2)` は配列 `{"a", "b:c"}`を返します。  
  
 `Split` 関数で、行に2つの区切り記号がある場合、または文字列の先頭または末尾に区切り記号がある場合は、空の文字列 ("") を囲むように解釈されます。 たとえば、`Split("xx", "x")` は、3つの空の文字列を含む配列を返します。1つは文字列の先頭から始まり、2つの "x" 文字列の間、もう1つは文字列の最後の "x" と末尾の間にあります。  
  
 次の表は、オプションの `Delimiter`、`Limit`、および `Compare` パラメーターを使用して、`Split` 関数の動作を変更する方法を示しています。  
  
|呼び出しの分割|戻り値|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice と Bob"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"someone", "example.com"}|  
  
 `Compare` 引数には、次の値を指定できます。  
  
|常時|説明|値|  
|-|-|-|  
|`CompareMethod.Binary`|バイナリ比較を実行します|0|  
|`CompareMethod.Text`|テキスト比較を実行します。|1|  
  
   
  
## Examples  
 次の例では、文字列をスペースで分割する方法を示します。  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 次の例では、行の複数の区切り記号を使用して文字列を分割し、空の文字列をフィルターで除外する方法を示します。  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">必須。 任意の有効な <see langword="String" /> 型の式。</param>
        <param name="String2">必須。 任意の有効な <see langword="String" /> 型の式。</param>
        <param name="Compare">省略可能。 文字列比較の種類を指定します。 <paramref name="Compare" /> が省略されている場合、<see langword="Option Compare" /> 設定により比較の種類を決定します。</param>
        <summary>文字列比較の結果により、-1、0、または 1 のいずれかを返します。</summary>
        <returns><see langword="StrComp" /> 関数の戻り値は次のとおりです。  
  
 <list type="table"><item><term> 状況 
 </term><description> StrComp の戻り値 
 </description></item><item><term><paramref name="String1" /> が <paramref name="String2" /> よりも先に来る</term><description> -1 
 </description></item><item><term><paramref name="String1" /> と <paramref name="String2" /> は等価です。</term><description> 0 
 </description></item><item><term><paramref name="String1" /> が <paramref name="String2" /> の後に来る</term><description> 1 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列は、最初の文字から始まる英数字の並べ替え値によって比較されます。 バイナリ比較、テキスト比較、および並べ替え順序の詳細については、「 [Option Compare ステートメント](/dotnet/visual-basic/language-reference/statements/option-compare-statement)」を参照してください。  
  
 `Compare` 引数の設定は以下の通りです。  
  
|常時|説明|  
|-|-|  
|`Binary`|文字の内部バイナリ表現から派生した並べ替え順序に基づいて、バイナリ比較を実行します。|  
|`Text`|システムの `LocaleID` 値によって決定される、大文字と小文字を区別しないテキストの並べ替え順序に基づいて、テキスト比較を実行します。|  
  
   
  
## Examples  
 この例では、`StrComp` 関数を使用して、文字列比較の結果を返します。  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Compare" /> の値が無効です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">Visual Basic における文字列</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">Visual Basic の文字列の概要</related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="LocaleID" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必須。 変換する <see langword="String" /> 型の式。</param>
        <param name="Conversion">必須。 <see cref="T:Microsoft.VisualBasic.VbStrConv" /> のメンバー。 実行する比較の種類を指定する列挙値。</param>
        <param name="LocaleID">省略可能。 システム <see langword="LocaleID" /> 値と異なる場合の <see langword="LocaleID" /> 値。 既定値は、システムの <see langword="LocaleID" /> です。</param>
        <summary>指定に従って変換された文字列型の値を返します。</summary>
        <returns>指定どおりに変換された文字列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 定数 `VbStrConv.Wide`、`VbStrConv.Narrow`、`VbStrConv.SimplifiedChinese`、`VbStrConv.TraditionalChinese`、`VbStrConv.Katakana`、および `VbStrConv.Hiragana` では、適用されないロケールで使用すると、実行時エラーが発生することがありますが、常にではありません。日本語の言語パックがインストールされている日本語以外のシステムでは、定数 `VbStrConv.Katakana` と `VbStrConv.Hiragana` を使用できます。 また、定数 `VbStrConv.Wide` と `VbStrConv.Narrow` は、東アジア言語がインストールされているすべてのシステムでサポートされています。  
  
 この関数は、文字列を操作するときにアプリケーションのカルチャ情報を使用して、アプリケーションが使用されているロケールに対して大文字と小文字の変更が適切になるようにします。  
  
> [!IMPORTANT]
>  アプリケーションが比較または大文字と小文字の変更操作の結果に基づいてセキュリティの決定を行う場合、操作では <xref:System.String.Compare%2A?displayProperty=nameWithType> メソッドを使用し、`comparisonType` 引数に対して <xref:System.StringComparison.Ordinal> または <xref:System.StringComparison.OrdinalIgnoreCase> を渡す必要があります。 詳細については、「[カルチャが Visual Basic 内の文字列に与える影響](/dotnet/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings)」を参照してください。  
  
 `Conversion` 引数の設定は以下の通りです。  
  
|列挙型のメンバー|説明|  
|-|-|  
|`VbStrConv.None`|変換を実行しません。|  
|`VbStrConv.LinguisticCasing`|では、ファイルシステム (既定値) ではなく、言語規則が使用されます。 `VbStrConv.UpperCase` および `VbStrConv.LowerCase` でのみ有効です。|  
|`VbStrConv.UpperCase`|文字列を大文字に変換します。|  
|`VbStrConv.LowerCase`|文字列を小文字に変換します。|  
|`VbStrConv.ProperCase`|文字列内のすべての単語の最初の文字を大文字に変換します。|  
|`VbStrConv.Wide` <sup>*</sup>|文字列内の幅の狭い (半角) 文字をワイド文字 (全角) に変換します。 [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|文字列内の幅の広い (全角) 文字を、幅の狭い (半角) 文字に変換します。|  
|`VbStrConv.Katakana` <sup>**</sup>|文字列内のひらがな文字をカタカナ文字に変換します。|  
|`VbStrConv.Hiragana` <sup>**</sup>|文字列内のカタカナ文字をひらがな文字に変換します。|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|繁体字中国語の文字を簡体字中国語に変換します。|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|簡体字中国語の文字を繁体字中国語に変換します。|  
  
 <sup>*</sup>アジアのロケールに適用されます。  
  
 <sup>**</sup>日本にのみ適用されます。  
  
> [!NOTE]
>  これらの定数は .NET Framework 共通言語ランタイムで指定されます。 その結果、実際の値の代わりにコード内の任意の場所で使用できます。 相互に排他的な場合を除き (たとえば、`VbStrConv.Wide + VbStrConv.Narrow`)、ほとんどを組み合わせることができます (たとえば、`UpperCase + Wide`)。  
  
 正しく大文字小文字を区別するための有効な単語区切り記号は、Null (`Chr$(0)`)、水平タブ (`Chr$(9)`)、ラインフィード (`Chr$(10)`)、垂直タブ (`Chr$(11)`)、フォームフィード (`Chr$(12)`)、復帰 (`Chr$(13)`)、空白 (1 バイト文字セット) (`Chr$(32)`) です。 空白の実際の値 (全角または半角) は、東アジア文化の国/地域によって異なります。  
  
   
  
## Examples  
 この例では、テキストをすべて小文字に変換します。  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="LocaleID" /> の値がサポートされていない、<paramref name="Conversion" /> が &lt; 0 または &gt; 2048、あるいは変換の方法が指定されたロケールでサポートされていない。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">CString</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrDup(int32 Number, char Character) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Character" Type="System.Char" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Number">必須。 整数型 (<see langword="Integer" />) の式を指定します。 取得する文字列の長さ。</param>
        <param name="Character">必須。 有効な <see langword="Char" /> 型、<see langword="String" /> 型、または <see langword="Object" /> 型の式。 式の最初の文字だけが使用されます。 文字の型が <see langword="Object" /> である場合は、<see langword="Char" /> 値または <see langword="String" /> 値を含む必要があります。</param>
        <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
        <returns>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この関数は、繰り返し文字で構成されている `String` を返します。 文字列を構成する文字は `Character` 引数の最初の文字であり、`Number` 重複しています。  
  
   
  
## Examples  
 この例では、`StrDup` 関数を使用して、重複した文字の文字列を返します。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> が 0 以下の数字、または <paramref name="Character" /> の型が無効。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> は <see langword="Nothing" /> です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object StrDup(int32 Number, object Character) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Character" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Number">必須。 整数型 (<see langword="Integer" />) の式を指定します。 取得する文字列の長さ。</param>
        <param name="Character">必須。 有効な <see langword="Char" /> 型、<see langword="String" /> 型、または <see langword="Object" /> 型の式。 式の最初の文字だけが使用されます。 文字の型が <see langword="Object" /> である場合は、<see langword="Char" /> 値または <see langword="String" /> 値を含む必要があります。</param>
        <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
        <returns>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この関数は、繰り返し文字で構成されている `String` を返します。 文字列を構成する文字は `Character` 引数の最初の文字であり、`Number` 重複しています。  
  
   
  
## Examples  
 この例では、`StrDup` 関数を使用して、重複した文字の文字列を返します。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> が 0 以下の数字、または <paramref name="Character" /> の型が無効。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> は <see langword="Nothing" /> です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrDup(int32 Number, string Character) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Character" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Number">必須。 整数型 (<see langword="Integer" />) の式を指定します。 取得する文字列の長さ。</param>
        <param name="Character">必須。 有効な <see langword="Char" /> 型、<see langword="String" /> 型、または <see langword="Object" /> 型の式。 式の最初の文字だけが使用されます。 文字の型が <see langword="Object" /> である場合は、<see langword="Char" /> 値または <see langword="String" /> 値を含む必要があります。</param>
        <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
        <returns>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この関数は、繰り返し文字で構成されている `String` を返します。 文字列を構成する文字は `Character` 引数の最初の文字であり、`Number` 重複しています。  
  
   
  
## Examples  
 この例では、`StrDup` 関数を使用して、重複した文字の文字列を返します。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> が 0 以下の数字、または <paramref name="Character" /> の型が無効。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> は <see langword="Nothing" /> です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrReverse(string Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必須。 文字の順序を逆にする文字列式。 <paramref name="Expression" /> が長さ 0 の文字列 ("") である場合、長さ 0 の文字列が返されます。</param>
        <summary>指定された文字列の文字の並び順を逆にした文字列を返します。</summary>
        <returns>指定された文字列の文字の並び順を逆にした文字列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `StrReverse` 関数は、`Expression`と同じ文字を含んでいるが、逆の順序で文字列を返します。  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Trim(string str) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必須。 任意の有効な <see langword="String" /> 型の式。</param>
        <summary>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</summary>
        <returns>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`、`RTrim`、および `Trim` の各関数は、文字列の末尾からスペースを削除します。  
  
   
  
## Examples  
 この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。 また、`Trim` 関数を使って両方のタイプの空白を除去しています。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char UCase(char Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Value">必須。 任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</param>
        <summary>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</summary>
        <returns>指定された文字列が大文字に変換されている文字列型または char 型の値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小文字のみが大文字に変換されます。大文字と nonletter の文字はすべて変更されません。  
  
 この関数は、文字列を操作するときにアプリケーションのカルチャ情報を使用して、アプリケーションが使用されているロケールに対して大文字と小文字の変更が適切になるようにします。  
  
> [!IMPORTANT]
>  アプリケーションが比較または大文字と小文字の変更操作の結果に基づいてセキュリティの決定を行う場合、操作では <xref:System.String.Compare%2A?displayProperty=nameWithType> メソッドを使用し、`comparisonType` 引数に対して <xref:System.StringComparison.Ordinal> または <xref:System.StringComparison.OrdinalIgnoreCase> を渡す必要があります。 詳細については、「[カルチャが Visual Basic 内の文字列に与える影響](/dotnet/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings)」を参照してください。  
  
   
  
## Examples  
 `UCase` 関数を使って文字列を大文字に変換して返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">Visual Basic における文字列</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">Visual Basic の文字列の概要</related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UCase(string Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Value">必須。 任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</param>
        <summary>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</summary>
        <returns>指定された文字列が大文字に変換されている文字列型または char 型の値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小文字のみが大文字に変換されます。大文字と nonletter の文字はすべて変更されません。  
  
 この関数は、文字列を操作するときにアプリケーションのカルチャ情報を使用して、アプリケーションが使用されているロケールに対して大文字と小文字の変更が適切になるようにします。  
  
> [!IMPORTANT]
>  アプリケーションが比較または大文字と小文字の変更操作の結果に基づいてセキュリティの決定を行う場合、操作では <xref:System.String.Compare%2A?displayProperty=nameWithType> メソッドを使用し、`comparisonType` 引数に対して <xref:System.StringComparison.Ordinal> または <xref:System.StringComparison.OrdinalIgnoreCase> を渡す必要があります。 詳細については、「[カルチャが Visual Basic 内の文字列に与える影響](/dotnet/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings)」を参照してください。  
  
   
  
## Examples  
 `UCase` 関数を使って文字列を大文字に変換して返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">文字列操作の概要</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">Visual Basic における文字列</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">Visual Basic の文字列の概要</related>
      </Docs>
    </Member>
  </Members>
</Type>
