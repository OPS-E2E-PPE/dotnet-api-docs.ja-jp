<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b60f19df42df8f06840315f9f241fa5b58737ae8" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75175301" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.SpellCheck" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpellCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpellCheck sealed" />
  <TypeSignature Language="F#" Value="type SpellCheck = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Windows.Controls.TextBox" /> や <see cref="T:System.Windows.Controls.RichTextBox" /> などのテキスト編集コントロールに、リアルタイムのスペル チェック機能を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スペルチェックを有効にするには、テキスト編集コントロールの <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> プロパティを `true` に設定します。 このスペルチェックが有効になっている場合、次の図に示すように、スペルミスの単語には赤い波線が引かれます。 スペルチェックは、WPF が既定のディクショナリを提供する場合にのみサポートされます。 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]の WPF では、英語、フランス語、ドイツ語、およびスペイン語の辞書が提供されています。  
  
 ![スペル&#45;チェック付きのテキストボックス](~/add/media/editing-textbox-with-spellchecking.png "スペル チェックを含む Textbox")  
  
 カスタム辞書を追加するには、辞書ファイルの場所を <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> コレクションに追加します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomDictionaries As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ CustomDictionaries { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomDictionaries : System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カスタム スペル チェックに使用される用語集ファイルの場所のコレクションを取得します。</summary>
        <value>用語集ファイルの場所のコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタム辞書では、拡張子が lex のテキストファイルである辞書ファイルが使用されます。 用語集ファイルの各行には、正規のスペルとして受け入れられる1つの単語が含まれています。 ファイルの1行目では、ディクショナリが適用されるロケール識別子 (LCID) を指定できます。 ロケールが指定されていない場合、ディクショナリはすべての言語に適用されます。 詳細については、「[ロケール id](https://go.microsoft.com/fwlink/?LinkId=165561)」を参照してください。 次の例は、英語版の辞書ファイルの最初の数行を示しています。  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 <xref:System.Windows.Controls.TextBox> または <xref:System.Windows.Controls.Primitives.TextBoxBase>から派生したクラスの1つ以上のカスタム辞書を指定するには、ファイルの URI を <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> コレクションに追加して、辞書ファイルの場所を指定します。  
  
> [!NOTE]
>  <xref:System.Collections.IList.Insert%2A> を使用して <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> コレクションにファイルを追加すると、例外が発生します。 代わりに、<xref:System.Collections.IList.Add%2A> と <xref:System.Collections.IList.Remove%2A> を使用してコレクションを更新します。  
  
 辞書ファイルは、ローカルコンピューターにインストールされているコンテンツファイルとして、またはローカルの参照アセンブリにコンパイルされたリソースファイルとしてアプリケーションに含めることができます。 パック Uri を使用してファイルを参照できます。 詳細については、「[WPF におけるパック URI](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md)」を参照してください。  
  
 スペルチェックを有効にするには、<xref:System.Windows.Controls.TextBox> または <xref:System.Windows.Controls.Primitives.TextBoxBase>から派生したクラスで、<xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> プロパティを `true` に設定します。 既定のスペルチェック機能に加えて、その <xref:System.Windows.Controls.TextBox> のすべてのカスタム辞書が使用されます。 スペルチェックの詳細については、「<xref:System.Windows.Controls.SpellCheck>」を参照してください。  
  
   
  
## Examples  
 次の例は、2つのカスタム辞書を <xref:System.Windows.Controls.RichTextBox>に追加する方法を示しています。 最初のカスタム辞書 (customwords) は、XAML で追加されます。 ファイルは、コンテンツファイルとしてアプリケーションに含まれ、出力ディレクトリにコピーされます。 <xref:System.Uri> 要素を使用するには、System 名前空間を含める必要があります。  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 2番目のカスタム辞書 (customwords2) が <xref:System.Windows.Controls.Primitives.ButtonBase.Click> イベントハンドラーに追加されます。 このファイルは、リソースファイルとして含まれ、WPFCustomDictionary という名前のアプリケーションアセンブリにコンパイルされます。  
  
 [!code-xaml[WpfCustomDictionary#1](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml#1)]  
  
 [!code-csharp[WpfCustomDictionary#2](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/wpfcustomdictionary/vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
        <altmember cref="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomDictionariesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomDictionariesProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomDictionariesProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetCustomDictionaries(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetCustomDictionaries : System.Windows.Controls.Primitives.TextBoxBase -&gt; System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.GetCustomDictionaries textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">用語集ファイルのコレクションを取得するテキスト編集コントロール。</param>
        <summary>指定されたテキスト編集コントロールでカスタム スペル チェックに使用される、用語集ファイルの場所のコレクションを取得します。</summary>
        <returns>用語集ファイルの場所のコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタム辞書は、拡張子が lex の単純なテキストファイルである辞書ファイルを使用します。 用語集ファイルの各行には、正規のスペルとして受け入れられる1つの単語が含まれています。 ファイルの1行目では、ディクショナリが適用されるロケール識別子 (LCID) を指定できます。 ロケールが指定されていない場合、ディクショナリはすべての言語に適用されます。 詳細については、「[ロケール id](https://go.microsoft.com/fwlink/?LinkId=165561)」を参照してください。 次の例は、英語版の辞書ファイルの最初の数行を示しています。  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 <xref:System.Windows.Controls.TextBox> または <xref:System.Windows.Controls.Primitives.TextBoxBase>から派生したクラスに対して1つ以上のカスタム辞書を指定するには、<xref:System.Windows.Controls.SpellCheck.GetCustomDictionaries%2A> メソッドによって返される <xref:System.Collections.IList> にファイルの URI を追加して、辞書ファイルの場所を指定します。  
  
 スペルチェックを有効にするには、<xref:System.Windows.Controls.TextBox> または <xref:System.Windows.Controls.Primitives.TextBoxBase>から派生したクラスで、<xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> プロパティを `true` に設定します。 既定のスペルチェック機能に加えて、その <xref:System.Windows.Controls.TextBox> のすべてのカスタム辞書が使用されます。 スペルチェックの詳細については、「<xref:System.Windows.Controls.SpellCheck>」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" /> が <see langword="null" /> です。</exception>
        <altmember cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase -&gt; bool" Usage="System.Windows.Controls.SpellCheck.GetIsEnabled textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">チェック対象のテキスト編集コントロール。 このコントロールの例として、<see cref="T:System.Windows.Controls.TextBox" /> や <see cref="T:System.Windows.Controls.RichTextBox" /> などが挙げられます。</param>
        <summary>指定されたテキスト編集コントロールでスペル チェックが有効になっているかどうかを示す値を返します。</summary>
        <returns>テキスト編集コントロールでスペル チェックが有効になっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Controls.TextBox" /> や <see cref="T:System.Windows.Controls.RichTextBox" /> など、このテキスト編集コントロールでスペル チェッカーが有効かどうかを決定する値を取得または設定します。</summary>
        <value>コントロールでスペル チェッカーが有効な場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この依存関係プロパティには、特殊な書き込み専用のプロパティの使用も含まれます。 プロパティを設定するための [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文は `<`*TextBoxBaseClass* **IsEnabled**`="`*ブール値*`" .../>`です。ここで、 *textBoxBaseClass*は <xref:System.Windows.Controls.Primitives.TextBoxBase>から派生したクラスのオブジェクト要素であり、*ブール値*は `true` または `false` (大文字と小文字は区別されません) です。 コードでプロパティを添付プロパティとして設定するには、<xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A> メソッドを参照してください。 一致する `GetIsEnabled` アクセサーがありません。 値を取得するには、<xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> プロパティから現在の <xref:System.Windows.Controls.SpellCheck> オブジェクトを取得し、その <xref:System.Windows.Controls.SpellCheck>から <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> プロパティの値を取得します。  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|メタデータプロパティが `true` に設定される|なし|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.SpellCheck.IsEnabled" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, bool value);" />
      <MemberSignature Language="F#" Value="static member SetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase * bool -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetIsEnabled (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">スペル チェックを有効または無効にするテキスト編集コントロール。 このコントロールの例として、<see cref="T:System.Windows.Controls.TextBox" /> や <see cref="T:System.Windows.Controls.RichTextBox" /> などが挙げられます。</param>
        <param name="value">テキスト編集コントロールでスペル チェックを有効にするかどうかを指定するブール値。</param>
        <summary><see cref="T:System.Windows.Controls.TextBox" /> や <see cref="T:System.Windows.Controls.RichTextBox" /> などの指定されたテキスト編集コントロールで、スペル チェックを有効または無効にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]の <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> プロパティの添付プロパティの使用を有効にします。 次の例は [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 使用法を示しています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetSpellingReform(System.Windows.Controls.Primitives.TextBoxBase,System.Windows.Controls.SpellingReform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSpellingReform(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, System::Windows::Controls::SpellingReform value);" />
      <MemberSignature Language="F#" Value="static member SetSpellingReform : System.Windows.Controls.Primitives.TextBoxBase * System.Windows.Controls.SpellingReform -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetSpellingReform (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">スペル チェックを適用するテキスト編集コントロール。 このコントロールの例として、<see cref="T:System.Windows.Controls.TextBox" /> や <see cref="T:System.Windows.Controls.RichTextBox" /> などが挙げられます。</param>
        <param name="value">スペリング改善ルールを決定する <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> 値。</param>
        <summary>スペル チェックが使用するスペリング改善ルールを決定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによってアクセスされるスペル改善ルールでは、1990年のフランス語とドイツ語のスペル reforms が参照されます。 このメソッドは、他の言語で使用されている場合は効果がありません。  
  
 このメソッドは、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]の <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> プロパティの添付プロパティの使用を有効にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberSignature Language="VB.NET" Value="Public Property SpellingReform As SpellingReform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::SpellingReform SpellingReform { System::Windows::Controls::SpellingReform get(); void set(System::Windows::Controls::SpellingReform value); };" />
      <MemberSignature Language="F#" Value="member this.SpellingReform : System.Windows.Controls.SpellingReform with get, set" Usage="System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スペル チェックが使用するスペリング改善ルールを取得または設定します。</summary>
        <value>スペル チェックが使用するスペリング改善ルール。 既定値は、フランス語の場合は <see cref="F:System.Windows.Controls.SpellingReform.PreAndPostreform" />、ドイツ語の場合は <see cref="F:System.Windows.Controls.SpellingReform.Postreform" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティによって決定されるスペル改善ルールでは、フランス語とドイツ語のスペル reforms が参照されます。 このプロパティは、他の言語で使用されている場合は効果がありません。  
  
 この依存関係プロパティには、特殊な書き込み専用のプロパティの使用も含まれます。 プロパティを設定するための [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文は `<`*TextBoxBaseClass* **SpellingReform**`="`*enumvalue*`" .../>`です。ここで、 *textBoxBaseClass*は <xref:System.Windows.Controls.Primitives.TextBoxBase>から派生したクラスのオブジェクト要素で、 *enumvalue*は <xref:System.Windows.Controls.SpellingReform> 列挙値の文字列名です。 コードでプロパティを添付プロパティとして設定するには、<xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A> メソッドを参照してください。 一致する `GetSpellingReform` アクセサーがありません。 値を取得するには、<xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> プロパティから現在の <xref:System.Windows.Controls.SpellCheck> オブジェクトを取得し、その <xref:System.Windows.Controls.SpellCheck>から <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> プロパティの値を取得します。  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールド|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|メタデータプロパティが `true` に設定される|なし|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SpellingReformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SpellingReformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SpellingReformProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
