<Type Name="JoinBlock&lt;T1,T2&gt;" FullName="System.Threading.Tasks.Dataflow.JoinBlock&lt;T1,T2&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="29c7252167403f8f041ebf435c751fcec935ea77" /><Meta Name="ms.sourcegitcommit" Value="276601e49c88d67be520bc610fd52e96b59fe31d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/28/2020" /><Meta Name="ms.locfileid" Value="78165330" /></Metadata><TypeSignature Language="C#" Value="public sealed class JoinBlock&lt;T1,T2&gt; : System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;Tuple&lt;T1,T2&gt;&gt;, System.Threading.Tasks.Dataflow.ISourceBlock&lt;Tuple&lt;T1,T2&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JoinBlock`2&lt;T1, T2&gt; extends System.Object implements class System.Threading.Tasks.Dataflow.IDataflowBlock, class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;class System.Tuple`2&lt;!T1, !T2&gt;&gt;, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;class System.Tuple`2&lt;!T1, !T2&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JoinBlock(Of T1, T2)&#xA;Implements IReceivableSourceBlock(Of Tuple(Of T1, T2)), ISourceBlock(Of Tuple(Of T1, T2))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2&gt;&#xA;public ref class JoinBlock sealed : System::Threading::Tasks::Dataflow::IReceivableSourceBlock&lt;Tuple&lt;T1, T2&gt; ^&gt;, System::Threading::Tasks::Dataflow::ISourceBlock&lt;Tuple&lt;T1, T2&gt; ^&gt;" />
  <TypeSignature Language="F#" Value="type JoinBlock&lt;'T1, 'T2&gt; = class&#xA;    interface IDataflowBlock&#xA;    interface IReceivableSourceBlock&lt;'T1 * 'T2&gt;&#xA;    interface ISourceBlock&lt;'T1 * 'T2&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.5.25.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
    <AssemblyVersion>4.6.4.0</AssemblyVersion>
    <AssemblyVersion>4.6.5.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IDataflowBlock</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ISourceBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayContent,nq}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.Dataflow.JoinBlock`2/DebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="08e40-101">ブロックの最初のターゲットが受け取るデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="08e40-101">Specifies the type of data accepted by the block's first target.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="08e40-102">ブロックの 2 番目のターゲットが受け取るデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="08e40-102">Specifies the type of data accepted by the block's second target.</span></span></typeparam>
    <summary><span data-ttu-id="08e40-103">型が異なる可能性のある複数のデータフロー ソースとの間で結合するデータフロー ブロックを提供します。このデータフロー ブロックは、型ごとに 1 つの項目が到着するのを待機してから、型ごとに 1 つの項目から成るタプルとしてまとめて解放されます。</span><span class="sxs-lookup"><span data-stu-id="08e40-103">Provides a dataflow block that joins across multiple dataflow sources, not necessarily of the same type, waiting for one item to arrive for each type before they're all released together as a tuple consisting of one item per type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JoinBlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JoinBlock();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08e40-104">新しい <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="08e40-104">Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JoinBlock (System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataflowBlockOptions As GroupingDataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JoinBlock(System::Threading::Tasks::Dataflow::GroupingDataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Dataflow.JoinBlock&lt;'T1, 'T2&gt; : System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions -&gt; System.Threading.Tasks.Dataflow.JoinBlock&lt;'T1, 'T2&gt;" Usage="new System.Threading.Tasks.Dataflow.JoinBlock&lt;'T1, 'T2&gt; dataflowBlockOptions" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions" />
      </Parameters>
      <Docs>
        <param name="dataflowBlockOptions"><span data-ttu-id="08e40-105">この <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> の構成に使用するオプション。</span><span class="sxs-lookup"><span data-stu-id="08e40-105">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</span></span></param>
        <summary><span data-ttu-id="08e40-106">新しい <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="08e40-106">Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="08e40-107"><paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="08e40-107">The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Complete();" />
      <MemberSignature Language="F#" Value="abstract member Complete : unit -&gt; unit&#xA;override this.Complete : unit -&gt; unit" Usage="joinBlock.Complete " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08e40-108">これ以上メッセージを受け付けまたは生成せず、延期メッセージを使用しないことを <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> に通知します。</span><span class="sxs-lookup"><span data-stu-id="08e40-108">Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08e40-109">データフローブロックで <xref:System.Threading.Tasks.Dataflow.JoinBlock%602.Complete%2A> が呼び出された後、そのブロックは完了し、その <xref:System.Threading.Tasks.Dataflow.JoinBlock%602.Completion%2A> タスクは、以前に使用可能なすべてのデータを処理した後、最終的な状態になります。</span><span class="sxs-lookup"><span data-stu-id="08e40-109">After <xref:System.Threading.Tasks.Dataflow.JoinBlock%602.Complete%2A> has been called on a dataflow block, that block will complete, and its <xref:System.Threading.Tasks.Dataflow.JoinBlock%602.Completion%2A> task will enter a final state after it has processed all previously available data.</span></span> <span data-ttu-id="08e40-110"><xref:System.Threading.Tasks.Dataflow.JoinBlock%602.Complete%2A> は、完了するのを待たずに要求を開始することをブロックしません。完了するまで待機するには、<xref:System.Threading.Tasks.Dataflow.JoinBlock%602.Completion%2A> タスクを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="08e40-110"><xref:System.Threading.Tasks.Dataflow.JoinBlock%602.Complete%2A> will not block waiting for completion to occur, but rather will initiate the request; to wait for completion to occur, the <xref:System.Threading.Tasks.Dataflow.JoinBlock%602.Completion%2A> task may be used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Completion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Task Completion" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Completion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Completion As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::Task ^ Completion { System::Threading::Tasks::Task ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Completion : System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Dataflow.JoinBlock&lt;'T1, 'T2&gt;.Completion" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08e40-111">データ フロー ブロックの非同期操作と完了を表す <see cref="T:System.Threading.Tasks.Task" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="08e40-111">Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</span></span></summary>
        <value><span data-ttu-id="08e40-112">タスク。</span><span class="sxs-lookup"><span data-stu-id="08e40-112">The task.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08e40-113">データフローブロックは、現在メッセージを処理しておらず、それ以上メッセージを処理しないことが保証されている場合に、完了したと見なされます。</span><span class="sxs-lookup"><span data-stu-id="08e40-113">A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process any more messages.</span></span> <span data-ttu-id="08e40-114">関連付けられたブロックが完了すると、返された <xref:System.Threading.Tasks.Task> は完了状態に遷移します。</span><span class="sxs-lookup"><span data-stu-id="08e40-114">The returned <xref:System.Threading.Tasks.Task> will transition to a completed state when the associated block has completed.</span></span> <span data-ttu-id="08e40-115">データフローブロックの定義されたセマンティクスに従ってブロックが正常に処理を完了すると、<xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態に遷移します。</span><span class="sxs-lookup"><span data-stu-id="08e40-115">It will transition to the <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state when the block completes its processing successfully according to the dataflow block's defined semantics.</span></span> <span data-ttu-id="08e40-116">このメソッドは、処理されない例外が原因でデータフローブロックが途中で処理を完了したときに、<xref:System.Threading.Tasks.TaskStatus>の <xref:System.Threading.Tasks.TaskStatus.Faulted> 状態に遷移します。また、データフローブロックがキャンセル要求を受け取ったことにより途中で処理を完了したときに、<xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.Canceled> 状態に遷移します。</span><span class="sxs-lookup"><span data-stu-id="08e40-116">It will transition to the <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.Faulted> state when the dataflow block has completed processing prematurely due to an unhandled exception, and it will transition to the <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.Canceled> state when the dataflow block has completed processing prematurely due to receiving a cancellation request.</span></span> <span data-ttu-id="08e40-117">タスクが <xref:System.Threading.Tasks.TaskStatus.Faulted> 状態で完了した場合、その `Exception` プロパティは、ブロックが失敗する原因となった1つ以上の例外を含む <xref:System.AggregateException> を返します。</span><span class="sxs-lookup"><span data-stu-id="08e40-117">If the task completes in the <xref:System.Threading.Tasks.TaskStatus.Faulted> state, its `Exception` property will return an <xref:System.AggregateException> containing the one or more exceptions that caused the block to fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo">
      <MemberSignature Language="C#" Value="public IDisposable LinkTo (System.Threading.Tasks.Dataflow.ITargetBlock&lt;Tuple&lt;T1,T2&gt;&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable LinkTo(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;class System.Tuple`2&lt;!T1, !T2&gt;&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinkTo (target As ITargetBlock(Of Tuple(Of T1, T2)), linkOptions As DataflowLinkOptions) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ITargetBlock&lt;Tuple&lt;T1, T2&gt; ^&gt; ^ target, System::Threading::Tasks::Dataflow::DataflowLinkOptions ^ linkOptions);" />
      <MemberSignature Language="F#" Value="abstract member LinkTo : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'T1 * 'T2&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions -&gt; IDisposable&#xA;override this.LinkTo : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'T1 * 'T2&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions -&gt; IDisposable" Usage="joinBlock.LinkTo (target, linkOptions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="08e40-118">指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</span><span class="sxs-lookup"><span data-stu-id="08e40-118">Links the  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> .</span></span></param>
        <param name="linkOptions"><span data-ttu-id="08e40-119">リンクを構成する <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="08e40-119">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> instance that configures the link.</span></span></param>
        <summary><span data-ttu-id="08e40-120">指定した <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> をリンクします。</span><span class="sxs-lookup"><span data-stu-id="08e40-120">Links the  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> .</span></span></summary>
        <returns><span data-ttu-id="08e40-121">Dispose の呼び出し時にソースをターゲットからリンク解除する IDisposable。</span><span class="sxs-lookup"><span data-stu-id="08e40-121">An IDisposable that, upon calling Dispose, will unlink the source from the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="08e40-122"><paramref name="target" /> が <see langword="null" /> (Visual Basic では Nothing) または <paramref name="linkOptions" /> が <see langword="null" /> (Visual Basic では Nothing) です。</span><span class="sxs-lookup"><span data-stu-id="08e40-122"><paramref name="target" /> is <see langword="null" /> (Nothing in Visual Basic) or  <paramref name="linkOptions" /> is <see langword="null" /> (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OutputCount">
      <MemberSignature Language="C#" Value="public int OutputCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OutputCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int OutputCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputCount : int" Usage="System.Threading.Tasks.Dataflow.JoinBlock&lt;'T1, 'T2&gt;.OutputCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08e40-123">このブロックから取得できる出力項目の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="08e40-123">Gets the number of output items available to be received from this block.</span></span></summary>
        <value><span data-ttu-id="08e40-124">出力項目の数。</span><span class="sxs-lookup"><span data-stu-id="08e40-124">The number of output items.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.IDataflowBlock.Fault">
      <MemberSignature Language="C#" Value="void IDataflowBlock.Fault (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception ^ exception) = System::Threading::Tasks::Dataflow::IDataflowBlock::Fault;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="08e40-125">このエラーの原因となった <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="08e40-125">The  <see cref="T:System.Exception" /> that caused the faulting.</span></span></param>
        <summary><span data-ttu-id="08e40-126"><see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> を <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で完了するようにします。</span><span class="sxs-lookup"><span data-stu-id="08e40-126">Causes the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> to complete in a <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08e40-127">データフローブロックで <xref:System.Threading.Tasks.Dataflow.JoinBlock%602.System%23Threading%23Tasks%23Dataflow%23IDataflowBlock%23Fault%2A> が呼び出されると、そのブロックが完了し、その <xref:System.Threading.Tasks.Dataflow.JoinBlock%602.Completion%2A> タスクが最終的な状態になります。</span><span class="sxs-lookup"><span data-stu-id="08e40-127">After <xref:System.Threading.Tasks.Dataflow.JoinBlock%602.System%23Threading%23Tasks%23Dataflow%23IDataflowBlock%23Fault%2A> has been called on a dataflow block, that block will complete, and its <xref:System.Threading.Tasks.Dataflow.JoinBlock%602.Completion%2A> task will enter a final state.</span></span> <span data-ttu-id="08e40-128">ブロックのキャンセルと同様にブロックがエラーになると、バッファー内のメッセージ (未処理の入力メッセージと unoffered 出力メッセージ) が失われます。</span><span class="sxs-lookup"><span data-stu-id="08e40-128">Faulting a block, as with canceling a block, causes buffered messages (unprocessed input messages as well as unoffered output messages) to be lost.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="08e40-129"><paramref name="exception" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="08e40-129">The <paramref name="exception" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;.ConsumeMessage">
      <MemberSignature Language="C#" Value="Tuple&lt;T1,T2&gt; ISourceBlock&lt;Tuple&lt;T1,T2&gt;&gt;.ConsumeMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;Tuple&lt;T1,T2&gt;&gt; target, out bool messageConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Tuple`2&lt;!T1, !T2&gt; System.Threading.Tasks.Dataflow.ISourceBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;.ConsumeMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;class System.Tuple`2&lt;!T1, !T2&gt;&gt; target, [out] bool&amp; messageConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock&lt;System#Tuple&lt;T1,T2&gt;&gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Function ConsumeMessage (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of Tuple(Of T1, T2)), ByRef messageConsumed As Boolean) As Tuple(Of T1, T2) Implements ISourceBlock(Of Tuple(Of T1, T2)).ConsumeMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual Tuple&lt;T1, T2&gt; ^ System.Threading.Tasks.Dataflow.ISourceBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;.ConsumeMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;Tuple&lt;T1, T2&gt; ^&gt; ^ target, [Runtime::InteropServices::Out] bool % messageConsumed) = System::Threading::Tasks::Dataflow::ISourceBlock&lt;Tuple&lt;T1, T2&gt; ^&gt;::ConsumeMessage;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;" />
        <Parameter Name="messageConsumed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><span data-ttu-id="08e40-130">使用されるメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</span><span class="sxs-lookup"><span data-stu-id="08e40-130">The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> of the message that is to be consumed.</span></span></param>
        <param name="target"><span data-ttu-id="08e40-131">メッセージが使用される <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span><span class="sxs-lookup"><span data-stu-id="08e40-131">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> for which the message is to be consumed.</span></span></param>
        <param name="messageConsumed"><span data-ttu-id="08e40-132">メッセージが正常に使用された場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="08e40-132"><see langword="true" /> if the message was successfully consumed.</span></span> <span data-ttu-id="08e40-133">それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08e40-133"><see langword="false" /> otherwise.</span></span></param>
        <summary><span data-ttu-id="08e40-134"><see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> によって識別されるメッセージの所有権をこの <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> インスタンスから <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に渡します。</span><span class="sxs-lookup"><span data-stu-id="08e40-134">Passes the ownership of the message identified by the <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> from this  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> instance to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="08e40-135">使用されたメッセージの値。</span><span class="sxs-lookup"><span data-stu-id="08e40-135">The value of the consumed message.</span></span> <span data-ttu-id="08e40-136">これは以前に予約されて <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> に <paramref name="messageHeader" /> として渡されたものとは異なる、<see cref="M:ConsumeMessage" /> のインスタンスに相当する場合があります。</span><span class="sxs-lookup"><span data-stu-id="08e40-136">This may correspond to a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance than was previously reserved and passed as the <paramref name="messageHeader" /> to <see cref="M:ConsumeMessage" />.</span></span> <span data-ttu-id="08e40-137">使用する側の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> は、<see cref="M:OfferMessage" /> を介して messageValue として渡される値の代わりに、戻り値を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="08e40-137">The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> must  use the returned value instead of the value passed as messageValue through <see cref="M:OfferMessage" />.</span></span>
<span data-ttu-id="08e40-138">要求されたメッセージを使用できない場合、戻り値は <see langword="null" /> (Visual Basic では Nothing) になります。</span><span class="sxs-lookup"><span data-stu-id="08e40-138">If the message requested is not available, the return value will be <see langword="null" /> (Nothing in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="08e40-139">メッセージを使用する <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1> は、この <xref:System.Threading.Tasks.Dataflow.ISourceBlock`1> インスタンスからリンクされている必要はありません。</span><span class="sxs-lookup"><span data-stu-id="08e40-139">The <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1> for which the message is to be consumed need not be linked from this  <xref:System.Threading.Tasks.Dataflow.ISourceBlock`1> instance.</span></span> <span data-ttu-id="08e40-140">さらに、この <xref:System.Threading.Tasks.Dataflow.ISourceBlock`1> インスタンスによって、メッセージが <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1>に直接提供されることはありません。</span><span class="sxs-lookup"><span data-stu-id="08e40-140">Moreover, this <xref:System.Threading.Tasks.Dataflow.ISourceBlock`1>  instance may have never offered the message directly to the <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1>.</span></span>  

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="08e40-141"><paramref name="messageHeader" /> が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="08e40-141">The <paramref name="messageHeader" /> is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="08e40-142"><paramref name="target" /> は <see langword="null" /> (Visual Basic では Nothing) です。</span><span class="sxs-lookup"><span data-stu-id="08e40-142">The <paramref name="target" /> is <see langword="null" /> (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;.ReleaseReservation">
      <MemberSignature Language="C#" Value="void ISourceBlock&lt;Tuple&lt;T1,T2&gt;&gt;.ReleaseReservation (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;Tuple&lt;T1,T2&gt;&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.ISourceBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;.ReleaseReservation(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;class System.Tuple`2&lt;!T1, !T2&gt;&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock&lt;System#Tuple&lt;T1,T2&gt;&gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})" />
      <MemberSignature Language="VB.NET" Value="Sub ReleaseReservation (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of Tuple(Of T1, T2))) Implements ISourceBlock(Of Tuple(Of T1, T2)).ReleaseReservation" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Threading.Tasks.Dataflow.ISourceBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;.ReleaseReservation(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;Tuple&lt;T1, T2&gt; ^&gt; ^ target) = System::Threading::Tasks::Dataflow::ISourceBlock&lt;Tuple&lt;T1, T2&gt; ^&gt;::ReleaseReservation;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><span data-ttu-id="08e40-143">予約済みメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</span><span class="sxs-lookup"><span data-stu-id="08e40-143">The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> of the reserved message.</span></span></param>
        <param name="target"><span data-ttu-id="08e40-144">現在予約を保持している <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span><span class="sxs-lookup"><span data-stu-id="08e40-144">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> that currently holds the reservation.</span></span></param>
        <summary><span data-ttu-id="08e40-145">権利を解放して、<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> によって識別されるメッセージの所有権をこの <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> から <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に渡します。</span><span class="sxs-lookup"><span data-stu-id="08e40-145">Releases the right to pass the ownership of the message identified by the <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> from this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="08e40-146">予約を保持している <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1> は、この <xref:System.Threading.Tasks.Dataflow.ISourceBlock`1> インスタンスからリンクされている必要はありません。</span><span class="sxs-lookup"><span data-stu-id="08e40-146">The <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1> that holds the reservation need not be linked from this <xref:System.Threading.Tasks.Dataflow.ISourceBlock`1> instance.</span></span> <span data-ttu-id="08e40-147">さらに、この <xref:System.Threading.Tasks.Dataflow.ISourceBlock`1> インスタンスによって、メッセージが <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1>に直接提供されることはありません。</span><span class="sxs-lookup"><span data-stu-id="08e40-147">Moreover, this <xref:System.Threading.Tasks.Dataflow.ISourceBlock`1> instance may have never offered the message directly to the <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1>.</span></span>
<span data-ttu-id="08e40-148">このメッセージは、同じ <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1>に対して以前に予約されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="08e40-148">It is required that this message has been previously reserved for the same <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1>.</span></span>
 

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="08e40-149"><paramref name="messageHeader" /> が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="08e40-149">The <paramref name="messageHeader" /> is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="08e40-150"><paramref name="target" /> は <see langword="null" /> (Visual Basic では Nothing) です。</span><span class="sxs-lookup"><span data-stu-id="08e40-150">The <paramref name="target" /> is <see langword="null" /> (Nothing in Visual Basic).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="08e40-151"><paramref name="target" /> がメッセージを予約しませんでした。</span><span class="sxs-lookup"><span data-stu-id="08e40-151">The <paramref name="target" /> did not have the message reserved.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;.ReserveMessage">
      <MemberSignature Language="C#" Value="bool ISourceBlock&lt;Tuple&lt;T1,T2&gt;&gt;.ReserveMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;Tuple&lt;T1,T2&gt;&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Threading.Tasks.Dataflow.ISourceBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;.ReserveMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;class System.Tuple`2&lt;!T1, !T2&gt;&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock&lt;System#Tuple&lt;T1,T2&gt;&gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})" />
      <MemberSignature Language="VB.NET" Value="Function ReserveMessage (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of Tuple(Of T1, T2))) As Boolean Implements ISourceBlock(Of Tuple(Of T1, T2)).ReserveMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Threading.Tasks.Dataflow.ISourceBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;.ReserveMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;Tuple&lt;T1, T2&gt; ^&gt; ^ target) = System::Threading::Tasks::Dataflow::ISourceBlock&lt;Tuple&lt;T1, T2&gt; ^&gt;::ReserveMessage;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;System.Tuple&lt;T1,T2&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><span data-ttu-id="08e40-152">予約されるメッセージの <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</span><span class="sxs-lookup"><span data-stu-id="08e40-152">The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> of the message that is to be reserved.</span></span></param>
        <param name="target"><span data-ttu-id="08e40-153">メッセージが使用される <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span><span class="sxs-lookup"><span data-stu-id="08e40-153">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> for which the message is to be reserved.</span></span></param>
        <summary><span data-ttu-id="08e40-154">権利を予約して、<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> によって識別されるメッセージの所有権をこの <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> から <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に渡します。</span><span class="sxs-lookup"><span data-stu-id="08e40-154">Reserves the right to pass the ownership of the message identified by the <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> from this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="08e40-155">メッセージが正常に予約された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08e40-155"><see langword="true" /> if the message was successfully reserved; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="08e40-156">メッセージが予約されている <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1> は、この <xref:System.Threading.Tasks.Dataflow.ISourceBlock`1> インスタンスからリンクされている必要はありません。</span><span class="sxs-lookup"><span data-stu-id="08e40-156">The <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1> for which the message is to be reserved need not be linked from this <xref:System.Threading.Tasks.Dataflow.ISourceBlock`1> instance.</span></span> <span data-ttu-id="08e40-157">さらに、この <xref:System.Threading.Tasks.Dataflow.ISourceBlock`1> インスタンスによって、メッセージが <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1>に直接提供されることはありません。</span><span class="sxs-lookup"><span data-stu-id="08e40-157">Moreover, this <xref:System.Threading.Tasks.Dataflow.ISourceBlock`1> instance may have never offered the message directly to the <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1>.</span></span>
<span data-ttu-id="08e40-158">`true` が返された場合は、このメッセージの <xref:ConsumeMessage> または <xref:ReleaseReservation> を同じ <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> および <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1>を指定して呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="08e40-158">If `true` is returned, either <xref:ConsumeMessage> or <xref:ReleaseReservation> for this message must be subsequently called  with the same <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> and <xref:System.Threading.Tasks.Dataflow.ITargetBlock`1>.</span></span>
<span data-ttu-id="08e40-159">これを行わないと、ソースはそれ以上メッセージを任意のターゲットに伝達できなくなる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="08e40-159">Failure to do so may result in the source being unable to propagate any further messages to any target.</span></span>
  <span data-ttu-id="08e40-160">ターゲットが内部ロックを保持している間は <xref:ReserveMessage> を呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="08e40-160"><xref:ReserveMessage> must not be called while the target is holding any internal locks.</span></span>  <span data-ttu-id="08e40-161">これにより、データフローネットワークでデッドロックが発生するのを防ぐために必要なロック階層に違反することになります。</span><span class="sxs-lookup"><span data-stu-id="08e40-161">Doing so will violate the lock hierarchy necessary to avoid deadlocks in a dataflow network.</span></span>
 

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="08e40-162"><paramref name="messageHeader" /> が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="08e40-162">The <paramref name="messageHeader" /> is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="08e40-163"><paramref name="target" /> は <see langword="null" /> (Visual Basic では Nothing) です。</span><span class="sxs-lookup"><span data-stu-id="08e40-163">The <paramref name="target" /> is <see langword="null" /> (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Target1">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Dataflow.ITargetBlock&lt;T1&gt; Target1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!T1&gt; Target1" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target1 As ITargetBlock(Of T1)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::Dataflow::ITargetBlock&lt;T1&gt; ^ Target1 { System::Threading::Tasks::Dataflow::ITargetBlock&lt;T1&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target1 : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'T1&gt;" Usage="System.Threading.Tasks.Dataflow.JoinBlock&lt;'T1, 'T2&gt;.Target1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.ITargetBlock&lt;T1&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08e40-164">最初の型のメッセージを提供するために使用できるターゲットを取得します。</span><span class="sxs-lookup"><span data-stu-id="08e40-164">Gets a target that may be used to offer messages of the first type.</span></span></summary>
        <value><span data-ttu-id="08e40-165">ターゲット。</span><span class="sxs-lookup"><span data-stu-id="08e40-165">The target.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target2">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Dataflow.ITargetBlock&lt;T2&gt; Target2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!T2&gt; Target2" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target2 As ITargetBlock(Of T2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::Dataflow::ITargetBlock&lt;T2&gt; ^ Target2 { System::Threading::Tasks::Dataflow::ITargetBlock&lt;T2&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target2 : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'T2&gt;" Usage="System.Threading.Tasks.Dataflow.JoinBlock&lt;'T1, 'T2&gt;.Target2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.ITargetBlock&lt;T2&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08e40-166">2 番目の型のメッセージを提供するために使用できるターゲットを取得します。</span><span class="sxs-lookup"><span data-stu-id="08e40-166">Gets a target that may be used to offer messages of the second type.</span></span></summary>
        <value><span data-ttu-id="08e40-167">ターゲット。</span><span class="sxs-lookup"><span data-stu-id="08e40-167">The target.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="joinBlock.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08e40-168">この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="08e40-168">Returns a string that represents the formatted name of this  <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</span></span></summary>
        <returns><span data-ttu-id="08e40-169">この <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> インスタンスの書式設定された名前を表す文字列。</span><span class="sxs-lookup"><span data-stu-id="08e40-169">A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08e40-170"><xref:System.Object> から継承されます。</span><span class="sxs-lookup"><span data-stu-id="08e40-170">Inherited from  <xref:System.Object> .</span></span> <span data-ttu-id="08e40-171"><xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A> オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="08e40-171">Uses the  <xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A> option.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (Predicate&lt;Tuple&lt;T1,T2&gt;&gt; filter, out Tuple&lt;T1,T2&gt; item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(class System.Predicate`1&lt;class System.Tuple`2&lt;!T1, !T2&gt;&gt; filter, [out] class System.Tuple`2&lt;!T1, !T2&gt;&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (filter As Predicate(Of Tuple(Of T1, T2)), ByRef item As Tuple(Of T1, T2)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryReceive(Predicate&lt;Tuple&lt;T1, T2&gt; ^&gt; ^ filter, [Runtime::InteropServices::Out] Tuple&lt;T1, T2&gt; ^ % item);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : Predicate&lt;'T1 * 'T2&gt; * Tuple -&gt; bool&#xA;override this.TryReceive : Predicate&lt;'T1 * 'T2&gt; * Tuple -&gt; bool" Usage="joinBlock.TryReceive (filter, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Predicate&lt;System.Tuple&lt;T1,T2&gt;&gt;" />
        <Parameter Name="item" Type="System.Tuple&lt;T1,T2&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filter"><span data-ttu-id="08e40-172">受信するために値で正常に渡す必要がある述語。</span><span class="sxs-lookup"><span data-stu-id="08e40-172">The predicate value must successfully pass in order for it to be received.</span></span>  <span data-ttu-id="08e40-173"><paramref name="filter" /> は <see langword="null" /> である可能性があります。その場合、すべての項目が渡されます。</span><span class="sxs-lookup"><span data-stu-id="08e40-173"><paramref name="filter" /> may be <see langword="null" />, in which case all items will pass.</span></span></param>
        <param name="item"><span data-ttu-id="08e40-174">ソースから受信された項目。</span><span class="sxs-lookup"><span data-stu-id="08e40-174">The item received from the source.</span></span></param>
        <summary><span data-ttu-id="08e40-175">使用可能な出力項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</span><span class="sxs-lookup"><span data-stu-id="08e40-175">Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="08e40-176">項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08e40-176"><see langword="true" /> if an item could be received; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08e40-177">このメソッドは、ソースが項目を提供するのを待機するのをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="08e40-177">This method does not block waiting for the source to provide an item.</span></span>  
  
 <span data-ttu-id="08e40-178">要素が使用可能であったかどうかにかかわらず、要素のチェック後に戻ります。</span><span class="sxs-lookup"><span data-stu-id="08e40-178">It will return after checking for an element, whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveAll">
      <MemberSignature Language="C#" Value="public bool TryReceiveAll (out System.Collections.Generic.IList&lt;Tuple&lt;T1,T2&gt;&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveAll([out] class System.Collections.Generic.IList`1&lt;class System.Tuple`2&lt;!T1, !T2&gt;&gt;&amp; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveAll (ByRef items As IList(Of Tuple(Of T1, T2))) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryReceiveAll([Runtime::InteropServices::Out] System::Collections::Generic::IList&lt;Tuple&lt;T1, T2&gt; ^&gt; ^ % items);" />
      <MemberSignature Language="F#" Value="abstract member TryReceiveAll : IList -&gt; bool&#xA;override this.TryReceiveAll : IList -&gt; bool" Usage="joinBlock.TryReceiveAll items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IList&lt;System.Tuple&lt;T1,T2&gt;&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="08e40-179">ソースから受信された項目。</span><span class="sxs-lookup"><span data-stu-id="08e40-179">The items received from the source.</span></span></param>
        <summary><span data-ttu-id="08e40-180">使用可能なすべての項目を <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> から同期的に受け取ろうとします。</span><span class="sxs-lookup"><span data-stu-id="08e40-180">Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="08e40-181">1 つ以上の項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08e40-181"><see langword="true" /> if one or more items could be received; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08e40-182">このメソッドは、ソースが項目を提供するのを待機するのをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="08e40-182">This method does not block waiting for the source to provide an item.</span></span>  
  
 <span data-ttu-id="08e40-183">要素が使用可能であったかどうかにかかわらず、要素のチェック後に戻ります。</span><span class="sxs-lookup"><span data-stu-id="08e40-183">It will return after checking for elements, whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
