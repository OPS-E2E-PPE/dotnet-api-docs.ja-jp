<Type Name="DataflowBlock" FullName="System.Threading.Tasks.Dataflow.DataflowBlock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="38cb818c3e9b39495390af6e352270f0832a7452" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75159168" /></Metadata><TypeSignature Language="C#" Value="public static class DataflowBlock" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataflowBlock extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.DataflowBlock" />
  <TypeSignature Language="VB.NET" Value="Public Module DataflowBlock" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataflowBlock abstract sealed" />
  <TypeSignature Language="F#" Value="type DataflowBlock = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.5.25.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
    <AssemblyVersion>4.6.4.0</AssemblyVersion>
    <AssemblyVersion>4.6.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="fb3f7-101">データフロー ブロックを操作する静的 (Visual Basic の場合は共有) メソッドのセットを提供します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-101">Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsObservable&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;TOutput&gt; AsObservable&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObservable`1&lt;!!TOutput&gt; AsObservable&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObservable(Of TOutput) (source As ISourceBlock(Of TOutput)) As IObservable(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObservable&lt;TOutput&gt; ^ AsObservable(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsObservable : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; IObservable&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-102">ソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-102">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-103">ラップするソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-103">The source to wrap.</span></span></param>
        <summary><span data-ttu-id="fb3f7-104"><see cref="T:System.IObservable`1" /> の新しい <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 抽象化を作成します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-104">Creates a new <see cref="T:System.IObservable`1" /> abstraction over the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-105">オブザーバーがソースにサブスクライブされるのを可能にする <see cref="T:System.IObservable`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-105">An <see cref="T:System.IObservable`1" /> that enables observers to be subscribed to the source.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-106"><paramref name="source" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-106">The <paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsObserver&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static IObserver&lt;TInput&gt; AsObserver&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObserver`1&lt;!!TInput&gt; AsObserver&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObserver(Of TInput) (target As ITargetBlock(Of TInput)) As IObserver(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObserver&lt;TInput&gt; ^ AsObserver(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="static member AsObserver : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; -&gt; IObserver&lt;'Input&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObserver&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="fb3f7-107">ターゲット ブロックが受け取る入力の種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-107">Specifies the type of input accepted by the target block.</span></span></typeparam>
        <param name="target"><span data-ttu-id="fb3f7-108">ラップするターゲット。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-108">The target to wrap.</span></span></param>
        <summary><span data-ttu-id="fb3f7-109"><see cref="T:System.IObserver`1" /> の新しい <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 抽象化を作成します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-109">Creates a new <see cref="T:System.IObserver`1" /> abstraction over the  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-110">ターゲット ブロックをラップするオブザーバー。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-110">An observer that wraps the target block.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1"><span data-ttu-id="fb3f7-111">最初のソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-111">Specifies type of data contained in the first source.</span></span></typeparam>
        <typeparam name="T2"><span data-ttu-id="fb3f7-112">2 番目のソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-112">Specifies type of data contained in the second source.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="fb3f7-113">1 番目のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-113">The first source.</span></span></param>
        <param name="action1"><span data-ttu-id="fb3f7-114">最初のソースからのデータで実行するハンドラー。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-114">The handler to execute on data from the first source.</span></span></param>
        <param name="source2"><span data-ttu-id="fb3f7-115">2 番目のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-115">The second source.</span></span></param>
        <param name="action2"><span data-ttu-id="fb3f7-116">2 番目のソースからのデータで実行するハンドラー。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-116">The handler to execute on data from the second source.</span></span></param>
        <summary><span data-ttu-id="fb3f7-117">2 つのデータ フロー ソースを監視し、データが最初に使用できるようになったソースに対して、指定したハンドラーを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-117">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-118">非同期の選択項目を表す <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-118">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span></span> <span data-ttu-id="fb3f7-119">両方のソースが選択の完了前に完了すると、結果のタスクは取り消されます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-119">If both sources are completed prior to the choice completing, the resulting task will be canceled.</span></span> <span data-ttu-id="fb3f7-120">いずれかのソースに使用できるデータがあり、それを選択内容に正常に反映した場合、ハンドラーの完了時に結果のタスクが完了します。ハンドラーが例外をスローした場合、タスクは <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で終了し、未処理の例外が含まれます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-120">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span></span> <span data-ttu-id="fb3f7-121">それ以外の場合、タスクは最初または 2 つ目のソースを表すためにそれぞれ <see cref="P:System.Threading.Tasks.Task`1.Result" /> が 0 または 1 に設定された状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-121">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span></span>  
  
<span data-ttu-id="fb3f7-122">このメソッドは、2 つのデータ ソースのいずれかからのみ要素を使用します。両方のデータ ソースから要素を使用することはありません。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-122">This method will only consume an element from one of the two data sources, never both.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-123"><paramref name="source1" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-123">The <paramref name="source1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-124">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-124">-or-</span></span> 
<span data-ttu-id="fb3f7-125"><paramref name="action1" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-125">The  <paramref name="action1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-126">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-126">-or-</span></span> 
<span data-ttu-id="fb3f7-127"><paramref name="source2" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-127">The <paramref name="source2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-128">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-128">-or-</span></span> 
<span data-ttu-id="fb3f7-129"><paramref name="action2" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-129">The <paramref name="action2" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, dataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1"><span data-ttu-id="fb3f7-130">最初のソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-130">Specifies type of data contained in the first source.</span></span></typeparam>
        <typeparam name="T2"><span data-ttu-id="fb3f7-131">2 番目のソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-131">Specifies type of data contained in the second source.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="fb3f7-132">1 番目のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-132">The first source.</span></span></param>
        <param name="action1"><span data-ttu-id="fb3f7-133">最初のソースからのデータで実行するハンドラー。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-133">The handler to execute on data from the first source.</span></span></param>
        <param name="source2"><span data-ttu-id="fb3f7-134">2 番目のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-134">The second source.</span></span></param>
        <param name="action2"><span data-ttu-id="fb3f7-135">2 番目のソースからのデータで実行するハンドラー。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-135">The handler to execute on data from the second source.</span></span></param>
        <param name="dataflowBlockOptions"><span data-ttu-id="fb3f7-136">この選択の構成に使用するオプション。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-136">The options with which to configure this choice.</span></span></param>
        <summary><span data-ttu-id="fb3f7-137">2 つのデータ フロー ソースを監視し、データが最初に使用できるようになったソースに対して、指定したハンドラーを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-137">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-138">非同期の選択項目を表す <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-138">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span></span> <span data-ttu-id="fb3f7-139">両方のソースが選択の完了前に完了するか、<see cref="T:System.Threading.CancellationToken" /> の一部として提供された <paramref name="dataflowBlockOptions" /> が選択の完了前に取り消される場合、結果のタスクは取り消されます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-139">If both sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span></span> <span data-ttu-id="fb3f7-140">いずれかのソースに使用できるデータがあり、それを選択内容に正常に反映した場合、ハンドラーの完了時に結果のタスクが完了します。ハンドラーが例外をスローした場合、タスクは <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で終了し、未処理の例外が含まれます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-140">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span></span> <span data-ttu-id="fb3f7-141">それ以外の場合、タスクは最初または 2 つ目のソースを表すためにそれぞれ <see cref="P:System.Threading.Tasks.Task`1.Result" /> が 0 または 1 に設定された状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-141">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-142"><paramref name="source1" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-142">The <paramref name="source1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-143">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-143">-or-</span></span> 
<span data-ttu-id="fb3f7-144"><paramref name="action1" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-144">The <paramref name="action1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-145">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-145">-or-</span></span> 
<span data-ttu-id="fb3f7-146"><paramref name="source2" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-146">The <paramref name="source2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-147">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-147">-or-</span></span> 
<span data-ttu-id="fb3f7-148"><paramref name="action2" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-148">The <paramref name="action2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-149">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-149">-or-</span></span> 
<span data-ttu-id="fb3f7-150"><paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-150">The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2, T3) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2), source3 As ISourceBlock(Of T3), action3 As Action(Of T3)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T3&gt; * Action&lt;'T3&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, source3, action3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1"><span data-ttu-id="fb3f7-151">最初のソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-151">Specifies type of data contained in the first source.</span></span></typeparam>
        <typeparam name="T2"><span data-ttu-id="fb3f7-152">2 番目のソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-152">Specifies type of data contained in the second source.</span></span></typeparam>
        <typeparam name="T3"><span data-ttu-id="fb3f7-153">3 番目のソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-153">Specifies type of data contained in the third source.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="fb3f7-154">1 番目のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-154">The first source.</span></span></param>
        <param name="action1"><span data-ttu-id="fb3f7-155">最初のソースからのデータで実行するハンドラー。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-155">The handler to execute on data from the first source.</span></span></param>
        <param name="source2"><span data-ttu-id="fb3f7-156">2 番目のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-156">The second source.</span></span></param>
        <param name="action2"><span data-ttu-id="fb3f7-157">2 番目のソースからのデータで実行するハンドラー。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-157">The handler to execute on data from the second source.</span></span></param>
        <param name="source3"><span data-ttu-id="fb3f7-158">3 番目のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-158">The third source.</span></span></param>
        <param name="action3"><span data-ttu-id="fb3f7-159">3 番目のソースのデータで実行するハンドラー。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-159">The handler to execute on data from the third source.</span></span></param>
        <summary><span data-ttu-id="fb3f7-160">3 つのデータ フロー ソースを監視し、データが最初に使用できるようになったソースに対して、指定したハンドラーを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-160">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-161">非同期の選択項目を表す <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-161">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span></span> <span data-ttu-id="fb3f7-162">すべてのソースが選択の完了前に完了すると、結果のタスクは取り消されます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-162">If all sources are completed prior to the choice completing, the resulting task will be canceled.</span></span> <span data-ttu-id="fb3f7-163">いずれかのソースに使用できるデータがあり、それを選択内容に正常に反映した場合、ハンドラーの完了時に結果のタスクが完了します。ハンドラーが例外をスローした場合、タスクは <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で終了し、未処理の例外が含まれます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-163">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span></span> <span data-ttu-id="fb3f7-164">それ以外の場合、タスクは <see cref="P:System.Threading.Tasks.Task`1.Result" /> がソースの 0 から始まるインデックスに設定された状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-164">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span></span>  
  
<span data-ttu-id="fb3f7-165">このメソッドは、1 つのデータ ソースからのみ要素を使用します。複数のデータ ソースから要素を使用することはありません。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-165">This method will only consume an element from one of the data sources, never more than one.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-166"><paramref name="source1" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-166">The <paramref name="source1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-167">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-167">-or-</span></span> 
<span data-ttu-id="fb3f7-168"><paramref name="action1" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-168">The <paramref name="action1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-169">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-169">-or-</span></span> 
<span data-ttu-id="fb3f7-170"><paramref name="source2" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-170">The <paramref name="source2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-171">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-171">-or-</span></span> 
<span data-ttu-id="fb3f7-172"><paramref name="action2" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-172">The <paramref name="action2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-173">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-173">-or-</span></span> 
<span data-ttu-id="fb3f7-174"><paramref name="source3" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-174">The <paramref name="source3" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-175">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-175">-or-</span></span> 
<span data-ttu-id="fb3f7-176"><paramref name="action3" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-176">The <paramref name="action3" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T3&gt; * Action&lt;'T3&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, source3, action3, dataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1"><span data-ttu-id="fb3f7-177">最初のソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-177">Specifies type of data contained in the first source.</span></span></typeparam>
        <typeparam name="T2"><span data-ttu-id="fb3f7-178">2 番目のソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-178">Specifies type of data contained in the second source.</span></span></typeparam>
        <typeparam name="T3"><span data-ttu-id="fb3f7-179">3 番目のソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-179">Specifies type of data contained in the third source.</span></span></typeparam>
        <param name="source1"><span data-ttu-id="fb3f7-180">1 番目のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-180">The first source.</span></span></param>
        <param name="action1"><span data-ttu-id="fb3f7-181">最初のソースからのデータで実行するハンドラー。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-181">The handler to execute on data from the first source.</span></span></param>
        <param name="source2"><span data-ttu-id="fb3f7-182">2 番目のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-182">The second source.</span></span></param>
        <param name="action2"><span data-ttu-id="fb3f7-183">2 番目のソースからのデータで実行するハンドラー。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-183">The handler to execute on data from the second source.</span></span></param>
        <param name="source3"><span data-ttu-id="fb3f7-184">3 番目のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-184">The third source.</span></span></param>
        <param name="action3"><span data-ttu-id="fb3f7-185">3 番目のソースのデータで実行するハンドラー。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-185">The handler to execute on data from the third source.</span></span></param>
        <param name="dataflowBlockOptions"><span data-ttu-id="fb3f7-186">この選択の構成に使用するオプション。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-186">The options with which to configure this choice.</span></span></param>
        <summary><span data-ttu-id="fb3f7-187">3 つのデータ フロー ソースを監視し、データが最初に使用できるようになったソースに対して、指定したハンドラーを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-187">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-188">非同期の選択項目を表す <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-188">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span></span> <span data-ttu-id="fb3f7-189">すべてのソースが選択の完了前に完了するか、<see cref="T:System.Threading.CancellationToken" /> の一部として提供された <paramref name="dataflowBlockOptions" /> が選択の完了前に取り消される場合、結果のタスクは取り消されます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-189">If all sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span></span> <span data-ttu-id="fb3f7-190">いずれかのソースに使用できるデータがあり、それを選択内容に正常に反映した場合、ハンドラーの完了時に結果のタスクが完了します。ハンドラーが例外をスローした場合、タスクは <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状態で終了し、未処理の例外が含まれます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-190">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span></span> <span data-ttu-id="fb3f7-191">それ以外の場合、タスクは <see cref="P:System.Threading.Tasks.Task`1.Result" /> がソースの 0 から始まるインデックスに設定された状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-191">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span></span>  
  
<span data-ttu-id="fb3f7-192">このメソッドは、1 つのデータ ソースからのみ要素を使用します。複数のデータ ソースから要素を使用することはありません。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-192">This method will only consume an element from one of the data sources, never more than one.</span></span> <span data-ttu-id="fb3f7-193">要素が受信された後で取り消しが要求された場合、取り消し要求は無視され、関連するハンドラーの実行が許可されます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-193">If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-194"><paramref name="source1" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-194">The <paramref name="source1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-195">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-195">-or-</span></span> 
<span data-ttu-id="fb3f7-196"><paramref name="action1" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-196">The <paramref name="action1" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-197">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-197">-or-</span></span> 
<span data-ttu-id="fb3f7-198"><paramref name="source2" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-198">The <paramref name="source2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-199">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-199">-or-</span></span> 
<span data-ttu-id="fb3f7-200"><paramref name="action2" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-200">The <paramref name="action2" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-201">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-201">-or-</span></span> 
<span data-ttu-id="fb3f7-202"><paramref name="source3" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-202">The <paramref name="source3" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-203">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-203">-or-</span></span> 
<span data-ttu-id="fb3f7-204"><paramref name="action3" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-204">The <paramref name="action3" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-205">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-205">-or-</span></span> 
<span data-ttu-id="fb3f7-206"><paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-206">The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Encapsulate&lt;TInput,TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt; Encapsulate&lt;TInput,TOutput&gt; (System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!!TInput, !!TOutput&gt; Encapsulate&lt;TInput, TOutput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Encapsulate(Of TInput, TOutput) (target As ITargetBlock(Of TInput), source As ISourceBlock(Of TOutput)) As IPropagatorBlock(Of TInput, TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput, typename TOutput&gt;&#xA; static System::Threading::Tasks::Dataflow::IPropagatorBlock&lt;TInput, TOutput&gt; ^ Encapsulate(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Encapsulate : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;'Input, 'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate (target, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="fb3f7-207">ターゲットが予期する入力のタイプを指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-207">Specifies the type of input expected by the target.</span></span></typeparam>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-208">ソースで作成される出力のタイプを指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-208">Specifies the type of output produced by the source.</span></span></typeparam>
        <param name="target"><span data-ttu-id="fb3f7-209">カプセル化するターゲット。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-209">The target to encapsulate.</span></span></param>
        <param name="source"><span data-ttu-id="fb3f7-210">カプセル化するソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-210">The source to encapsulate.</span></span></param>
        <summary><span data-ttu-id="fb3f7-211">ターゲットとソースを単一の伝達子にカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-211">Encapsulates a target and a source into a single propagator.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-212">カプセル化されたターゲットとソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-212">The encapsulated target and source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb3f7-213"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> メソッドには、ターゲットブロック (<xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>を実装するクラスのインスタンス) とソースブロック (<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>を実装するクラスのインスタンス) の2つの既存のブロックが必要です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-213">The <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method requires two existing blocks: a target block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) and a source block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>).</span></span> <span data-ttu-id="fb3f7-214"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> は、<xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> インターフェイスメンバーを `target` パラメーターに、<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> インターフェイスメンバーを `source` パラメーターに接続する内部クラスの新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-214"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> creates a new instance of an internal class that connects the <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> interface members to the `target` parameter and the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> interface members to the `source` parameter.</span></span>  <span data-ttu-id="fb3f7-215"><xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> と <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> はどちらも <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>から派生します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-215">Both <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> and <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> derive from <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>.</span></span> <span data-ttu-id="fb3f7-216">ブロックの完了は、ソースからターゲットに明示的に渡されます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-216">Block completion is explicitly passed from sources to targets.</span></span> <span data-ttu-id="fb3f7-217">したがって、<xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> プロパティがソースに接続されている間、<xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> および <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> メソッドはターゲットに接続されます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-217">Therefore, the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> and <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> methods are connected to the target while the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> property is connected to the source.</span></span>  <span data-ttu-id="fb3f7-218">ターゲットの半分が完了すると、ソースの半分が最適な方法で完了していることを確認する必要があります。例えば：</span><span class="sxs-lookup"><span data-stu-id="fb3f7-218">You must ensure that when the target half  completes, the source half gets completed in the most appropriate manner; for example:</span></span>  
  
 `target.Completion.ContinueWith(completion => source.Complete());`  
  
 <span data-ttu-id="fb3f7-219">または、完了の型を伝達する場合は、次のより高度なコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-219">Or, if you want to propagate the completion type, you can use this more sophisticated code:</span></span>  
  
```  
target.Completion.ContinueWith(completion => { if (completion.IsFaulted)    
  
((IDataflowBlock)batchBlock).Fault(completion.Exception);   
else   
batchBlock.Complete();   
});  
  
```  
  
 <span data-ttu-id="fb3f7-220">また、ターゲットからソースへのメッセージ伝達も明示的に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-220">You must also explicitly provide the message propagation from target to source.</span></span> <span data-ttu-id="fb3f7-221">この明示的な接続の利点は、カプセル化された2つのブロック間で、制約のない処理を自由に実行できることです。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-221">The benefit of this explicit connection is that it gives you the freedom to perform any unconstrained processing between the two encapsulated blocks.</span></span> <span data-ttu-id="fb3f7-222">そのためには、必要な処理をブロックのデリゲートにエンコードするか (ブロックがデリゲートを受け取る場合)、またはそれらの間にブロックのサブネットワークを埋め込むことによって行うことができます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-222">You may do that either by encoding the necessary processing into the blocks' delegates (if the blocks take delegates), or by embedding a sub-network of blocks between them.</span></span> <span data-ttu-id="fb3f7-223">より簡単な方法は、デリゲートを受け取るブロックを使用することです。たとえば、<xref:System.Threading.Tasks.Dataflow.ActionBlock%601>、<xref:System.Threading.Tasks.Dataflow.TransformBlock%602>、<xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (該当する場合)、またはカスタムブロックを使用します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-223">The easier way is to use a block that takes delegates; for example, use <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (if applicable), or a custom block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-224">ソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-224">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-225">リンク元のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-225">The source from which to link.</span></span></param>
        <param name="target"><span data-ttu-id="fb3f7-226">ソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-226">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span></span></param>
        <summary><span data-ttu-id="fb3f7-227">指定した <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> をリンクします。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-227">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-228"><see cref="T:System.IDisposable" /> の呼び出し時にソースをターゲットからリンク解除する <see langword="Dispose" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-228">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-229"><paramref name="source" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-229">The <paramref name="source" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-230">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-230">-or-</span></span> 
<span data-ttu-id="fb3f7-231"><paramref name="target" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-231">The <paramref name="target" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * Predicate&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-232">ソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-232">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-233">リンク元のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-233">The source from which to link.</span></span></param>
        <param name="target"><span data-ttu-id="fb3f7-234">ソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-234">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span></span></param>
        <param name="predicate"><span data-ttu-id="fb3f7-235">メッセージをソースからターゲットに伝達するために渡す必要のあるフィルター。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-235">The filter a message must pass in order for it to propagate from the source to the target.</span></span></param>
        <summary><span data-ttu-id="fb3f7-236">指定したフィルターを使用して、指定した <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> をリンクします。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-236">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-237"><see cref="T:System.IDisposable" /> の呼び出し時にソースをターゲットからリンク解除する <see langword="Dispose" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-237">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-238"><paramref name="source" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-238">The <paramref name="source" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-239">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-239">-or-</span></span> 
<span data-ttu-id="fb3f7-240"><paramref name="target" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-240">The <paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="fb3f7-241">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-241">-or-</span></span> 
<span data-ttu-id="fb3f7-242"><paramref name="predicate" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-242">The <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), linkOptions As DataflowLinkOptions, predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, System::Threading::Tasks::Dataflow::DataflowLinkOptions ^ linkOptions, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions * Predicate&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target, linkOptions, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-243">ソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-243">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-244">リンク元のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-244">The source from which to link.</span></span></param>
        <param name="target"><span data-ttu-id="fb3f7-245">ソースの接続先の <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-245">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span></span></param>
        <param name="linkOptions"><span data-ttu-id="fb3f7-246">データ フロー ブロック間のリンクを構成する方法を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-246">One of the enumeration values that specifies how to configure a link between dataflow blocks.</span></span></param>
        <param name="predicate"><span data-ttu-id="fb3f7-247">メッセージをソースからターゲットに伝達するために渡す必要のあるフィルター。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-247">The filter a message must pass in order for it to propagate from the source to the target.</span></span></param>
        <summary><span data-ttu-id="fb3f7-248">指定したフィルターを使用して、指定した <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> に <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> をリンクします。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-248">Links the  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-249"><see cref="T:System.IDisposable" /> の呼び出し時にソースをターゲットからリンク解除する <see langword="Dispose" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-249">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-250"><paramref name="source" /> は null (Visual Basic では Nothing) です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-250">The  <paramref name="source" /> is null (Nothing in Visual Basic).</span></span>  
  
<span data-ttu-id="fb3f7-251">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-251">-or-</span></span> 
<span data-ttu-id="fb3f7-252"><paramref name="target" /> は null (Visual Basic では Nothing) です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-252">The  <paramref name="target" /> is null (Nothing in Visual Basic).</span></span>  
  
<span data-ttu-id="fb3f7-253">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-253">-or-</span></span> 
<span data-ttu-id="fb3f7-254"><paramref name="linkOptions" /> は null (Visual Basic では Nothing) です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-254">The  <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</span></span>  
  
<span data-ttu-id="fb3f7-255">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-255">-or-</span></span> 
<span data-ttu-id="fb3f7-256"><paramref name="predicate" /> は null (Visual Basic では Nothing) です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-256">The  <paramref name="predicate" /> is null (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NullTarget&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; NullTarget&lt;TInput&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; NullTarget&lt;TInput&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1" />
      <MemberSignature Language="VB.NET" Value="Public Function NullTarget(Of TInput) () As ITargetBlock(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA; static System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ NullTarget();" />
      <MemberSignature Language="F#" Value="static member NullTarget : unit -&gt; System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="fb3f7-257">このブロックが受け入れるメッセージの型。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-257">The type of the messages this block can accept.</span></span></typeparam>
        <summary><span data-ttu-id="fb3f7-258">提供されるすべてのメッセージを同期的に受け入れてドロップするターゲット ブロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-258">Gets a target block that synchronously accepts all messages offered to it and drops them.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-259">提供されたメッセージをすべて受け入れた後破棄する <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-259">A <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> that accepts and subsequently drops all offered messages.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OutputAvailableAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member OutputAvailableAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-260">ソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-260">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-261">監視するソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-261">The source to monitor.</span></span></param>
        <summary><span data-ttu-id="fb3f7-262">使用できる出力のソースを非同期的に監視する <see cref="T:System.Threading.Tasks.Task`1" /> を提供します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-262">Provides a <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-263">詳細の出力の有無といつ使用できるかを通知する <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-263">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span></span> <span data-ttu-id="fb3f7-264">タスクの完了時に、<see cref="P:System.Threading.Tasks.Task`1.Result" /> が <see langword="true" /> の場合は、ソース内のより多くの出力を利用できます (ソースの他のコンシューマーもデータを取得することがあります)。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-264">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span></span>  
  
<span data-ttu-id="fb3f7-265"><see langword="false" /> が返される場合、出力が使用可能になる前にソースが完了するため、出力は今後も使用できなくなります。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-265">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member OutputAvailableAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-266">ソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-266">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-267">監視するソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-267">The source to monitor.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fb3f7-268">非同期操作をキャンセルするキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-268">The cancellation token with which to cancel the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="fb3f7-269">使用できる出力のソースを非同期的に監視する <see cref="T:System.Threading.Tasks.Task`1" /> を提供します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-269">Provides a  <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-270">詳細の出力の有無といつ使用できるかを通知する <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-270">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span></span> <span data-ttu-id="fb3f7-271">タスクの完了時に、<see cref="P:System.Threading.Tasks.Task`1.Result" /> が <see langword="true" /> の場合は、ソース内のより多くの出力を利用できます (ソースの他のコンシューマーもデータを取得することがあります)。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-271">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span></span> <span data-ttu-id="fb3f7-272"><see langword="false" /> が返される場合、出力が使用可能になる前にソースが完了するため、出力は今後も使用できなくなります。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-272">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Post&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static bool Post&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Post&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Post(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Post(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberSignature Language="F#" Value="static member Post : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input -&gt; bool" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Post (target, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="fb3f7-273">ターゲット ブロックが受け取るデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-273">Specifies the type of data accepted by the target block.</span></span></typeparam>
        <param name="target"><span data-ttu-id="fb3f7-274">ターゲット ブロック。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-274">The target block.</span></span></param>
        <param name="item"><span data-ttu-id="fb3f7-275">ターゲットに提供される項目。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-275">The item being offered to the target.</span></span></param>
        <summary><span data-ttu-id="fb3f7-276"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> に項目をポストします。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-276">Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-277">項目がターゲット ブロックによって受け入れられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-277"><see langword="true" /> if the item was accepted by the target block; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb3f7-278">このメソッドは、ターゲットブロックが項目の受け入れまたは拒否を決定した後、を返します。ただし、ターゲットブロックの特殊なセマンティクスによって指定されている場合を除き、実際に項目が処理されるまで待機しません。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-278">This method will return once the target block has decided to accept or decline the item, but unless otherwise dictated by special semantics of the target block, it does not wait for the item to actually be processed.</span></span> <span data-ttu-id="fb3f7-279">たとえば、<xref:System.Threading.Tasks.Dataflow.ActionBlock%601> は、ポストされた項目を入力キューに格納した直後に <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> から戻ります。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-279">For example, <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> will return from <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> as soon as it has stored the posted item into its input queue).</span></span> <span data-ttu-id="fb3f7-280">ブロックの処理の観点からは、`Post` は非同期です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-280">From the perspective of the block's processing, `Post` is asynchronous.</span></span> <span data-ttu-id="fb3f7-281">提供されたメッセージの遅延をサポートするターゲットブロック、または `Post` の実装でより多くの処理を実行するブロックの場合は、<xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>を使用することを検討してください。これは直ちに返され、ターゲットがポストされたメッセージを延期して、`SendAsync` が戻った後で後で使用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-281">For target blocks that support postponing offered messages, or for blocks that may do more processing in their `Post` implementation, consider using <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>, which will return immediately and will enable the target to postpone the posted message and later consume it after `SendAsync` returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput)) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-282">ソースに含まれるデータの型。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-282">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-283">値を受信する元のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-283">The source from which to receive the value.</span></span></param>
        <summary><span data-ttu-id="fb3f7-284">指定されたソースから値を同期的に受信します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-284">Synchronously receives a value from a specified source.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-285">受け取った値。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-285">The received value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-286"><paramref name="source" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-286"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fb3f7-287">ソースから項目を受信できませんでした。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-287">No item could be received from the source.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-288">ソースに含まれるデータの型。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-288">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-289">値を受信する元のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-289">The source from which to receive the value.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fb3f7-290">受信操作を取り消すために使用するトークン。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-290">The token to use to cancel the receive operation.</span></span></param>
        <summary><span data-ttu-id="fb3f7-291">同期的に指定したソースから値を受け取り、操作をキャンセルするトークンを提供します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-291">Synchronously receives a value from a specified source and provides a token to cancel the operation.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-292">受け取った値。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-292">The received value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb3f7-293">この操作によって受信された項目がソースによって正常に提供された場合、同時実行のキャンセル要求が発生しても、その項目は返されます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-293">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-294"><paramref name="source" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-294"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fb3f7-295">ソースから項目を受信できませんでした。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-295">No item could be received from the source.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="fb3f7-296">操作は、ソースから項目を受け取る前に取り消されました。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-296">The operation was canceled before an item was received from the source.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-297">ソースに含まれるデータの型。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-297">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-298">値を受信する元のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-298">The source from which to receive the value.</span></span></param>
        <param name="timeout"><span data-ttu-id="fb3f7-299">同期操作が完了するまで待機する最大時間間隔 (ミリ秒単位)。-1 ミリ秒を設定すると無制限に待機します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-299">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="fb3f7-300">同期的に指定したソースから値を受信し、オプションのタイムアウト期間を確認します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-300">Synchronously receives a value from a specified source, observing an optional time-out period.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-301">受け取った値。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-301">The received value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb3f7-302">この操作で受信した項目がソースによって正常に提供された場合、同時実行タイムアウトが発生した場合でも、その項目は返されます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-302">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent time-out occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fb3f7-303"><paramref name="timeout" /> は -1 ミリ秒以外の負数です。-1 は無制限のタイムアウト期間を表します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-303"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span></span>  
  
<span data-ttu-id="fb3f7-304">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-304">-or-</span></span> 
 <span data-ttu-id="fb3f7-305"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-305"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-306"><paramref name="source" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-306"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fb3f7-307">ソースから項目を受信できませんでした。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-307">No item could be received from the source.</span></span></exception>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="fb3f7-308">項目をソースから受け取る前に、指定されたタイムアウトの時間になりました。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-308">The specified time-out expired before an item was received from the source.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan * System.Threading.CancellationToken -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-309">ソースに含まれるデータの型。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-309">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-310">値を受信する元のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-310">The source from which to receive the value.</span></span></param>
        <param name="timeout"><span data-ttu-id="fb3f7-311">同期操作が完了するまで待機する最大時間間隔 (ミリ秒単位)。-1 ミリ秒を設定すると無制限に待機します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-311">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fb3f7-312">受信操作を取り消すために使用するトークン。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-312">The token to use to cancel the receive operation.</span></span></param>
        <summary><span data-ttu-id="fb3f7-313">同期的に操作をキャンセルするトークンを提供し、オプションのタイムアウト間隔を確認する指定したソースから値を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-313">Synchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-314">受け取った値。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-314">The received value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb3f7-315">この操作で受信した項目の値がソースによって正常に提供された場合、同時実行のタイムアウトまたはキャンセル要求が発生した場合でも、その値が返されます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-315">If the source successfully offered an item value that was received by this operation, that value is returned even if a concurrent time-out or cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-316"><paramref name="source" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-316">The <paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fb3f7-317"><paramref name="timeout" /> は -1 ミリ秒以外の負数です。-1 は無制限のタイムアウト期間を表します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-317"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span></span>  
  
<span data-ttu-id="fb3f7-318">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-318">-or-</span></span> 
 <span data-ttu-id="fb3f7-319"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-319"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fb3f7-320">ソースから項目を受信できませんでした。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-320">No item could be received from the source.</span></span></exception>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="fb3f7-321">項目をソースから受け取る前に、指定されたタイムアウトの時間になりました。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-321">The specified time-out expired before an item was received from the source.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="fb3f7-322">操作は、ソースから項目を受け取る前に取り消されました。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-322">The operation was canceled before an item was received from the source.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-323">ソースに含まれるデータの型。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-323">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-324">値を受信する元のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-324">The source from which to receive the value.</span></span></param>
        <summary><span data-ttu-id="fb3f7-325">指定されたソースから値を非同期的に受信します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-325">Asynchronously receives a value from a specified source.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-326">非同期の受信操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-326">A task that represents the asynchronous receive operation.</span></span> <span data-ttu-id="fb3f7-327">項目値をソースから正常に受け取った場合、返されたタスクが完了し、<see cref="P:System.Threading.Tasks.Task`1.Result" /> が受け取った値を返します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-327">When an item value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the received value.</span></span> <span data-ttu-id="fb3f7-328">ソースが空で完了しているために項目の値が取得できない場合には、返されたタスクで <see cref="T:System.InvalidOperationException" /> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-328">If an item value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-329"><paramref name="source" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-329"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-330">ソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-330">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-331">値を受信する元のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-331">The source from which to receive the value.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fb3f7-332">受信操作を取り消すために使用するトークン。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-332">The token to use to cancel the receive operation.</span></span></param>
        <summary><span data-ttu-id="fb3f7-333">非同期に指定したソースから値を受け取り、操作をキャンセルするトークンを提供します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-333">Asynchronously receives a value from a specified source and provides a token to cancel the operation.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-334">非同期の受信操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-334">A task that represents the asynchronous receive operation.</span></span> <span data-ttu-id="fb3f7-335">値をソースから正常に受け取った場合、返されたタスクが完了し、<see cref="P:System.Threading.Tasks.Task`1.Result" /> が値を返します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-335">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span></span> <span data-ttu-id="fb3f7-336">キャンセルが要求されたため値を取得できない場合には、返されたタスクはキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-336">If a value cannot be retrieved because cancellation was requested, the returned task is canceled.</span></span> <span data-ttu-id="fb3f7-337">ソースが空で完了しているために値が取得できない場合には、返されたタスクの <see cref="T:System.InvalidOperationException" /> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-337">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-338"><paramref name="source" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-338"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-339">ソースに含まれるデータの型。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-339">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-340">値を受信する元のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-340">The source from which to receive the value.</span></span></param>
        <param name="timeout"><span data-ttu-id="fb3f7-341">同期操作が完了するまで待機する最大時間間隔 (ミリ秒単位)。-1 ミリ秒を設定すると無制限に待機します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-341">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="fb3f7-342">非同期に指定したソースから値を受信し、オプションのタイムアウト期間を確認します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-342">Asynchronously receives a value from a specified source, observing an optional time-out period.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-343">非同期の受信操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-343">A task that represents the asynchronous receive operation.</span></span> <span data-ttu-id="fb3f7-344">値をソースから正常に受け取った場合、返されたタスクが完了し、<see cref="P:System.Threading.Tasks.Task`1.Result" /> が値を返します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-344">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span></span> <span data-ttu-id="fb3f7-345">タイムアウトの時間が経過したため値を取得できない場合には、返されたタスクはキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-345">If a value cannot be retrieved because the time-out expired, the returned task is canceled.</span></span> <span data-ttu-id="fb3f7-346">ソースが空で完了しているために値が取得できない場合には、返されたタスクの <see cref="T:System.InvalidOperationException" /> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-346">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-347"><paramref name="source" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-347"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fb3f7-348"><paramref name="timeout" /> は -1 ミリ秒以外の負数です。-1 は無制限のタイムアウト期間を表します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-348"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span></span>  
  
<span data-ttu-id="fb3f7-349">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-349">-or-</span></span> 
 <span data-ttu-id="fb3f7-350"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-350"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-351">ソースに含まれるデータの型。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-351">The type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-352">値を受信する元のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-352">The source from which to receive the value.</span></span></param>
        <param name="timeout"><span data-ttu-id="fb3f7-353">同期操作が完了するまで待機する最大時間間隔 (ミリ秒単位)。-1 ミリ秒を設定すると無制限に待機します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-353">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fb3f7-354">受信操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-354">The token which may be used to cancel the receive operation.</span></span></param>
        <summary><span data-ttu-id="fb3f7-355">非同期に操作をキャンセルするトークンを提供し、オプションのタイムアウト間隔を確認する指定したソースから値を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-355">Asynchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-356">非同期の受信操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-356">A task that represents the asynchronous receive operation.</span></span> <span data-ttu-id="fb3f7-357">値をソースから正常に受け取った場合、返されたタスクが完了し、<see cref="P:System.Threading.Tasks.Task`1.Result" /> が値を返します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-357">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span></span> <span data-ttu-id="fb3f7-358">タイムアウトの時間が経過するか、キャンセルが要求されたため値を取得できない場合には、返されたタスクはキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-358">If a value cannot be retrieved because the time-out expired or cancellation was requested, the returned task is canceled.</span></span> <span data-ttu-id="fb3f7-359">ソースが空で完了しているために値が取得できない場合には、返されたタスクの <see cref="T:System.InvalidOperationException" /> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-359">If the value cannot be retrieved because the source is empty and completed, an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-360"><paramref name="source" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-360"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fb3f7-361"><paramref name="timeout" /> は -1 ミリ秒以外の負数です。-1 は無制限のタイムアウト期間を表します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-361"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span></span>  
  
<span data-ttu-id="fb3f7-362">または</span><span class="sxs-lookup"><span data-stu-id="fb3f7-362">-or-</span></span> 
 <span data-ttu-id="fb3f7-363"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-363"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SendAsync(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberSignature Language="F#" Value="static member SendAsync : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync (target, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="fb3f7-364">ターゲットにポストするデータ型を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-364">Specifies the type of the data to post to the target.</span></span></typeparam>
        <param name="target"><span data-ttu-id="fb3f7-365">データをポストするターゲット。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-365">The target to which to post the data.</span></span></param>
        <param name="item"><span data-ttu-id="fb3f7-366">ターゲットに提供される項目。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-366">The item being offered to the target.</span></span></param>
        <summary><span data-ttu-id="fb3f7-367">ターゲット メッセージ ブロックにメッセージを非同期的に提供し、遅延を可能にします。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-367">Asynchronously offers a message to the target message block, allowing for postponement.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-368">非同期送信を表す <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-368">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span></span> <span data-ttu-id="fb3f7-369">ターゲットが <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" /> の呼び出し中に提供された要素を受け入れて使用する場合、呼び出しから戻ったときに、結果の <see cref="T:System.Threading.Tasks.Task`1" /> が完了し、その <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは <see langword="true" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-369">If the target accepts and consumes the offered element during the call to <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="true" />.</span></span> <span data-ttu-id="fb3f7-370">ターゲットが呼び出し中に提供された要素を拒否する場合、呼び出しから戻ったときに、結果の <see cref="T:System.Threading.Tasks.Task`1" /> が完了し、その <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-370">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="false" />.</span></span> <span data-ttu-id="fb3f7-371">提供された要素をターゲットが延期する場合、要素はターゲットが要素を使用または解放するまでバッファリングされます。要素が使用または解放された時点でタスクは完了し、<see cref="P:System.Threading.Tasks.Task`1.Result" /> はメッセージが使用されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-371">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> indicating whether the message was consumed.</span></span> <span data-ttu-id="fb3f7-372">ターゲットがメッセージを使用または解放しようとしない場合、返されたタスクは完了しません。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-372">If the target never attempts to consume or release the message, the returned task will never complete.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-373"><paramref name="target" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-373">The <paramref name="target" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member SendAsync : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync (target, item, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="fb3f7-374">ターゲットにポストするデータ型を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-374">Specifies the type of the data to post to the target.</span></span></typeparam>
        <param name="target"><span data-ttu-id="fb3f7-375">データをポストするターゲット。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-375">The target to which to post the data.</span></span></param>
        <param name="item"><span data-ttu-id="fb3f7-376">ターゲットに提供される項目。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-376">The item being offered to the target.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fb3f7-377">送信操作のキャンセルを要求するキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-377">The cancellation token with which to request cancellation of the send operation.</span></span></param>
        <summary><span data-ttu-id="fb3f7-378">ターゲット メッセージ ブロックにメッセージを非同期的に提供し、遅延を可能にします。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-378">Asynchronously offers a message to the target message block, allowing for postponement.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-379">非同期送信を表す <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-379">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span></span>  <span data-ttu-id="fb3f7-380">ターゲットが SendAsync の呼び出し中に提供された要素を受け入れて使用する場合、呼び出しから戻ったときに、結果の <see cref="T:System.Threading.Tasks.Task`1" /> が完了し、その <c>Result</c> プロパティは true を返します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-380">If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return true.</span></span>  <span data-ttu-id="fb3f7-381">ターゲットが呼び出し中に提供された要素を拒否する場合、呼び出しから戻ったときに、結果の <see cref="T:System.Threading.Tasks.Task`1" /> が完了し、その <c>Result</c> プロパティは false を返します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-381">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return false.</span></span> <span data-ttu-id="fb3f7-382">提供された要素をターゲットが延期する場合、要素はターゲットが要素を使用または解放するまでバッファリングされます。要素が使用または解放された時点でタスクは完了し、<c>Result</c> はメッセージが使用されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-382">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its <c>Result</c> indicating whether the message was consumed.</span></span> <span data-ttu-id="fb3f7-383">ターゲットがメッセージを使用または解放しようとしない場合、返されたタスクは完了しません。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-383">If the target never attempts to consume or release the message, the returned task will never complete.</span></span>  
  
<span data-ttu-id="fb3f7-384">送信されたデータをターゲットが正常に使用し終わる前に取り消しが要求された場合、返されるタスクは取り消された状態で完了し、データはターゲットで使用できなくなります。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-384">If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fb3f7-385"><paramref name="target" /> は null (Visual Basic では Nothing) です。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-385">The  <paramref name="target" /> is null (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static bool TryReceive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt; source, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReceive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!!TOutput&gt; source, [out] !!TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryReceive(Of TOutput) (source As IReceivableSourceBlock(Of TOutput), ByRef item As TOutput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryReceive(System::Threading::Tasks::Dataflow::IReceivableSourceBlock&lt;TOutput&gt; ^ source, [Runtime::InteropServices::Out] TOutput % item);" />
      <MemberSignature Language="F#" Value="static member TryReceive : System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;'Output&gt; * 'Output -&gt; bool" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive (source, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
        <AssemblyVersion>4.6.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="item" Type="TOutput" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fb3f7-386">ソースに格納されるデータの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-386">Specifies the type of data contained in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="fb3f7-387">受信元のソース。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-387">The source from which to receive.</span></span></param>
        <param name="item"><span data-ttu-id="fb3f7-388">ソースから受信された項目。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-388">The item received from the source.</span></span></param>
        <summary><span data-ttu-id="fb3f7-389"><see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> から使用可能な出力項目を同期的に受信します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-389">Attempts to synchronously receive an item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="fb3f7-390">項目を受信できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-390"><see langword="true" /> if an item could be received; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb3f7-391">このメソッドは、ソースに提供する項目があるまで待機しません。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-391">This method does not wait until the source has an item to provide.</span></span>  
  
 <span data-ttu-id="fb3f7-392">このメソッドは、要素が使用可能であったかどうかを返します。</span><span class="sxs-lookup"><span data-stu-id="fb3f7-392">It will return whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
