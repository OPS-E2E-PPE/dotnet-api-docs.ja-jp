<Type Name="SortedList" FullName="System.Collections.SortedList">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3dd6cbd96c1725a3f19c27678787c90db9e4ee16" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82417696" /></Metadata><TypeSignature Language="C#" Value="public class SortedList : System.Collections.IDictionary" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SortedList extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="DocId" Value="T:System.Collections.SortedList" />
  <TypeSignature Language="VB.NET" Value="Public Class SortedList&#xA;Implements IDictionary" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortedList : System::Collections::IDictionary" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type SortedList = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IDictionary" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C#" Value="public class SortedList : ICloneable, System.Collections.IDictionary" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SortedList extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable, class System.ICloneable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Class SortedList&#xA;Implements ICloneable, IDictionary" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortedList : ICloneable, System::Collections::IDictionary" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type SortedList = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IDictionary&#xA;    interface ICloneable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SortedList extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable, class System.ICloneable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type SortedList = class&#xA;    interface IDictionary&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface ICloneable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type SortedList = class&#xA;    interface IDictionary&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="93f34-101">キーによって並べ替えられ、キーとインデックスを使ってアクセスできる、キー/値ペアのコレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="93f34-101">Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="93f34-102"><xref:System.Collections.SortedList> 要素は、任意の <xref:System.Collections.IDictionary> の実装内の要素のように、そのキーによってアクセスできます。また、<xref:System.Collections.IList> の実装の要素のように、そのインデックスによってアクセスすることもできます。</span><span class="sxs-lookup"><span data-stu-id="93f34-102">A <xref:System.Collections.SortedList> element can be accessed by its key, like an element in any <xref:System.Collections.IDictionary> implementation, or by its index, like an element in any <xref:System.Collections.IList> implementation.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="93f34-103">新しい開発には `SortedList` クラスを使用しないことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="93f34-103">We don't recommend that you use the `SortedList` class for new development.</span></span> <span data-ttu-id="93f34-104">代わりに、ジェネリック <xref:System.Collections.Generic.SortedList%602?displayProperty=nameWithType> クラスを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="93f34-104">Instead, we recommend that you use the generic <xref:System.Collections.Generic.SortedList%602?displayProperty=nameWithType> class.</span></span> <span data-ttu-id="93f34-105">詳細については、「GitHub で[非ジェネリックコレクションを使用することはでき](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md)ません。」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="93f34-105">For more information, see [Non-generic collections shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) on GitHub.</span></span>

 <span data-ttu-id="93f34-106"><xref:System.Collections.SortedList> オブジェクトは、リストの要素を格納するために、内部的に2つの配列を保持します。つまり、キーの配列と、関連付けられた値の別の配列です。</span><span class="sxs-lookup"><span data-stu-id="93f34-106">A <xref:System.Collections.SortedList> object internally maintains two arrays to store the elements of the list; that is, one array for the keys and another array for the associated values.</span></span> <span data-ttu-id="93f34-107">各要素は、<xref:System.Collections.DictionaryEntry> オブジェクトとしてアクセスできるキーと値のペアです。</span><span class="sxs-lookup"><span data-stu-id="93f34-107">Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.</span></span> <span data-ttu-id="93f34-108">キーを `null`することはできませんが、値にはを指定できます。</span><span class="sxs-lookup"><span data-stu-id="93f34-108">A key cannot be `null`, but a value can be.</span></span>  
  
 <span data-ttu-id="93f34-109"><xref:System.Collections.SortedList> オブジェクトの容量は、<xref:System.Collections.SortedList> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-109">The capacity of a <xref:System.Collections.SortedList> object is the number of elements the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="93f34-110">要素が <xref:System.Collections.SortedList>に追加されると、再割り当てによって必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="93f34-110">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required through reallocation.</span></span> <span data-ttu-id="93f34-111">容量は、<xref:System.Collections.SortedList.TrimToSize%2A> を呼び出すか、<xref:System.Collections.SortedList.Capacity%2A> プロパティを明示的に設定することによって減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="93f34-111">The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.</span></span>  
  
 <span data-ttu-id="93f34-112">**.NET Framework のみ:** 非常に大きな <xref:System.Collections.SortedList> オブジェクトの場合、 [`<gcAllowVeryLargeObjects>`](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md)構成要素の `enabled` 属性を実行時環境の `true` に設定することによって、64ビットシステム上の最大容量を20億の要素に増やすことができます。</span><span class="sxs-lookup"><span data-stu-id="93f34-112">**.NET Framework only:** For very large <xref:System.Collections.SortedList> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the [`<gcAllowVeryLargeObjects>`](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="93f34-113"><xref:System.Collections.SortedList> オブジェクトの要素は、<xref:System.Collections.SortedList> が作成されたとき、またはキー自体によって提供される <xref:System.IComparable> 実装に従って指定された特定の <xref:System.Collections.IComparer> 実装に従って、キーによって並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-113">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span> <span data-ttu-id="93f34-114">どちらの場合も、<xref:System.Collections.SortedList> では重複するキーが許可されません。</span><span class="sxs-lookup"><span data-stu-id="93f34-114">In either case, a <xref:System.Collections.SortedList> does not allow duplicate keys.</span></span>  
  
 <span data-ttu-id="93f34-115">インデックスシーケンスは、並べ替え順序に基づいています。</span><span class="sxs-lookup"><span data-stu-id="93f34-115">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="93f34-116">要素が追加されると、正しい並べ替え順序で <xref:System.Collections.SortedList> に挿入され、インデックスが適切に調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-116">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="93f34-117">要素が削除されると、インデックスも調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-117">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="93f34-118">したがって、特定のキーと値のペアのインデックスは、<xref:System.Collections.SortedList> オブジェクトに対して要素が追加または削除されると変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-118">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-119"><xref:System.Collections.SortedList> オブジェクトに対する操作は、並べ替えにより、<xref:System.Collections.Hashtable> オブジェクトの操作よりも遅くなる傾向があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-119">Operations on a <xref:System.Collections.SortedList> object tend to be slower than operations on a <xref:System.Collections.Hashtable> object because of the sorting.</span></span> <span data-ttu-id="93f34-120">ただし、<xref:System.Collections.SortedList> は、関連付けられたキーまたはインデックスを使用して値にアクセスできるようにすることで、柔軟性が向上します。</span><span class="sxs-lookup"><span data-stu-id="93f34-120">However, the <xref:System.Collections.SortedList> offers more flexibility by allowing access to the values either through the associated keys or through the indexes.</span></span>  
  
 <span data-ttu-id="93f34-121">このコレクションの要素には、整数インデックスを使用してアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="93f34-121">Elements in this collection can be accessed using an integer index.</span></span>  <span data-ttu-id="93f34-122">このコレクションのインデックスは0から始まります。</span><span class="sxs-lookup"><span data-stu-id="93f34-122">Indexes in this collection are zero-based.</span></span>  
  
 <span data-ttu-id="93f34-123">C#言語の `foreach` ステートメント (Visual Basic で`for each`) は、コレクション内の要素の型のオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-123">The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="93f34-124"><xref:System.Collections.SortedList> オブジェクトの各要素はキーと値のペアであるため、要素の型はキーの型でも、値の型でもありません。</span><span class="sxs-lookup"><span data-stu-id="93f34-124">Since each element of the <xref:System.Collections.SortedList> object is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="93f34-125">代わりに、要素の型は <xref:System.Collections.DictionaryEntry>です。</span><span class="sxs-lookup"><span data-stu-id="93f34-125">Rather, the element type is <xref:System.Collections.DictionaryEntry>.</span></span> <span data-ttu-id="93f34-126">例 : </span><span class="sxs-lookup"><span data-stu-id="93f34-126">For example:</span></span>  
  
 [!code-cpp[Classic SortedList Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic SortedList Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/remarks.cs#2)]
 [!code-vb[Classic SortedList Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/remarks.vb#2)]  
  
 <span data-ttu-id="93f34-127">`foreach` ステートメントは列挙子のラッパーであり、コレクションへの書き込みではなく読み取りのみを許可します。</span><span class="sxs-lookup"><span data-stu-id="93f34-127">The `foreach` statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-128">次のコード例は、<xref:System.Collections.SortedList> オブジェクトを作成および初期化する方法と、そのキーと値を出力する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-128">The following code example shows how to create and initialize a <xref:System.Collections.SortedList> object and how to print out its keys and values.</span></span>  
  
 [!code-cpp[Classic SortedList Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="93f34-129">パブリック静的 (Visual Basic では<see langword="Shared" />) なこの型のメンバーはスレッド セーフです</span><span class="sxs-lookup"><span data-stu-id="93f34-129">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="93f34-130">インスタンス メンバーについては、スレッド セーフであることの保証はありません。</span><span class="sxs-lookup"><span data-stu-id="93f34-130">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="93f34-131">コレクションが変更されていない限り、<see cref="T:System.Collections.SortedList" /> オブジェクトは同時に複数のリーダーをサポートできます。</span><span class="sxs-lookup"><span data-stu-id="93f34-131">A <see cref="T:System.Collections.SortedList" /> object can support multiple readers concurrently, as long as the collection is not modified.</span></span> <span data-ttu-id="93f34-132"><see cref="T:System.Collections.SortedList" />のスレッドセーフを保証するには、<see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" /> メソッドによって返されるラッパーを使用してすべての操作を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-132">To guarantee the thread safety of the <see cref="T:System.Collections.SortedList" />, all operations must be done through the wrapper returned by the <see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" /> method.</span></span>  
  
<span data-ttu-id="93f34-133">コレクションの列挙処理は、本質的にスレッドセーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="93f34-133">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="93f34-134">コレクションが同期されていても、他のスレッドがコレクションを変更する場合があり、このときは列挙子から例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-134">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="93f34-135">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="93f34-135">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IComparer" />
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="T:System.Collections.Hashtable" />
    <altmember cref="T:System.Collections.Generic.SortedList`2" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-136">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-136">Performing Culture-Insensitive String Operations in Collections</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="93f34-137"><see cref="T:System.Collections.SortedList" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="93f34-137">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93f34-138">空で、既定の初期量を備え、<see cref="T:System.Collections.SortedList" /> オブジェクトに追加された各キーによって実装されている <see cref="T:System.IComparable" /> インターフェイスに従って並べ替えられた、<see cref="T:System.Collections.SortedList" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="93f34-138">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial capacity, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key added to the <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-139">各キーは、<xref:System.Collections.SortedList> オブジェクト内の他のすべてのキーと比較できるように、<xref:System.IComparable> インターフェイスを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-139">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="93f34-140">要素は、<xref:System.Collections.SortedList>に追加された各キーの <xref:System.IComparable> 実装に従って並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-140">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="93f34-141"><xref:System.Collections.SortedList> オブジェクトの容量は、<xref:System.Collections.SortedList> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-141">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="93f34-142">要素が <xref:System.Collections.SortedList>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="93f34-142">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="93f34-143">コレクションのサイズを推定できる場合、初期容量を指定すると、<xref:System.Collections.SortedList> オブジェクトに要素を追加するときに、多くのサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="93f34-143">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-144">このコンストラクターは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-144">This constructor is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-145">次のコード例では、さまざまな <xref:System.Collections.SortedList> コンストラクターを使用してコレクションを作成し、コレクションの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="93f34-145">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CPP/sortedlist_ctor.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CS/sortedlist_ctor.cs#1)]
 [!code-vb[System.Collections.SortedList_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/VB/sortedlist_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-146">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-146">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IComparer -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="93f34-147">キーの比較時に使用する <see cref="T:System.Collections.IComparer" /> の実装。</span><span class="sxs-lookup"><span data-stu-id="93f34-147">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span></span>  
  
<span data-ttu-id="93f34-148">または</span><span class="sxs-lookup"><span data-stu-id="93f34-148">-or-</span></span> 
 <span data-ttu-id="93f34-149">各キーの <see langword="null" /> 実装を使用する場合は <see cref="T:System.IComparable" />。</span><span class="sxs-lookup"><span data-stu-id="93f34-149"><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span></span></param>
        <summary><span data-ttu-id="93f34-150">空で、既定の初期量を備え、指定した <see cref="T:System.Collections.SortedList" /> インターフェイスに従って並べ替えられた、<see cref="T:System.Collections.IComparer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="93f34-150">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial capacity, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-151">要素は、指定された <xref:System.Collections.IComparer> の実装に従って並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-151">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="93f34-152">`comparer` パラメーターが `null`の場合、各キーの <xref:System.IComparable> 実装が使用されます。したがって、各キーは、<xref:System.Collections.SortedList> オブジェクト内の他のすべてのキーと比較できるように、<xref:System.IComparable> インターフェイスを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-152">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-153"><xref:System.Collections.SortedList> オブジェクトの容量は、<xref:System.Collections.SortedList> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-153">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="93f34-154">要素が <xref:System.Collections.SortedList>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="93f34-154">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="93f34-155">コレクションのサイズを推定できる場合、初期容量を指定すると、<xref:System.Collections.SortedList> オブジェクトに要素を追加するときに、多くのサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="93f34-155">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-156">このコンストラクターは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-156">This constructor is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-157">次のコード例では、さまざまな <xref:System.Collections.SortedList> コンストラクターを使用してコレクションを作成し、コレクションの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="93f34-157">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CPP/sortedlist_ctor.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CS/sortedlist_ctor.cs#1)]
 [!code-vb[System.Collections.SortedList_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/VB/sortedlist_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-158">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-158">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IDictionary ^ d);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IDictionary -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList d" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="93f34-159">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.SortedList" /> 実装。</span><span class="sxs-lookup"><span data-stu-id="93f34-159">The <see cref="T:System.Collections.IDictionary" /> implementation to copy to a new <see cref="T:System.Collections.SortedList" /> object.</span></span></param>
        <summary><span data-ttu-id="93f34-160">指定したディクショナリからコピーした要素を格納し、コピーした要素の数と同じ初期量を備え、各キーによって実装されている <see cref="T:System.Collections.SortedList" /> インターフェイスに従って並べ替えられた、<see cref="T:System.IComparable" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="93f34-160">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-161">各キーは、<xref:System.Collections.SortedList> オブジェクト内の他のすべてのキーと比較できるように、<xref:System.IComparable> インターフェイスを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-161">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="93f34-162">要素は、<xref:System.Collections.SortedList>に追加された各キーの <xref:System.IComparable> 実装に従って並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-162">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="93f34-163"><xref:System.Collections.Hashtable> オブジェクトは、このコンストラクターに渡すことができる <xref:System.Collections.IDictionary> 実装の例です。</span><span class="sxs-lookup"><span data-stu-id="93f34-163">A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor.</span></span> <span data-ttu-id="93f34-164">新しい <xref:System.Collections.SortedList> オブジェクトには、<xref:System.Collections.Hashtable>に格納されているキーと値のコピーが含まれています。</span><span class="sxs-lookup"><span data-stu-id="93f34-164">The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="93f34-165"><xref:System.Collections.SortedList> オブジェクトの容量は、<xref:System.Collections.SortedList> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-165">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="93f34-166">要素が <xref:System.Collections.SortedList>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="93f34-166">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="93f34-167">コレクションのサイズを推定できる場合、初期容量を指定すると、<xref:System.Collections.SortedList> オブジェクトに要素を追加するときに、多くのサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="93f34-167">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-168">このコンストラクターは `O(n)` 操作で、`n` は `d`内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-168">This constructor is an `O(n)` operation, where `n` is the number of elements in `d`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-169">次のコード例では、さまざまな <xref:System.Collections.SortedList> コンストラクターを使用してコレクションを作成し、コレクションの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="93f34-169">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CPP/sortedlist_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CS/sortedlist_ctordictionary.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/VB/sortedlist_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93f34-170"><paramref name="d" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="93f34-170"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="93f34-171"><paramref name="d" /> 内の 1 つ以上の要素が、<see cref="T:System.IComparable" /> インターフェイスを実装していません。</span><span class="sxs-lookup"><span data-stu-id="93f34-171">One or more elements in <paramref name="d" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-172">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-172">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (int initialCapacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCapacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCapacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(int initialCapacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : int -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList initialCapacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCapacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCapacity"><span data-ttu-id="93f34-173"><see cref="T:System.Collections.SortedList" /> オブジェクトが格納できる要素数の初期値。</span><span class="sxs-lookup"><span data-stu-id="93f34-173">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span></span></param>
        <summary><span data-ttu-id="93f34-174">空で、指定した初期量を備え、<see cref="T:System.Collections.SortedList" /> に追加された各キーによって実装されている <see cref="T:System.IComparable" /> インターフェイスに従って並べ替えられた、<see cref="T:System.Collections.SortedList" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="93f34-174">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the specified initial capacity, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key added to the <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-175">各キーは、<xref:System.Collections.SortedList> オブジェクト内の他のすべてのキーと比較できるように、<xref:System.IComparable> インターフェイスを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-175">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="93f34-176">要素は、<xref:System.Collections.SortedList>に追加された各キーの <xref:System.IComparable> 実装に従って並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-176">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="93f34-177"><xref:System.Collections.SortedList> オブジェクトの容量は、<xref:System.Collections.SortedList> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-177">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="93f34-178">要素が <xref:System.Collections.SortedList>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="93f34-178">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="93f34-179">コレクションのサイズを推定できる場合、初期容量を指定すると、<xref:System.Collections.SortedList> オブジェクトに要素を追加するときに、多くのサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="93f34-179">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-180">このコンストラクターは、`n` が `initialCapacity``O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-180">This constructor is an `O(n)` operation, where `n` is `initialCapacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-181">次のコード例では、さまざまな <xref:System.Collections.SortedList> コンストラクターを使用してコレクションを作成し、コレクションの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="93f34-181">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CPP/sortedlist_ctorint.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CS/sortedlist_ctorint.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/VB/sortedlist_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93f34-182"><paramref name="initialCapacity" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="93f34-182"><paramref name="initialCapacity" /> is less than zero.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="93f34-183">メモリが不足しているため、指定された <see cref="T:System.Collections.SortedList" /> を持つ <paramref name="initialCapacity" /> オブジェクトを作成できません。</span><span class="sxs-lookup"><span data-stu-id="93f34-183">There is not enough available memory to create a <see cref="T:System.Collections.SortedList" /> object with the specified <paramref name="initialCapacity" />.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-184">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-184">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IComparer comparer, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer, int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer, capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IComparer ^ comparer, int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IComparer * int -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList (comparer, capacity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="93f34-185">キーの比較時に使用する <see cref="T:System.Collections.IComparer" /> の実装。</span><span class="sxs-lookup"><span data-stu-id="93f34-185">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span></span>  
  
<span data-ttu-id="93f34-186">または</span><span class="sxs-lookup"><span data-stu-id="93f34-186">-or-</span></span> 
 <span data-ttu-id="93f34-187">各キーの <see langword="null" /> 実装を使用する場合は <see cref="T:System.IComparable" />。</span><span class="sxs-lookup"><span data-stu-id="93f34-187"><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span></span></param>
        <param name="capacity"><span data-ttu-id="93f34-188"><see cref="T:System.Collections.SortedList" /> オブジェクトが格納できる要素数の初期値。</span><span class="sxs-lookup"><span data-stu-id="93f34-188">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span></span></param>
        <summary><span data-ttu-id="93f34-189">空で、指定した初期量を備え、指定した <see cref="T:System.Collections.SortedList" /> インターフェイスに従って並べ替えられた、<see cref="T:System.Collections.IComparer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="93f34-189">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the specified initial capacity, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-190">要素は、指定された <xref:System.Collections.IComparer> の実装に従って並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-190">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="93f34-191">`comparer` パラメーターが `null`の場合、各キーの <xref:System.IComparable> 実装が使用されます。したがって、各キーは、<xref:System.Collections.SortedList> オブジェクト内の他のすべてのキーと比較できるように、<xref:System.IComparable> インターフェイスを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-191">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-192"><xref:System.Collections.SortedList> オブジェクトの容量は、<xref:System.Collections.SortedList> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-192">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="93f34-193">要素が <xref:System.Collections.SortedList>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="93f34-193">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="93f34-194">コレクションのサイズを推定できる場合、初期容量を指定すると、<xref:System.Collections.SortedList> オブジェクトに要素を追加するときに、多くのサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="93f34-194">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-195">このコンストラクターは、`n` が `capacity``O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-195">This constructor is an `O(n)` operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-196">次のコード例では、さまざまな <xref:System.Collections.SortedList> コンストラクターを使用してコレクションを作成し、コレクションの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="93f34-196">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CPP/sortedlist_ctorint.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CS/sortedlist_ctorint.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/VB/sortedlist_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93f34-197"><paramref name="capacity" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="93f34-197"><paramref name="capacity" /> is less than zero.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="93f34-198">メモリが不足しているため、指定された <see cref="T:System.Collections.SortedList" /> を持つ <paramref name="capacity" /> オブジェクトを作成できません。</span><span class="sxs-lookup"><span data-stu-id="93f34-198">There is not enough available memory to create a <see cref="T:System.Collections.SortedList" /> object with the specified <paramref name="capacity" />.</span></span></exception>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-199">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-199">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IDictionary ^ d, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IDictionary * System.Collections.IComparer -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList (d, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="93f34-200">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.SortedList" /> 実装。</span><span class="sxs-lookup"><span data-stu-id="93f34-200">The <see cref="T:System.Collections.IDictionary" /> implementation to copy to a new <see cref="T:System.Collections.SortedList" /> object.</span></span></param>
        <param name="comparer"><span data-ttu-id="93f34-201">キーの比較時に使用する <see cref="T:System.Collections.IComparer" /> の実装。</span><span class="sxs-lookup"><span data-stu-id="93f34-201">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span></span>  
  
<span data-ttu-id="93f34-202">または</span><span class="sxs-lookup"><span data-stu-id="93f34-202">-or-</span></span> 
 <span data-ttu-id="93f34-203">各キーの <see langword="null" /> 実装を使用する場合は <see cref="T:System.IComparable" />。</span><span class="sxs-lookup"><span data-stu-id="93f34-203"><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span></span></param>
        <summary><span data-ttu-id="93f34-204">指定したディクショナリからコピーした要素を格納し、コピーした要素の数と同じ初期量を備え、指定した <see cref="T:System.Collections.SortedList" /> インターフェイスに従って並べ替えられた、<see cref="T:System.Collections.IComparer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="93f34-204">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-205">要素は、指定された <xref:System.Collections.IComparer> の実装に従って並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-205">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="93f34-206">`comparer` パラメーターが `null`の場合、各キーの <xref:System.IComparable> 実装が使用されます。したがって、各キーは、<xref:System.Collections.SortedList> オブジェクト内の他のすべてのキーと比較できるように、<xref:System.IComparable> インターフェイスを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-206">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-207"><xref:System.Collections.Hashtable> オブジェクトは、このコンストラクターに渡すことができる <xref:System.Collections.IDictionary> 実装の例です。</span><span class="sxs-lookup"><span data-stu-id="93f34-207">A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor.</span></span> <span data-ttu-id="93f34-208">新しい <xref:System.Collections.SortedList> オブジェクトには、<xref:System.Collections.Hashtable>に格納されているキーと値のコピーが含まれています。</span><span class="sxs-lookup"><span data-stu-id="93f34-208">The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="93f34-209"><xref:System.Collections.SortedList> オブジェクトの容量は、<xref:System.Collections.SortedList> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-209">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="93f34-210">要素が <xref:System.Collections.SortedList>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="93f34-210">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="93f34-211">コレクションのサイズを推定できる場合、初期容量を指定すると、<xref:System.Collections.SortedList> オブジェクトに要素を追加するときに、多くのサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="93f34-211">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-212">このコンストラクターは `O(n)` 操作で、`n` は `d`内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-212">This constructor is an `O(n)` operation, where `n` is the number of elements in `d`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-213">次のコード例では、さまざまな <xref:System.Collections.SortedList> コンストラクターを使用してコレクションを作成し、コレクションの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="93f34-213">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CPP/sortedlist_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CS/sortedlist_ctordictionary.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/VB/sortedlist_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93f34-214"><paramref name="d" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="93f34-214"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="93f34-215"><paramref name="comparer" /> が <see langword="null" /> であり、かつ <paramref name="d" /> 内の 1 つ以上の要素で、<see cref="T:System.IComparable" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="93f34-215"><paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="d" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-216">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-216">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Add : obj * obj -&gt; unit&#xA;override this.Add : obj * obj -&gt; unit" Usage="sortedList.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="93f34-217">追加する要素のキー。</span><span class="sxs-lookup"><span data-stu-id="93f34-217">The key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="93f34-218">追加する要素の値です。</span><span class="sxs-lookup"><span data-stu-id="93f34-218">The value of the element to add.</span></span> <span data-ttu-id="93f34-219">値として <see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="93f34-219">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="93f34-220">指定したキーおよび値を持つ要素を <see cref="T:System.Collections.SortedList" /> オブジェクトに追加します。</span><span class="sxs-lookup"><span data-stu-id="93f34-220">Adds an element with the specified key and value to a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-221">挿入ポイントは、<xref:System.Collections.SortedList> オブジェクトが作成されたときに、明示的に、または既定で選択された比較子に基づいて決定されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-221">The insertion point is determined based on the comparer selected, either explicitly or by default, when the <xref:System.Collections.SortedList> object was created.</span></span>  
  
 <span data-ttu-id="93f34-222"><xref:System.Collections.SortedList.Count%2A> 既に <xref:System.Collections.SortedList.Capacity%2A>に等しい場合は、内部配列を自動的に再割り当てすることによって <xref:System.Collections.SortedList> オブジェクトの容量が増加し、新しい要素が追加される前に既存の要素が新しい配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-222">If <xref:System.Collections.SortedList.Count%2A> already equals <xref:System.Collections.SortedList.Capacity%2A>, the capacity of the <xref:System.Collections.SortedList> object is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="93f34-223">また、<xref:System.Collections.SortedList.Item%2A> プロパティを使用して、<xref:System.Collections.SortedList> オブジェクトに存在しないキーの値 (`myCollection["myNonexistentKey"] = myValue`など) を設定することによって、新しい要素を追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="93f34-223">You can also use the <xref:System.Collections.SortedList.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection["myNonexistentKey"] = myValue`).</span></span> <span data-ttu-id="93f34-224">ただし、指定したキーが既に <xref:System.Collections.SortedList>に存在する場合は、<xref:System.Collections.SortedList.Item%2A> プロパティを設定すると古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-224">However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="93f34-225">これに対し、<xref:System.Collections.SortedList.Add%2A> メソッドでは、既存の要素は変更されません。</span><span class="sxs-lookup"><span data-stu-id="93f34-225">In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="93f34-226"><xref:System.Collections.SortedList> オブジェクトの要素は、<xref:System.Collections.SortedList> が作成されたとき、またはキー自体によって提供される <xref:System.IComparable> 実装に従って指定された特定の <xref:System.Collections.IComparer> 実装に従って、キーによって並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-226">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="93f34-227">キーを `null`することはできませんが、値にはを指定できます。</span><span class="sxs-lookup"><span data-stu-id="93f34-227">A key cannot be `null`, but a value can be.</span></span>  
  
 <span data-ttu-id="93f34-228">このメソッドは、並べ替えられていないデータの `O(n)` 操作であり、`n` は <xref:System.Collections.SortedList.Count%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="93f34-228">This method is an `O(n)` operation for unsorted data, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="93f34-229">リストの末尾に新しい要素が追加された場合、これは `O(log n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-229">It is an `O(log n)` operation if the new element is added at the end of the list.</span></span> <span data-ttu-id="93f34-230">挿入によってサイズ変更が発生した場合、操作は `O(n)`されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-230">If insertion causes a resize, the operation is `O(n)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-231">次のコード例は、<xref:System.Collections.SortedList> オブジェクトに要素を追加する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-231">The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.Add Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Add Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Add Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93f34-232"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="93f34-232"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="93f34-233">指定した <paramref name="key" /> を持つ要素が、既に <see cref="T:System.Collections.SortedList" /> オブジェクトに存在します。</span><span class="sxs-lookup"><span data-stu-id="93f34-233">An element with the specified <paramref name="key" /> already exists in the <see cref="T:System.Collections.SortedList" /> object.</span></span>  
  
<span data-ttu-id="93f34-234">または</span><span class="sxs-lookup"><span data-stu-id="93f34-234">-or-</span></span> 
<span data-ttu-id="93f34-235"><see cref="T:System.Collections.SortedList" /> が <see cref="T:System.IComparable" /> インターフェイスを使用するように設定されているのに、<paramref name="key" /> が <see cref="T:System.IComparable" /> インターフェイスを実装していません。</span><span class="sxs-lookup"><span data-stu-id="93f34-235">The <see cref="T:System.Collections.SortedList" /> is set to use the <see cref="T:System.IComparable" /> interface, and <paramref name="key" /> does not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="93f34-236"><see cref="T:System.Collections.SortedList" /> は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="93f34-236">The <see cref="T:System.Collections.SortedList" /> is read-only.</span></span>  
  
<span data-ttu-id="93f34-237">または</span><span class="sxs-lookup"><span data-stu-id="93f34-237">-or-</span></span> 
<span data-ttu-id="93f34-238"><see cref="T:System.Collections.SortedList" /> は固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="93f34-238">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="93f34-239">メモリが不足しているため、<see cref="T:System.Collections.SortedList" /> に要素を追加できません。</span><span class="sxs-lookup"><span data-stu-id="93f34-239">There is not enough available memory to add the element to the <see cref="T:System.Collections.SortedList" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="93f34-240">比較子が例外をスローしました。</span><span class="sxs-lookup"><span data-stu-id="93f34-240">The comparer throws an exception.</span></span></exception>
        <altmember cref="P:System.Collections.SortedList.Item(System.Object)" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public virtual int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.SortedList.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93f34-241"><see cref="T:System.Collections.SortedList" /> オブジェクトの容量を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="93f34-241">Gets or sets the capacity of a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <value><span data-ttu-id="93f34-242"><see cref="T:System.Collections.SortedList" /> オブジェクトに格納できる要素の数。</span><span class="sxs-lookup"><span data-stu-id="93f34-242">The number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-243"><xref:System.Collections.SortedList.Capacity%2A> は <xref:System.Collections.SortedList> オブジェクトが格納できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-243"><xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store.</span></span> <span data-ttu-id="93f34-244"><xref:System.Collections.SortedList.Count%2A> は、実際に <xref:System.Collections.SortedList>内にある要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-244"><xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="93f34-245"><xref:System.Collections.SortedList.Capacity%2A> は、常に <xref:System.Collections.SortedList.Count%2A>以上です。</span><span class="sxs-lookup"><span data-stu-id="93f34-245"><xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="93f34-246">要素の追加中に <xref:System.Collections.SortedList.Count%2A> が <xref:System.Collections.SortedList.Capacity%2A> を超えた場合、古い要素をコピーして新しい要素を追加する前に、内部配列を再割り当てすることによって容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="93f34-246">If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="93f34-247">容量は、<xref:System.Collections.SortedList.TrimToSize%2A> を呼び出すか、<xref:System.Collections.SortedList.Capacity%2A> プロパティを明示的に設定することによって減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="93f34-247">The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="93f34-248"><xref:System.Collections.SortedList.Capacity%2A> の値が明示的に設定されている場合は、指定された容量に合わせて内部配列も再割り当てされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-248">When the value of <xref:System.Collections.SortedList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</span></span>  
  
 <span data-ttu-id="93f34-249">このプロパティの値の取得は `O(1)` 操作です。プロパティの設定は `O(n)` 操作であり、`n` は新しい容量です。</span><span class="sxs-lookup"><span data-stu-id="93f34-249">Retrieving the value of this property is an `O(1)` operation; setting the property is an `O(n)` operation, where `n` is the new capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93f34-250">代入された値が、<see cref="T:System.Collections.SortedList" /> オブジェクト内の現在の要素の数未満です。</span><span class="sxs-lookup"><span data-stu-id="93f34-250">The value assigned is less than the current number of elements in the <see cref="T:System.Collections.SortedList" /> object.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="93f34-251">システムで使用可能なメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-251">There is not enough memory available on the system.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.TrimToSize" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="sortedList.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93f34-252"><see cref="T:System.Collections.SortedList" /> オブジェクトからすべての要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="93f34-252">Removes all elements from a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-253"><xref:System.Collections.SortedList.Count%2A> がゼロに設定され、コレクションの要素から他のオブジェクトへの参照も解放されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-253"><xref:System.Collections.SortedList.Count%2A> is set to zero and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="93f34-254"><xref:System.Collections.SortedList.Capacity%2A> は変更されません。</span><span class="sxs-lookup"><span data-stu-id="93f34-254"><xref:System.Collections.SortedList.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="93f34-255"><xref:System.Collections.SortedList> オブジェクトの容量をリセットするには、<xref:System.Collections.SortedList.TrimToSize%2A> を呼び出すか、<xref:System.Collections.SortedList.Capacity%2A> プロパティを直接設定します。</span><span class="sxs-lookup"><span data-stu-id="93f34-255">To reset the capacity of the <xref:System.Collections.SortedList> object, call <xref:System.Collections.SortedList.TrimToSize%2A> or set the <xref:System.Collections.SortedList.Capacity%2A> property directly.</span></span> <span data-ttu-id="93f34-256">空の <xref:System.Collections.SortedList> をトリミングすると、<xref:System.Collections.SortedList> の容量が既定の容量に設定されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-256">Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.</span></span>  
  
 <span data-ttu-id="93f34-257">このメソッドは、`n` が <xref:System.Collections.SortedList.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-257">This method is an `O(n)` operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-258">次のコード例では、<xref:System.Collections.SortedList> オブジェクトの未使用部分をトリミングし、<xref:System.Collections.SortedList>の値をクリアする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="93f34-258">The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="93f34-259"><see cref="T:System.Collections.SortedList" /> が読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="93f34-259">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span></span>  
  
<span data-ttu-id="93f34-260">または</span><span class="sxs-lookup"><span data-stu-id="93f34-260">-or-</span></span> 
<span data-ttu-id="93f34-261"><see cref="T:System.Collections.SortedList" /> は固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="93f34-261">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.TrimToSize" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <altmember cref="P:System.Collections.SortedList.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="sortedList.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93f34-262"><see cref="T:System.Collections.SortedList" /> オブジェクトの簡易コピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="93f34-262">Creates a shallow copy of a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="93f34-263"><see cref="T:System.Collections.SortedList" /> オブジェクトの簡易コピー。</span><span class="sxs-lookup"><span data-stu-id="93f34-263">A shallow copy of the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-264">コレクションの簡易コピーは、参照型と値型かどうかにかかわらず、コレクションの要素のみをコピーします。ただし、参照が参照するオブジェクトはコピーしません。</span><span class="sxs-lookup"><span data-stu-id="93f34-264">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but does not copy the objects that the references refer to.</span></span> <span data-ttu-id="93f34-265">新しいコレクション内の参照は、元のコレクション内の参照が指すものと同じオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="93f34-265">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="93f34-266">これに対し、コレクションの詳細コピーでは、要素と、要素によって直接的または間接的に参照されるすべての要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-266">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="93f34-267">このメソッドは、`n` が <xref:System.Collections.SortedList.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-267">This method is an `O(n)` operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="sortedList.Contains key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="93f34-268"><see cref="T:System.Collections.SortedList" /> オブジェクト内で検索されるキー。</span><span class="sxs-lookup"><span data-stu-id="93f34-268">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span></span></param>
        <summary><span data-ttu-id="93f34-269"><see cref="T:System.Collections.SortedList" /> オブジェクトに特定のキーが格納されているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="93f34-269">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific key.</span></span></summary>
        <returns><span data-ttu-id="93f34-270">指定した <see langword="true" /> を持つ要素が <see cref="T:System.Collections.SortedList" /> オブジェクトに格納されている場合は <paramref name="key" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="93f34-270"><see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-271"><xref:System.Collections.SortedList> オブジェクトの要素は、<xref:System.Collections.SortedList> が作成されたとき、またはキー自体によって提供される <xref:System.IComparable> 実装に従って指定された特定の <xref:System.Collections.IComparer> 実装に従って、キーによって並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-271">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="93f34-272"><xref:System.Collections.SortedList.Contains%2A> は、<xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType> を実装します。</span><span class="sxs-lookup"><span data-stu-id="93f34-272"><xref:System.Collections.SortedList.Contains%2A> implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="93f34-273"><xref:System.Collections.SortedList.ContainsKey%2A>とまったく同じように動作します。</span><span class="sxs-lookup"><span data-stu-id="93f34-273">It behaves exactly as <xref:System.Collections.SortedList.ContainsKey%2A>.</span></span>  
  
 <span data-ttu-id="93f34-274">このメソッドは、バイナリ検索アルゴリズムを使用します。したがって、このメソッドは、`n` が <xref:System.Collections.SortedList.Count%2A>`O(log n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-274">This method uses a binary search algorithm; therefore, this method is an `O(log n)` operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="93f34-275">.NET Framework 2.0 以降では、このメソッドは `item` でコレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッドを使用して、項目が存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="93f34-275">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="93f34-276">以前のバージョンの .NET Framework では、この決定は、コレクション内のオブジェクトの `item` パラメーターの <xref:System.Object.Equals%2A> メソッドと <xref:System.IComparable.CompareTo%2A> メソッドを使用して行われていました。</span><span class="sxs-lookup"><span data-stu-id="93f34-276">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-277">次のコード例は、<xref:System.Collections.SortedList> オブジェクトに特定の要素が含まれているかどうかを確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-277">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93f34-278"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="93f34-278"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="93f34-279">比較子が例外をスローしました。</span><span class="sxs-lookup"><span data-stu-id="93f34-279">The comparer throws an exception.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-280">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-280">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.ContainsKey(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : obj -&gt; bool&#xA;override this.ContainsKey : obj -&gt; bool" Usage="sortedList.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="93f34-281"><see cref="T:System.Collections.SortedList" /> オブジェクト内で検索されるキー。</span><span class="sxs-lookup"><span data-stu-id="93f34-281">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span></span></param>
        <summary><span data-ttu-id="93f34-282"><see cref="T:System.Collections.SortedList" /> オブジェクトに特定のキーが格納されているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="93f34-282">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific key.</span></span></summary>
        <returns><span data-ttu-id="93f34-283">指定した <see langword="true" /> を持つ要素が <see cref="T:System.Collections.SortedList" /> オブジェクトに格納されている場合は <paramref name="key" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="93f34-283"><see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-284"><xref:System.Collections.SortedList> オブジェクトの要素は、<xref:System.Collections.SortedList> が作成されたとき、またはキー自体によって提供される <xref:System.IComparable> 実装に従って指定された特定の <xref:System.Collections.IComparer> 実装に従って、キーによって並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-284">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="93f34-285">このメソッドは、<xref:System.Collections.SortedList.Contains%2A> メソッドとまったく同じように動作します。</span><span class="sxs-lookup"><span data-stu-id="93f34-285">This method behaves exactly as the <xref:System.Collections.SortedList.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="93f34-286">このメソッドは、バイナリ検索アルゴリズムを使用します。したがって、このメソッドは、`n` が <xref:System.Collections.SortedList.Count%2A>`O(log n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-286">This method uses a binary search algorithm; therefore, this method is an `O(log n)` operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="93f34-287">.NET Framework 2.0 以降では、このメソッドは `item` でコレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッドを使用して、項目が存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="93f34-287">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="93f34-288">以前のバージョンの .NET Framework では、この決定は、コレクション内のオブジェクトの `item` パラメーターの <xref:System.Object.Equals%2A> メソッドと <xref:System.IComparable.CompareTo%2A> メソッドを使用して行われていました。</span><span class="sxs-lookup"><span data-stu-id="93f34-288">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-289">次のコード例は、<xref:System.Collections.SortedList> オブジェクトに特定の要素が含まれているかどうかを確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-289">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93f34-290"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="93f34-290"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="93f34-291">比較子が例外をスローしました。</span><span class="sxs-lookup"><span data-stu-id="93f34-291">The comparer throws an exception.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.Contains(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.ContainsValue(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-292">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-292">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContainsValue">
      <MemberSignature Language="C#" Value="public virtual bool ContainsValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.ContainsValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member ContainsValue : obj -&gt; bool&#xA;override this.ContainsValue : obj -&gt; bool" Usage="sortedList.ContainsValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="93f34-293"><see cref="T:System.Collections.SortedList" /> オブジェクト内で検索される値。</span><span class="sxs-lookup"><span data-stu-id="93f34-293">The value to locate in the <see cref="T:System.Collections.SortedList" /> object.</span></span> <span data-ttu-id="93f34-294">値として <see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="93f34-294">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="93f34-295"><see cref="T:System.Collections.SortedList" /> オブジェクトに特定の値が格納されているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="93f34-295">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="93f34-296">指定した <see langword="true" /> を持つ要素が <see cref="T:System.Collections.SortedList" /> オブジェクトに格納されている場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="93f34-296"><see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-297"><xref:System.Collections.SortedList> オブジェクトの要素の値は、<xref:System.Object.Equals%2A> メソッドを使用して、指定した値と比較されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-297">The values of the elements of the <xref:System.Collections.SortedList> object are compared to the specified value using the <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="93f34-298">このメソッドは、線形検索を実行します。したがって、平均実行時間は <xref:System.Collections.SortedList.Count%2A>に比例します。</span><span class="sxs-lookup"><span data-stu-id="93f34-298">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="93f34-299">つまり、このメソッドは `O(n)` 操作であり、`n` は <xref:System.Collections.SortedList.Count%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="93f34-299">That is, this method is an `O(n)` operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="93f34-300">.NET Framework 2.0 以降では、このメソッドは `item` でコレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッドを使用して、項目が存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="93f34-300">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="93f34-301">以前のバージョンの .NET Framework では、この決定は、コレクション内のオブジェクトの `item` パラメーターの <xref:System.Object.Equals%2A> メソッドと <xref:System.IComparable.CompareTo%2A> メソッドを使用して行われていました。</span><span class="sxs-lookup"><span data-stu-id="93f34-301">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-302">次のコード例は、<xref:System.Collections.SortedList> オブジェクトに特定の要素が含まれているかどうかを確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-302">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-303">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-303">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CopyTo (array As Array, arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="sortedList.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="93f34-304"><see cref="T:System.Array" /> から <see cref="T:System.Collections.DictionaryEntry" /> オブジェクトがコピーされる 1 次元の <see cref="T:System.Collections.SortedList" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="93f34-304">The one-dimensional <see cref="T:System.Array" /> object that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.SortedList" />.</span></span> <span data-ttu-id="93f34-305"><see cref="T:System.Array" /> には、0 から始まるインデックスが設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-305">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="93f34-306">コピーを開始する <paramref name="array" /> の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="93f34-306">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="93f34-307"><see cref="T:System.Collections.SortedList" /> の要素を 1 次元の <see cref="T:System.Array" /> オブジェクトにコピーします。コピー操作は、配列内の指定したインデックスから始まります。</span><span class="sxs-lookup"><span data-stu-id="93f34-307">Copies <see cref="T:System.Collections.SortedList" /> elements to a one-dimensional <see cref="T:System.Array" /> object, starting at the specified index in the array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-308">キーと値のペアは、列挙子が <xref:System.Collections.SortedList> オブジェクトを反復処理するのと同じ順序で、<xref:System.Array> オブジェクトにコピーされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-308">The key/value pairs are copied to the <xref:System.Array> object in the same order in which the enumerator iterates through the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-309"><xref:System.Collections.SortedList>内のキーのみをコピーするには、`SortedList.Keys.CopyTo`を使用します。</span><span class="sxs-lookup"><span data-stu-id="93f34-309">To copy only the keys in the <xref:System.Collections.SortedList>, use `SortedList.Keys.CopyTo`.</span></span>  
  
 <span data-ttu-id="93f34-310"><xref:System.Collections.SortedList>内の値のみをコピーするには、`SortedList.Values.CopyTo`を使用します。</span><span class="sxs-lookup"><span data-stu-id="93f34-310">To copy only the values in the <xref:System.Collections.SortedList>, use `SortedList.Values.CopyTo`.</span></span>  
  
 <span data-ttu-id="93f34-311">このメソッドは、`n` が <xref:System.Collections.SortedList.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-311">This method is an `O(n)` operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-312">次のコード例は、<xref:System.Collections.SortedList> オブジェクトの値を1次元 <xref:System.Array> オブジェクトにコピーする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-312">The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.</span></span>  
  
 [!code-cpp[Classic SortedList.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93f34-313"><paramref name="array" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="93f34-313"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93f34-314"><paramref name="arrayIndex" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="93f34-314"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="93f34-315"><paramref name="array" /> に多次元配列が設定されています。</span><span class="sxs-lookup"><span data-stu-id="93f34-315"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="93f34-316">または</span><span class="sxs-lookup"><span data-stu-id="93f34-316">-or-</span></span> 
<span data-ttu-id="93f34-317">コピー元の <see cref="T:System.Collections.SortedList" /> オブジェクトの要素数が、<paramref name="arrayIndex" /> からコピー先の <paramref name="array" /> の末尾までに格納できる数を超えています。</span><span class="sxs-lookup"><span data-stu-id="93f34-317">The number of elements in the source <see cref="T:System.Collections.SortedList" /> object is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="93f34-318">コピー元の <see cref="T:System.Collections.SortedList" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="93f34-318">The type of the source <see cref="T:System.Collections.SortedList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.SortedList.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.SortedList.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93f34-319"><see cref="T:System.Collections.SortedList" /> オブジェクトに格納されている要素の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="93f34-319">Gets the number of elements contained in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <value><span data-ttu-id="93f34-320"><see cref="T:System.Collections.SortedList" /> オブジェクトに格納されている要素の数。</span><span class="sxs-lookup"><span data-stu-id="93f34-320">The number of elements contained in the <see cref="T:System.Collections.SortedList" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-321">各要素は、<xref:System.Collections.DictionaryEntry> オブジェクトとしてアクセスできるキーと値のペアです。</span><span class="sxs-lookup"><span data-stu-id="93f34-321">Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.</span></span>  
  
 <span data-ttu-id="93f34-322"><xref:System.Collections.SortedList.Capacity%2A> は <xref:System.Collections.SortedList> オブジェクトが格納できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-322"><xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store.</span></span> <span data-ttu-id="93f34-323"><xref:System.Collections.SortedList.Count%2A> は、実際に <xref:System.Collections.SortedList>内にある要素の数です。</span><span class="sxs-lookup"><span data-stu-id="93f34-323"><xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="93f34-324"><xref:System.Collections.SortedList.Capacity%2A> は、常に <xref:System.Collections.SortedList.Count%2A>以上です。</span><span class="sxs-lookup"><span data-stu-id="93f34-324"><xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="93f34-325">要素の追加中に <xref:System.Collections.SortedList.Count%2A> が <xref:System.Collections.SortedList.Capacity%2A> を超えた場合、古い要素をコピーして新しい要素を追加する前に、内部配列を再割り当てすることによって容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="93f34-325">If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="93f34-326">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-326">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="GetByIndex">
      <MemberSignature Language="C#" Value="public virtual object GetByIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetByIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetByIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByIndex (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetByIndex(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetByIndex : int -&gt; obj&#xA;override this.GetByIndex : int -&gt; obj" Usage="sortedList.GetByIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="93f34-327">取得する値の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="93f34-327">The zero-based index of the value to get.</span></span></param>
        <summary><span data-ttu-id="93f34-328"><see cref="T:System.Collections.SortedList" /> オブジェクトの指定したインデックスにある値を取得します。</span><span class="sxs-lookup"><span data-stu-id="93f34-328">Gets the value at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="93f34-329"><see cref="T:System.Collections.SortedList" /> オブジェクトの指定したインデックスにある値。</span><span class="sxs-lookup"><span data-stu-id="93f34-329">The value at the specified index of the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-330">インデックスシーケンスは、並べ替え順序に基づいています。</span><span class="sxs-lookup"><span data-stu-id="93f34-330">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="93f34-331">要素が追加されると、正しい並べ替え順序で <xref:System.Collections.SortedList> に挿入され、インデックスが適切に調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-331">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="93f34-332">要素が削除されると、インデックスも調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-332">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="93f34-333">したがって、特定のキーと値のペアのインデックスは、<xref:System.Collections.SortedList> オブジェクトに対して要素が追加または削除されると変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-333">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-334">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-334">This method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-335">次のコード例は、<xref:System.Collections.SortedList> オブジェクト内の1つまたはすべてのキーまたは値を取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-335">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93f34-336"><paramref name="index" /> が、<see cref="T:System.Collections.SortedList" /> オブジェクトの有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="93f34-336"><paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="sortedList.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93f34-337"><see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトを反復処理する <see cref="T:System.Collections.SortedList" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-337">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object that iterates through a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="93f34-338"><see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトの <see cref="T:System.Collections.SortedList" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="93f34-338">An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-339">C# 言語の `foreach` ステートメント (Visual Basic の場合は `for each`) を使用することで列挙子の複雑さを回避できます。</span><span class="sxs-lookup"><span data-stu-id="93f34-339">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="93f34-340">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="93f34-340">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="93f34-341">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="93f34-341">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="93f34-342">最初、列挙子はコレクションの先頭の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-342">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="93f34-343">また、<xref:System.Collections.IEnumerator.Reset%2A> メソッドは、列挙子を最初の位置に戻します。</span><span class="sxs-lookup"><span data-stu-id="93f34-343"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="93f34-344">この位置では、<xref:System.Collections.IEnumerator.Current%2A> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="93f34-344">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="93f34-345">したがって、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して、列挙子をコレクションの先頭の要素に進めておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-345">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="93f34-346"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-346"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="93f34-347"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に進めます。</span><span class="sxs-lookup"><span data-stu-id="93f34-347"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="93f34-348"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-348">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="93f34-349">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-349">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="93f34-350"><xref:System.Collections.IEnumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.IEnumerator.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="93f34-350">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="93f34-351">コレクションの先頭の要素に再び <xref:System.Collections.IEnumerator.Current%2A> を設定するには、先に <xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="93f34-351">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="93f34-352">列挙子は、コレクションが変更されない限り有効です。</span><span class="sxs-lookup"><span data-stu-id="93f34-352">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="93f34-353">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="93f34-353">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="93f34-354">列挙子はコレクションに排他アクセスできないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="93f34-354">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="93f34-355">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="93f34-355">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="93f34-356">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-356">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="93f34-357">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-357">This method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="public virtual object GetKey (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetKey(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetKey(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKey (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetKey(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetKey : int -&gt; obj&#xA;override this.GetKey : int -&gt; obj" Usage="sortedList.GetKey index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="93f34-358">取得するキーの 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="93f34-358">The zero-based index of the key to get.</span></span></param>
        <summary><span data-ttu-id="93f34-359"><see cref="T:System.Collections.SortedList" /> オブジェクトの指定したインデックスにあるキーを取得します。</span><span class="sxs-lookup"><span data-stu-id="93f34-359">Gets the key at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="93f34-360"><see cref="T:System.Collections.SortedList" /> オブジェクトの指定したインデックスにあるキー。</span><span class="sxs-lookup"><span data-stu-id="93f34-360">The key at the specified index of the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-361">インデックスシーケンスは、並べ替え順序に基づいています。</span><span class="sxs-lookup"><span data-stu-id="93f34-361">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="93f34-362">要素が追加されると、正しい並べ替え順序で <xref:System.Collections.SortedList> に挿入され、インデックスが適切に調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-362">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="93f34-363">要素が削除されると、インデックスも調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-363">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="93f34-364">したがって、特定のキーと値のペアのインデックスは、<xref:System.Collections.SortedList> オブジェクトに対して要素が追加または削除されると変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-364">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-365">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-365">This method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-366">次のコード例は、<xref:System.Collections.SortedList> オブジェクト内の1つまたはすべてのキーまたは値を取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-366">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93f34-367"><paramref name="index" /> が、<see cref="T:System.Collections.SortedList" /> オブジェクトの有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="93f34-367"><paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetKeyList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IList GetKeyList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IList GetKeyList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetKeyList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKeyList () As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IList ^ GetKeyList();" />
      <MemberSignature Language="F#" Value="abstract member GetKeyList : unit -&gt; System.Collections.IList&#xA;override this.GetKeyList : unit -&gt; System.Collections.IList" Usage="sortedList.GetKeyList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93f34-368"><see cref="T:System.Collections.SortedList" /> オブジェクト内のキーを取得します。</span><span class="sxs-lookup"><span data-stu-id="93f34-368">Gets the keys in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="93f34-369"><see cref="T:System.Collections.IList" /> オブジェクト内のキーを格納している <see cref="T:System.Collections.SortedList" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="93f34-369">An <see cref="T:System.Collections.IList" /> object containing the keys in the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-370">返される <xref:System.Collections.IList> オブジェクトは、<xref:System.Collections.SortedList> オブジェクトのキーの読み取り専用ビューです。</span><span class="sxs-lookup"><span data-stu-id="93f34-370">The returned <xref:System.Collections.IList> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="93f34-371">基になる <xref:System.Collections.SortedList> に加えた変更は、すぐに <xref:System.Collections.IList>に反映されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-371">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.</span></span>  
  
 <span data-ttu-id="93f34-372">返された <xref:System.Collections.IList> の要素は、<xref:System.Collections.SortedList>のキーと同じ順序で並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-372">The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="93f34-373">このメソッドは <xref:System.Collections.SortedList.Keys%2A> プロパティに似ていますが、<xref:System.Collections.ICollection> オブジェクトではなく <xref:System.Collections.IList> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-373">This method is similar to the <xref:System.Collections.SortedList.Keys%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.</span></span>  
  
 <span data-ttu-id="93f34-374">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-374">This method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-375">次のコード例は、<xref:System.Collections.SortedList> オブジェクト内の1つまたはすべてのキーまたは値を取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-375">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.SortedList.GetValueList" />
        <altmember cref="P:System.Collections.SortedList.Keys" />
      </Docs>
    </Member>
    <Member MemberName="GetValueList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IList GetValueList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IList GetValueList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetValueList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValueList () As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IList ^ GetValueList();" />
      <MemberSignature Language="F#" Value="abstract member GetValueList : unit -&gt; System.Collections.IList&#xA;override this.GetValueList : unit -&gt; System.Collections.IList" Usage="sortedList.GetValueList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93f34-376"><see cref="T:System.Collections.SortedList" /> オブジェクト内の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="93f34-376">Gets the values in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="93f34-377"><see cref="T:System.Collections.IList" /> オブジェクト内の値を格納している <see cref="T:System.Collections.SortedList" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="93f34-377">An <see cref="T:System.Collections.IList" /> object containing the values in the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-378">返される <xref:System.Collections.IList> オブジェクトは、<xref:System.Collections.SortedList> オブジェクトの値の読み取り専用ビューです。</span><span class="sxs-lookup"><span data-stu-id="93f34-378">The returned <xref:System.Collections.IList> object is a read-only view of the values of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="93f34-379">基になる <xref:System.Collections.SortedList> に加えた変更は、すぐに <xref:System.Collections.IList>に反映されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-379">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.</span></span>  
  
 <span data-ttu-id="93f34-380">返される <xref:System.Collections.IList> の要素は、<xref:System.Collections.SortedList>の値と同じ順序で並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-380">The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="93f34-381">このメソッドは <xref:System.Collections.SortedList.Values%2A> プロパティに似ていますが、<xref:System.Collections.ICollection> オブジェクトではなく <xref:System.Collections.IList> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-381">This method is similar to the <xref:System.Collections.SortedList.Values%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.</span></span>  
  
 <span data-ttu-id="93f34-382">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-382">This method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-383">次のコード例は、<xref:System.Collections.SortedList> オブジェクト内の1つまたはすべてのキーまたは値を取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-383">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.SortedList.GetKeyList" />
        <altmember cref="P:System.Collections.SortedList.Values" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : obj -&gt; int&#xA;override this.IndexOfKey : obj -&gt; int" Usage="sortedList.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="93f34-384"><see cref="T:System.Collections.SortedList" /> オブジェクト内で検索されるキー。</span><span class="sxs-lookup"><span data-stu-id="93f34-384">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span></span></param>
        <summary><span data-ttu-id="93f34-385"><see cref="T:System.Collections.SortedList" /> オブジェクト内の指定したキーの、0 から始まるインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-385">Returns the zero-based index of the specified key in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="93f34-386"><paramref name="key" /> が <paramref name="key" /> オブジェクトに存在する場合は、<see cref="T:System.Collections.SortedList" /> パラメーターの 0 から始まるインデックス番号。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="93f34-386">The zero-based index of the <paramref name="key" /> parameter, if <paramref name="key" /> is found in the <see cref="T:System.Collections.SortedList" /> object; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-387"><xref:System.Collections.SortedList> オブジェクトの要素は、<xref:System.Collections.SortedList> の作成時に指定された特定の <xref:System.Collections.IComparer> 実装に従って、またはキー自体によって提供される <xref:System.IComparable> の実装に従って、キーによって並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-387">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created, or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="93f34-388">インデックスシーケンスは、並べ替え順序に基づいています。</span><span class="sxs-lookup"><span data-stu-id="93f34-388">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="93f34-389">要素が追加されると、正しい並べ替え順序で <xref:System.Collections.SortedList> に挿入され、インデックスが適切に調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-389">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="93f34-390">要素が削除されると、インデックスも調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-390">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="93f34-391">したがって、特定のキーと値のペアのインデックスは、要素が <xref:System.Collections.SortedList>に追加または削除されると変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-391">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="93f34-392">このメソッドは、バイナリ検索アルゴリズムを使用します。したがって、このメソッドは、`n` が <xref:System.Collections.SortedList.Count%2A>`O(log n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-392">This method uses a binary search algorithm; therefore, this method is an `O(log n)` operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="93f34-393">.NET Framework 2.0 以降では、このメソッドは `item` でコレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッドを使用して、項目が存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="93f34-393">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="93f34-394">以前のバージョンの .NET Framework では、この決定は、コレクション内のオブジェクトの `item` パラメーターの <xref:System.Object.Equals%2A> メソッドと <xref:System.IComparable.CompareTo%2A> メソッドを使用して行われていました。</span><span class="sxs-lookup"><span data-stu-id="93f34-394">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-395">次のコード例は、<xref:System.Collections.SortedList> オブジェクト内のキーまたは値のインデックスを確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-395">The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93f34-396"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="93f34-396"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="93f34-397">比較子が例外をスローしました。</span><span class="sxs-lookup"><span data-stu-id="93f34-397">The comparer throws an exception.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-398">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-398">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IndexOfValue">
      <MemberSignature Language="C#" Value="public virtual int IndexOfValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfValue (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfValue : obj -&gt; int&#xA;override this.IndexOfValue : obj -&gt; int" Usage="sortedList.IndexOfValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="93f34-399"><see cref="T:System.Collections.SortedList" /> オブジェクト内で検索される値。</span><span class="sxs-lookup"><span data-stu-id="93f34-399">The value to locate in the <see cref="T:System.Collections.SortedList" /> object.</span></span> <span data-ttu-id="93f34-400">値として <see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="93f34-400">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="93f34-401"><see cref="T:System.Collections.SortedList" /> オブジェクト内にある指定した値のうち、最初に出現する値の、0 から始まるインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-401">Returns the zero-based index of the first occurrence of the specified value in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="93f34-402"><paramref name="value" /> が <paramref name="value" /> オブジェクトに存在する場合は、先頭の <see cref="T:System.Collections.SortedList" /> パラメーターの 0 から始まるインデックス番号。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="93f34-402">The zero-based index of the first occurrence of the <paramref name="value" /> parameter, if <paramref name="value" /> is found in the <see cref="T:System.Collections.SortedList" /> object; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-403">インデックスシーケンスは、並べ替え順序に基づいています。</span><span class="sxs-lookup"><span data-stu-id="93f34-403">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="93f34-404">要素が追加されると、正しい並べ替え順序で <xref:System.Collections.SortedList> に挿入され、インデックスが適切に調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-404">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="93f34-405">要素が削除されると、インデックスも調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-405">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="93f34-406">したがって、特定のキーと値のペアのインデックスは、<xref:System.Collections.SortedList> オブジェクトに対して要素が追加または削除されると変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-406">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-407"><xref:System.Collections.SortedList> の要素の値は、<xref:System.Object.Equals%2A> メソッドを使用して、指定した値と比較されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-407">The values of the elements of the <xref:System.Collections.SortedList> are compared to the specified value using the <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="93f34-408">このメソッドは、線形検索を使用します。したがって、このメソッドは、`n` が <xref:System.Collections.SortedList.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-408">This method uses a linear search; therefore, this method is an `O(n)` operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="93f34-409">.NET Framework 2.0 以降では、このメソッドは `item` でコレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッドを使用して、項目が存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="93f34-409">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="93f34-410">以前のバージョンの .NET Framework では、この決定は、コレクション内のオブジェクトの `item` パラメーターの <xref:System.Object.Equals%2A> メソッドと <xref:System.IComparable.CompareTo%2A> メソッドを使用して行われていました。</span><span class="sxs-lookup"><span data-stu-id="93f34-410">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-411">次のコード例は、<xref:System.Collections.SortedList> オブジェクト内のキーまたは値のインデックスを確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-411">The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.ContainsValue(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-412">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-412">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="System.Collections.SortedList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93f34-413"><see cref="T:System.Collections.SortedList" /> オブジェクトが固定サイズかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="93f34-413">Gets a value indicating whether a <see cref="T:System.Collections.SortedList" /> object has a fixed size.</span></span></summary>
        <value><span data-ttu-id="93f34-414"><see langword="true" /> オブジェクトが固定サイズの場合は <see cref="T:System.Collections.SortedList" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="93f34-414"><see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object has a fixed size; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="93f34-415">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="93f34-415">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-416">固定サイズのコレクションでは、コレクションの作成後に要素を追加または削除することはできませんが、既存の要素を変更することはできます。</span><span class="sxs-lookup"><span data-stu-id="93f34-416">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</span></span>  
  
 <span data-ttu-id="93f34-417">固定サイズのコレクションは、要素の追加と削除を防ぐラッパーを持つ単純なコレクションです。したがって、要素の追加や削除など、基になるコレクションに変更が加えられた場合、固定サイズのコレクションにはこれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-417">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="93f34-418">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-418">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Collections.SortedList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93f34-419"><see cref="T:System.Collections.SortedList" /> オブジェクトが読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="93f34-419">Gets a value indicating whether a <see cref="T:System.Collections.SortedList" /> object is read-only.</span></span></summary>
        <value><span data-ttu-id="93f34-420"><see langword="true" /> オブジェクトが読み取り専用の場合は <see cref="T:System.Collections.SortedList" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="93f34-420"><see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object is read-only; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="93f34-421">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="93f34-421">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-422">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</span><span class="sxs-lookup"><span data-stu-id="93f34-422">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="93f34-423">読み取り専用のコレクションは、単純にコレクションを変更できないようにするラッパーを含むコレクションです。したがって、基になるコレクションに変更が加えられた場合、読み取り専用コレクションにはこれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-423">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="93f34-424">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-424">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.SortedList.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93f34-425"><see cref="T:System.Collections.SortedList" /> オブジェクトへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="93f34-425">Gets a value indicating whether access to a <see cref="T:System.Collections.SortedList" /> object is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="93f34-426"><see langword="true" /> オブジェクトへのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.SortedList" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="93f34-426"><see langword="true" /> if access to the <see cref="T:System.Collections.SortedList" /> object is synchronized (thread safe); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="93f34-427">既定では、 <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="93f34-427">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-428"><xref:System.Collections.SortedList> オブジェクトのスレッドセーフを保証するには、<xref:System.Collections.SortedList.Synchronized%2A> メソッドによって返されるラッパーを使用してすべての操作を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-428">To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through the wrapper returned by the <xref:System.Collections.SortedList.Synchronized%2A> method.</span></span>  
  
 <span data-ttu-id="93f34-429">コレクションの列挙処理は、本質的にスレッドセーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="93f34-429">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="93f34-430">コレクションが同期されていても、他のスレッドがコレクションを変更する場合があり、このときは列挙子から例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-430">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="93f34-431">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="93f34-431">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-432">次のコード例は、列挙全体の中で <xref:System.Collections.SortedList.SyncRoot%2A> プロパティを使用してコレクションをロックする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-432">The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="93f34-433">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-433">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 <span data-ttu-id="93f34-434">次のコード例は、<xref:System.Collections.SortedList> オブジェクトを同期し、<xref:System.Collections.SortedList> が同期されているかどうかを判断し、同期 <xref:System.Collections.SortedList>を使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-434">The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.SyncRoot" />
        <altmember cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Collections.SortedList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="93f34-435">取得または設定する値に関連付けられているキー。</span><span class="sxs-lookup"><span data-stu-id="93f34-435">The key associated with the value to get or set.</span></span></param>
        <summary><span data-ttu-id="93f34-436"><see cref="T:System.Collections.SortedList" /> オブジェクト内の特定のキーに関連付けられている値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="93f34-436">Gets or sets the value associated with a specific key in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <value><span data-ttu-id="93f34-437"><paramref name="key" /> が存在する場合は、<see cref="T:System.Collections.SortedList" /> オブジェクト内の <paramref name="key" /> パラメーターに関連付けられている値。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="93f34-437">The value associated with the <paramref name="key" /> parameter in the <see cref="T:System.Collections.SortedList" /> object, if <paramref name="key" /> is found; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-438"><xref:System.Collections.SortedList.Item%2A> プロパティを使用して、次の構文を指定することにより、コレクション内の特定の要素にアクセスできます: `myCollection[key]`。</span><span class="sxs-lookup"><span data-stu-id="93f34-438">You can use the <xref:System.Collections.SortedList.Item%2A> property to access a specific element in a collection by specifying the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="93f34-439">このプロパティを使用して、<xref:System.Collections.SortedList> オブジェクトに存在しないキーの値 (`myCollection["myNonexistentKey"] = myValue)`など) を設定することによって、新しい要素を追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="93f34-439">You can also use this property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection["myNonexistentKey"] = myValue)`.</span></span> <span data-ttu-id="93f34-440">ただし、指定したキーが既に <xref:System.Collections.SortedList>に存在する場合は、<xref:System.Collections.SortedList.Item%2A> プロパティを設定すると古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-440">However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="93f34-441">これに対し、<xref:System.Collections.SortedList.Add%2A> メソッドでは、既存の要素は変更されません。</span><span class="sxs-lookup"><span data-stu-id="93f34-441">In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="93f34-442">キーを `null`することはできませんが、値にはを指定できます。</span><span class="sxs-lookup"><span data-stu-id="93f34-442">A key cannot be `null`, but a value can be.</span></span> <span data-ttu-id="93f34-443">指定されたキーが見つからなかったために返される `null` と、指定されたキーの値が `null`ために返される `null` を区別するには、<xref:System.Collections.SortedList.Contains%2A> メソッドまたは <xref:System.Collections.SortedList.ContainsKey%2A> メソッドを使用して、キーがリストに存在するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="93f34-443">To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.SortedList.Contains%2A> method or the <xref:System.Collections.SortedList.ContainsKey%2A> method to determine if the key exists in the list.</span></span>  
  
 <span data-ttu-id="93f34-444"><xref:System.Collections.SortedList> の要素は、<xref:System.Collections.SortedList> が作成されたとき、またはキー自体によって提供される <xref:System.IComparable> の実装に従って指定された特定の <xref:System.Collections.IComparer> 実装に従って、キーによって並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-444">The elements of a <xref:System.Collections.SortedList> are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="93f34-445">このC#言語では、<xref:System.Collections.SortedList.Keys%2A> プロパティを実装する代わりに、 [`this`](~/docs/csharp/language-reference/keywords/this.md)キーワードを使用してインデクサーを定義します。</span><span class="sxs-lookup"><span data-stu-id="93f34-445">The C# language uses the [`this`](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.SortedList.Keys%2A> property.</span></span> <span data-ttu-id="93f34-446">Visual Basic は、<xref:System.Collections.SortedList.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="93f34-446">Visual Basic implements <xref:System.Collections.SortedList.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="93f34-447">このプロパティの値の取得は、`n` が <xref:System.Collections.SortedList.Count%2A>`O(log n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-447">Retrieving the value of this property is an `O(log n)` operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="93f34-448">キーが既に <xref:System.Collections.SortedList>に存在する場合、プロパティの設定は `O(log n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-448">Setting the property is an `O(log n)` operation if the key is already in the <xref:System.Collections.SortedList>.</span></span> <span data-ttu-id="93f34-449">キーが一覧にない場合は、プロパティを設定すると、並べ替えられていないデータの `O(n)` 操作になります。または、新しい要素がリストの末尾に追加された場合は `O(log n)` ます。</span><span class="sxs-lookup"><span data-stu-id="93f34-449">If the key is not in the list, setting the property is an `O(n)` operation for unsorted data, or `O(log n)` if the new element is added at the end of the list.</span></span> <span data-ttu-id="93f34-450">挿入によってサイズ変更が発生した場合、操作は `O(n)`されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-450">If insertion causes a resize, the operation is `O(n)`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93f34-451"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="93f34-451"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="93f34-452">このプロパティが設定されていますが、<see cref="T:System.Collections.SortedList" /> オブジェクトが読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="93f34-452">The property is set and the <see cref="T:System.Collections.SortedList" /> object is read-only.</span></span>  
  
<span data-ttu-id="93f34-453">または</span><span class="sxs-lookup"><span data-stu-id="93f34-453">-or-</span></span> 
<span data-ttu-id="93f34-454">プロパティが設定済みで、コレクション内に <paramref name="key" /> が存在せず、<see cref="T:System.Collections.SortedList" /> が固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="93f34-454">The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.SortedList" /> has a fixed size.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="93f34-455">メモリが不足しているため、<see cref="T:System.Collections.SortedList" /> に要素を追加できません。</span><span class="sxs-lookup"><span data-stu-id="93f34-455">There is not enough available memory to add the element to the <see cref="T:System.Collections.SortedList" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="93f34-456">比較子が例外をスローしました。</span><span class="sxs-lookup"><span data-stu-id="93f34-456">The comparer throws an exception.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.SortedList.Contains(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-457">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-457">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Keys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.ICollection" Usage="System.Collections.SortedList.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93f34-458"><see cref="T:System.Collections.SortedList" /> オブジェクト内のキーを取得します。</span><span class="sxs-lookup"><span data-stu-id="93f34-458">Gets the keys in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <value><span data-ttu-id="93f34-459"><see cref="T:System.Collections.ICollection" /> オブジェクト内のキーを格納している <see cref="T:System.Collections.SortedList" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="93f34-459">An <see cref="T:System.Collections.ICollection" /> object containing the keys in the <see cref="T:System.Collections.SortedList" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-460"><xref:System.Collections.ICollection> オブジェクトは、<xref:System.Collections.SortedList> オブジェクトのキーの読み取り専用ビューです。</span><span class="sxs-lookup"><span data-stu-id="93f34-460">The <xref:System.Collections.ICollection> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="93f34-461">基になる <xref:System.Collections.SortedList> に加えた変更は、すぐに <xref:System.Collections.ICollection>に反映されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-461">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="93f34-462"><xref:System.Collections.ICollection> の要素は、<xref:System.Collections.SortedList>のキーと同じ順序で並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-462">The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="93f34-463">このプロパティは <xref:System.Collections.SortedList.GetKeyList%2A> メソッドに似ていますが、<xref:System.Collections.IList> オブジェクトではなく <xref:System.Collections.ICollection> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-463">This property is similar to the <xref:System.Collections.SortedList.GetKeyList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.</span></span>  
  
 <span data-ttu-id="93f34-464">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-464">This method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.SortedList.Values" />
        <altmember cref="M:System.Collections.SortedList.GetKeyList" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-465">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-465">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (key As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit&#xA;override this.Remove : obj -&gt; unit" Usage="sortedList.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="93f34-466">削除する要素のキー。</span><span class="sxs-lookup"><span data-stu-id="93f34-466">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="93f34-467">指定したキーを持つ要素を <see cref="T:System.Collections.SortedList" /> オブジェクトから削除します。</span><span class="sxs-lookup"><span data-stu-id="93f34-467">Removes the element with the specified key from a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-468">指定したキーを持つ要素が <xref:System.Collections.SortedList> オブジェクトに格納されていない場合、<xref:System.Collections.SortedList> は変更されません。</span><span class="sxs-lookup"><span data-stu-id="93f34-468">If the <xref:System.Collections.SortedList> object does not contain an element with the specified key, the <xref:System.Collections.SortedList> remains unchanged.</span></span> <span data-ttu-id="93f34-469">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="93f34-469">No exception is thrown.</span></span>  
  
 <span data-ttu-id="93f34-470">リストなどの連続する要素のコレクションでは、空白になった位置を埋めるために、削除された要素の後にある要素の位置が繰り上げられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-470">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="93f34-471">コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-471">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="93f34-472">この動作は、要素が概念的にバケットにグループ化されているハッシュ テーブルなどのコレクションには適用されません。</span><span class="sxs-lookup"><span data-stu-id="93f34-472">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="93f34-473">このメソッドは、`n` が <xref:System.Collections.SortedList.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-473">This method is an `O(n)` operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-474">次のコード例は、<xref:System.Collections.SortedList> オブジェクトから要素を削除する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-474">The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93f34-475"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="93f34-475"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="93f34-476"><see cref="T:System.Collections.SortedList" /> が読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="93f34-476">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span></span>  
  
<span data-ttu-id="93f34-477">または</span><span class="sxs-lookup"><span data-stu-id="93f34-477">-or-</span></span> 
<span data-ttu-id="93f34-478"><see cref="T:System.Collections.SortedList" /> は固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="93f34-478">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.RemoveAt(System.Int32)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-479">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-479">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="sortedList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="93f34-480">削除する要素の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="93f34-480">The zero-based index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="93f34-481"><see cref="T:System.Collections.SortedList" /> オブジェクトの指定したインデックスにある要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="93f34-481">Removes the element at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-482">インデックスシーケンスは、並べ替え順序に基づいています。</span><span class="sxs-lookup"><span data-stu-id="93f34-482">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="93f34-483">要素が追加されると、正しい並べ替え順序で <xref:System.Collections.SortedList> に挿入され、インデックスが適切に調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-483">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="93f34-484">要素が削除されると、インデックスも調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-484">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="93f34-485">したがって、特定のキーと値のペアのインデックスは、<xref:System.Collections.SortedList> オブジェクトに対して要素が追加または削除されると変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-485">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-486">リストなどの連続する要素のコレクションでは、空白になった位置を埋めるために、削除された要素の後にある要素の位置が繰り上げられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-486">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="93f34-487">コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-487">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="93f34-488">この動作は、要素が概念的にバケットにグループ化されているハッシュ テーブルなどのコレクションには適用されません。</span><span class="sxs-lookup"><span data-stu-id="93f34-488">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="93f34-489">このメソッドは、`n` が <xref:System.Collections.SortedList.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-489">This method is an `O(n)` operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-490">次のコード例は、<xref:System.Collections.SortedList> オブジェクトから要素を削除する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-490">The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93f34-491"><paramref name="index" /> が、<see cref="T:System.Collections.SortedList" /> オブジェクトの有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="93f34-491"><paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="93f34-492"><see cref="T:System.Collections.SortedList" /> は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="93f34-492">The <see cref="T:System.Collections.SortedList" /> is read-only.</span></span>  
  
<span data-ttu-id="93f34-493">または</span><span class="sxs-lookup"><span data-stu-id="93f34-493">-or-</span></span> 
<span data-ttu-id="93f34-494"><see cref="T:System.Collections.SortedList" /> は固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="93f34-494">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetByIndex">
      <MemberSignature Language="C#" Value="public virtual void SetByIndex (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetByIndex(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetByIndex (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetByIndex(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetByIndex : int * obj -&gt; unit&#xA;override this.SetByIndex : int * obj -&gt; unit" Usage="sortedList.SetByIndex (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="93f34-495"><paramref name="value" /> を保存する位置の、0 から始まるインデックス番号。</span><span class="sxs-lookup"><span data-stu-id="93f34-495">The zero-based index at which to save <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="93f34-496"><see cref="T:System.Object" /> オブジェクトに保存する <see cref="T:System.Collections.SortedList" />。</span><span class="sxs-lookup"><span data-stu-id="93f34-496">The <see cref="T:System.Object" /> to save into the <see cref="T:System.Collections.SortedList" /> object.</span></span> <span data-ttu-id="93f34-497">値として <see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="93f34-497">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="93f34-498"><see cref="T:System.Collections.SortedList" /> オブジェクトの特定のインデックスにある値を置換します。</span><span class="sxs-lookup"><span data-stu-id="93f34-498">Replaces the value at a specific index in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-499">インデックスシーケンスは、並べ替え順序に基づいています。</span><span class="sxs-lookup"><span data-stu-id="93f34-499">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="93f34-500">要素が追加されると、正しい並べ替え順序で <xref:System.Collections.SortedList> に挿入され、インデックスが適切に調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-500">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="93f34-501">要素が削除されると、インデックスも調整されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-501">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="93f34-502">したがって、特定のキーと値のペアのインデックスは、<xref:System.Collections.SortedList> オブジェクトに対して要素が追加または削除されると変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-502">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-503">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-503">This method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-504">次のコード例は、<xref:System.Collections.SortedList> オブジェクト内の既存の要素の値を置き換える方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-504">The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.SetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.SetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.SetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93f34-505"><paramref name="index" /> が、<see cref="T:System.Collections.SortedList" /> オブジェクトの有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="93f34-505"><paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.SortedList Synchronized(class System.Collections.SortedList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (list As SortedList) As SortedList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::SortedList ^ Synchronized(System::Collections::SortedList ^ list);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Collections.SortedList -&gt; System.Collections.SortedList" Usage="System.Collections.SortedList.Synchronized list" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.SortedList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.SortedList" />
      </Parameters>
      <Docs>
        <param name="list"><span data-ttu-id="93f34-506">同期する <see cref="T:System.Collections.SortedList" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="93f34-506">The <see cref="T:System.Collections.SortedList" /> object to synchronize.</span></span></param>
        <summary><span data-ttu-id="93f34-507"><see cref="T:System.Collections.SortedList" /> オブジェクト用の同期された (スレッド セーフな) ラッパーを返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-507">Returns a synchronized (thread-safe) wrapper for a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="93f34-508"><see cref="T:System.Collections.SortedList" /> オブジェクト用の同期された (スレッド セーフな) ラッパー。</span><span class="sxs-lookup"><span data-stu-id="93f34-508">A synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-509"><xref:System.Collections.SortedList> オブジェクトのスレッドセーフを保証するには、すべての操作をこのラッパーでのみ実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-509">To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through this wrapper only.</span></span>  
  
 <span data-ttu-id="93f34-510">コレクションの列挙処理は、本質的にスレッドセーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="93f34-510">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="93f34-511">コレクションが同期されていても、他のスレッドがコレクションを変更する場合があり、このときは列挙子から例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-511">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="93f34-512">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="93f34-512">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-513">次のコード例は、列挙全体の中で <xref:System.Collections.SortedList.SyncRoot%2A> プロパティを使用してコレクションをロックする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-513">The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="93f34-514">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-514">This method is an `O(1)` operation.</span></span>  
  
 <span data-ttu-id="93f34-515">次のコード例は、<xref:System.Collections.SortedList> オブジェクトを同期し、<xref:System.Collections.SortedList> が同期されているかどうかを判断し、同期 <xref:System.Collections.SortedList>を使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-515">The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="93f34-516"><paramref name="list" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="93f34-516"><paramref name="list" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Collections.SortedList.IsSynchronized" />
        <altmember cref="P:System.Collections.SortedList.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.SortedList.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93f34-517"><see cref="T:System.Collections.SortedList" /> オブジェクトへのアクセスを同期するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="93f34-517">Gets an object that can be used to synchronize access to a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <value><span data-ttu-id="93f34-518"><see cref="T:System.Collections.SortedList" /> オブジェクトへのアクセスを同期するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="93f34-518">An object that can be used to synchronize access to the <see cref="T:System.Collections.SortedList" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-519">同期されたバージョンの <xref:System.Collections.SortedList> オブジェクトを作成するには、<xref:System.Collections.SortedList.Synchronized%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="93f34-519">To create a synchronized version of the <xref:System.Collections.SortedList> object, use the <xref:System.Collections.SortedList.Synchronized%2A> method.</span></span> <span data-ttu-id="93f34-520">ただし、派生クラスは、<xref:System.Collections.SortedList.SyncRoot%2A> プロパティを使用して、独自に同期されたバージョンの <xref:System.Collections.SortedList> を提供できます。</span><span class="sxs-lookup"><span data-stu-id="93f34-520">However, derived classes can provide their own synchronized version of the <xref:System.Collections.SortedList> using the <xref:System.Collections.SortedList.SyncRoot%2A> property.</span></span> <span data-ttu-id="93f34-521">同期コードは、<xref:System.Collections.SortedList>上で直接ではなく、<xref:System.Collections.SortedList>の <xref:System.Collections.SortedList.SyncRoot%2A> に対して操作を実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-521">The synchronizing code must perform operations on the <xref:System.Collections.SortedList.SyncRoot%2A> of the <xref:System.Collections.SortedList>, not directly on the <xref:System.Collections.SortedList>.</span></span> <span data-ttu-id="93f34-522">こうすることにより、他のオブジェクトから派生したコレクションを適切に操作することができます。</span><span class="sxs-lookup"><span data-stu-id="93f34-522">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="93f34-523">具体的には、<xref:System.Collections.SortedList> オブジェクトを同時に変更している可能性のある他のスレッドとの適切な同期を維持します。</span><span class="sxs-lookup"><span data-stu-id="93f34-523">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="93f34-524">コレクションの列挙処理は、本質的にスレッドセーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="93f34-524">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="93f34-525">コレクションが同期されていても、他のスレッドがコレクションを変更する場合があり、このときは列挙子から例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-525">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="93f34-526">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="93f34-526">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-527">次のコード例は、列挙全体の中で <xref:System.Collections.SortedList.SyncRoot%2A> プロパティを使用してコレクションをロックする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-527">The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="93f34-528">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-528">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.IsSynchronized" />
        <altmember cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="sortedList.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93f34-529"><see cref="T:System.Collections.IEnumerator" /> を反復処理する <see cref="T:System.Collections.SortedList" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-529">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.SortedList" />.</span></span></summary>
        <returns><span data-ttu-id="93f34-530"><see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.SortedList" /> です。</span><span class="sxs-lookup"><span data-stu-id="93f34-530">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.SortedList" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-531">[Visual Basic、 C#]</span><span class="sxs-lookup"><span data-stu-id="93f34-531">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="93f34-532">C# 言語の `foreach` ステートメント (Visual Basic の場合は `for each`) を使用することで列挙子の複雑さを回避できます。</span><span class="sxs-lookup"><span data-stu-id="93f34-532">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="93f34-533">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="93f34-533">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="93f34-534">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="93f34-534">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="93f34-535">最初、列挙子はコレクションの先頭の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-535">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="93f34-536">また、<xref:System.Collections.IEnumerator.Reset%2A> メソッドは、列挙子を最初の位置に戻します。</span><span class="sxs-lookup"><span data-stu-id="93f34-536"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="93f34-537">この位置で <xref:System.Collections.IEnumerator.Current%2A> を呼び出すと、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-537">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="93f34-538">したがって、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して、列挙子をコレクションの先頭の要素に進めておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="93f34-538">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="93f34-539"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-539"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="93f34-540"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に進めます。</span><span class="sxs-lookup"><span data-stu-id="93f34-540"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="93f34-541"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-541">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="93f34-542">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-542">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="93f34-543">前回 <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出して `false` が返された場合に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出すと例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-543">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="93f34-544">コレクションの先頭の要素に再び <xref:System.Collections.IEnumerator.Current%2A> を設定するには、先に <xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="93f34-544">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="93f34-545">列挙子は、コレクションが変更されない限り有効です。</span><span class="sxs-lookup"><span data-stu-id="93f34-545">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="93f34-546">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに無効になり、次に <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-546">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="93f34-547"><xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出してから <xref:System.Collections.IEnumerator.Current%2A> を呼び出すまでの間にコレクションが変更された場合、列挙子が既に無効になっていても、<xref:System.Collections.IEnumerator.Current%2A> は、設定されている要素を返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-547">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="93f34-548">列挙子はコレクションに排他アクセスできないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="93f34-548">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="93f34-549">コレクションが同期されていても、他のスレッドがコレクションを変更する場合があり、このときは列挙子から例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="93f34-549">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="93f34-550">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="93f34-550">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="93f34-551">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-551">This method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="TrimToSize">
      <MemberSignature Language="C#" Value="public virtual void TrimToSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrimToSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.TrimToSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrimToSize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void TrimToSize();" />
      <MemberSignature Language="F#" Value="abstract member TrimToSize : unit -&gt; unit&#xA;override this.TrimToSize : unit -&gt; unit" Usage="sortedList.TrimToSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93f34-552">容量を <see cref="T:System.Collections.SortedList" /> オブジェクト内にある実際の要素数に設定します。</span><span class="sxs-lookup"><span data-stu-id="93f34-552">Sets the capacity to the actual number of elements in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-553">コレクションに新しい要素が追加されない場合は、このメソッドを使用してコレクションのメモリオーバーヘッドを最小限に抑えることができます。</span><span class="sxs-lookup"><span data-stu-id="93f34-553">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span>  
  
 <span data-ttu-id="93f34-554"><xref:System.Collections.SortedList> オブジェクトを初期状態にリセットするには、<xref:System.Collections.SortedList.TrimToSize%2A>を呼び出す前に <xref:System.Collections.SortedList.Clear%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="93f34-554">To reset a <xref:System.Collections.SortedList> object to its initial state, call the <xref:System.Collections.SortedList.Clear%2A> method before calling <xref:System.Collections.SortedList.TrimToSize%2A>.</span></span> <span data-ttu-id="93f34-555">空の <xref:System.Collections.SortedList> をトリミングすると、<xref:System.Collections.SortedList> の容量が既定の容量に設定されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-555">Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.</span></span>  
  
 <span data-ttu-id="93f34-556">このメソッドは、`n` が <xref:System.Collections.SortedList.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-556">This method is an `O(n)` operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93f34-557">次のコード例は、<xref:System.Collections.SortedList> オブジェクトの未使用部分をトリミングし、その値をクリアする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="93f34-557">The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.</span></span>  
  
 [!code-cpp[Classic SortedList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="93f34-558"><see cref="T:System.Collections.SortedList" /> が読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="93f34-558">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span></span>  
  
<span data-ttu-id="93f34-559">または</span><span class="sxs-lookup"><span data-stu-id="93f34-559">-or-</span></span> 
<span data-ttu-id="93f34-560"><see cref="T:System.Collections.SortedList" /> は固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="93f34-560">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.Clear" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <altmember cref="P:System.Collections.SortedList.Count" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Values" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Values As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.ICollection" Usage="System.Collections.SortedList.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93f34-561"><see cref="T:System.Collections.SortedList" /> オブジェクト内の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="93f34-561">Gets the values in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <value><span data-ttu-id="93f34-562"><see cref="T:System.Collections.ICollection" /> オブジェクト内の値を格納している <see cref="T:System.Collections.SortedList" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="93f34-562">An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.SortedList" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93f34-563"><xref:System.Collections.ICollection> オブジェクトは、<xref:System.Collections.SortedList> オブジェクトの値の読み取り専用ビューです。</span><span class="sxs-lookup"><span data-stu-id="93f34-563">The <xref:System.Collections.ICollection> object is a read-only view of the values of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="93f34-564">基になる <xref:System.Collections.SortedList> に加えた変更は、すぐに <xref:System.Collections.ICollection>に反映されます。</span><span class="sxs-lookup"><span data-stu-id="93f34-564">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="93f34-565"><xref:System.Collections.ICollection> の要素は、<xref:System.Collections.SortedList>の値と同じ順序で並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="93f34-565">The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="93f34-566">このプロパティは <xref:System.Collections.SortedList.GetValueList%2A> メソッドに似ていますが、<xref:System.Collections.IList> オブジェクトではなく <xref:System.Collections.ICollection> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="93f34-566">This property is similar to the <xref:System.Collections.SortedList.GetValueList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.</span></span>  
  
 <span data-ttu-id="93f34-567">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="93f34-567">This method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.SortedList.Keys" />
        <altmember cref="M:System.Collections.SortedList.GetValueList" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="93f34-568">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="93f34-568">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
