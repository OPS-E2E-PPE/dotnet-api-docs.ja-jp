<Type Name="Hashtable" FullName="System.Collections.Hashtable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8e3d860fb6b6ae7e3c3befd919532e1fe9d5aad8" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75150549" /></Metadata><TypeSignature Language="C#" Value="public class Hashtable : ICloneable, System.Collections.IDictionary, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Hashtable extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable, class System.ICloneable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Hashtable" />
  <TypeSignature Language="VB.NET" Value="Public Class Hashtable&#xA;Implements ICloneable, IDeserializationCallback, IDictionary, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Hashtable : ICloneable, System::Collections::IDictionary, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Hashtable = class&#xA;    interface IDictionary&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Hashtable/HashtableDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b7513-101">キーのハッシュ コードに基づいて編成された、キーと値のペアのコレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="b7513-101">Represents a collection of key/value pairs that are organized based on the hash code of the key.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="b7513-102">各要素は、<xref:System.Collections.DictionaryEntry> オブジェクトに格納されているキーと値のペアです。</span><span class="sxs-lookup"><span data-stu-id="b7513-102">Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> object.</span></span> <span data-ttu-id="b7513-103">キーを `null`することはできませんが、値にはを指定できます。</span><span class="sxs-lookup"><span data-stu-id="b7513-103">A key cannot be `null`, but a value can be.</span></span>  

> [!IMPORTANT]
>  <span data-ttu-id="b7513-104">新しい開発には `Hashtable` クラスを使用しないことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b7513-104">We don't recommend that you use the `Hashtable` class for new development.</span></span> <span data-ttu-id="b7513-105">代わりに、ジェネリック <xref:System.Collections.Generic.Dictionary%602> クラスを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b7513-105">Instead, we recommend that you use the generic <xref:System.Collections.Generic.Dictionary%602> class.</span></span> <span data-ttu-id="b7513-106">詳細については、「GitHub で[非ジェネリックコレクションを使用することはでき](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md)ません。」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b7513-106">For more information, see [Non-generic collections shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) on GitHub.</span></span>
  
 <span data-ttu-id="b7513-107"><xref:System.Collections.Hashtable> によってキーとして使用されるオブジェクトは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> メソッド (または <xref:System.Collections.IHashCodeProvider> インターフェイス) と <xref:System.Object.Equals%2A?displayProperty=nameWithType> メソッド (または <xref:System.Collections.IComparer> インターフェイス) をオーバーライドするために必要です。</span><span class="sxs-lookup"><span data-stu-id="b7513-107">The objects used as keys by a <xref:System.Collections.Hashtable> are required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> method (or the <xref:System.Collections.IHashCodeProvider> interface) and the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method (or the <xref:System.Collections.IComparer> interface).</span></span> <span data-ttu-id="b7513-108">メソッドとインターフェイスの実装では、大文字と小文字の区別を同じように処理する必要があります。それ以外の場合、<xref:System.Collections.Hashtable> が正しく動作しない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-108">The implementation of both methods and interfaces must handle case sensitivity the same way; otherwise, the <xref:System.Collections.Hashtable> might behave incorrectly.</span></span> <span data-ttu-id="b7513-109">たとえば、<xref:System.Collections.Hashtable>を作成する場合は、<xref:System.Collections.CaseInsensitiveComparer> クラス (または大文字と小文字を区別しない <xref:System.Collections.IComparer> 実装) で <xref:System.Collections.CaseInsensitiveHashCodeProvider> クラス (または大文字と小文字を区別しない <xref:System.Collections.IHashCodeProvider> 実装) を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-109">For example, when creating a <xref:System.Collections.Hashtable>, you must use the <xref:System.Collections.CaseInsensitiveHashCodeProvider> class (or any case-insensitive <xref:System.Collections.IHashCodeProvider> implementation) with the <xref:System.Collections.CaseInsensitiveComparer> class (or any case-insensitive <xref:System.Collections.IComparer> implementation).</span></span>  
  
 <span data-ttu-id="b7513-110">さらに、これらのメソッドは、<xref:System.Collections.Hashtable>内にキーが存在するときに同じパラメーターを指定して呼び出された場合に、同じ結果を生成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-110">Furthermore, these methods must produce the same results when called with the same parameters while the key exists in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="b7513-111">別の方法として、<xref:System.Collections.IEqualityComparer> パラメーターを指定して <xref:System.Collections.Hashtable> コンストラクターを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="b7513-111">An alternative is to use a <xref:System.Collections.Hashtable> constructor with an <xref:System.Collections.IEqualityComparer> parameter.</span></span> <span data-ttu-id="b7513-112">キーの等価性が単に参照の等価である場合、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> と <xref:System.Object.Equals%2A?displayProperty=nameWithType> の継承された実装で十分です。</span><span class="sxs-lookup"><span data-stu-id="b7513-112">If key equality were simply reference equality, the inherited implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> would suffice.</span></span>  
  
 <span data-ttu-id="b7513-113">キーオブジェクトは、<xref:System.Collections.Hashtable>でキーとして使用されている限り、不変である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-113">Key objects must be immutable as long as they are used as keys in the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="b7513-114">要素が <xref:System.Collections.Hashtable>に追加されると、要素はキーのハッシュコードに基づいてバケットに配置されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-114">When an element is added to the <xref:System.Collections.Hashtable>, the element is placed into a bucket based on the hash code of the key.</span></span> <span data-ttu-id="b7513-115">キーの後続の参照では、キーのハッシュコードを使用して1つの特定のバケットだけを検索します。これにより、要素を検索するために必要なキー比較の数が大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="b7513-115">Subsequent lookups of the key use the hash code of the key to search in only one particular bucket, thus substantially reducing the number of key comparisons required to find an element.</span></span>  
  
 <span data-ttu-id="b7513-116"><xref:System.Collections.Hashtable> の占有率によって、バケットに対する要素の最大比率が決まります。</span><span class="sxs-lookup"><span data-stu-id="b7513-116">The load factor of a <xref:System.Collections.Hashtable> determines the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-117">読み込み係数を小さくすると、メモリ使用量の増加による平均参照時間が短縮されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-117">Smaller load factors cause faster average lookup times at the cost of increased memory consumption.</span></span> <span data-ttu-id="b7513-118">一般に、既定の負荷係数1.0 は、速度とサイズのバランスをとって最適です。</span><span class="sxs-lookup"><span data-stu-id="b7513-118">The default load factor of 1.0 generally provides the best balance between speed and size.</span></span> <span data-ttu-id="b7513-119"><xref:System.Collections.Hashtable> の作成時に、別の負荷係数を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="b7513-119">A different load factor can also be specified when the <xref:System.Collections.Hashtable> is created.</span></span>  
  
 <span data-ttu-id="b7513-120">要素が <xref:System.Collections.Hashtable>に追加されると、<xref:System.Collections.Hashtable> の実際の占有率が増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-120">As elements are added to a <xref:System.Collections.Hashtable>, the actual load factor of the <xref:System.Collections.Hashtable> increases.</span></span> <span data-ttu-id="b7513-121">実際の負荷係数が指定されたテーブル占有率に達すると、<xref:System.Collections.Hashtable> 内のバケットの数が、現在の <xref:System.Collections.Hashtable> バケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-121">When the actual load factor reaches the specified load factor, the number of buckets in the <xref:System.Collections.Hashtable> is automatically increased to the smallest prime number that is larger than twice the current number of <xref:System.Collections.Hashtable> buckets.</span></span>  
  
 <span data-ttu-id="b7513-122"><xref:System.Collections.Hashtable> 内の各キーオブジェクトは、<xref:System.Collections.Hashtable.GetHash%2A>を呼び出すことによってアクセスできる独自のハッシュ関数を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-122">Each key object in the <xref:System.Collections.Hashtable> must provide its own hash function, which can be accessed by calling <xref:System.Collections.Hashtable.GetHash%2A>.</span></span> <span data-ttu-id="b7513-123">ただし、<xref:System.Collections.IHashCodeProvider> を実装しているオブジェクトは <xref:System.Collections.Hashtable> コンストラクターに渡すことができ、そのハッシュ関数はテーブル内のすべてのオブジェクトに使用されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-123">However, any object implementing <xref:System.Collections.IHashCodeProvider> can be passed to a <xref:System.Collections.Hashtable> constructor, and that hash function is used for all objects in the table.</span></span>  
  
 <span data-ttu-id="b7513-124"><xref:System.Collections.Hashtable>の容量は、<xref:System.Collections.Hashtable>が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="b7513-124">The capacity of a <xref:System.Collections.Hashtable> is the number of elements the <xref:System.Collections.Hashtable> can hold.</span></span> <span data-ttu-id="b7513-125">要素が <xref:System.Collections.Hashtable>に追加されると、再割り当てによって必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-125">As elements are added to a <xref:System.Collections.Hashtable>, the capacity is automatically increased as required through reallocation.</span></span>  
  
 <span data-ttu-id="b7513-126">**.NET Framework のみ:** 非常に大きな <xref:System.Collections.Hashtable> オブジェクトの場合、 [`<gcAllowVeryLargeObjects>`](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md)構成要素の `enabled` 属性を実行時環境の `true` に設定することによって、64ビットシステム上の最大容量を20億の要素に増やすことができます。</span><span class="sxs-lookup"><span data-stu-id="b7513-126">**.NET Framework only:** For very large <xref:System.Collections.Hashtable> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the [`<gcAllowVeryLargeObjects>`](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="b7513-127">C#言語の `foreach` ステートメント (Visual Basic で`For Each`) は、コレクション内の要素の型のオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-127">The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="b7513-128"><xref:System.Collections.Hashtable> の各要素はキーと値のペアであるため、要素型はキーの型でも、値の型でもありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-128">Since each element of the <xref:System.Collections.Hashtable> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="b7513-129">代わりに、要素の型は <xref:System.Collections.DictionaryEntry>になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-129">Instead, the element type is <xref:System.Collections.DictionaryEntry>.</span></span> <span data-ttu-id="b7513-130">例 :</span><span class="sxs-lookup"><span data-stu-id="b7513-130">For example:</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ClassExample#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ClassExample/cpp/remarks.cpp#01)]
 [!code-csharp[System.Collections.Hashtable_ClassExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ClassExample/cs/remarks.cs#01)]
 [!code-vb[System.Collections.Hashtable_ClassExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ClassExample/vb/remarks.vb#01)]  
  
 <span data-ttu-id="b7513-131">`foreach` ステートメントは、列挙子のラッパーであり、コレクションへの書き込みではなく読み取りのみが許可されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-131">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
 <span data-ttu-id="b7513-132"><xref:System.Collections.Hashtable> の列挙子をシリアル化または逆シリアル化すると、要素が並べ替えられる可能性があるため、<xref:System.Collections.IEnumerator.Reset%2A> メソッドを呼び出さなくても列挙を続行することはできません。</span><span class="sxs-lookup"><span data-stu-id="b7513-132">Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7513-133">キーを継承してその動作を変更できるため、<xref:System.Type.Equals%2A> メソッドを使用して比較することで、それらの絶対一意性を保証することはできません。</span><span class="sxs-lookup"><span data-stu-id="b7513-133">Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-134">次の例は、<xref:System.Collections.Hashtable> に対してさまざまな関数を作成、初期化、および実行する方法と、そのキーと値を出力する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b7513-134">The following example shows how to create, initialize and perform various functions to a <xref:System.Collections.Hashtable> and how to print out its keys and values.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ClassExample#00](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ClassExample/cpp/hashtable_example.cpp#00)]
 [!code-csharp[System.Collections.Hashtable_ClassExample#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ClassExample/cs/hashtable_example.cs#00)]
 [!code-vb[System.Collections.Hashtable_ClassExample#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ClassExample/vb/hashtable_example.vb#00)]
 [!code-powershell[System.Collections.Hashtable_ClassExample#00](~/samples/snippets/powershell/VS_Snippets_CLR_System/system.collections.hashtable.class/ps/hashtable.ps1#00)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="b7513-135"><see cref="T:System.Collections.Hashtable" /> は、複数のリーダースレッドと1つの書き込みスレッドによって使用されるスレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="b7513-135"><see cref="T:System.Collections.Hashtable" /> is thread safe for use by multiple reader threads and a single writing thread.</span></span> <span data-ttu-id="b7513-136">スレッドの1つだけが書き込み (更新) 操作を実行する場合は、マルチスレッドの使用に対してスレッドセーフです。これにより、ライターが <see cref="T:System.Collections.Hashtable" />にシリアル化された場合に、ロックフリーの読み取りが可能になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-136">It is thread safe for multi-thread use when only one of the threads perform write (update) operations, which allows for lock-free reads provided that the writers are serialized to the <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="b7513-137">複数のライターをサポートするには、<see cref="T:System.Collections.Hashtable" /> でのすべての操作を、<see cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" /> メソッドによって返されるラッパーを通じて行う必要があります。これは、<see cref="T:System.Collections.Hashtable" /> オブジェクトを読み取るスレッドが存在しない場合です。</span><span class="sxs-lookup"><span data-stu-id="b7513-137">To support multiple writers all operations on the <see cref="T:System.Collections.Hashtable" /> must be done through the wrapper returned by the <see cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" /> method, provided that there are no threads reading the <see cref="T:System.Collections.Hashtable" /> object.</span></span>  
  
<span data-ttu-id="b7513-138">コレクションの列挙は、本質的にスレッド セーフな手続きではありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-138">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="b7513-139">コレクションが同期されていても、他のスレッドがコレクションを変更する場合があり、このときは列挙子から例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b7513-139">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="b7513-140">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="b7513-140">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="T:System.Collections.IHashCodeProvider" />
    <altmember cref="M:System.Object.GetHashCode" />
    <altmember cref="M:System.Object.Equals(System.Object)" />
    <altmember cref="T:System.Collections.DictionaryEntry" />
    <altmember cref="T:System.Collections.Generic.Dictionary`2" />
    <altmember cref="T:System.Collections.IEqualityComparer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b7513-141"><see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-141">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b7513-142">既定の初期量、テーブル占有率、ハッシュ コード プロバイダー、および比較子を使用して、<see cref="T:System.Collections.Hashtable" /> クラスの新しい空のインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-142">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the default initial capacity, load factor, hash code provider, and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-143">ハッシュテーブルの容量は、負荷係数に基づいて最適なハッシュテーブルバケット数を計算するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-143">A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.</span></span> <span data-ttu-id="b7513-144">容量は、必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-144">Capacity is automatically increased as required.</span></span>  
  
 <span data-ttu-id="b7513-145">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-145">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-146">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-146">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="b7513-147">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-147">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-148">ハッシュコードプロバイダーは、<xref:System.Collections.Hashtable> オブジェクト内のキーのハッシュコードを省きします。</span><span class="sxs-lookup"><span data-stu-id="b7513-148">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-149">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-149">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-150">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-150">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-151"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-151">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-152">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-152">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-153">このコンストラクターは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-153">This constructor is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-154">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-154">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CPP/hashtable_ctor.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CS/hashtable_ctor.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/VB/hashtable_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IDictionary ^ d);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IDictionary -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable d" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b7513-155">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-155">The <see cref="T:System.Collections.IDictionary" /> object to copy to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <summary><span data-ttu-id="b7513-156">指定したディクショナリの要素を新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトにコピーすることによって、<see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-156">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable" /> object.</span></span> <span data-ttu-id="b7513-157">新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトは、コピーされた要素数に等しい初期量を備えており、既定のテーブル占有率、ハッシュ コード プロバイダー、および比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="b7513-157">The new <see cref="T:System.Collections.Hashtable" /> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-158">初期量は、ソースディクショナリ内の要素の数に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-158">The initial capacity is set to the number of elements in the source dictionary.</span></span> <span data-ttu-id="b7513-159">容量は、負荷係数に基づいて必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-159">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="b7513-160">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-160">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-161">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-161">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="b7513-162">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-162">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-163">ハッシュコードプロバイダーは、<xref:System.Collections.Hashtable> オブジェクト内のキーのハッシュコードを省きします。</span><span class="sxs-lookup"><span data-stu-id="b7513-163">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-164">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-164">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-165">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-165">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-166"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-166">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-167">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-167">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-168">新しい <xref:System.Collections.Hashtable> の要素は、列挙子が <xref:System.Collections.IDictionary> オブジェクトを反復処理する順序で並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="b7513-168">The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.</span></span>  
  
 <span data-ttu-id="b7513-169">このコンストラクターは `O(n)` 操作で、`n` は `d` パラメーター内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="b7513-169">This constructor is an `O(n)` operation, where `n` is the number of elements in the `d` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-170">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-170">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/CPP/hashtable_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/CS/hashtable_ctordictionary.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/VB/hashtable_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-171"><paramref name="d" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-171"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IEqualityComparer equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IEqualityComparer equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (equalityComparer As IEqualityComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IEqualityComparer ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IEqualityComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable equalityComparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="equalityComparer" Type="System.Collections.IEqualityComparer" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="equalityComparer"><span data-ttu-id="b7513-172"><see cref="T:System.Collections.IEqualityComparer" /> オブジェクトで使用するハッシュ コード プロバイダーと比較子を定義する <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-172">The <see cref="T:System.Collections.IEqualityComparer" /> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable" /> object.</span></span>  
  
<span data-ttu-id="b7513-173">または</span><span class="sxs-lookup"><span data-stu-id="b7513-173">-or-</span></span> 
 <span data-ttu-id="b7513-174">既定のハッシュ コード プロバイダーおよび既定の比較子を使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-174"><see langword="null" /> to use the default hash code provider and the default comparer.</span></span> <span data-ttu-id="b7513-175">既定のハッシュ コード プロバイダーは、各キーの <see cref="M:System.Object.GetHashCode" /> の実装です。また、既定の比較子は各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-175">The default hash code provider is each key's implementation of <see cref="M:System.Object.GetHashCode" /> and the default comparer is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="b7513-176">既定の初期量とテーブル占有率、および指定した <see cref="T:System.Collections.Hashtable" /> オブジェクトを使用して、<see cref="T:System.Collections.IEqualityComparer" /> クラスの新しい空のインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-176">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the default initial capacity and load factor, and the specified <see cref="T:System.Collections.IEqualityComparer" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-177">ハッシュテーブルの容量は、負荷係数に基づいて最適なハッシュテーブルバケット数を計算するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-177">A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.</span></span> <span data-ttu-id="b7513-178">容量は、必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-178">Capacity is automatically increased as required.</span></span>  
  
 <span data-ttu-id="b7513-179">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-179">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-180">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-180">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="b7513-181">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-181">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-182"><xref:System.Collections.IEqualityComparer> オブジェクトには、ハッシュコードプロバイダーと比較子の両方が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b7513-182">The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer.</span></span> <span data-ttu-id="b7513-183"><xref:System.Collections.IEqualityComparer> が <xref:System.Collections.Hashtable> コンストラクターで使用されている場合、<xref:System.Collections.Hashtable> オブジェクトのキーとして使用されるオブジェクトは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> および <xref:System.Object.Equals%2A?displayProperty=nameWithType> メソッドをオーバーライドする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-183">If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="b7513-184">ハッシュ コード プロバイダーは、<xref:System.Collections.Hashtable>内のキーにハッシュ コードを与えます。</span><span class="sxs-lookup"><span data-stu-id="b7513-184">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="b7513-185">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-185">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-186">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-186">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-187"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-187">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-188">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-188">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-189"><xref:System.Collections.IEqualityComparer> を使用すると、大文字と小文字を区別しない文字列で参照を実行するなどのシナリオが可能になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-189">The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="b7513-190">このコンストラクターは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-190">This constructor is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-191">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-191">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CPP/hashtable_ctor.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CS/hashtable_ctor.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/VB/hashtable_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : int -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="b7513-192"><see cref="T:System.Collections.Hashtable" /> オブジェクトが初期状態で格納できる要素の概数。</span><span class="sxs-lookup"><span data-stu-id="b7513-192">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> object can initially contain.</span></span></param>
        <summary><span data-ttu-id="b7513-193">指定した初期量と、既定のテーブル占有率、ハッシュ コード プロバイダー、および比較子を使用して、<see cref="T:System.Collections.Hashtable" /> クラスの新しい空のインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-193">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the specified initial capacity, and the default load factor, hash code provider, and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-194">初期容量を指定すると、<xref:System.Collections.Hashtable> オブジェクトに要素を追加する際に、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="b7513-194">Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-195">容量は、負荷係数に基づいて必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-195">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="b7513-196">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-196">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-197">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-197">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="b7513-198">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-198">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-199">ハッシュ コード プロバイダーは、<xref:System.Collections.Hashtable>内のキーにハッシュ コードを与えます。</span><span class="sxs-lookup"><span data-stu-id="b7513-199">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="b7513-200">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-200">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-201">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-201">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-202"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-202">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-203">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-203">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-204">このコンストラクターは、`n` が `capacity``O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-204">This constructor is an `O(n)` operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-205">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-205">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/CPP/hashtable_ctorint.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/CS/hashtable_ctorint.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/VB/hashtable_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b7513-206"><paramref name="capacity" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-206"><paramref name="capacity" /> is less than zero.</span></span></exception>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IDictionary d, System.Collections.IEqualityComparer equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, class System.Collections.IEqualityComparer equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, equalityComparer As IEqualityComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IDictionary ^ d, System::Collections::IEqualityComparer ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IDictionary * System.Collections.IEqualityComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (d, equalityComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="equalityComparer" Type="System.Collections.IEqualityComparer" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b7513-207">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-207">The <see cref="T:System.Collections.IDictionary" /> object to copy to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="b7513-208"><see cref="T:System.Collections.IEqualityComparer" /> で使用するハッシュ コード プロバイダーと比較子を定義する <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-208">The <see cref="T:System.Collections.IEqualityComparer" /> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="b7513-209">または</span><span class="sxs-lookup"><span data-stu-id="b7513-209">-or-</span></span> 
 <span data-ttu-id="b7513-210">既定のハッシュ コード プロバイダーおよび既定の比較子を使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-210"><see langword="null" /> to use the default hash code provider and the default comparer.</span></span> <span data-ttu-id="b7513-211">既定のハッシュ コード プロバイダーは、各キーの <see cref="M:System.Object.GetHashCode" /> の実装です。また、既定の比較子は各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-211">The default hash code provider is each key's implementation of <see cref="M:System.Object.GetHashCode" /> and the default comparer is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="b7513-212">指定したディクショナリの要素を新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトにコピーすることによって、<see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-212">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class by copying the elements from the specified dictionary to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span> <span data-ttu-id="b7513-213">新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトは、コピーされた要素数に等しい初期量を備えており、既定のテーブル占有率および指定した <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="b7513-213">The new <see cref="T:System.Collections.Hashtable" /> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified <see cref="T:System.Collections.IEqualityComparer" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-214">初期量は、ソースディクショナリ内の要素の数に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-214">The initial capacity is set to the number of elements in the source dictionary.</span></span> <span data-ttu-id="b7513-215">容量は、負荷係数に基づいて必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-215">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="b7513-216">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-216">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-217">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-217">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="b7513-218">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-218">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-219"><xref:System.Collections.IEqualityComparer> オブジェクトには、ハッシュコードプロバイダーと比較子の両方が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b7513-219">The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer.</span></span> <span data-ttu-id="b7513-220"><xref:System.Collections.IEqualityComparer> が <xref:System.Collections.Hashtable> コンストラクターで使用されている場合、<xref:System.Collections.Hashtable> オブジェクトのキーとして使用されるオブジェクトは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> および <xref:System.Object.Equals%2A?displayProperty=nameWithType> メソッドをオーバーライドする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-220">If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="b7513-221">ハッシュ コード プロバイダーは、<xref:System.Collections.Hashtable>内のキーにハッシュ コードを与えます。</span><span class="sxs-lookup"><span data-stu-id="b7513-221">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="b7513-222">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-222">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-223">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-223">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-224"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-224">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-225">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-225">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-226"><xref:System.Collections.IEqualityComparer> を使用すると、大文字と小文字を区別しない文字列で参照を実行するなどのシナリオが可能になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-226">The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="b7513-227">新しい <xref:System.Collections.Hashtable> の要素は、列挙子が <xref:System.Collections.IDictionary> オブジェクトを反復処理する順序で並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="b7513-227">The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.</span></span>  
  
 <span data-ttu-id="b7513-228">このコンストラクターは `O(n)` 操作で、`n` は `d` パラメーター内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="b7513-228">This constructor is an `O(n)` operation, where `n` is the number of elements in the `d` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-229">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-229">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/CPP/hashtable_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/CS/hashtable_ctordictionary.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/VB/hashtable_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-230"><paramref name="d" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-230"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IDictionary d, float loadFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, float32 loadFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, loadFactor As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IDictionary ^ d, float loadFactor);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IDictionary * single -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (d, loadFactor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
        <Parameter Name="loadFactor" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b7513-231">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-231">The <see cref="T:System.Collections.IDictionary" /> object to copy to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <param name="loadFactor"><span data-ttu-id="b7513-232">0.1 ～ 1.0 の範囲の値。これに、パフォーマンスが最高になる既定値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="b7513-232">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</span></span> <span data-ttu-id="b7513-233">その結果が、バケット数に対する要素数の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-233">The result is the maximum ratio of elements to buckets.</span></span></param>
        <summary><span data-ttu-id="b7513-234">指定したディクショナリの要素を新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトにコピーすることによって、<see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-234">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable" /> object.</span></span> <span data-ttu-id="b7513-235">新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトは、コピーされた要素数に等しい初期量を備えており、指定したテーブル占有率、および既定のハッシュ コード プロバイダーと比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="b7513-235">The new <see cref="T:System.Collections.Hashtable" /> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-236">初期量は、ソースディクショナリ内の要素の数に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-236">The initial capacity is set to the number of elements in the source dictionary.</span></span> <span data-ttu-id="b7513-237">容量は、負荷係数に基づいて必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-237">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="b7513-238">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-238">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-239">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-239">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span> <span data-ttu-id="b7513-240">負荷率が1.0 の場合は、速度とサイズのバランスが最適です。</span><span class="sxs-lookup"><span data-stu-id="b7513-240">A load factor of 1.0 is the best balance between speed and size.</span></span>  
  
 <span data-ttu-id="b7513-241">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-241">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-242">ハッシュコードプロバイダーは、<xref:System.Collections.Hashtable> オブジェクト内のキーのハッシュコードを省きします。</span><span class="sxs-lookup"><span data-stu-id="b7513-242">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-243">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-243">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-244">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-244">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-245"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-245">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-246">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-246">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-247">新しい <xref:System.Collections.Hashtable> の要素は、列挙子が <xref:System.Collections.IDictionary> オブジェクトを反復処理する順序で並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="b7513-247">The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.</span></span>  
  
 <span data-ttu-id="b7513-248">このコンストラクターは `O(n)` 操作で、`n` は `d` パラメーター内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="b7513-248">This constructor is an `O(n)` operation, where `n` is the number of elements in the `d` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-249">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-249">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/CPP/hashtable_ctordictionaryfloat.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/CS/hashtable_ctordictionaryfloat.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/VB/hashtable_ctordictionaryfloat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-250"><paramref name="d" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-250"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b7513-251"><paramref name="loadFactor" /> が 0.1 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-251"><paramref name="loadFactor" /> is less than 0.1.</span></span>  
  
<span data-ttu-id="b7513-252">または</span><span class="sxs-lookup"><span data-stu-id="b7513-252">-or-</span></span> 
 <span data-ttu-id="b7513-253"><paramref name="loadFactor" /> が 1.0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b7513-253"><paramref name="loadFactor" /> is greater than 1.0.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hcp As IHashCodeProvider, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IHashCodeProvider ^ hcp, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IHashCodeProvider * System.Collections.IComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (hcp, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Please use Hashtable(IEqualityComparer) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="hcp" Type="System.Collections.IHashCodeProvider" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="hcp"><span data-ttu-id="b7513-254"><see cref="T:System.Collections.IHashCodeProvider" /> オブジェクト内のすべてのキーにハッシュ コードを提供する <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-254">The <see cref="T:System.Collections.IHashCodeProvider" /> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" /> object.</span></span>  
  
<span data-ttu-id="b7513-255">または</span><span class="sxs-lookup"><span data-stu-id="b7513-255">-or-</span></span> 
 <span data-ttu-id="b7513-256">各キーの <see langword="null" /> の実装である既定のハッシュ コード プロバイダーを使用する場合は <see cref="M:System.Object.GetHashCode" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-256"><see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="b7513-257">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-257">The <see cref="T:System.Collections.IComparer" /> object to use to determine whether two keys are equal.</span></span>  
  
<span data-ttu-id="b7513-258">または</span><span class="sxs-lookup"><span data-stu-id="b7513-258">-or-</span></span> 
 <span data-ttu-id="b7513-259">各キーの <see langword="null" /> の実装である既定の比較子を使用する場合は <see cref="M:System.Object.Equals(System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-259"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="b7513-260">既定の初期量とテーブル占有率、および指定したハッシュ コード プロバイダーと比較子を使用して、<see cref="T:System.Collections.Hashtable" /> クラスの新しい空のインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-260">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the default initial capacity and load factor, and the specified hash code provider and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-261">ハッシュテーブルの容量は、負荷係数に基づいて最適なハッシュテーブルバケット数を計算するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-261">A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.</span></span> <span data-ttu-id="b7513-262">容量は、必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-262">Capacity is automatically increased as required.</span></span>  
  
 <span data-ttu-id="b7513-263">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-263">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-264">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-264">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="b7513-265">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-265">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-266">ハッシュコードプロバイダーは、<xref:System.Collections.Hashtable> オブジェクト内のキーのハッシュコードを省きします。</span><span class="sxs-lookup"><span data-stu-id="b7513-266">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-267">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-267">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-268">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-268">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-269"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-269">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-270">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-270">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-271">カスタムハッシュコードプロバイダーとカスタム比較子を使用すると、大文字と小文字を区別しない文字列で参照を実行するなどのシナリオが可能になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-271">The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="b7513-272">このコンストラクターは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-272">This constructor is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-273">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-273">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CPP/hashtable_ctor.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CS/hashtable_ctor.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/VB/hashtable_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IHashCodeProvider" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (int capacity, System.Collections.IEqualityComparer equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, class System.Collections.IEqualityComparer equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, equalityComparer As IEqualityComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(int capacity, System::Collections::IEqualityComparer ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : int * System.Collections.IEqualityComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (capacity, equalityComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="equalityComparer" Type="System.Collections.IEqualityComparer" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="b7513-274"><see cref="T:System.Collections.Hashtable" /> オブジェクトが初期状態で格納できる要素の概数。</span><span class="sxs-lookup"><span data-stu-id="b7513-274">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> object can initially contain.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="b7513-275"><see cref="T:System.Collections.IEqualityComparer" /> で使用するハッシュ コード プロバイダーと比較子を定義する <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-275">The <see cref="T:System.Collections.IEqualityComparer" /> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="b7513-276">または</span><span class="sxs-lookup"><span data-stu-id="b7513-276">-or-</span></span> 
 <span data-ttu-id="b7513-277">既定のハッシュ コード プロバイダーおよび既定の比較子を使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-277"><see langword="null" /> to use the default hash code provider and the default comparer.</span></span> <span data-ttu-id="b7513-278">既定のハッシュ コード プロバイダーは、各キーの <see cref="M:System.Object.GetHashCode" /> の実装です。また、既定の比較子は各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-278">The default hash code provider is each key's implementation of <see cref="M:System.Object.GetHashCode" /> and the default comparer is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="b7513-279">指定した初期量と <see cref="T:System.Collections.Hashtable" />、および既定のテーブル占有率を使用して、<see cref="T:System.Collections.IEqualityComparer" /> クラスの新しい空のインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-279">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the specified initial capacity and <see cref="T:System.Collections.IEqualityComparer" />, and the default load factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-280">初期容量を指定すると、<xref:System.Collections.Hashtable> オブジェクトに要素を追加する際に、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="b7513-280">Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-281">容量は、負荷係数に基づいて必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-281">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="b7513-282">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-282">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-283">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-283">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="b7513-284">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-284">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-285"><xref:System.Collections.IEqualityComparer> オブジェクトには、ハッシュコードプロバイダーと比較子の両方が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b7513-285">The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer.</span></span> <span data-ttu-id="b7513-286"><xref:System.Collections.IEqualityComparer> が <xref:System.Collections.Hashtable> コンストラクターで使用されている場合、<xref:System.Collections.Hashtable> 内でキーとして使用されるオブジェクトは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> および <xref:System.Object.Equals%2A?displayProperty=nameWithType> メソッドをオーバーライドする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-286">If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="b7513-287">ハッシュ コード プロバイダーは、<xref:System.Collections.Hashtable>内のキーにハッシュ コードを与えます。</span><span class="sxs-lookup"><span data-stu-id="b7513-287">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="b7513-288">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-288">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-289">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-289">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-290"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-290">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-291">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-291">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-292"><xref:System.Collections.IEqualityComparer> を使用すると、大文字と小文字を区別しない文字列で参照を実行するなどのシナリオが可能になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-292">The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="b7513-293">このコンストラクターは `O(n)` 操作であり、`n` は `capacity` パラメーターです。</span><span class="sxs-lookup"><span data-stu-id="b7513-293">This constructor is an `O(n)` operation, where `n` is the `capacity` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-294">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-294">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/CPP/hashtable_ctorint.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/CS/hashtable_ctorint.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/VB/hashtable_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b7513-295"><paramref name="capacity" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-295"><paramref name="capacity" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (int capacity, float loadFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, float32 loadFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, loadFactor As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(int capacity, float loadFactor);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : int * single -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (capacity, loadFactor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="loadFactor" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="b7513-296"><see cref="T:System.Collections.Hashtable" /> オブジェクトが初期状態で格納できる要素の概数。</span><span class="sxs-lookup"><span data-stu-id="b7513-296">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> object can initially contain.</span></span></param>
        <param name="loadFactor"><span data-ttu-id="b7513-297">0.1 ～ 1.0 の範囲の値。これに、パフォーマンスが最高になる既定値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="b7513-297">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</span></span> <span data-ttu-id="b7513-298">その結果が、バケット数に対する要素数の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-298">The result is the maximum ratio of elements to buckets.</span></span></param>
        <summary><span data-ttu-id="b7513-299">指定した初期量とテーブル占有率、および既定のハッシュ コード プロバイダーと比較子を使用して、<see cref="T:System.Collections.Hashtable" /> クラスの新しい空のインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-299">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the specified initial capacity and load factor, and the default hash code provider and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-300">初期容量を指定すると、<xref:System.Collections.Hashtable> オブジェクトに要素を追加する際に、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="b7513-300">Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-301">容量は、負荷係数に基づいて必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-301">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="b7513-302">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-302">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-303">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-303">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span> <span data-ttu-id="b7513-304">負荷率が1.0 の場合は、速度とサイズのバランスが最適です。</span><span class="sxs-lookup"><span data-stu-id="b7513-304">A load factor of 1.0 is the best balance between speed and size.</span></span>  
  
 <span data-ttu-id="b7513-305">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-305">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-306">ハッシュ コード プロバイダーは、<xref:System.Collections.Hashtable>内のキーにハッシュ コードを与えます。</span><span class="sxs-lookup"><span data-stu-id="b7513-306">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="b7513-307">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-307">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-308">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-308">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-309"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-309">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-310">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-310">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-311">このコンストラクターは `O(n)` 操作であり、`n` は `capacity` パラメーターです。</span><span class="sxs-lookup"><span data-stu-id="b7513-311">This constructor is an `O(n)` operation, where `n` is the `capacity` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-312">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-312">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/CPP/hashtable_ctorintfloat.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/CS/hashtable_ctorintfloat.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/VB/hashtable_ctorintfloat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b7513-313"><paramref name="capacity" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-313"><paramref name="capacity" /> is less than zero.</span></span>  
  
<span data-ttu-id="b7513-314">または</span><span class="sxs-lookup"><span data-stu-id="b7513-314">-or-</span></span> 
 <span data-ttu-id="b7513-315"><paramref name="loadFactor" /> が 0.1 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-315"><paramref name="loadFactor" /> is less than 0.1.</span></span>  
  
<span data-ttu-id="b7513-316">または</span><span class="sxs-lookup"><span data-stu-id="b7513-316">-or-</span></span> 
 <span data-ttu-id="b7513-317"><paramref name="loadFactor" /> が 1.0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b7513-317"><paramref name="loadFactor" /> is greater than 1.0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b7513-318"><paramref name="capacity" /> はオーバーフローを起こしています。</span><span class="sxs-lookup"><span data-stu-id="b7513-318"><paramref name="capacity" /> is causing an overflow.</span></span></exception>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Hashtable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Hashtable(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="b7513-319"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトをシリアル化するために必要な情報を格納している <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-319">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="b7513-320"><see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-320">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Hashtable" />.</span></span></param>
        <summary><span data-ttu-id="b7513-321">指定した <see cref="T:System.Collections.Hashtable" /> オブジェクトと <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトを使用してシリアル化できる、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しい空のインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-321">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class that is serializable using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-322">ハッシュテーブルの容量は、負荷係数に基づいて最適なハッシュテーブルバケット数を計算するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-322">A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.</span></span> <span data-ttu-id="b7513-323">容量は、必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-323">Capacity is automatically increased as required.</span></span>  
  
 <span data-ttu-id="b7513-324">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-324">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-325">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-325">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="b7513-326">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-326">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-327">ハッシュコードプロバイダーは、<xref:System.Collections.Hashtable> オブジェクト内のキーのハッシュコードを省きします。</span><span class="sxs-lookup"><span data-stu-id="b7513-327">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-328">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-328">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-329">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-329">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-330"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-330">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-331">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-331">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-332">このコンストラクターは、`n` が <xref:System.Collections.Hashtable.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-332">This constructor is an `O(n)` operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
 <span data-ttu-id="b7513-333"><xref:System.Collections.Hashtable> の列挙子をシリアル化または逆シリアル化すると、要素が並べ替えられる可能性があるため、<xref:System.Collections.IEnumerator.Reset%2A> メソッドを呼び出さなくても列挙を続行することはできません。</span><span class="sxs-lookup"><span data-stu-id="b7513-333">Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-334"><paramref name="info" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-334"><paramref name="info" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IDictionary d, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, hcp As IHashCodeProvider, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IDictionary ^ d, System::Collections::IHashCodeProvider ^ hcp, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IDictionary * System.Collections.IHashCodeProvider * System.Collections.IComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (d, hcp, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Please use Hashtable(IDictionary, IEqualityComparer) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="hcp" Type="System.Collections.IHashCodeProvider" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b7513-335">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-335">The <see cref="T:System.Collections.IDictionary" /> object to copy to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <param name="hcp"><span data-ttu-id="b7513-336"><see cref="T:System.Collections.IHashCodeProvider" /> 内のすべてのキーにハッシュ コードを提供する <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-336">The <see cref="T:System.Collections.IHashCodeProvider" /> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="b7513-337">または</span><span class="sxs-lookup"><span data-stu-id="b7513-337">-or-</span></span> 
 <span data-ttu-id="b7513-338">各キーの <see langword="null" /> の実装である既定のハッシュ コード プロバイダーを使用する場合は <see cref="M:System.Object.GetHashCode" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-338"><see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="b7513-339">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-339">The <see cref="T:System.Collections.IComparer" /> object to use to determine whether two keys are equal.</span></span>  
  
<span data-ttu-id="b7513-340">または</span><span class="sxs-lookup"><span data-stu-id="b7513-340">-or-</span></span> 
 <span data-ttu-id="b7513-341">各キーの <see langword="null" /> の実装である既定の比較子を使用する場合は <see cref="M:System.Object.Equals(System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-341"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="b7513-342">指定したディクショナリの要素を新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトにコピーすることによって、<see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-342">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable" /> object.</span></span> <span data-ttu-id="b7513-343">新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトは、コピーされた要素数に等しい初期量を備えており、既定のテーブル占有率、および指定したハッシュ コード プロバイダーと比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="b7513-343">The new <see cref="T:System.Collections.Hashtable" /> object has an initial capacity equal to the number of elements copied, and uses the default load factor, and the specified hash code provider and comparer.</span></span> <span data-ttu-id="b7513-344">この API は、互換性のために残されています。</span><span class="sxs-lookup"><span data-stu-id="b7513-344">This API is obsolete.</span></span> <span data-ttu-id="b7513-345">代替については、<see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" /> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b7513-345">For an alternative, see <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-346">初期量は、ソースディクショナリ内の要素の数に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-346">The initial capacity is set to the number of elements in the source dictionary.</span></span> <span data-ttu-id="b7513-347">容量は、負荷係数に基づいて必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-347">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="b7513-348">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-348">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-349">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-349">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="b7513-350">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-350">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-351">ハッシュコードプロバイダーは、<xref:System.Collections.Hashtable> オブジェクト内のキーのハッシュコードを省きします。</span><span class="sxs-lookup"><span data-stu-id="b7513-351">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-352">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-352">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-353">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-353">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-354"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-354">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-355">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-355">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-356">カスタムハッシュコードプロバイダーとカスタム比較子を使用すると、大文字と小文字を区別しない文字列で参照を実行するなどのシナリオが可能になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-356">The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="b7513-357">新しい <xref:System.Collections.Hashtable> の要素は、列挙子が <xref:System.Collections.IDictionary> オブジェクトを反復処理する順序で並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="b7513-357">The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.</span></span>  
  
 <span data-ttu-id="b7513-358">このコンストラクターは `O(n)` 操作で、`n` は `d` パラメーター内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="b7513-358">This constructor is an `O(n)` operation, where `n` is the number of elements in the `d` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-359">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-359">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/CPP/hashtable_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/CS/hashtable_ctordictionary.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/VB/hashtable_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-360"><paramref name="d" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-360"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IHashCodeProvider" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IEqualityComparer equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, float32 loadFactor, class System.Collections.IEqualityComparer equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, loadFactor As Single, equalityComparer As IEqualityComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IDictionary ^ d, float loadFactor, System::Collections::IEqualityComparer ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IDictionary * single * System.Collections.IEqualityComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (d, loadFactor, equalityComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadFactor" Type="System.Single" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="equalityComparer" Type="System.Collections.IEqualityComparer" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b7513-361">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-361">The <see cref="T:System.Collections.IDictionary" /> object to copy to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <param name="loadFactor"><span data-ttu-id="b7513-362">0.1 ～ 1.0 の範囲の値。これに、パフォーマンスが最高になる既定値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="b7513-362">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</span></span> <span data-ttu-id="b7513-363">その結果が、バケット数に対する要素数の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-363">The result is the maximum ratio of elements to buckets.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="b7513-364"><see cref="T:System.Collections.IEqualityComparer" /> で使用するハッシュ コード プロバイダーと比較子を定義する <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-364">The <see cref="T:System.Collections.IEqualityComparer" /> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="b7513-365">または</span><span class="sxs-lookup"><span data-stu-id="b7513-365">-or-</span></span> 
 <span data-ttu-id="b7513-366">既定のハッシュ コード プロバイダーおよび既定の比較子を使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-366"><see langword="null" /> to use the default hash code provider and the default comparer.</span></span> <span data-ttu-id="b7513-367">既定のハッシュ コード プロバイダーは、各キーの <see cref="M:System.Object.GetHashCode" /> の実装です。また、既定の比較子は各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-367">The default hash code provider is each key's implementation of <see cref="M:System.Object.GetHashCode" /> and the default comparer is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="b7513-368">指定したディクショナリの要素を新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトにコピーすることによって、<see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-368">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable" /> object.</span></span> <span data-ttu-id="b7513-369">新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトは、コピーされた要素数に等しい初期量を備えており、指定したテーブル占有率および <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="b7513-369">The new <see cref="T:System.Collections.Hashtable" /> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and <see cref="T:System.Collections.IEqualityComparer" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-370">初期量は、ソースディクショナリ内の要素の数に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-370">The initial capacity is set to the number of elements in the source dictionary.</span></span> <span data-ttu-id="b7513-371">容量は、負荷係数に基づいて必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-371">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="b7513-372">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-372">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-373">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-373">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span> <span data-ttu-id="b7513-374">負荷率が1.0 の場合は、速度とサイズのバランスが最適です。</span><span class="sxs-lookup"><span data-stu-id="b7513-374">A load factor of 1.0 is the best balance between speed and size.</span></span>  
  
 <span data-ttu-id="b7513-375">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-375">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-376"><xref:System.Collections.IEqualityComparer> オブジェクトには、ハッシュコードプロバイダーと比較子の両方が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b7513-376">The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer.</span></span> <span data-ttu-id="b7513-377"><xref:System.Collections.IEqualityComparer> が <xref:System.Collections.Hashtable> コンストラクターで使用されている場合、<xref:System.Collections.Hashtable> オブジェクトのキーとして使用されるオブジェクトは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> および <xref:System.Object.Equals%2A?displayProperty=nameWithType> メソッドをオーバーライドする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-377">If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="b7513-378">ハッシュ コード プロバイダーは、<xref:System.Collections.Hashtable>内のキーにハッシュ コードを与えます。</span><span class="sxs-lookup"><span data-stu-id="b7513-378">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="b7513-379">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-379">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-380">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-380">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-381"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-381">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-382">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-382">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-383"><xref:System.Collections.IEqualityComparer> を使用すると、大文字と小文字を区別しない文字列で参照を実行するなどのシナリオが可能になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-383">The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="b7513-384">新しい <xref:System.Collections.Hashtable> の要素は、列挙子が <xref:System.Collections.IDictionary> オブジェクトを反復処理する順序で並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="b7513-384">The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.</span></span>  
  
 <span data-ttu-id="b7513-385">このコンストラクターは `O(n)` 操作で、`n` は `d` パラメーター内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="b7513-385">This constructor is an `O(n)` operation, where `n` is the number of elements in the `d` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-386">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-386">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/CPP/hashtable_ctordictionaryfloat.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/CS/hashtable_ctordictionaryfloat.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/VB/hashtable_ctordictionaryfloat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-387"><paramref name="d" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-387"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b7513-388"><paramref name="loadFactor" /> が 0.1 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-388"><paramref name="loadFactor" /> is less than 0.1.</span></span>  
  
<span data-ttu-id="b7513-389">または</span><span class="sxs-lookup"><span data-stu-id="b7513-389">-or-</span></span> 
 <span data-ttu-id="b7513-390"><paramref name="loadFactor" /> が 1.0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b7513-390"><paramref name="loadFactor" /> is greater than 1.0.</span></span></exception>
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (int capacity, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, hcp As IHashCodeProvider, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(int capacity, System::Collections::IHashCodeProvider ^ hcp, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : int * System.Collections.IHashCodeProvider * System.Collections.IComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (capacity, hcp, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Please use Hashtable(int, IEqualityComparer) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="hcp" Type="System.Collections.IHashCodeProvider" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="b7513-391"><see cref="T:System.Collections.Hashtable" /> オブジェクトが初期状態で格納できる要素の概数。</span><span class="sxs-lookup"><span data-stu-id="b7513-391">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> object can initially contain.</span></span></param>
        <param name="hcp"><span data-ttu-id="b7513-392"><see cref="T:System.Collections.IHashCodeProvider" /> 内のすべてのキーにハッシュ コードを提供する <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-392">The <see cref="T:System.Collections.IHashCodeProvider" /> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="b7513-393">または</span><span class="sxs-lookup"><span data-stu-id="b7513-393">-or-</span></span> 
 <span data-ttu-id="b7513-394">各キーの <see langword="null" /> の実装である既定のハッシュ コード プロバイダーを使用する場合は <see cref="M:System.Object.GetHashCode" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-394"><see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="b7513-395">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-395">The <see cref="T:System.Collections.IComparer" /> object to use to determine whether two keys are equal.</span></span>  
  
<span data-ttu-id="b7513-396">または</span><span class="sxs-lookup"><span data-stu-id="b7513-396">-or-</span></span> 
 <span data-ttu-id="b7513-397">各キーの <see langword="null" /> の実装である既定の比較子を使用する場合は <see cref="M:System.Object.Equals(System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-397"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="b7513-398">指定した初期量、ハッシュ コード プロバイダー、および比較子と、既定のテーブル占有率を使用して、<see cref="T:System.Collections.Hashtable" /> クラスの新しい空のインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-398">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the specified initial capacity, hash code provider, comparer, and the default load factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-399">初期容量を指定すると、<xref:System.Collections.Hashtable> オブジェクトに要素を追加する際に、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="b7513-399">Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-400">容量は、負荷係数に基づいて必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-400">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="b7513-401">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-401">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-402">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-402">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="b7513-403">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-403">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-404">ハッシュ コード プロバイダーは、<xref:System.Collections.Hashtable>内のキーにハッシュ コードを与えます。</span><span class="sxs-lookup"><span data-stu-id="b7513-404">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="b7513-405">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-405">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-406">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-406">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-407"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-407">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-408">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-408">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-409">カスタムハッシュコードプロバイダーとカスタム比較子を使用すると、大文字と小文字を区別しない文字列で参照を実行するなどのシナリオが可能になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-409">The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="b7513-410">このコンストラクターは `O(n)` 操作であり、`n` は `capacity` パラメーターです。</span><span class="sxs-lookup"><span data-stu-id="b7513-410">This constructor is an `O(n)` operation, where `n` is the `capacity` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-411">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-411">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/CPP/hashtable_ctorint.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/CS/hashtable_ctorint.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/VB/hashtable_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b7513-412"><paramref name="capacity" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-412"><paramref name="capacity" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Collections.IHashCodeProvider" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, float32 loadFactor, class System.Collections.IEqualityComparer equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, loadFactor As Single, equalityComparer As IEqualityComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(int capacity, float loadFactor, System::Collections::IEqualityComparer ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : int * single * System.Collections.IEqualityComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (capacity, loadFactor, equalityComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadFactor" Type="System.Single" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="equalityComparer" Type="System.Collections.IEqualityComparer" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="b7513-413"><see cref="T:System.Collections.Hashtable" /> オブジェクトが初期状態で格納できる要素の概数。</span><span class="sxs-lookup"><span data-stu-id="b7513-413">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> object can initially contain.</span></span></param>
        <param name="loadFactor"><span data-ttu-id="b7513-414">0.1 ～ 1.0 の範囲の値。これに、パフォーマンスが最高になる既定値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="b7513-414">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</span></span> <span data-ttu-id="b7513-415">その結果が、バケット数に対する要素数の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-415">The result is the maximum ratio of elements to buckets.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="b7513-416"><see cref="T:System.Collections.IEqualityComparer" /> で使用するハッシュ コード プロバイダーと比較子を定義する <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-416">The <see cref="T:System.Collections.IEqualityComparer" /> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="b7513-417">または</span><span class="sxs-lookup"><span data-stu-id="b7513-417">-or-</span></span> 
 <span data-ttu-id="b7513-418">既定のハッシュ コード プロバイダーおよび既定の比較子を使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-418"><see langword="null" /> to use the default hash code provider and the default comparer.</span></span> <span data-ttu-id="b7513-419">既定のハッシュ コード プロバイダーは、各キーの <see cref="M:System.Object.GetHashCode" /> の実装です。また、既定の比較子は各キーの <see cref="M:System.Object.Equals(System.Object)" /> の実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-419">The default hash code provider is each key's implementation of <see cref="M:System.Object.GetHashCode" /> and the default comparer is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="b7513-420">指定した初期量、テーブル占有率、および <see cref="T:System.Collections.Hashtable" /> オブジェクトを使用して、<see cref="T:System.Collections.IEqualityComparer" /> クラスの新しい空のインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-420">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the specified initial capacity, load factor, and <see cref="T:System.Collections.IEqualityComparer" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-421">初期容量を指定すると、<xref:System.Collections.Hashtable> オブジェクトに要素を追加する際に、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="b7513-421">Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-422">容量は、負荷係数に基づいて必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-422">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="b7513-423">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-423">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-424">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-424">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span> <span data-ttu-id="b7513-425">負荷率が1.0 の場合は、速度とサイズのバランスが最適です。</span><span class="sxs-lookup"><span data-stu-id="b7513-425">A load factor of 1.0 is the best balance between speed and size.</span></span>  
  
 <span data-ttu-id="b7513-426">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-426">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-427"><xref:System.Collections.IEqualityComparer> オブジェクトには、ハッシュコードプロバイダーと比較子の両方が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b7513-427">The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer.</span></span> <span data-ttu-id="b7513-428"><xref:System.Collections.IEqualityComparer> が <xref:System.Collections.Hashtable> コンストラクターで使用されている場合、<xref:System.Collections.Hashtable> 内でキーとして使用されるオブジェクトは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> および <xref:System.Object.Equals%2A?displayProperty=nameWithType> メソッドをオーバーライドする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-428">If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="b7513-429">ハッシュ コード プロバイダーは、<xref:System.Collections.Hashtable>内のキーにハッシュ コードを与えます。</span><span class="sxs-lookup"><span data-stu-id="b7513-429">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="b7513-430">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-430">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-431">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-431">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-432"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-432">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-433">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-433">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-434"><xref:System.Collections.IEqualityComparer> を使用すると、大文字と小文字を区別しない文字列で参照を実行するなどのシナリオが可能になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-434">The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="b7513-435">このコンストラクターは `O(n)` 操作であり、`n` は `capacity` パラメーターです。</span><span class="sxs-lookup"><span data-stu-id="b7513-435">This constructor is an `O(n)` operation, where `n` is the `capacity` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-436">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-436">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/CPP/hashtable_ctorintfloat.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/CS/hashtable_ctorintfloat.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/VB/hashtable_ctorintfloat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b7513-437"><paramref name="capacity" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-437"><paramref name="capacity" /> is less than zero.</span></span>  
  
<span data-ttu-id="b7513-438">または</span><span class="sxs-lookup"><span data-stu-id="b7513-438">-or-</span></span> 
 <span data-ttu-id="b7513-439"><paramref name="loadFactor" /> が 0.1 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-439"><paramref name="loadFactor" /> is less than 0.1.</span></span>  
  
<span data-ttu-id="b7513-440">または</span><span class="sxs-lookup"><span data-stu-id="b7513-440">-or-</span></span> 
 <span data-ttu-id="b7513-441"><paramref name="loadFactor" /> が 1.0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b7513-441"><paramref name="loadFactor" /> is greater than 1.0.</span></span></exception>
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, float32 loadFactor, class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, loadFactor As Single, hcp As IHashCodeProvider, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IDictionary ^ d, float loadFactor, System::Collections::IHashCodeProvider ^ hcp, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IDictionary * single * System.Collections.IHashCodeProvider * System.Collections.IComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (d, loadFactor, hcp, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Please use Hashtable(IDictionary, float, IEqualityComparer) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="loadFactor" Type="System.Single" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="hcp" Type="System.Collections.IHashCodeProvider" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b7513-442">新しい <see cref="T:System.Collections.IDictionary" /> オブジェクトにコピーする <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-442">The <see cref="T:System.Collections.IDictionary" /> object to copy to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <param name="loadFactor"><span data-ttu-id="b7513-443">0.1 ～ 1.0 の範囲の値。これに、パフォーマンスが最高になる既定値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="b7513-443">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</span></span> <span data-ttu-id="b7513-444">その結果が、バケット数に対する要素数の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-444">The result is the maximum ratio of elements to buckets.</span></span></param>
        <param name="hcp"><span data-ttu-id="b7513-445"><see cref="T:System.Collections.IHashCodeProvider" /> 内のすべてのキーにハッシュ コードを提供する <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-445">The <see cref="T:System.Collections.IHashCodeProvider" /> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="b7513-446">または</span><span class="sxs-lookup"><span data-stu-id="b7513-446">-or-</span></span> 
 <span data-ttu-id="b7513-447">各キーの <see langword="null" /> の実装である既定のハッシュ コード プロバイダーを使用する場合は <see cref="M:System.Object.GetHashCode" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-447"><see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="b7513-448">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-448">The <see cref="T:System.Collections.IComparer" /> object to use to determine whether two keys are equal.</span></span>  
  
<span data-ttu-id="b7513-449">または</span><span class="sxs-lookup"><span data-stu-id="b7513-449">-or-</span></span> 
 <span data-ttu-id="b7513-450">各キーの <see langword="null" /> の実装である既定の比較子を使用する場合は <see cref="M:System.Object.Equals(System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-450"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="b7513-451">指定したディクショナリの要素を新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトにコピーすることによって、<see cref="T:System.Collections.Hashtable" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-451">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable" /> object.</span></span> <span data-ttu-id="b7513-452">新しい <see cref="T:System.Collections.Hashtable" /> オブジェクトは、コピーされた要素数に等しい初期量を備えており、指定したテーブル占有率、ハッシュ コード プロバイダー、および比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="b7513-452">The new <see cref="T:System.Collections.Hashtable" /> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, hash code provider, and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-453">初期量は、ソースディクショナリ内の要素の数に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-453">The initial capacity is set to the number of elements in the source dictionary.</span></span> <span data-ttu-id="b7513-454">容量は、負荷係数に基づいて必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-454">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="b7513-455">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-455">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-456">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-456">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span> <span data-ttu-id="b7513-457">負荷率が1.0 の場合は、速度とサイズのバランスが最適です。</span><span class="sxs-lookup"><span data-stu-id="b7513-457">A load factor of 1.0 is the best balance between speed and size.</span></span>  
  
 <span data-ttu-id="b7513-458">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-458">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-459">ハッシュコードプロバイダーは、<xref:System.Collections.Hashtable> オブジェクト内のキーのハッシュコードを省きします。</span><span class="sxs-lookup"><span data-stu-id="b7513-459">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-460">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-460">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-461">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-461">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-462"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-462">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-463">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-463">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-464">カスタムハッシュコードプロバイダーとカスタム比較子を使用すると、大文字と小文字を区別しない文字列で参照を実行するなどのシナリオが可能になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-464">The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="b7513-465">新しい <xref:System.Collections.Hashtable> の要素は、列挙子が <xref:System.Collections.IDictionary> オブジェクトを反復処理する順序で並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="b7513-465">The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.</span></span>  
  
 <span data-ttu-id="b7513-466">このコンストラクターは `O(n)` 操作で、`n` は `d` パラメーター内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="b7513-466">This constructor is an `O(n)` operation, where `n` is the number of elements in the `d` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-467">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-467">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/CPP/hashtable_ctordictionaryfloat.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/CS/hashtable_ctordictionaryfloat.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/VB/hashtable_ctordictionaryfloat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-468"><paramref name="d" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-468"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b7513-469"><paramref name="loadFactor" /> が 0.1 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-469"><paramref name="loadFactor" /> is less than 0.1.</span></span>  
  
<span data-ttu-id="b7513-470">または</span><span class="sxs-lookup"><span data-stu-id="b7513-470">-or-</span></span> 
 <span data-ttu-id="b7513-471"><paramref name="loadFactor" /> が 1.0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b7513-471"><paramref name="loadFactor" /> is greater than 1.0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, float32 loadFactor, class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, loadFactor As Single, hcp As IHashCodeProvider, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(int capacity, float loadFactor, System::Collections::IHashCodeProvider ^ hcp, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : int * single * System.Collections.IHashCodeProvider * System.Collections.IComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (capacity, loadFactor, hcp, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Please use Hashtable(int, float, IEqualityComparer) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="loadFactor" Type="System.Single" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="hcp" Type="System.Collections.IHashCodeProvider" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="b7513-472"><see cref="T:System.Collections.Hashtable" /> オブジェクトが初期状態で格納できる要素の概数。</span><span class="sxs-lookup"><span data-stu-id="b7513-472">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> object can initially contain.</span></span></param>
        <param name="loadFactor"><span data-ttu-id="b7513-473">0.1 ～ 1.0 の範囲の値。これに、パフォーマンスが最高になる既定値を乗算します。</span><span class="sxs-lookup"><span data-stu-id="b7513-473">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</span></span> <span data-ttu-id="b7513-474">その結果が、バケット数に対する要素数の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-474">The result is the maximum ratio of elements to buckets.</span></span></param>
        <param name="hcp"><span data-ttu-id="b7513-475"><see cref="T:System.Collections.IHashCodeProvider" /> 内のすべてのキーにハッシュ コードを提供する <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-475">The <see cref="T:System.Collections.IHashCodeProvider" /> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="b7513-476">または</span><span class="sxs-lookup"><span data-stu-id="b7513-476">-or-</span></span> 
 <span data-ttu-id="b7513-477">各キーの <see langword="null" /> の実装である既定のハッシュ コード プロバイダーを使用する場合は <see cref="M:System.Object.GetHashCode" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-477"><see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="b7513-478">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-478">The <see cref="T:System.Collections.IComparer" /> object to use to determine whether two keys are equal.</span></span>  
  
<span data-ttu-id="b7513-479">または</span><span class="sxs-lookup"><span data-stu-id="b7513-479">-or-</span></span> 
 <span data-ttu-id="b7513-480">各キーの <see langword="null" /> の実装である既定の比較子を使用する場合は <see cref="M:System.Object.Equals(System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-480"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="b7513-481">指定した初期量、テーブル占有率、ハッシュ コード プロバイダー、および比較子を使用して、<see cref="T:System.Collections.Hashtable" /> クラスの新しい空のインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b7513-481">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the specified initial capacity, load factor, hash code provider, and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-482">初期容量を指定すると、<xref:System.Collections.Hashtable> オブジェクトに要素を追加する際に、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="b7513-482">Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="b7513-483">容量は、負荷係数に基づいて必要に応じて自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-483">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="b7513-484">占有率は、バケットに対する要素の最大比率です。</span><span class="sxs-lookup"><span data-stu-id="b7513-484">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="b7513-485">負荷係数を小さくすると、メモリ使用量が増加しても、参照が高速になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-485">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span> <span data-ttu-id="b7513-486">負荷率が1.0 の場合は、速度とサイズのバランスが最適です。</span><span class="sxs-lookup"><span data-stu-id="b7513-486">A load factor of 1.0 is the best balance between speed and size.</span></span>  
  
 <span data-ttu-id="b7513-487">実際の負荷係数が指定された占有率に達すると、バケット数は、現在のバケット数の2倍を超える最小の素数に自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-487">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="b7513-488">ハッシュ コード プロバイダーは、<xref:System.Collections.Hashtable>内のキーにハッシュ コードを与えます。</span><span class="sxs-lookup"><span data-stu-id="b7513-488">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="b7513-489">既定のハッシュコードプロバイダーは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-489">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-490">比較演算子は、2 つのキーが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-490">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="b7513-491"><xref:System.Collections.Hashtable> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-491">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="b7513-492">既定の比較子は、<xref:System.Object.Equals%2A?displayProperty=nameWithType>のキーの実装です。</span><span class="sxs-lookup"><span data-stu-id="b7513-492">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b7513-493">カスタムハッシュコードプロバイダーとカスタム比較子を使用すると、大文字と小文字を区別しない文字列で参照を実行するなどのシナリオが可能になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-493">The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="b7513-494">このコンストラクターは `O(n)` 操作であり、`n` は `capacity` パラメーターです。</span><span class="sxs-lookup"><span data-stu-id="b7513-494">This constructor is an `O(n)` operation, where `n` is the `capacity` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-495">次のコード例では、異なる <xref:System.Collections.Hashtable> コンストラクターを使用してハッシュテーブルを作成し、それぞれに同じ要素が含まれている場合でも、ハッシュテーブルの動作の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-495">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/CPP/hashtable_ctorintfloat.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/CS/hashtable_ctorintfloat.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/VB/hashtable_ctorintfloat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b7513-496"><paramref name="capacity" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-496"><paramref name="capacity" /> is less than zero.</span></span>  
  
<span data-ttu-id="b7513-497">または</span><span class="sxs-lookup"><span data-stu-id="b7513-497">-or-</span></span> 
 <span data-ttu-id="b7513-498"><paramref name="loadFactor" /> が 0.1 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-498"><paramref name="loadFactor" /> is less than 0.1.</span></span>  
  
<span data-ttu-id="b7513-499">または</span><span class="sxs-lookup"><span data-stu-id="b7513-499">-or-</span></span> 
 <span data-ttu-id="b7513-500"><paramref name="loadFactor" /> が 1.0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b7513-500"><paramref name="loadFactor" /> is greater than 1.0.</span></span></exception>
        <altmember cref="T:System.Collections.IHashCodeProvider" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Add : obj * obj -&gt; unit&#xA;override this.Add : obj * obj -&gt; unit" Usage="hashtable.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b7513-501">追加する要素のキー。</span><span class="sxs-lookup"><span data-stu-id="b7513-501">The key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="b7513-502">追加する要素の値です。</span><span class="sxs-lookup"><span data-stu-id="b7513-502">The value of the element to add.</span></span> <span data-ttu-id="b7513-503">値として <see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="b7513-503">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b7513-504">指定したキーおよび値を持つ要素を <see cref="T:System.Collections.Hashtable" /> に追加します。</span><span class="sxs-lookup"><span data-stu-id="b7513-504">Adds an element with the specified key and value into the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-505">キーを `null`することはできませんが、値にはを指定できます。</span><span class="sxs-lookup"><span data-stu-id="b7513-505">A key cannot be `null`, but a value can be.</span></span>  
  
 <span data-ttu-id="b7513-506">その状態とそのハッシュコード値の間に相関関係がないオブジェクトは、通常、キーとして使用されません。</span><span class="sxs-lookup"><span data-stu-id="b7513-506">An object that has no correlation between its state and its hash code value should typically not be used as the key.</span></span> <span data-ttu-id="b7513-507">たとえば、文字列オブジェクトは、キーとして使用する StringBuilder オブジェクトよりも優れています。</span><span class="sxs-lookup"><span data-stu-id="b7513-507">For example, String objects are better than StringBuilder objects for use as keys.</span></span>  
  
 <span data-ttu-id="b7513-508">また、<xref:System.Collections.Hashtable.Item%2A> プロパティを使用して、<xref:System.Collections.Hashtable>に存在しないキーの値を設定することにより、新しい要素を追加することもできます。たとえば、`myCollection["myNonexistentKey"] = myValue`のようにします。</span><span class="sxs-lookup"><span data-stu-id="b7513-508">You can also use the <xref:System.Collections.Hashtable.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Hashtable>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="b7513-509">ただし、指定したキーが既に <xref:System.Collections.Hashtable>に存在する場合は、<xref:System.Collections.Hashtable.Item%2A> プロパティを設定すると古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="b7513-509">However, if the specified key already exists in the <xref:System.Collections.Hashtable>, setting the <xref:System.Collections.Hashtable.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="b7513-510">これに対し、<xref:System.Collections.Hashtable.Add%2A> メソッドでは、既存の要素は変更されません。</span><span class="sxs-lookup"><span data-stu-id="b7513-510">In contrast, the <xref:System.Collections.Hashtable.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="b7513-511"><xref:System.Collections.Hashtable.Count%2A> が <xref:System.Collections.Hashtable>の容量より小さい場合、このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-511">If <xref:System.Collections.Hashtable.Count%2A> is less than the capacity of the <xref:System.Collections.Hashtable>, this method is an `O(1)` operation.</span></span> <span data-ttu-id="b7513-512">新しい要素を格納するために容量を増やす必要がある場合、このメソッドは `O(n)` 操作になります。 `n` は <xref:System.Collections.Hashtable.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b7513-512">If the capacity needs to be increased to accommodate the new element, this method becomes an `O(n)` operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-513">次の例では、<xref:System.Collections.Hashtable>に要素を追加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-513">The following example shows how to add elements to the <xref:System.Collections.Hashtable>.</span></span>  
  
 [!code-cpp[Classic Hashtable.Add Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.Add Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.Add Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-514"><paramref name="key" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-514"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b7513-515">同じキーを持つ要素が、<see cref="T:System.Collections.Hashtable" /> に既に存在します。</span><span class="sxs-lookup"><span data-stu-id="b7513-515">An element with the same key already exists in the <see cref="T:System.Collections.Hashtable" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b7513-516"><see cref="T:System.Collections.Hashtable" /> は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b7513-516">The <see cref="T:System.Collections.Hashtable" /> is read-only.</span></span>  
  
<span data-ttu-id="b7513-517">または</span><span class="sxs-lookup"><span data-stu-id="b7513-517">-or-</span></span> 
<span data-ttu-id="b7513-518"><see cref="T:System.Collections.Hashtable" /> は固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="b7513-518">The <see cref="T:System.Collections.Hashtable" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.Hashtable.Remove(System.Object)" />
        <altmember cref="P:System.Collections.Hashtable.Item(System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="hashtable.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b7513-519"><see cref="T:System.Collections.Hashtable" /> からすべての要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="b7513-519">Removes all elements from the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-520"><xref:System.Collections.Hashtable.Count%2A> がゼロに設定され、コレクションの要素から他のオブジェクトへの参照も解放されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-520"><xref:System.Collections.Hashtable.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span> <span data-ttu-id="b7513-521">容量は変更されません。</span><span class="sxs-lookup"><span data-stu-id="b7513-521">The capacity remains unchanged.</span></span>  
  
 <span data-ttu-id="b7513-522">このメソッドは、`n` が <xref:System.Collections.Hashtable.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-522">This method is an `O(n)` operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-523">次の例は、<xref:System.Collections.Hashtable>の値をクリアする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b7513-523">The following example shows how to clear the values of the <xref:System.Collections.Hashtable>.</span></span>  
  
 [!code-cpp[Classic Hashtable.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b7513-524"><see cref="T:System.Collections.Hashtable" /> は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b7513-524">The <see cref="T:System.Collections.Hashtable" /> is read-only.</span></span></exception>
        <altmember cref="M:System.Collections.IDictionary.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="hashtable.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b7513-525"><see cref="T:System.Collections.Hashtable" /> の簡易コピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="b7513-525">Creates a shallow copy of the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <returns><span data-ttu-id="b7513-526"><see cref="T:System.Collections.Hashtable" /> の簡易コピー。</span><span class="sxs-lookup"><span data-stu-id="b7513-526">A shallow copy of the <see cref="T:System.Collections.Hashtable" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-527">コレクションの簡易コピーは、参照型であるか値型であるかにかかわらず、コレクションの要素のみをコピーしますが、参照が参照するオブジェクトはコピーしません。</span><span class="sxs-lookup"><span data-stu-id="b7513-527">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</span></span> <span data-ttu-id="b7513-528">新しいコレクション内の参照は、元のコレクション内の参照が指すものと同じオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="b7513-528">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="b7513-529">これに対し、コレクションの詳細コピーでは、要素と、要素によって直接的または間接的に参照されるすべての要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="b7513-529">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="b7513-530"><xref:System.Collections.Hashtable> 複製は、同じ数、同じ容量、同じ <xref:System.Collections.IHashCodeProvider> の実装、および元の <xref:System.Collections.Hashtable>と同じ <xref:System.Collections.IComparer> の実装を持ちます。</span><span class="sxs-lookup"><span data-stu-id="b7513-530">The <xref:System.Collections.Hashtable> clone has the same count, the same capacity, the same <xref:System.Collections.IHashCodeProvider> implementation, and the same <xref:System.Collections.IComparer> implementation as the original <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="b7513-531">このメソッドは、`n` が <xref:System.Collections.Hashtable.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-531">This method is an `O(n)` operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="comparer">
      <MemberSignature Language="C#" Value="protected System.Collections.IComparer comparer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IComparer comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.comparer" />
      <MemberSignature Language="VB.NET" Value="Protected Property comparer As IComparer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IComparer ^ comparer { System::Collections::IComparer ^ get(); void set(System::Collections::IComparer ^ value); };" />
      <MemberSignature Language="F#" Value="member this.comparer : System.Collections.IComparer with get, set" Usage="System.Collections.Hashtable.comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Please use KeyComparer properties.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7513-532"><see cref="T:System.Collections.IComparer" /> で使用する <see cref="T:System.Collections.Hashtable" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7513-532">Gets or sets the <see cref="T:System.Collections.IComparer" /> to use for the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <value><span data-ttu-id="b7513-533"><see cref="T:System.Collections.IComparer" /> で使用する <see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-533">The <see cref="T:System.Collections.IComparer" /> to use for the <see cref="T:System.Collections.Hashtable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-534">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-534">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b7513-535">プロパティには値が設定されますが、ハッシュ テーブルは <see cref="T:System.Collections.IEqualityComparer" /> を使用して作成されています。</span><span class="sxs-lookup"><span data-stu-id="b7513-535">The property is set to a value, but the hash table was created using an <see cref="T:System.Collections.IEqualityComparer" />.</span></span></exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="hashtable.Contains key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b7513-536"><see cref="T:System.Collections.Hashtable" /> 内で検索されるキー。</span><span class="sxs-lookup"><span data-stu-id="b7513-536">The key to locate in the <see cref="T:System.Collections.Hashtable" />.</span></span></param>
        <summary><span data-ttu-id="b7513-537"><see cref="T:System.Collections.Hashtable" /> に特定のキーが格納されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-537">Determines whether the <see cref="T:System.Collections.Hashtable" /> contains a specific key.</span></span></summary>
        <returns><span data-ttu-id="b7513-538">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Hashtable" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-538"><see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-539"><xref:System.Collections.Hashtable.Contains%2A> は、<xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType> を実装します。</span><span class="sxs-lookup"><span data-stu-id="b7513-539"><xref:System.Collections.Hashtable.Contains%2A> implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b7513-540"><xref:System.Collections.Hashtable.ContainsKey%2A>とまったく同じように動作します。</span><span class="sxs-lookup"><span data-stu-id="b7513-540">It behaves exactly as <xref:System.Collections.Hashtable.ContainsKey%2A>.</span></span>  
  
 <span data-ttu-id="b7513-541">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-541">This method is an `O(1)` operation.</span></span>  
  
 <span data-ttu-id="b7513-542">.NET Framework 2.0 以降では、このメソッドは `item` でコレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッドを使用して、項目が存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-542">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="b7513-543">以前のバージョンの .NET Framework では、この決定は、コレクション内のオブジェクトの `item` パラメーターの <xref:System.Object.Equals%2A> メソッドと <xref:System.IComparable.CompareTo%2A> メソッドを使用して行われていました。</span><span class="sxs-lookup"><span data-stu-id="b7513-543">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-544">次の例では、<xref:System.Collections.Hashtable> に特定の要素が含まれているかどうかを確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-544">The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.</span></span>  
  
 [!code-cpp[Classic Hashtable.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-545"><paramref name="key" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-545"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Hashtable.ContainsKey(System.Object)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.ContainsKey(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : obj -&gt; bool&#xA;override this.ContainsKey : obj -&gt; bool" Usage="hashtable.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b7513-546"><see cref="T:System.Collections.Hashtable" /> 内で検索されるキー。</span><span class="sxs-lookup"><span data-stu-id="b7513-546">The key to locate in the <see cref="T:System.Collections.Hashtable" />.</span></span></param>
        <summary><span data-ttu-id="b7513-547"><see cref="T:System.Collections.Hashtable" /> に特定のキーが格納されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-547">Determines whether the <see cref="T:System.Collections.Hashtable" /> contains a specific key.</span></span></summary>
        <returns><span data-ttu-id="b7513-548">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Hashtable" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-548"><see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-549">このメソッドは、<xref:System.Collections.Hashtable.Contains%2A>とまったく同じように動作します。</span><span class="sxs-lookup"><span data-stu-id="b7513-549">This method behaves exactly as <xref:System.Collections.Hashtable.Contains%2A>.</span></span>  
  
 <span data-ttu-id="b7513-550">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-550">This method is an `O(1)` operation.</span></span>  
  
 <span data-ttu-id="b7513-551">.NET Framework 2.0 以降では、このメソッドは `item` でコレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッドを使用して、項目が存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-551">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="b7513-552">以前のバージョンの .NET Framework では、この決定は、コレクション内のオブジェクトの `item` パラメーターの <xref:System.Object.Equals%2A> メソッドと <xref:System.IComparable.CompareTo%2A> メソッドを使用して行われていました。</span><span class="sxs-lookup"><span data-stu-id="b7513-552">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-553">次の例では、<xref:System.Collections.Hashtable> に特定の要素が含まれているかどうかを確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-553">The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.</span></span>  
  
 [!code-cpp[Classic Hashtable.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-554"><paramref name="key" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-554"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Hashtable.Contains(System.Object)" />
        <altmember cref="M:System.Collections.Hashtable.ContainsValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsValue">
      <MemberSignature Language="C#" Value="public virtual bool ContainsValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.ContainsValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member ContainsValue : obj -&gt; bool&#xA;override this.ContainsValue : obj -&gt; bool" Usage="hashtable.ContainsValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b7513-555"><see cref="T:System.Collections.Hashtable" /> 内で検索される値。</span><span class="sxs-lookup"><span data-stu-id="b7513-555">The value to locate in the <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="b7513-556">値として <see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="b7513-556">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b7513-557"><see cref="T:System.Collections.Hashtable" /> に特定の値が格納されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-557">Determines whether the <see cref="T:System.Collections.Hashtable" /> contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="b7513-558">指定した <see langword="true" /> を持つ要素が <see cref="T:System.Collections.Hashtable" /> に含まれている場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-558"><see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> contains an element with the specified <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-559"><xref:System.Collections.Hashtable> の要素の値は、<xref:System.Object.Equals%2A?displayProperty=nameWithType> メソッドを使用して、指定した値と比較されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-559">The values of the elements of the <xref:System.Collections.Hashtable> are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b7513-560">このメソッドは、線形検索を実行します。したがって、このメソッドは、`n` が <xref:System.Collections.Hashtable.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-560">This method performs a linear search; therefore, this method is an `O(n)` operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
 <span data-ttu-id="b7513-561">.NET Framework 2.0 以降では、このメソッドは `item` でコレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッドを使用して、項目が存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b7513-561">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="b7513-562">以前のバージョンの .NET Framework では、この決定は、コレクション内のオブジェクトの `item` パラメーターの <xref:System.Object.Equals%2A> メソッドと <xref:System.IComparable.CompareTo%2A> メソッドを使用して行われていました。</span><span class="sxs-lookup"><span data-stu-id="b7513-562">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-563">次の例では、<xref:System.Collections.Hashtable> に特定の要素が含まれているかどうかを確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-563">The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.</span></span>  
  
 [!code-cpp[Classic Hashtable.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Hashtable.ContainsKey(System.Object)" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="hashtable.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="b7513-564"><see cref="T:System.Array" /> から <see cref="T:System.Collections.DictionaryEntry" /> オブジェクトがコピーされる 1 次元の <see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-564">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="b7513-565"><see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span><span class="sxs-lookup"><span data-stu-id="b7513-565">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="b7513-566">コピーを開始する <paramref name="array" /> の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="b7513-566">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="b7513-567">1 次元の <see cref="T:System.Collections.Hashtable" /> インスタンスの指定したインデックスに <see cref="T:System.Array" /> の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="b7513-567">Copies the <see cref="T:System.Collections.Hashtable" /> elements to a one-dimensional <see cref="T:System.Array" /> instance at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-568">要素は、列挙子が <xref:System.Collections.Hashtable>を反復処理するのと同じ順序で <xref:System.Array> にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="b7513-568">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="b7513-569"><xref:System.Collections.Hashtable>内のキーのみをコピーするには、`Hashtable.Keys.CopyTo`を使用します。</span><span class="sxs-lookup"><span data-stu-id="b7513-569">To copy only the keys in the <xref:System.Collections.Hashtable>, use `Hashtable.Keys.CopyTo`.</span></span>  
  
 <span data-ttu-id="b7513-570"><xref:System.Collections.Hashtable>内の値のみをコピーするには、`Hashtable.Values.CopyTo`を使用します。</span><span class="sxs-lookup"><span data-stu-id="b7513-570">To copy only the values in the <xref:System.Collections.Hashtable>, use `Hashtable.Values.CopyTo`.</span></span>  
  
 <span data-ttu-id="b7513-571">このメソッドは、`n` が <xref:System.Collections.Hashtable.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-571">This method is an `O(n)` operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-572">次の例では、<xref:System.Collections.Hashtable> 内のキーまたは値のリストを1次元 <xref:System.Array>にコピーする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-572">The following example shows how to copy the list of keys or the list of values in a <xref:System.Collections.Hashtable> into a one-dimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Hashtable.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-573"><paramref name="array" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-573"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b7513-574"><paramref name="arrayIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b7513-574"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b7513-575"><paramref name="array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="b7513-575"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="b7513-576">または</span><span class="sxs-lookup"><span data-stu-id="b7513-576">-or-</span></span> 
<span data-ttu-id="b7513-577">コピー元の <see cref="T:System.Collections.Hashtable" /> の要素数が、コピー先 <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの使用可能領域を超えています。</span><span class="sxs-lookup"><span data-stu-id="b7513-577">The number of elements in the source <see cref="T:System.Collections.Hashtable" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="b7513-578">コピー元の <see cref="T:System.Collections.Hashtable" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span><span class="sxs-lookup"><span data-stu-id="b7513-578">The type of the source <see cref="T:System.Collections.Hashtable" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.Hashtable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Hashtable.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7513-579"><see cref="T:System.Collections.Hashtable" /> に格納されているキー/値ペアの数を取得します。</span><span class="sxs-lookup"><span data-stu-id="b7513-579">Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <value><span data-ttu-id="b7513-580"><see cref="T:System.Collections.Hashtable" /> に格納されているキー/値ペアの数。</span><span class="sxs-lookup"><span data-stu-id="b7513-580">The number of key/value pairs contained in the <see cref="T:System.Collections.Hashtable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-581">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-581">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualityComparer">
      <MemberSignature Language="C#" Value="protected System.Collections.IEqualityComparer EqualityComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEqualityComparer EqualityComparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.EqualityComparer" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property EqualityComparer As IEqualityComparer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IEqualityComparer ^ EqualityComparer { System::Collections::IEqualityComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EqualityComparer : System.Collections.IEqualityComparer" Usage="System.Collections.Hashtable.EqualityComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEqualityComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7513-582"><see cref="T:System.Collections.IEqualityComparer" /> に使用する <see cref="T:System.Collections.Hashtable" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="b7513-582">Gets the <see cref="T:System.Collections.IEqualityComparer" /> to use for the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <value><span data-ttu-id="b7513-583"><see cref="T:System.Collections.IEqualityComparer" /> で使用する <see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-583">The <see cref="T:System.Collections.IEqualityComparer" /> to use for the <see cref="T:System.Collections.Hashtable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-584"><xref:System.Collections.IEqualityComparer> には、比較子とハッシュコードプロバイダーの両方が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b7513-584">The <xref:System.Collections.IEqualityComparer> includes both the comparer and the hash code provider.</span></span> <span data-ttu-id="b7513-585"><xref:System.Collections.IEqualityComparer> が <xref:System.Collections.Hashtable> コンストラクターで使用されている場合、<xref:System.Collections.Hashtable> 内でキーとして使用されるオブジェクトは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> および <xref:System.Object.Equals%2A?displayProperty=nameWithType> メソッドをオーバーライドする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-585">If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="b7513-586">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-586">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b7513-587">プロパティには値が設定されますが、ハッシュ テーブルは <see cref="T:System.Collections.IHashCodeProvider" /> および <see cref="T:System.Collections.IComparer" /> を使用して作成されています。</span><span class="sxs-lookup"><span data-stu-id="b7513-587">The property is set to a value, but the hash table was created using an <see cref="T:System.Collections.IHashCodeProvider" /> and an <see cref="T:System.Collections.IComparer" />.</span></span></exception>
        <altmember cref="T:System.Collections.Comparer" />
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="hashtable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b7513-588"><see cref="T:System.Collections.IDictionaryEnumerator" /> を反復処理する <see cref="T:System.Collections.Hashtable" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-588">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that iterates through the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <returns><span data-ttu-id="b7513-589"><see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.Hashtable" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-589">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.Hashtable" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-590">[Visual Basic、 C#]</span><span class="sxs-lookup"><span data-stu-id="b7513-590">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="b7513-591">C# 言語の `foreach` ステートメント (Visual Basic の場合は `for each`) を使用することで列挙子の複雑さを回避できます。</span><span class="sxs-lookup"><span data-stu-id="b7513-591">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="b7513-592">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b7513-592">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="b7513-593">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="b7513-593">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="b7513-594">最初、列挙子はコレクションの先頭の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="b7513-594">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="b7513-595"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-595"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="b7513-596">この位置では、<xref:System.Collections.IEnumerator.Current%2A> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="b7513-596">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="b7513-597">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-597">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="b7513-598"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-598"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="b7513-599"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="b7513-599"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="b7513-600"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-600">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="b7513-601">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-601">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="b7513-602"><xref:System.Collections.IEnumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.IEnumerator.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="b7513-602">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="b7513-603"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b7513-603">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="b7513-604">列挙子は、コレクションが変更されない限り有効です。</span><span class="sxs-lookup"><span data-stu-id="b7513-604">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="b7513-605">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-605">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="b7513-606">列挙子には、コレクションへの排他アクセスがありません。したがって、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-606">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</span></span>  <span data-ttu-id="b7513-607">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="b7513-607">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="b7513-608">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-608">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="b7513-609">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-609">This method is an `O(1)` operation.</span></span>  
  
 <span data-ttu-id="b7513-610"><xref:System.Collections.Hashtable> の列挙子をシリアル化または逆シリアル化すると、要素が並べ替えられる可能性があるため、<xref:System.Collections.IEnumerator.Reset%2A> メソッドを呼び出さなくても列挙を続行することはできません。</span><span class="sxs-lookup"><span data-stu-id="b7513-610">Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-611">次の例では、<xref:System.Collections.Hashtable.GetEnumerator%2A> と `foreach` の使用を比較して <xref:System.Collections.Hashtable>の内容を列挙しています。</span><span class="sxs-lookup"><span data-stu-id="b7513-611">The following example compares the use of <xref:System.Collections.Hashtable.GetEnumerator%2A> and `foreach` to enumerate the contents of a <xref:System.Collections.Hashtable>.</span></span>  
  
 [!code-cpp[Classic Hashtable Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Hashtable Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable Example/CS/source2.cs#2)]
 [!code-vb[Classic Hashtable Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable Example/VB/source2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetHash">
      <MemberSignature Language="C#" Value="protected virtual int GetHash (object key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 GetHash(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.GetHash(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetHash (key As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int GetHash(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member GetHash : obj -&gt; int&#xA;override this.GetHash : obj -&gt; int" Usage="hashtable.GetHash key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b7513-612">ハッシュ コードが返される対象の <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-612">The <see cref="T:System.Object" /> for which a hash code is to be returned.</span></span></param>
        <summary><span data-ttu-id="b7513-613">指定したキーのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-613">Returns the hash code for the specified key.</span></span></summary>
        <returns><span data-ttu-id="b7513-614"><paramref name="key" /> のハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="b7513-614">The hash code for <paramref name="key" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-615">ハッシュテーブルが特定の <xref:System.Collections.IHashCodeProvider> 実装で作成されている場合、このメソッドはそのハッシュコードプロバイダーを使用します。それ以外の場合は、`key`の <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="b7513-615">If the hash table was created with a specific <xref:System.Collections.IHashCodeProvider> implementation, this method uses that hash code provider; otherwise, it uses the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> implementation of `key`.</span></span>  
  
 <span data-ttu-id="b7513-616">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-616">This method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="b7513-617"><paramref name="key" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-617"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Collections.IHashCodeProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="hashtable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="b7513-618"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-618">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Hashtable" />.</span></span></param>
        <param name="context"><span data-ttu-id="b7513-619"><see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Collections.Hashtable" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-619">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Hashtable" />.</span></span></param>
        <summary><span data-ttu-id="b7513-620"><see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Hashtable" /> をシリアル化するために必要なデータを返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-620">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-621">このメソッドは、`n` が <xref:System.Collections.Hashtable.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-621">This method is an `O(n)` operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-622"><paramref name="info" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-622"><paramref name="info" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b7513-623">コレクションが変更されました。</span><span class="sxs-lookup"><span data-stu-id="b7513-623">The collection was modified.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="b7513-624">直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="b7513-624">requires full trust for the immediate caller.</span></span> <span data-ttu-id="b7513-625">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="b7513-625">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="hcp">
      <MemberSignature Language="C#" Value="protected System.Collections.IHashCodeProvider hcp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IHashCodeProvider hcp" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.hcp" />
      <MemberSignature Language="VB.NET" Value="Protected Property hcp As IHashCodeProvider" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IHashCodeProvider ^ hcp { System::Collections::IHashCodeProvider ^ get(); void set(System::Collections::IHashCodeProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.hcp : System.Collections.IHashCodeProvider with get, set" Usage="System.Collections.Hashtable.hcp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Obsolete("Please use EqualityComparer property.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IHashCodeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7513-626">ハッシュ コードを提供できるオブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7513-626">Gets or sets the object that can dispense hash codes.</span></span></summary>
        <value><span data-ttu-id="b7513-627">ハッシュ コードを提供できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-627">The object that can dispense hash codes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-628">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-628">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b7513-629">プロパティには値が設定されますが、ハッシュ テーブルは <see cref="T:System.Collections.IEqualityComparer" /> を使用して作成されています。</span><span class="sxs-lookup"><span data-stu-id="b7513-629">The property is set to a value, but the hash table was created using an <see cref="T:System.Collections.IEqualityComparer" />.</span></span></exception>
        <altmember cref="T:System.Collections.IHashCodeProvider" />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="System.Collections.Hashtable.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7513-630"><see cref="T:System.Collections.Hashtable" /> が固定サイズかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b7513-630">Gets a value indicating whether the <see cref="T:System.Collections.Hashtable" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="b7513-631"><see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.Hashtable" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-631"><see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> has a fixed size; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b7513-632">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-632">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-633">固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。</span><span class="sxs-lookup"><span data-stu-id="b7513-633">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="b7513-634">固定サイズのコレクションは、要素の追加と削除を防ぐラッパーを持つ単純なコレクションです。したがって、要素の追加や削除など、基になるコレクションに変更が加えられた場合、固定サイズのコレクションにはこれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-634">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="b7513-635">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-635">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Collections.Hashtable.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7513-636"><see cref="T:System.Collections.Hashtable" /> が読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b7513-636">Gets a value indicating whether the <see cref="T:System.Collections.Hashtable" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="b7513-637"><see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Hashtable" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-637"><see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> is read-only; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b7513-638">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-638">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-639">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</span><span class="sxs-lookup"><span data-stu-id="b7513-639">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="b7513-640">読み取り専用のコレクションは、単純にコレクションを変更できないようにするラッパーを含むコレクションです。したがって、基になるコレクションに変更が加えられた場合、読み取り専用コレクションにはこれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-640">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="b7513-641">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-641">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.Hashtable.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7513-642"><see cref="T:System.Collections.Hashtable" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b7513-642">Gets a value indicating whether access to the <see cref="T:System.Collections.Hashtable" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="b7513-643"><see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.Hashtable" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-643"><see langword="true" /> if access to the <see cref="T:System.Collections.Hashtable" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b7513-644">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-644">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-645"><xref:System.Collections.Hashtable> は、1つのライターと複数のリーダーを同時にサポートできます。</span><span class="sxs-lookup"><span data-stu-id="b7513-645">A <xref:System.Collections.Hashtable> can support one writer and multiple readers concurrently.</span></span> <span data-ttu-id="b7513-646">複数のライターをサポートするには、<xref:System.Collections.Hashtable.Synchronized%2A> メソッドによって返されるラッパーを使用してすべての操作を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-646">To support multiple writers, all operations must be done through the wrapper returned by the <xref:System.Collections.Hashtable.Synchronized%2A> method.</span></span>  
  
 <span data-ttu-id="b7513-647">コレクションの列挙は、本質的にスレッド セーフな手続きではありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-647">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="b7513-648">コレクションが同期されていても、他のスレッドがコレクションを変更する場合があり、このときは列挙子から例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b7513-648">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="b7513-649">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="b7513-649">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="b7513-650">次のコード例は、列挙体全体で <xref:System.Collections.Hashtable.SyncRoot%2A> を使用してコレクションをロックする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b7513-650">The following code example shows how to lock the collection using the <xref:System.Collections.Hashtable.SyncRoot%2A> during the entire enumeration:</span></span>  
  
 [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CS/remarks.cs#2)]
 [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/VB/remarks.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="b7513-651">次の例では、<xref:System.Collections.Hashtable>を同期し、<xref:System.Collections.Hashtable> が同期されているかどうかを判断し、同期 <xref:System.Collections.Hashtable>を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-651">The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.</span></span>  
  
 [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" />
        <altmember cref="P:System.Collections.Hashtable.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Collections.Hashtable.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b7513-652">値を取得または設定する対象のキー。</span><span class="sxs-lookup"><span data-stu-id="b7513-652">The key whose value to get or set.</span></span></param>
        <summary><span data-ttu-id="b7513-653">指定されたキーに関連付けられた値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b7513-653">Gets or sets the value associated with the specified key.</span></span></summary>
        <value><span data-ttu-id="b7513-654">指定されたキーに関連付けられている値。</span><span class="sxs-lookup"><span data-stu-id="b7513-654">The value associated with the specified key.</span></span> <span data-ttu-id="b7513-655">指定したキーが見つからない場合、そのキーを取得しようとした場合は <see langword="null" /> が返され、そのキーを設定しようとした場合は、指定したキーを使用して新しい要素が作成されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-655">If the specified key is not found, attempting to get it returns <see langword="null" />, and attempting to set it creates a new element using the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-656">このプロパティでは、`myCollection[key]` という構文を使用して、コレクション内の特定の要素にアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="b7513-656">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="b7513-657">また、<xref:System.Collections.Hashtable.Item%2A> プロパティを使用して、<xref:System.Collections.Hashtable>に存在しないキーの値を設定することにより、新しい要素を追加することもできます。たとえば、`myCollection["myNonexistentKey"] = myValue`のようにします。</span><span class="sxs-lookup"><span data-stu-id="b7513-657">You can also use the <xref:System.Collections.Hashtable.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Hashtable>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="b7513-658">ただし、指定したキーが既に <xref:System.Collections.Hashtable>に存在する場合は、<xref:System.Collections.Hashtable.Item%2A> プロパティを設定すると古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="b7513-658">However, if the specified key already exists in the <xref:System.Collections.Hashtable>, setting the <xref:System.Collections.Hashtable.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="b7513-659">これに対し、<xref:System.Collections.Hashtable.Add%2A> メソッドでは、既存の要素は変更されません。</span><span class="sxs-lookup"><span data-stu-id="b7513-659">In contrast, the <xref:System.Collections.Hashtable.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="b7513-660">キーを `null`することはできませんが、値にはを指定できます。</span><span class="sxs-lookup"><span data-stu-id="b7513-660">A key cannot be `null`, but a value can be.</span></span> <span data-ttu-id="b7513-661">指定されたキーが見つからなかったために返される `null` と、指定されたキーの値が `null`ために返される `null` を区別するには、<xref:System.Collections.Hashtable.Contains%2A> メソッドまたは <xref:System.Collections.Hashtable.ContainsKey%2A> メソッドを使用して、キーがリストに存在するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="b7513-661">To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Hashtable.Contains%2A> method or the <xref:System.Collections.Hashtable.ContainsKey%2A> method to determine if the key exists in the list.</span></span>  
  
 <span data-ttu-id="b7513-662">このプロパティの値の取得は `O(1)` 操作です。プロパティの設定は、`O(1)` 操作でもあります。</span><span class="sxs-lookup"><span data-stu-id="b7513-662">Retrieving the value of this property is an `O(1)` operation; setting the property is also an `O(1)` operation.</span></span>  
  
 <span data-ttu-id="b7513-663">このC#言語では、<xref:System.Collections.IList.Item%2A> プロパティを実装する代わりに、 [`this`](~/docs/csharp/language-reference/keywords/this.md)キーワードを使用してインデクサーを定義します。</span><span class="sxs-lookup"><span data-stu-id="b7513-663">The C# language uses the [`this`](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.IList.Item%2A> property.</span></span> <span data-ttu-id="b7513-664">Visual Basic は、<xref:System.Collections.Hashtable.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="b7513-664">Visual Basic implements <xref:System.Collections.Hashtable.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-665"><paramref name="key" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-665"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b7513-666">このプロパティが設定されていますが、<see cref="T:System.Collections.Hashtable" /> が読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b7513-666">The property is set and the <see cref="T:System.Collections.Hashtable" /> is read-only.</span></span>  
  
<span data-ttu-id="b7513-667">または</span><span class="sxs-lookup"><span data-stu-id="b7513-667">-or-</span></span> 
<span data-ttu-id="b7513-668">プロパティが設定済みで、コレクション内に <paramref name="key" /> が存在せず、<see cref="T:System.Collections.Hashtable" /> が固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="b7513-668">The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.Hashtable" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.Hashtable.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="KeyEquals">
      <MemberSignature Language="C#" Value="protected virtual bool KeyEquals (object item, object key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool KeyEquals(object item, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function KeyEquals (item As Object, key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool KeyEquals(System::Object ^ item, System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member KeyEquals : obj * obj -&gt; bool&#xA;override this.KeyEquals : obj * obj -&gt; bool" Usage="hashtable.KeyEquals (item, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="b7513-669"><see cref="T:System.Object" /> と比較する <paramref name="key" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-669">The <see cref="T:System.Object" /> to compare with <paramref name="key" />.</span></span></param>
        <param name="key"><span data-ttu-id="b7513-670"><see cref="T:System.Collections.Hashtable" /> と比較する、<paramref name="item" /> 内のキー。</span><span class="sxs-lookup"><span data-stu-id="b7513-670">The key in the <see cref="T:System.Collections.Hashtable" /> to compare with <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="b7513-671">特定の <see cref="T:System.Object" /> を <see cref="T:System.Collections.Hashtable" /> 内の特定のキーと比較します。</span><span class="sxs-lookup"><span data-stu-id="b7513-671">Compares a specific <see cref="T:System.Object" /> with a specific key in the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <returns><span data-ttu-id="b7513-672"><see langword="true" /> と <paramref name="item" /> が等しい場合は <paramref name="key" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-672"><see langword="true" /> if <paramref name="item" /> and <paramref name="key" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-673">ハッシュテーブルが特定の <xref:System.Collections.IComparer> 実装で作成されている場合、このメソッドはその比較子を使用します。つまり、<xref:System.Collections.IComparer.Compare%2A> (`item`、`key`) です。</span><span class="sxs-lookup"><span data-stu-id="b7513-673">If the hash table was created with a specific <xref:System.Collections.IComparer> implementation, this method uses that comparer; that is, <xref:System.Collections.IComparer.Compare%2A> (`item`, `key`).</span></span> <span data-ttu-id="b7513-674">それ以外の場合は、`item.Equals(key)`を使用します。</span><span class="sxs-lookup"><span data-stu-id="b7513-674">Otherwise, it uses `item.Equals(key)`.</span></span>  
  
 <span data-ttu-id="b7513-675">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-675">This method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-676"><paramref name="item" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-676"><paramref name="item" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b7513-677">または</span><span class="sxs-lookup"><span data-stu-id="b7513-677">-or-</span></span> 
 <span data-ttu-id="b7513-678"><paramref name="key" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-678"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.Keys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.ICollection" Usage="System.Collections.Hashtable.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7513-679"><see cref="T:System.Collections.ICollection" /> 内のキーを格納している <see cref="T:System.Collections.Hashtable" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="b7513-679">Gets an <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <value><span data-ttu-id="b7513-680"><see cref="T:System.Collections.ICollection" /> 内のキーを格納している <see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-680">An <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Hashtable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-681"><xref:System.Collections.ICollection> 内のキーの順序は指定されていませんが、<xref:System.Collections.Hashtable.Values%2A> メソッドによって返される <xref:System.Collections.ICollection> 内の関連付けられた値と同じ順序になります。</span><span class="sxs-lookup"><span data-stu-id="b7513-681">The order of the keys in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Hashtable.Values%2A> method.</span></span>  
  
 <span data-ttu-id="b7513-682">返された <xref:System.Collections.ICollection> が静的コピーではありません。代わりに、<xref:System.Collections.ICollection> によって元の <xref:System.Collections.Hashtable>のキーが参照されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-682">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="b7513-683">したがって、<xref:System.Collections.Hashtable> への変更は、引き続き <xref:System.Collections.ICollection>に反映されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-683">Therefore, changes to the <xref:System.Collections.Hashtable> continue to be reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="b7513-684">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-684">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Hashtable.Values" />
      </Docs>
    </Member>
    <Member MemberName="OnDeserialization">
      <MemberSignature Language="C#" Value="public virtual void OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDeserialization (sender As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDeserialization(System::Object ^ sender);" />
      <MemberSignature Language="F#" Value="abstract member OnDeserialization : obj -&gt; unit&#xA;override this.OnDeserialization : obj -&gt; unit" Usage="hashtable.OnDeserialization sender" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="b7513-685">逆シリアル化イベントのソース。</span><span class="sxs-lookup"><span data-stu-id="b7513-685">The source of the deserialization event.</span></span></param>
        <summary><span data-ttu-id="b7513-686"><see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="b7513-686">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-687">このメソッドは、`n` が <xref:System.Collections.Hashtable.Count%2A>`O(n)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-687">This method is an `O(n)` operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
 <span data-ttu-id="b7513-688"><xref:System.Collections.Hashtable> の列挙子をシリアル化または逆シリアル化すると、要素が並べ替えられる可能性があるため、<xref:System.Collections.IEnumerator.Reset%2A> メソッドを呼び出さなくても列挙を続行することはできません。</span><span class="sxs-lookup"><span data-stu-id="b7513-688">Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><span data-ttu-id="b7513-689">現在の <see cref="T:System.Runtime.Serialization.SerializationInfo" /> と関連付けられている <see cref="T:System.Collections.Hashtable" /> オブジェクトが無効です。</span><span class="sxs-lookup"><span data-stu-id="b7513-689">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object associated with the current <see cref="T:System.Collections.Hashtable" /> is invalid.</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (key As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit&#xA;override this.Remove : obj -&gt; unit" Usage="hashtable.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="b7513-690">削除する要素のキー。</span><span class="sxs-lookup"><span data-stu-id="b7513-690">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="b7513-691">指定したキーを持つ要素を <see cref="T:System.Collections.Hashtable" /> から削除します。</span><span class="sxs-lookup"><span data-stu-id="b7513-691">Removes the element with the specified key from the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-692">指定したキーを持つ要素が <xref:System.Collections.Hashtable> に含まれていない場合、<xref:System.Collections.Hashtable> は変更されません。</span><span class="sxs-lookup"><span data-stu-id="b7513-692">If the <xref:System.Collections.Hashtable> does not contain an element with the specified key, the <xref:System.Collections.Hashtable> remains unchanged.</span></span> <span data-ttu-id="b7513-693">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-693">No exception is thrown.</span></span>  
  
 <span data-ttu-id="b7513-694">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-694">This method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-695">次の例は、<xref:System.Collections.Hashtable>から要素を削除する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b7513-695">The following example shows how to remove elements from the <xref:System.Collections.Hashtable>.</span></span>  
  
 [!code-cpp[Classic Hashtable.Remove Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.Remove Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.Remove Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.Remove Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.Remove Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.Remove Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-696"><paramref name="key" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-696"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b7513-697"><see cref="T:System.Collections.Hashtable" /> は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b7513-697">The <see cref="T:System.Collections.Hashtable" /> is read-only.</span></span>  
  
<span data-ttu-id="b7513-698">または</span><span class="sxs-lookup"><span data-stu-id="b7513-698">-or-</span></span> 
<span data-ttu-id="b7513-699"><see cref="T:System.Collections.Hashtable" /> は固定サイズです。</span><span class="sxs-lookup"><span data-stu-id="b7513-699">The <see cref="T:System.Collections.Hashtable" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.Hashtable.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.Hashtable Synchronized (System.Collections.Hashtable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Hashtable Synchronized(class System.Collections.Hashtable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (table As Hashtable) As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Hashtable ^ Synchronized(System::Collections::Hashtable ^ table);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Collections.Hashtable -&gt; System.Collections.Hashtable" Usage="System.Collections.Hashtable.Synchronized table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Collections.Hashtable" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="b7513-700">同期する <see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-700">The <see cref="T:System.Collections.Hashtable" /> to synchronize.</span></span></param>
        <summary><span data-ttu-id="b7513-701"><see cref="T:System.Collections.Hashtable" /> 用の同期された (スレッド セーフな) ラッパーを返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-701">Returns a synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <returns><span data-ttu-id="b7513-702"><see cref="T:System.Collections.Hashtable" /> 用の同期された (スレッド セーフな) ラッパー。</span><span class="sxs-lookup"><span data-stu-id="b7513-702">A synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.Hashtable" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-703"><xref:System.Collections.Hashtable.Synchronized%2A> メソッドは、複数のリーダーとライターのスレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="b7513-703">The <xref:System.Collections.Hashtable.Synchronized%2A> method is thread safe for multiple readers and writers.</span></span> <span data-ttu-id="b7513-704">さらに、同期されたラッパーは、一度に1つのライター書き込みだけを行うことを保証します。</span><span class="sxs-lookup"><span data-stu-id="b7513-704">Furthermore, the synchronized wrapper ensures that there is only one writer writing at a time.</span></span>  
  
 <span data-ttu-id="b7513-705">コレクションの列挙処理は、本質的にスレッドセーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-705">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="b7513-706">コレクションが同期されていても、他のスレッドがコレクションを変更する場合があり、このときは列挙子から例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b7513-706">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="b7513-707">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="b7513-707">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="b7513-708">次のコード例は、列挙体全体で <xref:System.Collections.Hashtable.SyncRoot%2A> を使用してコレクションをロックする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b7513-708">The following code example shows how to lock the collection using the <xref:System.Collections.Hashtable.SyncRoot%2A> during the entire enumeration:</span></span>  
  
 [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CS/remarks.cs#2)]
 [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/VB/remarks.vb#2)]  
  
 <span data-ttu-id="b7513-709">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-709">This method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7513-710">次の例では、<xref:System.Collections.Hashtable>を同期し、<xref:System.Collections.Hashtable> が同期されているかどうかを判断し、同期 <xref:System.Collections.Hashtable>を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b7513-710">The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.</span></span>  
  
 [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b7513-711"><paramref name="table" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b7513-711"><paramref name="table" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Collections.Hashtable.IsSynchronized" />
        <altmember cref="P:System.Collections.Hashtable.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.Hashtable.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7513-712"><see cref="T:System.Collections.Hashtable" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b7513-712">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <value><span data-ttu-id="b7513-713"><see cref="T:System.Collections.Hashtable" /> へのアクセスを同期するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b7513-713">An object that can be used to synchronize access to the <see cref="T:System.Collections.Hashtable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-714">同期されたバージョンの <xref:System.Collections.Hashtable>を作成するには、<xref:System.Collections.Hashtable.Synchronized%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b7513-714">To create a synchronized version of the <xref:System.Collections.Hashtable>, use the <xref:System.Collections.Hashtable.Synchronized%2A> method.</span></span> <span data-ttu-id="b7513-715">ただし、派生クラスは、<xref:System.Collections.Hashtable.SyncRoot%2A> プロパティを使用して、独自に同期されたバージョンの <xref:System.Collections.Hashtable> を提供できます。</span><span class="sxs-lookup"><span data-stu-id="b7513-715">However, derived classes can provide their own synchronized version of the <xref:System.Collections.Hashtable> using the <xref:System.Collections.Hashtable.SyncRoot%2A> property.</span></span> <span data-ttu-id="b7513-716">同期コードは、<xref:System.Collections.Hashtable> 上で直接ではなく、<xref:System.Collections.Hashtable>の <xref:System.Collections.Hashtable.SyncRoot%2A> に対して操作を実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-716">The synchronizing code must perform operations on the <xref:System.Collections.Hashtable.SyncRoot%2A> of the <xref:System.Collections.Hashtable>, not directly on the <xref:System.Collections.Hashtable> .</span></span> <span data-ttu-id="b7513-717">こうすることにより、他のオブジェクトから派生したコレクションを適切に操作することができます。</span><span class="sxs-lookup"><span data-stu-id="b7513-717">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="b7513-718">具体的には、<xref:System.Collections.Hashtable> オブジェクトを同時に変更している可能性のある他のスレッドとの適切な同期を維持します。</span><span class="sxs-lookup"><span data-stu-id="b7513-718">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Hashtable> object.</span></span>  
  
 <span data-ttu-id="b7513-719">コレクションの列挙は、本質的にスレッド セーフな手続きではありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-719">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="b7513-720">コレクションが同期されていても、他のスレッドがコレクションを変更する場合があり、このときは列挙子から例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b7513-720">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="b7513-721">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="b7513-721">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="b7513-722">次のコード例は、列挙体全体で <xref:System.Collections.Hashtable.SyncRoot%2A> を使用してコレクションをロックする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b7513-722">The following code example shows how to lock the collection using the <xref:System.Collections.Hashtable.SyncRoot%2A> during the entire enumeration:</span></span>  
  
 [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CS/remarks.cs#2)]
 [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/VB/remarks.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Hashtable.IsSynchronized" />
        <altmember cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b7513-723">コレクションを繰り返し処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-723">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="b7513-724">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-724">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-725">[Visual Basic、 C#]</span><span class="sxs-lookup"><span data-stu-id="b7513-725">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="b7513-726">C# 言語の `foreach` ステートメント (Visual Basic の場合は `for each`) を使用することで列挙子の複雑さを回避できます。</span><span class="sxs-lookup"><span data-stu-id="b7513-726">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="b7513-727">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b7513-727">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="b7513-728">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="b7513-728">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="b7513-729">最初、列挙子はコレクションの先頭の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="b7513-729">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="b7513-730"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-730"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="b7513-731">この位置で <xref:System.Collections.IEnumerator.Current%2A> を呼び出すと、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b7513-731">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="b7513-732">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="b7513-732">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="b7513-733"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-733"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="b7513-734"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="b7513-734"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="b7513-735"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-735">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="b7513-736">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-736">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="b7513-737"><xref:System.Collections.IEnumerator.MoveNext%2A> の最後の呼び出しが `false`返された場合、<xref:System.Collections.IEnumerator.Current%2A> を呼び出すと例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b7513-737">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="b7513-738"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b7513-738">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="b7513-739">列挙子は、コレクションが変更されない限り有効です。</span><span class="sxs-lookup"><span data-stu-id="b7513-739">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="b7513-740">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子は無効になり、次に <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b7513-740">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator can be invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="b7513-741">コレクションが <xref:System.Collections.IEnumerator.MoveNext%2A> と <xref:System.Collections.IEnumerator.Current%2A>間で変更された場合、列挙子が既に無効になっていても、<xref:System.Collections.IEnumerator.Current%2A> は、設定されている要素を返します。</span><span class="sxs-lookup"><span data-stu-id="b7513-741">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="b7513-742">列挙子には、コレクションへの排他アクセスがありません。したがって、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="b7513-742">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="b7513-743">コレクションが同期されていても、他のスレッドがコレクションを変更する場合があり、このときは列挙子から例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b7513-743">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="b7513-744">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="b7513-744">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="b7513-745">このメソッドは `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-745">This method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.Values" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Values As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.ICollection" Usage="System.Collections.Hashtable.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7513-746"><see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.Hashtable" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="b7513-746">Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <value><span data-ttu-id="b7513-747"><see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.Hashtable" />。</span><span class="sxs-lookup"><span data-stu-id="b7513-747">An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Hashtable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7513-748"><xref:System.Collections.ICollection> 内の値の順序は指定されていませんが、<xref:System.Collections.Hashtable.Keys%2A> メソッドによって返される <xref:System.Collections.ICollection> 内の関連付けられているキーと同じ順序です。</span><span class="sxs-lookup"><span data-stu-id="b7513-748">The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Hashtable.Keys%2A> method.</span></span>  
  
 <span data-ttu-id="b7513-749">返された <xref:System.Collections.ICollection> が静的コピーではありません。代わりに、<xref:System.Collections.ICollection> は元の <xref:System.Collections.Hashtable>の値を参照します。</span><span class="sxs-lookup"><span data-stu-id="b7513-749">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="b7513-750">したがって、<xref:System.Collections.Hashtable> への変更は、引き続き <xref:System.Collections.ICollection>に反映されます。</span><span class="sxs-lookup"><span data-stu-id="b7513-750">Therefore, changes to the <xref:System.Collections.Hashtable> continue to be reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="b7513-751">このプロパティの値の取得は `O(1)` 操作です。</span><span class="sxs-lookup"><span data-stu-id="b7513-751">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Hashtable.Keys" />
      </Docs>
    </Member>
  </Members>
</Type>
