<Type Name="Graphics" FullName="System.Drawing.Graphics">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9e2532cdaa9f14f1a0f91bee7951522198ab63bd" /><Meta Name="ms.sourcegitcommit" Value="367e1eae0725e6da7136cd073aaa856ded5d5c29" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/13/2019" /><Meta Name="ms.locfileid" Value="75018983" /></Metadata><TypeSignature Language="C#" Value="public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Graphics extends System.MarshalByRefObject implements class System.Drawing.IDeviceContext, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Graphics&#xA;Inherits MarshalByRefObject&#xA;Implements IDeviceContext, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Graphics sealed : MarshalByRefObject, IDisposable, System::Drawing::IDeviceContext" />
  <TypeSignature Language="F#" Value="type Graphics = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable&#xA;    interface IDeviceContext" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Drawing.IDeviceContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>GDI+ 描画サーフェイスをカプセル化します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics> クラスには、オブジェクトをディスプレイデバイスに描画するためのメソッドが用意されています。 <xref:System.Drawing.Graphics> は、特定のデバイスコンテキストに関連付けられています。  
  
 <xref:System.Drawing.Graphics> オブジェクトを取得するには、<xref:System.Windows.Forms.Control?displayProperty=nameWithType>から継承するオブジェクトで <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=nameWithType> メソッドを呼び出すか、コントロールの <xref:System.Windows.Forms.Control.Paint?displayProperty=nameWithType> イベントを処理し、<xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> クラスの <xref:System.Windows.Forms.PaintEventArgs?displayProperty=nameWithType> プロパティにアクセスします。 また、<xref:System.Drawing.Graphics.FromImage%2A> メソッドを使用して、イメージから <xref:System.Drawing.Graphics> オブジェクトを作成することもできます。 <xref:System.Drawing.Graphics> オブジェクトの作成の詳細については、「[方法: 描画用のグラフィックスオブジェクトを作成する](~/docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md)」を参照してください。  
  
 <xref:System.Drawing.Graphics> オブジェクトを使用して、さまざまな図形や線を描画できます。 線と形状を描画する方法の詳細については、描画する線または形状の特定の `Draw`*Graphの要素*メソッドを参照してください。 これらのメソッドには、<xref:System.Drawing.Graphics.DrawLine%2A>、<xref:System.Drawing.Graphics.DrawArc%2A>、<xref:System.Drawing.Graphics.DrawClosedCurve%2A>、<xref:System.Drawing.Graphics.DrawPolygon%2A>、<xref:System.Drawing.Graphics.DrawRectangle%2A>が含まれます。 直線と形状を描画する方法の詳細については、「[ペンを使用した直線と図形の描画](~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md)」と「ブラシを使用し[た図形の塗りつぶし](~/docs/framework/winforms/advanced/using-a-brush-to-fill-shapes.md)」を参照してください。  
  
 また、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドと <xref:System.Drawing.Graphics.DrawIcon%2A> メソッドを使用して、イメージやアイコンを描画することもできます。 画面から <xref:System.Drawing.Graphics> オブジェクトの描画サーフェイスまでのカラーデータのビットブロック転送を実行するには、「<xref:System.Drawing.Graphics.CopyFromScreen%2A>」を参照してください。 <xref:System.Drawing.Graphics> オブジェクトを使用してイメージを描画する方法の詳細については、「[イメージ、ビットマップ、アイコン、およびメタファイルの操作](~/docs/framework/winforms/advanced/working-with-images-bitmaps-icons-and-metafiles.md)」を参照してください。  
  
 さらに、<xref:System.Drawing.Graphics> オブジェクトによって使用される座標系を操作できます。 座標系とその操作方法の詳細については、「[座標系と変換](~/docs/framework/winforms/advanced/coordinate-systems-and-transformations.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されており、<xref:System.Windows.Forms.PaintEventArgs> オブジェクトが必要です。 <xref:System.Windows.Forms.PaintEventArgs> オブジェクトの名前は `e` で、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターです。 コードは、次のアクションを実行します。  
  
-   JPEG ファイルからイメージを作成します。 このファイルは SampImag という名前で、この例のフォルダーにあります。  
  
-   イメージの左上隅を描画するポイントを作成します。  
  
-   <xref:System.Drawing.Graphics> オブジェクトを使用して、スケールされていないイメージを画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/162861f9-f050-445e-8abb-b2c43a918b8b">方法 : 描画する Graphics オブジェクトを作成する</related>
    <related type="Article" href="https://msdn.microsoft.com/library/eb0f6d6f-9e52-4167-9592-ff4b82fb5869">グラフィックス プログラミングについて</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6207cad1-7a34-4bd6-bfc1-db823ca7a73e">Graphics オブジェクトの状態の管理</related>
  </Docs>
  <Members>
    <Member MemberName="AddMetafileComment">
      <MemberSignature Language="C#" Value="public void AddMetafileComment (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetafileComment(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMetafileComment (data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMetafileComment(cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.AddMetafileComment : byte[] -&gt; unit" Usage="graphics.AddMetafileComment data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">コメントが含まれているバイトの配列。</param>
        <summary>現在の <see cref="T:System.Drawing.Imaging.Metafile" /> にコメントを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、この <xref:System.Drawing.Graphics> が <xref:System.Drawing.Imaging.Metafile>に関連付けられている場合にのみ有効です。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターであり、`thisForm`の例の <xref:System.Windows.Forms.Form> である <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   メタファイルを作成し、そのデバイスコンテキストをハンドルする `hdc`を取得するための一時 <xref:System.Drawing.Graphics> を作成します。  
  
-   `hdc`を使用して新しいメタファイルを作成します。  
  
-   <xref:System.Drawing.Imaging.Metafile>からメタファイルを表示するための <xref:System.Drawing.Graphics> を作成します。  
  
-   メタファイルに四角形を描画します。  
  
-   メタファイルにコメントを追加します。  
  
-   メタファイルを閉じるメタファイルの <xref:System.Drawing.Graphics> を破棄します。  
  
-   メタファイルを破棄します。  
  
-   一時 `hdc`を解放します。  
  
-   一時 <xref:System.Drawing.Graphics>を破棄します。  
  
-   以前に作成したファイルから2番目のメタファイルを作成します。  
  
-   メタファイルを画面に描画します。  
  
-   メタファイルを破棄します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginContainer">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在の状態でグラフィックス コンテナーを保存し、新しいグラフィックス コンテナーを開いて使用します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer () As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer();" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : unit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在の状態でグラフィックス コンテナーを保存し、新しいグラフィックス コンテナーを開いて使用します。</summary>
        <returns>このメソッドは、メソッドが呼び出された時点での <see cref="T:System.Drawing.Graphics" /> の状態を表す <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを <xref:System.Drawing.Graphics.EndContainer%2A> メソッドと共に使用して、入れ子になったグラフィックスコンテナーを作成します。 グラフィックスコンテナーは、変換、クリッピング領域、レンダリングプロパティなどのグラフィックスの状態を保持します。  
  
 <xref:System.Drawing.Graphics>の <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics> の状態を保持する情報ブロックがスタックに配置されます。 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドは、その情報ブロックを識別する <xref:System.Drawing.Drawing2D.GraphicsContainer> を返します。 識別オブジェクトを <xref:System.Drawing.Graphics.EndContainer%2A> メソッドに渡すと、情報ブロックがスタックから削除され、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出し時の状態に <xref:System.Drawing.Graphics> を復元するために使用されます。  
  
 コンテナーは入れ子にすることができます。つまり、<xref:System.Drawing.Graphics.EndContainer%2A> メソッドを呼び出す前に、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを複数回呼び出すことができます。 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを呼び出すたびに、情報ブロックがスタックに配置され、情報ブロックの <xref:System.Drawing.Drawing2D.GraphicsContainer> を受け取ります。 これらのオブジェクトのいずれかを <xref:System.Drawing.Graphics.EndContainer%2A> メソッドに渡すと、その <xref:System.Drawing.Graphics> は、その特定の <xref:System.Drawing.Drawing2D.GraphicsContainer>を返した <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出し時の状態に戻ります。 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しによってスタックに配置された情報ブロックがスタックから削除され、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しの後にそのスタックに配置されたすべての情報ブロックも削除されます。  
  
 <xref:System.Drawing.Graphics.Save%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しと同じスタックに情報ブロックが配置されます。 <xref:System.Drawing.Graphics.EndContainer%2A> メソッド呼び出しが <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しとペアになっているのと同様に、<xref:System.Drawing.Graphics.Restore%2A> メソッド呼び出しは <xref:System.Drawing.Graphics.Save%2A> メソッド呼び出しとペアになります。  
  
 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドへの対応する呼び出しがスタックから削除された後に、(<xref:System.Drawing.Graphics.Save%2A> メソッドまたは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって) スタックに配置されたすべての情報ブロックが削除されます。 同様に、<xref:System.Drawing.Graphics.Restore%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.Save%2A> メソッドへの対応する呼び出しがスタックから削除された後に、(<xref:System.Drawing.Graphics.Save%2A> メソッドまたは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって) スタックに配置されたすべての情報ブロックが削除されます。  
  
 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって確立されるグラフィックスの状態には、既定のグラフィックスの状態の表示品質が含まれます。メソッドの呼び出し時に既存のレンダリング品質の状態が変化した場合は、既定値にリセットされます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   新しいグラフィックスコンテナーを開き、古いコンテナーを保存します。  
  
-   コンテナー内のワールド座標を変換します。  
  
-   新しいコンテナーの (平行移動された座標) の赤い四角形に塗りつぶします。  
  
-   新しいコンテナーを閉じ、保存されたコンテナーを復元します。  
  
-   保存されたコンテナーの緑の四角形 (平行変換されていない座標) に塗りつぶします。  
  
 結果は、同じサイズの赤い四角形を overlies する緑色の四角形です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.Rectangle dstrect, valuetype System.Drawing.Rectangle srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As Rectangle, srcrect As Rectangle, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::Rectangle dstrect, System::Drawing::Rectangle srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect"><paramref name="srcrect" /> パラメーターと共にコンテナーのスケール変換を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcrect"><paramref name="dstrect" /> パラメーターと共にコンテナーのスケール変換を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="unit">コンテナーの長さの単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在の状態でグラフィックス コンテナーを保存し、指定したスケール変換を行った新しいグラフィックス コンテナーを開いて使用します。</summary>
        <returns>このメソッドは、メソッドが呼び出された時点での <see cref="T:System.Drawing.Graphics" /> の状態を表す <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを <xref:System.Drawing.Graphics.EndContainer%2A> メソッドと共に使用して、入れ子になったグラフィックスコンテナーを作成します。 グラフィックスコンテナーは、変換、クリッピング領域、レンダリングプロパティなどのグラフィックスの状態を保持します。  
  
 <xref:System.Drawing.Graphics>の <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics> の状態を保持する情報ブロックがスタックに配置されます。 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドは、その情報ブロックを識別する <xref:System.Drawing.Drawing2D.GraphicsContainer> を返します。 識別オブジェクトを <xref:System.Drawing.Graphics.EndContainer%2A> メソッドに渡すと、情報ブロックがスタックから削除され、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出し時の状態に <xref:System.Drawing.Graphics> を復元するために使用されます。  
  
 コンテナーは入れ子にすることができます。つまり、<xref:System.Drawing.Graphics.EndContainer%2A> メソッドを呼び出す前に、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを複数回呼び出すことができます。 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを呼び出すたびに、情報ブロックがスタックに配置され、情報ブロックの <xref:System.Drawing.Drawing2D.GraphicsContainer> を受け取ります。 これらのオブジェクトのいずれかを <xref:System.Drawing.Graphics.EndContainer%2A> メソッドに渡すと、その <xref:System.Drawing.Graphics> は、その特定の <xref:System.Drawing.Drawing2D.GraphicsContainer>を返した <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出し時の状態に戻ります。 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しによってスタックに配置された情報ブロックがスタックから削除され、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しの後にそのスタックに配置されたすべての情報ブロックも削除されます。  
  
 <xref:System.Drawing.Graphics.Save%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しと同じスタックに情報ブロックが配置されます。 <xref:System.Drawing.Graphics.EndContainer%2A> メソッド呼び出しが <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しとペアになっているのと同様に、<xref:System.Drawing.Graphics.Restore%2A> メソッド呼び出しは <xref:System.Drawing.Graphics.Save%2A> メソッド呼び出しとペアになります。  
  
 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドへの対応する呼び出しがスタックから削除された後に、(<xref:System.Drawing.Graphics.Save%2A> メソッドまたは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって) スタックに配置されたすべての情報ブロックが削除されます。 同様に、<xref:System.Drawing.Graphics.Restore%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.Save%2A> メソッドへの対応する呼び出しがスタックから削除された後に、(<xref:System.Drawing.Graphics.Save%2A> メソッドまたは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって) スタックに配置されたすべての情報ブロックが削除されます。  
  
 このメソッドは、`dstrect` および `srcrect` パラメーターを使用して、新しいグラフィックスコンテナーのスケール変換を指定します。 小数点以下桁数は変換に相当し、`srcrect`に適用すると `dstrect`になります。  
  
 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって確立されるグラフィックスの状態には、既定のグラフィックスの状態の表示品質が含まれます。メソッドの呼び出し時に既存のレンダリング品質の状態が変化した場合は、既定値にリセットされます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   新しいコンテナーのスケール変換を指定する2つの四角形を作成します。  
  
-   新しいグラフィックスコンテナーを開き、古いコンテナーを保存します。  
  
-   新しいコンテナーの (スケールされた座標) の赤い四角形に塗りつぶします。  
  
-   新しいコンテナーを閉じ、保存されたコンテナーを復元します。  
  
-   保存されたコンテナーの緑の四角形 (スケールなしの座標) に塗りつぶします。  
  
 結果は、小さな赤い四角形を overlies 緑色の四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.RectangleF dstrect, valuetype System.Drawing.RectangleF srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As RectangleF, srcrect As RectangleF, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::RectangleF dstrect, System::Drawing::RectangleF srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect"><paramref name="srcrect" /> パラメーターと共に新しいグラフィックス コンテナーのスケール変換を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcrect"><paramref name="dstrect" /> パラメーターと共に新しいグラフィックス コンテナーのスケール変換を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="unit">コンテナーの長さの単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在の状態でグラフィックス コンテナーを保存し、指定したスケール変換を行った新しいグラフィックス コンテナーを開いて使用します。</summary>
        <returns>このメソッドは、メソッドが呼び出された時点での <see cref="T:System.Drawing.Graphics" /> の状態を表す <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを <xref:System.Drawing.Graphics.EndContainer%2A> メソッドと共に使用して、入れ子になったグラフィックスコンテナーを作成します。 グラフィックスコンテナーは、変換、クリッピング領域、レンダリングプロパティなどのグラフィックスの状態を保持します。  
  
 <xref:System.Drawing.Graphics>の <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics> の状態を保持する情報ブロックがスタックに配置されます。 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドは、その情報ブロックを識別する <xref:System.Drawing.Drawing2D.GraphicsContainer> を返します。 識別オブジェクトを <xref:System.Drawing.Graphics.EndContainer%2A> メソッドに渡すと、情報ブロックがスタックから削除され、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出し時の状態に <xref:System.Drawing.Graphics> を復元するために使用されます。  
  
 コンテナーは入れ子にすることができます。つまり、<xref:System.Drawing.Graphics.EndContainer%2A> メソッドを呼び出す前に、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを複数回呼び出すことができます。 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを呼び出すたびに、情報ブロックがスタックに配置され、情報ブロックの <xref:System.Drawing.Drawing2D.GraphicsContainer> を受け取ります。 これらのオブジェクトのいずれかを <xref:System.Drawing.Graphics.EndContainer%2A> メソッドに渡すと、その <xref:System.Drawing.Graphics> は、その特定の <xref:System.Drawing.Drawing2D.GraphicsContainer>を返した <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出し時の状態に戻ります。 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しによってスタックに配置された情報ブロックがスタックから削除され、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しの後にそのスタックに配置されたすべての情報ブロックも削除されます。  
  
 <xref:System.Drawing.Graphics.Save%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しと同じスタックに情報ブロックが配置されます。 <xref:System.Drawing.Graphics.EndContainer%2A> メソッド呼び出しが <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しとペアになっているのと同様に、<xref:System.Drawing.Graphics.Restore%2A> メソッド呼び出しは <xref:System.Drawing.Graphics.Save%2A> メソッド呼び出しとペアになります。  
  
 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドへの対応する呼び出しがスタックから削除された後に、(`Save` メソッドまたは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって) スタックに配置されたすべての情報ブロックが削除されます。 同様に、<xref:System.Drawing.Graphics.Restore%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.Save%2A> メソッドへの対応する呼び出しがスタックから削除された後に、(<xref:System.Drawing.Graphics.Save%2A> メソッドまたは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって) スタックに配置されたすべての情報ブロックが削除されます。  
  
 このメソッドは、`dstrect` および `srcrect` パラメーターを使用して、新しいグラフィックスコンテナーのスケール変換を指定します。 小数点以下桁数は変換に相当し、`srcrect`に適用すると `dstrect`になります。  
  
 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって確立されるグラフィックスの状態には、既定のグラフィックスの状態の表示品質が含まれます。メソッドの呼び出し時に既存のレンダリング品質の状態が変化した場合は、既定値にリセットされます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   新しいコンテナーのスケール変換を指定する2つの四角形を作成します。  
  
-   新しいグラフィックスコンテナーを開き、古いコンテナーを保存します。  
  
-   新しいコンテナーの (スケールされた座標) の赤い四角形に塗りつぶします。  
  
-   新しいコンテナーを閉じ、保存されたコンテナーを復元します。  
  
-   保存されたコンテナーの緑の四角形 (スケールなしの座標) に塗りつぶします。  
  
 結果は、小さな赤い四角形を overlies 緑色の四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.Clear : System.Drawing.Color -&gt; unit" Usage="graphics.Clear color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">描画サーフェイスの背景色を表す <see cref="T:System.Drawing.Color" /> 構造体。</param>
        <summary>描画サーフェイス全体を消去し、指定した背景色で塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.Clear%2A> メソッドは、グラフィックスオブジェクトの状態をクリアします。グラフィックスオブジェクトを更新できない場合には呼び出さないでください。 たとえば、ターミナルサーバーセッションのセキュリティで保護されたデスクトップで <xref:System.Drawing.Graphics.Clear%2A> メソッドが呼び出されると、<xref:System.Runtime.InteropServices.ExternalException> が発生し、<xref:System.Drawing.Graphics> オブジェクトが不整合な状態のままになることがあります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードにより、<xref:System.Drawing.Graphics> の描画サーフェイスがクリアされ、背景色がシステム定義の青緑の色に設定されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Clip" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Clip { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Drawing.Region with get, set" Usage="System.Drawing.Graphics.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の描画領域を限定する <see cref="T:System.Drawing.Region" /> を取得または設定します。</summary>
        <value>この <see cref="T:System.Drawing.Region" /> のうち、現在描画に使用できる部分を限定する <see cref="T:System.Drawing.Graphics" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.Clip%2A> プロパティによって返される <xref:System.Drawing.Region> オブジェクトを変更しても、<xref:System.Drawing.Graphics> オブジェクトを使用した後続の描画には影響しません。 クリップ領域を変更するには、<xref:System.Drawing.Graphics.Clip%2A> プロパティの値を新しい <xref:System.Drawing.Region> オブジェクトに置き換えます。 クリッピング領域が無限であるかどうかを判断するには、<xref:System.Drawing.Graphics.Clip%2A> プロパティを取得し、その <xref:System.Drawing.Region.IsInfinite%2A> メソッドを呼び出します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Drawing.Graphics.Clip%2A> プロパティの使用方法を示しています。 この例は、Windows フォームと共に使用するように設計されています。 フォームにコードを貼り付けて、フォームの <xref:System.Windows.Forms.Control.Paint> イベントを処理するときに `SetAndFillClip` メソッドを呼び出し、`e` を <xref:System.Windows.Forms.PaintEventArgs>として渡します。  
  
 [!code-cpp[System.Drawing.GraphicsProperties#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.GraphicsProperties#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#4)]
 [!code-vb[System.Drawing.GraphicsProperties#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF ClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.ClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF ClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.ClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.ClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> オブジェクトのクリッピング領域に外接する <see cref="T:System.Drawing.RectangleF" /> 構造体を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域に外接する四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 結果として得られる四角形の単位は、<xref:System.Drawing.Graphics.PageUnit%2A> プロパティによって指定されます。 既定の単位はピクセルです。 通常、<xref:System.Drawing.Graphics> はコントロールに関連付けられており、四角形の原点は、そのコントロールのクライアント領域に対して相対的になります。  
  
 クリッピング領域が無限の場合、<xref:System.Drawing.Graphics.ClipBounds%2A> プロパティは、意味のない大きな四角形を返します。 クリッピング領域が無限であるかどうかを判断するには、<xref:System.Drawing.Graphics.Clip%2A> プロパティを取得し、その <xref:System.Drawing.Region.IsInfinite%2A> メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingMode CompositingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingMode As CompositingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingMode CompositingMode { System::Drawing::Drawing2D::CompositingMode get(); void set(System::Drawing::Drawing2D::CompositingMode value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingMode : System.Drawing.Drawing2D.CompositingMode with get, set" Usage="System.Drawing.Graphics.CompositingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> への複合イメージの描画方法を指定する値を取得します。</summary>
        <value>このプロパティは、<see cref="T:System.Drawing.Drawing2D.CompositingMode" /> 列挙体のメンバーを指定します。 既定値は、<see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 合成モードでは、ソースイメージのピクセルを上書きするか、または背景ピクセルと組み合わせて使用するかを決定します。  
  
> [!NOTE]
>  <xref:System.Drawing.Graphics.TextRenderingHint%2A> プロパティが <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>に設定されている場合、<xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> の <xref:System.Drawing.Graphics.CompositingMode%2A> プロパティ値は使用しないでください。 例外が発生したか、イメージが正しく表示されない可能性があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingQuality">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingQuality CompositingQuality" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingQuality" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingQuality As CompositingQuality" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingQuality CompositingQuality { System::Drawing::Drawing2D::CompositingQuality get(); void set(System::Drawing::Drawing2D::CompositingQuality value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingQuality : System.Drawing.Drawing2D.CompositingQuality with get, set" Usage="System.Drawing.Graphics.CompositingQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> に描画する複合イメージのレンダリング品質を取得または設定します。</summary>
        <value>このプロパティは、<see cref="T:System.Drawing.Drawing2D.CompositingQuality" /> 列挙体のメンバーを指定します。 既定値は、<see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 合成品質は、複合画像のレンダリング品質レベルを決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFromScreen">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>画面から <see cref="T:System.Drawing.Graphics" /> の描画サーフェイスへの、色データのビット ブロック転送を実行します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (upperLeftSource As Point, upperLeftDestination As Point, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">転送元の四角形の左上隅の点。</param>
        <param name="upperLeftDestination">転送先の四角形の左上隅の点。</param>
        <param name="blockRegionSize">転送される領域のサイズ。</param>
        <summary>画面から <see cref="T:System.Drawing.Graphics" /> の描画サーフェイスへの、ピクセルの四角形に対応する色データのビット ブロック転送を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドは、別のイメージの上に1つのイメージを重ねる場合に便利です。 コピー元とコピー先の色をブレンドする方法を指定するには、<xref:System.Drawing.CopyPixelOperation> パラメーターを受け取る <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドのいずれかを使用します。  
  
   
  
## Examples  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドの使用方法を次の例に示します。 この例を実行するには、Windows フォームに貼り付けます。 フォームの <xref:System.Windows.Forms.Control.Paint> イベントを処理し、<xref:System.Windows.Forms.Control.Paint> イベント処理メソッドから `CopyPixels1` メソッドを呼び出して、`e` を <xref:System.Windows.Forms.PaintEventArgs>として渡します。  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">操作に失敗しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">すべてのウィンドウにアクセスできます。 関連する列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />。</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">方法 : Windows フォームを印刷する</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">方法: ピクセルをコピーして Windows フォームのちらつきを軽減する</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">転送元の四角形の左上隅の点。</param>
        <param name="upperLeftDestination">転送先の四角形の左上隅の点。</param>
        <param name="blockRegionSize">転送される領域のサイズ。</param>
        <param name="copyPixelOperation"><see cref="T:System.Drawing.CopyPixelOperation" /> 値のいずれか 1 つ。</param>
        <summary>画面から <see cref="T:System.Drawing.Graphics" /> の描画サーフェイスへの、ピクセルの四角形に対応する色データのビット ブロック転送を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドは、別のイメージの上に1つのイメージを重ねる場合に便利です。 `copyPixelOperation` パラメーターを使用すると、コピー元の色をコピー先の領域の色とブレンドするかどうかと方法を指定できます。  
  
   
  
## Examples  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドの使用方法を次の例に示します。 この例を実行するには、Windows フォームに貼り付けます。 フォームの <xref:System.Windows.Forms.Control.Paint> イベントを処理し、<xref:System.Windows.Forms.Control.Paint> イベント処理メソッドから `CopyPixels2` メソッドを呼び出して、`e` を <xref:System.Windows.Forms.PaintEventArgs>として渡します。  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#5)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" /> が <see cref="T:System.Drawing.CopyPixelOperation" /> のメンバーではありません。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">操作に失敗しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">すべてのウィンドウにアクセスできます。 関連する列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />。</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">方法 : Windows フォームを印刷する</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">方法: ピクセルをコピーして Windows フォームのちらつきを軽減する</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (sourceX As Integer, sourceY As Integer, destinationX As Integer, destinationY As Integer, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="sourceY" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationX" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationY" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="4" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceX">転送元の四角形の左上隅の点の x 座標。</param>
        <param name="sourceY">転送元の四角形の左上隅の点の y 座標。</param>
        <param name="destinationX">転送先の四角形の左上隅の点の x 座標。</param>
        <param name="destinationY">転送先の四角形の左上隅の点の y 座標。</param>
        <param name="blockRegionSize">転送される領域のサイズ。</param>
        <summary>画面から <see cref="T:System.Drawing.Graphics" /> の描画サーフェイスへの、ピクセルの四角形に対応する色データのビット ブロック転送を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドは、別のイメージの上に1つのイメージを重ねる場合に便利です。 コピー元とコピー先の色をブレンドする方法を指定するには、<xref:System.Drawing.CopyPixelOperation> パラメーターを受け取る <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドのいずれかを使用します。  
  
   
  
## Examples  
 次のコード例は、現在のフォームのコピーを印刷するために <xref:System.Drawing.Graphics.CopyFromScreen%2A> を使用する方法を示しています。  
  
 [!code-csharp[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">操作に失敗しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">すべてのウィンドウにアクセスできます。 関連する列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />。</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">方法 : Windows フォームを印刷する</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">方法: ピクセルをコピーして Windows フォームのちらつきを軽減する</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="sourceY" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationX" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationY" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="4" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" Index="5" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceX">転送元の四角形の左上隅の点の x 座標。</param>
        <param name="sourceY">転送元の四角形の左上隅の点の y 座標。</param>
        <param name="destinationX">転送先の四角形の左上隅の点の x 座標。</param>
        <param name="destinationY">転送先の四角形の左上隅の点の y 座標。</param>
        <param name="blockRegionSize">転送される領域のサイズ。</param>
        <param name="copyPixelOperation"><see cref="T:System.Drawing.CopyPixelOperation" /> 値のいずれか 1 つ。</param>
        <summary>画面から <see cref="T:System.Drawing.Graphics" /> の描画サーフェイスへの、ピクセルの四角形に対応する色データのビット ブロック転送を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドは、別のイメージの上に1つのイメージを重ねる場合に便利です。 `copyPixelOperation` パラメーターを使用すると、コピー元の色をコピー先の領域の色とブレンドするかどうかと方法を指定できます。  
  
   
  
## Examples  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドの使用方法を次の例に示します。 この例を実行するには、Windows フォームに貼り付けます。 フォームの <xref:System.Windows.Forms.Control.Paint> イベントを処理し、<xref:System.Windows.Forms.Control.Paint> イベント処理メソッドから `CopyPixels4` メソッドを呼び出して、`e` を <xref:System.Windows.Forms.PaintEventArgs>として渡します。  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#7)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" /> が <see cref="T:System.Drawing.CopyPixelOperation" /> のメンバーではありません。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">操作に失敗しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">すべてのウィンドウにアクセスできます。 関連する列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />。</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">方法 : Windows フォームを印刷する</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">方法: ピクセルをコピーして Windows フォームのちらつきを軽減する</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.Dispose%2A> を呼び出すと、この <xref:System.Drawing.Graphics> で使用されるリソースを他の目的で再割り当てできます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   サンプルディレクトリのグラフィックファイル SampImag から <xref:System.Drawing.Image> を作成します。  
  
-   <xref:System.Drawing.Image>から <xref:System.Drawing.Graphics> を作成します。  
  
-   イメージ内の四角形を塗りつぶすことによって、イメージを変更します。  
  
-   <xref:System.Drawing.Image> を画面に描画します。  
  
-   作成された <xref:System.Drawing.Graphics>を解放します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiX">
      <MemberSignature Language="C#" Value="public float DpiX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiX { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiX : single" Usage="System.Drawing.Graphics.DpiX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の水平方向の解像度を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> でサポートされる水平方向の解像度の値 (dpi)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 高解像度アプリケーションの作成の詳細については、「」を参照してください。  
  
 [高 DPI](https://go.microsoft.com/fwlink/?LinkId=159804)。  
  
   
  
## Examples  
 次のメソッドは、<xref:System.Drawing.Graphics.DpiX%2A> プロパティと <xref:System.Drawing.Graphics.DpiY%2A> プロパティの使用方法を示しています。 この例は、Windows フォームで使用するように設計されています。 この例を実行するには、listBox1 という名前の <xref:System.Windows.Forms.ListBox> を含むフォームに貼り付け、フォームのコンストラクターからこのメソッドを呼び出します。  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=159804">高 DPI</related>
      </Docs>
    </Member>
    <Member MemberName="DpiY">
      <MemberSignature Language="C#" Value="public float DpiY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiY" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiY { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiY : single" Usage="System.Drawing.Graphics.DpiY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の垂直方向の解像度を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> でサポートされる垂直方向の解像度の値 (dpi)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 高解像度アプリケーションの作成の詳細については、「」を参照してください。  
  
 [高 DPI](https://go.microsoft.com/fwlink/?LinkId=159804)。  
  
   
  
## Examples  
 次のメソッドは、<xref:System.Drawing.Graphics.DpiX%2A> プロパティと <xref:System.Drawing.Graphics.DpiY%2A> プロパティの使用方法を示しています。 この例は、Windows フォームで使用するように設計されています。 この例を実行するには、listBox1 という名前の <xref:System.Windows.Forms.ListBox> を含むフォームに貼り付け、フォームのコンストラクターからこのメソッドを呼び出します。  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=159804">高 DPI</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawArc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、幅、および高さで指定された楕円の一部を表す円弧を描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">円弧の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">楕円の境界を定義する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="startAngle">x 軸から円弧の開始点まで、時計回りに測定した角度 (度単位)。</param>
        <param name="sweepAngle"><paramref name="startAngle" /> パラメーターから円弧の終了点まで、時計回りに測定した角度 (度単位)。</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 構造体によって指定される楕円の一部を表す円弧を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の境界の一部である円弧を描画します。 楕円は、四角形の境界によって定義されます。 弧は、`startAngle` パラメーターと `startAngle` + `sweepAngle` パラメーターとの間の楕円の境界の部分です。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   楕円にバインドする四角形を作成します。  
  
-   開始 (45 °) とスイープ (270 °) の角度を定義します。  
  
-   楕円の円弧を画面に描画します。  
  
 結果は、x 軸の + ~-45 °の間にセグメントがない部分楕円です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">円弧の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">楕円の境界を定義する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="startAngle">x 軸から円弧の開始点まで、時計回りに測定した角度 (度単位)。</param>
        <param name="sweepAngle"><paramref name="startAngle" /> パラメーターから円弧の終了点まで、時計回りに測定した角度 (度単位)。</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 構造体によって指定される楕円の一部を表す円弧を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の境界の一部である円弧を描画します。 楕円は、四角形の境界によって定義されます。 弧は、`startAngle` パラメーターと `startAngle` + `sweepAngle` パラメーターとの間の楕円の境界の部分です。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   楕円にバインドする四角形を作成します。  
  
-   開始 (45 °) とスイープ (270 °) の角度を定義します。  
  
-   楕円の円弧を画面に描画します。  
  
 結果は、x 軸の + ~-45 °の間にセグメントがない部分楕円です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> は <see langword="null" /> です</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">円弧の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">楕円を定義する四角形の左上隅の x 座標。</param>
        <param name="y">楕円を定義する四角形の左上隅の y 座標。</param>
        <param name="width">楕円を定義する四角形の幅。</param>
        <param name="height">楕円を定義する四角形の高さ。</param>
        <param name="startAngle">x 軸から円弧の開始点まで、時計回りに測定した角度 (度単位)。</param>
        <param name="sweepAngle"><paramref name="startAngle" /> パラメーターから円弧の終了点まで、時計回りに測定した角度 (度単位)。</param>
        <summary>座標ペア、幅、および高さで指定された楕円の一部を表す円弧を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の境界の一部である円弧を描画します。 楕円は、四角形の境界によって定義されます。 弧は、`startAngle` パラメーターと `startAngle` + `sweepAngle` パラメーターとの間の楕円の境界の部分です。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   楕円にバインドする四角形の位置とサイズを作成します。  
  
-   開始 (45 °) とスイープ (270 °) の角度を定義します。  
  
-   楕円の円弧を画面に描画します。  
  
 結果は、x 軸の + ~-45 °の間にセグメントがない部分楕円です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">円弧の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">楕円を定義する四角形の左上隅の x 座標。</param>
        <param name="y">楕円を定義する四角形の左上隅の y 座標。</param>
        <param name="width">楕円を定義する四角形の幅。</param>
        <param name="height">楕円を定義する四角形の高さ。</param>
        <param name="startAngle">x 軸から円弧の開始点まで、時計回りに測定した角度 (度単位)。</param>
        <param name="sweepAngle"><paramref name="startAngle" /> パラメーターから円弧の終了点まで、時計回りに測定した角度 (度単位)。</param>
        <summary>座標ペア、幅、および高さで指定された楕円の一部を表す円弧を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の境界の一部である円弧を描画します。 楕円は、四角形の境界によって定義されます。 弧は、`startAngle` パラメーターと `startAngle` + `sweepAngle` パラメーターとの間の楕円の境界の部分です。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   楕円にバインドする四角形の位置とサイズを作成します。  
  
-   開始 (45 °) とスイープ (270 °) の角度を定義します。  
  
-   楕円の円弧を画面に描画します。  
  
 結果は、x 軸の + ~-45 °の間にセグメントがない部分楕円です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBezier">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>4 つの <see cref="T:System.Drawing.Point" /> 構造体で定義されるベジエ スプラインを描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2, valuetype System.Drawing.Point pt3, valuetype System.Drawing.Point pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2, System::Drawing::Point pt3, System::Drawing::Point pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" /> 構造体。</param>
        <param name="pt1">曲線の開始点を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="pt2">曲線の最初の制御点を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="pt3">曲線の 2 番目の制御点を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="pt4">曲線の終了点を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <summary>4 つの <see cref="T:System.Drawing.Point" /> 構造体で定義されるベジエ スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ベジエ曲線は、最初の点から4番目の点まで描画されます。 2番目と3番目のポイントは、曲線の形状を決定する制御点です。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   曲線の開始、終了、および2つの制御点を作成します。  
  
-   ベジエ曲線を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2, valuetype System.Drawing.PointF pt3, valuetype System.Drawing.PointF pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2, System::Drawing::PointF pt3, System::Drawing::PointF pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="pt1">曲線の開始点を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="pt2">曲線の最初の制御点を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="pt3">曲線の 2 番目の制御点を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="pt4">曲線の終了点を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <summary>4 つの <see cref="T:System.Drawing.PointF" /> 構造体で定義されるベジエ スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ベジエスプラインは、最初のポイントから4番目のポイントまで描画されます。 2番目と3番目のポイントは、曲線の形状を決定する制御点です。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   曲線の開始、終了、および2つの制御点を作成します。  
  
-   ベジエ曲線を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * single * single * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawBezier (pen, x1, y1, x2, y2, x3, y3, x4, y4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x1">曲線の開始点の x 座標。</param>
        <param name="y1">曲線の開始点の y 座標。</param>
        <param name="x2">曲線の最初の制御点の x 座標。</param>
        <param name="y2">曲線の最初の制御点の y 座標。</param>
        <param name="x3">曲線の 2 番目の制御点の x 座標。</param>
        <param name="y3">曲線の 2 番目の制御点の y 座標。</param>
        <param name="x4">曲線の終了点の x 座標。</param>
        <param name="y4">曲線の終了点の y 座標。</param>
        <summary>各点を表す 4 つの順序付けられた座標ペアで定義されるベジエ スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ベジエスプラインは、最初のポイントから4番目のポイントまで描画されます。 2番目と3番目のポイントは、曲線の形状を決定する制御点です。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   曲線の開始位置、終了位置、および2つの制御点の座標を作成します。  
  
-   ベジエ曲線を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBeziers">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Point" /> 構造体の配列から一連のベジエ スプラインを描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">曲線を決定する複数の点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。 配列内の点の数は、3 の倍数に 1 を加算した数 (4、7、10 など) である必要があります。</param>
        <summary><see cref="T:System.Drawing.Point" /> 構造体の配列から一連のベジエ スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列内の点の数は、3 + 1 の倍数である必要があります。これは、最初のスプラインには4つの点が必要であり、その他のすべてのスプラインには3つのポイントが必要であるためです。 最初のベジエスプラインは、ポイント配列の最初の点から4番目の点まで描画されます。 2番目と3番目のポイントは、曲線の形状を決定する制御点です。 後続の各曲線には、さらに3つのポイント (さらに2つの制御点と終了点) が必要です。 前の曲線の終了点は、追加の各曲線の開始点として使用されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   最初の曲線とエンドポイントの開始、終了、および2つの制御点、および2番目の曲線の2つの制御点を作成します。  
  
-   連続するベジエ曲線を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#14)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#14)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">曲線を決定する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。 配列内の点の数は、3 の倍数に 1 を加算した数 (4、7、10 など) である必要があります。</param>
        <summary><see cref="T:System.Drawing.PointF" /> 構造体の配列から一連のベジエ スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列内の点の数は、3 + 1 の倍数である必要があります。これは、最初のスプラインには4つの点が必要であり、その他のすべてのスプラインには3つのポイントが必要であるためです。 最初のベジエ曲線は、ポイント配列の最初の点から4番目の点まで描画されます。 2番目と3番目のポイントは、曲線の形状を決定する制御点です。 後続の各曲線には、さらに3つのポイント (さらに2つの制御点と終了点) が必要です。 前の曲線の終了点は、追加の各曲線の開始点として使用されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   最初の曲線とエンドポイントの開始、終了、および2つの制御点、および2番目の曲線の2つの制御点を作成します。  
  
-   連続するベジエ曲線を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#15)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#15)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Point" /> 構造体の配列で定義された、閉じたカーディナル スプラインを描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、および高さを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.Point" /> 構造体の配列で定義された、閉じたカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過する閉じたカーディナルスプラインを描画します。 最後の点が最初の点と一致しない場合、図を閉じるために、最後の点から最初の点までの追加の曲線セグメントが追加されます。  
  
 点の配列には、少なくとも4つの <xref:System.Drawing.Point> 構造体が含まれている必要があります。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤と緑のペンを作成します。  
  
-   曲線を定義する7つのポイントを作成します。  
  
-   7つの点の間に7つの赤い直線を描画して、閉じた多角形を形成します。  
  
-   7つの点を通る緑の閉じた曲線を描画します。  
  
 メソッドでは、0.5 の既定のテンションが使用されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#16)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#16)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、および高さを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.PointF" /> 構造体の配列で定義された、閉じたカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過する閉じたカーディナルスプラインを描画します。 最後の点が最初の点と一致しない場合は、最後の点から最初の点まで追加の曲線セグメントを追加して閉じます。  
  
 点の配列には、少なくとも4つの <xref:System.Drawing.PointF> 構造体が含まれている必要があります。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤と緑のペンを作成します。  
  
-   曲線を定義する7つのポイントを作成します。  
  
-   7つの点の間に7つの赤い直線を描画して、閉じた多角形を形成します。  
  
-   7つの点を通る緑の閉じた曲線を描画します。  
  
 メソッドでは、0.5 の既定のテンションが使用されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#18)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#18)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、および高さを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <param name="fillmode">曲線を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。 このパラメーターは必須ですが、無視されます。</param>
        <summary>指定したテンションを使用して、<see cref="T:System.Drawing.Point" /> 構造体の配列で定義された、閉じたカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過する閉じたカーディナルスプラインを描画します。 最後の点が最初の点と一致しない場合は、最後の点から最初の点まで追加の曲線セグメントを追加して閉じます。  
  
 点の配列には、少なくとも4つの <xref:System.Drawing.Point> 構造体が含まれている必要があります。  
  
 `tension` パラメーターによって、スプラインの形状が決まります。 `tension` パラメーターの値が 0.0 F の場合、このメソッドは直線セグメントを描画して点を接続します。 通常、`tension` パラメーターは 1.0 F 以下です。 1.0 F を超える値を指定すると、異常な結果が生成されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤と緑のペンを作成します。  
  
-   曲線を定義する7つの点を作成します。  
  
-   多角形を形成する7つの点の間に赤い赤い直線を描画します。  
  
-   テンションおよびフィルモードの設定を作成します。  
  
-   7つの点を通る緑の閉じた曲線を描画します。  
  
 このメソッドは、1.0 のテンションを使用して、fill モードを `FillMode.Alternate`に設定します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#17)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#17)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、および高さを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <param name="fillmode">曲線を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。 このパラメーターは必須ですが、無視されます。</param>
        <summary>指定したテンションを使用して、<see cref="T:System.Drawing.PointF" /> 構造体の配列で定義された、閉じたカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過する閉じたカーディナルスプラインを描画します。 最後の点が最初の点と一致しない場合は、最後の点から最初の点まで追加の曲線セグメントを追加して閉じます。  
  
 点の配列には、少なくとも4つの <xref:System.Drawing.PointF> 構造体が含まれている必要があります。  
  
 `tension` パラメーターによって、スプラインの形状が決まります。 `tension` パラメーターの値が 0.0 F の場合、このメソッドは直線セグメントを描画して点を接続します。 通常、`tension` パラメーターは 1.0 F 以下です。 1.0 F を超える値を指定すると、異常な結果が生成されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤と緑のペンを作成します。  
  
-   曲線を定義する7つの点を作成します。  
  
-   多角形を形成する7つの点の間に赤い赤い直線を描画します。  
  
-   テンションおよびフィルモードの設定を作成します。  
  
-   7つの点を通る緑の閉じた曲線を描画します。  
  
 このメソッドは、1.0 のテンションを使用して、fill モードを `FillMode.Alternate`に設定します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#19)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#19)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.Drawing.Point" /> 構造体の配列を通過するカーディナル スプラインを描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、および高さを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary>指定した <see cref="T:System.Drawing.Point" /> 構造体の配列を通過するカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過するカーディナルスプラインを描画します。  
  
 点の配列には、曲線を描画するために少なくとも3つの <xref:System.Drawing.Point> 構造体が含まれている必要があります。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤と緑のペンを作成します。  
  
-   曲線を定義する7つのポイントを作成します。  
  
-   7つのポイントの間に6つの赤い直線を描画して、不完全な多角形を形成します。  
  
-   7つのポイントを介して、開いている緑の曲線を描画します。  
  
 メソッドでは、0.5 の既定のテンションが使用されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#20)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#20)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary>指定した <see cref="T:System.Drawing.PointF" /> 構造体の配列を通過するカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過するカーディナルスプラインを描画します。  
  
 点の配列には、曲線を描画するために少なくとも3つの <xref:System.Drawing.PointF> 構造体が含まれている必要があります。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤と緑のペンを作成します。  
  
-   曲線を定義する7つのポイントを作成します。  
  
-   7つのポイントの間に6つの赤い直線を描画して、不完全な多角形を形成します。  
  
-   7つのポイントを介して、開いている緑の曲線を描画します。  
  
 メソッドでは、0.5 の既定のテンションが使用されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#23)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#23)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <summary>指定したテンションを使用して、指定した <see cref="T:System.Drawing.Point" /> 構造体の配列を通過するカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過するカーディナルスプラインを描画します。  
  
 点の配列には、曲線を描画するために少なくとも3つの <xref:System.Drawing.Point> 構造体が含まれている必要があります。  
  
 `tension` パラメーターによって、スプラインの形状が決まります。 `tension` パラメーターの値が 0.0 F の場合、このメソッドは直線セグメントを描画して点を接続します。 通常、`tension` パラメーターは 1.0 F 以下です。 1.0 F を超える値を指定すると、異常な結果が生成されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤と緑のペンを作成します。  
  
-   曲線を定義する7つの点を作成します。  
  
-   7つのポイントの間に6つの赤い直線を描画して、不完全な多角形を形成します。  
  
-   テンション設定を作成します。  
  
-   7つのポイントを介して、開いている緑の閉じた曲線を描画します。  
  
 このメソッドは、1.0 のテンションを使用します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#22)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#22)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">曲線を定義する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <summary>指定したテンションを使用して、指定した <see cref="T:System.Drawing.PointF" /> 構造体の配列を通過するカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過するカーディナルスプラインを描画します。  
  
 点の配列には、曲線を描画するために少なくとも3つの <xref:System.Drawing.PointF> 構造体が含まれている必要があります。  
  
 `tension` パラメーターによって、スプラインの形状が決まります。 `tension` パラメーターの値が 0.0 F の場合、このメソッドは直線セグメントを描画して点を接続します。 通常、`tension` パラメーターは 1.0 F 以下です。 1.0 F を超える値を指定すると、異常な結果が生成されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤と緑のペンを作成します。  
  
-   曲線を定義する7つの点を作成します。  
  
-   7つのポイントの間に6つの赤い直線を描画して、不完全な多角形を形成します。  
  
-   テンション設定を作成します。  
  
-   7つのポイントを介して、開いている緑の閉じた曲線を描画します。  
  
 このメソッドは、1.0 のテンションを使用します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#26)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#26)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="offset"><paramref name="points" /> パラメーターの配列の最初の要素から曲線の開始点までのオフセット。</param>
        <param name="numberOfSegments">曲線に含める開始点以降のセグメント数。</param>
        <summary>指定した <see cref="T:System.Drawing.PointF" /> 構造体の配列を通過するカーディナル スプラインを描画します。 この描画は、配列の先頭からのオフセットから開始されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過するカーディナルスプラインを描画します。  
  
 点の配列には、曲線を描画するために少なくとも3つの <xref:System.Drawing.PointF> 構造体が含まれている必要があります。  
  
 `offset` パラメーターの値は、配列内でスキップする要素の数を指定します。 スキップされた要素の後の最初の要素は、曲線の開始点を表します。  
  
 `numberOfSegments` パラメーターの値は、曲線に描画するセグメントの数を開始点の後に指定します。 `numberOfSegments` パラメーターの値は1以上である必要があります。 `offset` パラメーターの値に `numberOfSegments` パラメーターの値を足した値は、`points` パラメーターの配列内の要素の数より小さくする必要があります。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤と緑のペンを作成します。  
  
-   曲線を定義する7つのポイントを作成します。  
  
-   7つのポイントの間に6つの赤い直線を描画して、不完全な多角形を形成します。  
  
-   開始点のオフセットとセグメントの数を定義します。  
  
-   最後の5つの点を通じて、開いている緑の曲線 (3 番目の点から開始) を描画します。  
  
 メソッドでは、0.5 の既定のテンションが使用されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#24)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#24)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="offset"><paramref name="points" /> パラメーターの配列の最初の要素から曲線の開始点までのオフセット。</param>
        <param name="numberOfSegments">曲線に含める開始点以降のセグメント数。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <summary>指定したテンションを使用して、指定した <see cref="T:System.Drawing.Point" /> 構造体の配列を通過するカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過するカーディナルスプラインを描画します。  
  
 点の配列には、曲線を描画するために少なくとも3つの <xref:System.Drawing.Point> 構造体が含まれている必要があります。  
  
 `offset` パラメーターの値は、配列内でスキップする要素の数を指定します。 スキップされた要素の後の最初の要素は、曲線の開始点を表します。  
  
 `numberOfSegments` パラメーターの値は、曲線に描画するセグメントの数を開始点の後に指定します。 `numberOfSegments` パラメーターの値は1以上である必要があります。 `offset` パラメーターの値に `numberOfSegments` パラメーターの値を足した値は、`points` パラメーターの配列内の要素の数より小さくする必要があります。  
  
 `tension` パラメーターによって、スプラインの形状が決まります。 `tension` パラメーターの値が 0.0 F の場合、このメソッドは直線セグメントを描画して点を接続します。 通常、`tension` パラメーターは 1.0 F 以下です。 1.0 F を超える値を指定すると、異常な結果が生成されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤と緑のペンを作成します。  
  
-   曲線を定義する7つのポイントを作成します。  
  
-   7つのポイントの間に6つの赤い直線を描画して、不完全な多角形を形成します。  
  
-   開始点のオフセットとセグメントの数を定義します。  
  
-   テンションを定義します。  
  
-   最後の5つの点を通じて、開いている緑の曲線 (3 番目の点から開始) を描画します。  
  
 メソッドは、テンションを1.0 に設定します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#21)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#21)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="offset"><paramref name="points" /> パラメーターの配列の最初の要素から曲線の開始点までのオフセット。</param>
        <param name="numberOfSegments">曲線に含める開始点以降のセグメント数。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <summary>指定したテンションを使用して、指定した <see cref="T:System.Drawing.PointF" /> 構造体の配列を通過するカーディナル スプラインを描画します。 この描画は、配列の先頭からのオフセットから開始されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過するカーディナルスプラインを描画します。  
  
 点の配列には、曲線を描画するために少なくとも3つの <xref:System.Drawing.PointF> 構造体が含まれている必要があります。  
  
 `offset` パラメーターの値は、配列内でスキップする要素の数を指定します。 スキップされた要素の後の最初の要素は、曲線の開始点を表します。  
  
 `numberOfSegments` パラメーターの値は、曲線に描画するセグメントの数を開始点の後に指定します。 `numberOfSegments` パラメーターの値は1以上である必要があります。 `offset` パラメーターの値に `numberOfSegments` パラメーターの値を足した値は、`points` パラメーターの配列内の要素の数より小さくする必要があります。  
  
 `tension` パラメーターによって、スプラインの形状が決まります。 `tension` パラメーターの値が 0.0 F の場合、このメソッドは直線セグメントを描画して点を接続します。 通常、`tension` パラメーターは 1.0 F 以下です。 1.0 F を超える値を指定すると、異常な結果が生成されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤と緑のペンを作成します。  
  
-   曲線を定義する7つのポイントを作成します。  
  
-   7つのポイントの間に6つの赤い直線を描画して、不完全な多角形を形成します。  
  
-   開始点のオフセットとセグメントの数を定義します。  
  
-   テンションを定義します。  
  
-   最後の5つの点を通じて、開いている緑の曲線 (3 番目の点から開始) を描画します。  
  
 メソッドは、テンションを1.0 に設定します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#25)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#25)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、高さ、および幅で指定された外接する四角形によって定義される楕円を描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">楕円の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">楕円の境界を定義する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>外接する <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された楕円を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`rect` パラメーターによって指定された外接する四角形によって定義される楕円を描画します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   楕円にバインドする四角形を作成します。  
  
-   楕円を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#27)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#27)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="pen">楕円の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">楕円の境界を定義する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>外接する <see cref="T:System.Drawing.RectangleF" /> で定義された楕円を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`rect` パラメーターによって指定された外接する四角形によって定義される楕円を描画します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   楕円にバインドする四角形を作成します。  
  
-   楕円を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#28)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#28)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">楕円の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">楕円を定義する外接する四角形の左上隅の y 座標。</param>
        <param name="width">楕円を定義する外接する四角形の幅。</param>
        <param name="height">楕円を定義する外接する四角形の高さ。</param>
        <summary>四角形の左上隅の座標、高さ、および幅によって指定される外接する四角形によって定義される楕円を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`x`、`y`、`width`、および `height` パラメーターで表される外接する四角形によって定義される楕円を描画します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   楕円にバインドする四角形の位置とサイズを作成します。  
  
-   楕円を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#29)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#29)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">楕円の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">楕円を定義する外接する四角形の左上隅の y 座標。</param>
        <param name="width">楕円を定義する外接する四角形の幅。</param>
        <param name="height">楕円を定義する外接する四角形の高さ。</param>
        <summary>座標ペア、高さ、および幅で指定された外接する四角形によって定義される楕円を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`x`、`y`、`width`、および `height` パラメーターで表される外接する四角形によって定義される楕円を描画します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   楕円にバインドする四角形の位置とサイズを作成します。  
  
-   楕円を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#30)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#30)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawIcon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.Drawing.Icon" /> によって表されるイメージを指定した座標に描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIcon (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">描画する <see cref="T:System.Drawing.Icon" />。</param>
        <param name="targetRect">ディスプレイ表面における生成イメージの場所とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 <paramref name="icon" /> パラメーターに含まれるイメージは、この四角形領域の大きさに合わせてスケーリングされます。</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 構造体で指定された領域内の指定した <see cref="T:System.Drawing.Icon" /> によって表されるイメージを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   サンプルフォルダー内の標準の Windows アイコンファイル Samを持つアイコンを作成します。  
  
-   アイコンを描画する四角形を作成します。  
  
-   アイコンを画面に描画します。  
  
 四角形の位置によって画面上のアイコンが検索され、四角形のサイズによって描画アイコンの拡大縮小が決まります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#31)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#31)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * int * int -&gt; unit" Usage="graphics.DrawIcon (icon, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="icon">描画する <see cref="T:System.Drawing.Icon" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <summary>指定した <see cref="T:System.Drawing.Icon" /> によって表されるイメージを指定した座標に描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   サンプルフォルダー内の標準の Windows アイコンファイル Samを持つアイコンを作成します。  
  
-   アイコンを描画する左上隅の座標を作成します。  
  
-   アイコンを画面に描画します。  
  
 描画アイコンがスケールされていません。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#32)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#32)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIconUnstretched">
      <MemberSignature Language="C#" Value="public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIconUnstretched(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIconUnstretched(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIconUnstretched : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIconUnstretched (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">描画する <see cref="T:System.Drawing.Icon" />。</param>
        <param name="targetRect">生成イメージの場所とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージはこの四角形に合わせてスケーリングされず、元のサイズが保持されます。 イメージが四角形より大きい場合は、その四角形に収まるようにクリッピングされます。</param>
        <summary>指定した <see cref="T:System.Drawing.Icon" /> によって表されるイメージをスケーリングしないで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   サンプルフォルダー内の標準の Windows アイコンファイル Samを持つアイコンを作成します。  
  
-   アイコンを描画する四角形を作成します。  
  
-   アイコンを画面に描画します。  
  
 四角形の位置によって画面上のアイコンが検索されます。描画アイコンは、スケーリングとクリッピングがありません。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#33)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#33)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImage">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した位置に元のサイズで、指定した <see cref="T:System.Drawing.Image" /> を描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="point">描画イメージの左上隅の位置を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Image" /> を元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> には、ピクセル幅の値と横方向の解像度 (ドット/インチ) の値が格納されます。 イメージの物理的な幅 (インチ単位) は、ピクセル幅を水平方向の解像度で割ったものです。 たとえば、ピクセル幅が216で水平方向の解像度が72ドット/インチのイメージの物理的な幅は3インチです。 同様の解説は、ピクセルの高さと物理的な高さに適用されます。  
  
 このメソッドは、物理サイズを使用してイメージを描画します。そのため、ディスプレイデバイスの解像度 (1 インチあたりのドット数) に関係なく、イメージのサイズは正確にインチ単位になります。 たとえば、イメージの幅が216で、水平方向の解像度が72ドット/インチであるとします。 このメソッドを呼び出して、1インチあたり96ドットの解像度を持つデバイス上にイメージを描画する場合、レンダリングされるイメージのピクセル幅は (216/72) * 96 = 288 になります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージの左上隅を描画するポイントを作成します。  
  
-   スケーリングされていないイメージを画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#34)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#34)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary>指定した <see cref="T:System.Drawing.Image" /> を指定した場所に指定した形状とサイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.Point> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。  
  
 `image` パラメーターによって表されるイメージは、`destPoints` パラメーターによって指定された平行四辺形の形状に合わせて拡大縮小され、傾斜されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画するための平行四辺形を定義する点を作成します。  
  
-   画面にイメージを描画します。  
  
 平行四辺形の位置によって、画面上のイメージが検索されます。また、元のイメージのサイズと平行四辺形のサイズおよび形状によって、描画イメージのスケーリングと傾斜が決まります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#35)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#35)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="point">描画イメージの左上隅を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Image" /> を元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> には、ピクセル幅の値と横方向の解像度 (ドット/インチ) の値が格納されます。 イメージの物理的な幅 (インチ単位) は、ピクセル幅を水平方向の解像度で割ったものです。 たとえば、ピクセル幅が216で水平方向の解像度が72ドット/インチのイメージの物理的な幅は3インチです。 同様の解説は、ピクセルの高さと物理的な高さに適用されます。  
  
 このメソッドは、物理サイズを使用してイメージを描画します。そのため、ディスプレイデバイスの解像度 (1 インチあたりのドット数) に関係なく、イメージのサイズは正確にインチ単位になります。 たとえば、イメージの幅が216で、水平方向の解像度が72ドット/インチであるとします。 このメソッドを呼び出して、1インチあたり96ドットの解像度を持つデバイス上にイメージを描画する場合、レンダリングされるイメージのピクセル幅は (216/72) * 96 = 288 になります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージの左上隅を描画するポイントを作成します。  
  
-   スケーリングされていないイメージを画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary>指定した <see cref="T:System.Drawing.Image" /> を指定した場所に指定した形状とサイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.PointF> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。  
  
 `image` オブジェクトによって表されるイメージは、`destPoints` パラメーターで指定された平行四辺形の形状に合わせて拡大縮小され、傾斜されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画するための平行四辺形を定義する点を作成します。  
  
-   画面にイメージを描画します。  
  
 平行四辺形の位置によって、画面上のイメージが検索されます。また、元のイメージのサイズと平行四辺形のサイズおよび形状によって、描画イメージのスケーリングと傾斜が決まります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#41)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#41)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="rect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `image` オブジェクトによって表される画像は、`rect` 四角形の大きさにスケーリングされます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する四角形を作成します。  
  
-   画面にイメージを描画します。  
  
 四角形の位置によって画面上のイメージが検索され、元のイメージのサイズと四角形のサイズによって描画イメージのスケーリングが決まります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#46)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#46)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="rect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `image` オブジェクトによって表される画像は、`rect` 四角形の大きさにスケーリングされます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する四角形を作成します。  
  
-   画面にイメージを描画します。  
  
 四角形の位置によって画面上のイメージが検索され、イメージの元のサイズと四角形のサイズによって描画イメージのスケーリングが決まります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#56)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#56)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <summary>指定したイメージを座標ペアで指定された位置に元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> には、ピクセル幅の値と横方向の解像度 (ドット/インチ) の値が格納されます。 イメージの物理的な幅 (インチ単位) は、ピクセル幅を水平方向の解像度で割ったものです。 たとえば、ピクセル幅が216で水平方向の解像度が72ドット/インチのイメージの物理的な幅は3インチです。 同様の解説は、ピクセルの高さと物理的な高さに適用されます。  
  
 <xref:System.Drawing.Graphics.DrawImage%2A> メソッドは、物理サイズを使用してイメージを描画します。そのため、ディスプレイデバイスの解像度 (1 インチあたりのドット数) に関係なく、イメージはインチ単位で正しいサイズになります。 たとえば、イメージの幅が216で、水平方向の解像度が72ドット/インチであるとします。 <xref:System.Drawing.Graphics.DrawImage%2A> を呼び出して、1インチあたり96ドットの解像度を持つデバイス上にそのイメージを描画する場合、レンダリングされるイメージのピクセル幅は (216/72) * 96 = 288 になります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある SampImag の例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージの左上隅を描画するポイントの座標を作成します。  
  
-   スケーリングされていないイメージを描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#58)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#58)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Image" /> を元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> には、ピクセル幅の値と横方向の解像度 (ドット/インチ) の値が格納されます。 イメージの物理的な幅 (インチ単位) は、ピクセル幅を水平方向の解像度で割ったものです。 たとえば、ピクセル幅が216で水平方向の解像度が72ドット/インチのイメージの物理的な幅は3インチです。 同様の解説は、ピクセルの高さと物理的な高さに適用されます。  
  
 このメソッドは、物理サイズを使用してイメージを描画します。そのため、ディスプレイデバイスの解像度 (1 インチあたりのドット数) に関係なく、イメージのサイズは正確にインチ単位になります。 たとえば、イメージの幅が216で、水平方向の解像度が72ドット/インチであるとします。 このメソッドを呼び出して、1インチあたり96ドットの解像度を持つデバイス上にイメージを描画する場合、レンダリングされるイメージのピクセル幅は (216/72) * 96 = 288 になります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージの左上隅を描画するポイントの座標を作成します。  
  
-   スケーリングされていないイメージを画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#61)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#61)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="srcRect">描画する <paramref name="image" /> オブジェクトの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.Point> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。  
  
 `srcRect` パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 この部分は、`destPoints` パラメーターによって指定された平行四辺形内に収まるようにスケーリングおよび傾斜されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画するための平行四辺形を定義する点を作成します。  
  
-   描画するイメージの部分を選択する四角形を作成します。  
  
-   グラフィックスの描画単位をピクセルに設定します。  
  
-   画面にイメージを描画します。  
  
 平行四辺形の位置によって、画面上のイメージが検索され、四角形のサイズと平行四辺形のサイズおよび形状によって、描画イメージのスケーリングと傾斜が決まります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#36)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#36)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">描画する <paramref name="image" /> オブジェクトの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.PointF> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。  
  
 `srcRect` パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 この部分は、`destPoints` パラメーターによって指定された平行四辺形内に収まるようにスケーリングおよび傾斜されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する対象の平行四辺形を定義する点を作成します。  
  
-   イメージの一部を抽出するソースの四角形を作成します。  
  
-   ソースの四角形の測定単位をピクセルに設定します。  
  
-   画面にイメージを描画します。  
  
 コピー先の平行四辺形の位置によって、画面上のイメージが検索されます。コピー元の四角形のサイズと描画先の平行四辺形のサイズおよび形状によって、描画イメージの拡大縮小と傾斜が決まり、四角形のサイズによって決まります。元のイメージのどの部分が画面に描画されるか。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#42)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#42)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcRect">描画する <paramref name="image" /> オブジェクトの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcRect` パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 この部分は、`destRect` パラメーターによって指定された四角形の内部に収まるようにスケーリングされます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する対象の四角形を作成します。  
  
-   イメージの一部を抽出するソースの四角形を作成します。  
  
-   ソースの四角形の測定単位をピクセルに設定します。  
  
-   画面にイメージを描画します。  
  
 コピー先の四角形の位置によって、画面上のイメージが検索されます。変換元と変換先の四角形のサイズによって描画イメージのスケーリングが決まり、ソース四角形のサイズによって、元のイメージのどの部分が描画されるかが決まります。ウィンドウ.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#47)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#47)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcRect">描画する <paramref name="image" /> オブジェクトの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcRect` パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 この部分は、`destRect` パラメーターによって指定された四角形の内部に収まるようにスケーリングされます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する対象の四角形を作成します。  
  
-   イメージの一部を抽出するソースの四角形を作成します。  
  
-   ソースの四角形の測定単位をピクセルに設定します。  
  
-   画面にイメージを描画します。  
  
 コピー先の四角形の位置によって、画面上のイメージが検索されます。変換元と変換先の四角形のサイズによって描画イメージのスケーリングが決まり、ソース四角形のサイズによって、元のイメージのどの部分が描画されるかが決まります。ウィンドウ.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#57)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#57)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="srcRect">描画する <paramref name="image" /> オブジェクトの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr"><paramref name="image" /> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.Point> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。  
  
 `srcRect` パラメーターは、描画する`image` オブジェクトの四角形の部分を指定します。 この部分は、`destPoints` パラメーターによって指定された平行四辺形内に収まるようにスケーリングおよび傾斜されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画するための平行四辺形を定義する点を作成します。  
  
-   描画するイメージの部分を選択する四角形を作成します。  
  
-   グラフィックスの描画単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整されたイメージを描画するための追加の平行四辺形を作成します。  
  
-   調整されたイメージの属性を作成し、通常のガンマ値より大きい値に設定します。  
  
-   調整されたイメージを画面に描画します。  
  
 元の調整されていない平行四辺形の場合、位置は画面上のイメージを検索し、四角形のサイズと平行四辺形のサイズおよび形状によって描画イメージの拡大縮小と傾斜が決まります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#37)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#37)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">描画する <paramref name="image" /> オブジェクトの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr"><paramref name="image" /> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.PointF> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。  
  
 `srcRect` パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 この部分は、`destPoints` パラメーターによって指定された平行四辺形内に収まるようにスケーリングおよび傾斜されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する対象の平行四辺形を定義する点を作成します。  
  
-   イメージの一部を抽出するソースの四角形を作成します。  
  
-   ソースの四角形の測定単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整されたイメージを描画するための追加の平行四辺形を作成します。  
  
-   調整されたイメージの属性を作成し、通常のガンマ値より大きい値に設定します。  
  
-   調整されたイメージを画面に描画します。  
  
 元の調整されていないコピー先の平行四辺形では、位置によって画面上のイメージが検索され、コピー元の四角形のサイズと描画先の平行四辺形のサイズおよび形状によって、描画されたイメージのスケーリングと傾斜、およびのサイズが決まります。四角形によって、元のイメージのどの部分が画面に描画されるかが決まります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#43)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#43)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <param name="srcRect">描画する <paramref name="image" /> オブジェクトの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>イメージの一部を指定の位置に描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> には、ピクセル幅の値と横方向の解像度 (ドット/インチ) の値が格納されます。 イメージの物理的な幅 (インチ単位) は、ピクセル幅を水平方向の解像度で割ったものです。 たとえば、ピクセル幅が360で水平方向の解像度が72ドット/インチのイメージの物理的な幅は5インチです。 同様の解説は、ピクセルの高さと物理的な高さに適用されます。  
  
 このメソッドは、物理サイズを使用してイメージの一部を描画します。そのため、イメージの部分は、ディスプレイデバイスの解像度 (1 インチあたりのドット数) に関係なく、正確なサイズがインチ単位で表示されます。 たとえば、イメージ部分の幅が216で、水平方向の解像度が72ドット/インチであるとします。 このメソッドを呼び出して、1インチあたり96ドットの解像度を持つデバイス上にイメージ部分を描画する場合、レンダリングされるイメージ部分のピクセル幅は (216/72) * 96 = 288 になります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージの左上隅を描画する座標を作成します。  
  
-   イメージの一部を抽出するソースの四角形を作成します。  
  
-   ソースの四角形の測定単位をピクセルに設定します。  
  
-   画面にイメージを描画します。  
  
 コピー元の四角形のサイズによって、スケーリングされていない元のイメージのどの部分が画面に描画されるかが決まります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#59)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#59)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <param name="width">描画イメージの幅。</param>
        <param name="height">描画イメージの高さ。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `x`、`y`、`width`、および `height` の各パラメーターで定義された四角形によって、描画イメージの位置とサイズが決まります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する四角形の位置とサイズを作成します。  
  
-   画面にイメージを描画します。  
  
 四角形の位置によって画面上のイメージが検索され、元のイメージのサイズと四角形のサイズによって描画イメージのスケーリングが決まります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#60)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#60)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <param name="srcRect">描画する <see cref="T:System.Drawing.RectangleF" /> の部分を指定する <see cref="T:System.Drawing.Image" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>イメージの一部を指定の位置に描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> には、ピクセル幅の値と横方向の解像度 (ドット/インチ) の値が格納されます。 イメージの物理的な幅 (インチ単位) は、ピクセル幅を水平方向の解像度で割ったものです。 たとえば、ピクセル幅が360で水平方向の解像度が72ドット/インチのイメージの物理的な幅は5インチです。 同様の解説は、ピクセルの高さと物理的な高さに適用されます。  
  
 このメソッドは、物理サイズを使用してイメージの一部を描画します。そのため、イメージの部分は、ディスプレイデバイスの解像度 (1 インチあたりのドット数) に関係なく、正確なサイズがインチ単位で表示されます。 たとえば、イメージ部分の幅が216で、水平方向の解像度が72ドット/インチであるとします。 このメソッドを呼び出して、1インチあたり96ドットの解像度を持つデバイス上にイメージ部分を描画する場合、レンダリングされるイメージ部分のピクセル幅は (216/72) * 96 = 288 になります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージの左上隅を描画する座標を作成します。  
  
-   イメージの一部を抽出するソースの四角形を作成します。  
  
-   ソースの四角形の測定単位をピクセルに設定します。  
  
-   画面にイメージを描画します。  
  
 コピー元の四角形のサイズによって、スケーリングされていない元のイメージのどの部分が画面に描画されるかが決まります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#62)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#62)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <param name="width">描画イメージの幅。</param>
        <param name="height">描画イメージの高さ。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `x`、`y`、`width`、および `height` の各パラメーターで定義された四角形によって、描画イメージの位置とサイズが決まります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する四角形の位置とサイズを作成します。  
  
-   画面にイメージを描画します。  
  
 四角形の位置によって画面上のイメージが検索され、元のイメージのサイズと四角形のサイズによって描画イメージのスケーリングが決まります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#63)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#63)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">描画する <paramref name="image" /> オブジェクトの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr"><paramref name="image" /> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.PointF> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。  
  
 `srcRect` パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 この部分は、`destPoints` パラメーターによって指定された平行四辺形内に収まるようにスケーリングおよび傾斜されます。  
  
 `callback` パラメーターを使用したこのオーバーロードは、アプリケーションによって決定された基準に従ってイメージの描画を開始した後に、イメージの描画を停止する手段を提供します。 たとえば、アプリケーションで大きなイメージの描画を開始し、ユーザーが画面からイメージをスクロールすることがあります。この場合、アプリケーションは描画を停止する可能性があります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードでは、最初に <xref:System.Drawing.Graphics.DrawImageAbort> デリゲートのコールバックメソッドを定義します。定義は単純であり、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが null `callBackData` パラメーターを使用してそれを呼び出すかどうかをテストするだけです。 この例の本体では、次のアクションを実行します。  
  
-   <xref:System.Drawing.Graphics.DrawImageAbort> コールバックメソッドのインスタンスを作成します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画するための平行四辺形を定義する点を作成します。  
  
-   描画するイメージの部分を選択する四角形を作成します。  
  
-   グラフィックスの描画単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整されたイメージを描画するための追加の平行四辺形を作成します。  
  
-   調整されたイメージの属性を作成し、通常のガンマ値より大きい値に設定します。  
  
-   調整されたイメージを画面に描画します。  
  
 元の調整されていない平行四辺形の場合、位置は画面上のイメージを検索し、四角形のサイズと平行四辺形のサイズおよび形状によって描画イメージの拡大縮小と傾斜が決まります。  
  
 この例では `callBackData` パラメーターを渡さないオーバーロードを使用しているため、<xref:System.Drawing.Graphics.DrawImageAbort> コールバックは `true`を返します。これにより、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが終了します。この例に含まれている例外処理コードは、イメージを描画するのではなく、例外テキストを出力します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#38)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#38)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">描画する <paramref name="image" /> オブジェクトの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr"><paramref name="image" /> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.PointF> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。  
  
 `srcRect` パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 この部分は、`destPoints` パラメーターによって指定された平行四辺形内に収まるようにスケーリングおよび傾斜されます。  
  
 `callback` パラメーターを使用したこのオーバーロードは、アプリケーションによって決定された基準に従ってイメージの描画を開始した後に、イメージの描画を停止する手段を提供します。 たとえば、アプリケーションで大きなイメージの描画を開始し、ユーザーが画面からイメージをスクロールすることがあります。この場合、アプリケーションは描画を停止する可能性があります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードでは、最初に <xref:System.Drawing.Graphics.DrawImageAbort> デリゲートのコールバックメソッドを定義します。定義は単純であり、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが null `callBackData` パラメーターを使用してそれを呼び出すかどうかをテストするだけです。 この例の本体では、次のアクションを実行します。  
  
-   <xref:System.Drawing.Graphics.DrawImageAbort> コールバックメソッドのインスタンスを作成します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画するための平行四辺形を定義する点を作成します。  
  
-   描画するイメージの部分を選択する四角形を作成します。  
  
-   グラフィックスの描画単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整されたイメージを描画するための追加の平行四辺形を作成します。  
  
-   調整されたイメージの属性を作成し、通常のガンマ値より大きい値に設定します。  
  
-   調整されたイメージを画面に描画します。  
  
 元の調整されていない平行四辺形の場合、位置は画面上のイメージを検索し、四角形のサイズと平行四辺形のサイズおよび形状によって描画イメージの拡大縮小と傾斜が決まります。  
  
 この例では `callBackData` パラメーターを渡さないオーバーロードを使用しているため、<xref:System.Drawing.Graphics.DrawImageAbort> コールバックは `true`を返します。これにより、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが終了します。この例に含まれている例外処理コードは、イメージを描画するのではなく、例外テキストを出力します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#44)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#44)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">描画する <paramref name="image" /> オブジェクトの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr"><paramref name="image" /> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <param name="callbackData"><see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> メソッドの実行を停止するかどうかをチェックするときに使用する、<see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲートの追加データを指定する値。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.PointF> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。  
  
 `srcRect` パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 この部分は、`destPoints` パラメーターによって指定された平行四辺形内に収まるようにスケーリングおよび傾斜されます。  
  
 `callback` パラメーターと `callbackData` パラメーターを使用したこのオーバーロードは、アプリケーションによって決定された条件とデータに従ってイメージの描画を停止する手段を提供します。 たとえば、アプリケーションで大きなイメージの描画を開始し、ユーザーが画面からイメージをスクロールすることがあります。この場合、アプリケーションは描画を停止する可能性があります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードでは、最初に <xref:System.Drawing.Graphics.DrawImageAbort> デリゲートのコールバックメソッドを定義します。定義は単純であり、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが null `callBackData` パラメーターを使用してそれを呼び出すかどうかをテストするだけです。 この例の本体では、次のアクションを実行します。  
  
-   <xref:System.Drawing.Graphics.DrawImageAbort> コールバックメソッドのインスタンスを作成します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画するための平行四辺形を定義する点を作成します。  
  
-   描画するイメージの部分を選択する四角形を作成します。  
  
-   グラフィックスの描画単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整されたイメージを描画するための追加の平行四辺形を作成します。  
  
-   調整されたイメージの属性を作成し、通常のガンマ値より大きい値に設定します。  
  
-   調整されたイメージを画面に描画します。  
  
 元の調整されていない平行四辺形の場合、位置は画面上のイメージを検索し、四角形のサイズと平行四辺形のサイズおよび形状によって描画イメージの拡大縮小と傾斜が決まります。  
  
 この例では `callBackData` パラメーターを渡すオーバーロードを使用しているため、<xref:System.Drawing.Graphics.DrawImageAbort> コールバックは `false`を返します。これにより、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが続行され、調整されたイメージが画面に描画されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#39)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#39)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#39)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">描画する <paramref name="image" /> オブジェクトの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr"><paramref name="image" /> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <param name="callbackData"><see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> メソッドの実行を停止するかどうかをチェックするときに使用する、<see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲートの追加データを指定する値。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.PointF> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。  
  
 `srcRect` パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 この部分は、`destPoints` パラメーターによって指定された平行四辺形内に収まるようにスケーリングおよび傾斜されます。  
  
 `callback` パラメーターと `callbackData` パラメーターを使用したこのオーバーロードは、アプリケーションによって決定された条件とデータに従ってイメージの描画を停止する手段を提供します。 たとえば、アプリケーションで大きなイメージの描画を開始し、ユーザーが画面からイメージをスクロールすることがあります。この場合、アプリケーションは描画を停止する可能性があります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、`Pa`<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードでは、最初に <xref:System.Drawing.Graphics.DrawImageAbort> デリゲートのコールバックメソッドを定義します。定義は単純であり、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが null `callBackData` パラメーターを使用してそれを呼び出すかどうかをテストするだけです。 この例の本体では、次のアクションを実行します。  
  
-   <xref:System.Drawing.Graphics.DrawImageAbort> コールバックメソッドのインスタンスを作成します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画するための平行四辺形を定義する点を作成します。  
  
-   描画するイメージの部分を選択する四角形を作成します。  
  
-   グラフィックスの描画単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整されたイメージを描画するための追加の平行四辺形を作成します。  
  
-   調整されたイメージの属性を作成し、通常のガンマ値より大きい値に設定します。  
  
-   調整されたイメージを画面に描画します。  
  
 元の調整されていない平行四辺形の場合、位置は画面上のイメージを検索し、四角形のサイズと平行四辺形のサイズおよび形状によって描画イメージの拡大縮小と傾斜が決まります。  
  
 この例では `callBackData` パラメーターを渡すオーバーロードを使用しているため、<xref:System.Drawing.Graphics.DrawImageAbort> コールバックは `false`を返します。これにより、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが続行され、調整されたイメージが画面に描画されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#45)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#45)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`、`srcY`、`srcWidth`、および `srcHeight` の各パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 四角形は、ソースイメージの左上隅を基準としています。 この部分は、`destRect` パラメーターによって指定された四角形の内部に収まるようにスケーリングされます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する対象の四角形を作成します。  
  
-   イメージの一部を抽出するソース四角形の座標を作成します。  
  
-   ソースの四角形の測定単位をピクセルに設定します。  
  
-   画面にイメージを描画します。  
  
 コピー先の四角形の位置は、画面上のイメージを検索します。また、変換元と変換先の四角形のサイズによって描画イメージのスケーリングが決まり、ソースの四角形のサイズによって、元のイメージのどの部分が描画されるかが決まります。ウィンドウ.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#48)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#48)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`、`srcY`、`srcWidth`、および `srcHeight` の各パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 四角形は、ソースイメージの左上隅を基準としています。 この部分は、`destRect` パラメーターによって指定された四角形の内部に収まるようにスケーリングされます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する対象の四角形の座標を作成します。  
  
-   イメージの一部を抽出するソースの四角形を作成します。  
  
-   ソースの四角形の測定単位をピクセルに設定します。  
  
-   画面にイメージを描画します。  
  
 コピー先の四角形の位置によって、画面上のイメージが検索されます。変換元と変換先の四角形のサイズによって描画イメージのスケーリングが決まり、ソース四角形のサイズによって、元のイメージのどの部分が描画されるかが決まります。ウィンドウ.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#52)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#52)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr"><paramref name="image" /> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`、`srcY`、`srcWidth`、および `srcHeight` の各パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 四角形は、ソースイメージの左上隅を基準としています。 この部分は、`destRect` パラメーターによって指定された四角形の内部に収まるようにスケーリングされます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する対象の四角形を作成します。  
  
-   イメージの一部を抽出するソース四角形の座標を作成します。  
  
-   ソースの四角形の測定単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整されたイメージを描画するための追加の四角形を作成します。  
  
-   調整されたイメージの属性を作成し、通常のガンマ値より大きい値に設定します。  
  
-   調整されたイメージを画面に描画します。  
  
 元の未調整の移動先の四角形の場合、画面上の位置によってイメージが検索され、変換元と変換先の四角形のサイズによって描画イメージのスケーリングが決まります。また、ソース四角形のサイズによって、元のイメージが画面に描画されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#49)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#49)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#49)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttrs"><paramref name="image" /> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`、`srcY`、`srcWidth`、および `srcHeight` の各パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 四角形は、ソースイメージの左上隅を基準としています。 この部分は、`destRect` パラメーターによって指定された四角形の内部に収まるようにスケーリングされます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する対象の四角形を作成します。  
  
-   イメージの一部を抽出するソース四角形の座標を作成します。  
  
-   ソースの四角形の測定単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整されたイメージを描画するための追加の四角形を作成します。  
  
-   調整されたイメージの属性を作成し、通常のガンマ値より大きい値に設定します。  
  
-   調整されたイメージを画面に描画します。  
  
 元の未調整の移動先の四角形の場合、画面上の位置によってイメージが検索され、変換元と変換先の四角形のサイズによって描画イメージのスケーリングが決まります。また、ソース四角形のサイズによって、元のイメージが画面に描画されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#53)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#53)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr"><paramref name="image" /> のカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`、`srcY`、`srcWidth`、および `srcHeight` の各パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 四角形は、ソースイメージの左上隅を基準としています。 この部分は、`destRect` オブジェクトによって指定された四角形の内部に収まるようにスケーリングされます。  
  
 `callback` パラメーターを使用したこのオーバーロードは、アプリケーションによって決定された基準に従ってイメージの描画を開始した後に、イメージの描画を停止する手段を提供します。 たとえば、アプリケーションで大きなイメージの描画を開始し、ユーザーが画面からイメージをスクロールすることがあります。この場合、アプリケーションは描画を停止する可能性があります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードでは、最初に <xref:System.Drawing.Graphics.DrawImageAbort> デリゲートのコールバックメソッドを定義します。定義は単純であり、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが null `callBackData` パラメーターを使用してそれを呼び出すかどうかをテストするだけです。 この例の本体では、次のアクションを実行します。  
  
-   <xref:System.Drawing.Graphics.DrawImageAbort> コールバックメソッドのインスタンスを作成します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する対象の四角形を定義するポイントを作成します。  
  
-   描画するイメージの部分を選択するソース四角形を作成します。  
  
-   グラフィックスの描画単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整されたイメージを描画するための追加のコピー先の四角形を作成します。  
  
-   調整されたイメージの属性を作成し、通常のガンマ値より大きい値に設定します。  
  
-   調整されたイメージを画面に描画します。  
  
 元の未調整の移動先の四角形では、位置が画面上のイメージを検索し、コピー元の四角形のサイズと変換先の四角形のサイズおよび形状によって描画イメージの拡大縮小が決定されます。  
  
 この例では `callBackData` パラメーターを渡さないオーバーロードを使用しているため、<xref:System.Drawing.Graphics.DrawImageAbort> コールバックは `true`を返します。これにより、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが終了します。この例に含まれている例外処理コードは、イメージを描画するのではなく、例外テキストを出力します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#50)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#50)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttrs"><paramref name="image" /> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`、`srcY`、`srcWidth`、および `srcHeight` の各パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 四角形は、ソースイメージの左上隅を基準としています。 この部分は、`destRect` パラメーターによって指定された四角形の内部に収まるようにスケーリングされます。  
  
 `callback` パラメーターを使用したこのオーバーロードは、アプリケーションによって決定された基準に従ってイメージの描画を開始した後に、イメージの描画を停止する手段を提供します。 たとえば、アプリケーションで大きなイメージの描画を開始し、ユーザーが画面からイメージをスクロールすることがあります。この場合、アプリケーションは描画を停止する可能性があります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードでは、最初に <xref:System.Drawing.Graphics.DrawImageAbort> デリゲートのコールバックメソッドを定義します。定義は単純であり、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが null `callBackData` パラメーターを使用してそれを呼び出すかどうかをテストするだけです。 この例の本体では、次のアクションを実行します。  
  
-   <xref:System.Drawing.Graphics.DrawImageAbort> コールバックメソッドのインスタンスを作成します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する対象の四角形を定義するポイントを作成します。  
  
-   描画するイメージの部分を選択するソース四角形を作成します。  
  
-   グラフィックスの描画単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整されたイメージを描画するための追加のコピー先の四角形を作成します。  
  
-   調整されたイメージの属性を作成し、通常のガンマ値より大きい値に設定します。  
  
-   調整されたイメージを画面に描画します。  
  
 元の未調整の移動先の四角形では、位置が画面上のイメージを検索し、コピー元の四角形のサイズと変換先の四角形のサイズおよび形状によって描画イメージの拡大縮小が決定されます。  
  
 この例では `callBackData` パラメーターを渡さないオーバーロードを使用しているため、<xref:System.Drawing.Graphics.DrawImageAbort> コールバックは `true`を返します。これにより、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが終了します。この例に含まれている例外処理コードは、イメージを描画するのではなく、例外テキストを出力します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#54)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#54)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttrs"><paramref name="image" /> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <param name="callbackData"><see langword="DrawImage" /> メソッドの実行を停止するかどうかをチェックするときに使用する、<see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲートの追加データを指定する値。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`、`srcY`、`srcWidth`、および `srcHeight` の各パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 四角形は、ソースイメージの左上隅を基準としています。 この部分は、`destRect` パラメーターによって指定された四角形の内部に収まるようにスケーリングされます。  
  
 `callback` パラメーターと `callbackData` パラメーターを使用したこのオーバーロードは、アプリケーションによって決定された条件とデータに従ってイメージの描画を停止する手段を提供します。 たとえば、アプリケーションで大きなイメージの描画を開始し、ユーザーが画面からイメージをスクロールすることがあります。この場合、アプリケーションは描画を停止する可能性があります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードでは、最初に <xref:System.Drawing.Graphics.DrawImageAbort> デリゲートのコールバックメソッドを定義します。定義は単純であり、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが null `callBackData` パラメーターを使用してそれを呼び出すかどうかをテストするだけです。 この例の本体では、次のアクションを実行します。  
  
-   <xref:System.Drawing.Graphics.DrawImageAbort> コールバックメソッドのインスタンスを作成します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する対象の四角形を定義するポイントを作成します。  
  
-   描画するイメージの部分を選択するソース四角形を作成します。  
  
-   グラフィックスの描画単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整されたイメージを描画するための追加のコピー先の四角形を作成します。  
  
-   調整されたイメージの属性を作成し、通常のガンマ値より大きい値に設定します。  
  
-   調整されたイメージを画面に描画します。  
  
 元の未調整の移動先の四角形では、位置が画面上のイメージを検索し、コピー元の四角形のサイズと変換先の四角形のサイズおよび形状によって描画イメージの拡大縮小が決定されます。  
  
 この例では `callBackData` パラメーターを渡すオーバーロードを使用しているため、<xref:System.Drawing.Graphics.DrawImageAbort> コールバックは `false`を返します。これにより、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが続行され、調整されたイメージが画面に描画されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#51)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#51)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttrs"><paramref name="image" /> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <param name="callbackData"><see langword="DrawImage" /> メソッドの実行を停止するかどうかをチェックするときに使用する、<see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲートの追加データを指定する値。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`、`srcY`、`srcWidth`、および `srcHeight` の各パラメーターは、描画する `image` オブジェクトの四角形の部分を指定します。 四角形は、ソースイメージの左上隅を基準としています。 この部分は、`destRect` パラメーターによって指定された四角形の内部に収まるようにスケーリングされます。  
  
 `callback` パラメーターと `callbackData` パラメーターを使用したこのオーバーロードは、アプリケーションによって決定された条件とデータに従ってイメージの描画を停止する手段を提供します。 たとえば、アプリケーションで大きなイメージの描画を開始し、ユーザーが画面からイメージをスクロールすることがあります。この場合、アプリケーションは描画を停止する可能性があります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードでは、最初に <xref:System.Drawing.Graphics.DrawImageAbort> デリゲートのコールバックメソッドを定義します。定義は単純であり、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが null `callBackData` パラメーターを使用してそれを呼び出すかどうかをテストするだけです。 この例の本体では、次のアクションを実行します。  
  
-   <xref:System.Drawing.Graphics.DrawImageAbort> コールバックメソッドのインスタンスを作成します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージを描画する対象の四角形を定義するポイントを作成します。  
  
-   描画するイメージの部分を選択するソース四角形を作成します。  
  
-   グラフィックスの描画単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整されたイメージを描画するための追加のコピー先の四角形を作成します。  
  
-   調整されたイメージの属性を作成し、通常のガンマ値より大きい値に設定します。  
  
-   調整されたイメージを画面に描画します。  
  
 元の未調整の移動先の四角形では、位置が画面上のイメージを検索し、コピー元の四角形のサイズと変換先の四角形のサイズおよび形状によって描画イメージの拡大縮小が決定されます。  
  
 この例では `callBackData` パラメーターを渡すオーバーロードを使用しているため、<xref:System.Drawing.Graphics.DrawImageAbort> コールバックは `false`を返します。これにより、<xref:System.Drawing.Graphics.DrawImage%2A> メソッドが続行され、調整されたイメージが画面に描画されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#55)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#55)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImageUnscaled">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したイメージを座標ペアで指定された位置に元の物理サイズで描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImageUnscaled (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="point">描画するイメージの左上隅を指定する <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <summary>指定した位置に、指定したイメージを元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> には、ピクセル幅の値と横方向の解像度 (ドット/インチ) の値が格納されます。 イメージの物理的な幅 (インチ単位) は、ピクセル幅を水平方向の解像度で割ったものです。 たとえば、ピクセル幅が216で水平方向の解像度が72ドット/インチのイメージの物理的な幅は3インチです。 同様の解説は、ピクセルの高さと物理的な高さに適用されます。  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> メソッドは、物理サイズを使用してイメージを描画します。そのため、ディスプレイデバイスの解像度 (1 インチあたりのドット数) に関係なく、イメージはインチ単位で正しいサイズになります。 たとえば、イメージの幅が216で、水平方向の解像度が72ドット/インチであるとします。 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> を呼び出して、1インチあたり96ドットの解像度を持つデバイス上にそのイメージを描画する場合、レンダリングされるイメージのピクセル幅は (216/72) * 96 = 288 になります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージの左上隅を描画するポイントを作成します。  
  
-   物理的なサイズを使用してイメージ全体を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#64)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#64)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaled (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="rect">描画するイメージの左上隅を指定する <see cref="T:System.Drawing.Rectangle" />。 四角形の X プロパティおよび Y プロパティは、左上隅を指定します。 Width プロパティおよび Height プロパティは無視されます。</param>
        <summary>指定した位置に、指定したイメージを元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> には、ピクセル幅の値と横方向の解像度 (ドット/インチ) の値が格納されます。 イメージの物理的な幅 (インチ単位) は、ピクセル幅を水平方向の解像度で割ったものです。 たとえば、ピクセル幅が216で水平方向の解像度が72ドット/インチのイメージの物理的な幅は3インチです。 同様の解説は、ピクセルの高さと物理的な高さに適用されます。  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> メソッドは、物理サイズを使用してイメージを描画します。そのため、ディスプレイデバイスの解像度 (1 インチあたりのドット数) に関係なく、イメージはインチ単位で正しいサイズになります。 たとえば、イメージの幅が216で、水平方向の解像度が72ドット/インチであるとします。 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> を呼び出して、1インチあたり96ドットの解像度を持つデバイス上にそのイメージを描画する場合、レンダリングされるイメージのピクセル幅は (216/72) * 96 = 288 になります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <summary>指定したイメージを座標ペアで指定された位置に元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> には、ピクセル幅の値と横方向の解像度 (ドット/インチ) の値が格納されます。 イメージの物理的な幅 (インチ単位) は、ピクセル幅を水平方向の解像度で割ったものです。 たとえば、ピクセル幅が216で水平方向の解像度が72ドット/インチのイメージの物理的な幅は3インチです。 同様の解説は、ピクセルの高さと物理的な高さに適用されます。  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> メソッドは、物理サイズを使用してイメージを描画します。そのため、ディスプレイデバイスの解像度 (1 インチあたりのドット数) に関係なく、イメージはインチ単位で正しいサイズになります。 たとえば、イメージの幅が216で、水平方向の解像度が72ドット/インチであるとします。 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> を呼び出して、1インチあたり96ドットの解像度を持つデバイス上にそのイメージを描画する場合、レンダリングされるイメージのピクセル幅は (216/72) * 96 = 288 になります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例のフォルダーにある JPEG ファイル SampImag からイメージを作成します。  
  
-   イメージの左上隅を描画するポイントを作成します。  
  
-   物理的なサイズを使用してイメージ全体を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#65)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#65)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#65)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <param name="width">使用しません。</param>
        <param name="height">使用しません。</param>
        <summary>指定した位置に、指定したイメージを元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> には、ピクセル幅の値と横方向の解像度 (ドット/インチ) の値が格納されます。 イメージの物理的な幅 (インチ単位) は、ピクセル幅を水平方向の解像度で割ったものです。 たとえば、ピクセル幅が216で水平方向の解像度が72ドット/インチのイメージの物理的な幅は3インチです。 同様の解説は、ピクセルの高さと物理的な高さに適用されます。  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> メソッドは、物理サイズを使用してイメージを描画します。そのため、ディスプレイデバイスの解像度 (1 インチあたりのドット数) に関係なく、イメージはインチ単位で正しいサイズになります。 たとえば、イメージの幅が216で、水平方向の解像度が72ドット/インチであるとします。 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> を呼び出して、1インチあたり96ドットの解像度を持つデバイス上にそのイメージを描画する場合、レンダリングされるイメージのピクセル幅は (216/72) * 96 = 288 になります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaledAndClipped">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaledAndClipped(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaledAndClipped(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaledAndClipped : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaledAndClipped (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="rect">イメージを描画する <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>指定されたイメージをスケーリングせずに描画します。必要に応じて、指定された四角形内に収まるようにイメージをクリップします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <xref:System.Drawing.Graphics.DrawImageUnscaledAndClipped%2A> メソッドの使用方法を次の例に示します。 この例を実行するには、Windows フォームに貼り付けます。 フォームの <xref:System.Windows.Forms.Control.Paint> イベントを処理し、<xref:System.Windows.Forms.Control.Paint> イベント処理メソッドから `DrawImageUnscaled` メソッドを呼び出して、`e` を <xref:System.Windows.Forms.PaintEventArgs>として渡します。  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#8)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLine">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペアで指定された 2 つの点を結ぶ直線を描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">直線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="pt1">接続する最初の点を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="pt2">接続する 2 番目の点を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <summary>2 つの <see cref="T:System.Drawing.Point" /> 構造体を接続する直線を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   線の端点の点を作成します。  
  
-   画面に線を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#66)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#66)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#66)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">ペンを使用した直線と図形の描画</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">直線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="pt1">接続する最初の点を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="pt2">接続する 2 番目の点を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <summary>2 つの <see cref="T:System.Drawing.PointF" /> 構造体を接続する直線を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`pt1` パラメーターと p`2` パラメーターで指定された2つの点を結ぶ線を描画します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   線の端点の点を作成します。  
  
-   画面に線を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#67)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#67)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">ペンを使用した直線と図形の描画</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, int32 x1, int32 y1, int32 x2, int32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">直線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x1">最初の点の x 座標。</param>
        <param name="y1">最初の点の y 座標。</param>
        <param name="x2">2 番目の点の x 座標。</param>
        <param name="y2">2 番目の点の y 座標。</param>
        <summary>座標ペアで指定された 2 つの点を結ぶ直線を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`x1`、`y1`、`x2`、および `y2` の各パラメーターで指定された2つの点を結ぶ線を描画します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   線の端点の座標を作成します。  
  
-   画面に線を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#68)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#68)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">ペンを使用した直線と図形の描画</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">直線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x1">最初の点の x 座標。</param>
        <param name="y1">最初の点の y 座標。</param>
        <param name="x2">2 番目の点の x 座標。</param>
        <param name="y2">2 番目の点の y 座標。</param>
        <summary>座標ペアで指定された 2 つの点を結ぶ直線を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`x1`、`y1`、`x2`、および `y2` の各パラメーターで指定された2つの点を結ぶ線を描画します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   線の端点の座標を作成します。  
  
-   画面に線を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#69)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#69)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">ペンを使用した直線と図形の描画</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLines">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Point" /> 構造体の配列を接続する一連の線分を描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">線分の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">接続する複数の点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.Point" /> 構造体の配列を接続する一連の線分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、終了点の配列をつなぐ一連の線を描画します。 配列内の最初の2つの点は、最初の行を指定します。 各追加ポイントは、開始点が前の線分の終点である線分の終点を指定します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   直線のセグメントのポイントの配列を作成します。  
  
-   接続された線分を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#70)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#70)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">線分の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">接続する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.PointF" /> 構造体の配列を接続する一連の線分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、終了点の配列をつなぐ一連の線を描画します。 配列内の最初の2つの点は、最初の行を指定します。 各追加ポイントは、開始点が前の線分の終点である線分の終点を指定します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   コードは、黒のペンを作成します。  
  
-   直線のセグメントのポイントの配列を作成します。  
  
-   接続された線分を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#71)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#71)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPath(System::Drawing::Pen ^ pen, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.DrawPath : System.Drawing.Pen * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.DrawPath (pen, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="pen">パスの色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="path">描画する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 グラフィックコンテキストの現在の変換は、描画される前に <xref:System.Drawing.Drawing2D.GraphicsPath> に適用されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   グラフィックスパスオブジェクトを作成し、楕円を追加します。  
  
-   黒のペンを作成します。  
  
-   グラフィックスパスを画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#72)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#72)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="path" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、幅、および高さで指定された楕円と 2 本の半径によって定義される扇形を描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">扇形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">扇形の形状の元となる楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 (度単位)。</param>
        <param name="sweepAngle"><paramref name="startAngle" /> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 (度単位)。</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 構造体と 2 本の半径によって指定された楕円で定義される扇形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の円弧と、円弧の終点と交差する2つの放射状線で定義される扇形を描画します。楕円は、外接する四角形によって定義されます。 円グラフは、`startAngle` と `sweepAngle` パラメーターで定義された2つの放射状線と、それらの放射状線と楕円の交差部分との間の弧で構成されます。  
  
 `sweepAngle` パラメーターが360°を超えるか、-360 度より小さい場合、それぞれが360度または-360 度であるかのように処理されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   完全な楕円の境界となる四角形を作成します。  
  
-   (X 軸を基準として) 描画を開始する角度を定義します。これにより、(両方とも時計回りの方向に) 描画されます。  
  
-   円のセグメントを画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#73)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#73)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">扇形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">扇形の形状の元となる楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 (度単位)。</param>
        <param name="sweepAngle"><paramref name="startAngle" /> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 (度単位)。</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 構造体と 2 本の半径によって指定された楕円で定義される扇形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の円弧と、円弧の終点と交差する2つの放射状線で定義される扇形を描画します。楕円は、外接する四角形によって定義されます。 円グラフは、`startAngle` と `sweepAngle` パラメーターで定義された2つの放射状線と、それらの放射状線と楕円の交差部分との間の弧で構成されます。  
  
 `sweepAngle` パラメーターが360°を超えるか、-360 度より小さい場合、それぞれが360度または-360 度であるかのように処理されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   完全な楕円の境界となる四角形を作成します。  
  
-   (X 軸を基準として) 描画を開始する角度を定義します。これにより、(両方とも時計回りの方向に) 描画されます。  
  
-   円のセグメントを画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#74)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#74)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">扇形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">扇形の形状の元となる楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">扇形の形状の元となる楕円を定義する外接する四角形の左上隅の y 座標。</param>
        <param name="width">扇形の形状の元となる楕円を定義する外接する四角形の幅。</param>
        <param name="height">扇形の形状の元となる楕円を定義する外接する四角形の高さ。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 (度単位)。</param>
        <param name="sweepAngle"><paramref name="startAngle" /> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 (度単位)。</param>
        <summary>座標ペア、幅、および高さで指定された楕円と 2 本の半径によって定義される扇形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の円弧と、円弧の終点と交差する2つの放射状線で定義される扇形を描画します。楕円は、`x`、`y`、`width`、および `height` パラメーターで表される外接する四角形によって定義されます。 円グラフは、`startAngle` と `sweepAngle` パラメーターで定義された2つの放射状線と、それらの放射状線と楕円の交差部分との間の弧で構成されます。  
  
 `sweepAngle` パラメーターが360°を超えるか、-360 度より小さい場合、それぞれが360度または-360 度であるかのように処理されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   完全な楕円の境界となる四角形の位置とサイズを作成します。  
  
-   (X 軸を基準として) 描画を開始する角度を定義します。これにより、(両方とも時計回りの方向に) 描画されます。  
  
-   円の形状を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#75)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#75)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">扇形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">扇形の形状の元となる楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">扇形の形状の元となる楕円を定義する外接する四角形の左上隅の y 座標。</param>
        <param name="width">扇形の形状の元となる楕円を定義する外接する四角形の幅。</param>
        <param name="height">扇形の形状の元となる楕円を定義する外接する四角形の高さ。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 (度単位)。</param>
        <param name="sweepAngle"><paramref name="startAngle" /> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 (度単位)。</param>
        <summary>座標ペア、幅、および高さで指定された楕円と 2 本の半径によって定義される扇形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の円弧と、円弧の終点と交差する2つの放射状線で定義される扇形を描画します。楕円は、`x`、`y`、`width`、および `height` パラメーターで表される外接する四角形によって定義されます。 円グラフは、`startAngle` と `sweepAngle` パラメーターで定義された2つの放射状線と、それらの放射状線と楕円の交差部分との間の弧で構成されます。  
  
 `sweepAngle` パラメーターが360°を超えるか、-360 度より小さい場合、それぞれが360度または-360 度であるかのように処理されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   完全な楕円の境界となる四角形の位置とサイズを作成します。  
  
-   (X 軸を基準として) 描画を開始する角度を定義します。これにより、(両方とも時計回りの方向に) 描画されます。  
  
-   円のセグメントを画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#76)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#76)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Point" /> 構造体の配列で定義された多角形を描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">多角形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">多角形の頂点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.Point" /> 構造体の配列で定義された多角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列内の2つの連続するポイントのすべてのペアは、多角形の辺を指定します。 また、配列の最後のポイントと最初のポイントが一致しない場合は、多角形の最後の辺を指定します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   多角形の頂点の7つのポイントの配列を作成します。  
  
-   多角形を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#78)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#78)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">多角形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">多角形の頂点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.PointF" /> 構造体の配列で定義された多角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列内の2つの連続するポイントのすべてのペアは、多角形の辺を指定します。 さらに、最後の点と配列の最初のポイントが一致しない場合は、多角形の最後の辺を指定します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   多角形の頂点の7つのポイントの配列を作成します。  
  
-   多角形を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#77)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#77)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、幅、および高さで指定された四角形を描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawRectangle (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">四角形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">描画する四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 構造体で指定された四角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.RectangleF>の描画方法の詳細については、「<xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>」を参照してください。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   四角形を作成します。  
  
-   四角形を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#79)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#79)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#79)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">四角形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">描画する四角形の左上隅の x 座標。</param>
        <param name="y">描画する四角形の左上隅の y 座標。</param>
        <param name="width">描画する四角形の幅。</param>
        <param name="height">描画する四角形の高さ。</param>
        <summary>座標ペア、幅、および高さで指定された四角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.RectangleF>の描画方法の詳細については、「<xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>」を参照してください。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   四角形の位置とサイズを作成します。  
  
-   四角形を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#80)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#80)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">四角形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">描画する四角形の左上隅の x 座標。</param>
        <param name="y">描画する四角形の左上隅の y 座標。</param>
        <param name="width">描画する四角形の幅。</param>
        <param name="height">描画する四角形の高さ。</param>
        <summary>座標ペア、幅、および高さで指定された四角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.RectangleF>の描画方法の詳細については、「<xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>」を参照してください。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   四角形の位置とサイズを作成します。  
  
-   四角形を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#81)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#81)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#81)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Rectangle" /> 構造体で指定された一連の四角形を描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="pen">四角形のアウトラインの色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rects">描画する四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 構造体で指定された一連の四角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   3つの四角形の配列を作成します。  
  
-   四角形を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#82)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#82)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="rects" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" /> は長さゼロの配列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="pen">四角形のアウトラインの色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rects">描画する四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 構造体で指定された一連の四角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   3つの四角形の配列を作成します。  
  
-   四角形を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#83)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#83)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#83)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="rects" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" /> は長さゼロの配列です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Brush" /> オブジェクトと <see cref="T:System.Drawing.Font" /> オブジェクトで、指定した文字列を描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawString (s, font, brush, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="s">描画する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="brush">描画するテキストの色とテクスチャを決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="point">描画するテキストの左上隅を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Brush" /> オブジェクトと <see cref="T:System.Drawing.Font" /> オブジェクトで、指定した文字列を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   描画するテキスト文字列を作成します。  
  
-   フォントを Arial (16pt) として定義します。  
  
-   描画する塗りつぶされた黒のブラシを作成します。  
  
-   テキストを描画する左上隅の点を作成します。  
  
-   フォント、ブラシ、および変換先ポイントを使用して、文字列を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#84)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#84)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#84)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="s" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="s">描画する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="brush">描画するテキストの色とテクスチャを決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="layoutRectangle">描画するテキストの位置を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>指定した <see cref="T:System.Drawing.Brush" /> オブジェクトと <see cref="T:System.Drawing.Font" /> オブジェクトで、指定した文字列を指定した四角形内に描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `s` パラメーターによって表されるテキストは、`layoutRectangle` パラメーターで表される四角形の内部に描画されます。 テキストが四角形内に収まっていない場合は、最も近い単語で切り捨てられます。 四角形内での文字列の描画方法をさらに操作するには、<xref:System.Drawing.StringFormat>を受け取る <xref:System.Drawing.Graphics.DrawString%2A> オーバーロードを使用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   描画するテキスト文字列を作成します。  
  
-   フォントを Arial (16pt) として定義します。  
  
-   描画する塗りつぶされた黒のブラシを作成します。  
  
-   テキストを描画する四角形を作成します。  
  
-   四角形を画面に描画します。  
  
-   フォント、ブラシ、および変換先の四角形を使用して、文字列を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#86)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#86)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="s" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, point, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">描画する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="brush">描画するテキストの色とテクスチャを決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="point">描画するテキストの左上隅を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="format">描画するテキストに適用する行間や配置などの書式属性を指定する <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Brush" /> の書式属性を使用して、指定した <see cref="T:System.Drawing.Font" /> オブジェクトおよび <see cref="T:System.Drawing.StringFormat" /> オブジェクトで、指定した位置に指定した文字列を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   描画するテキスト文字列を作成します。  
  
-   フォントを Arial (16pt) として定義します。  
  
-   描画する塗りつぶされた黒のブラシを作成します。  
  
-   テキストを描画する左上隅の点を作成します。  
  
-   垂直方向に描画する文字列の形式を設定します。  
  
-   フォント、ブラシ、ターゲットポイント、および形式を使用して、文字列を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#85)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#85)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#85)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="s" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">描画する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="brush">描画するテキストの色とテクスチャを決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="layoutRectangle">描画するテキストの位置を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="format">描画するテキストに適用する行間や配置などの書式属性を指定する <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Brush" /> の書式属性を使用して、指定した <see cref="T:System.Drawing.Font" /> オブジェクトおよび <see cref="T:System.Drawing.StringFormat" /> オブジェクトで、指定した四角形に指定した文字列を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `s` パラメーターによって表されるテキストは、`layoutRectangle` パラメーターで表される四角形の内部に描画されます。 テキストが四角形内に収まっていない場合は、`format` パラメーターで指定しない限り、最も近い単語で切り捨てられます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   描画するテキスト文字列を作成します。  
  
-   フォントを Arial (16pt) として定義します。  
  
-   描画する塗りつぶされた黒のブラシを作成します。  
  
-   テキストを描画する四角形を作成します。  
  
-   四角形を画面に描画します。  
  
-   四角形内の中央に配置する文字列の形式を設定します。  
  
-   フォント、ブラシ、および変換先の四角形を使用して、文字列を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#87)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#87)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="s" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">描画する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="brush">描画するテキストの色とテクスチャを決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">描画するテキストの左上隅の x 座標。</param>
        <param name="y">描画するテキストの左上隅の y 座標。</param>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Brush" /> オブジェクトと <see cref="T:System.Drawing.Font" /> オブジェクトで、指定した文字列を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   描画するテキスト文字列を作成します。  
  
-   フォントを Arial (16pt) として定義します。  
  
-   描画する黒の塗りつぶしブラシを作成します。  
  
-   テキストを描画する左上隅の点を作成します。  
  
-   フォント、ブラシ、および変換先ポイントを使用して、文字列を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#88)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#88)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="s" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">描画する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="brush">描画するテキストの色とテクスチャを決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">描画するテキストの左上隅の x 座標。</param>
        <param name="y">描画するテキストの左上隅の y 座標。</param>
        <param name="format">描画するテキストに適用する行間や配置などの書式属性を指定する <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Brush" /> の書式属性を使用して、指定した <see cref="T:System.Drawing.Font" /> オブジェクトおよび <see cref="T:System.Drawing.StringFormat" /> オブジェクトで、指定した位置に指定した文字列を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   描画するテキスト文字列を作成します。  
  
-   フォントを Arial (16pt) として定義します。  
  
-   描画する塗りつぶされた黒のブラシを作成します。  
  
-   テキストを描画する左上隅の点の座標を作成します。  
  
-   文字列の書式を垂直方向に描画するように設定します。  
  
-   フォント、ブラシ、ターゲットポイント、および形式を使用して、文字列を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#89)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#89)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="s" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <Member MemberName="EndContainer">
      <MemberSignature Language="C#" Value="public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndContainer(class System.Drawing.Drawing2D.GraphicsContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndContainer (container As GraphicsContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndContainer(System::Drawing::Drawing2D::GraphicsContainer ^ container);" />
      <MemberSignature Language="F#" Value="member this.EndContainer : System.Drawing.Drawing2D.GraphicsContainer -&gt; unit" Usage="graphics.EndContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Drawing.Drawing2D.GraphicsContainer" />
      </Parameters>
      <Docs>
        <param name="container">このメソッドで復元されるコンテナーを表す <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />。</param>
        <summary>現在のグラフィックス コンテナーを閉じ、この <see cref="T:System.Drawing.Graphics" /> の状態を、<see cref="M:System.Drawing.Graphics.BeginContainer" /> メソッドを呼び出すことによって保存されていた状態に復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドと共に使用して、入れ子になったグラフィックスコンテナーを作成します。 グラフィックスコンテナーは、変換、クリッピング領域、レンダリングプロパティなどのグラフィックスの状態を保持します。  
  
 <xref:System.Drawing.Graphics>の <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics> の状態を保持する情報ブロックがスタックに配置されます。 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドは、その情報ブロックを識別する <xref:System.Drawing.Drawing2D.GraphicsContainer> を返します。 識別オブジェクトを <xref:System.Drawing.Graphics.EndContainer%2A> メソッドに渡すと、情報ブロックがスタックから削除され、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出し時の状態に <xref:System.Drawing.Graphics> を復元するために使用されます。  
  
 コンテナーは入れ子にすることができます。つまり、<xref:System.Drawing.Graphics.EndContainer%2A> メソッドを呼び出す前に、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを複数回呼び出すことができます。 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを呼び出すたびに、情報ブロックがスタックに配置され、情報ブロックの <xref:System.Drawing.Drawing2D.GraphicsContainer> を受け取ります。 これらのオブジェクトのいずれかを <xref:System.Drawing.Graphics.EndContainer%2A> メソッドに渡すと、その <xref:System.Drawing.Graphics> は、その特定の <xref:System.Drawing.Drawing2D.GraphicsContainer>を返した <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出し時の状態に戻ります。 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しによってスタックに配置された情報ブロックがスタックから削除され、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しの後にそのスタックに配置されたすべての情報ブロックも削除されます。  
  
 <xref:System.Drawing.Graphics.Save%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しと同じスタックに情報ブロックが配置されます。 <xref:System.Drawing.Graphics.EndContainer%2A> メソッド呼び出しが <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しとペアになっているのと同様に、<xref:System.Drawing.Graphics.Restore%2A> メソッド呼び出しは <xref:System.Drawing.Graphics.Save%2A> メソッド呼び出しとペアになります。  
  
 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドへの対応する呼び出しがスタックから削除された後に、(<xref:System.Drawing.Graphics.Save%2A> メソッドまたは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって) スタックに配置されたすべての情報ブロックが削除されます。 同様に、<xref:System.Drawing.Graphics.Restore%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.Save%2A> メソッドへの対応する呼び出しがスタックから削除された後に、(<xref:System.Drawing.Graphics.Save%2A> メソッドまたは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって) スタックに配置されたすべての情報ブロックが削除されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   新しいグラフィックスコンテナーを開き、古いコンテナーを保存します。  
  
-   コンテナー内のワールド座標を変換します。  
  
-   新しいコンテナーの (平行移動された座標) の赤い四角形に塗りつぶします。  
  
-   新しいコンテナーを閉じ、保存されたコンテナーを復元します。  
  
-   保存されたコンテナーの緑の四角形 (平行変換されていない座標) に塗りつぶします。  
  
 結果は、同じサイズの赤い四角形を overlies する緑色の四角形です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#90)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#90)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#90)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateMetafile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する<see cref="T:System.Drawing.Imaging.Metafile" /> 。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する<see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 次のコード例では、プライベートメンバーの1つとして <xref:System.Drawing.Imaging.Metafile> を持つフォームを作成します。 <xref:System.Windows.Forms.Control.OnPaint%2A> メソッドは <xref:System.Drawing.Graphics.EnumerateMetafile%2A>を呼び出します。これにより、メタファイル内の各レコードに対してフォームの `MetafileCallback` メソッドが呼び出されます。 `MetafileCallback` メソッドは <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出します。 `MetafileCallback` メソッドはレコードデータを <xref:System.IntPtr>として受け取ることに注意してくださいが、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドでは、レコードデータがバイト配列であることが想定されています。 <xref:System.Runtime.InteropServices.Marshal.Copy%2A> を呼び出すと、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>に渡すことができるように、レコードデータがバイト配列にコピーされます。  
  
 [!code-csharp[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する<see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.PointF> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。 描画されたメタファイルは、平行四辺形に合わせて拡大縮小および傾斜されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する<see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する<see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する<see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する<see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.PointF> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。 描画されたメタファイルは、平行四辺形に合わせて拡大縮小および傾斜されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する<see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する<see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する<see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、 <see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、 <see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.Point> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。 描画されたメタファイルは、平行四辺形に合わせて拡大縮小および傾斜されます。  
  
 `imageAttr` パラメーターによって指定されたイメージ属性は、メタファイルが書き込まれたときに指定された属性を置き換えます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.Point> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。 描画されたメタファイルは、平行四辺形に合わせて拡大縮小および傾斜されます。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する<see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、 <see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> のメソッドを呼び出すことによって呼び出す必要があります。  
  
 `imageAttr` パラメーターによって指定されたイメージ属性は、メタファイルが書き込まれたときに指定された属性を置き換えます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、 <see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.PointF> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。 描画されたメタファイルは、平行四辺形に合わせて拡大縮小および傾斜されます。  
  
 `imageAttr` パラメーターによって指定されたイメージ属性は、メタファイルが書き込まれたときに指定された属性を置き換えます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.Point> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。 描画されたメタファイルは、平行四辺形に合わせて拡大縮小および傾斜されます。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する<see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、 <see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `imageAttr` パラメーターによって指定されたイメージ属性は、メタファイルが書き込まれたときに指定された属性を置き換えます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する<see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、 <see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `imageAttr` パラメーターによって指定されたイメージ属性は、メタファイルが書き込まれたときに指定された属性を置き換えます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.Point> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。 描画されたメタファイルは、平行四辺形に合わせて拡大縮小および傾斜されます。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.PointF> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。 描画されたメタファイルは、平行四辺形に合わせて拡大縮小および傾斜されます。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="unit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、 <see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、<see cref="T:System.Drawing.Imaging.Metafile" /> から選択された四角形のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="unit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、 <see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、<see cref="T:System.Drawing.Imaging.Metafile" /> から選択された四角形のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.Point> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。 描画されたメタファイルは、平行四辺形に合わせて拡大縮小および傾斜されます。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
 `imageAttr` パラメーターによって指定されたイメージ属性は、メタファイルが書き込まれたときに指定された属性を置き換えます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="unit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、 <see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、<see cref="T:System.Drawing.Imaging.Metafile" /> から選択された四角形のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
 `imageAttr` パラメーターによって指定されたイメージ属性は、メタファイルが書き込まれたときに指定された属性を置き換えます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="unit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、 <see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、<see cref="T:System.Drawing.Imaging.Metafile" /> から選択された四角形のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `destPoints` パラメーターは、平行四辺形の3つの点を指定します。 3つの <xref:System.Drawing.PointF> 構造体は、平行四辺形の左上、右上、左下の各角を表します。 4番目のポイントは、平行四辺形を形成するために最初の3から推定されます。 描画されたメタファイルは、平行四辺形に合わせて拡大縮小および傾斜されます。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
 `imageAttr` パラメーターによって指定されたイメージ属性は、メタファイルが書き込まれたときに指定された属性を置き換えます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="unit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、 <see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、<see cref="T:System.Drawing.Imaging.Metafile" /> から選択された四角形のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
 `imageAttr` パラメーターによって指定されたイメージ属性は、メタファイルが書き込まれたときに指定された属性を置き換えます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="unit"><paramref name="srcRect" /> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、 <see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、<see cref="T:System.Drawing.Imaging.Metafile" /> から選択された四角形のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定したメタファイルに格納されているレコードを列挙します。 各レコードは、`callback` パラメーターによって指定されたコールバックメソッドに個別に送信されます。 通常、コールバックメソッドは、<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出して、レコードを "再生" または描画します。  
  
 コールバックメソッドが <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>を呼び出す場合は、列挙されている特定の <xref:System.Drawing.Imaging.Metafile> の <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> メソッドを呼び出すことによって呼び出す必要があります。  
  
 `srcRect` パラメーターで指定された四角形の外側で実行される描画はすべて無視されます。  
  
 `imageAttr` パラメーターによって指定されたイメージ属性は、メタファイルが書き込まれたときに指定された属性を置き換えます。  
  
   
  
## Examples  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">イメージ、ビットマップ、およびメタファイル</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExcludeClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Graphics" /> 構造体で指定された領域が除外されるように、この <see cref="T:System.Drawing.Rectangle" /> のクリップ領域を更新します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExcludeClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.ExcludeClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">クリップ領域から除外する四角形を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary><see cref="T:System.Drawing.Graphics" /> 構造体で指定された領域が除外されるように、この <see cref="T:System.Drawing.Rectangle" /> のクリップ領域を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、現在のクリップ領域から `rect` パラメーターによって指定された領域を除外し、結果として得られる領域をこの <xref:System.Drawing.Graphics>の <xref:System.Drawing.Graphics.Clip%2A> プロパティに割り当てます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   左上隅が座標 (100、100) にある100ピクセル×100ピクセルの四角形を作成します。  
  
-   四角形によって定義された領域を作成します。  
  
-   四角形領域を除外するようにクリッピング領域を設定します。  
  
-   左上隅が座標 (0, 0) に固定された青のブラシで、300ピクセル分の300ピクセルの四角形を塗りつぶします。  
  
 結果は青い四角形で、右下隅に四角形の領域があります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#92)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#92)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#92)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Region -&gt; unit" Usage="graphics.ExcludeClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">クリップ領域から除外する領域を指定する <see cref="T:System.Drawing.Region" />。</param>
        <summary><see cref="T:System.Drawing.Region" /> で指定された領域が除外されるように、この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、現在のクリップ領域から `region` パラメーターによって指定された領域を除外し、結果として得られる領域をこの <xref:System.Drawing.Graphics>の <xref:System.Drawing.Graphics.Clip%2A> プロパティに割り当てます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   左上隅が座標 (100、100) にある100ピクセル×100ピクセルの四角形を作成します。  
  
-   四角形を除外するクリッピング領域を設定します。  
  
-   左上隅が座標 (0, 0) に固定された青のブラシで、300ピクセル分の300ピクセルの四角形を塗りつぶします。  
  
 結果は青い四角形で、右下隅には四角形の領域がありません。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#91)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#91)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#91)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Point" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を塗りつぶします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.Point" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過する閉じたカーディナルスプラインの内部を塗りつぶします。 最後の点が最初の点と一致しない場合は、最後の点から最初の点まで追加の曲線セグメントを追加して閉じます。  
  
 点の配列には、少なくとも4つの <xref:System.Drawing.Point> 構造体が含まれている必要があります。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   スプラインを定義する4つのポイントの配列を作成します。  
  
-   画面上の曲線を塗りつぶします。  
  
 曲線の既定のテンションは0.5 です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#93)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#93)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#93)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.PointF" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過する閉じたカーディナルスプラインの内部を塗りつぶします。 最後の点が最初の点と一致しない場合は、最後の点から最初の点まで追加の曲線セグメントを追加して閉じます。  
  
 点の配列には、少なくとも4つの <xref:System.Drawing.PointF> 構造体が含まれている必要があります。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   スプラインを定義する4つのポイントの配列を作成します。  
  
-   画面上の曲線を塗りつぶします。  
  
 曲線の既定のテンションは0.5 です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#96)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#96)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#96)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="fillmode">曲線を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。</param>
        <summary><see cref="T:System.Drawing.Point" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を指定の塗りつぶしモードで塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過する閉じたカーディナルスプラインの内部を塗りつぶします。 最後の点が最初の点と一致しない場合は、最後の点から最初の点まで追加の曲線セグメントを追加して閉じます。  
  
 点の配列には、少なくとも4つの <xref:System.Drawing.Point> 構造体が含まれている必要があります。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   スプラインを定義する4つのポイントの配列を作成します。  
  
-   Fill モードを <xref:System.Drawing.Drawing2D.FillMode.Winding>に設定します。  
  
-   画面上の曲線を塗りつぶします。  
  
 曲線の既定のテンションは0.5 です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#94)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#94)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#94)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="fillmode">曲線を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。</param>
        <summary><see cref="T:System.Drawing.PointF" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を指定の塗りつぶしモードで塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過する閉じたカーディナルスプラインの内部を塗りつぶします。 最後の点が最初の点と一致しない場合は、最後の点から最初の点まで追加の曲線セグメントを追加して閉じます。  
  
 点の配列には、少なくとも4つの <xref:System.Drawing.Point> 構造体が含まれている必要があります。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   スプラインを定義する4つのポイントの配列を作成します。  
  
-   Fill モードを <xref:System.Drawing.Drawing2D.FillMode.Winding>に設定します。  
  
-   画面上の曲線を塗りつぶします。  
  
 曲線の既定のテンションは0.5 です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#97)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#97)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#97)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="fillmode">曲線を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <summary><see cref="T:System.Drawing.Point" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を指定の塗りつぶしモードおよびテンションで塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過する閉じたカーディナルスプラインの内部を塗りつぶします。 最後の点が最初の点と一致しない場合は、最後の点から最初の点まで追加の曲線セグメントを追加して閉じます。  
  
 点の配列には、少なくとも4つの <xref:System.Drawing.Point> 構造体が含まれている必要があります。  
  
 `tension` パラメーターによって、スプラインの形状が決まります。 `tension` パラメーターの値が 0.0 F の場合、このメソッドは直線セグメントを描画して点を接続します。 通常、`tension` パラメーターは 1.0 F 以下です。 1.0 F を超える値を指定すると、異常な結果が生成されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   スプラインを定義する4つのポイントの配列を作成します。  
  
-   Fill モードを <xref:System.Drawing.Drawing2D.FillMode.Winding>に設定します。  
  
-   テンションを1.0 に設定します。  
  
-   画面上の曲線を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#95)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#95)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#95)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="fillmode">曲線を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <summary><see cref="T:System.Drawing.PointF" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を指定の塗りつぶしモードおよびテンションで塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、配列内の各点を通過する閉じたカーディナルスプラインの内部を塗りつぶします。 最後の点が最初の点と一致しない場合は、最後の点から最初の点まで追加の曲線セグメントを追加して閉じます。  
  
 点の配列には、少なくとも4つの <xref:System.Drawing.Point> 構造体が含まれている必要があります。  
  
 `tension` パラメーターによって、スプラインの形状が決まります。 `tension` パラメーターの値が 0.0 F の場合、このメソッドは直線セグメントを描画して点を接続します。 通常、`tension` パラメーターは 1.0 F 以下です。 1.0 F を超える値を指定すると、異常な結果が生成されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   スプラインを定義する4つのポイントの配列を作成します。  
  
-   Fill モードを <xref:System.Drawing.Drawing2D.FillMode.Winding>に設定します。  
  
-   テンションを1.0 に設定します。  
  
-   画面上の曲線を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#98)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#98)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、高さ、および幅で指定された外接する四角形によって定義される楕円を描画します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rect">楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 構造体で指定された外接する四角形によって定義される楕円の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の内部を <xref:System.Drawing.Brush>で塗りつぶします。 楕円は、`rect` パラメーターによって表される外接する四角形によって定義されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   楕円の境界となる四角形を作成します。  
  
-   画面上の楕円を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#99)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#99)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rect">楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 構造体で指定された外接する四角形によって定義される楕円の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の内部を <xref:System.Drawing.Brush>で塗りつぶします。 楕円は、`rect` パラメーターによって表される外接する四角形によって定義されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   楕円の境界となる四角形を作成します。  
  
-   画面上の楕円を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#100)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#100)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">楕円を定義する外接する四角形の左上隅の y 座標。</param>
        <param name="width">楕円を定義する外接する四角形の幅。</param>
        <param name="height">楕円を定義する外接する四角形の高さ。</param>
        <summary>座標ペア、高さ、および幅で指定された外接する四角形によって定義される楕円を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の内部を <xref:System.Drawing.Brush>で塗りつぶします。 楕円は、`x`、`y`、`width`、および `height` パラメーターで表される外接する四角形によって定義されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   楕円の境界となる四角形の位置とサイズを作成します。  
  
-   画面上の楕円を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#101)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#101)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">楕円を定義する外接する四角形の左上隅の y 座標。</param>
        <param name="width">楕円を定義する外接する四角形の幅。</param>
        <param name="height">楕円を定義する外接する四角形の高さ。</param>
        <summary>座標ペア、高さ、および幅で指定された外接する四角形によって定義される楕円を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の内部を <xref:System.Drawing.Brush>で塗りつぶします。 楕円は、`x`、`y`、`width`、および `height` パラメーターで表される外接する四角形によって定義されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   楕円の境界となる四角形の位置とサイズを作成します。  
  
-   画面上の楕円を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#102)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#102)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPath(class System.Drawing.Brush brush, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPath(System::Drawing::Brush ^ brush, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.FillPath : System.Drawing.Brush * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.FillPath (brush, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="path">塗りつぶし対象のパスを表す <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Drawing2D.GraphicsPath> は、一連の線と曲線のセグメントで構成されます。 `path` パラメーターによって表されるパスが閉じられていない場合は、パスを閉じるために、最後のポイントから最初のポイントまで追加のセグメントが追加されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   グラフィックスパスオブジェクトを作成します。  
  
-   グラフィックスパスに楕円を追加します。  
  
-   画面上のパスを入力します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#103)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#103)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="path" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、幅、および高さで指定された楕円と 2 本の半径によって定義される扇形の内部を塗りつぶします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.FillPie (brush, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rect">扇形の元となる楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 (度単位)。</param>
        <param name="sweepAngle"><paramref name="startAngle" /> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 (度単位)。</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 構造体と 2 本の半径によって指定された楕円で定義される扇形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の円弧と、円弧の終点と交差する2つの放射状線で定義される扇形の内部を塗りつぶします。楕円は、外接する四角形によって定義されます。 円のセクションは、`startAngle` と `sweepAngle` のパラメーターで定義された2つの放射状線と、それらの放射状直線と楕円の交差部分の間の弧で構成されます。  
  
 `sweepAngle` パラメーターが360°を超えるか、-360 度より小さい場合、それぞれが360度または-360 度であるかのように処理されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   楕円の境界となる四角形を作成します。  
  
-   開始角度 (x 軸を基準とする) とスイープ角度 (両方とも時計回り方向) を定義します。  
  
-   画面上の楕円の円の形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#104)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#104)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * int * int * int * int * int * int -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">扇形の元となる楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">扇形の元となる楕円を定義する外接する四角形の左上隅の y 座標。</param>
        <param name="width">扇形の元となる楕円を定義する外接する四角形の幅。</param>
        <param name="height">扇形の元となる楕円を定義する外接する四角形の高さ。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 (度単位)。</param>
        <param name="sweepAngle"><paramref name="startAngle" /> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 (度単位)。</param>
        <summary>座標ペア、幅、および高さで指定された楕円と 2 本の半径によって定義される扇形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の円弧と、円弧の終点と交差する2つの放射状線で定義される扇形の内部を塗りつぶします。楕円は、外接する四角形によって定義されます。 円のセクションは、`startAngle` と `sweepAngle` のパラメーターで定義された2つの放射状線と、それらの放射状直線と楕円の交差部分の間の弧で構成されます。  
  
 `sweepAngle` パラメーターが360°を超えるか、-360 度より小さい場合、それぞれが360度または-360 度であるかのように処理されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   楕円の境界となる四角形の位置とサイズを作成します。  
  
-   開始角度 (x 軸を基準とする) とスイープ角度 (両方とも時計回り方向) を定義します。  
  
-   画面上の楕円の円の形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#105)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#105)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * single * single * single * single * single * single -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">扇形の元となる楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">扇形の元となる楕円を定義する外接する四角形の左上隅の y 座標。</param>
        <param name="width">扇形の元となる楕円を定義する外接する四角形の幅。</param>
        <param name="height">扇形の元となる楕円を定義する外接する四角形の高さ。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 (度単位)。</param>
        <param name="sweepAngle"><paramref name="startAngle" /> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 (度単位)。</param>
        <summary>座標ペア、幅、および高さで指定された楕円と 2 本の半径によって定義される扇形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、楕円の円弧と、円弧の終点と交差する2つの放射状線で定義される扇形の内部を塗りつぶします。楕円は、外接する四角形によって定義されます。 円のセクションは、`startAngle` と `sweepAngle` のパラメーターで定義された2つの放射状線と、それらの放射状線と楕円の交差部分の間の弧で構成されます。  
  
 `sweepAngle` パラメーターが360°を超えるか、-360 度より小さい場合、それぞれが360度または-360 度であるかのように処理されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   赤の実線ブラシを作成します。  
  
-   楕円の境界となる四角形の位置とサイズを作成します。  
  
-   開始角度 (x 軸を基準とする) とスイープ角度 (両方とも時計回り方向) を定義します。  
  
-   画面上の楕円の円の形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#106)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#106)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Point" /> 構造体で指定された点の配列によって定義される多角形の内部を塗りつぶします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">塗りつぶす多角形の頂点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.Point" /> 構造体で指定された点の配列によって定義される多角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列内の2つの連続する各点は、多角形の辺を指定します。 また、最後のポイントと最初のポイントが一致しない場合は、多角形の終わり側を指定します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   青の実線ブラシを作成します。  
  
-   多角形を定義する7つのポイントの配列を作成します。  
  
-   画面の多角形領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#107)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#107)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">塗りつぶす多角形の頂点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.PointF" /> 構造体で指定された点の配列によって定義される多角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列内の2つの連続する各点は、多角形の辺を指定します。 また、最後のポイントと最初のポイントが一致しない場合は、多角形の終わり側を指定します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   青の実線ブラシを作成します。  
  
-   多角形を定義する7つのポイントの配列を作成します。  
  
-   画面の多角形領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#109)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#109)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#109)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">塗りつぶす多角形の頂点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="fillMode">塗りつぶしのスタイルを決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。</param>
        <summary><see cref="T:System.Drawing.Point" /> 構造体で指定された点の配列によって定義される多角形の内部を指定の塗りつぶしモードで塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列内の2つの連続する各点は、多角形の辺を指定します。 また、最後のポイントと最初のポイントが一致しない場合は、多角形の終わり側を指定します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   青の実線ブラシを作成します。  
  
-   多角形を定義する7つのポイントの配列を作成します。  
  
-   Fill モードを <xref:System.Drawing.Drawing2D.FillMode.Winding>に設定します。  
  
-   画面の多角形領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#108)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#108)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">塗りつぶす多角形の頂点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="fillMode">塗りつぶしのスタイルを決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。</param>
        <summary><see cref="T:System.Drawing.PointF" /> 構造体で指定された点の配列によって定義される多角形の内部を指定の塗りつぶしモードで塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列内の2つの連続する各点は、多角形の辺を指定します。 また、最後のポイントと最初のポイントが一致しない場合は、多角形の終わり側を指定します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードは、次のアクションを実行します。  
  
-   青の実線ブラシを作成します。  
  
-   多角形を定義する7つのポイントの配列を作成します。  
  
-   Fill モードを <xref:System.Drawing.Drawing2D.FillMode.Winding>に設定します。  
  
-   画面の多角形領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#110)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#110)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="points" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、幅、および高さで指定された四角形の内部を塗りつぶします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rect">塗りつぶす四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 構造体で指定された四角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`rect` パラメーターによって定義された四角形の内部を塗りつぶします。これには、指定した左上隅と、計算された下端と下端までを含めます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードは、次のアクションを実行します。  
  
-   青の実線ブラシを作成します。  
  
-   四角形を作成します。  
  
-   画面上の四角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#111)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#111)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rect">塗りつぶす四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 構造体で指定された四角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`rect` パラメーターによって定義された四角形の内部を塗りつぶします。これには、指定した左上隅と、計算された下端と下端までを含めます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードは、次のアクションを実行します。  
  
-   青の実線ブラシを作成します。  
  
-   四角形を作成します。  
  
-   画面上の四角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#112)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#112)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">塗りつぶす四角形の左上隅の x 座標。</param>
        <param name="y">塗りつぶす四角形の左上隅の y 座標。</param>
        <param name="width">塗りつぶす四角形の幅。</param>
        <param name="height">塗りつぶす四角形の高さ。</param>
        <summary>座標ペア、幅、および高さで指定された四角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`x`、`y`、`width`、および `height` の各パラメーターで定義された四角形の内部を塗りつぶします。これには、指定した左上隅と、計算された下と下のエッジが含まれます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードは、次のアクションを実行します。  
  
-   青の実線ブラシを作成します。  
  
-   四角形の位置とサイズを作成します。  
  
-   画面上の四角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#113)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#113)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#113)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">塗りつぶす四角形の左上隅の x 座標。</param>
        <param name="y">塗りつぶす四角形の左上隅の y 座標。</param>
        <param name="width">塗りつぶす四角形の幅。</param>
        <param name="height">塗りつぶす四角形の高さ。</param>
        <summary>座標ペア、幅、および高さで指定された四角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`x`、`y`、`width`、および `height` の各パラメーターで定義された四角形の内部を塗りつぶします。これには、指定した左上隅と、計算された下と下のエッジが含まれます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードは、次のアクションを実行します。  
  
-   青の実線ブラシを作成します。  
  
-   四角形の位置とサイズを作成します。  
  
-   画面上の四角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#114)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#114)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#114)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Rectangle" /> 構造体で指定された一連の四角形の内部を塗りつぶします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rects">塗りつぶす四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 構造体で指定された一連の四角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードは、次のアクションを実行します。  
  
-   青の実線ブラシを作成します。  
  
-   3つの四角形の配列を作成します。  
  
-   画面上の3つの四角形領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#115)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#115)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#115)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="rects" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" /> は長さゼロの配列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rects">塗りつぶす四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体の配列。</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 構造体で指定された一連の四角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードは、次のアクションを実行します。  
  
-   青の実線ブラシを作成します。  
  
-   3つの四角形の配列を作成します。  
  
-   画面上の3つの四角形領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#116)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#116)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#116)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="rects" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Rects" /> は長さゼロの配列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRegion">
      <MemberSignature Language="C#" Value="public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRegion(class System.Drawing.Brush brush, class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRegion(System::Drawing::Brush ^ brush, System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.FillRegion : System.Drawing.Brush * System.Drawing.Region -&gt; unit" Usage="graphics.FillRegion (brush, region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="region">塗りつぶす領域を表す <see cref="T:System.Drawing.Region" />。</param>
        <summary><see cref="T:System.Drawing.Region" /> の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Region> は、四角形とパスで構成されます。 領域が閉じられていない場合は、最後のポイントから最初のポイントまで追加のセグメントを追加して閉じます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードは、次のアクションを実行します。  
  
-   青の実線ブラシを作成します。  
  
-   四角形を作成します。  
  
-   四角形の領域を作成します。  
  
-   画面上の四角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#117)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#117)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#117)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="region" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Graphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Graphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>保留中のグラフィックス操作をすべて強制実行し、操作の終了を待機せずにすぐに制御を戻します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="graphics.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保留中のグラフィックス操作をすべて強制実行し、操作の終了を待機せずにすぐに制御を戻します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、現在実行中のグラフィックス操作が終了するのを待たずに、フラッシュを開始し、すぐに制御を戻します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (System.Drawing.Drawing2D.FlushIntention intention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(valuetype System.Drawing.Drawing2D.FlushIntention intention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (intention As FlushIntention)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush(System::Drawing::Drawing2D::FlushIntention intention);" />
      <MemberSignature Language="F#" Value="member this.Flush : System.Drawing.Drawing2D.FlushIntention -&gt; unit" Usage="graphics.Flush intention" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intention" Type="System.Drawing.Drawing2D.FlushIntention" />
      </Parameters>
      <Docs>
        <param name="intention">メソッドがすぐに制御を戻すか、既存の操作が終了するまで待機するかを指定する、<see cref="T:System.Drawing.Drawing2D.FlushIntention" /> 列挙体のメンバー。</param>
        <summary>メソッドが保留中のグラフィックス操作を待機しているかどうかにかかわらず、すべての保留中のグラフィックス操作を指定どおりに強制実行し、操作が終了する前に制御を戻します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `intention` パラメーターの値 <xref:System.Drawing.Drawing2D.FlushIntention.Flush> は、メソッドがフラッシュを開始した直後に戻ることを指定します。また、<xref:System.Drawing.Drawing2D.FlushIntention.Sync> の値は、既存の操作が完了するまでメソッドが待機するように指定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>デバイス コンテキストを識別する指定のハンドルから新しい <see cref="T:System.Drawing.Graphics" /> を作成します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">デバイス コンテキストを識別するハンドル。</param>
        <summary>デバイス コンテキストを識別する指定のハンドルから新しい <see cref="T:System.Drawing.Graphics" /> を作成します。</summary>
        <returns>このメソッドは、指定のデバイス コンテキストの新しい <see cref="T:System.Drawing.Graphics" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.FromHdc%2A> メソッドによって作成された <xref:System.Drawing.Graphics> および関連リソースを解放するには、常に <xref:System.Drawing.Graphics.Dispose%2A> メソッドを呼び出す必要があります。  
  
 ディスプレイデバイスに ICM カラープロファイルが関連付けられている場合でも、既定では [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] はそのプロファイルを使用しません。 <xref:System.Drawing.Graphics>に対して ICM を有効にするには、HDC (および ICM_ON) を `SetICMMode` 関数に渡した後で、HDC から <xref:System.Drawing.Graphics> を構築します。 その後、<xref:System.Drawing.Graphics> によって実行されるすべての描画は、ディスプレイデバイスに関連付けられている ICM プロファイルに従って調整されます。 ICM を有効にすると、パフォーマンスが低下します。  
  
 <xref:System.Drawing.Graphics.FromHdc%2A> を呼び出すときのデバイスコンテキストの状態 (マッピングモード、論理ユニット、および同様) は、<xref:System.Drawing.Graphics>によって行われたレンダリングに影響を与える可能性があります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードは、次のアクションを実行します。  
  
-   `hdc` 内部ポインター型の変数を作成し、フォームのグラフィックスオブジェクトのデバイスコンテキストを指すハンドルに設定します。  
  
-   `hdc`を使用して新しいグラフィックスオブジェクトを作成します。  
  
-   新しいグラフィックスオブジェクト (画面上) で四角形を描画します。  
  
-   `hdc`を使用して新しいグラフィックスオブジェクトを解放します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#118)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#118)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc, native int hdevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr, hdevice As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint * nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc (hdc, hdevice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
        <Parameter Name="hdevice" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">デバイス コンテキストを識別するハンドル。</param>
        <param name="hdevice">デバイスを識別するハンドル。</param>
        <summary>デバイス コンテキストを識別する指定のハンドルと、デバイスを識別する指定のハンドルから、新しい <see cref="T:System.Drawing.Graphics" /> を作成します。</summary>
        <returns>このメソッドは、指定のデバイス コンテキストおよびデバイスの新しい <see cref="T:System.Drawing.Graphics" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.FromHdc%2A> メソッドによって作成された <xref:System.Drawing.Graphics> および関連リソースを解放するには、常に <xref:System.Drawing.Graphics.Dispose%2A> メソッドを呼び出す必要があります。  
  
 ディスプレイデバイスに ICM カラープロファイルが関連付けられている場合でも、既定では [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] はそのプロファイルを使用しません。 <xref:System.Drawing.Graphics>に対して ICM を有効にするには、HDC (および ICM_ON) を `SetICMMode` 関数に渡した後で、HDC から <xref:System.Drawing.Graphics> を構築します。 その後、<xref:System.Drawing.Graphics> によって実行されるすべての描画は、ディスプレイデバイスに関連付けられている ICM プロファイルに従って調整されます。 ICM を有効にすると、パフォーマンスが低下します。  
  
 <xref:System.Drawing.Graphics.FromHdc%2A> を呼び出すときのデバイスコンテキストの状態 (マッピングモード、論理ユニット、および同様) は、<xref:System.Drawing.Graphics>によって行われたレンダリングに影響を与える可能性があります。  
  
 デバイスハンドルは、通常、特定のプリンターの機能を照会するために使用されます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードへのアクセスに使用します。 関連する列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHdcInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdcInternal (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdcInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">デバイス コンテキストを識別するハンドル。</param>
        <summary>指定したデバイス コンテキストの <see cref="T:System.Drawing.Graphics" /> を返します。</summary>
        <returns>指定したデバイス コンテキストの <see cref="T:System.Drawing.Graphics" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは使用しないでください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHwnd">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwnd(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwnd (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwnd(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwnd : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwnd hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">ウィンドウを識別するハンドル。</param>
        <summary>ウィンドウを識別する指定のハンドルから新しい <see cref="T:System.Drawing.Graphics" /> を作成します。</summary>
        <returns>このメソッドは、指定のウィンドウ ハンドルの新しい <see cref="T:System.Drawing.Graphics" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.FromHwnd%2A> メソッドによって作成された <xref:System.Drawing.Graphics> および関連リソースを解放するには、常に <xref:System.Drawing.Graphics.Dispose%2A> メソッドを呼び出す必要があります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターであり、`thisForm`の例の <xref:System.Windows.Forms.Form> である <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   新しい内部ポインター変数 `hwnd` を作成し、その変数を例のフォームのハンドルに設定します。  
  
-   ハンドルから新しい <xref:System.Drawing.Graphics> を作成します。  
  
-   赤いペンを使用して、新しい <xref:System.Drawing.Graphics> に四角形を描画します。  
  
-   新しい <xref:System.Drawing.Graphics>を破棄します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#119)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#119)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#119)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードへのアクセスに使用します。 関連する列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHwndInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwndInternal(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwndInternal (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwndInternal(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwndInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwndInternal hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">ウィンドウを識別するハンドル。</param>
        <summary>指定したウィンドウ ハンドルに新しい <see cref="T:System.Drawing.Graphics" /> を作成します。</summary>
        <returns>指定したウィンドウ ハンドルの <see cref="T:System.Drawing.Graphics" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは使用しないでください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromImage (System.Drawing.Image image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromImage(class System.Drawing.Image image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromImage(System::Drawing::Image ^ image);" />
      <MemberSignature Language="F#" Value="static member FromImage : System.Drawing.Image -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="image">新しい <see cref="T:System.Drawing.Graphics" /> の作成元の <see cref="T:System.Drawing.Image" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Graphics" /> の新しい <see cref="T:System.Drawing.Image" /> を作成します。</summary>
        <returns>このメソッドは、指定した <see cref="T:System.Drawing.Graphics" /> の新しい <see cref="T:System.Drawing.Image" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イメージにインデックス付きピクセル形式がある場合、このメソッドは例外をスローします。 "インデックス付きピクセル形式のイメージからグラフィックスオブジェクトを作成することはできません" というメッセージが表示されます。 インデックス付きピクセル形式を次の一覧に示します。  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format1bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format4bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format8bppIndexed>  
  
 <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> メソッドを使用して、インデックス付きのイメージを別の形式で保存した後、新しいイメージの <xref:System.Drawing.Graphics> オブジェクトを取得できます。  
  
 このメソッドは、イメージに次のいずれかのピクセル形式がある場合にも例外をスローします。  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Undefined>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.DontCare>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale>  
  
 <xref:System.Drawing.Graphics.FromImage%2A> メソッドによって作成された <xref:System.Drawing.Graphics> および関連リソースを解放するには、常に <xref:System.Drawing.Graphics.Dispose%2A> メソッドを呼び出す必要があります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 このコードは、次のアクションを実行します。  
  
-   サンプルフォルダー内のグラフィックスファイル SampImag から <xref:System.Drawing.Image> を作成します。  
  
-   <xref:System.Drawing.Image>から <xref:System.Drawing.Graphics> を作成します。  
  
-   イメージ内の四角形を塗りつぶすことによって、イメージを変更します。  
  
-   <xref:System.Drawing.Image> を画面に描画します。  
  
-   作成された <xref:System.Drawing.Graphics>を解放します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#120)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#120)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Exception"><paramref name="image" /> がインデックス付きのピクセル形式であるか、またはその形式が未定義です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/737bae30-e599-4e1d-bf30-bab8280b32be">方法 : 実行時にビットマップを作成する</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a626d701-bd99-4fd8-b92f-7b8f794e042b">イメージ、ビットマップ、アイコン、およびメタファイルの操作</related>
        <related type="Article" href="https://msdn.microsoft.com/library/162861f9-f050-445e-8abb-b2c43a918b8b">方法 : 描画する Graphics オブジェクトを作成する</related>
      </Docs>
    </Member>
    <Member MemberName="GetContextInfo">
      <MemberSignature Language="C#" Value="public object GetContextInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetContextInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetContextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextInfo () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetContextInfo();" />
      <MemberSignature Language="F#" Value="member this.GetContextInfo : unit -&gt; obj" Usage="graphics.GetContextInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>累積的なグラフィックス コンテキストを取得します。</summary>
        <returns>累積的なグラフィックス コンテキストを表す <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値は、最初の要素に累積クリップ領域が含まれ、2番目の要素に累積平行移動/変換行列が格納されているオブジェクト配列です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHalftonePalette">
      <MemberSignature Language="C#" Value="public static IntPtr GetHalftonePalette ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHalftonePalette() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHalftonePalette" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHalftonePalette () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetHalftonePalette();" />
      <MemberSignature Language="F#" Value="static member GetHalftonePalette : unit -&gt; nativeint" Usage="System.Drawing.Graphics.GetHalftonePalette " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の Windows ハーフトーン パレットを識別するハンドルを取得します。</summary>
        <returns>パレットを識別するハンドルを指定する内部ポインター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.GetHalftonePalette%2A> メソッドの目的は、ディスプレイで8ビット/ピクセルが使用されている場合に [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] が品質ハーフトーンを向上できるようにすることです。 ハーフトーンパレットを使用してイメージを表示するには、次の手順を使用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   Windows DLL ファイル gdi32 の相互運用性 <xref:System.Runtime.InteropServices.DllImportAttribute> 属性を定義します。このファイルには、必要な [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 関数が含まれています。  
  
-   DLL 内の `SelectPalette` および `RealizePalette` 関数を外部として定義します。  
  
-   既存のイメージファイル SampImag (例のコードファイルと同じフォルダーに存在する必要があります) からイメージを作成し、画面にイメージを描画します。  
  
-   内部ポインター型の変数を作成し、それぞれの値をグラフィックスオブジェクトと現在の Windows ハーフトーンパレットへのハンドルに設定します。  
  
-   ハーフトーンパレットを選択して認識します。  
  
-   `hdc` パラメーターを使用して、新しいグラフィックスオブジェクトを作成します。  
  
-   もう一度イメージを描画します。  
  
-   デバイスコンテキストのハンドルを解放します。  
  
 結果として、サンプルイメージの2つのレンダリングが生成されます。1つは16ビットパレット、もう1つは8ビットパレットです。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#121)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#121)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHdc">
      <MemberSignature Language="C#" Value="public IntPtr GetHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetHdc() cil managed" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHdc" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHdc () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IntPtr GetHdc();" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member GetHdc : unit -&gt; nativeint&#xA;override this.GetHdc : unit -&gt; nativeint" Usage="graphics.GetHdc " FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetHdc() cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr GetHdc();" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.GetHdc : unit -&gt; nativeint" Usage="graphics.GetHdc " FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.GetHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> に関連付けられているデバイス コンテキストを識別するハンドルを取得します。</summary>
        <returns>この <see cref="T:System.Drawing.Graphics" /> に関連付けられているデバイス コンテキストを識別するハンドル。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 デバイスコンテキストは、グラフィカルオブジェクトとそれらに関連付けられている属性のセット、および出力に影響を与えるグラフィカルモードを定義する [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] に基づく Windows 構造です。 このメソッドは、フォントを除き、そのデバイスコンテキストを返します。 フォントが選択されていないため、<xref:System.Drawing.Graphics.GetHdc%2A> メソッドから返されたハンドルを使用して <xref:System.Drawing.Font.FromHdc%2A> メソッドを呼び出すと失敗します。  
  
 <xref:System.Drawing.Graphics.GetHdc%2A> および <xref:System.Drawing.Graphics.ReleaseHdc%2A> メソッドの呼び出しは、ペアで記述する必要があります。 <xref:System.Drawing.Graphics.GetHdc%2A> と <xref:System.Drawing.Graphics.ReleaseHdc%2A> メソッドのペアのスコープでは、通常、[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 関数の呼び出しのみを行います。 `hdc` パラメーターを生成した <xref:System.Drawing.Graphics> の [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] メソッドに対して行われたそのスコープ内の呼び出しは、`ObjectBusy` エラーが発生して失敗します。 また、[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] は、後続の操作で `hdc` パラメーターの <xref:System.Drawing.Graphics> に加えられた状態の変更を無視します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 この例では、Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 関数を呼び出して、[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> メソッドと同じタスクを実行する方法を示します。 コードは、次のアクションを実行します。  
  
-   Windows DLL ファイル gdi32 の相互運用性 <xref:System.Runtime.InteropServices.DllImportAttribute> 属性を定義します。 この DLL には、目的の [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 関数が含まれています。  
  
-   DLL 内の <xref:System.Drawing.Rectangle> 関数を外部として定義します。  
  
-   赤いペンを作成します。  
  
-   ペンを使用して、[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> メソッドを使用して画面に四角形を描画します。  
  
-   `hdc` 内部ポインター型の変数を定義し、その値をフォームのデバイスコンテキストを指すハンドルに設定します。  
  
-   [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> 関数を使用して、画面に四角形を描画します。  
  
-   `hdc` パラメーターによって表されるデバイスコンテキストを解放します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#122)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#122)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#122)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードへのアクセスに使用します。 関連する列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="GetNearestColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetNearestColor (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Color GetNearestColor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Color GetNearestColor(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.GetNearestColor : System.Drawing.Color -&gt; System.Drawing.Color" Usage="graphics.GetNearestColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">一致する対象を検索する <see cref="T:System.Drawing.Color" /> 構造体。</param>
        <summary>指定した <see cref="T:System.Drawing.Color" /> 構造体に最も近い色を取得します。</summary>
        <returns><paramref name="color" /> パラメーターで指定された色に最も近い色を表す <see cref="T:System.Drawing.Color" /> 構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   ARGB 座標 (255、165、63、136) を使用して任意の色を作成します。  
  
-   純色のブラシを作成し、その色を指定した色に設定します。  
  
-   任意の色を使用して楕円を塗りつぶします。  
  
-   2番目の色を作成し、その値を最も近いシステム ARGB 色に設定します。  
  
-   2番目の楕円をこの色で塗りつぶします。  
  
 結果は、2つの省略記号 (任意の指定色で描画された最初の楕円) と、指定した色に最も近いシステムカラーで描画された2つの楕円です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#123)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#123)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.InterpolationMode InterpolationMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.InterpolationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationMode As InterpolationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::InterpolationMode InterpolationMode { System::Drawing::Drawing2D::InterpolationMode get(); void set(System::Drawing::Drawing2D::InterpolationMode value); };" />
      <MemberSignature Language="F#" Value="member this.InterpolationMode : System.Drawing.Drawing2D.InterpolationMode with get, set" Usage="System.Drawing.Graphics.InterpolationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.InterpolationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> に関連付けられている補間モードを取得または設定します。</summary>
        <value><see cref="T:System.Drawing.Drawing2D.InterpolationMode" /> 値のいずれか 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 補間モードによって、2つのエンドポイント間の中間値がどのように計算されるかが決まります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IntersectClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を現在のクリップ領域と指定した <see cref="T:System.Drawing.Rectangle" /> 構造体との交差部分に更新します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">現在のクリップ領域と交差する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を現在のクリップ領域と指定した <see cref="T:System.Drawing.Rectangle" /> 構造体との交差部分に更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、現在のクリップ領域と `rect` パラメーターによって指定された四角形の交差部分によって表される領域 <xref:System.Drawing.Graphics> このの <xref:System.Drawing.Graphics.Clip%2A> プロパティに割り当てられます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   左上隅が (0, 0) の四角形を作成し、クリッピング領域をこの四角形に設定します。  
  
-   左上隅が (100, 100) の2番目の四角形を作成し、この四角形と現在のクリッピング領域 (最初の四角形) の交差部分にクリッピング領域を設定します。  
  
-   前の四角形と単色の青のブラシの両方を含む大きな四角形を塗りつぶします。  
  
-   クリッピング領域を無限にリセットします。  
  
-   2つのクリッピング領域の周囲に四角形を描画します。 最初のクリッピング四角形には黒のペンを使用し、2番目のクリッピング領域には赤いペンを使用します。  
  
 結果として、2つの四角形の交差部分のみが青で塗りつぶされます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#124)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#124)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">現在のクリップ領域と交差する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を現在のクリップ領域と指定した <see cref="T:System.Drawing.RectangleF" /> 構造体との交差部分に更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、現在のクリップ領域と `rect` パラメーターによって指定された四角形の交差部分によって表される領域 <xref:System.Drawing.Graphics> このの <xref:System.Drawing.Graphics.Clip%2A> プロパティに割り当てられます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   左上隅が (0, 0) の四角形を作成し、クリッピング領域をこの四角形に設定します。  
  
-   左上隅が (100, 100) の2番目の四角形を作成し、この四角形と現在のクリッピング領域 (最初の四角形) の交差部分にクリッピング領域を設定します。  
  
-   前の四角形と単色の青のブラシの両方を含む大きな四角形を塗りつぶします。  
  
-   クリッピング領域を無限にリセットします。  
  
-   2つのクリッピング領域の周囲に四角形を描画します。 最初のクリッピング四角形には黒のペンを使用し、2番目のクリッピング領域には赤いペンを使用します。  
  
 結果として、2つの四角形の交差部分のみが青で塗りつぶされます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#125)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#125)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Region -&gt; unit" Usage="graphics.IntersectClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">現在の領域と交差する <see cref="T:System.Drawing.Region" />。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を現在のクリップ領域と指定した <see cref="T:System.Drawing.Region" /> との交差部分に更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、現在のクリップ領域と `region` パラメーターによって指定された領域の交差部分によって表される領域 <xref:System.Drawing.Graphics> このの <xref:System.Drawing.Graphics.Clip%2A> プロパティに割り当てられます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   左上隅が (0, 0) の四角形を作成します。  
  
-   領域を作成し、その領域を四角形に設定し、クリッピング領域をこの領域に設定します。  
  
-   左上隅が (100, 100) の2番目の四角形を作成します。  
  
-   領域を作成し、それを2番目の四角形に設定し、<xref:System.Drawing.Drawing2D.CombineMode.Replace>の結合モードを使用して、この領域と現在のクリッピング領域 (最初の四角形) の交差部分にクリッピング領域を設定します。  
  
-   前の領域と単色の青のブラシを含む大きな四角形を塗りつぶします。  
  
-   クリッピング領域を無限にリセットします。  
  
-   2つのクリッピング領域の周囲に四角形を描画します。 最初のクリッピング領域には黒のペンを使用し、2番目のクリッピング領域には赤いペンを使用します。  
  
 結果として、2つの地域の交差部分のみが青で塗りつぶされます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#126)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#126)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClipEmpty : bool" Usage="System.Drawing.Graphics.IsClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域が空かどうかを示す値を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域が空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペアで指定された点が、この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内にあるかどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Point -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">表示可能範囲をテストする <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Point" /> の表示クリップ領域内に、指定した <see cref="T:System.Drawing.Graphics" /> 構造体が含まれるかどうかを示します。</summary>
        <returns><paramref name="point" /> パラメーターで指定された点がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、<xref:System.Drawing.Drawing2D.CombineMode.Replace>を使用してフォームのグラフィックスオブジェクトのクリッピング領域として設定します。  
  
-   2つの点を作成します (1 つはクリッピング領域内、もう1つは外側)。  
  
-   各点の可視性をテストし、表示されているものだけを描画します。  
  
 結果は、クリップ領域内にある小さな赤い円の1つです。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#127)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#127)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (point As PointF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.PointF -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">表示可能範囲をテストする <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.PointF" /> の表示クリップ領域内に、指定した <see cref="T:System.Drawing.Graphics" /> 構造体が含まれるかどうかを示します。</summary>
        <returns><paramref name="point" /> パラメーターで指定された点がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、<xref:System.Drawing.Drawing2D.CombineMode.Replace>を使用してフォームのグラフィックスのクリッピング領域として設定します。  
  
-   2つの点を作成します (1 つはクリッピング領域内、もう1つは外側)。  
  
-   各点の可視性をテストし、表示されているものだけを描画します。  
  
 結果は、クリップ領域内にある小さな赤い円の1つです。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#128)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#128)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As Rectangle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Rectangle -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">表示可能範囲をテストする <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に、<see cref="T:System.Drawing.Rectangle" /> 構造体で指定された四角形が含まれるかどうかを示します。</summary>
        <returns><paramref name="rect" /> パラメーターで指定された四角形がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、<xref:System.Drawing.Drawing2D.CombineMode.Replace>を使用してフォームのグラフィックスオブジェクトのクリッピング領域として設定します。  
  
-   2つの四角形の位置とサイズを作成します (1 つはクリッピング領域内、もう1つは外側)。  
  
-   各四角形の可視性をテストし、表示されているものだけを描画します。  
  
 その結果、クリップ領域内にある小さな赤い四角形が1つになります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#129)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#129)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As RectangleF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.RectangleF -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">表示可能範囲をテストする <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に、<see cref="T:System.Drawing.RectangleF" /> 構造体で指定された四角形が含まれるかどうかを示します。</summary>
        <returns><paramref name="rect" /> パラメーターで指定された四角形がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、<xref:System.Drawing.Drawing2D.CombineMode.Replace>を使用してフォームのグラフィックスオブジェクトのクリッピング領域として設定します。  
  
-   2つの四角形を1つのクリッピング領域内に1つ、外側に1つ作成します。  
  
-   各四角形の可視性をテストし、表示されているものだけを描画します。  
  
 その結果、クリップ領域内にある小さな赤い四角形が1つになります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#130)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#130)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">表示可能かどうかをテストする点の x 座標。</param>
        <param name="y">表示可能かどうかをテストする点の y 座標。</param>
        <summary>座標ペアで指定された点が、この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内にあるかどうかを示します。</summary>
        <returns><paramref name="x" /> パラメーターと <paramref name="y" /> パラメーターで定義された点がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、<xref:System.Drawing.Drawing2D.CombineMode.Replace>を使用してフォームのグラフィックスオブジェクトのクリッピング領域として設定します。  
  
-   2つの点を作成します (1 つはクリッピング領域内、もう1つは外側)。  
  
-   各点の可視性をテストし、表示されているものだけを描画します。  
  
 結果は、クリップ領域内にある小さな赤い円の1つです。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#131)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#131)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">表示可能かどうかをテストする点の x 座標。</param>
        <param name="y">表示可能かどうかをテストする点の y 座標。</param>
        <summary>座標ペアで指定された点が、この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内にあるかどうかを示します。</summary>
        <returns><paramref name="x" /> パラメーターと <paramref name="y" /> パラメーターで定義された点がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、<xref:System.Drawing.Drawing2D.CombineMode.Replace>を使用してフォームのグラフィックスオブジェクトのクリッピング領域として設定します。  
  
-   2つの点を作成します (1 つはクリッピング領域内、もう1つは外側)。  
  
-   各点の可視性をテストし、表示されているものだけを描画します。  
  
 結果は、クリップ領域内にある小さな赤い円の1つです。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#133)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#133)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer, width As Integer, height As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int * int * int -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">表示可能かどうかをテストする四角形の左上隅の x 座標。</param>
        <param name="y">表示可能かどうかをテストする四角形の左上隅の y 座標。</param>
        <param name="width">表示可能範囲をテストする四角形の幅。</param>
        <param name="height">表示可能範囲をテストする四角形の高さ。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に、座標ペア、幅、および高さで指定された四角形が含まれるかどうかを示します。</summary>
        <returns><paramref name="x" />、<paramref name="y" />、<paramref name="width" />、<paramref name="height" /> の各パラメーターで定義された四角形がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、<xref:System.Drawing.Drawing2D.CombineMode.Replace>を使用してフォームのグラフィックスオブジェクトのクリッピング領域として設定します。  
  
-   2つの四角形の位置とサイズを作成します (1 つはクリッピング領域内、もう1つは外側)。  
  
-   各四角形の可視性をテストし、表示されているものだけを描画します。  
  
 その結果、クリップ領域内にある小さな赤い四角形が1つになります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#132)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#132)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#132)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single, width As Single, height As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single * single * single -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">表示可能かどうかをテストする四角形の左上隅の x 座標。</param>
        <param name="y">表示可能かどうかをテストする四角形の左上隅の y 座標。</param>
        <param name="width">表示可能範囲をテストする四角形の幅。</param>
        <param name="height">表示可能範囲をテストする四角形の高さ。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に、座標ペア、幅、および高さで指定された四角形が含まれるかどうかを示します。</summary>
        <returns><paramref name="x" />、<paramref name="y" />、<paramref name="width" />、<paramref name="height" /> の各パラメーターで定義された四角形がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、<xref:System.Drawing.Drawing2D.CombineMode.Replace>を使用してフォームのグラフィックスオブジェクトのクリッピング領域として設定します。  
  
-   2つの四角形の位置とサイズを作成します (1 つはクリッピング領域内、もう1つは外側)。  
  
-   各四角形の可視性をテストし、表示されているものだけを描画します。  
  
 その結果、クリップ領域内にある小さな赤い四角形が1つになります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#134)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#134)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsVisibleClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisibleClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisibleClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisibleClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisibleClipEmpty : bool" Usage="System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリッピング領域が空かどうかを示す値を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域の表示部分が空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示されるクリッピング領域は、この `Graphics` のクリッピング領域とウィンドウのクリッピング領域の交差部分です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCharacterRanges">
      <MemberSignature Language="C#" Value="public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Region[] MeasureCharacterRanges(string text, class System.Drawing.Font font, valuetype System.Drawing.RectangleF layoutRect, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Drawing::Region ^&gt; ^ MeasureCharacterRanges(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::RectangleF layoutRect, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureCharacterRanges : string * System.Drawing.Font * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; System.Drawing.Region[]" Usage="graphics.MeasureCharacterRanges (text, font, layoutRect, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="layoutRect">文字列のレイアウト四角形を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="stringFormat">行間など、文字列の書式情報を表す <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した文字列内の文字位置の範囲にそれぞれが外接する <see cref="T:System.Drawing.Region" /> オブジェクトの配列を取得します。</summary>
        <returns>このメソッドは、指定した文字列内の文字位置の範囲にそれぞれが外接する <see cref="T:System.Drawing.Region" /> オブジェクトの配列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって返される領域は解決に依存しているため、ある解像度でメタファイルに文字列が記録され、後で別の解像度で再生される場合、精度がわずかに低下する可能性があります。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   文字列 "最初と2番目の範囲" と、文字列を表示するためのフォント ("Times New Roman"、16ポイント) を設定します。  
  
-   文字列内に2文字の範囲を設定します (単語 "First" と "Second" に対応します)。  
  
-   文字列を表示する四角形を作成します。  
  
-   2文字の範囲を含む文字列3/4 の書式を設定します。  
  
-   文字列を画面に描画します。  
  
-   文字範囲を測定し、指定した2つの範囲をバインドした四角形を決定します。  
  
-   2つの四角形を画面に描画します。  
  
 結果として、表示される文字列には、最初の範囲 ("First") が赤い四角形で、2番目の範囲 ("Second") が青い四角形で囲まれたものが含まれます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#135)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#135)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MeasureString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.Drawing.Font" /> で描画した場合の、指定した文字列を計測します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Font" /> で描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<see cref="T:System.Drawing.SizeF" /> パラメーターに指定された文字列のサイズを <see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位で表す <paramref name="text" /> 構造体を、<paramref name="font" /> パラメーターで描画されたとおりに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドは、個々の文字列と共に使用するように設計されており、グリフの突出を許容する文字列の前後に少量の余分なスペースが含まれています。 また、<xref:System.Drawing.Graphics.DrawString%2A> メソッドは、グリフポイントを調整して表示品質を最適化し、<xref:System.Drawing.Graphics.MeasureString%2A>によって報告された文字列の幅が狭くなることがあります。 レイアウト内の隣接する文字列に適したメトリックを取得するには (書式設定されたテキストを実装する場合など)、<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッド、または <xref:System.Drawing.StringFormat>を受け取る <xref:System.Drawing.Graphics.MeasureString%2A> メソッドの1つを使用して、<xref:System.Drawing.StringFormat.GenericTypographic%2A>を渡します。 また、<xref:System.Drawing.Graphics> の <xref:System.Drawing.Graphics.TextRenderingHint%2A> が <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>ていることを確認します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   測定する文字列を作成します。  
  
-   フォントオブジェクトを作成し、Arial (16 ポイント) に設定します。  
  
-   サイズオブジェクトを作成し、それを使用して、文字列のサイズを測定します。  
  
-   文字列の測定されたサイズを使用して、赤い四角形を描画します。  
  
-   描画された四角形内に文字列を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#136)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#136)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#136)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="layoutArea">テキストの最大レイアウト領域を指定する <see cref="T:System.Drawing.SizeF" /> 構造体。</param>
        <summary>指定したレイアウト領域内に指定した <see cref="T:System.Drawing.Font" /> で描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<see cref="T:System.Drawing.SizeF" /> パラメーターに指定された文字列のサイズを <see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位で表す <paramref name="text" /> 構造体を、<paramref name="font" /> パラメーターで描画されたとおりに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドは、個々の文字列と共に使用するように設計されており、グリフの突出を許容する文字列の前後に少量の余分なスペースが含まれています。 また、<xref:System.Drawing.Graphics.DrawString%2A> メソッドは、グリフポイントを調整して表示品質を最適化し、<xref:System.Drawing.Graphics.MeasureString%2A>によって報告された文字列の幅が狭くなることがあります。 レイアウト内の隣接する文字列に適したメトリックを取得するには (書式設定されたテキストを実装する場合など)、<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッド、または <xref:System.Drawing.StringFormat>を受け取る <xref:System.Drawing.Graphics.MeasureString%2A> メソッドの1つを使用して、<xref:System.Drawing.StringFormat.GenericTypographic%2A>を渡します。 また、<xref:System.Drawing.Graphics> の <xref:System.Drawing.Graphics.TextRenderingHint%2A> が <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>ていることを確認します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   測定対象の文字列と Arial (16 ポイント) に設定されたフォントオブジェクトを作成します。  
  
-   文字列のレイアウトの最大サイズを設定します。  
  
-   サイズオブジェクトを作成し、そのオブジェクト、フォントオブジェクト、および最大レイアウトサイズを使用して、文字列のサイズを測定します。  
  
-   文字列の測定されたサイズを使用して、赤い四角形を描画します。  
  
-   描画された四角形内に文字列を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#138)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#138)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#138)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列の書式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="width">文字列の最大幅 (ピクセル単位)。</param>
        <summary>指定した <see cref="T:System.Drawing.Font" /> で描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<see cref="T:System.Drawing.SizeF" /> パラメーターに指定された文字列のサイズを <see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位で表す <paramref name="text" /> 構造体を、<paramref name="font" /> パラメーターで描画されたとおりに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `width` パラメーターは、返された <xref:System.Drawing.SizeF> 構造 (<xref:System.Drawing.SizeF.Width%2A>) の幅コンポーネントの最大値を指定します。 `width` パラメーターが文字列の実際の幅よりも小さい場合、返される <xref:System.Drawing.SizeF.Width%2A> コンポーネントは、指定された幅に収まる最大文字数を表す値に切り捨てられます。 文字列全体を格納するために、返された <xref:System.Drawing.SizeF.Height%2A> コンポーネントは、文字列を文字の折り返しで表示できる値に調整されます。  
  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドは、個々の文字列と共に使用するように設計されており、グリフの突出を許容する文字列の前後に少量の余分なスペースが含まれています。 また、<xref:System.Drawing.Graphics.DrawString%2A> メソッドは、グリフポイントを調整して表示品質を最適化し、<xref:System.Drawing.Graphics.MeasureString%2A>によって報告された文字列の幅が狭くなることがあります。 レイアウト内の隣接する文字列に適したメトリックを取得するには (書式設定されたテキストを実装する場合など)、<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッド、または <xref:System.Drawing.StringFormat>を受け取る <xref:System.Drawing.Graphics.MeasureString%2A> メソッドの1つを使用して、<xref:System.Drawing.StringFormat.GenericTypographic%2A>を渡します。 また、<xref:System.Drawing.Graphics> の <xref:System.Drawing.Graphics.TextRenderingHint%2A> が <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>ていることを確認します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   測定対象の文字列と Arial (16 ポイント) に設定されたフォントオブジェクトを作成します。  
  
-   文字列の最大の幅を設定します。  
  
-   サイズオブジェクトを作成し、それを使用して、フォントオブジェクトと最大文字列幅を使用して、文字列のサイズを測定します。  
  
-   文字列の測定されたサイズを使用して、赤い四角形を描画します。  
  
-   描画された四角形内に文字列を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#141)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#141)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#141)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.PointF origin, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::PointF origin, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.PointF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, origin, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="origin">文字列の左上隅を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="stringFormat">行間など、文字列の書式情報を表す <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Font" /> を使用し、指定した <see cref="T:System.Drawing.StringFormat" /> で書式指定して描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<see cref="T:System.Drawing.SizeF" /> パラメーターに指定された文字列のサイズを <see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位で表す <paramref name="text" /> 構造体を、<paramref name="font" /> パラメーターおよび <paramref name="stringFormat" /> パラメーターで描画されたとおりに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドは、個々の文字列と共に使用するように設計されており、グリフの突出を許容する文字列の前後に少量の余分なスペースが含まれています。 また、<xref:System.Drawing.Graphics.DrawString%2A> メソッドは、グリフポイントを調整して表示品質を最適化し、<xref:System.Drawing.Graphics.MeasureString%2A>によって報告された文字列の幅が狭くなることがあります。 レイアウト内の隣接する文字列に適したメトリックを取得するには (書式設定されたテキストを実装する場合など)、<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッド、または <xref:System.Drawing.StringFormat>を受け取る <xref:System.Drawing.Graphics.MeasureString%2A> メソッドの1つを使用して、<xref:System.Drawing.StringFormat.GenericTypographic%2A>を渡します。 また、<xref:System.Drawing.Graphics> の <xref:System.Drawing.Graphics.TextRenderingHint%2A> が <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>ていることを確認します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   測定する文字列を作成し、Arial (16 ポイント) に設定されたフォントオブジェクトを作成します。  
  
-   文字列の左上隅を検索するポイントを作成します。  
  
-   文字列書式オブジェクトを作成し、その書式設定フラグを <xref:System.Drawing.StringFormatFlags.DirectionVertical>に設定します。  
  
-   文字列を測定するサイズオブジェクトを作成します。  
  
-   文字列、フォントオブジェクト、検索ポイント、および文字列形式を使用して、文字列のサイズを測定します。  
  
-   検索ポイントと文字列の測定サイズを使用して、赤い四角形を描画します。  
  
-   描画された四角形内に文字列を描画します。  
  
 結果は、垂直方向の文字列を囲む垂直方向の四角形です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#137)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#137)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#137)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="layoutArea">テキストの最大レイアウト領域を指定する <see cref="T:System.Drawing.SizeF" /> 構造体。</param>
        <param name="stringFormat">行間など、文字列の書式情報を表す <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Font" /> を使用し、指定した <see cref="T:System.Drawing.StringFormat" /> で書式指定して描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<see cref="T:System.Drawing.SizeF" /> パラメーターで指定された文字列のサイズ (<see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位) を表す <paramref name="text" /> 構造体を、<paramref name="font" /> パラメーターと <paramref name="stringFormat" /> パラメーターで描画されたようにして返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドは、個々の文字列と共に使用するように設計されており、グリフの突出を許容する文字列の前後に少量の余分なスペースが含まれています。 また、<xref:System.Drawing.Graphics.DrawString%2A> メソッドは、グリフポイントを調整して表示品質を最適化し、<xref:System.Drawing.Graphics.MeasureString%2A>によって報告された文字列の幅が狭くなることがあります。 レイアウト内の隣接する文字列に適したメトリックを取得するには (書式設定されたテキストを実装する場合など)、<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッド、または <xref:System.Drawing.StringFormat>を受け取る <xref:System.Drawing.Graphics.MeasureString%2A> メソッドの1つを使用して、<xref:System.Drawing.StringFormat.GenericTypographic%2A>を渡します。 また、<xref:System.Drawing.Graphics> の <xref:System.Drawing.Graphics.TextRenderingHint%2A> が <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>ていることを確認します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   測定対象の文字列と Arial (16 ポイント) に設定されたフォントオブジェクトを作成します。  
  
-   文字列の最大レイアウトサイズを設定し、文字列を測定するサイズオブジェクトを作成します。  
  
-   文字列書式オブジェクトを作成し、その書式設定フラグを <xref:System.Drawing.StringFormatFlags.DirectionVertical>に設定します。  
  
-   文字列、フォントオブジェクト、最大レイアウトサイズ、および文字列形式を使用して、文字列のサイズを測定します。  
  
-   文字列の測定されたサイズを使用して、赤い四角形を描画します。  
  
-   描画された四角形内に文字列を描画します。  
  
 結果は、垂直方向の文字列を囲む垂直方向の四角形です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#139)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#139)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#139)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="width">文字列の最大幅。</param>
        <param name="format">行間など、文字列の書式情報を表す <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Font" /> を使用し、指定した <see cref="T:System.Drawing.StringFormat" /> で書式指定して描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<see cref="T:System.Drawing.SizeF" /> パラメーターで指定された文字列のサイズ (<see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位) を表す <paramref name="text" /> 構造体を、<paramref name="font" /> パラメーターと <paramref name="stringFormat" /> パラメーターで描画されたようにして返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドは、個々の文字列と共に使用するように設計されており、グリフの突出を許容する文字列の前後に少量の余分なスペースが含まれています。 また、<xref:System.Drawing.Graphics.DrawString%2A> メソッドは、グリフポイントを調整して表示品質を最適化し、<xref:System.Drawing.Graphics.MeasureString%2A>によって報告された文字列の幅が狭くなることがあります。 レイアウト内の隣接する文字列に適したメトリックを取得するには (書式設定されたテキストを実装する場合など)、<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッド、または <xref:System.Drawing.StringFormat>を受け取る <xref:System.Drawing.Graphics.MeasureString%2A> メソッドの1つを使用して、<xref:System.Drawing.StringFormat.GenericTypographic%2A>を渡します。 また、<xref:System.Drawing.Graphics> の <xref:System.Drawing.Graphics.TextRenderingHint%2A> が <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>ていることを確認します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   測定する文字列を作成し、フォントオブジェクトを Arial (16 ポイント) に設定します。  
  
-   文字列の最大の幅を設定します。  
  
-   文字列書式オブジェクトを作成し、その書式設定フラグを <xref:System.Drawing.StringFormatFlags.DirectionVertical>に設定します。  
  
-   文字列を測定するサイズオブジェクトを作成します。  
  
-   文字列、フォントオブジェクト、最大幅、および文字列の書式を使用して、文字列のサイズを測定します。  
  
-   文字列の測定されたサイズを使用して、赤い四角形を描画します。  
  
-   描画された四角形内に文字列を描画します。  
  
 結果は、垂直方向の文字列を囲む垂直方向の四角形です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#142)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#142)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#142)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat, [out] int32&amp; charactersFitted, [out] int32&amp; linesFilled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat, [Runtime::InteropServices::Out] int % charactersFitted, [Runtime::InteropServices::Out] int % linesFilled);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat * int * int -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat, charactersFitted, linesFilled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
        <Parameter Name="charactersFitted" Type="System.Int32" RefType="out" />
        <Parameter Name="linesFilled" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="layoutArea">テキストの最大レイアウト領域を指定する <see cref="T:System.Drawing.SizeF" /> 構造体。</param>
        <param name="stringFormat">行間など、文字列の書式情報を表す <see cref="T:System.Drawing.StringFormat" />。</param>
        <param name="charactersFitted">文字列の文字数。</param>
        <param name="linesFilled">文字列のテキスト行数。</param>
        <summary>指定した <see cref="T:System.Drawing.Font" /> を使用し、指定した <see cref="T:System.Drawing.StringFormat" /> で書式指定して描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<paramref name="text" /> パラメーターに指定された文字列のサイズを <see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位で表す <see cref="T:System.Drawing.SizeF" /> 構造体を、<paramref name="font" /> パラメーターおよび <paramref name="stringFormat" /> パラメーターで描画されたとおりに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドは、個々の文字列と共に使用するように設計されており、グリフの突出を許容する文字列の前後に少量の余分なスペースが含まれています。 また、<xref:System.Drawing.Graphics.DrawString%2A> メソッドは、グリフポイントを調整して表示品質を最適化し、<xref:System.Drawing.Graphics.MeasureString%2A>によって報告された文字列の幅が狭くなることがあります。 レイアウト内の隣接する文字列に適したメトリックを取得するには (書式設定されたテキストを実装する場合など)、<xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッドを使用するか、<xref:System.Drawing.StringFormat> を受け取る <xref:System.Drawing.Graphics.MeasureString%2A> メソッドの1つを使用して <xref:System.Drawing.StringFormat.GenericTypographic%2A>を渡します。 また、<xref:System.Drawing.Graphics> の <xref:System.Drawing.Graphics.TextRenderingHint%2A> が <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>ていることを確認します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   測定する文字列を作成し、Arial (16 ポイント) に設定されたフォントオブジェクトを作成します。  
  
-   文字列のレイアウトの最大サイズを設定します。  
  
-   文字列書式オブジェクトを作成し、その書式設定フラグを <xref:System.Drawing.StringFormatFlags.DirectionVertical>に設定します。  
  
-   整数変数 `charactersFitted` および `linesFilled` と、文字列を測定するサイズオブジェクトを作成します。  
  
-   文字列のサイズを測定し、文字列、フォントオブジェクト、最大レイアウトサイズ、および文字列形式を使用して、文字の幅と行数を決定します。  
  
-   文字列の測定されたサイズを使用して、赤い四角形を描画します。  
  
-   描画された四角形内に文字列を描画します。  
  
-   適合した文字数と入力された行の値を描画します。  
  
 結果は、垂直方向の文字列を囲む垂直方向の四角形です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#140)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#140)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#140)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">フォントとテキストの使用</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> と指定した <see cref="T:System.Drawing.Drawing2D.Matrix" /> のワールド変換を乗算します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="graphics.MultiplyTransform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">ワールド変換を乗算する 4 x 4 <see cref="T:System.Drawing.Drawing2D.Matrix" />。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> と指定した <see cref="T:System.Drawing.Drawing2D.Matrix" /> のワールド変換を乗算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、結果が x ワールド変換 `matrix` されるように、`matrix` パラメーターで指定された行列を前に付加します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   `transformMatrix` 行列を作成します (2 つの id 行列とゼロ平行移動ベクター)。  
  
-   ベクター (200, 100) で変換行列を変換します。  
  
-   Windows フォームのワールド変換行列を30°回転させ、回転行列の前に30°を変換します。  
  
-   回転したワールド変換行列を翻訳された `transformMatrix`で乗算し、`transformMatrix` の前にワールド変換行列を付加します。  
  
-   回転変換された楕円を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#143)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#143)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#143)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0659fe00-9e0c-41c4-9118-016f2404c905">変換の行列表現</related>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.MultiplyTransform (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">ワールド変換を乗算する 4 × 4 <see cref="T:System.Drawing.Drawing2D.Matrix" />。</param>
        <param name="order">乗算の順序を決定する <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> と指定した <see cref="T:System.Drawing.Drawing2D.Matrix" /> のワールド変換を指定した順序で乗算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `order` パラメーターの値 <xref:System.Drawing.Drawing2D.MatrixOrder.Prepend> は、乗算の順序が x ワールド変換 `matrix` であることを指定します。 `order` の <xref:System.Drawing.Drawing2D.MatrixOrder.Append> の値は、乗算の順序がワールド変換 x `matrix`であることを指定します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   `transformMatrix` 行列を作成します (2 つの id 行列とゼロ平行移動ベクター)。  
  
-   ベクター (200, 100) で変換行列を変換します。  
  
-   Windows フォームのワールド変換行列を30°回転させます。これにより、回転行列は30°でフォームの変換行列に付加されます。  
  
-   回転したワールド変換行列を翻訳された `transformMatrix`で乗算し、ワールド変換行列に `transformMatrix` を追加します。  
  
-   回転変換された楕円を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#144)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#144)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#144)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0659fe00-9e0c-41c4-9118-016f2404c905">変換の行列表現</related>
      </Docs>
    </Member>
    <Member MemberName="PageScale">
      <MemberSignature Language="C#" Value="public float PageScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PageScale" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageScale" />
      <MemberSignature Language="VB.NET" Value="Public Property PageScale As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float PageScale { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.PageScale : single with get, set" Usage="System.Drawing.Graphics.PageScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のワールド単位とページ単位の間のスケーリングを取得または設定します。</summary>
        <value>このプロパティは、この <see cref="T:System.Drawing.Graphics" /> のワールド単位とパージ単位の間のスケーリングの値を指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、四角形を描画するときに、<xref:System.Drawing.Graphics.PageScale%2A> メンバーと <xref:System.Drawing.Graphics.TranslateTransform%2A> メンバーを使用してスケールと原点を変更する方法を示しています。  
  
 この例は、Windows フォームと共に使用するように設計されています。 フォームにコードを貼り付けて、フォームの <xref:System.Windows.Forms.Control.Paint> イベントを処理するときに `ChangePageScaleAndTranslateTransform` メソッドを呼び出し、`e` を <xref:System.Windows.Forms.PaintEventArgs>として渡します。  
  
 [!code-cpp[System.Drawing.GraphicsProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.GraphicsProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#2)]
 [!code-vb[System.Drawing.GraphicsProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">座標系の種類</related>
      </Docs>
    </Member>
    <Member MemberName="PageUnit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit PageUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit PageUnit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageUnit" />
      <MemberSignature Language="VB.NET" Value="Public Property PageUnit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit PageUnit { System::Drawing::GraphicsUnit get(); void set(System::Drawing::GraphicsUnit value); };" />
      <MemberSignature Language="F#" Value="member this.PageUnit : System.Drawing.GraphicsUnit with get, set" Usage="System.Drawing.Graphics.PageUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のページ座標で使用する長さの単位を取得または設定します。</summary>
        <value><see cref="T:System.Drawing.GraphicsUnit" /> 値の 1 つ (<see cref="F:System.Drawing.GraphicsUnit.World" /> を除く)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 グラフィックスユニットは、この <xref:System.Drawing.Graphics>のページ座標に使用される測定単位です。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Drawing.Graphics.PageUnit%2A> プロパティを変更した場合の影響を示しています。  
  
 この例は、Windows フォームと共に使用するように設計されています。 フォームにコードを貼り付けて、フォームの <xref:System.Windows.Forms.Control.Paint> イベントを処理するときに `ChangePageUnit` メソッドを呼び出し、`e` を <xref:System.Windows.Forms.PaintEventArgs>として渡します。  
  
 [!code-cpp[System.Drawing.GraphicsProperties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.GraphicsProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#3)]
 [!code-vb[System.Drawing.GraphicsProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:System.Drawing.Graphics.PageUnit" /> が、物理単位ではない <see cref="F:System.Drawing.GraphicsUnit.World" /> に設定されています。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">座標系の種類</related>
      </Docs>
    </Member>
    <Member MemberName="PixelOffsetMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PixelOffsetMode" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelOffsetMode As PixelOffsetMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PixelOffsetMode PixelOffsetMode { System::Drawing::Drawing2D::PixelOffsetMode get(); void set(System::Drawing::Drawing2D::PixelOffsetMode value); };" />
      <MemberSignature Language="F#" Value="member this.PixelOffsetMode : System.Drawing.Drawing2D.PixelOffsetMode with get, set" Usage="System.Drawing.Graphics.PixelOffsetMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PixelOffsetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のレンダリング時のピクセルのオフセット方法を指定する値が取得または設定されます。</summary>
        <value>このプロパティは、<see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" /> 列挙型のメンバーを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用して、より高い品質、低速のレンダリング、または品質の低下を指定し、この <xref:System.Drawing.Graphics> オブジェクトの内容をより高速にレンダリングします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReleaseHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の <see cref="M:System.Drawing.Graphics.GetHdc" /> メソッドを前回呼び出したときに取得したデバイス コンテキスト ハンドルを解放します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHdc();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHdc : unit -&gt; unit&#xA;override this.ReleaseHdc : unit -&gt; unit" Usage="graphics.ReleaseHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.ReleaseHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の <see cref="M:System.Drawing.Graphics.GetHdc" /> メソッドを前回呼び出したときに取得したデバイス コンテキスト ハンドルを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.GetHdc%2A> と <xref:System.Drawing.Graphics.ReleaseHdc%2A> は、Windows デバイスのハンドルを取得して解放できる2つの方法です。 Windows ハンドルの使用が終了したら、<xref:System.Drawing.Graphics.ReleaseHdc%2A> を呼び出すことで、<xref:System.Drawing.Graphics.GetHdc%2A> の呼び出しに常に従う必要があります。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードへのアクセスに使用します。 関連する列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdc : nativeint -&gt; unit" Usage="graphics.ReleaseHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc"><see cref="T:System.Drawing.Graphics" /> の <see cref="M:System.Drawing.Graphics.GetHdc" /> メソッドを前回呼び出したときに取得したデバイス コンテキストを識別するハンドル。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の <see cref="M:System.Drawing.Graphics.GetHdc" /> メソッドを前回呼び出したときに取得したデバイス コンテキスト ハンドルを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 デバイスコンテキストは、グラフィカルオブジェクトとそれらに関連付けられている属性のセット、および出力に影響を与えるグラフィカルモードを定義する [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] に基づく Windows 構造です。  
  
 <xref:System.Drawing.Graphics.GetHdc%2A> および <xref:System.Drawing.Graphics.ReleaseHdc%2A> メソッドの呼び出しは、ペアで記述する必要があります。 <xref:System.Drawing.Graphics.GetHdc%2A> と <xref:System.Drawing.Graphics.ReleaseHdc%2A> メソッドのペアのスコープでは、通常、[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 関数に対してのみ呼び出しを行います。 `hdc` パラメーターを生成した <xref:System.Drawing.Graphics> の [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] メソッドに対して行われたそのスコープ内の呼び出しは、`ObjectBusy` エラーが発生して失敗します。 また、[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] は、後続の操作で `hdc` パラメーターの <xref:System.Drawing.Graphics> に加えられた状態の変更を無視します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 この例では、Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 関数を呼び出して、[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> メソッドと同じタスクを実行する方法を示します。 コードは、次のアクションを実行します。  
  
-   Windows DLL ファイル gdi32 の相互運用性 <xref:System.Runtime.InteropServices.DllImportAttribute> 属性を定義します。 この DLL には、目的の [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 関数が含まれており、その DLL の <xref:System.Drawing.Rectangle> 関数が外部として定義されています。  
  
-   赤いペンを作成します。  
  
-   ペンを使用して、[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> メソッドを使用して画面に四角形を描画します。  
  
-   `hdc` 内部ポインター型の変数を定義し、その値をフォームのデバイスコンテキストを指すハンドルに設定します。  
  
-   [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> 関数を使用して、画面に四角形を描画します。  
  
-   `hdc` パラメーターによって表されるデバイスコンテキストを解放します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#145)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#145)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#145)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードへのアクセスに使用します。 関連する列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdcInternal">
      <MemberSignature Language="C#" Value="public void ReleaseHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdcInternal (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdcInternal : nativeint -&gt; unit" Usage="graphics.ReleaseHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">デバイス コンテキストを識別するハンドル。</param>
        <summary>デバイス コンテキストを識別するハンドルを解放します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードへのアクセスに使用します。 関連する列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="RenderingOrigin">
      <MemberSignature Language="C#" Value="public System.Drawing.Point RenderingOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point RenderingOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.RenderingOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderingOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point RenderingOrigin { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderingOrigin : System.Drawing.Point with get, set" Usage="System.Drawing.Graphics.RenderingOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ディザリングおよびハッチ ブラシに使用する、この <see cref="T:System.Drawing.Graphics" /> のレンダリングの原点を取得または設定します。</summary>
        <value>8 ビット/ピクセルおよび 16 ビット/ピクセルのディザリングの原点を表す <see cref="T:System.Drawing.Point" /> 構造体。この構造体は、ハッチ ブラシの原点を設定する場合にも使用されます。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetClip" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetClip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetClip();" />
      <MemberSignature Language="F#" Value="member this.ResetClip : unit -&gt; unit" Usage="graphics.ResetClip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を無制限領域にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics> のクリッピング領域が無制限の場合、この <xref:System.Drawing.Graphics> 描画される項目はクリップされません。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   左上隅が (0, 0) の四角形を作成し、クリッピング領域をこの四角形に設定します。  
  
-   左上隅が (100, 100) の2番目の四角形を作成し、この四角形と現在のクリッピング領域 (最初の四角形) の交差部分にクリッピング領域を設定します。  
  
-   前の四角形と単色の青のブラシの両方を含む大きな四角形を塗りつぶします。  
  
-   クリッピング領域を無限にリセットします。  
  
-   2つのクリッピング領域の周囲に四角形を描画します。最初のクリッピング四角形には黒のペンを使用し、2番目のクリッピング領域には赤いペンを使用します。  
  
 結果として、2つの四角形の交差部分のみが青で塗りつぶされます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#146)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#146)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#146)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberSignature Language="F#" Value="member this.ResetTransform : unit -&gt; unit" Usage="graphics.ResetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>対象の <see cref="T:System.Drawing.Graphics" /> のワールド変換行列を単位行列にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Id 行列は、スケーリング、回転、または変換を行わない変換を表します。 この <xref:System.Drawing.Graphics> のワールド変換を id 行列にリセットすると、変換された項目のジオメトリがワールド変換によって変化しないことを意味します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換をベクター (100, 0) で変換します。  
  
-   フォームのグラフィックスの状態を保存します。  
  
-   フォームのワールド変換を id にリセットし、四角形に単色の赤いブラシで塗りつぶします。  
  
-   変換されたグラフィックスの状態を復元し、四角形に単色の青のブラシで塗りつぶします。  
  
 結果は、変換されていない赤で塗りつぶされた四角形と、変換された青で塗りつぶされた四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#147)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#147)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#147)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore(class System.Drawing.Drawing2D.GraphicsState gstate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restore (gstate As GraphicsState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restore(System::Drawing::Drawing2D::GraphicsState ^ gstate);" />
      <MemberSignature Language="F#" Value="member this.Restore : System.Drawing.Drawing2D.GraphicsState -&gt; unit" Usage="graphics.Restore gstate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gstate" Type="System.Drawing.Drawing2D.GraphicsState" />
      </Parameters>
      <Docs>
        <param name="gstate">この <see cref="T:System.Drawing.Graphics" /> を復元したときの状態を表す <see cref="T:System.Drawing.Drawing2D.GraphicsState" />。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の状態を <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> によって表される状態に復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics>の <xref:System.Drawing.Graphics.Save%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics> の状態を保持する情報ブロックがスタックに配置されます。 <xref:System.Drawing.Graphics.Save%2A> メソッドは、その情報ブロックを識別する <xref:System.Drawing.Drawing2D.GraphicsState> を返します。 識別 <xref:System.Drawing.Drawing2D.GraphicsState> を <xref:System.Drawing.Graphics.Restore%2A> メソッドに渡すと、情報ブロックがスタックから削除され、<xref:System.Drawing.Graphics.Save%2A> メソッド呼び出し時の状態に <xref:System.Drawing.Graphics> を復元するために使用されます。 <xref:System.Drawing.Graphics.Save%2A> メソッドへの特定の呼び出しによって返される <xref:System.Drawing.Drawing2D.GraphicsState> は、`Restore` メソッドに1回だけ渡すことができます。  
  
 <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しは入れ子にすることができます。つまり、<xref:System.Drawing.Graphics.Restore%2A> メソッドを呼び出す前に、<xref:System.Drawing.Graphics.Save%2A> メソッドを複数回呼び出すことができます。 <xref:System.Drawing.Graphics.Save%2A> メソッドを呼び出すたびに、情報ブロックがスタックに配置され、情報ブロックの <xref:System.Drawing.Drawing2D.GraphicsState> を受け取ります。 これらのオブジェクトのいずれかを <xref:System.Drawing.Graphics.Restore%2A> メソッドに渡すと、その <xref:System.Drawing.Graphics> は、その特定の <xref:System.Drawing.Drawing2D.GraphicsState>を返した <xref:System.Drawing.Graphics.Save%2A> メソッド呼び出し時の状態に戻ります。 <xref:System.Drawing.Graphics.Save%2A> メソッド呼び出しによってスタックに配置された情報ブロックがスタックから削除され、<xref:System.Drawing.Graphics.Save%2A> メソッド呼び出しの後にそのスタックに配置されたすべての情報ブロックも削除されます。  
  
 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しと同じスタックに情報ブロックが配置されます。 <xref:System.Drawing.Graphics.Restore%2A> の呼び出しが <xref:System.Drawing.Graphics.Save%2A> 呼び出しとペアになっているのと同様に、<xref:System.Drawing.Graphics.EndContainer%2A> メソッド呼び出しは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しとペアになります。  
  
 <xref:System.Drawing.Graphics.Restore%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.Save%2A> メソッドへの対応する呼び出しがスタックから削除された後に、(<xref:System.Drawing.Graphics.Save%2A> メソッドまたは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって) スタックに配置されたすべての情報ブロックが削除されます。 同様に、<xref:System.Drawing.Graphics.EndContainer%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドへの対応する呼び出しがスタックから削除された後に、(<xref:System.Drawing.Graphics.Save%2A> メソッドまたは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって) スタックに配置されたすべての情報ブロックが削除されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換をベクター (100, 0) で変換します。  
  
-   フォームのグラフィックスの状態を保存します。  
  
-   フォームのワールド変換を id にリセットし、四角形に単色の赤いブラシで塗りつぶします。  
  
-   変換されたグラフィックスの状態を復元し、2番目の四角形に単色の青のブラシで塗りつぶします。  
  
 結果は、変換されていない赤で塗りつぶされた四角形と、変換された青で塗りつぶされた四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#148)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#148)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#148)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列に、指定した回転を適用します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single -&gt; unit" Usage="graphics.RotateTransform angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">回転角度。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列に、指定した回転を適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 回転操作は、`angle` パラメーターから派生した要素を持つ行列によって、変換行列を乗算することで構成されます。 このメソッドは、変換行列に前に付加して回転を適用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換行列をベクター (100, 0) で変換します。  
  
-   ワールド変換を30度回転させて、回転行列をワールド変換行列の前に付加します。  
  
-   青いペンを使用して、回転した平行移動楕円を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#149)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#149)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#149)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.RotateTransform (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">回転角度。</param>
        <param name="order">回転が行列変換の後ろに追加されるか前に付加されるかを指定する <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列に、指定した回転を指定した順序で適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 回転操作は、`angle` パラメーターから派生した要素を持つ行列によって、変換行列を乗算することで構成されます。 このメソッドは、`order` パラメーターに従って、回転行列によって <xref:System.Drawing.Graphics> の変換行列を先頭または末尾に追加します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換行列をベクター (100, 0) で変換します。  
  
-   ワールド変換を30°の角度で回転させ、回転行列を <xref:System.Drawing.Drawing2D.MatrixOrder.Append>でワールド変換行列に追加します。  
  
-   青いペンを使用して、回転した平行楕円を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#150)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#150)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#150)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsState Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsState Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Save" />
      <MemberSignature Language="VB.NET" Value="Public Function Save () As GraphicsState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsState ^ Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; System.Drawing.Drawing2D.GraphicsState" Usage="graphics.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在の状態を保存し、保存した状態を <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> で識別します。</summary>
        <returns>このメソッドは、この <see cref="T:System.Drawing.Graphics" /> の保存状態を表す <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics>の <xref:System.Drawing.Graphics.Save%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics> の状態を保持する情報ブロックがスタックに配置されます。 <xref:System.Drawing.Graphics.Save%2A> メソッドは、その情報ブロックを識別する <xref:System.Drawing.Drawing2D.GraphicsState> を返します。 識別 <xref:System.Drawing.Drawing2D.GraphicsState> を <xref:System.Drawing.Graphics.Restore%2A> メソッドに渡すと、情報ブロックがスタックから削除され、<xref:System.Drawing.Graphics.Save%2A> メソッド呼び出し時の状態に <xref:System.Drawing.Graphics> を復元するために使用されます。 <xref:System.Drawing.Graphics.Save%2A> メソッドへの特定の呼び出しによって返される <xref:System.Drawing.Drawing2D.GraphicsState> は、<xref:System.Drawing.Graphics.Restore%2A> メソッドに1回だけ渡すことができます。  
  
 <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しは入れ子にすることができます。つまり、<xref:System.Drawing.Graphics.Restore%2A> メソッドを呼び出す前に、<xref:System.Drawing.Graphics.Save%2A> メソッドを複数回呼び出すことができます。 <xref:System.Drawing.Graphics.Save%2A> メソッドを呼び出すたびに、情報ブロックがスタックに配置され、情報ブロックの <xref:System.Drawing.Drawing2D.GraphicsState> を受け取ります。 これらのオブジェクトのいずれかを <xref:System.Drawing.Graphics.Restore%2A> メソッドに渡すと、その <xref:System.Drawing.Graphics> は、その特定の <xref:System.Drawing.Drawing2D.GraphicsState>を返した <xref:System.Drawing.Graphics.Save%2A> メソッド呼び出し時の状態に戻ります。 <xref:System.Drawing.Graphics.Save%2A> メソッド呼び出しによってスタックに配置された情報ブロックがスタックから削除され、<xref:System.Drawing.Graphics.Save%2A> メソッド呼び出しの後にそのスタックに配置されたすべての情報ブロックも削除されます。  
  
 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しと同じスタックに情報ブロックが配置されます。 <xref:System.Drawing.Graphics.Restore%2A> の呼び出しが <xref:System.Drawing.Graphics.Save%2A> 呼び出しとペアになっているのと同様に、<xref:System.Drawing.Graphics.EndContainer%2A> メソッド呼び出しは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出しとペアになります。  
  
 <xref:System.Drawing.Graphics.Restore%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.Save%2A> メソッドへの対応する呼び出しがスタックから削除された後に、(<xref:System.Drawing.Graphics.Save%2A> メソッドまたは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって) スタックに配置されたすべての情報ブロックが削除されます。 同様に、<xref:System.Drawing.Graphics.EndContainer%2A> メソッドを呼び出すと、<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドへの対応する呼び出しがスタックから削除された後に、(<xref:System.Drawing.Graphics.Save%2A> メソッドまたは <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドによって) スタックに配置されたすべての情報ブロックが削除されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換をベクター (100, 0) で変換します。  
  
-   フォームのグラフィックスの状態を保存します。  
  
-   フォームのワールド変換を id にリセットし (2x2 恒等行列と0ベクトル平行移動)、四角形に塗りつぶした赤色のブラシを設定します。  
  
-   変換されたグラフィックスの状態を復元し、四角形に単色の青のブラシで塗りつぶします。  
  
 結果として、左側に平行移動されていない赤で塗りつぶされた四角形と、フォームの右側にある、変換された青い塗りつぶされた四角形が返されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#151)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#151)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#151)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列の前に指定したスケーリング操作を付加することによって、この変換行列にスケーリング操作を適用します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single -&gt; unit" Usage="graphics.ScaleTransform (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">x 方向のスケール ファクター。</param>
        <param name="sy">y 方向のスケール ファクター。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列の前に指定したスケーリング操作を付加することによって、この変換行列にスケーリング操作を適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スケーリング操作は、変換行列を、要素が (`sx`、`sy`、1) である対角線行列で乗算することで構成されます。 このメソッドは、スケーリング行列によって <xref:System.Drawing.Graphics> の変換行列の前に付加します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換行列を30°回転します。  
  
-   この行列を x 方向に3倍の係数で拡大し、スケーリング変換を前に付加することによって y 方向の係数を1にします。  
  
-   青いペンを使用して、回転した回転した四角形を描画します。  
  
 結果はまだ四角形のままです。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#152)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#152)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#152)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.ScaleTransform (sx, sy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">x 方向のスケール ファクター。</param>
        <param name="sy">y 方向のスケール ファクター。</param>
        <param name="order">スケーリング操作が変換行列の前に付加されるか後ろに追加されるかを指定する <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列に、指定したスケーリング操作を指定した順序で適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スケーリング操作は、変換行列を、要素が (`sx`、`sy`、1) である対角線行列で乗算することで構成されます。 このメソッドは、`order` パラメーターに従って、スケーリング行列によって <xref:System.Drawing.Graphics> の変換行列を先頭または末尾に追加します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換行列を30°回転します。  
  
-   この行列を x 方向の3倍の係数で拡大し、<xref:System.Drawing.Drawing2D.MatrixOrder.Append> メンバーと共にスケーリング変換を追加することで y 方向の係数を1にします。  
  
-   青いペンを使用して、回転、拡大縮小された四角形を描画します。  
  
 結果は平行四辺形です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#153)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#153)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#153)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を指定した <see cref="T:System.Drawing.Graphics" /> の <see langword="Clip" /> プロパティに設定します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.SetClip path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">新しいクリップ領域を表す <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> オブジェクトに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターによって表されるグラフィックスパスが閉じられていない場合は、パスを閉じるために、最後のポイントから最初のポイントまで追加のセグメントが追加されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   グラフィックスパスを作成し、そのパスに楕円を追加します。  
  
-   クリッピング領域を楕円のパスに設定します。  
  
-   大きな四角形を塗りつぶします。黒いブラシを使用します。  
  
 結果は、塗りつぶされた黒い楕円です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#154)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#154)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#154)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (g As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics -&gt; unit" Usage="graphics.SetClip g" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">新しいクリップ領域の取得元となる <see cref="T:System.Drawing.Graphics" />。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を指定した <see cref="T:System.Drawing.Graphics" /> の <see langword="Clip" /> プロパティに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターであり、`thisForm`の例の <xref:System.Windows.Forms.Form> である <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例の `thisForm`<xref:System.Windows.Forms.Form> から一時 <xref:System.Drawing.Graphics> を作成します。  
  
-   一時 <xref:System.Drawing.Graphics> のクリッピング領域を小さい四角形に設定します。  
  
-   フォームのグラフィックオブジェクトのクリッピング領域を、一時的な <xref:System.Drawing.Graphics>に更新します。  
  
-   大きな四角形を塗りつぶします。黒いブラシを使用します。  
  
 結果は、小さな塗りつぶされた黒い正方形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#156)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#156)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">新しいクリップ領域を表す <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された四角形に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   クリッピング領域の小さい四角形を作成します。  
  
-   クリッピング領域を四角形に設定します。  
  
-   大きな四角形を塗りつぶします。黒いブラシを使用します。  
  
 その結果、黒い四角形が小さくなります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#158)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#158)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">新しいクリップ領域を表す <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を <see cref="T:System.Drawing.RectangleF" /> 構造体で指定された四角形に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   クリッピング領域の小さい四角形を作成します。  
  
-   クリッピング領域を四角形に設定します。  
  
-   大きな四角形を塗りつぶします。黒いブラシを使用します。  
  
 その結果、黒い四角形が小さくなります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#160)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#160)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (path, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="path">組み合わせる <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <param name="combineMode">使用する組み合わせ操作を指定する <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を、現在のクリップ領域と指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> とを組み合わせる指定の操作の結果に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` パラメーターによって表されるグラフィックスパスが閉じられていない場合は、パスを閉じるために、最後のポイントから最初のポイントまで追加のセグメントが追加されます。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   グラフィックスパスを作成し、そのパスに楕円を追加します。  
  
-   クリッピング領域を、<xref:System.Drawing.Drawing2D.CombineMode.Replace> メンバーを持つ楕円のパスに設定します。  
  
-   大きな四角形を塗りつぶします。黒いブラシを使用します。  
  
 結果は、塗りつぶされた黒い楕円です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#155)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#155)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#155)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (g, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="g">組み合わせるクリップ領域を指定する <see cref="T:System.Drawing.Graphics" />。</param>
        <param name="combineMode">使用する組み合わせ操作を指定する <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を、現在のクリップ領域と指定した <see cref="T:System.Drawing.Graphics" /> の <see cref="P:System.Drawing.Graphics.Clip" /> プロパティとを組み合わせる指定の操作の結果に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターであり、`thisForm`の例の <xref:System.Windows.Forms.Form> である <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   例の `thisForm`<xref:System.Windows.Forms.Form> から一時 <xref:System.Drawing.Graphics> を作成します。  
  
-   一時 <xref:System.Drawing.Graphics> のクリッピング領域を小さい四角形に設定します。  
  
-   フォームのグラフィックオブジェクトのクリッピング領域を、<xref:System.Drawing.Drawing2D.CombineMode.Replace> メンバーを持つ新しい <xref:System.Drawing.Graphics> の領域に更新します。  
  
-   大きな四角形を塗りつぶします。黒いブラシを使用します。  
  
 結果は、小さな塗りつぶされた黒い正方形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#157)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#157)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">組み合わせる <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="combineMode">使用する組み合わせ操作を指定する <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を現在のクリップ領域と <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された四角形とを組み合わせる指定の操作の結果に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   クリッピング領域の小さい四角形を作成します。  
  
-   クリッピング領域を <xref:System.Drawing.Drawing2D.CombineMode.Replace> メンバーを持つ四角形に設定します。  
  
-   大きな四角形を塗りつぶします。黒いブラシを使用します。  
  
 その結果、黒い四角形が小さくなります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#159)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#159)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#159)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">組み合わせる <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="combineMode">使用する組み合わせ操作を指定する <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を現在のクリップ領域と <see cref="T:System.Drawing.RectangleF" /> 構造体で指定された四角形とを組み合わせる指定の操作の結果に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   クリッピング領域の小さい四角形を作成します。  
  
-   クリッピング領域を <xref:System.Drawing.Drawing2D.CombineMode.Replace> メンバーを持つ四角形に設定します。  
  
-   大きな四角形を塗りつぶします。黒いブラシを使用します。  
  
 その結果、黒い四角形が小さくなります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#161)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#161)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Region region, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Region ^ region, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Region * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (region, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="region">組み合わせる <see cref="T:System.Drawing.Region" />。</param>
        <param name="combineMode">使用する組み合わせ操作を指定する <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を、現在のクリップ領域と指定した <see cref="T:System.Drawing.Region" /> とを組み合わせる指定の操作の結果に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   クリッピング領域の小さい四角形を作成します。  
  
-   クリッピング領域を <xref:System.Drawing.Drawing2D.CombineMode.Replace> メンバーを持つ四角形に設定します。  
  
-   大きな四角形を塗りつぶします。黒いブラシを使用します。  
  
 その結果、黒い四角形が小さくなります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#162)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#162)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#162)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmoothingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.SmoothingMode SmoothingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.SmoothingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SmoothingMode As SmoothingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::SmoothingMode SmoothingMode { System::Drawing::Drawing2D::SmoothingMode get(); void set(System::Drawing::Drawing2D::SmoothingMode value); };" />
      <MemberSignature Language="F#" Value="member this.SmoothingMode : System.Drawing.Drawing2D.SmoothingMode with get, set" Usage="System.Drawing.Graphics.SmoothingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.SmoothingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のレンダリング品質を取得または設定します。</summary>
        <value><see cref="T:System.Drawing.Drawing2D.SmoothingMode" /> 値のいずれか 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スムージングモードでは、塗りつぶし領域の線、曲線、および端がスムージング (アンチエイリアシングとも呼ばれます) を使用するかどうかを指定します。 1つの例外として、パスグラデーションブラシがスムージングモードに従わないことが挙げられます。 <xref:System.Drawing.Drawing2D.PathGradientBrush> を使用して塗りつぶされた領域は、<xref:System.Drawing.Graphics.SmoothingMode%2A> プロパティに関係なく、同じ方法 (エイリアス) で表示されます。  
  
   
  
## Examples  
 次のメソッドは、<xref:System.Drawing.Pen.DashCap%2A>、<xref:System.Drawing.Pen.DashPattern%2A>、および <xref:System.Drawing.Graphics.SmoothingMode%2A> の各プロパティを設定した場合の効果を示しています。 この例の出力を次の図に示します。  
  
 ![スムージングが適用されていない行。](~/add/media/gdi-smoothingmode.png "スムージングを適用した行と適用していない行。")  
  
 この例は、Windows フォームと共に使用するように設計されています。 フォームにコードを貼り付けて、フォームの <xref:System.Windows.Forms.Control.Paint> イベントを処理するときに `ShowPensAndSmoothingMode` メソッドを呼び出し、`e` を <xref:System.Windows.Forms.PaintEventArgs>として渡します。  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContrast">
      <MemberSignature Language="C#" Value="public int TextContrast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextContrast" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextContrast" />
      <MemberSignature Language="VB.NET" Value="Public Property TextContrast As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextContrast { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextContrast : int with get, set" Usage="System.Drawing.Graphics.TextContrast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>レンダリング テキストのガンマ補正値を取得または設定します。</summary>
        <value>アンチエイリアス処理されたテキストおよび ClearType テキストを描画するために使用されるガンマ補正値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ガンマ補正値は 0 ~ 12 の範囲で指定する必要があります。 既定値は 4 です。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Drawing.Graphics.TextRenderingHint%2A> と <xref:System.Drawing.Graphics.TextContrast%2A> プロパティの使用方法を示しています。  
  
 この例は、Windows フォームと共に使用するように設計されています。 フォームにコードを貼り付けて、フォームの <xref:System.Windows.Forms.Control.Paint> イベントを処理するときに `ChangeTextRenderingHintAndTextContrast` メソッドを呼び出し、`e` を <xref:System.Windows.Forms.PaintEventArgs>として渡します。  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRenderingHint">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Text.TextRenderingHint TextRenderingHint" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextRenderingHint" />
      <MemberSignature Language="VB.NET" Value="Public Property TextRenderingHint As TextRenderingHint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Text::TextRenderingHint TextRenderingHint { System::Drawing::Text::TextRenderingHint get(); void set(System::Drawing::Text::TextRenderingHint value); };" />
      <MemberSignature Language="F#" Value="member this.TextRenderingHint : System.Drawing.Text.TextRenderingHint with get, set" Usage="System.Drawing.Graphics.TextRenderingHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.TextRenderingHint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> に関連付けられているテキストのレンダリング モードを取得または設定します。</summary>
        <value><see cref="T:System.Drawing.Text.TextRenderingHint" /> 値のいずれか 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 テキスト表示ヒントは、テキストをアンチエイリアシングで描画するかどうかを指定します。  
  
> [!NOTE]
>  <xref:System.Drawing.Graphics.TextRenderingHint%2A> プロパティが <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>に設定されている場合、<xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> の <xref:System.Drawing.Graphics.CompositingMode%2A> プロパティ値は使用しないでください。 例外が発生したか、イメージが正しく表示されない可能性があります。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Drawing.Graphics.TextRenderingHint%2A> と <xref:System.Drawing.Graphics.TextContrast%2A> プロパティの使用方法を示しています。  
  
 この例は、Windows フォームと共に使用するように設計されています。 フォームにコードを貼り付けて、フォームの <xref:System.Windows.Forms.Control.Paint> イベントを処理するときに `ChangeTextRenderingHintAndTextContrast` メソッドを呼び出し、`e` を <xref:System.Windows.Forms.PaintEventArgs>として渡します。  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Drawing.Drawing2D.Matrix with get, set" Usage="System.Drawing.Graphics.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のジオメトリック ワールド変換のコピーを取得または設定します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> のジオメトリック ワールド変換を表す <see cref="T:System.Drawing.Drawing2D.Matrix" /> のコピー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GDI + では、ワールド、ページ、デバイスという3つの座標空間が使用されます。 ワールド座標は、特定のグラフィックワールドをモデル化するために使用される座標であり、.NET Framework のメソッドに渡す座標です。 ページ座標は、フォームやコントロールなど、描画サーフェイスによって使用される座標系を表します。 デバイス座標は、画面やプリンターなど、描画される物理デバイスで使用される座標です。 <xref:System.Drawing.Graphics.Transform%2A> プロパティは、ワールド座標をページ座標にマップするワールド変換を表します。  
  
 返されるマトリックスと <xref:System.Drawing.Graphics.Transform%2A> プロパティによって、幾何学的変換のコピーであるため、不要になったらマトリックスを破棄する必要があります。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">座標系の種類</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransformPoints">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在のワールド変換とページ変換を使用して、点の配列をある座標空間から別の座標空間に変換します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Point[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">変換先の座標空間を指定する <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 列挙体のメンバー。</param>
        <param name="srcSpace">変換元の座標空間を指定する <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 列挙体のメンバー。</param>
        <param name="pts">変換する点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在のワールド変換とページ変換を使用して、点の配列をある座標空間から別の座標空間に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   2つの点を作成し、それらの間に青い線を描画します。  
  
-   ワールド変換を、x 方向の量40と y 方向の30で平行移動するように設定します。  
  
-   ワールド座標 (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) からページ座標 (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>) への点を変換します。  
  
-   ワールド変換を id にリセットします。  
  
-   変換された点の間に赤い線を描画します。  
  
 結果は青い線になり、その下の赤の線が変換されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#163)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#163)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#163)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::PointF&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.PointF[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">変換先の座標空間を指定する <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 列挙体のメンバー。</param>
        <param name="srcSpace">変換元の座標空間を指定する <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 列挙体のメンバー。</param>
        <param name="pts">変換する点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在のワールド変換とページ変換を使用して、点の配列をある座標空間から別の座標空間に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   2つの点を作成し、それらの間に青い線を描画します。  
  
-   ワールド変換を、x 方向の量40と y 方向の30で平行移動するように設定します。  
  
-   ワールド座標 (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) からページ座標 (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>) への点を変換します。  
  
-   ワールド変換を id にリセットし、変換された点の間に赤い線を描画します。  
  
 結果は青い線になり、その下の赤の線が変換されます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#164)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#164)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#164)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した量だけ水平方向および垂直方向に、この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を平行移動します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(int32 dx, int32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Integer, dy As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(int dx, int dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : int * int -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">平行移動する x 座標。</param>
        <param name="dy">平行移動する y 座標。</param>
        <summary>指定した量だけ水平方向および垂直方向に、この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を平行移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   クリッピング領域の四角形を作成します。  
  
-   クリッピング領域を四角形に設定します。  
  
-   クリッピング領域をベクター (50, 50) で平行移動します。  
  
-   大きな四角形を塗りつぶします。黒いブラシを使用します。  
  
 結果は、変換、小、黒の四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#165)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#165)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#165)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : single * single -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">平行移動する x 座標。</param>
        <param name="dy">平行移動する y 座標。</param>
        <summary>指定した量だけ水平方向および垂直方向に、この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を平行移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   クリッピング領域の四角形を作成します。  
  
-   クリッピング領域を四角形に設定します。  
  
-   クリッピング領域をベクター (50.0 F, 50.0 F) で平行移動します。  
  
-   大きな四角形を塗りつぶします。黒いブラシを使用します。  
  
 結果は、変換、小、黒の四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#166)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#166)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#166)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列の前に指定の平行移動を付加することによって、座標系の原点を変更します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single -&gt; unit" Usage="graphics.TranslateTransform (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">平行移動する x 座標。</param>
        <param name="dy">平行移動する y 座標。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列の前に指定の平行移動を付加することによって、座標系の原点を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 原点は、通常、描画サーフェイスの左上隅にあります。  変換操作は、変換行列を、変換部分が `dx` および `dy` パラメーターである行列で乗算することで構成されます。 このメソッドは、変換行列を変換行列に付加することによって、平行移動を適用します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換行列を 30.0 F 度回転させます。  
  
-   <xref:System.Drawing.Graphics.TranslateTransform%2A>を呼び出して、その変換を変換行列に付加することによって、グラフィックスオブジェクトの原点を移動します。  
  
-   青いペンを使用して、回転した平行楕円を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#167)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#167)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#167)]  
  
 次の図は、前のコード例を実行した場合の出力を示しています。  
  
 ![変換および変換された楕円](~/add/media/ndp-tranlatetransform.png "移動および変換された楕円")  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">座標系と変換</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f8e18d3-d2f5-460e-a8e3-2da891c301de">マネージド GDI+ での変換の使用</related>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.TranslateTransform (dx, dy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">平行移動する x 座標。</param>
        <param name="dy">平行移動する y 座標。</param>
        <param name="order">平行移動が変換行列の前に付加されるか後に追加されるかを指定する <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列に指定の平行移動を指定の順序で適用することによって、座標系の原点を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換操作は、変換行列を、変換部分が `dx` および `dy` パラメーターである行列で乗算することで構成されます。 このメソッドは、`order` パラメーターに従って、平行移動行列によって <xref:System.Drawing.Graphics> の変換行列を先頭または末尾に追加します。  
  
   
  
## Examples  
 次のコード例は、Windows フォームで使用するように設計されています。また、<xref:System.Windows.Forms.Control.Paint> イベントハンドラーのパラメーターである <xref:System.Windows.Forms.PaintEventArgs>`e`が必要です。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換行列を 30.0 F 度回転させます。  
  
-   <xref:System.Drawing.Graphics.TranslateTransform%2A>を呼び出して、変換をワールド変換行列に追加することによって、グラフィックスオブジェクトの原点を移動します。  
  
-   青いペンを使用して、回転した平行移動楕円を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#168)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#168)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#168)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">座標系と変換</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f8e18d3-d2f5-460e-a8e3-2da891c301de">マネージド GDI+ での変換の使用</related>
      </Docs>
    </Member>
    <Member MemberName="VisibleClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF VisibleClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF VisibleClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.VisibleClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF VisibleClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.VisibleClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.VisibleClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリッピング領域に外接する四角形を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> の表示クリッピング領域に外接する四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 結果として得られる四角形の単位は、<xref:System.Drawing.Graphics.PageUnit%2A> プロパティによって指定されます。 既定の単位はピクセルです。 通常、<xref:System.Drawing.Graphics> はコントロールに関連付けられており、四角形の原点は、そのコントロールのクライアント領域に対して相対的になります。  
  
 表示されるクリッピング領域は、この <xref:System.Drawing.Graphics> のクリッピング領域とウィンドウのクリッピング領域の交差部分です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
