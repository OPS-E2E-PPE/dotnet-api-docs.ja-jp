<Type Name="IEnumerator&lt;T&gt;" FullName="System.Collections.Generic.IEnumerator&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="57a0f07bfe033654c95bbd9a126287164e75a1ed" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75151849" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerator&lt;out T&gt; : IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerator`1&lt;+ T&gt; implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerator(Of Out T)&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerator : IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type IEnumerator&lt;'T&gt; = interface&#xA;    interface IDisposable&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="d1e66-101">列挙するオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="d1e66-101">The type of objects to enumerate.</span></span></typeparam>
    <summary><span data-ttu-id="d1e66-102">ジェネリック コレクションに対する単純な反復処理をサポートします。</span><span class="sxs-lookup"><span data-stu-id="d1e66-102">Supports a simple iteration over a generic collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1e66-103"><xref:System.Collections.Generic.IEnumerator%601> は、すべての汎用列挙子の基本インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="d1e66-103"><xref:System.Collections.Generic.IEnumerator%601> is the base interface for all generic enumerators.</span></span>  
  
 <span data-ttu-id="d1e66-104">C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="d1e66-104">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="d1e66-105">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d1e66-105">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="d1e66-106">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="d1e66-106">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="d1e66-107">最初、列挙子はコレクションの先頭の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="d1e66-107">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="d1e66-108">この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="d1e66-108">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="d1e66-109">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-109">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="d1e66-110"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d1e66-110"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="d1e66-111"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="d1e66-111"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="d1e66-112"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="d1e66-112">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="d1e66-113">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="d1e66-113">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="d1e66-114"><xref:System.Collections.IEnumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="d1e66-114">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="d1e66-115"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-115">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="d1e66-116"><xref:System.Collections.IEnumerator.Reset%2A> メソッドは、COM 相互運用性のために用意されています。</span><span class="sxs-lookup"><span data-stu-id="d1e66-116">The <xref:System.Collections.IEnumerator.Reset%2A> method is provided for COM interoperability.</span></span> <span data-ttu-id="d1e66-117">必ずしも実装する必要はありません。代わりに、実装者は単に <xref:System.NotSupportedException>をスローすることができます。</span><span class="sxs-lookup"><span data-stu-id="d1e66-117">It does not necessarily need to be implemented; instead, the implementer can simply throw a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="d1e66-118">ただし、これを選択した場合は、呼び出し元が <xref:System.Collections.IEnumerator.Reset%2A> 機能に依存していないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-118">However, if you choose to do this, you should make sure no callers are relying on the <xref:System.Collections.IEnumerator.Reset%2A> functionality.</span></span>  
  
 <span data-ttu-id="d1e66-119">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子の動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-119">If changes are made to the collection, such as adding, modifying, or deleting elements, the behavior of the enumerator is undefined.</span></span>  
  
 <span data-ttu-id="d1e66-120">列挙子はコレクションに排他アクセスできないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="d1e66-120">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="d1e66-121">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="d1e66-121">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="d1e66-122">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-122">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="d1e66-123"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="d1e66-123">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1e66-124">次の例は、カスタムオブジェクトのコレクションクラスの <xref:System.Collections.Generic.IEnumerator%601> インターフェイスの実装を示しています。</span><span class="sxs-lookup"><span data-stu-id="d1e66-124">The following example shows an implementation of the <xref:System.Collections.Generic.IEnumerator%601> interface for a collection class of custom objects.</span></span> <span data-ttu-id="d1e66-125">カスタムオブジェクトは `Box`型のインスタンスであり、コレクションクラスは `BoxCollection`です。</span><span class="sxs-lookup"><span data-stu-id="d1e66-125">The custom object is an instance of the type `Box`, and the collection class is `BoxCollection`.</span></span> <span data-ttu-id="d1e66-126">このコード例は、<xref:System.Collections.Generic.ICollection%601> インターフェイス用に用意されている、より大きな例の一部です。</span><span class="sxs-lookup"><span data-stu-id="d1e66-126">This code example is part of a larger example provided for the <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 [!code-csharp[System.Collections.Generic.BoxExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxexamples/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxexamples/vb/program.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="d1e66-127">このインターフェイスを実装するには、非ジェネリック <see cref="T:System.Collections.IEnumerator" /> インターフェイスを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-127">Implementing this interface requires implementing the nongeneric <see cref="T:System.Collections.IEnumerator" /> interface.</span></span> <span data-ttu-id="d1e66-128"><see cref="M:System.Collections.IEnumerator.MoveNext" /> メソッドと <see cref="M:System.Collections.IEnumerator.Reset" /> メソッドは <typeparamref name="T" />に依存せず、非ジェネリックインターフェイスにのみ表示されます。</span><span class="sxs-lookup"><span data-stu-id="d1e66-128">The <see cref="M:System.Collections.IEnumerator.MoveNext" /> and <see cref="M:System.Collections.IEnumerator.Reset" /> methods do not depend on <typeparamref name="T" />, and appear only on the nongeneric interface.</span></span> <span data-ttu-id="d1e66-129"><see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> プロパティは両方のインターフェイスに表示され、異なる戻り値の型があります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-129">The <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> property appears on both interfaces, and has different return types.</span></span> <span data-ttu-id="d1e66-130">明示的なインターフェイスの実装として、非ジェネリックの <see cref="P:System.Collections.IEnumerator.Current" /> プロパティを実装します。</span><span class="sxs-lookup"><span data-stu-id="d1e66-130">Implement the nongeneric <see cref="P:System.Collections.IEnumerator.Current" /> property as an explicit interface implementation.</span></span> <span data-ttu-id="d1e66-131">これにより、非ジェネリックインターフェイスのすべてのコンシューマーが、ジェネリックインターフェイスを使用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-131">This allows any consumer of the nongeneric interface to consume the generic interface.</span></span>  
  
<span data-ttu-id="d1e66-132">さらに、<see cref="T:System.Collections.Generic.IEnumerator`1" /> は <see cref="T:System.IDisposable" />を実装するため、<see cref="M:System.IDisposable.Dispose" /> メソッドを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-132">In addition, <see cref="T:System.Collections.Generic.IEnumerator`1" /> implements <see cref="T:System.IDisposable" />, which requires you to implement the <see cref="M:System.IDisposable.Dispose" /> method.</span></span> <span data-ttu-id="d1e66-133">これにより、他のリソースを使用する場合に、データベース接続を終了したり、ファイルハンドルを解放したり、同様の操作を実行したりできます。</span><span class="sxs-lookup"><span data-stu-id="d1e66-133">This enables you to close database connections or release file handles or similar operations when using other resources.</span></span> <span data-ttu-id="d1e66-134">破棄するリソースが追加されていない場合は、空の <see cref="M:System.IDisposable.Dispose" /> 実装を指定します。</span><span class="sxs-lookup"><span data-stu-id="d1e66-134">If there are no additional resources to dispose of, provide an empty <see cref="M:System.IDisposable.Dispose" /> implementation.</span></span></para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IEnumerator`1.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.Collections.Generic.IEnumerator&lt;'T&gt;.Current" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Current { T get(); };" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d1e66-135">列挙子の現在位置にあるコレクション内の要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="d1e66-135">Gets the element in the collection at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="d1e66-136">コレクション内の、列挙子の現在位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="d1e66-136">The element in the collection at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1e66-137"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、次のいずれかの条件で定義されていません。</span><span class="sxs-lookup"><span data-stu-id="d1e66-137"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="d1e66-138">列挙子は、列挙子が作成された直後に、コレクション内の最初の要素の前に配置されます。</span><span class="sxs-lookup"><span data-stu-id="d1e66-138">The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.</span></span>   <span data-ttu-id="d1e66-139"><xref:System.Collections.Generic.IEnumerator%601.Current%2A>の値を読み取る前に、<xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出して、列挙子をコレクションの最初の要素に進めておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-139"><xref:System.Collections.IEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
-   <span data-ttu-id="d1e66-140">最後に <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出したときに `false`が返されます。これはコレクションの末尾を示します。</span><span class="sxs-lookup"><span data-stu-id="d1e66-140">The last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
-   <span data-ttu-id="d1e66-141">コレクションに加えられた変更 (要素の追加、変更、削除など) が原因で、列挙子が無効になります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-141">The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.</span></span>  
  
 <span data-ttu-id="d1e66-142"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d1e66-142"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="d1e66-143"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="d1e66-143"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="d1e66-144">このインターフェイスを実装するには、非ジェネリック <see cref="T:System.Collections.IEnumerator" /> インターフェイスを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-144">Implementing this interface requires implementing the nongeneric <see cref="T:System.Collections.IEnumerator" /> interface.</span></span> <span data-ttu-id="d1e66-145"><see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> プロパティは両方のインターフェイスに表示され、異なる戻り値の型があります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-145">The <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> property appears on both interfaces, and has different return types.</span></span> <span data-ttu-id="d1e66-146">明示的なインターフェイスの実装として、非ジェネリックの <see cref="P:System.Collections.IEnumerator.Current" /> プロパティを実装します。</span><span class="sxs-lookup"><span data-stu-id="d1e66-146">Implement the nongeneric <see cref="P:System.Collections.IEnumerator.Current" /> property as an explicit interface implementation.</span></span> <span data-ttu-id="d1e66-147">これにより、非ジェネリックインターフェイスのすべてのコンシューマーが、ジェネリックインターフェイスを使用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="d1e66-147">This allows any consumer of the nongeneric interface to consume the generic interface.</span></span></para></block>
        <altmember cref="P:System.Collections.IEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
      </Docs>
    </Member>
  </Members>
</Type>
