<Type Name="Stack&lt;T&gt;" FullName="System.Collections.Generic.Stack&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1032d2a43213fb30ef3117533703a1ac993da786" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82403877" /></Metadata><TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.ICollection" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::ICollection" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Collections" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_StackDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="8282a-101">スタック内の要素の型を指定します。</span><span class="sxs-lookup"><span data-stu-id="8282a-101">Specifies the type of elements in the stack.</span></span></typeparam>
    <summary><span data-ttu-id="8282a-102">指定した同じ型のインスタンスの、後入れ先出し (LIFO) の可変サイズのコレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="8282a-102">Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-103"><xref:System.Collections.Generic.Stack%601> は配列として実装されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-103"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span>  
  
 <span data-ttu-id="8282a-104">スタックとキューは、情報のために一時的なストレージが必要な場合に便利です。つまり、値を取得した後に要素を破棄することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-104">Stacks and queues are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="8282a-105">コレクションに格納されているのと同じ順序で情報にアクセスする必要がある場合は、<xref:System.Collections.Generic.Queue%601> を使用します。</span><span class="sxs-lookup"><span data-stu-id="8282a-105">Use <xref:System.Collections.Generic.Queue%601> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="8282a-106">情報に逆の順序でアクセスする必要がある場合は、<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="8282a-106">Use <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> if you need to access the information in reverse order.</span></span>  
  
 <span data-ttu-id="8282a-107">複数のスレッドから同時にコレクションにアクセスする必要がある場合は、<xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType> と <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> 型を使用します。</span><span class="sxs-lookup"><span data-stu-id="8282a-107">Use the <xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType> and <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> types when you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="8282a-108"><xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> の一般的な使用方法は、他のプロシージャの呼び出し時に変数の状態を維持することです。</span><span class="sxs-lookup"><span data-stu-id="8282a-108">A common use for <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> is to preserve variable states during calls to other procedures.</span></span>  
  
 <span data-ttu-id="8282a-109"><xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> とその要素に対して、次の3つの主要な操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="8282a-109">Three main operations can be performed on a <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> and its elements:</span></span>  
  
-   <span data-ttu-id="8282a-110"><xref:System.Collections.Generic.Stack%601.Push%2A> は、<xref:System.Collections.Stack>の先頭に要素を挿入します。</span><span class="sxs-lookup"><span data-stu-id="8282a-110"><xref:System.Collections.Generic.Stack%601.Push%2A> inserts an element at the top of the <xref:System.Collections.Stack>.</span></span>  
  
-   <span data-ttu-id="8282a-111"><xref:System.Collections.Generic.Stack%601.Pop%2A> は、<xref:System.Collections.Generic.Stack%601>の先頭から要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="8282a-111"><xref:System.Collections.Generic.Stack%601.Pop%2A> removes an element from the top of the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
-   <span data-ttu-id="8282a-112"><xref:System.Collections.Generic.Stack%601.Peek%2A> は、<xref:System.Collections.Generic.Stack%601> の先頭にある要素を返しますが、<xref:System.Collections.Generic.Stack%601>からは削除しません。</span><span class="sxs-lookup"><span data-stu-id="8282a-112"><xref:System.Collections.Generic.Stack%601.Peek%2A> returns an element that is at the top of the <xref:System.Collections.Generic.Stack%601> but does not remove it from the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="8282a-113"><xref:System.Collections.Generic.Stack%601>の容量は、<xref:System.Collections.Generic.Stack%601>が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="8282a-113">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="8282a-114">要素が <xref:System.Collections.Generic.Stack%601>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="8282a-114">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="8282a-115">容量は、<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>を呼び出すことによって減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="8282a-115">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="8282a-116"><xref:System.Collections.Generic.Stack%601.Count%2A> がスタックの容量より小さい場合、<xref:System.Collections.Generic.Stack%601.Push%2A> は O (1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="8282a-116">If <xref:System.Collections.Generic.Stack%601.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Generic.Stack%601.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="8282a-117">新しい要素を格納するために容量を増やす必要がある場合、<xref:System.Collections.Generic.Stack%601.Push%2A> は O (`n`) 操作になります。ここで `n` は <xref:System.Collections.Generic.Stack%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8282a-117">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Generic.Stack%601.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span> <span data-ttu-id="8282a-118"><xref:System.Collections.Generic.Stack%601.Pop%2A> は O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="8282a-118"><xref:System.Collections.Generic.Stack%601.Pop%2A> is an O(1) operation.</span></span>  
  
 <span data-ttu-id="8282a-119"><xref:System.Collections.Generic.Stack%601> は、参照型の有効な値として `null` を受け入れ、重複する要素を許可します。</span><span class="sxs-lookup"><span data-stu-id="8282a-119"><xref:System.Collections.Generic.Stack%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8282a-120">次のコード例は、<xref:System.Collections.Generic.Stack%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-120">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span> <span data-ttu-id="8282a-121">このコード例では、既定の容量を持つ文字列のスタックを作成し、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを使用して5つの文字列をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="8282a-121">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="8282a-122">スタックの要素が列挙され、スタックの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-122">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="8282a-123"><xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドは、スタックから最初の文字列をポップするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-123">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="8282a-124"><xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドは、スタック上の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを使用してポップします。</span><span class="sxs-lookup"><span data-stu-id="8282a-124">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="8282a-125"><xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを使用して配列を作成し、スタック要素をコピーします。次に、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターに配列を渡し、要素の順序を反転してスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="8282a-125">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="8282a-126">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-126">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8282a-127">スタックのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-127">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8282a-128"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するためにもう一度使用されます。したがって、3つの null 要素は最後にあります。</span><span class="sxs-lookup"><span data-stu-id="8282a-128">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="8282a-129"><xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドは、文字列 "4" がスタックの最初のコピーに含まれることを示すために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティにスタックが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-129">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="8282a-130">パブリック静的 (Visual Basic では<see langword="Shared" />) なこの型のメンバーはスレッド セーフです</span><span class="sxs-lookup"><span data-stu-id="8282a-130">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="8282a-131">インスタンス メンバーについては、スレッド セーフであることの保証はありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-131">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="8282a-132"><see cref="T:System.Collections.Generic.Stack`1" /> は、コレクションが変更されていない限り、複数のリーダーを同時にサポートできます。</span><span class="sxs-lookup"><span data-stu-id="8282a-132">A <see cref="T:System.Collections.Generic.Stack`1" /> can support multiple readers concurrently, as long as the collection is not modified.</span></span>  <span data-ttu-id="8282a-133">それでも、コレクションを列挙することは、本質的にはスレッドセーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-133">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="8282a-134">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="8282a-134">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="8282a-135">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-135">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span></threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7"><span data-ttu-id="8282a-136">反復子 (C# および Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="8282a-136">Iterators (C# and Visual Basic)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8282a-137"><see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8282a-137">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8282a-138">空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8282a-138">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the default initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-139"><xref:System.Collections.Generic.Stack%601> の容量は、<xref:System.Collections.Generic.Stack%601> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="8282a-139">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="8282a-140">要素が <xref:System.Collections.Generic.Stack%601>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="8282a-140">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="8282a-141">コレクションのサイズを推定できる場合は、初期容量を指定すると、<xref:System.Collections.Generic.Stack%601>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="8282a-141">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="8282a-142">容量は、<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>を呼び出すことによって減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="8282a-142">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="8282a-143">このコンストラクターは O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="8282a-143">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8282a-144">次のコード例は、このコンストラクターと <xref:System.Collections.Generic.Stack%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-144">The following code example demonstrates this constructor and several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span>  
  
 <span data-ttu-id="8282a-145">このコード例では、既定の容量を持つ文字列のスタックを作成し、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを使用して5つの文字列をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="8282a-145">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="8282a-146">スタックの要素が列挙され、スタックの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-146">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="8282a-147"><xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドは、スタックから最初の文字列をポップするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-147">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="8282a-148"><xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドは、スタック上の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを使用してポップします。</span><span class="sxs-lookup"><span data-stu-id="8282a-148">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="8282a-149"><xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを使用して配列を作成し、スタック要素をコピーします。次に、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターに配列を渡し、要素の順序を反転してスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="8282a-149">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="8282a-150">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-150">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8282a-151">スタックのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-151">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8282a-152"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するためにもう一度使用されます。したがって、3つの null 要素は最後にあります。</span><span class="sxs-lookup"><span data-stu-id="8282a-152">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="8282a-153"><xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドは、文字列 "4" がスタックの最初のコピーに含まれることを示すために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティにスタックが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-153">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="8282a-154">要素のコピー元のコレクション。</span><span class="sxs-lookup"><span data-stu-id="8282a-154">The collection to copy elements from.</span></span></param>
        <summary><span data-ttu-id="8282a-155">指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8282a-155">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-156"><xref:System.Collections.Generic.Stack%601> の容量は、<xref:System.Collections.Generic.Stack%601> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="8282a-156">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="8282a-157">要素が <xref:System.Collections.Generic.Stack%601>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="8282a-157">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="8282a-158">コレクションのサイズを推定できる場合は、初期容量を指定すると、<xref:System.Collections.Generic.Stack%601>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="8282a-158">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="8282a-159">容量は、<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>を呼び出すことによって減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="8282a-159">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="8282a-160">要素は、コレクションの <xref:System.Collections.Generic.IEnumerator%601> によって読み取られた順序で <xref:System.Collections.Generic.Stack%601> にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-160">The elements are copied onto the <xref:System.Collections.Generic.Stack%601> in the same order they are read by the <xref:System.Collections.Generic.IEnumerator%601> of the collection.</span></span>  
  
 <span data-ttu-id="8282a-161">このコンストラクターは O (`n`) 操作であり、`n` は `collection`内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="8282a-161">This constructor is an O(`n`) operation, where `n` is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8282a-162">次のコード例は、このコンストラクターと <xref:System.Collections.Generic.Stack%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-162">The following code example demonstrates this constructor and several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span>  
  
 <span data-ttu-id="8282a-163">このコード例では、既定の容量を持つ文字列のスタックを作成し、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを使用して5つの文字列をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="8282a-163">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="8282a-164">スタックの要素が列挙され、スタックの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-164">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="8282a-165"><xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドは、スタックから最初の文字列をポップするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-165">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="8282a-166"><xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドは、スタック上の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを使用してポップします。</span><span class="sxs-lookup"><span data-stu-id="8282a-166">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="8282a-167"><xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを使用して配列を作成し、スタック要素をコピーします。次に、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターに配列を渡し、要素の順序を反転してスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="8282a-167">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="8282a-168">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-168">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8282a-169">スタックのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-169">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8282a-170"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するためにもう一度使用されます。したがって、3つの null 要素は最後にあります。</span><span class="sxs-lookup"><span data-stu-id="8282a-170">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="8282a-171"><xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドは、文字列 "4" がスタックの最初のコピーに含まれることを示すために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティにスタックが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-171">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8282a-172"><paramref name="collection" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-172"><paramref name="collection" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : int -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="8282a-173"><see cref="T:System.Collections.Generic.Stack`1" /> が格納できる要素数の初期値。</span><span class="sxs-lookup"><span data-stu-id="8282a-173">The initial number of elements that the <see cref="T:System.Collections.Generic.Stack`1" /> can contain.</span></span></param>
        <summary><span data-ttu-id="8282a-174">空で、指定した初期量または既定の初期量のうち大きい方の初期量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8282a-174">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-175"><xref:System.Collections.Generic.Stack%601> の容量は、<xref:System.Collections.Generic.Stack%601> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="8282a-175">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="8282a-176">要素が <xref:System.Collections.Generic.Stack%601>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="8282a-176">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="8282a-177">コレクションのサイズを推定できる場合は、初期容量を指定すると、<xref:System.Collections.Generic.Stack%601>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="8282a-177">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="8282a-178">容量は、<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>を呼び出すことによって減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="8282a-178">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="8282a-179">このコンストラクターは、`n` が `capacity`される O (`n`) 操作です。</span><span class="sxs-lookup"><span data-stu-id="8282a-179">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8282a-180"><paramref name="capacity" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="8282a-180"><paramref name="capacity" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="stack.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8282a-181"><see cref="T:System.Collections.Generic.Stack`1" /> からすべてのオブジェクトを削除します。</span><span class="sxs-lookup"><span data-stu-id="8282a-181">Removes all objects from the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-182"><xref:System.Collections.Generic.Stack%601.Count%2A> がゼロに設定され、コレクションの要素から他のオブジェクトへの参照も解放されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-182"><xref:System.Collections.Generic.Stack%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="8282a-183">容量は変更されません。</span><span class="sxs-lookup"><span data-stu-id="8282a-183">The capacity remains unchanged.</span></span> <span data-ttu-id="8282a-184"><xref:System.Collections.Generic.Stack%601>の容量をリセットするには、<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8282a-184">To reset the capacity of the <xref:System.Collections.Generic.Stack%601>, call <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span> <span data-ttu-id="8282a-185">空の <xref:System.Collections.Generic.Stack%601> をトリミングすると、<xref:System.Collections.Generic.Stack%601> の容量が既定の容量に設定されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-185">Trimming an empty <xref:System.Collections.Generic.Stack%601> sets the capacity of the <xref:System.Collections.Generic.Stack%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="8282a-186">このメソッドは O(`n`) 操作です。`n` は <xref:System.Collections.Generic.Stack%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-186">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8282a-187">次のコード例は、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドを含む <xref:System.Collections.Generic.Stack%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-187">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="8282a-188">このコード例では、既定の容量を持つ文字列のスタックを作成し、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを使用して5つの文字列をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="8282a-188">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="8282a-189">スタックの要素が列挙され、スタックの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-189">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="8282a-190"><xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドは、スタックから最初の文字列をポップするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-190">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="8282a-191"><xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドは、スタック上の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを使用してポップします。</span><span class="sxs-lookup"><span data-stu-id="8282a-191">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="8282a-192"><xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを使用して配列を作成し、スタック要素をコピーします。次に、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターに配列を渡し、要素の順序を反転してスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="8282a-192">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="8282a-193">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-193">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8282a-194">スタックのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-194">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8282a-195"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するためにもう一度使用されます。したがって、3つの null 要素は最後にあります。</span><span class="sxs-lookup"><span data-stu-id="8282a-195">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="8282a-196"><xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドは、文字列 "4" がスタックの最初のコピーに含まれることを示すために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティにスタックが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-196">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="stack.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="8282a-197"><see cref="T:System.Collections.Generic.Stack`1" /> 内で検索するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="8282a-197">The object to locate in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span> <span data-ttu-id="8282a-198">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8282a-198">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="8282a-199">ある要素が <see cref="T:System.Collections.Generic.Stack`1" /> 内に存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="8282a-199">Determines whether an element is in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="8282a-200"><see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.Stack`1" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8282a-200"><see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Stack`1" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-201">このメソッドは、リスト内の値の型 `T`に <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 既定の等値比較子を使用して、等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="8282a-201">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="8282a-202">このメソッドは、線形検索を実行します。したがって、このメソッドは O (`n`) 操作であり、`n` は <xref:System.Collections.Generic.Stack%601.Count%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="8282a-202">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8282a-203">次のコード例は、<xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドを含む <xref:System.Collections.Generic.Stack%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-203">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="8282a-204">このコード例では、既定の容量を持つ文字列のスタックを作成し、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを使用して5つの文字列をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="8282a-204">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="8282a-205">スタックの要素が列挙され、スタックの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-205">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="8282a-206"><xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドは、スタックから最初の文字列をポップするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-206">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="8282a-207"><xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドは、スタック上の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを使用してポップします。</span><span class="sxs-lookup"><span data-stu-id="8282a-207">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="8282a-208"><xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを使用して配列を作成し、スタック要素をコピーします。次に、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターに配列を渡し、要素の順序を反転してスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="8282a-208">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="8282a-209">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-209">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8282a-210">スタックのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-210">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8282a-211"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するためにもう一度使用されます。したがって、3つの null 要素は最後にあります。</span><span class="sxs-lookup"><span data-stu-id="8282a-211">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="8282a-212"><xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドは、文字列 "4" がスタックの最初のコピーに含まれることを示すために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティにスタックが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-212">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="8282a-213">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="8282a-213">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="stack.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8282a-214"><see cref="T:System.Array" /> のコピー先である、1 次元の <see cref="T:System.Collections.Generic.Stack`1" /> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-214">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Stack`1" />.</span></span> <span data-ttu-id="8282a-215"><see cref="T:System.Array" /> には、0 から始まるインデックスが設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-215">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="8282a-216">コピーを開始する <paramref name="array" /> の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="8282a-216">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="8282a-217"><see cref="T:System.Collections.Generic.Stack`1" /> を既存の 1 次元 <see cref="T:System.Array" /> に、指定の配列インデックスを開始位置としてコピーします。</span><span class="sxs-lookup"><span data-stu-id="8282a-217">Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-218">これらの要素は、<xref:System.Collections.Generic.Stack%601.Pop%2A>の連続した呼び出しによって返される要素の順序と同様に、後入れ先出し (LIFO) の順序で配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-218">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Generic.Stack%601.Pop%2A>.</span></span>  
  
 <span data-ttu-id="8282a-219">このメソッドは O(`n`) 操作です。`n` は <xref:System.Collections.Generic.Stack%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-219">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8282a-220">次のコード例は、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを含む <xref:System.Collections.Generic.Stack%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-220">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method.</span></span>  
  
 <span data-ttu-id="8282a-221">このコード例では、既定の容量を持つ文字列のスタックを作成し、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを使用して5つの文字列をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="8282a-221">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="8282a-222">スタックの要素が列挙され、スタックの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-222">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="8282a-223"><xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドは、スタックから最初の文字列をポップするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-223">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="8282a-224"><xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドは、スタック上の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを使用してポップします。</span><span class="sxs-lookup"><span data-stu-id="8282a-224">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="8282a-225"><xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを使用して配列を作成し、スタック要素をコピーします。次に、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターに配列を渡し、要素の順序を反転してスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="8282a-225">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="8282a-226">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-226">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8282a-227">スタックのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-227">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8282a-228"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するためにもう一度使用されます。したがって、3つの null 要素は最後にあります。</span><span class="sxs-lookup"><span data-stu-id="8282a-228">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="8282a-229"><xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドは、文字列 "4" がスタックの最初のコピーに含まれることを示すために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティにスタックが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-229">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8282a-230"><paramref name="array" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-230"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8282a-231"><paramref name="arrayIndex" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="8282a-231"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8282a-232">コピー元の <see cref="T:System.Collections.Generic.Stack`1" /> の要素数が、コピー先 <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの使用可能領域を超えています。</span><span class="sxs-lookup"><span data-stu-id="8282a-232">The number of elements in the source <see cref="T:System.Collections.Generic.Stack`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.ToArray" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Stack&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8282a-233"><see cref="T:System.Collections.Generic.Stack`1" /> に格納されている要素の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="8282a-233">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <value><span data-ttu-id="8282a-234"><see cref="T:System.Collections.Generic.Stack`1" /> に含まれる要素の数。</span><span class="sxs-lookup"><span data-stu-id="8282a-234">The number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-235"><xref:System.Collections.Generic.Stack%601> の容量は、<xref:System.Collections.Generic.Stack%601> が格納できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="8282a-235">The capacity of the <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can store.</span></span> <span data-ttu-id="8282a-236"><xref:System.Collections.Generic.Stack%601.Count%2A> は、実際に <xref:System.Collections.Generic.Stack%601>内にある要素の数です。</span><span class="sxs-lookup"><span data-stu-id="8282a-236"><xref:System.Collections.Generic.Stack%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="8282a-237">容量は常に <xref:System.Collections.Generic.Stack%601.Count%2A> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8282a-237">The capacity is always greater than or equal to <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span> <span data-ttu-id="8282a-238">要素を追加するときに <xref:System.Collections.Generic.Stack%601.Count%2A> が容量を上回る場合、容量は、古い要素をコピーして新しい要素を追加する前に、内部配列を自動的に再割り当てすることによって増加します。</span><span class="sxs-lookup"><span data-stu-id="8282a-238">If <xref:System.Collections.Generic.Stack%601.Count%2A> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="8282a-239">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="8282a-239">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8282a-240">次のコード例は、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティを含む <xref:System.Collections.Generic.Stack%601> ジェネリッククラスのいくつかのプロパティとメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-240">The following code example demonstrates several properties and methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Count%2A> property.</span></span>  
  
 <span data-ttu-id="8282a-241">このコード例では、既定の容量を持つ文字列のスタックを作成し、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを使用して5つの文字列をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="8282a-241">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="8282a-242">スタックの要素が列挙され、スタックの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-242">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="8282a-243"><xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドは、スタックから最初の文字列をポップするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-243">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="8282a-244"><xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドは、スタック上の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを使用してポップします。</span><span class="sxs-lookup"><span data-stu-id="8282a-244">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="8282a-245"><xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを使用して配列を作成し、スタック要素をコピーします。次に、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターに配列を渡し、要素の順序を反転してスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="8282a-245">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="8282a-246">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-246">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8282a-247">スタックのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-247">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8282a-248"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するためにもう一度使用されます。したがって、3つの null 要素は最後にあります。</span><span class="sxs-lookup"><span data-stu-id="8282a-248">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="8282a-249"><xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドは、文字列 "4" がスタックの最初のコピーに含まれることを示すために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティにスタックが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-249">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Stack&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Stack`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Stack(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Stack&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Stack&lt;'T&gt;.Enumerator" Usage="stack.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Stack&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8282a-250"><see cref="T:System.Collections.Generic.Stack`1" /> の列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-250">Returns an enumerator for the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="8282a-251"><see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> の <see cref="T:System.Collections.Generic.Stack`1" /> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-251">An <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-252"> C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="8282a-252">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="8282a-253">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8282a-253">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="8282a-254">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="8282a-254">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="8282a-255">最初、列挙子はコレクションの先頭の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="8282a-255">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="8282a-256">この位置では、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="8282a-256">At this position, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="8282a-257">したがって、<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> を呼び出して、列挙子をコレクションの先頭の要素に進めておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-257">Therefore, you must call <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="8282a-258"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> は、<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-258"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="8282a-259"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> は、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> を次の要素に進めます。</span><span class="sxs-lookup"><span data-stu-id="8282a-259"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="8282a-260"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-260">If <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="8282a-261">列挙子がこの位置にある場合、後続の <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-261">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="8282a-262"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="8282a-262">If the last call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="8282a-263"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-263">You cannot set <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="8282a-264">列挙子は、コレクションが変更されない限り有効です。</span><span class="sxs-lookup"><span data-stu-id="8282a-264">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="8282a-265">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに無効になり、次に <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> または <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-265">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="8282a-266">列挙子はコレクションに排他アクセスできないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-266">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="8282a-267">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="8282a-267">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="8282a-268">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-268">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="8282a-269"><xref:System.Collections.Generic?displayProperty=nameWithType> のコレクションの既定の実装は同期されていません。</span><span class="sxs-lookup"><span data-stu-id="8282a-269">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="8282a-270">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="8282a-270">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8282a-271">次のコード例は、<xref:System.Collections.Generic.Stack%601> ジェネリッククラスが列挙可能であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-271">The following code example demonstrates that the <xref:System.Collections.Generic.Stack%601> generic class is enumerable.</span></span> <span data-ttu-id="8282a-272">キューの列挙には、`foreach` ステートメント (Visual Basic C++の`For Each`、の `for each`) が使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-272">The `foreach` statement (`For Each` in Visual Basic, `for each` in C++) is used to enumerate the queue.</span></span>  
  
 <span data-ttu-id="8282a-273">このコード例では、既定の容量を持つ文字列のスタックを作成し、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを使用して5つの文字列をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="8282a-273">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="8282a-274">スタックの要素が列挙され、スタックの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-274">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="8282a-275"><xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドは、スタックから最初の文字列をポップするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-275">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="8282a-276"><xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドは、スタック上の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを使用してポップします。</span><span class="sxs-lookup"><span data-stu-id="8282a-276">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="8282a-277"><xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを使用して配列を作成し、スタック要素をコピーします。次に、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターに配列を渡し、要素の順序を反転してスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="8282a-277">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="8282a-278">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-278">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8282a-279">スタックのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-279">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8282a-280"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するためにもう一度使用されます。したがって、3つの null 要素は最後にあります。</span><span class="sxs-lookup"><span data-stu-id="8282a-280">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="8282a-281"><xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドは、文字列 "4" がスタックの最初のコピーに含まれることを示すために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティにスタックが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-281">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Stack`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="stack.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8282a-282"><see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクトを削除せずに返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-282">Returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="8282a-283"><see cref="T:System.Collections.Generic.Stack`1" /> の一番上にあるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8282a-283">The object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-284">このメソッドは <xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドに類似していますが、<xref:System.Collections.Generic.Stack%601.Peek%2A> は <xref:System.Collections.Generic.Stack%601> を変更しません。</span><span class="sxs-lookup"><span data-stu-id="8282a-284">This method is similar to the <xref:System.Collections.Generic.Stack%601.Pop%2A> method, but <xref:System.Collections.Generic.Stack%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="8282a-285">型 `T` が参照型の場合、必要に応じて `null` をプレースホルダーとして <xref:System.Collections.Generic.Stack%601> にプッシュすることができます。</span><span class="sxs-lookup"><span data-stu-id="8282a-285">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span>  
  
 <span data-ttu-id="8282a-286">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="8282a-286">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8282a-287">次のコード例は、<xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドを含む <xref:System.Collections.Generic.Stack%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-287">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="8282a-288">このコード例では、既定の容量を持つ文字列のスタックを作成し、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを使用して5つの文字列をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="8282a-288">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="8282a-289">スタックの要素が列挙され、スタックの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-289">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="8282a-290"><xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドは、スタックから最初の文字列をポップするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-290">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="8282a-291"><xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドは、スタック上の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを使用してポップします。</span><span class="sxs-lookup"><span data-stu-id="8282a-291">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="8282a-292"><xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを使用して配列を作成し、スタック要素をコピーします。次に、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターに配列を渡し、要素の順序を反転してスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="8282a-292">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="8282a-293">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-293">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8282a-294">スタックのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-294">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8282a-295"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するためにもう一度使用されます。したがって、3つの null 要素は最後にあります。</span><span class="sxs-lookup"><span data-stu-id="8282a-295">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="8282a-296"><xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドは、文字列 "4" がスタックの最初のコピーに含まれることを示すために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティにスタックが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-296">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8282a-297"><see cref="T:System.Collections.Generic.Stack`1" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="8282a-297">The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public T Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; 'T" Usage="stack.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8282a-298"><see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクトを削除し、返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-298">Removes and returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="8282a-299"><see cref="T:System.Collections.Generic.Stack`1" /> の一番上から削除されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8282a-299">The object removed from the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-300">このメソッドは <xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドに類似していますが、<xref:System.Collections.Generic.Stack%601.Peek%2A> は <xref:System.Collections.Generic.Stack%601> を変更しません。</span><span class="sxs-lookup"><span data-stu-id="8282a-300">This method is similar to the <xref:System.Collections.Generic.Stack%601.Peek%2A> method, but <xref:System.Collections.Generic.Stack%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="8282a-301">型 `T` が参照型の場合、必要に応じて `null` をプレースホルダーとして <xref:System.Collections.Generic.Stack%601> にプッシュすることができます。</span><span class="sxs-lookup"><span data-stu-id="8282a-301">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span>  
  
 <span data-ttu-id="8282a-302"><xref:System.Collections.Generic.Stack%601> は配列として実装されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-302"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span> <span data-ttu-id="8282a-303">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="8282a-303">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8282a-304">次のコード例は、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを含む <xref:System.Collections.Generic.Stack%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-304">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Pop%2A> method.</span></span>  
  
 <span data-ttu-id="8282a-305">このコード例では、既定の容量を持つ文字列のスタックを作成し、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを使用して5つの文字列をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="8282a-305">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="8282a-306">スタックの要素が列挙され、スタックの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-306">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="8282a-307"><xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドは、スタックから最初の文字列をポップするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-307">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="8282a-308"><xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドは、スタック上の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを使用してポップします。</span><span class="sxs-lookup"><span data-stu-id="8282a-308">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="8282a-309"><xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを使用して配列を作成し、スタック要素をコピーします。次に、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターに配列を渡し、要素の順序を反転してスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="8282a-309">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="8282a-310">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-310">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8282a-311">スタックのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-311">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8282a-312"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するためにもう一度使用されます。したがって、3つの null 要素は最後にあります。</span><span class="sxs-lookup"><span data-stu-id="8282a-312">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="8282a-313"><xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドは、文字列 "4" がスタックの最初のコピーに含まれることを示すために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティにスタックが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-313">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8282a-314"><see cref="T:System.Collections.Generic.Stack`1" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="8282a-314">The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push(T item);" />
      <MemberSignature Language="F#" Value="member this.Push : 'T -&gt; unit" Usage="stack.Push item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="8282a-315"><see cref="T:System.Collections.Generic.Stack`1" /> にプッシュするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8282a-315">The object to push onto the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span> <span data-ttu-id="8282a-316">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8282a-316">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="8282a-317"><see cref="T:System.Collections.Generic.Stack`1" /> の先頭にオブジェクトを挿入します。</span><span class="sxs-lookup"><span data-stu-id="8282a-317">Inserts an object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-318"><xref:System.Collections.Generic.Stack%601> は配列として実装されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-318"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span>  
  
 <span data-ttu-id="8282a-319"><xref:System.Collections.Generic.Stack%601.Count%2A> 既に容量に等しい場合は、内部配列を自動的に再割り当てすることによって <xref:System.Collections.Generic.Stack%601> の容量が増加し、新しい要素が追加される前に既存の要素が新しい配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-319">If <xref:System.Collections.Generic.Stack%601.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Generic.Stack%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="8282a-320">型 `T` が参照型の場合、必要に応じて `null` をプレースホルダーとして <xref:System.Collections.Generic.Stack%601> にプッシュすることができます。</span><span class="sxs-lookup"><span data-stu-id="8282a-320">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span> <span data-ttu-id="8282a-321">スタック内のスロットを占有し、任意のオブジェクトとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="8282a-321">It occupies a slot in the stack and is treated like any object.</span></span>  
  
 <span data-ttu-id="8282a-322"><xref:System.Collections.Generic.Stack%601.Count%2A> がスタックの容量より小さい場合、<xref:System.Collections.Generic.Stack%601.Push%2A> は O (1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="8282a-322">If <xref:System.Collections.Generic.Stack%601.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Generic.Stack%601.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="8282a-323">新しい要素を格納するために容量を増やす必要がある場合、<xref:System.Collections.Generic.Stack%601.Push%2A> は O (`n`) 操作になります。ここで `n` は <xref:System.Collections.Generic.Stack%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8282a-323">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Generic.Stack%601.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8282a-324">次のコード例は、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを含む <xref:System.Collections.Generic.Stack%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-324">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Push%2A> method.</span></span>  
  
 <span data-ttu-id="8282a-325">このコード例では、既定の容量を持つ文字列のスタックを作成し、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを使用して5つの文字列をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="8282a-325">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="8282a-326">スタックの要素が列挙され、スタックの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-326">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="8282a-327"><xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドは、スタックから最初の文字列をポップするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-327">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="8282a-328"><xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドは、スタック上の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを使用してポップします。</span><span class="sxs-lookup"><span data-stu-id="8282a-328">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="8282a-329"><xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを使用して配列を作成し、スタック要素をコピーします。次に、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターに配列を渡し、要素の順序を反転してスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="8282a-329">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="8282a-330">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-330">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8282a-331">スタックのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-331">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8282a-332"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するためにもう一度使用されます。したがって、3つの null 要素は最後にあります。</span><span class="sxs-lookup"><span data-stu-id="8282a-332">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="8282a-333"><xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドは、文字列 "4" がスタックの最初のコピーに含まれることを示すために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティにスタックが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-333">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="stack.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8282a-334">コレクションを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-334">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="8282a-335">コレクションの反復処理に使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" /> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-335">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-336"> C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="8282a-336">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="8282a-337">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8282a-337">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="8282a-338">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="8282a-338">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="8282a-339">最初、列挙子はコレクションの先頭の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="8282a-339">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="8282a-340">この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="8282a-340">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="8282a-341">したがって、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を呼び出して、列挙子をコレクションの先頭の要素に進めておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-341">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="8282a-342"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-342"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="8282a-343"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に進めます。</span><span class="sxs-lookup"><span data-stu-id="8282a-343"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="8282a-344"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-344">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="8282a-345">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-345">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="8282a-346"><xref:System.Collections.IEnumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="8282a-346">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="8282a-347"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-347">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="8282a-348">列挙子は、コレクションが変更されない限り有効です。</span><span class="sxs-lookup"><span data-stu-id="8282a-348">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="8282a-349">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに無効になり、次に <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-349">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="8282a-350">列挙子はコレクションに排他アクセスできないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-350">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="8282a-351">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="8282a-351">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="8282a-352">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-352">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="8282a-353"><xref:System.Collections.Generic?displayProperty=nameWithType> のコレクションの既定の実装は同期されていません。</span><span class="sxs-lookup"><span data-stu-id="8282a-353">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="8282a-354">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="8282a-354">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As Array, arrayIndex As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.ICollection.CopyTo : Array * int -&gt; unit&#xA;override this.System.Collections.ICollection.CopyTo : Array * int -&gt; unit" Usage="stack.System.Collections.ICollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8282a-355"><see cref="T:System.Array" /> のコピー先である、1 次元の <see cref="T:System.Collections.ICollection" /> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-355">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="8282a-356"><see cref="T:System.Array" /> には、0 から始まるインデックスが設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-356">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="8282a-357">コピーを開始する <paramref name="array" /> の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="8282a-357">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="8282a-358"><see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-358">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="8282a-359">ソース <xref:System.Collections.ICollection> の型を変換先の `array`の型に自動的にキャストできない場合、<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> の非ジェネリック実装は <xref:System.InvalidCastException>をスローしますが、ジェネリック実装では <xref:System.ArgumentException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-359">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="8282a-360">このメソッドは O(`n`) 操作です。`n` は <xref:System.Collections.Generic.Stack%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-360">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8282a-361"><paramref name="array" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-361"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8282a-362"><paramref name="arrayIndex" /> に 0 より小さい値が指定されています。</span><span class="sxs-lookup"><span data-stu-id="8282a-362"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8282a-363"><paramref name="array" /> に多次元配列が設定されています。</span><span class="sxs-lookup"><span data-stu-id="8282a-363"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="8282a-364">または</span><span class="sxs-lookup"><span data-stu-id="8282a-364">-or-</span></span> 
 <span data-ttu-id="8282a-365"><paramref name="array" /> には、0 から始まるインデックス番号がありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-365"><paramref name="array" /> does not have zero-based indexing.</span></span>  
  
<span data-ttu-id="8282a-366">または</span><span class="sxs-lookup"><span data-stu-id="8282a-366">-or-</span></span> 
<span data-ttu-id="8282a-367">コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの使用可能領域を超えています。</span><span class="sxs-lookup"><span data-stu-id="8282a-367">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span>  
  
<span data-ttu-id="8282a-368">または</span><span class="sxs-lookup"><span data-stu-id="8282a-368">-or-</span></span> 
<span data-ttu-id="8282a-369">コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストできません。</span><span class="sxs-lookup"><span data-stu-id="8282a-369">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.IsSynchronized : bool" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8282a-370"><see cref="T:System.Collections.ICollection" /> へのアクセスが同期されるかどうか (スレッド セーフかどうか) を示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8282a-370">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="8282a-371"><see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8282a-371"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="8282a-372"><see cref="T:System.Collections.Generic.Stack`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-372">In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-373"><xref:System.Collections.Generic?displayProperty=nameWithType> のコレクションの既定の実装は同期されていません。</span><span class="sxs-lookup"><span data-stu-id="8282a-373">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="8282a-374">コレクションの列挙処理は、本質的にスレッドセーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-374">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="8282a-375">列挙が書き込みアクセスによって競合するまれなケースとして、列挙全体の間にコレクションをロックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-375">In the rare case where enumerations contend with write accesses, you must lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="8282a-376">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-376">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="8282a-377"><xref:System.Collections.ICollection.SyncRoot%2A> は、<xref:System.Collections.ICollection>へのアクセスを同期するために使用できるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-377"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="8282a-378">同期は、コレクションにアクセスする前にすべてのスレッドがこのオブジェクトをロックする場合にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="8282a-378">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="8282a-379">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="8282a-379">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.SyncRoot : obj" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8282a-380"><see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="8282a-380">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="8282a-381"><see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="8282a-381">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span>  <span data-ttu-id="8282a-382"><see cref="T:System.Collections.Generic.Stack`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-382">In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-383"><xref:System.Collections.Generic?displayProperty=nameWithType> のコレクションの既定の実装は同期されていません。</span><span class="sxs-lookup"><span data-stu-id="8282a-383">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="8282a-384">コレクションの列挙処理は、本質的にスレッドセーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-384">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="8282a-385">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="8282a-385">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="8282a-386">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-386">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="8282a-387"><xref:System.Collections.ICollection.SyncRoot%2A> は、<xref:System.Collections.ICollection>へのアクセスを同期するために使用できるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-387"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="8282a-388">同期は、コレクションにアクセスする前にすべてのスレッドがこのオブジェクトをロックする場合にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="8282a-388">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="8282a-389">次のコードは、、 C# C++、および Visual Basic の <xref:System.Collections.ICollection.SyncRoot%2A> プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-389">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="8282a-390">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="8282a-390">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="stack.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8282a-391">コレクションを繰り返し処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-391">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="8282a-392">コレクションの反復処理に使用できる <see cref="T:System.Collections.IEnumerator" /> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-392">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-393"> C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="8282a-393">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="8282a-394">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8282a-394">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="8282a-395">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="8282a-395">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="8282a-396">最初、列挙子はコレクションの先頭の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="8282a-396">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="8282a-397">また、<xref:System.Collections.IEnumerator.Reset%2A> メソッドは、列挙子を最初の位置に戻します。</span><span class="sxs-lookup"><span data-stu-id="8282a-397"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="8282a-398">この位置では、<xref:System.Collections.IEnumerator.Current%2A> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="8282a-398">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="8282a-399">したがって、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して、列挙子をコレクションの先頭の要素に進めておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-399">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="8282a-400"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-400"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="8282a-401"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に進めます。</span><span class="sxs-lookup"><span data-stu-id="8282a-401"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="8282a-402"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-402">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="8282a-403">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="8282a-403">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="8282a-404"><xref:System.Collections.IEnumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.IEnumerator.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="8282a-404">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="8282a-405">コレクションの先頭の要素に再び <xref:System.Collections.IEnumerator.Current%2A> を設定するには、先に <xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8282a-405">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="8282a-406">列挙子は、コレクションが変更されない限り有効です。</span><span class="sxs-lookup"><span data-stu-id="8282a-406">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="8282a-407">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに無効になり、次に <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-407">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="8282a-408">列挙子はコレクションに排他アクセスできないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-408">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="8282a-409">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="8282a-409">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="8282a-410">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8282a-410">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="8282a-411"><xref:System.Collections.Generic?displayProperty=nameWithType> のコレクションの既定の実装は同期されていません。</span><span class="sxs-lookup"><span data-stu-id="8282a-411">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="8282a-412">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="8282a-412">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="stack.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8282a-413"><see cref="T:System.Collections.Generic.Stack`1" /> を新しい配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="8282a-413">Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to a new array.</span></span></summary>
        <returns><span data-ttu-id="8282a-414"><see cref="T:System.Collections.Generic.Stack`1" /> の要素のコピーを格納する新しい配列。</span><span class="sxs-lookup"><span data-stu-id="8282a-414">A new array containing copies of the elements of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-415">これらの要素は、<xref:System.Collections.Generic.Stack%601.Pop%2A>の連続した呼び出しによって返される要素の順序と同様に、後入れ先出し (LIFO) の順序で配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-415">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Generic.Stack%601.Pop%2A>.</span></span>  
  
 <span data-ttu-id="8282a-416">このメソッドは O(`n`) 操作です。`n` は <xref:System.Collections.Generic.Stack%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-416">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8282a-417">次のコード例は、<xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを含む <xref:System.Collections.Generic.Stack%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="8282a-417">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.ToArray%2A> method.</span></span>  
  
 <span data-ttu-id="8282a-418">このコード例では、既定の容量を持つ文字列のスタックを作成し、<xref:System.Collections.Generic.Stack%601.Push%2A> メソッドを使用して5つの文字列をスタックにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="8282a-418">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="8282a-419">スタックの要素が列挙され、スタックの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8282a-419">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="8282a-420"><xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドは、スタックから最初の文字列をポップするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-420">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="8282a-421"><xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドは、スタック上の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドを使用してポップします。</span><span class="sxs-lookup"><span data-stu-id="8282a-421">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="8282a-422"><xref:System.Collections.Generic.Stack%601.ToArray%2A> メソッドを使用して配列を作成し、スタック要素をコピーします。次に、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターに配列を渡し、要素の順序を反転してスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="8282a-422">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="8282a-423">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-423">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8282a-424">スタックのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Stack%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8282a-424">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8282a-425"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するためにもう一度使用されます。したがって、3つの null 要素は最後にあります。</span><span class="sxs-lookup"><span data-stu-id="8282a-425">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="8282a-426"><xref:System.Collections.Generic.Stack%601.Contains%2A> メソッドは、文字列 "4" がスタックの最初のコピーに含まれることを示すために使用されます。その後、<xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Stack%601.Count%2A> プロパティにスタックが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-426">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="stack.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8282a-427"><see cref="T:System.Collections.Generic.Stack`1" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</span><span class="sxs-lookup"><span data-stu-id="8282a-427">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Stack`1" />, if that number is less than 90 percent of current capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8282a-428">コレクションに新しい要素が追加されない場合は、このメソッドを使用してコレクションのメモリオーバーヘッドを最小限に抑えることができます。</span><span class="sxs-lookup"><span data-stu-id="8282a-428">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="8282a-429">ただし、大きな <xref:System.Collections.Generic.Stack%601> の再割り当てとコピーにかかるコストはかなり大きくなる可能性があるため、<xref:System.Collections.Generic.Stack%601.TrimExcess%2A> の方法では、リストの容量が90% を超える場合は何も行われません。</span><span class="sxs-lookup"><span data-stu-id="8282a-429">The cost of reallocating and copying a large <xref:System.Collections.Generic.Stack%601> can be considerable, however, so the <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="8282a-430">これにより、比較的小さな増加に対して大きな再割り当てコストが発生することを回避できます。</span><span class="sxs-lookup"><span data-stu-id="8282a-430">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="8282a-431">このメソッドは O(`n`) 操作です。`n` は <xref:System.Collections.Generic.Stack%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="8282a-431">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="8282a-432"><xref:System.Collections.Generic.Stack%601> を初期状態にリセットするには、<xref:System.Collections.Generic.Stack%601.TrimExcess%2A> メソッドを呼び出す前に <xref:System.Collections.Generic.Stack%601.Clear%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8282a-432">To reset a <xref:System.Collections.Generic.Stack%601> to its initial state, call the <xref:System.Collections.Generic.Stack%601.Clear%2A> method before calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="8282a-433">空の <xref:System.Collections.Generic.Stack%601> をトリミングすると、<xref:System.Collections.Generic.Stack%601> の容量が既定の容量に設定されます。</span><span class="sxs-lookup"><span data-stu-id="8282a-433">Trimming an empty <xref:System.Collections.Generic.Stack%601> sets the capacity of the <xref:System.Collections.Generic.Stack%601> to the default capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek : 'T -&gt; bool" Usage="stack.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop">
      <MemberSignature Language="C#" Value="public bool TryPop (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPop([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPop (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPop([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPop : 'T -&gt; bool" Usage="stack.TryPop result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
