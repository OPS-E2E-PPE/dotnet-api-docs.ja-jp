<Type Name="Queue&lt;T&gt;" FullName="System.Collections.Generic.Queue&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c31a6ca279ed8ba4f108b14d528f28d0d6eb60c2" /><Meta Name="ms.sourcegitcommit" Value="05b28af3128fd8a2fe51178c9a1cc798d4601bf7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/12/2020" /><Meta Name="ms.locfileid" Value="83231519" /></Metadata><TypeSignature Language="C#" Value="public class Queue&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Queue`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Queue`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Queue : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Queue&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public class Queue&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.ICollection" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Queue`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue(Of T)&#xA;Implements ICollection, IEnumerable(Of T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Queue : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::ICollection" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type Queue&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Queue`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Queue&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Queue`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type Queue&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Collections" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_QueueDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="2d3ee-101">キュー内の要素の型を指定します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-101">Specifies the type of elements in the queue.</span></span></typeparam>
    <summary><span data-ttu-id="2d3ee-102">オブジェクトの先入れ先出しコレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-102">Represents a first-in, first-out collection of objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-103">このクラスは、汎用キューを循環配列として実装します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-103">This class implements a generic queue as a circular array.</span></span> <span data-ttu-id="2d3ee-104"><xref:System.Collections.Generic.Queue%601> に格納されているオブジェクトは、一方の端に挿入され、もう一方からは削除されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-104">Objects stored in a <xref:System.Collections.Generic.Queue%601> are inserted at one end and removed from the other.</span></span> <span data-ttu-id="2d3ee-105">キューとスタックは、情報のために一時的なストレージが必要な場合に便利です。つまり、値を取得した後に要素を破棄することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-105">Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="2d3ee-106">コレクションに格納されているのと同じ順序で情報にアクセスする必要がある場合は、<xref:System.Collections.Generic.Queue%601> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-106">Use <xref:System.Collections.Generic.Queue%601> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="2d3ee-107">情報に逆の順序でアクセスする必要がある場合は、<xref:System.Collections.Generic.Stack%601> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-107">Use <xref:System.Collections.Generic.Stack%601> if you need to access the information in reverse order.</span></span> <span data-ttu-id="2d3ee-108">複数のスレッドから同時にコレクションにアクセスする必要がある場合は、<xref:System.Collections.Concurrent.ConcurrentQueue%601> または <xref:System.Collections.Concurrent.ConcurrentStack%601> を使用します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-108">Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="2d3ee-109"><xref:System.Collections.Generic.Queue%601> とその要素に対して、次の3つの主要な操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-109">Three main operations can be performed on a <xref:System.Collections.Generic.Queue%601> and its elements:</span></span>  
  
-   <span data-ttu-id="2d3ee-110"><xref:System.Collections.Generic.Queue%601.Enqueue%2A> <xref:System.Collections.Generic.Queue%601>の末尾に要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-110"><xref:System.Collections.Generic.Queue%601.Enqueue%2A> adds an element to the end of the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
-   <span data-ttu-id="2d3ee-111"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> は、<xref:System.Collections.Generic.Queue%601>の先頭から最も古い要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-111"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> removes the oldest element from the start of the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
-   <span data-ttu-id="2d3ee-112"><xref:System.Collections.Generic.Queue%601.Peek%2A> peek は、<xref:System.Collections.Generic.Queue%601> の先頭にある最も古い要素を返しますが、<xref:System.Collections.Generic.Queue%601>からは削除しません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-112"><xref:System.Collections.Generic.Queue%601.Peek%2A> peek returns the oldest element that is at the start of the <xref:System.Collections.Generic.Queue%601> but does not remove it from the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="2d3ee-113"><xref:System.Collections.Generic.Queue%601>の容量は、<xref:System.Collections.Generic.Queue%601>が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-113">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="2d3ee-114">要素が <xref:System.Collections.Generic.Queue%601>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-114">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="2d3ee-115">容量は、<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>を呼び出すことによって減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-115">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="2d3ee-116"><xref:System.Collections.Generic.Queue%601> は、参照型の有効な値として `null` を受け入れ、重複する要素を許可します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-116"><xref:System.Collections.Generic.Queue%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3ee-117">次のコード例は、<xref:System.Collections.Generic.Queue%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-117">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="2d3ee-118">このコード例では、既定の容量を使用して文字列のキューを作成し、<xref:System.Collections.Generic.Queue%601.Enqueue%2A> メソッドを使用して5つの文字列をキューに置いています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-118">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="2d3ee-119">キューの要素が列挙され、キューの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-119">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="2d3ee-120"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドは、最初の文字列をデキューするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-120">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="2d3ee-121"><xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドは、キュー内の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドを使用してキューからデキューされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-121">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="2d3ee-122"><xref:System.Collections.Generic.Queue%601.ToArray%2A> メソッドを使用して配列を作成し、その配列に queue 要素をコピーします。その後、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターに配列が渡され、キューのコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-122">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="2d3ee-123">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-123">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2d3ee-124">キューのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Queue%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-124">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2d3ee-125"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターは、最初に3つの null 要素を含むキューの2番目のコピーを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-125">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="2d3ee-126"><xref:System.Collections.Generic.Queue%601.Contains%2A> メソッドは、文字列 "4" がキューの最初のコピーに含まれていることを示すために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Queue%601.Count%2A> プロパティによってキューが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-126">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="2d3ee-127">パブリック静的 (Visual Basic では<see langword="Shared" />) なこの型のメンバーはスレッド セーフです</span><span class="sxs-lookup"><span data-stu-id="2d3ee-127">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="2d3ee-128">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-128">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="2d3ee-129"><see cref="T:System.Collections.Generic.Queue`1" /> は、コレクションが変更されていない限り、複数のリーダーを同時にサポートできます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-129">A <see cref="T:System.Collections.Generic.Queue`1" /> can support multiple readers concurrently, as long as the collection is not modified.</span></span>  <span data-ttu-id="2d3ee-130">それでも、コレクションを列挙することは、本質的にはスレッドセーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-130">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="2d3ee-131">スレッドセーフキューについては、「<see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-131">For a thread-safe queue, see <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2d3ee-132"><see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-132">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2d3ee-133">空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-133">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that is empty and has the default initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-134"><xref:System.Collections.Generic.Queue%601> の容量は、<xref:System.Collections.Generic.Queue%601> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-134">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="2d3ee-135">要素が <xref:System.Collections.Generic.Queue%601>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-135">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="2d3ee-136">コレクションのサイズを推定できる場合は、初期容量を指定すると、<xref:System.Collections.Generic.Queue%601>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-136">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="2d3ee-137">容量は、<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>を呼び出すことによって減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-137">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="2d3ee-138">このコンストラクターは O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-138">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3ee-139">次のコード例は、このコンストラクターと <xref:System.Collections.Generic.Queue%601> ジェネリッククラスの他のいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-139">The following code example demonstrates this constructor and several other methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="2d3ee-140">このコード例では、既定の容量を使用して文字列のキューを作成し、<xref:System.Collections.Generic.Queue%601.Enqueue%2A> メソッドを使用して5つの文字列をキューに置いています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-140">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="2d3ee-141">キューの要素が列挙され、キューの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-141">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="2d3ee-142"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドは、最初の文字列をデキューするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-142">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="2d3ee-143"><xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドは、キュー内の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドを使用してキューからデキューされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-143">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="2d3ee-144"><xref:System.Collections.Generic.Queue%601.ToArray%2A> メソッドを使用して配列を作成し、その配列に queue 要素をコピーします。その後、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターに配列が渡され、キューのコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-144">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="2d3ee-145">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-145">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2d3ee-146">キューのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Queue%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-146">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2d3ee-147"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターは、最初に3つの null 要素を含むキューの2番目のコピーを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-147">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="2d3ee-148"><xref:System.Collections.Generic.Queue%601.Contains%2A> メソッドは、文字列 "4" がキューの最初のコピーに含まれていることを示すために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Queue%601.Count%2A> プロパティによってキューが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-148">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Queue&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Queue&lt;'T&gt;" Usage="new System.Collections.Generic.Queue&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="2d3ee-149">新しい <see cref="T:System.Collections.Generic.Queue`1" /> に要素がコピーされたコレクション。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-149">The collection whose elements are copied to the new <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></param>
        <summary><span data-ttu-id="2d3ee-150">指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-150">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-151"><xref:System.Collections.Generic.Queue%601> の容量は、<xref:System.Collections.Generic.Queue%601> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-151">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="2d3ee-152">要素が <xref:System.Collections.Generic.Queue%601>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-152">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="2d3ee-153">コレクションのサイズを推定できる場合は、初期容量を指定すると、<xref:System.Collections.Generic.Queue%601>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-153">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="2d3ee-154">容量は、<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>を呼び出すことによって減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-154">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="2d3ee-155">要素は、コレクションの <xref:System.Collections.Generic.IEnumerator%601> によって読み取られた順序で <xref:System.Collections.Generic.Queue%601> にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-155">The elements are copied onto the <xref:System.Collections.Generic.Queue%601> in the same order they are read by the <xref:System.Collections.Generic.IEnumerator%601> of the collection.</span></span>  
  
 <span data-ttu-id="2d3ee-156">このコンストラクターは O (`n`) 操作であり、`n` は `collection`内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-156">This constructor is an O(`n`) operation, where `n` is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3ee-157">次のコード例は、このコンストラクターと <xref:System.Collections.Generic.Queue%601> ジェネリッククラスの他のいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-157">The following code example demonstrates this constructor and several other methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="2d3ee-158">このコード例では、既定の容量を使用して文字列のキューを作成し、<xref:System.Collections.Generic.Queue%601.Enqueue%2A> メソッドを使用して5つの文字列をキューに置いています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-158">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="2d3ee-159">キューの要素が列挙され、キューの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-159">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="2d3ee-160"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドは、最初の文字列をデキューするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-160">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="2d3ee-161"><xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドは、キュー内の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドを使用してキューからデキューされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-161">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="2d3ee-162"><xref:System.Collections.Generic.Queue%601.ToArray%2A> メソッドを使用して配列を作成し、その配列に queue 要素をコピーします。その後、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターに配列が渡され、キューのコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-162">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="2d3ee-163">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-163">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2d3ee-164">キューのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Queue%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-164">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2d3ee-165"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターは、最初に3つの null 要素を含むキューの2番目のコピーを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-165">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="2d3ee-166"><xref:System.Collections.Generic.Queue%601.Contains%2A> メソッドは、文字列 "4" がキューの最初のコピーに含まれていることを示すために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Queue%601.Count%2A> プロパティによってキューが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-166">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2d3ee-167"><paramref name="collection" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-167"><paramref name="collection" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Queue&lt;'T&gt; : int -&gt; System.Collections.Generic.Queue&lt;'T&gt;" Usage="new System.Collections.Generic.Queue&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="2d3ee-168"><see cref="T:System.Collections.Generic.Queue`1" /> が格納できる要素数の初期値。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-168">The initial number of elements that the <see cref="T:System.Collections.Generic.Queue`1" /> can contain.</span></span></param>
        <summary><span data-ttu-id="2d3ee-169">空で、指定した初期量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-169">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that is empty and has the specified initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-170"><xref:System.Collections.Generic.Queue%601> の容量は、<xref:System.Collections.Generic.Queue%601> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-170">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="2d3ee-171">要素が <xref:System.Collections.Generic.Queue%601>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-171">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="2d3ee-172">コレクションのサイズを推定できる場合は、初期容量を指定すると、<xref:System.Collections.Generic.Queue%601>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-172">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="2d3ee-173">容量は、<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>を呼び出すことによって減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-173">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="2d3ee-174">このコンストラクターは、`n` が `capacity`される O (`n`) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-174">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2d3ee-175"><paramref name="capacity" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-175"><paramref name="capacity" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="queue.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2d3ee-176"><see cref="T:System.Collections.Generic.Queue`1" /> からすべてのオブジェクトを削除します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-176">Removes all objects from the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-177"><xref:System.Collections.Generic.Queue%601.Count%2A> がゼロに設定され、コレクションの要素から他のオブジェクトへの参照も解放されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-177"><xref:System.Collections.Generic.Queue%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="2d3ee-178">容量は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-178">The capacity remains unchanged.</span></span> <span data-ttu-id="2d3ee-179"><xref:System.Collections.Generic.Queue%601>の容量をリセットするには、<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-179">To reset the capacity of the <xref:System.Collections.Generic.Queue%601>, call <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span> <span data-ttu-id="2d3ee-180">空の <xref:System.Collections.Generic.Queue%601> をトリミングすると、<xref:System.Collections.Generic.Queue%601> の容量が既定の容量に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-180">Trimming an empty <xref:System.Collections.Generic.Queue%601> sets the capacity of the <xref:System.Collections.Generic.Queue%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="2d3ee-181">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.Generic.Queue%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-181">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3ee-182">次のコード例は、<xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドを含む <xref:System.Collections.Generic.Queue%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-182">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="2d3ee-183">このコード例では、既定の容量を使用して文字列のキューを作成し、<xref:System.Collections.Generic.Queue%601.Enqueue%2A> メソッドを使用して5つの文字列をキューに置いています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-183">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="2d3ee-184">キューの要素が列挙され、キューの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-184">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="2d3ee-185"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドは、最初の文字列をデキューするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-185">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="2d3ee-186"><xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドは、キュー内の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドを使用してキューからデキューされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-186">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="2d3ee-187"><xref:System.Collections.Generic.Queue%601.ToArray%2A> メソッドを使用して配列を作成し、その配列に queue 要素をコピーします。その後、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターに配列が渡され、キューのコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-187">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="2d3ee-188">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-188">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2d3ee-189">キューのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Queue%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-189">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2d3ee-190"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターは、最初に3つの null 要素を含むキューの2番目のコピーを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-190">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="2d3ee-191"><xref:System.Collections.Generic.Queue%601.Contains%2A> メソッドは、文字列 "4" がキューの最初のコピーに含まれていることを示すために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Queue%601.Count%2A> プロパティによってキューが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-191">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.TrimExcess" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="queue.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2d3ee-192"><see cref="T:System.Collections.Generic.Queue`1" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-192">The object to locate in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span> <span data-ttu-id="2d3ee-193">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-193">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="2d3ee-194">ある要素が <see cref="T:System.Collections.Generic.Queue`1" /> 内に存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-194">Determines whether an element is in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><span data-ttu-id="2d3ee-195"><see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.Queue`1" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-195"><see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Queue`1" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-196">このメソッドは、キュー内の値の型 `T`に <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 既定の等値比較子を使用して、等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-196">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the queue.</span></span>  
  
 <span data-ttu-id="2d3ee-197">このメソッドは、線形検索を実行します。したがって、このメソッドは O (`n`) 操作であり、`n` は <xref:System.Collections.Generic.Queue%601.Count%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-197">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3ee-198">次のコード例は、<xref:System.Collections.Generic.Queue%601.Contains%2A> メソッドを含む <xref:System.Collections.Generic.Queue%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-198">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="2d3ee-199">このコード例では、既定の容量を使用して文字列のキューを作成し、<xref:System.Collections.Generic.Queue%601.Enqueue%2A> メソッドを使用して5つの文字列をキューに置いています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-199">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="2d3ee-200">キューの要素が列挙され、キューの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-200">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="2d3ee-201"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドは、最初の文字列をデキューするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-201">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="2d3ee-202"><xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドは、キュー内の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドを使用してキューからデキューされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-202">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="2d3ee-203"><xref:System.Collections.Generic.Queue%601.ToArray%2A> メソッドを使用して配列を作成し、その配列に queue 要素をコピーします。その後、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターに配列が渡され、キューのコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-203">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="2d3ee-204">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-204">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2d3ee-205">キューのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Queue%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-205">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2d3ee-206"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターは、最初に3つの null 要素を含むキューの2番目のコピーを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-206">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="2d3ee-207"><xref:System.Collections.Generic.Queue%601.Contains%2A> メソッドは、文字列 "4" がキューの最初のコピーに含まれていることを示すために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Queue%601.Count%2A> プロパティによってキューが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-207">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="2d3ee-208">カルチャを認識しない文字列操作の実行</span><span class="sxs-lookup"><span data-stu-id="2d3ee-208">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="queue.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2d3ee-209"><see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.Queue`1" />。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-209">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Queue`1" />.</span></span> <span data-ttu-id="2d3ee-210"><see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-210">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="2d3ee-211">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-211">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="2d3ee-212"><see cref="T:System.Collections.Generic.Queue`1" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-212">Copies the <see cref="T:System.Collections.Generic.Queue`1" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-213">要素は、列挙子が <xref:System.Collections.Generic.Queue%601>を反復処理するのと同じ順序で <xref:System.Array> にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-213">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="2d3ee-214">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.Generic.Queue%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-214">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2d3ee-215"><paramref name="array" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-215"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2d3ee-216"><paramref name="arrayIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-216"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2d3ee-217">コピー元の <see cref="T:System.Collections.Generic.Queue`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-217">The number of elements in the source <see cref="T:System.Collections.Generic.Queue`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Queue&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2d3ee-218"><see cref="T:System.Collections.Generic.Queue`1" /> に格納されている要素の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-218">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <value><span data-ttu-id="2d3ee-219"><see cref="T:System.Collections.Generic.Queue`1" /> に格納されている要素の数。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-219">The number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-220"><xref:System.Collections.Generic.Queue%601> の容量は、<xref:System.Collections.Generic.Queue%601> が格納できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-220">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can store.</span></span> <span data-ttu-id="2d3ee-221"><xref:System.Collections.Generic.Queue%601.Count%2A> は、実際に <xref:System.Collections.Generic.Queue%601>内にある要素の数です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-221"><xref:System.Collections.Generic.Queue%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="2d3ee-222">容量は常に <xref:System.Collections.Generic.Queue%601.Count%2A> 以上です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-222">The capacity is always greater than or equal to <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span> <span data-ttu-id="2d3ee-223">要素を追加するときに <xref:System.Collections.Generic.Queue%601.Count%2A> が容量を上回る場合、容量は、古い要素をコピーして新しい要素を追加する前に、内部配列を自動的に再割り当てすることによって増加します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-223">If <xref:System.Collections.Generic.Queue%601.Count%2A> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="2d3ee-224">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-224">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3ee-225">次のコード例は、<xref:System.Collections.Generic.Queue%601.Count%2A> プロパティを含む <xref:System.Collections.Generic.Queue%601> ジェネリッククラスのいくつかのプロパティとメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-225">The following code example demonstrates several properties and methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Count%2A> property.</span></span>  
  
 <span data-ttu-id="2d3ee-226">このコード例では、既定の容量を使用して文字列のキューを作成し、<xref:System.Collections.Generic.Queue%601.Enqueue%2A> メソッドを使用して5つの文字列をキューに置いています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-226">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="2d3ee-227">キューの要素が列挙され、キューの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-227">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="2d3ee-228"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドは、最初の文字列をデキューするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-228">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="2d3ee-229"><xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドは、キュー内の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドを使用してキューからデキューされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-229">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="2d3ee-230"><xref:System.Collections.Generic.Queue%601.ToArray%2A> メソッドを使用して配列を作成し、その配列に queue 要素をコピーします。その後、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターに配列が渡され、キューのコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-230">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="2d3ee-231">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-231">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2d3ee-232">キューのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Queue%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-232">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2d3ee-233"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターは、最初に3つの null 要素を含むキューの2番目のコピーを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-233">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="2d3ee-234"><xref:System.Collections.Generic.Queue%601.Contains%2A> メソッドは、文字列 "4" がキューの最初のコピーに含まれていることを示すために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Queue%601.Count%2A> プロパティによってキューが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-234">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1"::: 
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequeue">
      <MemberSignature Language="C#" Value="public T Dequeue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Dequeue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Dequeue" />
      <MemberSignature Language="VB.NET" Value="Public Function Dequeue () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Dequeue();" />
      <MemberSignature Language="F#" Value="member this.Dequeue : unit -&gt; 'T" Usage="queue.Dequeue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2d3ee-235"><see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクトを削除し、返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-235">Removes and returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><span data-ttu-id="2d3ee-236"><see cref="T:System.Collections.Generic.Queue`1" /> の先頭から削除されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-236">The object that is removed from the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-237">このメソッドは <xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドに類似していますが、<xref:System.Collections.Generic.Queue%601.Peek%2A> は <xref:System.Collections.Generic.Queue%601> を変更しません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-237">This method is similar to the <xref:System.Collections.Generic.Queue%601.Peek%2A> method, but <xref:System.Collections.Generic.Queue%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="2d3ee-238">型 `T` が参照型の場合、`null` を値として <xref:System.Collections.Generic.Queue%601> に追加できます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-238">If type `T` is a reference type, `null` can be added to the <xref:System.Collections.Generic.Queue%601> as a value.</span></span>  
  
 <span data-ttu-id="2d3ee-239">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-239">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3ee-240">次のコード例は、<xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドを含む <xref:System.Collections.Generic.Queue%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-240">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method.</span></span>  
  
 <span data-ttu-id="2d3ee-241">このコード例では、既定の容量を使用して文字列のキューを作成し、<xref:System.Collections.Generic.Queue%601.Enqueue%2A> メソッドを使用して5つの文字列をキューに置いています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-241">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="2d3ee-242">キューの要素が列挙され、キューの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-242">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="2d3ee-243"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドは、最初の文字列をデキューするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-243">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="2d3ee-244"><xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドは、キュー内の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドを使用してキューからデキューされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-244">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="2d3ee-245"><xref:System.Collections.Generic.Queue%601.ToArray%2A> メソッドを使用して配列を作成し、その配列に queue 要素をコピーします。その後、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターに配列が渡され、キューのコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-245">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="2d3ee-246">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-246">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2d3ee-247">キューのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Queue%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-247">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2d3ee-248"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターは、最初に3つの null 要素を含むキューの2番目のコピーを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-248">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="2d3ee-249"><xref:System.Collections.Generic.Queue%601.Contains%2A> メソッドは、文字列 "4" がキューの最初のコピーに含まれていることを示すために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Queue%601.Count%2A> プロパティによってキューが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-249">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2d3ee-250"><see cref="T:System.Collections.Generic.Queue`1" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-250">The <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Peek" />
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public void Enqueue (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enqueue(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enqueue (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enqueue(T item);" />
      <MemberSignature Language="F#" Value="member this.Enqueue : 'T -&gt; unit" Usage="queue.Enqueue item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2d3ee-251"><see cref="T:System.Collections.Generic.Queue`1" /> に追加するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-251">The object to add to the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span> <span data-ttu-id="2d3ee-252">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-252">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="2d3ee-253"><see cref="T:System.Collections.Generic.Queue`1" /> の末尾にオブジェクトを追加します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-253">Adds an object to the end of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-254"><xref:System.Collections.Generic.Queue%601.Count%2A> 既に容量に等しい場合は、内部配列を自動的に再割り当てすることによって <xref:System.Collections.Generic.Queue%601> の容量が増加し、新しい要素が追加される前に既存の要素が新しい配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-254">If <xref:System.Collections.Generic.Queue%601.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Generic.Queue%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="2d3ee-255"><xref:System.Collections.Generic.Queue%601.Count%2A> が内部配列の容量より小さい場合、このメソッドは O (1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-255">If <xref:System.Collections.Generic.Queue%601.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation.</span></span> <span data-ttu-id="2d3ee-256">新しい要素に対応するために内部配列を再割り当てする必要がある場合、このメソッドは O (`n`) 操作になります。この場合、`n` は <xref:System.Collections.Generic.Queue%601.Count%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-256">If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3ee-257">次のコード例は、<xref:System.Collections.Generic.Queue%601.Enqueue%2A> メソッドを含む <xref:System.Collections.Generic.Queue%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-257">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method.</span></span>  
  
 <span data-ttu-id="2d3ee-258">このコード例では、既定の容量を使用して文字列のキューを作成し、<xref:System.Collections.Generic.Queue%601.Enqueue%2A> メソッドを使用して5つの文字列をキューに置いています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-258">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="2d3ee-259">キューの要素が列挙され、キューの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-259">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="2d3ee-260"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドは、最初の文字列をデキューするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-260">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="2d3ee-261"><xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドは、キュー内の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドを使用してキューからデキューされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-261">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="2d3ee-262"><xref:System.Collections.Generic.Queue%601.ToArray%2A> メソッドを使用して配列を作成し、その配列に queue 要素をコピーします。その後、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターに配列が渡され、キューのコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-262">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="2d3ee-263">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-263">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2d3ee-264">キューのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Queue%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-264">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2d3ee-265"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターは、最初に3つの null 要素を含むキューの2番目のコピーを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-265">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="2d3ee-266"><xref:System.Collections.Generic.Queue%601.Contains%2A> メソッドは、文字列 "4" がキューの最初のコピーに含まれていることを示すために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Queue%601.Count%2A> プロパティによってキューが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-266">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.Dequeue" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Peek" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Queue&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Queue`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Queue(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Queue&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Queue&lt;'T&gt;.Enumerator" Usage="queue.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Queue&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2d3ee-267"><see cref="T:System.Collections.Generic.Queue`1" /> を反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-267">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><span data-ttu-id="2d3ee-268"><see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> の <see cref="T:System.Collections.Generic.Queue`1" />。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-268">An <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-269"> C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-269">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="2d3ee-270">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-270">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="2d3ee-271">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-271">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="2d3ee-272">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-272">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="2d3ee-273">この位置では、<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-273">At this position, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="2d3ee-274">そのため、<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-274">Therefore, you must call <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="2d3ee-275"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> は、<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-275"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="2d3ee-276"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> は、<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-276"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="2d3ee-277"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-277">If <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="2d3ee-278">列挙子がこの位置にある場合、後続の <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-278">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="2d3ee-279"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-279">If the last call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="2d3ee-280"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-280">You cannot set <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="2d3ee-281">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-281">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="2d3ee-282">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに無効になり、次に <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> または <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-282">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="2d3ee-283">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-283">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="2d3ee-284">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-284">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="2d3ee-285">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-285">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="2d3ee-286"><xref:System.Collections.Generic?displayProperty=nameWithType> のコレクションの既定の実装は同期されていません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-286">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="2d3ee-287">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-287">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3ee-288">次のコード例は、<xref:System.Collections.Generic.Queue%601> ジェネリッククラスが列挙可能であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-288">The following code example demonstrates that the <xref:System.Collections.Generic.Queue%601> generic class is enumerable.</span></span> <span data-ttu-id="2d3ee-289">キューの列挙には、`foreach` ステートメント (Visual Basic C++の`For Each`、の `for each`) が使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-289">The `foreach` statement (`For Each` in Visual Basic, `for each` in C++) is used to enumerate the queue.</span></span>  
  
 <span data-ttu-id="2d3ee-290">このコード例では、既定の容量を使用して文字列のキューを作成し、<xref:System.Collections.Generic.Queue%601.Enqueue%2A> メソッドを使用して5つの文字列をキューに置いています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-290">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="2d3ee-291">キューの要素が列挙され、キューの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-291">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="2d3ee-292"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドは、最初の文字列をデキューするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-292">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="2d3ee-293"><xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドは、キュー内の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドを使用してキューからデキューされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-293">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="2d3ee-294"><xref:System.Collections.Generic.Queue%601.ToArray%2A> メソッドを使用して配列を作成し、その配列に queue 要素をコピーします。その後、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターに配列が渡され、キューのコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-294">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="2d3ee-295">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-295">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2d3ee-296">キューのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Queue%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-296">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2d3ee-297"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターは、最初に3つの null 要素を含むキューの2番目のコピーを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-297">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="2d3ee-298"><xref:System.Collections.Generic.Queue%601.Contains%2A> メソッドは、文字列 "4" がキューの最初のコピーに含まれていることを示すために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Queue%601.Count%2A> プロパティによってキューが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-298">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Queue`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="queue.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2d3ee-299"><see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクトを削除せずに返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-299">Returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="2d3ee-300"><see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-300">The object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-301">このメソッドは <xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドに類似していますが、<xref:System.Collections.Generic.Queue%601.Peek%2A> は <xref:System.Collections.Generic.Queue%601> を変更しません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-301">This method is similar to the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method, but <xref:System.Collections.Generic.Queue%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="2d3ee-302">型 `T` が参照型の場合、`null` を値として <xref:System.Collections.Generic.Queue%601> に追加できます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-302">If type `T` is a reference type, `null` can be added to the <xref:System.Collections.Generic.Queue%601> as a value.</span></span>  
  
 <span data-ttu-id="2d3ee-303">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-303">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3ee-304">次のコード例は、<xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドを含む <xref:System.Collections.Generic.Queue%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-304">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="2d3ee-305">このコード例では、既定の容量を使用して文字列のキューを作成し、<xref:System.Collections.Generic.Queue%601.Enqueue%2A> メソッドを使用して5つの文字列をキューに置いています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-305">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="2d3ee-306">キューの要素が列挙され、キューの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-306">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="2d3ee-307"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドは、最初の文字列をデキューするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-307">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="2d3ee-308"><xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドは、キュー内の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドを使用してキューからデキューされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-308">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="2d3ee-309"><xref:System.Collections.Generic.Queue%601.ToArray%2A> メソッドを使用して配列を作成し、その配列に queue 要素をコピーします。その後、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターに配列が渡され、キューのコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-309">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="2d3ee-310">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-310">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2d3ee-311">キューのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Queue%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-311">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2d3ee-312"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターは、最初に3つの null 要素を含むキューの2番目のコピーを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-312">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="2d3ee-313"><xref:System.Collections.Generic.Queue%601.Contains%2A> メソッドは、文字列 "4" がキューの最初のコピーに含まれていることを示すために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Queue%601.Count%2A> プロパティによってキューが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-313">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2d3ee-314"><see cref="T:System.Collections.Generic.Queue`1" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-314">The <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Dequeue" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="queue.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2d3ee-315">コレクションを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-315">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="2d3ee-316">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-316">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-317"> C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-317">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="2d3ee-318">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-318">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="2d3ee-319">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-319">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="2d3ee-320">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-320">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="2d3ee-321">この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-321">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="2d3ee-322">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-322">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="2d3ee-323"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-323"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="2d3ee-324"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-324"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="2d3ee-325"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-325">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="2d3ee-326">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-326">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="2d3ee-327"><xref:System.Collections.IEnumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-327">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="2d3ee-328"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-328">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="2d3ee-329">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-329">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="2d3ee-330">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに無効になり、次に <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-330">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="2d3ee-331">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-331">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="2d3ee-332">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-332">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="2d3ee-333">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-333">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="2d3ee-334"><xref:System.Collections.Generic?displayProperty=nameWithType> のコレクションの既定の実装は同期されていません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-334">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="2d3ee-335">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-335">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.GetEnumerator" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As Array, index As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.ICollection.CopyTo : Array * int -&gt; unit&#xA;override this.System.Collections.ICollection.CopyTo : Array * int -&gt; unit" Usage="queue.System.Collections.ICollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2d3ee-336"><see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-336">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="2d3ee-337"><see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-337">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="2d3ee-338">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-338">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="2d3ee-339"><see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-339">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="2d3ee-340">ソース <xref:System.Collections.ICollection> の型を変換先の `array`の型に自動的にキャストできない場合、<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> の非ジェネリック実装は <xref:System.InvalidCastException>をスローしますが、ジェネリック実装では <xref:System.ArgumentException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-340">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="2d3ee-341">このメソッドは O(`n`) 操作です。`n` は <xref:System.Collections.Generic.Queue%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-341">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2d3ee-342"><paramref name="array" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-342"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2d3ee-343"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-343"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2d3ee-344"><paramref name="array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-344"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="2d3ee-345">- または -</span><span class="sxs-lookup"><span data-stu-id="2d3ee-345">-or-</span></span> 
 <span data-ttu-id="2d3ee-346"><paramref name="array" /> には、0 から始まるインデックス番号がありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-346"><paramref name="array" /> does not have zero-based indexing.</span></span>  
  
<span data-ttu-id="2d3ee-347">- または -</span><span class="sxs-lookup"><span data-stu-id="2d3ee-347">-or-</span></span> 
<span data-ttu-id="2d3ee-348">コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-348">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span>  
  
<span data-ttu-id="2d3ee-349">- または -</span><span class="sxs-lookup"><span data-stu-id="2d3ee-349">-or-</span></span> 
<span data-ttu-id="2d3ee-350">コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-350">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.IsSynchronized : bool" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2d3ee-351"><see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-351">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="2d3ee-352"><see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-352"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="2d3ee-353"><see cref="T:System.Collections.Generic.Queue`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-353">In the default implementation of <see cref="T:System.Collections.Generic.Queue`1" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-354"><xref:System.Collections.Generic?displayProperty=nameWithType> のコレクションの既定の実装は同期されていません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-354">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="2d3ee-355">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-355">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="2d3ee-356">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-356">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="2d3ee-357">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-357">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="2d3ee-358"><xref:System.Collections.ICollection.SyncRoot%2A> は、<xref:System.Collections.ICollection> へのアクセスを同期するために使用できるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-358"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="2d3ee-359">同期は、コレクションにアクセスする前にすべてのスレッドがこのオブジェクトをロックする場合にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-359">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="2d3ee-360">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-360">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.SyncRoot : obj" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2d3ee-361"><see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-361">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="2d3ee-362"><see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-362">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span>  <span data-ttu-id="2d3ee-363"><see cref="T:System.Collections.Generic.Queue`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-363">In the default implementation of <see cref="T:System.Collections.Generic.Queue`1" />, this property always returns the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-364"><xref:System.Collections.Generic?displayProperty=nameWithType> のコレクションの既定の実装は同期されていません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-364">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="2d3ee-365">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-365">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="2d3ee-366">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-366">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="2d3ee-367">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-367">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="2d3ee-368"><xref:System.Collections.ICollection.SyncRoot%2A> は、<xref:System.Collections.ICollection> へのアクセスを同期するために使用できるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-368"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="2d3ee-369">同期は、コレクションにアクセスする前にすべてのスレッドがこのオブジェクトをロックする場合にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-369">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="2d3ee-370">次のコードは、、 C# C++、および Visual Basic の <xref:System.Collections.ICollection.SyncRoot%2A> プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-370">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="2d3ee-371">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-371">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="queue.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2d3ee-372">コレクションを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-372">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="2d3ee-373">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-373">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-374"> C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-374">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="2d3ee-375">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-375">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="2d3ee-376">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-376">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="2d3ee-377">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-377">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="2d3ee-378"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-378"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="2d3ee-379">この位置では、<xref:System.Collections.IEnumerator.Current%2A> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-379">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="2d3ee-380">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-380">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="2d3ee-381"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-381"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="2d3ee-382"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-382"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="2d3ee-383"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-383">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="2d3ee-384">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-384">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="2d3ee-385"><xref:System.Collections.IEnumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.IEnumerator.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-385">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="2d3ee-386"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-386">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="2d3ee-387">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-387">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="2d3ee-388">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに無効になり、次に <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-388">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> 
  
 <span data-ttu-id="2d3ee-389">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-389">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="2d3ee-390">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-390">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="2d3ee-391">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-391">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="2d3ee-392"><xref:System.Collections.Generic?displayProperty=nameWithType> のコレクションの既定の実装は同期されていません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-392">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="2d3ee-393">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-393">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="queue.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2d3ee-394"><see cref="T:System.Collections.Generic.Queue`1" /> の要素を新しい配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-394">Copies the <see cref="T:System.Collections.Generic.Queue`1" /> elements to a new array.</span></span></summary>
        <returns><span data-ttu-id="2d3ee-395"><see cref="T:System.Collections.Generic.Queue`1" /> からコピーした要素を格納する新しい配列。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-395">A new array containing elements copied from the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-396"><xref:System.Collections.Generic.Queue%601> は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-396">The <xref:System.Collections.Generic.Queue%601> is not modified.</span></span> <span data-ttu-id="2d3ee-397">新しい配列内の要素の順序は、<xref:System.Collections.Generic.Queue%601> の先頭から末尾までの要素の順序と同じです。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-397">The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Generic.Queue%601> to its end.</span></span>  
  
 <span data-ttu-id="2d3ee-398">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.Generic.Queue%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-398">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2d3ee-399">次のコード例は、<xref:System.Collections.Generic.Queue%601.ToArray%2A> メソッドを含む <xref:System.Collections.Generic.Queue%601> ジェネリッククラスのいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-399">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.ToArray%2A> method.</span></span>  
  
 <span data-ttu-id="2d3ee-400">このコード例では、既定の容量を使用して文字列のキューを作成し、<xref:System.Collections.Generic.Queue%601.Enqueue%2A> メソッドを使用して5つの文字列をキューに置いています。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-400">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="2d3ee-401">キューの要素が列挙され、キューの状態が変更されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-401">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="2d3ee-402"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドは、最初の文字列をデキューするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-402">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="2d3ee-403"><xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドは、キュー内の次の項目を確認するために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドを使用してキューからデキューされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-403">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="2d3ee-404"><xref:System.Collections.Generic.Queue%601.ToArray%2A> メソッドを使用して配列を作成し、その配列に queue 要素をコピーします。その後、<xref:System.Collections.Generic.IEnumerable%601>を受け取る <xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターに配列が渡され、キューのコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-404">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="2d3ee-405">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-405">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2d3ee-406">キューのサイズの2倍の配列が作成され、<xref:System.Collections.Generic.Queue%601.CopyTo%2A> メソッドを使用して配列の途中から配列の要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-406">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2d3ee-407"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> コンストラクターは、最初に3つの null 要素を含むキューの2番目のコピーを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-407">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="2d3ee-408"><xref:System.Collections.Generic.Queue%601.Contains%2A> メソッドは、文字列 "4" がキューの最初のコピーに含まれていることを示すために使用されます。その後、<xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドによってコピーがクリアされ、<xref:System.Collections.Generic.Queue%601.Count%2A> プロパティによってキューが空であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-408">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="queue.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2d3ee-409"><see cref="T:System.Collections.Generic.Queue`1" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-409">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Queue`1" />, if that number is less than 90 percent of current capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2d3ee-410">コレクションに新しい要素が追加されない場合は、このメソッドを使用してコレクションのメモリオーバーヘッドを最小限に抑えることができます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-410">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="2d3ee-411">ただし、大きな <xref:System.Collections.Generic.Queue%601> の再割り当てとコピーにかかるコストはかなり大きくなる可能性があるため、<xref:System.Collections.Generic.Queue%601.TrimExcess%2A> の方法では、リストの容量が90% を超える場合は何も行われません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-411">The cost of reallocating and copying a large <xref:System.Collections.Generic.Queue%601> can be considerable, however, so the <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="2d3ee-412">これにより、比較的小さな増加に対して大きな再割り当てコストが発生することを回避できます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-412">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="2d3ee-413">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.Generic.Queue%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-413">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="2d3ee-414"><xref:System.Collections.Generic.Queue%601> を初期状態にリセットするには、<xref:System.Collections.Generic.Queue%601.TrimExcess%2A> メソッドを呼び出す前に <xref:System.Collections.Generic.Queue%601.Clear%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-414">To reset a <xref:System.Collections.Generic.Queue%601> to its initial state, call the <xref:System.Collections.Generic.Queue%601.Clear%2A> method before calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="2d3ee-415">空の <xref:System.Collections.Generic.Queue%601> をトリミングすると、<xref:System.Collections.Generic.Queue%601> の容量が既定の容量に設定されます。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-415">Trimming an empty <xref:System.Collections.Generic.Queue%601> sets the capacity of the <xref:System.Collections.Generic.Queue%601> to the default capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Queue`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryDequeue">
      <MemberSignature Language="C#" Value="public bool TryDequeue (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryDequeue([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryDequeue (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryDequeue([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryDequeue : 'T -&gt; bool" Usage="queue.TryDequeue result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="2d3ee-416">削除されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-416">The removed object.</span></span></param>
        <summary><span data-ttu-id="2d3ee-417"><see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクトを削除し、それを <paramref name="result" /> パラメーターにコピーします。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-417">Removes the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />, and copies it to the <paramref name="result" /> parameter.</span></span></summary>
        <returns><span data-ttu-id="2d3ee-418">オブジェクトが正常に削除された場合は <see langword="true" />。<see cref="T:System.Collections.Generic.Queue`1" /> が空の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-418"><see langword="true" /> if the object is successfully removed; <see langword="false" /> if the <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2d3ee-419"><paramref name="key" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-419"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek : 'T -&gt; bool" Usage="queue.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="2d3ee-420">存在する場合は <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクト。それ以外の場合は <typeparamref name="T" /> の既定値です。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-420">If present, the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />; otherwise, the default value of <typeparamref name="T" />.</span></span></param>
        <summary><span data-ttu-id="2d3ee-421"><see cref="T:System.Collections.Generic.Queue`1" /> の先頭にオブジェクトがあるかどうかを示す値を返します。存在する場合は、それを <paramref name="result" /> パラメーターにコピーします。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-421">Returns a value that indicates whether there is an object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />, and if one is present, copies it to the <paramref name="result" /> parameter.</span></span> <span data-ttu-id="2d3ee-422">オブジェクトは <see cref="T:System.Collections.Generic.Queue`1" /> から削除されません。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-422">The object is not removed from the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><span data-ttu-id="2d3ee-423"><see cref="T:System.Collections.Generic.Queue`1" /> の先頭にオブジェクトがある場合は <see langword="true" />。<see cref="T:System.Collections.Generic.Queue`1" /> が空の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2d3ee-423"><see langword="true" /> if there is an object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />; <see langword="false" /> if the <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
