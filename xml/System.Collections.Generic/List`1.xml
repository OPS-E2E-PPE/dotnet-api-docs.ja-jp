<Type Name="List&lt;T&gt;" FullName="System.Collections.Generic.List&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a5b67093cf80ad00b6cadbbd13ee2ac394b006a8" /><Meta Name="ms.sourcegitcommit" Value="f11e0152a1dd5d85dbd684f07123f1829eed3f3a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="01/17/2020" /><Meta Name="ms.locfileid" Value="76165130" /></Metadata><TypeSignature Language="C#" Value="public class List&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit List`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.List`1" />
  <TypeSignature Language="VB.NET" Value="Public Class List(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class List : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::IList" />
  <TypeSignature Language="F#" Value="type List&lt;'T&gt; = class&#xA;    interface IList&lt;'T&gt;&#xA;    interface IList&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="fecc4-101">リスト内の要素の型。</span><span class="sxs-lookup"><span data-stu-id="fecc4-101">The type of elements in the list.</span></span></typeparam>
    <summary><span data-ttu-id="fecc4-102">インデックスを使用してアクセスできる、厳密に型指定されたオブジェクトのリストを表します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-102">Represents a strongly typed list of objects that can be accessed by index.</span></span> <span data-ttu-id="fecc4-103">リストの検索、並べ替え、および操作のためのメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-103">Provides methods to search, sort, and manipulate lists.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-104"><xref:System.Collections.Generic.List%601> クラスは、<xref:System.Collections.ArrayList> クラスに相当する汎用です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-104">The <xref:System.Collections.Generic.List%601> class is the generic equivalent of the <xref:System.Collections.ArrayList> class.</span></span> <span data-ttu-id="fecc4-105">必要に応じてサイズが動的に増加する配列を使用して、<xref:System.Collections.Generic.IList%601> ジェネリックインターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-105">It implements the <xref:System.Collections.Generic.IList%601> generic interface by using an array whose size is dynamically increased as required.</span></span>  
  
 <span data-ttu-id="fecc4-106"><xref:System.Collections.Generic.List%601.Add%2A> または <xref:System.Collections.Generic.List%601.AddRange%2A> メソッドを使用して、<xref:System.Collections.Generic.List%601> に項目を追加できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-106">You can add items to a <xref:System.Collections.Generic.List%601> by using the <xref:System.Collections.Generic.List%601.Add%2A> or <xref:System.Collections.Generic.List%601.AddRange%2A> methods.</span></span>  
  
 <span data-ttu-id="fecc4-107"><xref:System.Collections.Generic.List%601> クラスは、等値比較子と順序比較子の両方を使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-107">The <xref:System.Collections.Generic.List%601> class uses both an equality comparer and an ordering comparer.</span></span>  
  
-   <span data-ttu-id="fecc4-108"><xref:System.Collections.Generic.List%601.Contains%2A>、<xref:System.Collections.Generic.List%601.IndexOf%2A>、<xref:System.Collections.Generic.List%601.LastIndexOf%2A>、<xref:System.Collections.Generic.Dictionary%602.Remove%2A> などのメソッドでは、リスト要素の等値比較子が使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-108">Methods such as <xref:System.Collections.Generic.List%601.Contains%2A>, <xref:System.Collections.Generic.List%601.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, and <xref:System.Collections.Generic.Dictionary%602.Remove%2A> use an equality comparer for the list elements.</span></span> <span data-ttu-id="fecc4-109">`T` 型の既定の等値比較子は、次のように決定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-109">The default equality comparer for type `T` is determined as follows.</span></span> <span data-ttu-id="fecc4-110">型 `T` が <xref:System.IEquatable%601> ジェネリックインターフェイスを実装している場合、等値比較子はそのインターフェイスの <xref:System.IEquatable%601.Equals%28%600%29> メソッドです。それ以外の場合、既定の等値比較子は <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-110">If type `T` implements the <xref:System.IEquatable%601> generic interface, then the equality comparer is the <xref:System.IEquatable%601.Equals%28%600%29> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="fecc4-111"><xref:System.Collections.Generic.List%601.BinarySearch%2A> や <xref:System.Collections.Generic.List%601.Sort%2A> などのメソッドは、リスト要素の順序比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-111">Methods such as <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> use an ordering comparer for the list elements.</span></span> <span data-ttu-id="fecc4-112">`T` 型の既定の比較子は、次のように決定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-112">The default comparer for type `T` is determined as follows.</span></span>  <span data-ttu-id="fecc4-113">型 `T` が <xref:System.IComparable%601> ジェネリックインターフェイスを実装している場合、既定の比較子はそのインターフェイスの <xref:System.IComparable%601.CompareTo%28%600%29> メソッドです。それ以外の場合、型 `T` が非ジェネリック <xref:System.IComparable> インターフェイスを実装する場合、既定の比較子はそのインターフェイスの <xref:System.IComparable.CompareTo%28System.Object%29> メソッドになります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-113">If type `T` implements the <xref:System.IComparable%601> generic interface, then the default comparer is the <xref:System.IComparable%601.CompareTo%28%600%29> method of that interface; otherwise, if type `T` implements the nongeneric <xref:System.IComparable> interface, then the default comparer is the <xref:System.IComparable.CompareTo%28System.Object%29> method of that interface.</span></span> <span data-ttu-id="fecc4-114">型 `T` がどちらのインターフェイスも実装しない場合、既定の比較子は存在せず、比較子または比較デリゲートを明示的に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-114">If type `T` implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.</span></span>  
  
 <span data-ttu-id="fecc4-115"><xref:System.Collections.Generic.List%601> の並べ替えは保証されていません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-115">The <xref:System.Collections.Generic.List%601> is not guaranteed to be sorted.</span></span>  <span data-ttu-id="fecc4-116"><xref:System.Collections.Generic.List%601> を並べ替える必要がある操作 (<xref:System.Collections.Generic.List%601.BinarySearch%2A>など) を実行する前に、<xref:System.Collections.Generic.List%601> を並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-116">You must sort the <xref:System.Collections.Generic.List%601> before performing operations (such as <xref:System.Collections.Generic.List%601.BinarySearch%2A>) that require the <xref:System.Collections.Generic.List%601> to be sorted.</span></span>  
  
 <span data-ttu-id="fecc4-117">このコレクションの要素には、整数インデックスを使用してアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-117">Elements in this collection can be accessed using an integer index.</span></span>  <span data-ttu-id="fecc4-118">このコレクションのインデックスは0から始まります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-118">Indexes in this collection are zero-based.</span></span>  
  
 <span data-ttu-id="fecc4-119">**.NET Framework のみ:** 非常に大きな <xref:System.Collections.Generic.List%601> オブジェクトの場合、 [`<gcAllowVeryLargeObjects>`](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md)構成要素の `enabled` 属性を実行時環境の `true` に設定することによって、64ビットシステム上の最大容量を20億の要素に増やすことができます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-119">**.NET Framework only:** For very large <xref:System.Collections.Generic.List%601> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the [`<gcAllowVeryLargeObjects>`](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="fecc4-120"><xref:System.Collections.Generic.List%601> は、参照型の有効な値として `null` を受け入れ、重複する要素を許可します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-120"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="fecc4-121"><xref:System.Collections.Generic.List%601> クラスの変更できないバージョンについては、「<xref:System.Collections.Immutable.ImmutableList%601>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fecc4-121">For an immutable version of the <xref:System.Collections.Generic.List%601> class, see <xref:System.Collections.Immutable.ImmutableList%601>.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="fecc4-122">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="fecc4-122">Performance Considerations</span></span>  
 <span data-ttu-id="fecc4-123"><xref:System.Collections.Generic.List%601> または <xref:System.Collections.ArrayList> クラスを使用するかどうかを決定する際には、どちらも同様の機能を備えているため、<xref:System.Collections.Generic.List%601> クラスはほとんどの場合にパフォーマンスが向上し、タイプセーフであることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="fecc4-123">In deciding whether to use the <xref:System.Collections.Generic.List%601> or <xref:System.Collections.ArrayList> class, both of which have similar functionality, remember that the <xref:System.Collections.Generic.List%601> class performs better in most cases and is type safe.</span></span> <span data-ttu-id="fecc4-124">参照型が <xref:System.Collections.Generic.List%601> クラスの型 `T` に使用されている場合、2つのクラスの動作は同じになります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-124">If a reference type is used for type `T` of the <xref:System.Collections.Generic.List%601> class, the behavior of the two classes is identical.</span></span> <span data-ttu-id="fecc4-125">ただし、型 `T`に値型を使用する場合は、実装とボックス化の問題を考慮する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-125">However, if a value type is used for type `T`, you need to consider implementation and boxing issues.</span></span>  
  
 <span data-ttu-id="fecc4-126">型 `T`に値型が使用されている場合、コンパイラはその値型に対して特別な <xref:System.Collections.Generic.List%601> クラスの実装を生成します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-126">If a value type is used for type `T`, the compiler generates an implementation of the <xref:System.Collections.Generic.List%601> class specifically for that value type.</span></span> <span data-ttu-id="fecc4-127">つまり、要素を使用する前に、<xref:System.Collections.Generic.List%601> オブジェクトのリスト要素をボックス化する必要はありません。また、約500のリスト要素が作成された後は、ボックス化されたリスト要素ではなく、ボックス化されたメモリがクラス実装の生成に使用されたメモリよりも大きくなります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-127">That means a list element of a <xref:System.Collections.Generic.List%601> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.</span></span>  
  
 <span data-ttu-id="fecc4-128"><xref:System.IEquatable%601> ジェネリックインターフェイスを実装 `T` 型に使用される値型を特定するようにします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-128">Make certain the value type used for type `T` implements the <xref:System.IEquatable%601> generic interface.</span></span> <span data-ttu-id="fecc4-129">それ以外の場合、<xref:System.Collections.Generic.List%601.Contains%2A> などのメソッドは、影響を受けるリスト要素を示す <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-129">If not, methods such as <xref:System.Collections.Generic.List%601.Contains%2A> must call the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, which boxes the affected list element.</span></span> <span data-ttu-id="fecc4-130">値の型が <xref:System.IComparable> インターフェイスを実装していて、ソースコードを所有している場合は、<xref:System.IComparable%601> ジェネリックインターフェイスを実装して、<xref:System.Collections.Generic.List%601.BinarySearch%2A> および <xref:System.Collections.Generic.List%601.Sort%2A> メソッドがリスト要素のボックス化を回避できるようにします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-130">If the value type implements the <xref:System.IComparable> interface and you own the source code, also implement the <xref:System.IComparable%601> generic interface to prevent the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods from boxing list elements.</span></span> <span data-ttu-id="fecc4-131">ソースコードを所有していない場合は、<xref:System.Collections.Generic.IComparer%601> オブジェクトを <xref:System.Collections.Generic.List%601.BinarySearch%2A> メソッドと <xref:System.Collections.Generic.List%601.Sort%2A> メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-131">If you do not own the source code, pass an <xref:System.Collections.Generic.IComparer%601> object to the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods</span></span>  
  
 <span data-ttu-id="fecc4-132">これは、<xref:System.Collections.ArrayList> クラスを使用したり、厳密に型指定されたラッパーコレクションを自分で記述したりする代わりに、<xref:System.Collections.Generic.List%601> クラスの型固有の実装を使用する利点になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-132">It is to your advantage to use the type-specific implementation of the <xref:System.Collections.Generic.List%601> class instead of using the <xref:System.Collections.ArrayList> class or writing a strongly typed wrapper collection yourself.</span></span> <span data-ttu-id="fecc4-133">その理由は、実装では .NET Framework が既に行っていることを実行する必要があり、共通言語ランタイムは Microsoft 中間言語コードとメタデータを共有できるため、実装はできません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-133">The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.</span></span>  
  
## <a name="f-considerations"></a><span data-ttu-id="fecc4-134">F#上</span><span class="sxs-lookup"><span data-stu-id="fecc4-134">F# Considerations</span></span>  
 <span data-ttu-id="fecc4-135"><xref:System.Collections.Generic.List%601> クラスは、コードでF#はあまり使用されません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-135">The <xref:System.Collections.Generic.List%601> class is used infrequently in F# code.</span></span> <span data-ttu-id="fecc4-136">代わりに、変更できないシングルリンクリストである[リスト](https://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)を使用するのが一般的です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-136">Instead, [Lists](https://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d), which are immutable, singly-linked lists, are typically preferred.</span></span> <span data-ttu-id="fecc4-137">リストF#は、順序付けられた変更できない一連の値を提供し、関数形式の開発での使用がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-137">An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development.</span></span> <span data-ttu-id="fecc4-138">からF#使用する場合、<xref:System.Collections.Generic.List%601> クラスは通常、リストとの名前のF#競合を避けるために、 [collections.resizearray\<t >](https://msdn.microsoft.com/library/ee353447.aspx)型略称によって参照されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-138">When used from F#, the <xref:System.Collections.Generic.List%601> class is typically referred to by the [ResizeArray\<'T>](https://msdn.microsoft.com/library/ee353447.aspx) type abbreviation to avoid naming conflicts with F# Lists</span></span>  
  
   
  
## Examples  

 <span data-ttu-id="fecc4-139">次の例では、<xref:System.Collections.Generic.List%601>に単純なビジネスオブジェクトを追加、削除、および挿入する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-139">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="fecc4-140">次の例は、string 型の <xref:System.Collections.Generic.List%601> ジェネリッククラスのいくつかのプロパティとメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-140">The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class of type string.</span></span> <span data-ttu-id="fecc4-141">(複合型の <xref:System.Collections.Generic.List%601> の例については、「<xref:System.Collections.Generic.List%601.Contains%2A> メソッド」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="fecc4-141">(For an example of a <xref:System.Collections.Generic.List%601> of complex types, see the <xref:System.Collections.Generic.List%601.Contains%2A> method.)</span></span>  
  
 <span data-ttu-id="fecc4-142">パラメーターなしのコンストラクターは、既定の容量を持つ文字列のリストを作成するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-142">The parameterless constructor is used to create a list of strings with the default capacity.</span></span> <span data-ttu-id="fecc4-143"><xref:System.Collections.Generic.List%601.Capacity%2A> プロパティが表示され、<xref:System.Collections.Generic.List%601.Add%2A> メソッドを使用して複数の項目を追加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-143">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items.</span></span> <span data-ttu-id="fecc4-144">項目が一覧表示され、[<xref:System.Collections.Generic.List%601.Capacity%2A>] プロパティが <xref:System.Collections.Generic.List%601.Count%2A> プロパティと共に再び表示され、必要に応じて容量が増加したことが示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-144">The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="fecc4-145"><xref:System.Collections.Generic.List%601.Contains%2A> メソッドを使用して、リスト内の項目の存在をテストし、<xref:System.Collections.Generic.List%601.Insert%2A> メソッドを使用してリストの中央に新しい項目を挿入します。リストの内容が再び表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-145">The <xref:System.Collections.Generic.List%601.Contains%2A> method is used to test for the presence of an item in the list, the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert a new item in the middle of the list, and the contents of the list are displayed again.</span></span>  
  
 <span data-ttu-id="fecc4-146">既定の <xref:System.Collections.Generic.List%601.Item%2A> プロパティ (のC#インデクサー) を使用して項目を取得し、<xref:System.Collections.Generic.List%601.Remove%2A> メソッドを使用して、前に追加した重複項目の最初のインスタンスを削除して、内容を再度表示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-146">The default <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) is used to retrieve an item, the <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item added earlier, and the contents are displayed again.</span></span> <span data-ttu-id="fecc4-147"><xref:System.Collections.Generic.List%601.Remove%2A> メソッドは、最初に見つかったインスタンスを常に削除します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-147">The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.</span></span>  
  
 <span data-ttu-id="fecc4-148"><xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドを使用して、カウントに一致する容量を減らし、<xref:System.Collections.Generic.List%601.Capacity%2A> と <xref:System.Collections.Generic.List%601.Count%2A> のプロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-148">The <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="fecc4-149">未使用の容量が合計容量の10% 未満の場合、一覧のサイズは変更されませんでした。</span><span class="sxs-lookup"><span data-stu-id="fecc4-149">If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</span></span>  
  
 <span data-ttu-id="fecc4-150">最後に、<xref:System.Collections.Generic.List%601.Clear%2A> メソッドを使用してリストからすべての項目が削除され、<xref:System.Collections.Generic.List%601.Capacity%2A> と <xref:System.Collections.Generic.List%601.Count%2A> のプロパティが表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-150">Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp-interactive[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="fecc4-151">パブリック静的 (Visual Basic では<see langword="Shared" />) なこの型のメンバーはスレッド セーフです</span><span class="sxs-lookup"><span data-stu-id="fecc4-151">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="fecc4-152">インスタンス メンバーについては、スレッド セーフであることの保証はありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-152">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="fecc4-153"><see cref="T:System.Collections.Generic.List`1" />に対して複数の読み取り操作を実行するのは安全ですが、読み取り中にコレクションが変更された場合に問題が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-153">It is safe to perform multiple read operations on a <see cref="T:System.Collections.Generic.List`1" />, but issues can occur if the collection is modified while it's being read.</span></span> <span data-ttu-id="fecc4-154">スレッドセーフを確保するには、読み取りまたは書き込み操作中にコレクションをロックします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-154">To ensure thread safety, lock the collection during a read or write operation.</span></span> <span data-ttu-id="fecc4-155">読み取りと書き込みのために複数のスレッドがコレクションにアクセスできるようにするには、独自の同期を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-155">To enable a collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span> <span data-ttu-id="fecc4-156">組み込み同期を使用したコレクションについては、<see cref="N:System.Collections.Concurrent" /> 名前空間のクラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="fecc4-156">For collections with built-in synchronization, see the classes in the <see cref="N:System.Collections.Concurrent" /> namespace.</span></span> <span data-ttu-id="fecc4-157">本質的にスレッドセーフな代替方法については、<see cref="T:System.Collections.Immutable.ImmutableList`1" /> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="fecc4-157">For an inherently thread-safe alternative, see the <see cref="T:System.Collections.Immutable.ImmutableList`1" /> class.</span></span></threadsafe>
    <altmember cref="T:System.Collections.IList" />
    <altmember cref="T:System.Collections.Immutable.ImmutableList`1" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-158">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-158">Performing Culture-Insensitive String Operations in Collections</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7"><span data-ttu-id="fecc4-159">反復子 (C# および Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fecc4-159">Iterators (C# and Visual Basic)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fecc4-160"><see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-160">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fecc4-161">空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-161">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the default initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-162"><xref:System.Collections.Generic.List%601> の容量は、<xref:System.Collections.Generic.List%601> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-162">The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold.</span></span> <span data-ttu-id="fecc4-163">要素が <xref:System.Collections.Generic.List%601>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-163">As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="fecc4-164">コレクションのサイズを推定できる場合は、<xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> コンストラクターを使用して初期容量を指定することで、<xref:System.Collections.Generic.List%601>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-164">If the size of the collection can be estimated, using the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-165">容量は、<xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドを呼び出すか、<xref:System.Collections.Generic.List%601.Capacity%2A> プロパティを明示的に設定することによって減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-165">The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="fecc4-166">容量を減らしてメモリを再割り当てし、<xref:System.Collections.Generic.List%601>内のすべての要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-166">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-167">このコンストラクターは O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-167">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  

 <span data-ttu-id="fecc4-168">次の例は、<xref:System.Collections.Generic.List%601> ジェネリッククラスのパラメーターなしのコンストラクターを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-168">The following example demonstrates the parameterless constructor of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="fecc4-169">パラメーターなしのコンストラクターは、<xref:System.Collections.Generic.List%601.Capacity%2A> プロパティを表示することによって示されているように、既定の容量を使用してリストを作成します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-169">The parameterless constructor creates a list with the default capacity, as demonstrated by displaying the <xref:System.Collections.Generic.List%601.Capacity%2A> property.</span></span>  
  
 <span data-ttu-id="fecc4-170">この例では、項目を追加、挿入、および削除し、これらの方法によって容量がどのように変化するかを示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-170">The example adds, inserts, and removes items, showing how the capacity changes as these methods are used.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp-interactive[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.List&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="new System.Collections.Generic.List&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="fecc4-171">新しいリストに要素がコピーされたコレクション。</span><span class="sxs-lookup"><span data-stu-id="fecc4-171">The collection whose elements are copied to the new list.</span></span></param>
        <summary><span data-ttu-id="fecc4-172">指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-172">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-173">要素は、コレクションの列挙子によって読み取られた順序で <xref:System.Collections.Generic.List%601> にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-173">The elements are copied onto the <xref:System.Collections.Generic.List%601> in the same order they are read by the enumerator of the collection.</span></span>  
  
 <span data-ttu-id="fecc4-174">このコンストラクターは O (*n*) 操作です。ここで、 *n*は `collection`内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-174">This constructor is an O(*n*) operation, where *n* is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-175">次の例は、<xref:System.Collections.Generic.List%601.%23ctor%2A> コンストラクターと、範囲に作用する <xref:System.Collections.Generic.List%601> クラスのさまざまなメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-175">The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%2A> constructor and various methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="fecc4-176">文字列の配列が作成されてコンストラクターに渡され、リストに配列の要素が設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-176">An array of strings is created and passed to the constructor, populating the list with the elements of the array.</span></span> <span data-ttu-id="fecc4-177">次に、[<xref:System.Collections.Generic.List%601.Capacity%2A>] プロパティが表示され、初期容量が入力要素を保持するために必要な値であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-177">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is then displayed, to show that the initial capacity is exactly what is required to hold the input elements.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-178"><paramref name="collection" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-178"><paramref name="collection" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.List&lt;'T&gt; : int -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="new System.Collections.Generic.List&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="fecc4-179">新しいリストに格納できる要素の数。</span><span class="sxs-lookup"><span data-stu-id="fecc4-179">The number of elements that the new list can initially store.</span></span></param>
        <summary><span data-ttu-id="fecc4-180">空で、指定した初期量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-180">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the specified initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-181"><xref:System.Collections.Generic.List%601> の容量は、<xref:System.Collections.Generic.List%601> が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-181">The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold.</span></span> <span data-ttu-id="fecc4-182">要素が <xref:System.Collections.Generic.List%601>に追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-182">As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="fecc4-183">コレクションのサイズを推定できる場合は、初期容量を指定すると、<xref:System.Collections.Generic.List%601>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-183">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-184">容量は、<xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドを呼び出すか、<xref:System.Collections.Generic.List%601.Capacity%2A> プロパティを明示的に設定することによって減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-184">The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="fecc4-185">容量を減らしてメモリを再割り当てし、<xref:System.Collections.Generic.List%601>内のすべての要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-185">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-186">このコンストラクターは O (*n*) 操作です。ここで、 *n*は `capacity`です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-186">This constructor is an O(*n*) operation, where *n* is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-187"><xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> コンストラクターの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-187">The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="fecc4-188">容量が4の文字列の <xref:System.Collections.Generic.List%601> が作成されます。これは、リストの最終的なサイズが厳密に4であることがわかっているためです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-188">A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</span></span> <span data-ttu-id="fecc4-189">このリストには4つの文字列が入力され、読み取り専用のコピーは <xref:System.Collections.Generic.List%601.AsReadOnly%2A> メソッドを使用して作成されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-189">The list is populated with four strings, and a read-only copy is created by using the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method.</span></span>  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-190"><paramref name="capacity" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-190"><paramref name="capacity" /> is less than 0.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(T item);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; unit&#xA;override this.Add : 'T -&gt; unit" Usage="list.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-191"><see cref="T:System.Collections.Generic.List`1" /> の末尾に追加するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-191">The object to be added to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-192">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-192">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="fecc4-193"><see cref="T:System.Collections.Generic.List`1" /> の末尾にオブジェクトを追加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-193">Adds an object to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-194"><xref:System.Collections.Generic.List%601> は、参照型の有効な値として `null` を受け入れ、重複する要素を許可します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-194"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="fecc4-195"><xref:System.Collections.Generic.List%601.Count%2A> 既に <xref:System.Collections.Generic.List%601.Capacity%2A>に等しい場合は、内部配列が自動的に再割り当てされ、既存の要素が新しい配列にコピーされてから、新しい要素が追加されるまで、<xref:System.Collections.Generic.List%601> の容量が増加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-195">If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="fecc4-196"><xref:System.Collections.Generic.List%601.Count%2A> が <xref:System.Collections.Generic.List%601.Capacity%2A>より小さい場合、このメソッドは O (1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-196">If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation.</span></span> <span data-ttu-id="fecc4-197">新しい要素に対応するために容量を増やす必要がある場合、このメソッドは O (*n*) 操作になります。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-197">If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  

 <span data-ttu-id="fecc4-198">次の例では、<xref:System.Collections.Generic.List%601>に単純なビジネスオブジェクトを追加、削除、および挿入する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-198">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="fecc4-199">次の例は、<xref:System.Collections.Generic.List%601.Add%2A> メソッドを含む <xref:System.Collections.Generic.List%601> ジェネリッククラスのいくつかのプロパティとメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-199">The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class, including the <xref:System.Collections.Generic.List%601.Add%2A> method.</span></span> <span data-ttu-id="fecc4-200">0の容量を持つ文字列のリストを作成するには、パラメーターなしのコンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-200">The parameterless constructor is used to create a list of strings with a capacity of 0.</span></span> <span data-ttu-id="fecc4-201"><xref:System.Collections.Generic.List%601.Capacity%2A> プロパティが表示され、<xref:System.Collections.Generic.List%601.Add%2A> メソッドを使用して複数の項目を追加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-201">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed, and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items.</span></span> <span data-ttu-id="fecc4-202">項目が一覧表示され、[<xref:System.Collections.Generic.List%601.Capacity%2A>] プロパティが <xref:System.Collections.Generic.List%601.Count%2A> プロパティと共に再び表示され、必要に応じて容量が増加したことが示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-202">The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="fecc4-203">他のプロパティおよびメソッドを使用して、リストの要素を検索、挿入、および削除し、最後に一覧をクリアします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-203">Other properties and methods are used to search for, insert, and remove elements from the list, and finally to clear the list.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp-interactive[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="member this.AddRange : seq&lt;'T&gt; -&gt; unit" Usage="list.AddRange collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="fecc4-204"><see cref="T:System.Collections.Generic.List`1" /> の末尾に要素が追加されるコレクション。</span><span class="sxs-lookup"><span data-stu-id="fecc4-204">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-205">コレクション自体を <see langword="null" /> にすることはできませんが、型 <see langword="null" /> が参照型の場合、コレクションに格納する要素は <paramref name="T" /> であってもかまいません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-205">The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />, if type <paramref name="T" /> is a reference type.</span></span></param>
        <summary><span data-ttu-id="fecc4-206">指定したコレクションの要素を <see cref="T:System.Collections.Generic.List`1" /> の末尾に追加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-206">Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-207">コレクション内の要素の順序は、<xref:System.Collections.Generic.List%601>に保持されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-207">The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-208">新しい <xref:System.Collections.Generic.List%601.Count%2A> (現在の <xref:System.Collections.Generic.List%601.Count%2A> とコレクションのサイズの合計) が <xref:System.Collections.Generic.List%601.Capacity%2A>を超える場合、新しい要素を格納するために内部配列が自動的に再割り当てされ、新しい要素が追加される前に既存の要素が新しい配列にコピーされて、<xref:System.Collections.Generic.List%601> の容量が増加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-208">If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</span></span>  
  
 <span data-ttu-id="fecc4-209"><xref:System.Collections.Generic.List%601> が、<xref:System.Collections.Generic.List%601.Capacity%2A>を増やさずに新しい要素に対応できる場合、このメソッドは O (*n*) 操作になります。ここで、 *n*は追加する要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-209">If the <xref:System.Collections.Generic.List%601> can accommodate the new elements without increasing the <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(*n*) operation, where *n* is the number of elements to be added.</span></span> <span data-ttu-id="fecc4-210">新しい要素に合わせて容量を増やす必要がある場合、このメソッドは O (*n* + *m*) 操作になります。ここで、 *n*は加算する要素の数で、 *m*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-210">If the capacity needs to be increased to accommodate the new elements, this method becomes an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-211">次の例は、<xref:System.Collections.Generic.List%601.AddRange%2A> メソッドと、範囲に作用する <xref:System.Collections.Generic.List%601> クラスのその他のさまざまなメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-211">The following example demonstrates the <xref:System.Collections.Generic.List%601.AddRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="fecc4-212">文字列の配列が作成されてコンストラクターに渡され、リストに配列の要素が設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-212">An array of strings is created and passed to the constructor, populating the list with the elements of the array.</span></span> <span data-ttu-id="fecc4-213"><xref:System.Collections.Generic.List%601.AddRange%2A> メソッドが呼び出され、その引数としてリストが使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-213">The <xref:System.Collections.Generic.List%601.AddRange%2A> method is called, with the list as its argument.</span></span> <span data-ttu-id="fecc4-214">結果として、リストの現在の要素がリストの最後に追加され、すべての要素が複製されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-214">The result is that the current elements of the list are added to the end of the list, duplicating all the elements.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-215"><paramref name="collection" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-215"><paramref name="collection" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnly">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!T&gt; AsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnly () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ AsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.AsReadOnly : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;'T&gt;" Usage="list.AsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fecc4-216">現在のコレクションの読み取り専用の <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> ラッパーを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-216">Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the current collection.</span></span></summary>
        <returns><span data-ttu-id="fecc4-217">現在の <see cref="T:System.Collections.Generic.List`1" /> をラップする読み取り専用のラッパーとして動作するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-217">An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.List`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-218"><xref:System.Collections.Generic.List%601> オブジェクトが変更されないようにするには、このラッパーを通じてのみ公開します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-218">To prevent any modifications to the <xref:System.Collections.Generic.List%601> object, expose it only through this wrapper.</span></span> <span data-ttu-id="fecc4-219"><xref:System.Collections.ObjectModel.ReadOnlyCollection%601> オブジェクトは、コレクションを変更するメソッドを公開しません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-219">A  <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object does not expose methods that modify the collection.</span></span> <span data-ttu-id="fecc4-220">ただし、基になる <xref:System.Collections.Generic.List%601> オブジェクトに変更が加えられた場合、読み取り専用コレクションにはそれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-220">However, if changes are made to the underlying <xref:System.Collections.Generic.List%601> object, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="fecc4-221">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-221">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-222"><xref:System.Collections.Generic.List%601.AsReadOnly%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-222">The following example demonstrates the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method.</span></span> <span data-ttu-id="fecc4-223">容量が4の文字列の <xref:System.Collections.Generic.List%601> が作成されます。これは、リストの最終的なサイズが厳密に4であることがわかっているためです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-223">A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</span></span> <span data-ttu-id="fecc4-224">このリストには4つの文字列が入力され、<xref:System.Collections.Generic.List%601.AsReadOnly%2A> メソッドを使用して、元のリストをラップする読み取り専用 <xref:System.Collections.Generic.IList%601> ジェネリックインターフェイスの実装を取得します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-224">The list is populated with four strings, and the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method is used to get a read-only <xref:System.Collections.Generic.IList%601> generic interface implementation that wraps the original list.</span></span>  
  
 <span data-ttu-id="fecc4-225">元のリストの要素は、<xref:System.Collections.Generic.List%601.Item%2A> プロパティ (のC#インデクサー) を使用して "Coelophysis" に設定され、読み取り専用リストの内容が、元のリストの単なるラッパーであることを示すために再び表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-225">An element of the original list is set to "Coelophysis" using the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#), and the contents of the read-only list are displayed again to demonstrate that it is just a wrapper for the original list.</span></span>  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BinarySearch">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fecc4-226">バイナリ サーチ アルゴリズムを使用して、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の特定の要素またはその一部を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-226">Uses a binary search algorithm to locate a specific element in the sorted <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T -&gt; int" Usage="list.BinarySearch item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-227">検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-227">The object to locate.</span></span> <span data-ttu-id="fecc4-228">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-228">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="fecc4-229">既定の比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-229">Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the default comparer and returns the zero-based index of the element.</span></span></summary>
        <returns><span data-ttu-id="fecc4-230"><paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-230">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-231">このメソッドは、型 `T` の既定の比較子 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> を使用して、リスト要素の順序を決定します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-231">This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for type `T` to determine the order of list elements.</span></span> <span data-ttu-id="fecc4-232"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> プロパティは、型 `T` が <xref:System.IComparable%601> ジェネリックインターフェイスを実装し、その実装を使用するかどうかを確認します (使用可能な場合)。</span><span class="sxs-lookup"><span data-stu-id="fecc4-232">The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="fecc4-233">それ以外の場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 型 `T` が <xref:System.IComparable> インターフェイスを実装しているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-233">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="fecc4-234">型 `T` がどちらのインターフェイスも実装していない場合、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> は <xref:System.InvalidOperationException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-234">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="fecc4-235"><xref:System.Collections.Generic.List%601> は、比較子の実装に従って既に並べ替えられている必要があります。それ以外の場合、結果は正しくありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-235">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="fecc4-236">`null` を任意の参照型と比較することはできますが、<xref:System.IComparable%601> ジェネリックインターフェイスを使用する場合は例外を生成しません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-236">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="fecc4-237">並べ替えを行う場合、`null` は他のオブジェクトより小さいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-237">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="fecc4-238"><xref:System.Collections.Generic.List%601> に同じ値を持つ複数の要素が含まれている場合、メソッドは、1つの出現箇所だけを返します。最初の要素とは限りません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-238">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="fecc4-239"><xref:System.Collections.Generic.List%601> に指定された値が含まれていない場合、メソッドは負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-239">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="fecc4-240">ビットごとの補数演算 (~) をこの負の整数に適用すると、検索値よりも大きい最初の要素のインデックスを取得できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-240">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="fecc4-241"><xref:System.Collections.Generic.List%601>に値を挿入する場合、並べ替え順序を維持するために、このインデックスを挿入ポイントとして使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-241">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="fecc4-242">このメソッドは O (log *n*) 操作です。ここで、 *n*は範囲内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-242">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-243">次の例は、<xref:System.Collections.Generic.List%601.Sort> メソッドのオーバーロードと、<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> メソッドのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-243">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload.</span></span> <span data-ttu-id="fecc4-244">文字列の <xref:System.Collections.Generic.List%601> が作成され、特定の順序ではなく4つの文字列が設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-244">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="fecc4-245">一覧が表示され、並べ替えられて、もう一度表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-245">The list is displayed, sorted, and displayed again.</span></span>  
  
 <span data-ttu-id="fecc4-246">次に、<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> メソッドのオーバーロードを使用して、リストに含まれていない2つの文字列を検索し、<xref:System.Collections.Generic.List%601.Insert%2A> メソッドを使用してそれらの文字列を挿入します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-246">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them.</span></span> <span data-ttu-id="fecc4-247">文字列がリストに含まれていないため、<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> メソッドの戻り値は、各ケースで負の値になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-247">The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method is negative in each case, because the strings are not in the list.</span></span> <span data-ttu-id="fecc4-248">ビットごとの補数 (およびでC#は ~ 演算子) C++を取得すると、この負の数値の `Xor`-1 Visual Basic) によって、検索文字列よりも大きいリスト内の最初の要素のインデックスが生成されます。この位置に挿入すると、並べ替え順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-248">Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</span></span> <span data-ttu-id="fecc4-249">2番目の検索文字列がリスト内のどの要素よりも大きいため、挿入位置がリストの末尾にあります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-249">The second search string is larger than any element in the list, so the insertion position is at the end of the list.</span></span>  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fecc4-250">既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <see cref="T:System.IComparable" /> 型の <paramref name="T" /> インターフェイスの実装を見つけることができません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-250">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-251">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-251">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="list.BinarySearch (item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-252">検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-252">The object to locate.</span></span> <span data-ttu-id="fecc4-253">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-253">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="comparer"><span data-ttu-id="fecc4-254">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。</span><span class="sxs-lookup"><span data-stu-id="fecc4-254">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.</span></span>  
  
<span data-ttu-id="fecc4-255">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-255">-or-</span></span> 
 <span data-ttu-id="fecc4-256">既定の比較子 <see langword="null" /> を使用する場合は <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-256"><see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span></span></param>
        <summary><span data-ttu-id="fecc4-257">指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-257">Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</span></span></summary>
        <returns><span data-ttu-id="fecc4-258"><paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-258">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-259">比較子は、要素の比較方法をカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-259">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="fecc4-260">たとえば、<xref:System.Collections.CaseInsensitiveComparer> インスタンスを比較子として使用して、大文字と小文字を区別しない文字列検索を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-260">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="fecc4-261">`comparer` が指定されている場合、指定された <xref:System.Collections.Generic.IComparer%601> 実装を使用して、<xref:System.Collections.Generic.List%601> の要素が指定された値と比較されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-261">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="fecc4-262">`comparer` が `null`場合、既定の比較 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 子は、型 `T` が <xref:System.IComparable%601> ジェネリックインターフェイスを実装し、その実装を使用できる場合にその実装を使用するかどうかをチェックします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-262">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="fecc4-263">それ以外の場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 型 `T` が <xref:System.IComparable> インターフェイスを実装しているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-263">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="fecc4-264">型 `T` がどちらのインターフェイスも実装していない場合、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> は <xref:System.InvalidOperationException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-264">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="fecc4-265"><xref:System.Collections.Generic.List%601> は、比較子の実装に従って既に並べ替えられている必要があります。それ以外の場合、結果は正しくありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-265">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="fecc4-266">`null` を任意の参照型と比較することはできますが、<xref:System.IComparable%601> ジェネリックインターフェイスを使用する場合は例外を生成しません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-266">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="fecc4-267">並べ替えを行う場合、`null` は他のオブジェクトより小さいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-267">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="fecc4-268"><xref:System.Collections.Generic.List%601> に同じ値を持つ複数の要素が含まれている場合、メソッドは、1つの出現箇所だけを返します。最初の要素とは限りません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-268">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="fecc4-269"><xref:System.Collections.Generic.List%601> に指定された値が含まれていない場合、メソッドは負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-269">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="fecc4-270">ビットごとの補数演算 (~) をこの負の整数に適用すると、検索値よりも大きい最初の要素のインデックスを取得できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-270">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="fecc4-271"><xref:System.Collections.Generic.List%601>に値を挿入する場合、並べ替え順序を維持するために、このインデックスを挿入ポイントとして使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-271">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="fecc4-272">このメソッドは O (log *n*) 操作です。ここで、 *n*は範囲内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-272">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-273">次の例は、<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバーロードと、<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-273">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="fecc4-274">この例では、DinoCompare という名前の文字列の代替比較子を定義しています。これC++は、`IComparer<string>` (`IComparer(Of String)` Visual Basic では `IComparer<String^>`、Visual) ジェネリックインターフェイスに実装されています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-274">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="fecc4-275">比較子は次のように機能します。最初に、比較対照値が `null`に対してテストされ、null 参照が null 以外の値として処理されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-275">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="fecc4-276">次に、文字列の長さが比較され、長い方の文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-276">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="fecc4-277">3番目の長さが等しい場合は、通常の文字列比較が使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-277">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="fecc4-278">文字列の <xref:System.Collections.Generic.List%601> が作成され、特定の順序ではなく4つの文字列が設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-278">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="fecc4-279">一覧が表示され、代替比較子を使用して並べ替えられて、もう一度表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-279">The list is displayed, sorted using the alternate comparer, and displayed again.</span></span>  
  
 <span data-ttu-id="fecc4-280">次に、<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバーロードを使用して、リストに含まれていない複数の文字列を検索し、代替比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-280">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</span></span> <span data-ttu-id="fecc4-281"><xref:System.Collections.Generic.List%601.Insert%2A> メソッドは、文字列を挿入するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-281">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings.</span></span> <span data-ttu-id="fecc4-282">これら2つのメソッドは `SearchAndInsert`という名前の関数に配置され、ビットごとの補数 (とビジュアルC# C++では ~ 演算子、は <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> で返された負の数の `Xor` は Visual Basic) を使用して、新しい文字列を挿入するためのインデックスとして使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-282">These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fecc4-283"><paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <see cref="T:System.IComparable" /> 型の <paramref name="T" /> インターフェイスの実装を見つけることができません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-283"><paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-284">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-284">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(int32 index, int32 count, !T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(int index, int count, T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : int * int * 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="list.BinarySearch (index, count, item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fecc4-285">検索範囲の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-285">The zero-based starting index of the range to search.</span></span></param>
        <param name="count"><span data-ttu-id="fecc4-286">検索する範囲の長さ。</span><span class="sxs-lookup"><span data-stu-id="fecc4-286">The length of the range to search.</span></span></param>
        <param name="item"><span data-ttu-id="fecc4-287">検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-287">The object to locate.</span></span> <span data-ttu-id="fecc4-288">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-288">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="comparer"><span data-ttu-id="fecc4-289">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see langword="null" /> を使用する場合は <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-289">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span></span></param>
        <summary><span data-ttu-id="fecc4-290">指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> の 1 つの要素の範囲を検索し、その要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-290">Searches a range of elements in the sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</span></span></summary>
        <returns><span data-ttu-id="fecc4-291"><paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-291">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-292">比較子は、要素の比較方法をカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-292">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="fecc4-293">たとえば、<xref:System.Collections.CaseInsensitiveComparer> インスタンスを比較子として使用して、大文字と小文字を区別しない文字列検索を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-293">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="fecc4-294">`comparer` が指定されている場合、指定された <xref:System.Collections.Generic.IComparer%601> 実装を使用して、<xref:System.Collections.Generic.List%601> の要素が指定された値と比較されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-294">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="fecc4-295">`comparer` が `null`場合、既定の比較 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 子は、型 `T` が <xref:System.IComparable%601> ジェネリックインターフェイスを実装し、その実装を使用できる場合にその実装を使用するかどうかをチェックします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-295">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="fecc4-296">それ以外の場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 型 `T` が <xref:System.IComparable> インターフェイスを実装しているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-296">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="fecc4-297">型 `T` がどちらのインターフェイスも実装していない場合、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> は <xref:System.InvalidOperationException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-297">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="fecc4-298"><xref:System.Collections.Generic.List%601> は、比較子の実装に従って既に並べ替えられている必要があります。それ以外の場合、結果は正しくありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-298">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="fecc4-299">`null` を任意の参照型と比較することはできますが、<xref:System.IComparable%601> ジェネリックインターフェイスを使用する場合は例外を生成しません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-299">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="fecc4-300">並べ替えを行う場合、`null` は他のオブジェクトより小さいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-300">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="fecc4-301"><xref:System.Collections.Generic.List%601> に同じ値を持つ複数の要素が含まれている場合、メソッドは、1つの出現箇所だけを返します。最初の要素とは限りません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-301">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="fecc4-302"><xref:System.Collections.Generic.List%601> に指定された値が含まれていない場合、メソッドは負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-302">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="fecc4-303">ビットごとの補数演算 (~) をこの負の整数に適用すると、検索値よりも大きい最初の要素のインデックスを取得できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-303">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="fecc4-304"><xref:System.Collections.Generic.List%601>に値を挿入する場合、並べ替え順序を維持するために、このインデックスを挿入ポイントとして使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-304">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="fecc4-305">このメソッドは O (log *n*) 操作です。ここで、 *n*は範囲内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-305">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-306">次の例は、<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバーロードと、<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-306">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="fecc4-307">この例では、DinoCompare という名前の文字列の代替比較子を定義しています。これC++は、`IComparer<string>` (`IComparer(Of String)` Visual Basic では `IComparer<String^>`、Visual) ジェネリックインターフェイスに実装されています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-307">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="fecc4-308">比較子は次のように機能します。最初に、比較対照値が `null`に対してテストされ、null 参照が null 以外の値として処理されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-308">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="fecc4-309">次に、文字列の長さが比較され、長い方の文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-309">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="fecc4-310">3番目の長さが等しい場合は、通常の文字列比較が使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-310">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="fecc4-311">文字列の <xref:System.Collections.Generic.List%601> が作成され、5つの herbivorous 恐竜と3つの carnivorous 恐竜の名前が設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-311">A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</span></span> <span data-ttu-id="fecc4-312">2つのグループのそれぞれで、名前は特定の並べ替え順序ではありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-312">Within each of the two groups, the names are not in any particular sort order.</span></span> <span data-ttu-id="fecc4-313">一覧が表示され、herbivores の範囲が代替比較子を使用して並べ替えられ、一覧が再び表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-313">The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</span></span>  
  
 <span data-ttu-id="fecc4-314">次に、<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバーロードを使用して、"Brachiosaurus" の herbivores の範囲だけを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-314">The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for "Brachiosaurus".</span></span> <span data-ttu-id="fecc4-315">文字列が見つかりません。ビットごとの補数 (とのC#場合は ~ 演算子C++、とビジュアルの場合は-1 Visual Basic) は、<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドによって返された負の数値の `Xor`、新しい文字列を挿入するためのインデックスとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-315">The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-316"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-316"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-317">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-317">-or-</span></span> 
 <span data-ttu-id="fecc4-318"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-318"><paramref name="count" /> is less than 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-319"><paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-319"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in the <see cref="T:System.Collections.Generic.List`1" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fecc4-320"><paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <see cref="T:System.IComparable" /> 型の <paramref name="T" /> インターフェイスの実装を見つけることができません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-320"><paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-321">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-321">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.Generic.List&lt;'T&gt;.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fecc4-322">内部データ構造体がサイズ変更せずに格納できる要素の合計数を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-322">Gets or sets the total number of elements the internal data structure can hold without resizing.</span></span></summary>
        <value><span data-ttu-id="fecc4-323">サイズ変更が必要となるまでに <see cref="T:System.Collections.Generic.List`1" /> に格納できる要素の数。</span><span class="sxs-lookup"><span data-stu-id="fecc4-323">The number of elements that the <see cref="T:System.Collections.Generic.List`1" /> can contain before resizing is required.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-324"><xref:System.Collections.Generic.List%601.Capacity%2A> は、サイズ変更が必要になる前に <xref:System.Collections.Generic.List%601> が格納できる要素の数であり、<xref:System.Collections.Generic.List%601.Count%2A> は実際に <xref:System.Collections.Generic.List%601>内にある要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-324"><xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required, whereas <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-325"><xref:System.Collections.Generic.List%601.Capacity%2A> は、常に <xref:System.Collections.Generic.List%601.Count%2A>以上です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-325"><xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>.</span></span> <span data-ttu-id="fecc4-326">要素の追加中に <xref:System.Collections.Generic.List%601.Count%2A> が <xref:System.Collections.Generic.List%601.Capacity%2A> を超えた場合は、古い要素をコピーして新しい要素を追加する前に、内部配列が自動的に再割り当てされ、容量が増加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-326">If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="fecc4-327">容量がカウントよりも大幅に大きく、<xref:System.Collections.Generic.List%601>によって使用されるメモリを減らす必要がある場合は、<xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドを呼び出すか、<xref:System.Collections.Generic.List%601.Capacity%2A> プロパティを明示的に小さい値に設定することにより、容量を減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-327">If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref:System.Collections.Generic.List%601>,  you can  decrease capacity by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly to a lower value.</span></span> <span data-ttu-id="fecc4-328"><xref:System.Collections.Generic.List%601.Capacity%2A> の値が明示的に設定されている場合、内部配列も指定された容量に合わせて再割り当てされ、すべての要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-328">When the value of <xref:System.Collections.Generic.List%601.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.</span></span>  
  
 <span data-ttu-id="fecc4-329">このプロパティの値の取得は O (1) 操作です。プロパティを設定すると、O (*n*) 操作になります。 *n*は新しい容量です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-329">Retrieving the value of this property is an O(1) operation; setting the property is an O(*n*) operation, where *n* is the new capacity.</span></span>  
  
   
   
## Examples  
 
 <span data-ttu-id="fecc4-330">次の例は、単純なビジネスオブジェクトを含む <xref:System.Collections.Generic.List%601> の容量と数を確認する方法と、<xref:System.Collections.Generic.List%601.TrimExcess%2A> 方法を使用して追加容量を削除する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-330">The following example demonstrates how to check the capacity and count of a <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="fecc4-331">次の例では、リストの有効期間におけるいくつかのポイントの <xref:System.Collections.Generic.List%601.Capacity%2A> プロパティを示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-331">The following example shows the <xref:System.Collections.Generic.List%601.Capacity%2A> property at several points in the life of a list.</span></span> <span data-ttu-id="fecc4-332">値が0の文字列のリストを作成するには、パラメーターなしのコンストラクターを使用します。これを示すために <xref:System.Collections.Generic.List%601.Capacity%2A> プロパティが表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-332">The parameterless constructor is used to create a list of strings with a capacity of 0, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed to demonstrate this.</span></span> <span data-ttu-id="fecc4-333"><xref:System.Collections.Generic.List%601.Add%2A> メソッドを使用して複数の項目を追加すると、項目が一覧表示され、<xref:System.Collections.Generic.List%601.Count%2A> プロパティと共に <xref:System.Collections.Generic.List%601.Capacity%2A> プロパティが再び表示され、必要に応じて容量が増加したことが示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-333">After the <xref:System.Collections.Generic.List%601.Add%2A> method has been used to add several items, the items are listed, and then the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="fecc4-334"><xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドを使用してカウントに一致する容量を減らすと、<xref:System.Collections.Generic.List%601.Capacity%2A> プロパティが再び表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-334">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count.</span></span> <span data-ttu-id="fecc4-335">最後に、<xref:System.Collections.Generic.List%601.Clear%2A> メソッドを使用してリストからすべての項目が削除され、<xref:System.Collections.Generic.List%601.Capacity%2A> と <xref:System.Collections.Generic.List%601.Count%2A> のプロパティが再び表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-335">Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed again.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp-interactive[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-336"><see cref="P:System.Collections.Generic.List`1.Capacity" /> は <see cref="P:System.Collections.Generic.List`1.Count" /> より小さい値に設定します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-336"><see cref="P:System.Collections.Generic.List`1.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.Generic.List`1.Count" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="fecc4-337">システムで使用可能なメモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-337">There is not enough memory available on the system.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="list.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fecc4-338"><see cref="T:System.Collections.Generic.List`1" /> からすべての要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-338">Removes all elements from the <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-339"><xref:System.Collections.Generic.List%601.Count%2A> が0に設定され、コレクションの要素から他のオブジェクトへの参照も解放されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-339"><xref:System.Collections.Generic.List%601.Count%2A> is set to 0, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="fecc4-340"><xref:System.Collections.Generic.List%601.Capacity%2A> は変更されません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-340"><xref:System.Collections.Generic.List%601.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="fecc4-341"><xref:System.Collections.Generic.List%601>の容量をリセットするには、<xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドを呼び出すか、<xref:System.Collections.Generic.List%601.Capacity%2A> プロパティを直接設定します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-341">To reset the capacity of the <xref:System.Collections.Generic.List%601>, call the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or set the <xref:System.Collections.Generic.List%601.Capacity%2A> property directly.</span></span> <span data-ttu-id="fecc4-342">容量を減らしてメモリを再割り当てし、<xref:System.Collections.Generic.List%601>内のすべての要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-342">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span> <span data-ttu-id="fecc4-343">空の <xref:System.Collections.Generic.List%601> をトリミングすると、<xref:System.Collections.Generic.List%601> の容量が既定の容量に設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-343">Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="fecc4-344">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-344">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  

 <span data-ttu-id="fecc4-345">次の例は、<xref:System.Collections.Generic.List%601.Clear%2A> メソッドと、<xref:System.Collections.Generic.List%601> ジェネリッククラスのその他のさまざまなプロパティとメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-345">The following example demonstrates the <xref:System.Collections.Generic.List%601.Clear%2A> method and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="fecc4-346"><xref:System.Collections.Generic.List%601.Clear%2A> メソッドはプログラムの最後に使用され、リストからすべての項目が削除され、<xref:System.Collections.Generic.List%601.Capacity%2A> と <xref:System.Collections.Generic.List%601.Count%2A> のプロパティが表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-346">The <xref:System.Collections.Generic.List%601.Clear%2A> method is used at the end of the program, to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are then displayed.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp-interactive[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.TrimExcess" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T item);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="list.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-347"><see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-347">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-348">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-348">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="fecc4-349">ある要素が <see cref="T:System.Collections.Generic.List`1" /> 内に存在するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-349">Determines whether an element is in the <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <returns><span data-ttu-id="fecc4-350"><see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-350"><see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.List`1" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-351">このメソッドは、既定の等値比較子を使用して等しいかどうかを判断します。これは、`T` (リスト内の値の型) の <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> メソッドのオブジェクトの実装によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-351">This method determines equality by using the default equality comparer, as defined by the object's implementation of the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method for `T` (the type of values in the list).</span></span>  
  
 <span data-ttu-id="fecc4-352">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-352">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-353">次の例は、<xref:System.IEquatable%601.Equals%2A>を実装する単純なビジネスオブジェクトを含む <xref:System.Collections.Generic.List%601> の <xref:System.Collections.Generic.List%601.Contains%2A> および <xref:System.Collections.Generic.List%601.Exists%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-353">The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A> methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="fecc4-354">次の例には、`Cube`型の複合オブジェクトの一覧が含まれています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-354">The following example contains a list of complex objects of type `Cube`.</span></span> <span data-ttu-id="fecc4-355">`Cube` クラスは、2つのキューブが等しいと見なされるように、<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-355">The `Cube` class implements the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method so that two cubes are considered equal if their dimensions are the same.</span></span> <span data-ttu-id="fecc4-356">この例では、<xref:System.Collections.Generic.List%601.Contains%2A> メソッドは、指定されたディメンションを持つキューブが既にコレクション内にあるため、`true`を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-356">In this example, the <xref:System.Collections.Generic.List%601.Contains%2A> method returns `true`, because a cube that has the specified dimensions is already in the collection.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.contains/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.contains/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-357">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-357">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ConvertAll&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;TOutput&gt; ConvertAll&lt;TOutput&gt; (Converter&lt;T,TOutput&gt; converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!!TOutput&gt; ConvertAll&lt;TOutput&gt;(class System.Converter`2&lt;!T, !!TOutput&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertAll(Of TOutput) (converter As Converter(Of T, TOutput)) As List(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA; System::Collections::Generic::List&lt;TOutput&gt; ^ ConvertAll(Converter&lt;T, TOutput&gt; ^ converter);" />
      <MemberSignature Language="F#" Value="member this.ConvertAll : Converter&lt;'T, 'Output&gt; -&gt; System.Collections.Generic.List&lt;'Output&gt;" Usage="list.ConvertAll converter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="converter" Type="System.Converter&lt;T,TOutput&gt;" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput"><span data-ttu-id="fecc4-358">変換後の配列要素の型。</span><span class="sxs-lookup"><span data-stu-id="fecc4-358">The type of the elements of the target array.</span></span></typeparam>
        <param name="converter"><span data-ttu-id="fecc4-359">各要素の型を変換するための <see cref="T:System.Converter`2" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-359">A <see cref="T:System.Converter`2" /> delegate that converts each element from one type to another type.</span></span></param>
        <summary><span data-ttu-id="fecc4-360">現在の <see cref="T:System.Collections.Generic.List`1" /> の要素を別の型に変換し、変換された要素が格納されたリストを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-360">Converts the elements in the current <see cref="T:System.Collections.Generic.List`1" /> to another type, and returns a list containing the converted elements.</span></span></summary>
        <returns><span data-ttu-id="fecc4-361">現在の <see cref="T:System.Collections.Generic.List`1" /> の要素の型を変換した後の <see cref="T:System.Collections.Generic.List`1" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-361">A <see cref="T:System.Collections.Generic.List`1" /> of the target type containing the converted elements from the current <see cref="T:System.Collections.Generic.List`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-362"><xref:System.Converter%602> は、オブジェクトを対象の型に変換するメソッドへのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-362">The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.</span></span>  <span data-ttu-id="fecc4-363">現在の <xref:System.Collections.Generic.List%601> の要素は、<xref:System.Converter%602> デリゲートに個別に渡され、変換された要素は新しい <xref:System.Collections.Generic.List%601>に保存されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-363">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Converter%602> delegate, and the converted elements are saved in the new <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-364">現在の <xref:System.Collections.Generic.List%601> は変更されません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-364">The current <xref:System.Collections.Generic.List%601> remains unchanged.</span></span>  
  
 <span data-ttu-id="fecc4-365">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-365">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-366">次の例では、<xref:System.Drawing.PointF> 構造体を <xref:System.Drawing.Point> 構造体に変換する `PointFToPoint` という名前のメソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-366">The following example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure.</span></span> <span data-ttu-id="fecc4-367">次に、<xref:System.Drawing.PointF> 構造体の <xref:System.Collections.Generic.List%601> を作成し、Visual Basic メソッドを表す `Converter\<PointF, Point>` デリゲート (`PointFToPoint` で`Converter(Of PointF, Point)`) を作成し、そのデリゲートを <xref:System.Collections.Generic.List%601.ConvertAll%2A> メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-367">The example then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Drawing.PointF> structures, creates a `Converter\<PointF, Point>` delegate (`Converter(Of PointF, Point)` in Visual Basic) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Collections.Generic.List%601.ConvertAll%2A> method.</span></span> <span data-ttu-id="fecc4-368"><xref:System.Collections.Generic.List%601.ConvertAll%2A> メソッドは、入力リストの各要素を `PointFToPoint` メソッドに渡し、変換された要素を <xref:System.Drawing.Point> 構造体の新しいリストに格納します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-368">The <xref:System.Collections.Generic.List%601.ConvertAll%2A> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="fecc4-369">両方のリストが表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-369">Both lists are displayed.</span></span>  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-370"><paramref name="converter" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-370"><paramref name="converter" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Converter`2" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fecc4-371"><see cref="T:System.Collections.Generic.List`1" /> またはその一部を配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-371">Copies the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it to an array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] -&gt; unit" Usage="list.CopyTo array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="fecc4-372"><see cref="T:System.Array" /> の要素のコピー先となる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-372">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-373"><see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-373">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <summary><span data-ttu-id="fecc4-374"><see cref="T:System.Collections.Generic.List`1" /> 全体を互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-374">Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the beginning of the target array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-375">このメソッドは <xref:System.Array.Copy%2A?displayProperty=nameWithType> を使用して要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-375">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="fecc4-376">要素は、列挙子が <xref:System.Collections.Generic.List%601>を反復処理するのと同じ順序で <xref:System.Array> にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-376">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-377">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-377">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-378">次の例は、<xref:System.Collections.Generic.List%601.CopyTo%2A> メソッドの3つのオーバーロードすべてを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-378">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="fecc4-379">文字列の <xref:System.Collections.Generic.List%601> が作成され、5つの文字列が設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-379">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="fecc4-380">空の文字列配列15個の要素が作成され、<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> メソッドのオーバーロードを使用して、配列の最初の要素を開始位置として、リストのすべての要素が配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-380">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="fecc4-381"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> メソッドのオーバーロードを使用して、リストのすべての要素を配列インデックス6から始まる配列にコピーします (インデックス5は空のまま)。</span><span class="sxs-lookup"><span data-stu-id="fecc4-381">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="fecc4-382">最後に、<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバーロードを使用して、インデックス2から始まる3つの要素をリストから配列インデックス12で始まる配列にコピーします (インデックス11を空のままにします)。</span><span class="sxs-lookup"><span data-stu-id="fecc4-382">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="fecc4-383">配列の内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-383">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-384"><paramref name="array" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-384"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-385">コピー元の <see cref="T:System.Collections.Generic.List`1" /> の要素数が、コピー先 <paramref name="array" /> に含めることができる要素数を超えています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-385">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the number of elements that the destination <paramref name="array" /> can contain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="list.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="fecc4-386"><see cref="T:System.Array" /> の要素のコピー先となる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-386">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-387"><see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-387">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="fecc4-388">コピーを開始する <paramref name="array" /> の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-388">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="fecc4-389"><see cref="T:System.Collections.Generic.List`1" /> 全体を、互換性のある 1 次元配列の、指定したインデックスから始まる位置にコピーします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-389">Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-390">このメソッドは <xref:System.Array.Copy%2A?displayProperty=nameWithType> を使用して要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-390">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="fecc4-391">要素は、列挙子が <xref:System.Collections.Generic.List%601>を反復処理するのと同じ順序で <xref:System.Array> にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-391">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-392">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-392">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-393">次の例は、<xref:System.Collections.Generic.List%601.CopyTo%2A> メソッドの3つのオーバーロードすべてを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-393">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="fecc4-394">文字列の <xref:System.Collections.Generic.List%601> が作成され、5つの文字列が設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-394">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="fecc4-395">空の文字列配列15個の要素が作成され、<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> メソッドのオーバーロードを使用して、配列の最初の要素を開始位置として、リストのすべての要素が配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-395">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="fecc4-396"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> メソッドのオーバーロードを使用して、リストのすべての要素を配列インデックス6から始まる配列にコピーします (インデックス5は空のまま)。</span><span class="sxs-lookup"><span data-stu-id="fecc4-396">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="fecc4-397">最後に、<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバーロードを使用して、インデックス2から始まる3つの要素をリストから配列インデックス12で始まる配列にコピーします (インデックス11を空のままにします)。</span><span class="sxs-lookup"><span data-stu-id="fecc4-397">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="fecc4-398">配列の内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-398">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-399"><paramref name="array" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-399"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-400"><paramref name="arrayIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-400"><paramref name="arrayIndex" /> is less than 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-401">コピー元の <see cref="T:System.Collections.Generic.List`1" /> の要素数が、コピー先 <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの使用可能領域を超えています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-401">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int index, T[] array, int arrayIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 index, !T[] array, int32 arrayIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (index As Integer, array As T(), arrayIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int index, cli::array &lt;T&gt; ^ array, int arrayIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * 'T[] * int * int -&gt; unit" Usage="list.CopyTo (index, array, arrayIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fecc4-402">コピーを開始するコピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、0 から始まるインデックス番号。</span><span class="sxs-lookup"><span data-stu-id="fecc4-402">The zero-based index in the source <see cref="T:System.Collections.Generic.List`1" /> at which copying begins.</span></span></param>
        <param name="array"><span data-ttu-id="fecc4-403"><see cref="T:System.Array" /> の要素のコピー先となる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-403">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-404"><see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-404">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="fecc4-405">コピーを開始する <paramref name="array" /> の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-405">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <param name="count"><span data-ttu-id="fecc4-406">コピーする要素の数。</span><span class="sxs-lookup"><span data-stu-id="fecc4-406">The number of elements to copy.</span></span></param>
        <summary><span data-ttu-id="fecc4-407"><see cref="T:System.Collections.Generic.List`1" /> のうちある範囲の要素を、互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-407">Copies a range of elements from the <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-408">このメソッドは <xref:System.Array.Copy%2A?displayProperty=nameWithType> を使用して要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-408">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="fecc4-409">要素は、列挙子が <xref:System.Collections.Generic.List%601>を反復処理するのと同じ順序で <xref:System.Array> にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-409">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-410">このメソッドは O (*n*) 操作です。ここで、 *n*は `count`です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-410">This method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-411">次の例は、<xref:System.Collections.Generic.List%601.CopyTo%2A> メソッドの3つのオーバーロードすべてを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-411">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="fecc4-412">文字列の <xref:System.Collections.Generic.List%601> が作成され、5つの文字列が設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-412">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="fecc4-413">空の文字列配列15個の要素が作成され、<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> メソッドのオーバーロードを使用して、配列の最初の要素を開始位置として、リストのすべての要素が配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-413">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="fecc4-414"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> メソッドのオーバーロードを使用して、リストのすべての要素を配列インデックス6から始まる配列にコピーします (インデックス5は空のまま)。</span><span class="sxs-lookup"><span data-stu-id="fecc4-414">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="fecc4-415">最後に、<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバーロードを使用して、インデックス2から始まる3つの要素をリストから配列インデックス12で始まる配列にコピーします (インデックス11を空のままにします)。</span><span class="sxs-lookup"><span data-stu-id="fecc4-415">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="fecc4-416">配列の内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-416">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-417"><paramref name="array" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-417"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-418"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-418"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-419">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-419">-or-</span></span> 
 <span data-ttu-id="fecc4-420"><paramref name="arrayIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-420"><paramref name="arrayIndex" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-421">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-421">-or-</span></span> 
 <span data-ttu-id="fecc4-422"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-422"><paramref name="count" /> is less than 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-423"><paramref name="index" /> がコピー元の <see cref="P:System.Collections.Generic.List`1.Count" /> の <see cref="T:System.Collections.Generic.List`1" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-423"><paramref name="index" /> is equal to or greater than the <see cref="P:System.Collections.Generic.List`1.Count" /> of the source <see cref="T:System.Collections.Generic.List`1" />.</span></span>  
  
<span data-ttu-id="fecc4-424">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-424">-or-</span></span> 
<span data-ttu-id="fecc4-425">コピー元の <paramref name="index" /> の <see cref="T:System.Collections.Generic.List`1" /> から最後までの要素数が、コピー先の <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの使用可能な領域を超えています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-425">The number of elements from <paramref name="index" /> to the end of the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.List&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fecc4-426"><see cref="T:System.Collections.Generic.List`1" /> に格納されている要素の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-426">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <value><span data-ttu-id="fecc4-427"><see cref="T:System.Collections.Generic.List`1" /> に格納されている要素の数。</span><span class="sxs-lookup"><span data-stu-id="fecc4-427">The number of elements contained in the <see cref="T:System.Collections.Generic.List`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-428"><xref:System.Collections.Generic.List%601.Capacity%2A> は、サイズ変更が必要になる前に <xref:System.Collections.Generic.List%601> が格納できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-428"><xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required.</span></span> <span data-ttu-id="fecc4-429"><xref:System.Collections.Generic.List%601.Count%2A> は、実際に <xref:System.Collections.Generic.List%601>内にある要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-429"><xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-430"><xref:System.Collections.Generic.List%601.Capacity%2A> は、常に <xref:System.Collections.Generic.List%601.Count%2A>以上です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-430"><xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>.</span></span> <span data-ttu-id="fecc4-431">要素の追加中に <xref:System.Collections.Generic.List%601.Count%2A> が <xref:System.Collections.Generic.List%601.Capacity%2A> を超えた場合は、古い要素をコピーして新しい要素を追加する前に、内部配列が自動的に再割り当てされ、容量が増加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-431">If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="fecc4-432">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-432">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  

 <span data-ttu-id="fecc4-433">次の例は、単純なビジネスオブジェクトを含む <xref:System.Collections.Generic.List%601> の容量と数を確認する方法と、<xref:System.Collections.Generic.List%601.TrimExcess%2A> 方法を使用して追加容量を削除する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-433">The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="fecc4-434">次の例では、リストの有効期間中のさまざまなポイントでの <xref:System.Collections.Generic.List%601.Count%2A> プロパティの値を示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-434">The following example shows the value of the <xref:System.Collections.Generic.List%601.Count%2A> property at various points in the life of a list.</span></span> <span data-ttu-id="fecc4-435">リストが作成され、その要素が表示されると、<xref:System.Collections.Generic.List%601.Capacity%2A> と <xref:System.Collections.Generic.List%601.Count%2A> のプロパティが表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-435">After the list has been created and populated and its elements displayed, the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="fecc4-436">これらのプロパティは、<xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドが呼び出された後、およびリストの内容がクリアされた後に再び表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-436">These properties are displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method has been called, and again after the contents of the list are cleared.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp-interactive[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Exists(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Exists (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Exists(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Exists : Predicate&lt;'T&gt; -&gt; bool" Usage="list.Exists match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="fecc4-437">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-437">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to search for.</span></span></param>
        <summary><span data-ttu-id="fecc4-438"><see cref="T:System.Collections.Generic.List`1" /> に、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-438">Determines whether the <see cref="T:System.Collections.Generic.List`1" /> contains elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="fecc4-439">指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、<see langword="true" /> に含まれる場合は、<see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-439"><see langword="true" /> if the <see cref="T:System.Collections.Generic.List`1" /> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-440"><xref:System.Predicate%601> は、渡されたオブジェクトがデリゲートで定義されている条件に一致する場合に `true` を返すメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-440">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="fecc4-441">現在の <xref:System.Collections.Generic.List%601> の要素は、個別に <xref:System.Predicate%601> デリゲートに渡され、一致が見つかったときに処理が停止されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-441">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when a match is found.</span></span>  
  
 <span data-ttu-id="fecc4-442">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-442">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-443">次の例は、<xref:System.IEquatable%601.Equals%2A>を実装する単純なビジネスオブジェクトを含む <xref:System.Collections.Generic.List%601> の <xref:System.Collections.Generic.List%601.Contains%2A> および <xref:System.Collections.Generic.List%601.Exists%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-443">The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A> methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="fecc4-444">次の例は、<xref:System.Collections.Generic.List%601.Exists%2A> メソッドと、<xref:System.Predicate%601> 汎用デリゲートを使用する他のいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-444">The following example demonstrates the <xref:System.Collections.Generic.List%601.Exists%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="fecc4-445">文字列の <xref:System.Collections.Generic.List%601> が作成されます。これには8つの恐竜の名前が含まれ、そのうちの2つ (位置1と 5) の末尾が "saurus" になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-445">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="fecc4-446">また、この例では、文字列パラメーターを受け取り、入力文字列が "saurus" で終わるかどうかを示すブール値を返す、`EndsWithSaurus`という名前の検索述語メソッドを定義しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-446">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="fecc4-447"><xref:System.Collections.Generic.List%601.Find%2A>、<xref:System.Collections.Generic.List%601.FindLast%2A>、および <xref:System.Collections.Generic.List%601.FindAll%2A> メソッドを使用して、検索述語メソッドを使用してリストを検索し、<xref:System.Collections.Generic.List%601.RemoveAll%2A> メソッドを使用して、"saurus" で終わるすべてのエントリを削除します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-447">The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method, and then the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with "saurus".</span></span>  
  
 <span data-ttu-id="fecc4-448">最後に、<xref:System.Collections.Generic.List%601.Exists%2A> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-448">Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method is called.</span></span> <span data-ttu-id="fecc4-449">最初からリストを走査し、各要素を順番に `EndsWithSaurus` メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-449">It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="fecc4-450">検索は停止し、メソッドは、`EndsWithSaurus` メソッドが任意の要素に対して `true` を返す場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-450">The search stops and the method returns `true` if the `EndsWithSaurus` method returns `true` for any element.</span></span> <span data-ttu-id="fecc4-451"><xref:System.Collections.Generic.List%601.Exists%2A> メソッドは、このようなすべての要素が削除されているため、`false` を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-451">The <xref:System.Collections.Generic.List%601.Exists%2A> method returns `false` because all such elements have been removed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fecc4-452">およびC# Visual Basic では、`Predicate<string>` デリゲート (Visual Basic で`Predicate(Of String)`) を明示的に作成する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-452">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="fecc4-453">これらの言語は、コンテキストから正しいデリゲートを推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-453">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-454"><paramref name="match" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-454"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public T Find (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Find(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Find(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Find : Predicate&lt;'T&gt; -&gt; 'T" Usage="list.Find match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="fecc4-455">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-455">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="fecc4-456">指定された述語によって定義された条件と一致する要素を検索し、<see cref="T:System.Collections.Generic.List`1" /> 全体の中で最もインデックス番号の小さい要素を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-456">Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <returns><span data-ttu-id="fecc4-457">見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</span><span class="sxs-lookup"><span data-stu-id="fecc4-457">The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-458"><xref:System.Predicate%601> は、渡されたオブジェクトがデリゲートで定義されている条件に一致する場合に `true` を返すメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-458">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="fecc4-459">現在の <xref:System.Collections.Generic.List%601> の要素は、<xref:System.Predicate%601> デリゲートに個別に渡されます。 <xref:System.Collections.Generic.List%601>では、最初の要素から最後の要素まで順に移動します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-459">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving forward in the <xref:System.Collections.Generic.List%601>, starting with the first element and ending with the last element.</span></span>  <span data-ttu-id="fecc4-460">一致が見つかった場合、処理は停止されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-460">Processing is stopped when a match is found.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="fecc4-461">値型を含むリストを検索する場合は、型の既定値が検索述語を満たしていないことを確認してください。</span><span class="sxs-lookup"><span data-stu-id="fecc4-461">When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</span></span> <span data-ttu-id="fecc4-462">それ以外の場合は、一致が検出されなかったことを示す既定値と、その型の既定値を持つリスト要素を区別する方法はありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-462">Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</span></span> <span data-ttu-id="fecc4-463">既定値が検索述語を満たす場合は、代わりに <xref:System.Collections.Generic.List%601.FindIndex%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-463">If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindIndex%2A> method instead.</span></span>  
  
 <span data-ttu-id="fecc4-464">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-464">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-465">次の例は、単純な複合オブジェクトを含む <xref:System.Collections.Generic.List%601> の <xref:System.Collections.Generic.List%601.Find%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-465">The following example demonstrates the <xref:System.Collections.Generic.List%601.Find%2A> method on a <xref:System.Collections.Generic.List%601> that contains a simple complex object.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="fecc4-466">次の例は、<xref:System.Collections.Generic.List%601> クラスの find メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-466">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="fecc4-467"><xref:System.Collections.Generic.List%601> クラスの例には、[サンプル XML ファイル (Books (LINQ to XML))](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)のデータを使用して、クラス `Book`の `book` オブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-467">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="fecc4-468">この例の `FillList` メソッドでは、 [LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)を使用して、XML から `book` オブジェクトのプロパティ値を解析します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-468">The `FillList` method in the example uses [LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="fecc4-469">次の表では、find メソッドに用意されている例について説明します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-469">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="fecc4-470">メソッド</span><span class="sxs-lookup"><span data-stu-id="fecc4-470">Method</span></span>|<span data-ttu-id="fecc4-471">例</span><span class="sxs-lookup"><span data-stu-id="fecc4-471">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-472">`IDToFind` 述語デリゲートを使用して、ID で書籍を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-472">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="fecc4-473">C#例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-473">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-474">`FindComputer` 述語デリゲートを使用して、`Genre` プロパティが "Computer" であるすべての書籍を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-474">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-475">`PubBefore2001` 述語デリゲートを使用して、2001より前の発行日を持つ、コレクション内の最後のブックを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-475">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="fecc4-476">C#例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-476">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-477">`FindComputer` 述語デリゲートを使用して、最初のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-477">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-478">`FindComputer` 述語デリゲートを使用して、最後のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-478">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-479">`FindComputer` 述語デリゲートを使用して、コレクションの後半にある最初のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-479">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-480">`FindComputer` 述語デリゲートを使用して、コレクションの後半で最後のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-480">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-481"><paramref name="match" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-481"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindAll">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; FindAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; FindAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAll (match As Predicate(Of T)) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ FindAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindAll : Predicate&lt;'T&gt; -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="list.FindAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="fecc4-482">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-482">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to search for.</span></span></param>
        <summary><span data-ttu-id="fecc4-483">指定された述語によって定義された条件と一致するすべての要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-483">Retrieves all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="fecc4-484">指定した述語によって定義される条件に一致する要素が見つかった場合は、そのすべての要素を格納する <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は、空の <see cref="T:System.Collections.Generic.List`1" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-484">A <see cref="T:System.Collections.Generic.List`1" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-485"><xref:System.Predicate%601> は、渡されたオブジェクトがデリゲートで定義されている条件に一致する場合に `true` を返すメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-485">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="fecc4-486">現在の <xref:System.Collections.Generic.List%601> の要素は、<xref:System.Predicate%601> デリゲートに個別に渡され、条件に一致する要素は返された <xref:System.Collections.Generic.List%601>に保存されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-486">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are saved in the returned <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-487">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-487">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-488">次の例は、<xref:System.Collections.Generic.List%601> クラスの find メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-488">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="fecc4-489"><xref:System.Collections.Generic.List%601> クラスの例には、[サンプル XML ファイル (Books (LINQ to XML))](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)のデータを使用して、クラス `Book`の `book` オブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-489">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="fecc4-490">この例の `FillList` メソッドでは、 [LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)を使用して、XML から `book` オブジェクトのプロパティ値を解析します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-490">The `FillList` method in the example uses [LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="fecc4-491">次の表では、find メソッドに用意されている例について説明します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-491">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="fecc4-492">メソッド</span><span class="sxs-lookup"><span data-stu-id="fecc4-492">Method</span></span>|<span data-ttu-id="fecc4-493">例</span><span class="sxs-lookup"><span data-stu-id="fecc4-493">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-494">`IDToFind` 述語デリゲートを使用して、ID で書籍を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-494">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="fecc4-495">C#例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-495">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-496">`FindComputer` 述語デリゲートを使用して、`Genre` プロパティが "Computer" であるすべての書籍を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-496">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-497">`PubBefore2001` 述語デリゲートを使用して、2001より前の発行日を持つ、コレクション内の最後のブックを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-497">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="fecc4-498">C#例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-498">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-499">`FindComputer` 述語デリゲートを使用して、最初のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-499">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-500">`FindComputer` 述語デリゲートを使用して、最後のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-500">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-501">`FindComputer` 述語デリゲートを使用して、コレクションの後半にある最初のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-501">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-502">`FindComputer` 述語デリゲートを使用して、コレクションの後半で最後のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-502">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-503"><paramref name="match" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-503"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fecc4-504"><see cref="T:System.Collections.Generic.List`1" /> またはその一部分から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-504">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the first occurrence within the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span></span> <span data-ttu-id="fecc4-505">このメソッドは、条件に一致する項目が見つからなかった場合に -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-505">This method returns -1 if an item that matches the conditions is not found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="fecc4-506">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-506">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="fecc4-507"><see cref="T:System.Collections.Generic.List`1" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-507">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <returns><span data-ttu-id="fecc4-508"><paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-508">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-509"><xref:System.Collections.Generic.List%601> は、最初の要素から最後の要素まで順に検索されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-509">The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="fecc4-510"><xref:System.Predicate%601> は、渡されたオブジェクトがデリゲートで定義されている条件に一致する場合に `true` を返すメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-510">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="fecc4-511">現在の <xref:System.Collections.Generic.List%601> の要素は、<xref:System.Predicate%601> デリゲートに個別に渡されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-511">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="fecc4-512">デリゲートには、次のシグネチャがあります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-512">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="fecc4-513">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-513">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-514">次の例では、`Name` と `Id`の2つのフィールドを持つ `Employee` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-514">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="fecc4-515">また、`EmployeeSearch` クラスコンストラクターに指定された部分文字列で `Employee.Name` フィールドを開始するかどうかを示す単一のメソッド `StartsWith`を持つ `EmployeeSearch` クラスも定義します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-515">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="fecc4-516">このメソッドのシグネチャに注意してください</span><span class="sxs-lookup"><span data-stu-id="fecc4-516">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="fecc4-517"><xref:System.Collections.Generic.List%601.FindIndex%2A> メソッドに渡すことができるデリゲートのシグネチャに対応します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-517">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="fecc4-518">この例では、`List<Employee>` オブジェクトをインスタンス化し、そのオブジェクトに多数の `Employee` オブジェクトを追加した後、<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> メソッドを2回呼び出して、`Name` フィールドが "J" で始まる最初の `Employee` オブジェクトに対して最初に呼び出され、次に `Employee` フィールドが "Ju" で始まる最初の `Name` オブジェクトに対して2回目に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-518">The example instantiates a `List<Employee>` object, adds a number of `Employee` objects to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice to search the entire collection, the first time for the first `Employee` object whose `Name` field begins with "J", and the second time for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex2.cs#2)]
 [!code-vb[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-519"><paramref name="match" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-519"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="fecc4-520">検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-520">The zero-based starting index of the search.</span></span></param>
        <param name="match"><span data-ttu-id="fecc4-521">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-521">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="fecc4-522"><see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスから最後の要素までの範囲内で、指定した述語にで定義される条件に一致する要素を検索し、最初に見つかった 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-522">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</span></span></summary>
        <returns><span data-ttu-id="fecc4-523"><paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-523">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-524"><xref:System.Collections.Generic.List%601> は、`startIndex` から最後の要素までの順に検索されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-524">The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at the last element.</span></span>  
  
 <span data-ttu-id="fecc4-525"><xref:System.Predicate%601> は、渡されたオブジェクトがデリゲートで定義されている条件に一致する場合に `true` を返すメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-525">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="fecc4-526">現在の <xref:System.Collections.Generic.List%601> の要素は、<xref:System.Predicate%601> デリゲートに個別に渡されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-526">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="fecc4-527">デリゲートには、次のシグネチャがあります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-527">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="fecc4-528">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 演算です。ここで、 *n*は、<xref:System.Collections.Generic.List%601>の `startIndex` から最後までの要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-528">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `startIndex` to the end of the <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-529">次の例では、`Name` と `Id`の2つのフィールドを持つ `Employee` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-529">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="fecc4-530">また、`EmployeeSearch` クラスコンストラクターに指定された部分文字列で `Employee.Name` フィールドを開始するかどうかを示す単一のメソッド `StartsWith`を持つ `EmployeeSearch` クラスも定義します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-530">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="fecc4-531">このメソッドのシグネチャに注意してください</span><span class="sxs-lookup"><span data-stu-id="fecc4-531">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="fecc4-532"><xref:System.Collections.Generic.List%601.FindIndex%2A> メソッドに渡すことができるデリゲートのシグネチャに対応します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-532">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="fecc4-533">この例では、`List<Employee>` オブジェクトをインスタンス化し、そのオブジェクトに多数の `Employee` オブジェクトを追加した後、<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> メソッドを2回呼び出して、5番目のメンバー (つまり、インデックス4のメンバー) からコレクションを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-533">The example instantiates a `List<Employee>` object, adds a number of `Employee` objects to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice to search the collection starting with its fifth member (that is, the member at index 4).</span></span> <span data-ttu-id="fecc4-534">最初に、`Name` フィールドが "J" で始まる最初の `Employee` オブジェクトを検索します。2回目は、`Name` フィールドが "Ju" で始まる最初の `Employee` オブジェクトを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-534">The first time, it searches for the first `Employee` object whose `Name` field begins with "J"; the second time, it searches for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex3.cs#3)]
 [!code-vb[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-535"><paramref name="match" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-535"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-536"><paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-536"><paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="fecc4-537">検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-537">The zero-based starting index of the search.</span></span></param>
        <param name="count"><span data-ttu-id="fecc4-538">検索対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="fecc4-538">The number of elements in the section to search.</span></span></param>
        <param name="match"><span data-ttu-id="fecc4-539">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-539">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="fecc4-540"><see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスから始まり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-540">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="fecc4-541"><paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-541">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-542"><xref:System.Collections.Generic.List%601> は `startIndex` から順に検索され、`startIndex` プラス `count`-1 (`count` が0を超える場合) が終わります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-542">The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="fecc4-543"><xref:System.Predicate%601> は、渡されたオブジェクトがデリゲートで定義されている条件に一致する場合に `true` を返すメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-543">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="fecc4-544">現在の <xref:System.Collections.Generic.List%601> の要素は、<xref:System.Predicate%601> デリゲートに個別に渡されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-544">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="fecc4-545">デリゲートには、次のシグネチャがあります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-545">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="fecc4-546">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は `count`です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-546">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-547">次の例では、`Name` と `Id`の2つのフィールドを持つ `Employee` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-547">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="fecc4-548">また、`EmployeeSearch` クラスコンストラクターに指定された部分文字列で `Employee.Name` フィールドを開始するかどうかを示す単一のメソッド `StartsWith`を持つ `EmployeeSearch` クラスも定義します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-548">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="fecc4-549">このメソッドのシグネチャに注意してください</span><span class="sxs-lookup"><span data-stu-id="fecc4-549">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="fecc4-550"><xref:System.Collections.Generic.List%601.FindIndex%2A> メソッドに渡すことができるデリゲートのシグネチャに対応します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-550">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="fecc4-551">この例では、`List<Employee>` オブジェクトをインスタンス化し、そのオブジェクトに多数の `Employee` オブジェクトを追加した後、<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> メソッドを2回呼び出して、コレクション全体 (つまり、インデックス0からインデックス <xref:System.Collections.Generic.List%601.Count%2A>-1 のメンバー) を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-551">The example instantiates a `List<Employee>` object, adds a number of `Employee` objects to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice to search the entire collection (that is, the members from index 0 to index <xref:System.Collections.Generic.List%601.Count%2A> - 1).</span></span> <span data-ttu-id="fecc4-552">最初に、`Name` フィールドが "J" で始まる最初の `Employee` オブジェクトを検索します。2回目は、`Name` フィールドが "Ju" で始まる最初の `Employee` オブジェクトを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-552">The first time, it searches for the first `Employee` object whose `Name` field begins with "J"; the second time, it searches for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex1.cs#1)]
 [!code-vb[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-553"><paramref name="match" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-553"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-554"><paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-554"><paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span></span>  
  
<span data-ttu-id="fecc4-555">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-555">-or-</span></span> 
 <span data-ttu-id="fecc4-556"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-556"><paramref name="count" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-557">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-557">-or-</span></span> 
 <span data-ttu-id="fecc4-558"><paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-558"><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLast">
      <MemberSignature Language="C#" Value="public T FindLast (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T FindLast(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLast (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T FindLast(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLast : Predicate&lt;'T&gt; -&gt; 'T" Usage="list.FindLast match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="fecc4-559">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-559">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="fecc4-560">指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Collections.Generic.List`1" /> 全体を対象に検索し、最もインデックス番号の大きい要素を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-560">Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <returns><span data-ttu-id="fecc4-561">見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</span><span class="sxs-lookup"><span data-stu-id="fecc4-561">The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-562"><xref:System.Predicate%601> は、渡されたオブジェクトがデリゲートで定義されている条件に一致する場合に `true` を返すメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-562">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="fecc4-563">現在の <xref:System.Collections.Generic.List%601> の要素は、<xref:System.Predicate%601> デリゲートに個別に渡され、<xref:System.Collections.Generic.List%601>の前に移動します。最後の要素から始まり、最初の要素で終わります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-563">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving backward in the <xref:System.Collections.Generic.List%601>, starting with the last element and ending with the first element.</span></span>  <span data-ttu-id="fecc4-564">一致が見つかった場合、処理は停止されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-564">Processing is stopped when a match is found.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="fecc4-565">値型を含むリストを検索する場合は、型の既定値が検索述語を満たしていないことを確認してください。</span><span class="sxs-lookup"><span data-stu-id="fecc4-565">When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</span></span> <span data-ttu-id="fecc4-566">それ以外の場合は、一致が検出されなかったことを示す既定値と、その型の既定値を持つリスト要素を区別する方法はありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-566">Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</span></span> <span data-ttu-id="fecc4-567">既定値が検索述語を満たす場合は、代わりに <xref:System.Collections.Generic.List%601.FindLastIndex%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-567">If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindLastIndex%2A> method instead.</span></span>  
  
 <span data-ttu-id="fecc4-568">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-568">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-569">次の例は、<xref:System.Collections.Generic.List%601> クラスの find メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-569">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="fecc4-570"><xref:System.Collections.Generic.List%601> クラスの例には、[サンプル XML ファイル (Books (LINQ to XML))](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)のデータを使用して、クラス `Book`の `book` オブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-570">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="fecc4-571">この例の `FillList` メソッドでは、 [LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)を使用して、XML から `book` オブジェクトのプロパティ値を解析します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-571">The `FillList` method in the example uses [LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="fecc4-572">次の表では、find メソッドに用意されている例について説明します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-572">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="fecc4-573">メソッド</span><span class="sxs-lookup"><span data-stu-id="fecc4-573">Method</span></span>|<span data-ttu-id="fecc4-574">例</span><span class="sxs-lookup"><span data-stu-id="fecc4-574">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-575">`IDToFind` 述語デリゲートを使用して、ID で書籍を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-575">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="fecc4-576">C#例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-576">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-577">`FindComputer` 述語デリゲートを使用して、`Genre` プロパティが "Computer" であるすべての書籍を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-577">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-578">`PubBefore2001` 述語デリゲートを使用して、2001より前の発行日を持つ、コレクション内の最後のブックを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-578">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="fecc4-579">C#例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-579">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-580">`FindComputer` 述語デリゲートを使用して、最初のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-580">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-581">`FindComputer` 述語デリゲートを使用して、最後のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-581">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-582">`FindComputer` 述語デリゲートを使用して、コレクションの後半にある最初のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-582">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-583">`FindComputer` 述語デリゲートを使用して、コレクションの後半で最後のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-583">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-584"><paramref name="match" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-584"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindLastIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fecc4-585"><see cref="T:System.Collections.Generic.List`1" /> またはその一部分から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-585">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the last occurrence within the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="fecc4-586">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-586">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="fecc4-587"><see cref="T:System.Collections.Generic.List`1" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-587">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <returns><span data-ttu-id="fecc4-588"><paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-588">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-589"><xref:System.Collections.Generic.List%601> は、最後の要素から後方に検索され、最初の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-589">The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="fecc4-590"><xref:System.Predicate%601> は、渡されたオブジェクトがデリゲートで定義されている条件に一致する場合に `true` を返すメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-590">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="fecc4-591">現在の <xref:System.Collections.Generic.List%601> の要素は、<xref:System.Predicate%601> デリゲートに個別に渡されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-591">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="fecc4-592">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-592">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-593">次の例は、<xref:System.Collections.Generic.List%601> クラスの find メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-593">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="fecc4-594"><xref:System.Collections.Generic.List%601> クラスの例には、[サンプル XML ファイル (Books (LINQ to XML))](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)のデータを使用して、クラス `Book`の `book` オブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-594">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="fecc4-595">この例の `FillList` メソッドでは、 [LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)を使用して、XML から `book` オブジェクトのプロパティ値を解析します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-595">The `FillList` method in the example uses [LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="fecc4-596">次の表では、find メソッドに用意されている例について説明します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-596">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="fecc4-597">メソッド</span><span class="sxs-lookup"><span data-stu-id="fecc4-597">Method</span></span>|<span data-ttu-id="fecc4-598">例</span><span class="sxs-lookup"><span data-stu-id="fecc4-598">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-599">`IDToFind` 述語デリゲートを使用して、ID で書籍を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-599">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="fecc4-600">C#例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-600">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-601">`FindComputer` 述語デリゲートを使用して、`Genre` プロパティが "Computer" であるすべての書籍を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-601">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-602">`PubBefore2001` 述語デリゲートを使用して、2001より前の発行日を持つ、コレクション内の最後のブックを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-602">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="fecc4-603">C#例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-603">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-604">`FindComputer` 述語デリゲートを使用して、最初のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-604">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-605">`FindComputer` 述語デリゲートを使用して、最後のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-605">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-606">`FindComputer` 述語デリゲートを使用して、コレクションの後半にある最初のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-606">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-607">`FindComputer` 述語デリゲートを使用して、コレクションの後半で最後のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-607">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-608"><paramref name="match" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-608"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="fecc4-609">後方検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-609">The zero-based starting index of the backward search.</span></span></param>
        <param name="match"><span data-ttu-id="fecc4-610">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-610">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="fecc4-611"><see cref="T:System.Collections.Generic.List`1" /> のうち、先頭の要素から指定したインデックスまでの範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-611">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</span></span></summary>
        <returns><span data-ttu-id="fecc4-612"><paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-612">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-613"><xref:System.Collections.Generic.List%601> は `startIndex` から後方に検索され、最初の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-613">The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at the first element.</span></span>  
  
 <span data-ttu-id="fecc4-614"><xref:System.Predicate%601> は、渡されたオブジェクトがデリゲートで定義されている条件に一致する場合に `true` を返すメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-614">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="fecc4-615">現在の <xref:System.Collections.Generic.List%601> の要素は、<xref:System.Predicate%601> デリゲートに個別に渡されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-615">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="fecc4-616">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 演算です。ここで、 *n*は、`startIndex`する <xref:System.Collections.Generic.List%601> の先頭からの要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-616">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `startIndex`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-617"><paramref name="match" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-617"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-618"><paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-618"><paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="fecc4-619">後方検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-619">The zero-based starting index of the backward search.</span></span></param>
        <param name="count"><span data-ttu-id="fecc4-620">検索対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="fecc4-620">The number of elements in the section to search.</span></span></param>
        <param name="match"><span data-ttu-id="fecc4-621">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-621">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="fecc4-622"><see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスで終わる指定した要素数の範囲内で、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-622">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="fecc4-623"><paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-623">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-624"><xref:System.Collections.Generic.List%601> は、`startIndex` から後方に検索され、`count` が0よりも大きい場合は `startIndex` からマイナス `count` になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-624">The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="fecc4-625"><xref:System.Predicate%601> は、渡されたオブジェクトがデリゲートで定義されている条件に一致する場合に `true` を返すメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-625">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="fecc4-626">現在の <xref:System.Collections.Generic.List%601> の要素は、<xref:System.Predicate%601> デリゲートに個別に渡されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-626">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="fecc4-627">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は `count`です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-627">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-628">次の例は、<xref:System.Collections.Generic.List%601> クラスの find メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-628">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="fecc4-629"><xref:System.Collections.Generic.List%601> クラスの例には、[サンプル XML ファイル (Books (LINQ to XML))](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)のデータを使用して、クラス `Book`の `book` オブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-629">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](https://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="fecc4-630">この例の `FillList` メソッドでは、 [LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)を使用して、XML から `book` オブジェクトのプロパティ値を解析します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-630">The `FillList` method in the example uses [LINQ to XML](https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="fecc4-631">次の表では、find メソッドに用意されている例について説明します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-631">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="fecc4-632">メソッド</span><span class="sxs-lookup"><span data-stu-id="fecc4-632">Method</span></span>|<span data-ttu-id="fecc4-633">例</span><span class="sxs-lookup"><span data-stu-id="fecc4-633">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-634">`IDToFind` 述語デリゲートを使用して、ID で書籍を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-634">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="fecc4-635">C#例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-635">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-636">`FindComputer` 述語デリゲートを使用して、`Genre` プロパティが "Computer" であるすべての書籍を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-636">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-637">`PubBefore2001` 述語デリゲートを使用して、2001より前の発行日を持つ、コレクション内の最後のブックを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-637">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="fecc4-638">C#例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-638">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-639">`FindComputer` 述語デリゲートを使用して、最初のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-639">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-640">`FindComputer` 述語デリゲートを使用して、最後のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-640">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-641">`FindComputer` 述語デリゲートを使用して、コレクションの後半にある最初のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-641">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="fecc4-642">`FindComputer` 述語デリゲートを使用して、コレクションの後半で最後のコンピューターブックのインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-642">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-643"><paramref name="match" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-643"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-644"><paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-644"><paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span></span>  
  
<span data-ttu-id="fecc4-645">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-645">-or-</span></span> 
 <span data-ttu-id="fecc4-646"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-646"><paramref name="count" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-647">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-647">-or-</span></span> 
 <span data-ttu-id="fecc4-648"><paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-648"><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="public void ForEach (Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach(class System.Action`1&lt;!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ForEach (action As Action(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ForEach(Action&lt;T&gt; ^ action);" />
      <MemberSignature Language="F#" Value="member this.ForEach : Action&lt;'T&gt; -&gt; unit" Usage="list.ForEach action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="fecc4-649"><see cref="T:System.Action`1" /> の各要素に対して実行する <see cref="T:System.Collections.Generic.List`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-649">The <see cref="T:System.Action`1" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.List`1" />.</span></span></param>
        <summary><span data-ttu-id="fecc4-650"><see cref="T:System.Collections.Generic.List`1" /> の各要素に対して、指定された処理を実行します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-650">Performs the specified action on each element of the <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-651"><xref:System.Action%601> は、渡されたオブジェクトに対してアクションを実行するメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-651">The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.</span></span>  <span data-ttu-id="fecc4-652">現在の <xref:System.Collections.Generic.List%601> の要素は、<xref:System.Action%601> デリゲートに個別に渡されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-652">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Action%601> delegate.</span></span>  
  
 <span data-ttu-id="fecc4-653">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-653">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="fecc4-654"><xref:System.Action%601> デリゲートの本体で基になるコレクションを変更することはサポートされていないため、未定義の動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-654">Modifying the underlying collection in the body of the <xref:System.Action%601> delegate is not supported and causes undefined behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-655">次の例では、<xref:System.Action%601> デリゲートを使用して、<xref:System.Collections.Generic.List%601> オブジェクトの内容を出力する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-655">The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="fecc4-656">この例では、`Print` メソッドを使用して、リストの内容をコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-656">In this example the `Print` method is used to display the contents of the list to the console.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fecc4-657">`Print` メソッドを使用して内容を表示することにC#加え、この例では、[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)を使用して結果をコンソールに表示する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-657">In addition to displaying the contents using the `Print` method, the C# example demonstrates the use of [anonymous methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md) to display the results to the console.</span></span>  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-658"><paramref name="action" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-658"><paramref name="action" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fecc4-659">コレクションの要素が変更されています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-659">An element in the collection has been modified.</span></span></exception>
        <altmember cref="T:System.Action`1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.List`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As List(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.List&lt;'T&gt;.Enumerator" Usage="list.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fecc4-660"><see cref="T:System.Collections.Generic.List`1" /> を反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-660">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <returns><span data-ttu-id="fecc4-661"><see cref="T:System.Collections.Generic.List`1.Enumerator" /> の <see cref="T:System.Collections.Generic.List`1" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-661">A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.List`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-662">C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-662">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="fecc4-663">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-663">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="fecc4-664">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-664">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="fecc4-665">最初、列挙子はコレクションの先頭の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-665">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="fecc4-666">この位置では、<xref:System.Collections.Generic.List%601.Enumerator.Current%2A> プロパティは定義されていません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-666">At this position, the <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="fecc4-667">そのため、<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.List%601.Enumerator.Current%2A> メソッドを呼び出し、列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-667">Therefore, you must call the <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="fecc4-668"><xref:System.Collections.Generic.List%601.Enumerator.Current%2A> プロパティは、<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> が呼び出されるまで、同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-668">The <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="fecc4-669"><xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> は、<xref:System.Collections.Generic.List%601.Enumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-669"><xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="fecc4-670"><xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-670">If <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="fecc4-671">列挙子がこの位置にある場合、後続の <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-671">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="fecc4-672"><xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.Generic.List%601.Enumerator.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-672">If the last call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="fecc4-673"><xref:System.Collections.Generic.List%601.Enumerator.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-673">You cannot set <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="fecc4-674">列挙子は、コレクションが変更されない限り有効です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-674">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="fecc4-675">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに無効になり、次に <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> または <xref:System.Collections.Generic.List%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-675">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.List%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="fecc4-676">列挙子はコレクションに排他アクセスできないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-676">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="fecc4-677">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-677">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="fecc4-678">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-678">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="fecc4-679"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-679">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="fecc4-680">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-680">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.List`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; GetRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; GetRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (index As Integer, count As Integer) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ GetRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetRange : int * int -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="list.GetRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fecc4-681">範囲が開始する位置の、0 から始まる <see cref="T:System.Collections.Generic.List`1" /> のインデックス番号。</span><span class="sxs-lookup"><span data-stu-id="fecc4-681">The zero-based <see cref="T:System.Collections.Generic.List`1" /> index at which the range starts.</span></span></param>
        <param name="count"><span data-ttu-id="fecc4-682">範囲内の要素の数。</span><span class="sxs-lookup"><span data-stu-id="fecc4-682">The number of elements in the range.</span></span></param>
        <summary><span data-ttu-id="fecc4-683">コピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、ある範囲の要素の簡易コピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-683">Creates a shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <returns><span data-ttu-id="fecc4-684">コピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、ある範囲の要素の簡易コピー。</span><span class="sxs-lookup"><span data-stu-id="fecc4-684">A shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-685">参照型のコレクションの簡易コピー、またはそのコレクションのサブセットには、コレクションの要素への参照のみが含まれます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-685">A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection.</span></span> <span data-ttu-id="fecc4-686">オブジェクト自体はコピーされません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-686">The objects themselves are not copied.</span></span> <span data-ttu-id="fecc4-687">新しいリスト内の参照は、元のリスト内の参照と同じオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-687">The references in the new list point to the same objects as the references in the original list.</span></span>  
  
 <span data-ttu-id="fecc4-688">値型のコレクションの簡易コピー、またはそのコレクションのサブセットには、コレクションの要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-688">A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection.</span></span> <span data-ttu-id="fecc4-689">ただし、コレクションの要素に他のオブジェクトへの参照が含まれている場合、それらのオブジェクトはコピーされません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-689">However, if the elements of the collection contain references to other objects, those objects are not copied.</span></span> <span data-ttu-id="fecc4-690">新しいコレクションの要素内の参照は、元のコレクションの要素内の参照と同じオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-690">The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.</span></span>  
  
 <span data-ttu-id="fecc4-691">これに対し、コレクションの詳細コピーでは、要素と、要素によって直接的または間接的に参照されるすべての要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-691">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="fecc4-692">このメソッドは O (*n*) 操作です。ここで、 *n*は `count`です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-692">This method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-693">次の例は、範囲に作用する <xref:System.Collections.Generic.List%601> クラスの <xref:System.Collections.Generic.List%601.GetRange%2A> メソッドとその他のメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-693">The following example demonstrates the <xref:System.Collections.Generic.List%601.GetRange%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="fecc4-694">この例の最後では、<xref:System.Collections.Generic.List%601.GetRange%2A> メソッドを使用して、インデックス位置2から始まる3つの項目をリストから取得します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-694">At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2.</span></span> <span data-ttu-id="fecc4-695">結果の <xref:System.Collections.Generic.List%601>に対して <xref:System.Collections.Generic.List%601.ToArray%2A> メソッドが呼び出され、3つの要素の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-695">The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements.</span></span> <span data-ttu-id="fecc4-696">配列の要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-696">The elements of the array are displayed.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-697"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-697"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-698">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-698">-or-</span></span> 
 <span data-ttu-id="fecc4-699"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-699"><paramref name="count" /> is less than 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-700"><paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において要素の有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-700"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fecc4-701"><see cref="T:System.Collections.Generic.List`1" /> 全体またはその一部において、最初に値が出現した位置のインデックス番号 (0 から始まる) を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-701">Returns the zero-based index of the first occurrence of a value in the <see cref="T:System.Collections.Generic.List`1" /> or in a portion of it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="list.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-702"><see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-702">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-703">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-703">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="fecc4-704"><see cref="T:System.Collections.Generic.List`1" /> 全体から指定したオブジェクトを検索し、最初に見つかったオブジェクトのインデックス (0 から始まる) を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-704">Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <returns><span data-ttu-id="fecc4-705"><paramref name="item" /> 全体を対象に <see cref="T:System.Collections.Generic.List`1" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-705">The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-706"><xref:System.Collections.Generic.List%601> は、最初の要素から最後の要素まで順に検索されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-706">The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="fecc4-707">このメソッドは、リスト内の値の型 `T`に <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 既定の等値比較子を使用して、等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-707">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="fecc4-708">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-708">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-709">次の例は、<xref:System.Collections.Generic.List%601.IndexOf%2A> メソッドの3つのオーバーロードすべてを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-709">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="fecc4-710">インデックス位置0とインデックス位置5で、1つのエントリが2回表示される文字列の <xref:System.Collections.Generic.List%601> が作成されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-710">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="fecc4-711"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29> メソッドオーバーロードは、先頭からリストを検索し、最初に見つかった文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-711">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="fecc4-712"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> メソッドオーバーロードを使用して、インデックス位置3で始まるリストを検索し、リストの末尾まで進み、2番目に出現する文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-712">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="fecc4-713">最後に、<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバーロードを使用して2つのエントリの範囲を検索します。インデックスの位置2から開始します。検索文字列のインスタンスがこの範囲内に存在しないため、-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-713">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns -1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-714">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-714">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int -&gt; int" Usage="list.IndexOf (item, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-715"><see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-715">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-716">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-716">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="fecc4-717">検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-717">The zero-based starting index of the search.</span></span> <span data-ttu-id="fecc4-718">空のリストでは 0 (ゼロ) は有効です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-718">0 (zero) is valid in an empty list.</span></span></param>
        <summary><span data-ttu-id="fecc4-719"><see cref="T:System.Collections.Generic.List`1" /> のうち指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-719">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</span></span></summary>
        <returns><span data-ttu-id="fecc4-720"><paramref name="item" /> から最後の要素までの <see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内で <paramref name="index" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-720">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from <paramref name="index" /> to the last element, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-721"><xref:System.Collections.Generic.List%601> は、`index` から最後の要素までの順に検索されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-721">The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at the last element.</span></span>  
  
 <span data-ttu-id="fecc4-722">このメソッドは、リスト内の値の型 `T`に <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 既定の等値比較子を使用して、等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-722">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="fecc4-723">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 演算です。ここで、 *n*は、<xref:System.Collections.Generic.List%601>の `index` から最後までの要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-723">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `index` to the end of the <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-724">次の例は、<xref:System.Collections.Generic.List%601.IndexOf%2A> メソッドの3つのオーバーロードすべてを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-724">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="fecc4-725">インデックス位置0とインデックス位置5で、1つのエントリが2回表示される文字列の <xref:System.Collections.Generic.List%601> が作成されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-725">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="fecc4-726"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29> メソッドオーバーロードは、先頭からリストを検索し、最初に見つかった文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-726">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="fecc4-727"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> メソッドオーバーロードを使用して、インデックス位置3で始まるリストを検索し、リストの末尾まで進み、2番目に出現する文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-727">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="fecc4-728">最後に、<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバーロードを使用して2つのエントリの範囲を検索します。インデックスの位置2から開始します。検索文字列のインスタンスがこの範囲内に存在しないため、-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-728">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns -1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-729"><paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-729"><paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-730">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-730">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int * int -&gt; int" Usage="list.IndexOf (item, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-731"><see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-731">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-732">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-732">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="fecc4-733">検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-733">The zero-based starting index of the search.</span></span> <span data-ttu-id="fecc4-734">空のリストでは 0 (ゼロ) は有効です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-734">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="fecc4-735">検索対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="fecc4-735">The number of elements in the section to search.</span></span></param>
        <summary><span data-ttu-id="fecc4-736">指定したインデックスから始まり、指定した数の要素が含まれる <see cref="T:System.Collections.Generic.List`1" /> の要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-736">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="fecc4-737"><paramref name="item" /> から始まって <see cref="T:System.Collections.Generic.List`1" /> 個の要素を格納する <paramref name="index" /> 内の要素の範囲内で <paramref name="count" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-737">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-738"><xref:System.Collections.Generic.List%601> は `index` から順に検索され、`index` プラス `count`-1 (`count` が0を超える場合) が終わります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-738">The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at `index` plus `count` minus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="fecc4-739">このメソッドは、リスト内の値の型 `T`に <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 既定の等値比較子を使用して、等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-739">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="fecc4-740">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は `count`です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-740">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-741">次の例は、<xref:System.Collections.Generic.List%601.IndexOf%2A> メソッドの3つのオーバーロードすべてを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-741">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="fecc4-742">インデックス位置0とインデックス位置5で、1つのエントリが2回表示される文字列の <xref:System.Collections.Generic.List%601> が作成されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-742">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="fecc4-743"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29> メソッドオーバーロードは、先頭からリストを検索し、最初に見つかった文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-743">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="fecc4-744"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> メソッドオーバーロードを使用して、インデックス位置3で始まるリストを検索し、リストの末尾まで進み、2番目に出現する文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-744">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="fecc4-745">最後に、<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバーロードを使用して2つのエントリの範囲を検索します。インデックスの位置2から開始します。検索文字列のインスタンスがこの範囲内に存在しないため、-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-745">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns -1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-746"><paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-746"><paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span></span>  
  
<span data-ttu-id="fecc4-747">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-747">-or-</span></span> 
 <span data-ttu-id="fecc4-748"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-748"><paramref name="count" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-749">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-749">-or-</span></span> 
 <span data-ttu-id="fecc4-750"><paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-750"><paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-751">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-751">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, T item);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'T -&gt; unit&#xA;override this.Insert : int * 'T -&gt; unit" Usage="list.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fecc4-752"><paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-752">The zero-based index at which <paramref name="item" /> should be inserted.</span></span></param>
        <param name="item"><span data-ttu-id="fecc4-753">挿入するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-753">The object to insert.</span></span> <span data-ttu-id="fecc4-754">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-754">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="fecc4-755"><see cref="T:System.Collections.Generic.List`1" /> 内の指定したインデックスの位置に要素を挿入します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-755">Inserts an element into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-756"><xref:System.Collections.Generic.List%601> は、参照型の有効な値として `null` を受け入れ、重複する要素を許可します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-756"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="fecc4-757"><xref:System.Collections.Generic.List%601.Count%2A> 既に <xref:System.Collections.Generic.List%601.Capacity%2A>に等しい場合は、内部配列が自動的に再割り当てされ、既存の要素が新しい配列にコピーされてから、新しい要素が追加されるまで、<xref:System.Collections.Generic.List%601> の容量が増加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-757">If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="fecc4-758">`index` が <xref:System.Collections.Generic.List%601.Count%2A>に等しい場合、`item` は <xref:System.Collections.Generic.List%601>の最後に追加されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-758">If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, `item` is added to the end of <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-759">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-759">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  

 <span data-ttu-id="fecc4-760">次の例では、<xref:System.Collections.Generic.List%601>に単純なビジネスオブジェクトを追加、削除、および挿入する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-760">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="fecc4-761">次の例では、<xref:System.Collections.Generic.List%601.Insert%2A> メソッドと、<xref:System.Collections.Generic.List%601> ジェネリッククラスのその他のさまざまなプロパティとメソッドについて説明します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-761">The following example demonstrates the <xref:System.Collections.Generic.List%601.Insert%2A> method, along with various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="fecc4-762">リストが作成されると、要素が追加されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-762">After the list is created, elements are added.</span></span> <span data-ttu-id="fecc4-763"><xref:System.Collections.Generic.List%601.Insert%2A> メソッドを使用して、リストの中央に項目を挿入します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-763">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert an item into the middle of the list.</span></span> <span data-ttu-id="fecc4-764">挿入された項目は重複しており、後で <xref:System.Collections.Generic.List%601.Remove%2A> メソッドを使用して削除されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-764">The item inserted is a duplicate, which is later removed using the <xref:System.Collections.Generic.List%601.Remove%2A> method.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp-interactive[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-765"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-765"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-766">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-766">-or-</span></span> 
 <span data-ttu-id="fecc4-767"><paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-767"><paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public void InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertRange (index As Integer, collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="member this.InsertRange : int * seq&lt;'T&gt; -&gt; unit" Usage="list.InsertRange (index, collection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fecc4-768">新しい要素を挿入する位置の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-768">The zero-based index at which the new elements should be inserted.</span></span></param>
        <param name="collection"><span data-ttu-id="fecc4-769"><see cref="T:System.Collections.Generic.List`1" /> に要素を挿入するコレクション。</span><span class="sxs-lookup"><span data-stu-id="fecc4-769">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-770">コレクション自体を <see langword="null" /> にすることはできませんが、型 <see langword="null" /> が参照型の場合、コレクションに格納する要素は <paramref name="T" /> であってもかまいません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-770">The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />, if type <paramref name="T" /> is a reference type.</span></span></param>
        <summary><span data-ttu-id="fecc4-771">コレクションの要素を <see cref="T:System.Collections.Generic.List`1" /> 内の指定したインデックスの位置に挿入します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-771">Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-772"><xref:System.Collections.Generic.List%601> は、参照型の有効な値として `null` を受け入れ、重複する要素を許可します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-772"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="fecc4-773">新しい <xref:System.Collections.Generic.List%601.Count%2A> (現在の <xref:System.Collections.Generic.List%601.Count%2A> とコレクションのサイズの合計) が <xref:System.Collections.Generic.List%601.Capacity%2A>を超える場合、新しい要素を格納するために内部配列が自動的に再割り当てされ、新しい要素が追加される前に既存の要素が新しい配列にコピーされて、<xref:System.Collections.Generic.List%601> の容量が増加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-773">If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</span></span>  
  
 <span data-ttu-id="fecc4-774">`index` が <xref:System.Collections.Generic.List%601.Count%2A>に等しい場合は <xref:System.Collections.Generic.List%601>の末尾に要素が追加されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-774">If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, the elements are added to the end of <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-775">コレクション内の要素の順序は、<xref:System.Collections.Generic.List%601>に保持されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-775">The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-776">このメソッドは O (*n* \* *m*) 演算です。ここで、 *n*は加算する要素の数で、 *m*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-776">This method is an O(*n* \* *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-777">次の例では、範囲に作用する <xref:System.Collections.Generic.List%601> クラスの <xref:System.Collections.Generic.List%601.InsertRange%2A> メソッドとその他のさまざまなメソッドを示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-777">The following example demonstrates <xref:System.Collections.Generic.List%601.InsertRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="fecc4-778">リストが作成され、複数の平和的植物の恐竜の名前が設定された後、<xref:System.Collections.Generic.List%601.InsertRange%2A> メソッドを使用して、3つの ferocious の恐竜の配列をリストに挿入します。この一覧は、インデックス位置3から始まります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-778">After the list has been created and populated with the names of several peaceful plant-eating dinosaurs, the <xref:System.Collections.Generic.List%601.InsertRange%2A> method is used to insert an array of three ferocious meat-eating dinosaurs into the list, beginning at index location 3.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-779"><paramref name="collection" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-779"><paramref name="collection" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-780"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-780"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-781">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-781">-or-</span></span> 
 <span data-ttu-id="fecc4-782"><paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-782"><paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T with get, set" Usage="System.Collections.Generic.List&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fecc4-783">取得または設定する要素の、0 から始まるインデックス番号。</span><span class="sxs-lookup"><span data-stu-id="fecc4-783">The zero-based index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="fecc4-784">指定したインデックスにある要素を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-784">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="fecc4-785">指定したインデックス位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="fecc4-785">The element at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-786"><xref:System.Collections.Generic.List%601> は、参照型の有効な値として `null` を受け入れ、重複する要素を許可します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-786"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="fecc4-787">このプロパティでは、`myCollection[index]` という構文を使用して、コレクション内の特定の要素にアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-787">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 <span data-ttu-id="fecc4-788">このプロパティの値の取得は O (1) 操作です。プロパティの設定は、O (1) 操作でもあります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-788">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-789">このセクションの例では、<xref:System.Collections.Generic.List%601.Item%2A> プロパティ (のC#インデクサー) と、<xref:System.Collections.Generic.List%601> ジェネリッククラスのその他のさまざまなプロパティとメソッドについて説明します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-789">The example in this section demonstrates the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="fecc4-790"><xref:System.Collections.Generic.List%601.Add%2A> メソッドを使用してリストを作成して設定すると、要素が取得され、<xref:System.Collections.Generic.List%601.Item%2A> プロパティを使用して表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-790">After the list has been created and populated using the <xref:System.Collections.Generic.List%601.Add%2A> method, an element is retrieved and displayed using the <xref:System.Collections.Generic.List%601.Item%2A> property.</span></span> <span data-ttu-id="fecc4-791">(<xref:System.Collections.Generic.List%601.Item%2A> プロパティを使用してリスト要素の値を設定する例については、「<xref:System.Collections.Generic.List%601.AsReadOnly%2A>」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="fecc4-791">(For an example that uses the <xref:System.Collections.Generic.List%601.Item%2A> property to set the value of a list element, see <xref:System.Collections.Generic.List%601.AsReadOnly%2A>.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fecc4-792">Visual Basic、 C#、およびC++にはすべて、名前を使用せずに <xref:System.Collections.Generic.List%601.Item%2A> プロパティにアクセスするための構文があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-792">Visual Basic, C#, and C++ all have syntax for accessing the <xref:System.Collections.Generic.List%601.Item%2A> property without using its name.</span></span> <span data-ttu-id="fecc4-793">代わりに、<xref:System.Collections.Generic.List%601> を含む変数が配列であるかのように使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-793">Instead, the variable containing the <xref:System.Collections.Generic.List%601> is used as if it were an array.</span></span>  
  
 <span data-ttu-id="fecc4-794">このC#言語では、<xref:System.Collections.Generic.List%601.Item%2A> プロパティを実装する代わりに、 [`this`](~/docs/csharp/language-reference/keywords/this.md)キーワードを使用してインデクサーを定義します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-794">The C# language uses the [`this`](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.Item%2A> property.</span></span> <span data-ttu-id="fecc4-795">Visual Basic は、<xref:System.Collections.Generic.List%601.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-795">Visual Basic implements <xref:System.Collections.Generic.List%601.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 [!code-csharp[List`1_Class#2](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#2)]
 [!code-vb[List`1_Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#2)]  
[!code-csharp[List`1_Class#3](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#3)]
[!code-vb[List`1_Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-796"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-796"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-797">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-797">-or-</span></span> 
 <span data-ttu-id="fecc4-798"><paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> 以上になっています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-798"><paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fecc4-799"><see cref="T:System.Collections.Generic.List`1" /> 全体またはその一部において、最後に値が出現した位置のインデックス番号 (0 から始まる) を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-799">Returns the zero-based index of the last occurrence of a value in the <see cref="T:System.Collections.Generic.List`1" /> or in a portion of it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T -&gt; int" Usage="list.LastIndexOf item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-800"><see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-800">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-801">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-801">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="fecc4-802"><see cref="T:System.Collections.Generic.List`1" /> 全体から指定したオブジェクトを検索し、最後に見つかったオブジェクトのインデックス (0 から始まる) を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-802">Searches for the specified object and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <returns><span data-ttu-id="fecc4-803"><paramref name="item" /> が見つかった場合は、<see cref="T:System.Collections.Generic.List`1" /> 全体で最後に見つかった位置のインデックス番号 (0 から始まる)。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-803">The zero-based index of the last occurrence of <paramref name="item" /> within the entire the <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-804"><xref:System.Collections.Generic.List%601> は、最後の要素から後方に検索され、最初の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-804">The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="fecc4-805">このメソッドは、リスト内の値の型 `T`に <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 既定の等値比較子を使用して、等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-805">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="fecc4-806">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-806">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-807">次の例は、<xref:System.Collections.Generic.List%601.LastIndexOf%2A> メソッドの3つのオーバーロードすべてを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-807">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="fecc4-808">インデックス位置0とインデックス位置5で、1つのエントリが2回表示される文字列の <xref:System.Collections.Generic.List%601> が作成されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-808">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="fecc4-809"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> メソッドオーバーロードは、末尾からリスト全体を検索し、2番目に出現する文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-809">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="fecc4-810"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> メソッドのオーバーロードを使用して、リストをインデックス位置3で後方に検索し、リストの先頭まで続行します。これにより、リスト内で最初に出現する文字列が検索されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-810">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="fecc4-811">最後に、<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバーロードを使用して4つのエントリの範囲を検索します。このとき、インデックス位置4から後方に拡張します (つまり、場所4、3、2、および1の項目を検索します)。検索文字列のインスタンスがこの範囲内に存在しないため、この検索では-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-811">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns -1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-812">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-812">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int -&gt; int" Usage="list.LastIndexOf (item, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-813"><see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-813">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-814">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-814">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="fecc4-815">後方検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-815">The zero-based starting index of the backward search.</span></span></param>
        <summary><span data-ttu-id="fecc4-816"><see cref="T:System.Collections.Generic.List`1" /> のうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-816">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</span></span></summary>
        <returns><span data-ttu-id="fecc4-817">最初の要素から <paramref name="item" /> までの <see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内で <paramref name="index" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-817">The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to <paramref name="index" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-818"><xref:System.Collections.Generic.List%601> は `index` から後方に検索され、最初の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-818">The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at the first element.</span></span>  
  
 <span data-ttu-id="fecc4-819">このメソッドは、リスト内の値の型 `T`に <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 既定の等値比較子を使用して、等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-819">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="fecc4-820">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 演算です。ここで、 *n*は、`index`する <xref:System.Collections.Generic.List%601> の先頭からの要素の数です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-820">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `index`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-821">次の例は、<xref:System.Collections.Generic.List%601.LastIndexOf%2A> メソッドの3つのオーバーロードすべてを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-821">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="fecc4-822">インデックス位置0とインデックス位置5で、1つのエントリが2回表示される文字列の <xref:System.Collections.Generic.List%601> が作成されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-822">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="fecc4-823"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> メソッドオーバーロードは、末尾からリスト全体を検索し、2番目に出現する文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-823">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="fecc4-824"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> メソッドのオーバーロードを使用して、リストをインデックス位置3で後方に検索し、リストの先頭まで続行します。これにより、リスト内で最初に出現する文字列が検索されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-824">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="fecc4-825">最後に、<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバーロードを使用して4つのエントリの範囲を検索します。このとき、インデックス位置4から後方に拡張します (つまり、場所4、3、2、および1の項目を検索します)。検索文字列のインスタンスがこの範囲内に存在しないため、この検索では-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-825">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns -1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-826"><paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-826"><paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-827">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-827">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int * int -&gt; int" Usage="list.LastIndexOf (item, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-828"><see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-828">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-829">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-829">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="fecc4-830">後方検索の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-830">The zero-based starting index of the backward search.</span></span></param>
        <param name="count"><span data-ttu-id="fecc4-831">検索対象の範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="fecc4-831">The number of elements in the section to search.</span></span></param>
        <summary><span data-ttu-id="fecc4-832"><see cref="T:System.Collections.Generic.List`1" /> のうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-832">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="fecc4-833"><paramref name="item" /> 個の要素を格納し、<see cref="T:System.Collections.Generic.List`1" /> の位置で終了する <paramref name="count" /> 内の要素の範囲内で <paramref name="index" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-833">The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains <paramref name="count" /> number of elements and ends at <paramref name="index" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-834"><xref:System.Collections.Generic.List%601> は、`index` から後方に検索され、`count` が0よりも大きい場合は `index` からマイナス `count` になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-834">The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at `index` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="fecc4-835">このメソッドは、リスト内の値の型 `T`に <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 既定の等値比較子を使用して、等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-835">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="fecc4-836">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は `count`です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-836">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-837">次の例は、<xref:System.Collections.Generic.List%601.LastIndexOf%2A> メソッドの3つのオーバーロードすべてを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-837">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="fecc4-838">インデックス位置0とインデックス位置5で、1つのエントリが2回表示される文字列の <xref:System.Collections.Generic.List%601> が作成されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-838">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="fecc4-839"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> メソッドオーバーロードは、末尾からリスト全体を検索し、2番目に出現する文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-839">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="fecc4-840"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> メソッドのオーバーロードを使用して、リストをインデックス位置3で後方に検索し、リストの先頭まで続行します。これにより、リスト内で最初に出現する文字列が検索されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-840">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="fecc4-841">最後に、<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバーロードを使用して4つのエントリの範囲を検索します。このとき、インデックス位置4から後方に拡張します (つまり、場所4、3、2、および1の項目を検索します)。検索文字列のインスタンスがこの範囲内に存在しないため、この検索では-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-841">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of 4 entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns -1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-842"><paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-842"><paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span></span>  
  
<span data-ttu-id="fecc4-843">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-843">-or-</span></span> 
 <span data-ttu-id="fecc4-844"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-844"><paramref name="count" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-845">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-845">-or-</span></span> 
 <span data-ttu-id="fecc4-846"><paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-846"><paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-847">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-847">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(T item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T -&gt; bool&#xA;override this.Remove : 'T -&gt; bool" Usage="list.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-848"><see cref="T:System.Collections.Generic.List`1" /> から削除するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-848">The object to remove from the <see cref="T:System.Collections.Generic.List`1" />.</span></span> <span data-ttu-id="fecc4-849">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-849">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="fecc4-850">特定のオブジェクトが <see cref="T:System.Collections.Generic.List`1" /> 内にあるときに、最初に出現したものを削除します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-850">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <returns><span data-ttu-id="fecc4-851"><see langword="true" /> が正常に削除された場合は <paramref name="item" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-851"><see langword="true" /> if <paramref name="item" /> is successfully removed; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="fecc4-852">このメソッドは、<see langword="false" /> が <paramref name="item" /> に見つからなかった場合にも <see cref="T:System.Collections.Generic.List`1" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-852">This method also returns <see langword="false" /> if <paramref name="item" /> was not found in the <see cref="T:System.Collections.Generic.List`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-853">型 `T` が <xref:System.IEquatable%601> ジェネリックインターフェイスを実装している場合、等値比較子はそのインターフェイスの <xref:System.IEquatable%601.Equals%2A> メソッドです。それ以外の場合、既定の等値比較子は <xref:System.Object.Equals%2A?displayProperty=nameWithType>になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-853">If type `T` implements the <xref:System.IEquatable%601> generic interface, the equality comparer is the <xref:System.IEquatable%601.Equals%2A> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="fecc4-854">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-854">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  

 <span data-ttu-id="fecc4-855">次の例では、<xref:System.Collections.Generic.List%601>に単純なビジネスオブジェクトを追加、削除、および挿入する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-855">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="fecc4-856"><xref:System.Collections.Generic.List%601.Remove%2A> メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-856">The following example demonstrates <xref:System.Collections.Generic.List%601.Remove%2A> method.</span></span> <span data-ttu-id="fecc4-857"><xref:System.Collections.Generic.List%601> ジェネリッククラスのいくつかのプロパティとメソッドを使用して、リストを追加、挿入、および検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-857">Several properties and methods of the <xref:System.Collections.Generic.List%601> generic class are used to add, insert, and search the list.</span></span> <span data-ttu-id="fecc4-858">これらの操作の後に、一覧に重複が含まれています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-858">After these operations, the list contains a duplicate.</span></span> <span data-ttu-id="fecc4-859"><xref:System.Collections.Generic.List%601.Remove%2A> メソッドを使用して、重複する項目の最初のインスタンスを削除すると、内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-859">The <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item, and the contents are displayed.</span></span> <span data-ttu-id="fecc4-860"><xref:System.Collections.Generic.List%601.Remove%2A> メソッドは、最初に見つかったインスタンスを常に削除します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-860">The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp-interactive[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-861">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-861">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public int RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : Predicate&lt;'T&gt; -&gt; int" Usage="list.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="fecc4-862">削除する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-862">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to remove.</span></span></param>
        <summary><span data-ttu-id="fecc4-863">指定した述語により定義される条件に一致するすべての要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-863">Removes all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="fecc4-864"><see cref="T:System.Collections.Generic.List`1" /> から削除される要素の数。</span><span class="sxs-lookup"><span data-stu-id="fecc4-864">The number of elements removed from the <see cref="T:System.Collections.Generic.List`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-865"><xref:System.Predicate%601> は、渡されたオブジェクトがデリゲートで定義されている条件に一致する場合に `true` を返すメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-865">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="fecc4-866">現在の <xref:System.Collections.Generic.List%601> の要素は、個別に <xref:System.Predicate%601> デリゲートに渡され、条件に一致する要素は <xref:System.Collections.Generic.List%601>から削除されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-866">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are removed from the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="fecc4-867">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-867">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-868">次の例は、<xref:System.Collections.Generic.List%601.RemoveAll%2A> メソッドと、<xref:System.Predicate%601> 汎用デリゲートを使用する他のいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-868">The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="fecc4-869">文字列の <xref:System.Collections.Generic.List%601> が作成されます。これには8つの恐竜の名前が含まれ、そのうちの2つ (位置1と 5) の末尾が "saurus" になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-869">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="fecc4-870">また、この例では、文字列パラメーターを受け取り、入力文字列が "saurus" で終わるかどうかを示すブール値を返す、`EndsWithSaurus`という名前の検索述語メソッドを定義しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-870">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="fecc4-871"><xref:System.Collections.Generic.List%601.Find%2A>、<xref:System.Collections.Generic.List%601.FindLast%2A>、および <xref:System.Collections.Generic.List%601.FindAll%2A> メソッドを使用して、検索述語メソッドを使用してリストを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-871">The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method.</span></span>  
  
 <span data-ttu-id="fecc4-872"><xref:System.Collections.Generic.List%601.RemoveAll%2A> メソッドは、"saurus" で終わるすべてのエントリを削除するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-872">The <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with "saurus".</span></span> <span data-ttu-id="fecc4-873">最初からリストを走査し、各要素を順番に `EndsWithSaurus` メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-873">It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="fecc4-874">`EndsWithSaurus` メソッドが `true`を返した場合、要素は削除されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-874">The element is removed if the `EndsWithSaurus` method returns `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fecc4-875">およびC# Visual Basic では、`Predicate<string>` デリゲート (Visual Basic で`Predicate(Of String)`) を明示的に作成する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-875">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="fecc4-876">これらの言語は、コンテキストから正しいデリゲートを推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-876">These languages infer the correct delegate from context, and create it automatically.</span></span>  
  
 <span data-ttu-id="fecc4-877">最後に、<xref:System.Collections.Generic.List%601.Exists%2A> メソッドは、"saurus" で終わる文字列がリストにないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-877">Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method verifies that there are no strings in the list that end with "saurus".</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-878"><paramref name="match" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-878"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="list.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fecc4-879">削除する要素の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-879">The zero-based index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="fecc4-880"><see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスにある要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-880">Removes the element at the specified index of the <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-881"><xref:System.Collections.Generic.List%601.RemoveAt%2A> を呼び出して項目を削除すると、リスト内の残りの項目の番号が変更され、削除された項目が置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-881">When you call <xref:System.Collections.Generic.List%601.RemoveAt%2A> to remove an item, the remaining items in the list are renumbered to replace the removed item.</span></span> <span data-ttu-id="fecc4-882">たとえば、インデックス3の項目を削除すると、インデックス4の項目が3つの位置に移動します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-882">For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position.</span></span> <span data-ttu-id="fecc4-883">また、リスト内の項目の数 (<xref:System.Collections.Generic.List%601.Count%2A> プロパティによって表されます) が1ずつ減少します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-883">In addition, the number of items in the list (as represented by the <xref:System.Collections.Generic.List%601.Count%2A> property) is reduced by 1.</span></span>  
  
 <span data-ttu-id="fecc4-884">このメソッドは O (*n*) 操作です。ここで、 *n*は (<xref:System.Collections.Generic.List%601.Count%2A> - `index`) です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-884">This method is an O(*n*) operation, where *n* is (<xref:System.Collections.Generic.List%601.Count%2A> - `index`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-885">次の例では、<xref:System.Collections.Generic.List%601>に単純なビジネスオブジェクトを追加、削除、および挿入する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-885">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-886"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-886"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-887">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-887">-or-</span></span> 
 <span data-ttu-id="fecc4-888"><paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> 以上になっています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-888"><paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveRange (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : int * int -&gt; unit" Usage="list.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fecc4-889">削除する要素の範囲の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-889">The zero-based starting index of the range of elements to remove.</span></span></param>
        <param name="count"><span data-ttu-id="fecc4-890">削除する要素の数を指定します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-890">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="fecc4-891"><see cref="T:System.Collections.Generic.List`1" /> から要素の範囲を削除します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-891">Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-892"><xref:System.Collections.Generic.List%601> これらの項目は削除され、その後に続くすべての要素は、`count`によってインデックスが小さくなります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-892">The items are removed and all the elements following them in the <xref:System.Collections.Generic.List%601> have their indexes reduced by `count`.</span></span>  
  
 <span data-ttu-id="fecc4-893">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-893">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-894">次の例は、<xref:System.Collections.Generic.List%601.RemoveRange%2A> メソッドと、範囲に作用する <xref:System.Collections.Generic.List%601> クラスのその他のさまざまなメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-894">The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="fecc4-895">リストを作成して変更した後、<xref:System.Collections.Generic.List%601.RemoveRange%2A> メソッドを使用して、インデックス位置2から始まる2つの要素をリストから削除します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-895">After the list has been created and modified, the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method is used to remove two elements from the list, beginning at index location 2.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-896"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-896"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-897">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-897">-or-</span></span> 
 <span data-ttu-id="fecc4-898"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-898"><paramref name="count" /> is less than 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-899"><paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において要素の有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-899"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Reverse">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fecc4-900"><see cref="T:System.Collections.Generic.List`1" /> またはその一部の要素の順序を反転させます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-900">Reverses the order of the elements in the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse();" />
      <MemberSignature Language="F#" Value="member this.Reverse : unit -&gt; unit" Usage="list.Reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fecc4-901"><see cref="T:System.Collections.Generic.List`1" /> 全体の要素の順序を反転させます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-901">Reverses the order of the elements in the entire <see cref="T:System.Collections.Generic.List`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-902">このメソッドは、<xref:System.Array.Reverse%2A?displayProperty=nameWithType> を使用して要素の順序を逆にします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-902">This method uses <xref:System.Array.Reverse%2A?displayProperty=nameWithType> to reverse the order of the elements.</span></span>  
  
 <span data-ttu-id="fecc4-903">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-903">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-904">次の例は、<xref:System.Collections.Generic.List%601.Reverse%2A> メソッドの両方のオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-904">The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method.</span></span> <span data-ttu-id="fecc4-905">この例では、文字列の <xref:System.Collections.Generic.List%601> を作成し、6つの文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-905">The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings.</span></span> <span data-ttu-id="fecc4-906"><xref:System.Collections.Generic.List%601.Reverse> メソッドのオーバーロードを使用してリストを反転した後、<xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> メソッドのオーバーロードを使用してリストの中間を反転します。これは、要素1から始まり、4つの要素から構成されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-906">The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</span></span>  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.Reverse : int * int -&gt; unit" Usage="list.Reverse (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fecc4-907">反転させる範囲の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-907">The zero-based starting index of the range to reverse.</span></span></param>
        <param name="count"><span data-ttu-id="fecc4-908">反転させる範囲内にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="fecc4-908">The number of elements in the range to reverse.</span></span></param>
        <summary><span data-ttu-id="fecc4-909">指定した範囲の要素の順序を反転させます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-909">Reverses the order of the elements in the specified range.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-910">このメソッドは、<xref:System.Array.Reverse%2A?displayProperty=nameWithType> を使用して要素の順序を逆にします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-910">This method uses <xref:System.Array.Reverse%2A?displayProperty=nameWithType> to reverse the order of the elements.</span></span>  
  
 <span data-ttu-id="fecc4-911">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-911">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-912">次の例は、<xref:System.Collections.Generic.List%601.Reverse%2A> メソッドの両方のオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-912">The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method.</span></span> <span data-ttu-id="fecc4-913">この例では、文字列の <xref:System.Collections.Generic.List%601> を作成し、6つの文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-913">The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings.</span></span> <span data-ttu-id="fecc4-914"><xref:System.Collections.Generic.List%601.Reverse> メソッドのオーバーロードを使用してリストを反転した後、<xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> メソッドのオーバーロードを使用してリストの中間を反転します。これは、要素1から始まり、4つの要素から構成されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-914">The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</span></span>  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-915"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-915"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-916">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-916">-or-</span></span> 
 <span data-ttu-id="fecc4-917"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-917"><paramref name="count" /> is less than 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-918"><paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において要素の有効な範囲を表していません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-918"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fecc4-919"><see cref="T:System.Collections.Generic.List`1" /> の指定した実装または既定の実装を使用するか、リストの要素を比較する指定した <see cref="T:System.Collections.Generic.IComparer`1" /> デリゲートを使用して、<see cref="T:System.Comparison`1" /> の要素または要素の一部を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-919">Sorts the elements or a portion of the elements in the <see cref="T:System.Collections.Generic.List`1" /> using either the specified or default <see cref="T:System.Collections.Generic.IComparer`1" /> implementation or a provided <see cref="T:System.Comparison`1" /> delegate to compare list elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; unit" Usage="list.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fecc4-920">既定の比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-920">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the default comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-921">このメソッドは、型 `T` の既定の比較子 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> を使用して、リスト要素の順序を決定します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-921">This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for type `T` to determine the order of list elements.</span></span> <span data-ttu-id="fecc4-922"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> プロパティは、型 `T` が <xref:System.IComparable%601> ジェネリックインターフェイスを実装し、その実装を使用するかどうかを確認します (使用可能な場合)。</span><span class="sxs-lookup"><span data-stu-id="fecc4-922">The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="fecc4-923">それ以外の場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 型 `T` が <xref:System.IComparable> インターフェイスを実装しているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-923">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="fecc4-924">型 `T` がどちらのインターフェイスも実装していない場合、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> は <xref:System.InvalidOperationException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-924">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="fecc4-925">このメソッドは <xref:System.Array.Sort%2A?displayProperty=nameWithType> メソッドを使用し、次のように introspective sort を適用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-925">This method uses the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="fecc4-926">パーティションサイズが16要素以下の場合は、挿入並べ替えアルゴリズムが使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-926">If the partition size is less than or equal to 16 elements, it uses an insertion sort algorithm.</span></span>  
  
-   <span data-ttu-id="fecc4-927">パーティションの数が2つのログ*n*( *n*は入力配列の範囲) を超えている場合、heapsort アルゴリズムが使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-927">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.</span></span>  
  
-   <span data-ttu-id="fecc4-928">それ以外の場合は、クイックソートアルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-928">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="fecc4-929">この実装は、不安定な並べ替えを実行します。つまり、2つの要素が等しい場合、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-929">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="fecc4-930">これに対して、安定した並べ替えでは、等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-930">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="fecc4-931">平均して、このメソッドは O (*n* log *n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。最悪のケースでは、O (*n*<sup>2</sup>) 操作です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-931">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  

 <span data-ttu-id="fecc4-932">次の例では、`List<String>` オブジェクトにいくつかの名前を追加し、並べ替えられていない順序で一覧を表示し、<xref:System.Collections.Generic.List%601.Sort%2A> メソッドを呼び出して、並べ替えられたリストを表示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-932">The following example adds some names to a `List<String>` object, displays the list in unsorted order, calls the <xref:System.Collections.Generic.List%601.Sort%2A> method, and then displays the sorted list.</span></span>  
  
 [!code-csharp-interactive[System.Collections.Generic.List.Sort#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/Sort1.cs#2)]
 [!code-vb[System.Collections.Generic.List.Sort#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/Sort1.vb#2)]  
  
 <span data-ttu-id="fecc4-933">次のコードは、単純なビジネスオブジェクトでの <xref:System.Collections.Generic.List%601.Sort> と <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> メソッドのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-933">The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort> and <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overloads on a simple business object.</span></span> <span data-ttu-id="fecc4-934"><xref:System.Collections.Generic.List%601.Sort> メソッドを呼び出すと、パーツ型の既定の比較子が使用され、<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> メソッドは匿名メソッドを使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-934">Calling the <xref:System.Collections.Generic.List%601.Sort> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method is implemented by using an anonymous method.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 <span data-ttu-id="fecc4-935">次の例は、<xref:System.Collections.Generic.List%601.Sort> メソッドのオーバーロードと、<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> メソッドのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-935">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload.</span></span> <span data-ttu-id="fecc4-936">文字列の <xref:System.Collections.Generic.List%601> が作成され、特定の順序ではなく4つの文字列が設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-936">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="fecc4-937">一覧が表示され、並べ替えられて、もう一度表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-937">The list is displayed, sorted, and displayed again.</span></span>  
  
 <span data-ttu-id="fecc4-938">次に、<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> メソッドのオーバーロードを使用して、リストに含まれていない2つの文字列を検索し、<xref:System.Collections.Generic.List%601.Insert%2A> メソッドを使用してそれらの文字列を挿入します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-938">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them.</span></span> <span data-ttu-id="fecc4-939">文字列がリストに含まれていないため、<xref:System.Collections.Generic.List%601.BinarySearch%2A> メソッドの戻り値は、各ケースで負の値になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-939">The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%2A> method is negative in each case, because the strings are not in the list.</span></span> <span data-ttu-id="fecc4-940">ビットごとの補数 (およびでC#は ~ 演算子) C++を取得すると、この負の数値の `Xor`-1 Visual Basic) によって、検索文字列よりも大きいリスト内の最初の要素のインデックスが生成されます。この位置に挿入すると、並べ替え順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-940">Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</span></span> <span data-ttu-id="fecc4-941">2番目の検索文字列がリスト内のどの要素よりも大きいため、挿入位置がリストの末尾にあります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-941">The second search string is larger than any element in the list, so the insertion position is at the end of the list.</span></span>  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp-interactive[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fecc4-942">既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <see cref="T:System.IComparable" /> 型の <paramref name="T" /> インターフェイスの実装を見つけることができません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-942">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-943">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-943">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="list.Sort comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="fecc4-944">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see langword="null" /> を使用する場合は <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-944">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span></span></param>
        <summary><span data-ttu-id="fecc4-945">指定した比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-945">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-946">`comparer` が指定されている場合、<xref:System.Collections.Generic.List%601> の要素は、指定された <xref:System.Collections.Generic.IComparer%601> 実装を使用して並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-946">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="fecc4-947">`comparer` が `null`場合、既定の比較 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 子は、型 `T` が <xref:System.IComparable%601> ジェネリックインターフェイスを実装し、その実装を使用できる場合にその実装を使用するかどうかをチェックします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-947">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="fecc4-948">それ以外の場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 型 `T` が <xref:System.IComparable> インターフェイスを実装しているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-948">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="fecc4-949">型 `T` がどちらのインターフェイスも実装していない場合、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> は <xref:System.InvalidOperationException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-949">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="fecc4-950">このメソッドは <xref:System.Array.Sort%2A?displayProperty=nameWithType> メソッドを使用し、次のように introspective sort を適用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-950">This method uses the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="fecc4-951">パーティションサイズが16要素以下の場合は、挿入並べ替えアルゴリズムが使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-951">If the partition size is less than or equal to 16 elements, it uses an insertion sort algorithm.</span></span>  
  
-   <span data-ttu-id="fecc4-952">パーティションの数が2つのログ*n*( *n*は入力配列の範囲) を超えている場合、heapsort アルゴリズムが使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-952">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.</span></span>  
  
-   <span data-ttu-id="fecc4-953">それ以外の場合は、クイックソートアルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-953">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="fecc4-954">この実装は、不安定な並べ替えを実行します。つまり、2つの要素が等しい場合、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-954">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="fecc4-955">これに対して、安定した並べ替えでは、等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-955">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="fecc4-956">平均して、このメソッドは O (*n* log *n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。最悪のケースでは、O (*n*<sup>2</sup>) 操作です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-956">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-957">次の例は、<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバーロードと、<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-957">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="fecc4-958">この例では、DinoCompare という名前の文字列の代替比較子を定義しています。これC++は、`IComparer<string>` (`IComparer(Of String)` Visual Basic では `IComparer<String^>`、Visual) ジェネリックインターフェイスに実装されています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-958">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="fecc4-959">比較子は次のように機能します。最初に、比較対照値が `null`に対してテストされ、null 参照が null 以外の値として処理されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-959">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="fecc4-960">次に、文字列の長さが比較され、長い方の文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-960">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="fecc4-961">3番目の長さが等しい場合は、通常の文字列比較が使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-961">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="fecc4-962">文字列の <xref:System.Collections.Generic.List%601> が作成され、特定の順序ではなく4つの文字列が設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-962">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="fecc4-963">一覧が表示され、代替比較子を使用して並べ替えられて、もう一度表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-963">The list is displayed, sorted using the alternate comparer, and displayed again.</span></span>  
  
 <span data-ttu-id="fecc4-964">次に、<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバーロードを使用して、リストに含まれていない複数の文字列を検索し、代替比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-964">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</span></span> <span data-ttu-id="fecc4-965"><xref:System.Collections.Generic.List%601.Insert%2A> メソッドは、文字列を挿入するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-965">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings.</span></span> <span data-ttu-id="fecc4-966">これら2つのメソッドは `SearchAndInsert`という名前の関数に配置され、ビットごとの補数 (とビジュアルC# C++では ~ 演算子、は <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> で返された負の数の `Xor` は Visual Basic) を使用して、新しい文字列を挿入するためのインデックスとして使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-966">These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fecc4-967"><paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <see cref="T:System.IComparable" /> 型の <paramref name="T" /> インターフェイスの実装を見つけることができません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-967"><paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-968"><paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="fecc4-968">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="fecc4-969">たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-969">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-970">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-970">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparison As Comparison(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="member this.Sort : Comparison&lt;'T&gt; -&gt; unit" Usage="list.Sort comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison"><span data-ttu-id="fecc4-971">要素を比較する場合に使用する <see cref="T:System.Comparison`1" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-971">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</span></span></param>
        <summary><span data-ttu-id="fecc4-972">指定した <see cref="T:System.Collections.Generic.List`1" /> を使用して、<see cref="T:System.Comparison`1" /> 全体内の要素を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-972">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified <see cref="T:System.Comparison`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-973">`comparison` が指定されている場合、<xref:System.Collections.Generic.List%601> の要素は、デリゲートによって表されるメソッドを使用して並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-973">If `comparison` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the method represented by the delegate.</span></span>  
  
 <span data-ttu-id="fecc4-974">`comparison` が `null`場合は、<xref:System.ArgumentNullException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-974">If `comparison` is `null`, an <xref:System.ArgumentNullException> is thrown.</span></span>  
  
 <span data-ttu-id="fecc4-975">このメソッドは <xref:System.Array.Sort%2A?displayProperty=nameWithType>を使用します。これにより、次のように introspective sort が適用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-975">This method uses <xref:System.Array.Sort%2A?displayProperty=nameWithType>, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="fecc4-976">パーティションサイズが16要素以下の場合は、挿入並べ替えアルゴリズムが使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-976">If the partition size is less than or equal to 16 elements, it uses an insertion sort algorithm</span></span>  
  
-   <span data-ttu-id="fecc4-977">パーティションの数が2つのログ*n*( *n*は入力配列の範囲) を超えている場合、 [heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズムが使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-977">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="fecc4-978">それ以外の場合は、クイックソートアルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-978">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="fecc4-979">この実装は、不安定な並べ替えを実行します。つまり、2つの要素が等しい場合、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-979">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="fecc4-980">これに対して、安定した並べ替えでは、等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-980">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="fecc4-981">平均して、このメソッドは O (*n* log *n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。最悪のケースでは、O (*n*<sup>2</sup>) 操作です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-981">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-982">次のコードは、単純なビジネスオブジェクトでの <xref:System.Collections.Generic.List%601.Sort%2A> と <xref:System.Collections.Generic.List%601.Sort%2A> メソッドのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-982">The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> method overloads on a simple business object.</span></span> <span data-ttu-id="fecc4-983"><xref:System.Collections.Generic.List%601.Sort%2A> メソッドを呼び出すと、パート型の既定の比較子が使用され、<xref:System.Collections.Generic.List%601.Sort%2A> メソッドは匿名メソッドを使用して実装されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-983">Calling the <xref:System.Collections.Generic.List%601.Sort%2A> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%2A> method is implemented using an anonymous method.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 <span data-ttu-id="fecc4-984">次の例は、<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> メソッドのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-984">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="fecc4-985">この例では、`CompareDinosByLength`という名前の文字列に対して、別の比較メソッドを定義しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-985">The example defines an alternative comparison method for strings, named `CompareDinosByLength`.</span></span> <span data-ttu-id="fecc4-986">このメソッドは次のように機能します。最初に、比較対照値が `null`に対してテストされ、null 参照が null 以外の値として処理されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-986">This method works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="fecc4-987">次に、文字列の長さが比較され、長い方の文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-987">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="fecc4-988">3番目の長さが等しい場合は、通常の文字列比較が使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-988">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="fecc4-989">文字列の <xref:System.Collections.Generic.List%601> が作成され、特定の順序ではなく4つの文字列が設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-989">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="fecc4-990">この一覧には、空の文字列と null 参照も含まれています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-990">The list also includes an empty string and a null reference.</span></span> <span data-ttu-id="fecc4-991">リストが表示され、`CompareDinosByLength` メソッドを表す <xref:System.Comparison%601> 汎用デリゲートを使用して並べ替えられて、もう一度表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-991">The list is displayed, sorted using a <xref:System.Comparison%601> generic delegate representing the `CompareDinosByLength` method, and displayed again.</span></span>  
  
 [!code-cpp[List\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]
 [!code-vb[List\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-992"><paramref name="comparison" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-992"><paramref name="comparison" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-993"><paramref name="comparison" /> の実装により、並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="fecc4-993">The implementation of <paramref name="comparison" /> caused an error during the sort.</span></span> <span data-ttu-id="fecc4-994">たとえば、<paramref name="comparison" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-994">For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <altmember cref="T:System.Comparison`1" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-995">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-995">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (index As Integer, count As Integer, comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(int index, int count, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : int * int * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="list.Sort (index, count, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fecc4-996">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-996">The zero-based starting index of the range to sort.</span></span></param>
        <param name="count"><span data-ttu-id="fecc4-997">並べ替える範囲の長さ。</span><span class="sxs-lookup"><span data-stu-id="fecc4-997">The length of the range to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="fecc4-998">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see langword="null" /> を使用する場合は <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-998">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span></span></param>
        <summary><span data-ttu-id="fecc4-999">指定した比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内の要素を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-999">Sorts the elements in a range of elements in <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1000">`comparer` が指定されている場合、<xref:System.Collections.Generic.List%601> の要素は、指定された <xref:System.Collections.Generic.IComparer%601> 実装を使用して並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1000">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="fecc4-1001">`comparer` が `null`場合、既定の比較 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 子は、型 `T` が <xref:System.IComparable%601> ジェネリックインターフェイスを実装し、その実装を使用できる場合にその実装を使用するかどうかをチェックします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1001">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="fecc4-1002">それ以外の場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 型 `T` が <xref:System.IComparable> インターフェイスを実装しているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1002">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="fecc4-1003">型 `T` がどちらのインターフェイスも実装していない場合、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> は <xref:System.InvalidOperationException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1003">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="fecc4-1004">このメソッドは <xref:System.Array.Sort%2A?displayProperty=nameWithType>を使用します。これにより、次のように introspective sort が適用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1004">This method uses <xref:System.Array.Sort%2A?displayProperty=nameWithType>, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="fecc4-1005">パーティションサイズが16要素以下の場合は、挿入並べ替えアルゴリズムが使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1005">If the partition size is less than or equal to 16 elements, it uses an insertion sort algorithm</span></span>  
  
-   <span data-ttu-id="fecc4-1006">パーティションの数が2つのログ*n*( *n*は入力配列の範囲) を超えている場合、 [heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズムが使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1006">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="fecc4-1007">それ以外の場合は、クイックソートアルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1007">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="fecc4-1008">この実装は、不安定な並べ替えを実行します。つまり、2つの要素が等しい場合、その順序は保持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1008">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="fecc4-1009">これに対して、安定した並べ替えでは、等しい要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1009">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="fecc4-1010">平均して、このメソッドは O (*n* log *n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。最悪のケースでは、O (*n*<sup>2</sup>) 操作です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1010">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-1011">次の例は、<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバーロードと、<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1011">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="fecc4-1012">この例では、DinoCompare という名前の文字列の代替比較子を定義しています。これC++は、`IComparer<string>` (`IComparer(Of String)` Visual Basic では `IComparer<String^>`、Visual) ジェネリックインターフェイスに実装されています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1012">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="fecc4-1013">比較子は次のように機能します。最初に、比較対照値が `null`に対してテストされ、null 参照が null 以外の値として処理されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1013">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="fecc4-1014">次に、文字列の長さが比較され、長い方の文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1014">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="fecc4-1015">3番目の長さが等しい場合は、通常の文字列比較が使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1015">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="fecc4-1016">文字列の <xref:System.Collections.Generic.List%601> が作成され、5つの herbivorous 恐竜と3つの carnivorous 恐竜の名前が設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1016">A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</span></span> <span data-ttu-id="fecc4-1017">2つのグループのそれぞれで、名前は特定の並べ替え順序ではありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1017">Within each of the two groups, the names are not in any particular sort order.</span></span> <span data-ttu-id="fecc4-1018">一覧が表示され、herbivores の範囲が代替比較子を使用して並べ替えられ、一覧が再び表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1018">The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</span></span>  
  
 <span data-ttu-id="fecc4-1019">次に、<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバーロードを使用して、"Brachiosaurus" の herbivores の範囲だけを検索します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1019">The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for "Brachiosaurus".</span></span> <span data-ttu-id="fecc4-1020">文字列が見つかりません。ビットごとの補数 (とのC#場合は ~ 演算子C++、とビジュアルの場合は-1 Visual Basic) は、<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドによって返された負の数値の `Xor`、新しい文字列を挿入するためのインデックスとして使用されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1020">The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-1021"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1021"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="fecc4-1022">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-1022">-or-</span></span> 
 <span data-ttu-id="fecc4-1023"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1023"><paramref name="count" /> is less than 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-1024"><paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において有効な範囲を指定していません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1024"><paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the <see cref="T:System.Collections.Generic.List`1" />.</span></span>  
  
<span data-ttu-id="fecc4-1025">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-1025">-or-</span></span> 
<span data-ttu-id="fecc4-1026"><paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1026">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="fecc4-1027">たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1027">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fecc4-1028"><paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <see cref="T:System.IComparable" /> 型の <paramref name="T" /> インターフェイスの実装を見つけることができません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1028"><paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="fecc4-1029">カルチャの影響を受けないコレクションの操作の実行</span><span class="sxs-lookup"><span data-stu-id="fecc4-1029">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;T&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fecc4-1030"><see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1030">Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="fecc4-1031"><see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1031"><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="fecc4-1032"><see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1032">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1033">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1033">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="fecc4-1034">読み取り専用のコレクションは、単純にコレクションを変更できないようにするラッパーを含むコレクションです。したがって、基になるコレクションに変更が加えられた場合、読み取り専用コレクションにはこれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1034">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="fecc4-1035">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1035">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fecc4-1036">コレクションを繰り返し処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1036">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="fecc4-1037">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1037">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1038">C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1038">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="fecc4-1039">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1039">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="fecc4-1040">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1040">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="fecc4-1041">最初、列挙子はコレクションの先頭の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1041">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="fecc4-1042">この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> プロパティは定義されていません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1042">At this position, the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property is undefined.</span></span> <span data-ttu-id="fecc4-1043">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> メソッドを呼び出し、列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1043">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="fecc4-1044"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> プロパティは、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまで、同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1044">The <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="fecc4-1045"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1045"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="fecc4-1046"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1046">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="fecc4-1047">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1047">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="fecc4-1048"><xref:System.Collections.IEnumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1048">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="fecc4-1049"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1049">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="fecc4-1050">列挙子は、コレクションが変更されない限り有効です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1050">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="fecc4-1051">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに無効になり、次に <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1051">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="fecc4-1052">列挙子はコレクションに排他アクセスできないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1052">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="fecc4-1053">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1053">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="fecc4-1054">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1054">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="fecc4-1055"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1055">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="fecc4-1056">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1056">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="fecc4-1057"><see cref="T:System.Array" /> の要素のコピー先となる 1 次元の <see cref="T:System.Collections.ICollection" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1057">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="fecc4-1058"><see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1058">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="fecc4-1059">コピーを開始する <paramref name="array" /> の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1059">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="fecc4-1060"><see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1060">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="fecc4-1061">ソース <xref:System.Collections.ICollection> の型を変換先の `array`の型に自動的にキャストできない場合、<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> の非ジェネリック実装は <xref:System.InvalidCastException>をスローしますが、ジェネリック実装では <xref:System.ArgumentException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1061">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="fecc4-1062">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1062">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-1063"><paramref name="array" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1063"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-1064"><paramref name="arrayIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1064"><paramref name="arrayIndex" /> is less than 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-1065"><paramref name="array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1065"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="fecc4-1066">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-1066">-or-</span></span> 
 <span data-ttu-id="fecc4-1067"><paramref name="array" /> には、0 から始まるインデックス番号がありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1067"><paramref name="array" /> does not have zero-based indexing.</span></span>  
  
<span data-ttu-id="fecc4-1068">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-1068">-or-</span></span> 
<span data-ttu-id="fecc4-1069">コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの使用可能領域を超えています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1069">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span>  
  
<span data-ttu-id="fecc4-1070">または</span><span class="sxs-lookup"><span data-stu-id="fecc4-1070">-or-</span></span> 
<span data-ttu-id="fecc4-1071">コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1071">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fecc4-1072"><see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1072">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="fecc4-1073"><see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1073"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="fecc4-1074"><see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1074">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1075"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1075">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="fecc4-1076">コレクションの列挙処理は、本質的にスレッドセーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1076">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="fecc4-1077">列挙が書き込みアクセスによって競合するまれなケースとして、列挙全体の間にコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1077">In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="fecc4-1078">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1078">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="fecc4-1079"><xref:System.Collections.ICollection.SyncRoot%2A> は、<xref:System.Collections.ICollection>へのアクセスを同期するために使用できるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1079"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="fecc4-1080">同期は、コレクションにアクセスする前にすべてのスレッドがこのオブジェクトをロックする場合にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1080">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="fecc4-1081">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1081">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fecc4-1082"><see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1082">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="fecc4-1083"><see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1083">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span>  <span data-ttu-id="fecc4-1084"><see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1084">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1085"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1085">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="fecc4-1086">コレクションの列挙処理は、本質的にスレッドセーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1086">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="fecc4-1087">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1087">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="fecc4-1088">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1088">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="fecc4-1089"><xref:System.Collections.ICollection.SyncRoot%2A> は、<xref:System.Collections.ICollection>へのアクセスを同期するために使用できるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1089"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="fecc4-1090">同期は、コレクションにアクセスする前にすべてのスレッドがこのオブジェクトをロックする場合にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1090">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="fecc4-1091">次のコードは、、 C# C++、および Visual Basic の <xref:System.Collections.ICollection.SyncRoot%2A> プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1091">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot)   
{  
    // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
    ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try   
{  
    Monitor::Enter(ic->SyncRoot);  
    // Access the collection.  
}  
finally   
{  
    Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="fecc4-1092">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1092">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fecc4-1093">コレクションを繰り返し処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1093">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="fecc4-1094">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1094">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1095">C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1095">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="fecc4-1096">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1096">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="fecc4-1097">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1097">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="fecc4-1098">最初、列挙子はコレクションの先頭の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1098">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="fecc4-1099"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1099"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="fecc4-1100">この位置では、<xref:System.Collections.IEnumerator.Current%2A> プロパティは定義されていません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1100">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="fecc4-1101">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> メソッドを呼び出し、列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1101">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="fecc4-1102"><xref:System.Collections.IEnumerator.Current%2A> プロパティは、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまで、同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1102">The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="fecc4-1103"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1103"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="fecc4-1104"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1104">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="fecc4-1105">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1105">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="fecc4-1106"><xref:System.Collections.IEnumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.IEnumerator.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1106">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="fecc4-1107"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1107">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="fecc4-1108">列挙子は、コレクションが変更されない限り有効です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1108">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="fecc4-1109">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに無効になり、次に <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> を呼び出すと <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1109">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="fecc4-1110">列挙子はコレクションに排他アクセスできないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1110">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="fecc4-1111">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1111">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="fecc4-1112">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1112">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="fecc4-1113"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1113">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="fecc4-1114">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1114">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ item) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-1115"><see cref="T:System.Object" /> に追加する <see cref="T:System.Collections.IList" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1115">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="fecc4-1116"><see cref="T:System.Collections.IList" /> に項目を追加します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1116">Adds an item to the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <returns><span data-ttu-id="fecc4-1117">新しい要素が挿入された位置です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1117">The position into which the new element was inserted.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1118"><xref:System.Collections.Generic.List%601.Count%2A> が <xref:System.Collections.Generic.List%601.Capacity%2A>より小さい場合、このメソッドは O (1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1118">If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation.</span></span> <span data-ttu-id="fecc4-1119">新しい要素に対応するために容量を増やす必要がある場合、このメソッドは O (*n*) 操作になります。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1119">If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-1120"><paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1120"><paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ item) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-1121"><see cref="T:System.Object" /> 内で検索される <see cref="T:System.Collections.IList" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1121">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="fecc4-1122"><see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1122">Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="fecc4-1123"><see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1123"><see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1124">このメソッドは、リスト内の値の型 `T`に <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 既定の等値比較子を使用して、等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1124">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="fecc4-1125">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1125">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ item) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-1126"><see cref="T:System.Collections.IList" /> 内で検索するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1126">The object to locate in the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="fecc4-1127"><see cref="T:System.Collections.IList" /> 内の特定の項目のインデックスを確認します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1127">Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <returns><span data-ttu-id="fecc4-1128">リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1128">The index of <paramref name="item" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1129">このメソッドは、リスト内の値の型 `T`に <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 既定の等値比較子を使用して、等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1129">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="fecc4-1130">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1130">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-1131"><paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1131"><paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ item) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fecc4-1132"><paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1132">The zero-based index at which <paramref name="item" /> should be inserted.</span></span></param>
        <param name="item"><span data-ttu-id="fecc4-1133"><see cref="T:System.Collections.IList" /> に挿入するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1133">The object to insert into the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="fecc4-1134">指定したインデックスの <see cref="T:System.Collections.IList" /> に項目を挿入します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1134">Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1135">`index` が <xref:System.Collections.IList> 内の項目数に等しければ、`item` が末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1135">If `index` equals the number of items in the <xref:System.Collections.IList>, then `item` is appended to the end.</span></span>  
  
 <span data-ttu-id="fecc4-1136">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1136">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-1137"><paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1137"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-1138"><paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1138"><paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fecc4-1139"><see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1139">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="fecc4-1140"><see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1140"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="fecc4-1141"><see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1141">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1142">固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1142">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="fecc4-1143">固定サイズのコレクションは、要素の追加と削除を防ぐラッパーを持つ単純なコレクションです。したがって、要素の追加や削除など、基になるコレクションに変更が加えられた場合、固定サイズのコレクションにはこれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1143">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="fecc4-1144">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1144">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fecc4-1145"><see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1145">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="fecc4-1146"><see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1146"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="fecc4-1147"><see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1147">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1148">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1148">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="fecc4-1149">読み取り専用のコレクションは、単純にコレクションを変更できないようにするラッパーを含むコレクションです。したがって、基になるコレクションに変更が加えられた場合、読み取り専用コレクションにはこれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1149">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="fecc4-1150">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1150">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="fecc4-1151">取得または設定する要素の、0 から始まるインデックス番号。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1151">The zero-based index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="fecc4-1152">指定したインデックスにある要素を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1152">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="fecc4-1153">指定したインデックス位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1153">The element at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1154">このC#言語では、<xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> プロパティを実装する代わりに、 [this](~/docs/csharp/language-reference/keywords/this.md)キーワードを使用してインデクサーを定義します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1154">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> property.</span></span> <span data-ttu-id="fecc4-1155">Visual Basic は、<xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1155">Visual Basic implements <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="fecc4-1156">このプロパティの値の取得は O (1) 操作です。プロパティの設定は、O (1) 操作でもあります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1156">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fecc4-1157"><paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1157"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-1158">プロパティが設定されていて、<paramref name="value" /> が <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1158">The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (item As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ item) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="fecc4-1159"><see cref="T:System.Collections.IList" /> から削除するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1159">The object to remove from the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="fecc4-1160">特定のオブジェクトが <see cref="T:System.Collections.IList" /> 内にあるときに、最初に出現したものを削除します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1160">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1161">このメソッドは、リスト内の値の型 `T`に <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 既定の等値比較子を使用して、等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1161">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="fecc4-1162">このメソッドは、線形検索を実行します。したがって、このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1162">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fecc4-1163"><paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1163"><paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="list.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fecc4-1164"><see cref="T:System.Collections.Generic.List`1" /> の要素を新しい配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1164">Copies the elements of the <see cref="T:System.Collections.Generic.List`1" /> to a new array.</span></span></summary>
        <returns><span data-ttu-id="fecc4-1165"><see cref="T:System.Collections.Generic.List`1" /> の要素のコピーを格納する配列。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1165">An array containing copies of the elements of the <see cref="T:System.Collections.Generic.List`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1166">要素は <xref:System.Array.Copy%2A?displayProperty=nameWithType>を使用してコピーされます。これは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1166">The elements are copied using <xref:System.Array.Copy%2A?displayProperty=nameWithType>, which is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="fecc4-1167">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1167">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-1168">次の例は、範囲に作用する <xref:System.Collections.Generic.List%601> クラスの <xref:System.Collections.Generic.List%601.ToArray%2A> メソッドとその他のメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1168">The following example demonstrates the <xref:System.Collections.Generic.List%601.ToArray%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="fecc4-1169">この例の最後では、<xref:System.Collections.Generic.List%601.GetRange%2A> メソッドを使用して、インデックス位置2から始まる3つの項目をリストから取得します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1169">At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2.</span></span> <span data-ttu-id="fecc4-1170">結果の <xref:System.Collections.Generic.List%601>に対して <xref:System.Collections.Generic.List%601.ToArray%2A> メソッドが呼び出され、3つの要素の配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1170">The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements.</span></span> <span data-ttu-id="fecc4-1171">配列の要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1171">The elements of the array are displayed.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="list.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fecc4-1172"><see cref="T:System.Collections.Generic.List`1" /> 内にある実際の要素数がしきい値未満の場合は、容量をその数に設定します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1172">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.List`1" />, if that number is less than a threshold value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1173">コレクションに新しい要素が追加されない場合は、このメソッドを使用してコレクションのメモリオーバーヘッドを最小限に抑えることができます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1173">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="fecc4-1174">ただし、大きな <xref:System.Collections.Generic.List%601> の再割り当てとコピーにかかるコストはかなり大きくなる可能性があるため、<xref:System.Collections.Generic.List%601.TrimExcess%2A> の方法では、リストの容量が90% を超える場合は何も行われません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1174">The cost of reallocating and copying a large <xref:System.Collections.Generic.List%601> can be considerable, however, so the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="fecc4-1175">これにより、比較的小さな増加に対して大きな再割り当てコストが発生することを回避できます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1175">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fecc4-1176">現在のしきい値である90% は、今後のリリースで変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1176">The current threshold of 90 percent might change in future releases.</span></span>  
  
 <span data-ttu-id="fecc4-1177">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1177">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="fecc4-1178"><xref:System.Collections.Generic.List%601> を初期状態にリセットするには、<xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドを呼び出す前に <xref:System.Collections.Generic.List%601.Clear%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1178">To reset a <xref:System.Collections.Generic.List%601> to its initial state, call the <xref:System.Collections.Generic.List%601.Clear%2A> method before calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="fecc4-1179">空の <xref:System.Collections.Generic.List%601> をトリミングすると、<xref:System.Collections.Generic.List%601> の容量が既定の容量に設定されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1179">Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="fecc4-1180">容量は、<xref:System.Collections.Generic.List%601.Capacity%2A> プロパティを使用して設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1180">The capacity can also be set using the <xref:System.Collections.Generic.List%601.Capacity%2A> property.</span></span>  
  
   
  
## Examples  

 <span data-ttu-id="fecc4-1181">次の例は、単純なビジネスオブジェクトを含む <xref:System.Collections.Generic.List%601> の容量と数を確認する方法と、<xref:System.Collections.Generic.List%601.TrimExcess%2A> 方法を使用して追加容量を削除する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1181">The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="fecc4-1182"><xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1182">The following example demonstrates the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="fecc4-1183"><xref:System.Collections.Generic.List%601> クラスのいくつかのプロパティとメソッドを使用して、文字列のリストの項目を追加、挿入、および削除します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1183">Several properties and methods of the <xref:System.Collections.Generic.List%601> class are used to add, insert, and remove items from a list of strings.</span></span> <span data-ttu-id="fecc4-1184">その後、<xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドを使用して、カウントに一致する容量を減らし、<xref:System.Collections.Generic.List%601.Capacity%2A> と <xref:System.Collections.Generic.List%601.Count%2A> のプロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1184">Then the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="fecc4-1185">未使用の容量が合計容量の10% 未満の場合、一覧のサイズは変更されませんでした。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1185">If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</span></span> <span data-ttu-id="fecc4-1186">最後に、リストの内容が消去されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1186">Finally, the contents of the list are cleared.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp-interactive[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.Clear" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TrueForAll">
      <MemberSignature Language="C#" Value="public bool TrueForAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrueForAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrueForAll (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrueForAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.TrueForAll : Predicate&lt;'T&gt; -&gt; bool" Usage="list.TrueForAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="fecc4-1187">要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1187">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions to check against the elements.</span></span></param>
        <summary><span data-ttu-id="fecc4-1188"><see cref="T:System.Collections.Generic.List`1" /> 内のすべての要素が、指定した述語によって定義される条件に一致するかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1188">Determines whether every element in the <see cref="T:System.Collections.Generic.List`1" /> matches the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="fecc4-1189"><see langword="true" /> 内のすべての要素が、指定した述語によって定義される条件に一致する場合は <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1189"><see langword="true" /> if every element in the <see cref="T:System.Collections.Generic.List`1" /> matches the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fecc4-1190">リストに要素がない場合、戻り値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1190">If the list has no elements, the return value is <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fecc4-1191"><xref:System.Predicate%601> は、渡されたオブジェクトがデリゲートで定義されている条件に一致する場合に `true` を返すメソッドのデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1191">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="fecc4-1192">現在の <xref:System.Collections.Generic.List%601> の要素は、個別に <xref:System.Predicate%601> デリゲートに渡され、デリゲートが任意の要素に対して `false` を返すと処理が停止されます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1192">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when the delegate returns `false` for any element.</span></span> <span data-ttu-id="fecc4-1193">要素は順番に処理され、すべての呼び出しが1つのスレッドで行われます。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1193">The elements are processed in order, and all calls are made on a single thread.</span></span>  
  
 <span data-ttu-id="fecc4-1194">このメソッドは O (*n*) 操作です。ここで、 *n*は <xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1194">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fecc4-1195">次の例は、<xref:System.Collections.Generic.List%601.TrueForAll%2A> メソッドと、<xref:System.Predicate%601> 汎用デリゲートを使用する他のいくつかのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1195">The following example demonstrates the <xref:System.Collections.Generic.List%601.TrueForAll%2A> method and several other methods that use <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="fecc4-1196">文字列の <xref:System.Collections.Generic.List%601> が作成されます。これには8つの恐竜の名前が含まれ、そのうちの2つ (位置1と 5) の末尾が "saurus" になります。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1196">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="fecc4-1197">また、この例では、文字列パラメーターを受け取り、入力文字列が "saurus" で終わるかどうかを示すブール値を返す、`EndsWithSaurus`という名前の検索述語メソッドを定義しています。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1197">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="fecc4-1198"><xref:System.Collections.Generic.List%601.TrueForAll%2A> メソッドは、最初からリストを走査し、各要素を順番に `EndsWithSaurus` メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1198">The <xref:System.Collections.Generic.List%601.TrueForAll%2A> method traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="fecc4-1199">`EndsWithSaurus` メソッドが `false`を返すと、検索は停止します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1199">The search stops when the `EndsWithSaurus` method returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fecc4-1200">およびC# Visual Basic では、`Predicate<string>` デリゲート (Visual Basic で`Predicate(Of String)`) を明示的に作成する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1200">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="fecc4-1201">これらの言語は、コンテキストから正しいデリゲートを推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1201">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fecc4-1202"><paramref name="match" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="fecc4-1202"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
  </Members>
</Type>
