<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7295584f1d5a6e2b2c2b6e4288ee845523cdce0d" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75151862" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">列挙するオブジェクトの型。</typeparam>
    <summary>指定した型のコレクションに対する単純な反復処理をサポートする列挙子を公開します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601> は、<xref:System.Collections.Generic.List%601>、<xref:System.Collections.Generic.Dictionary%602>、<xref:System.Collections.Generic.Stack%601> などの <xref:System.Collections.Generic> 名前空間のコレクションの基本インターフェイスであり、<xref:System.Collections.ObjectModel.ObservableCollection%601> や <xref:System.Collections.Concurrent.ConcurrentStack%601>などの他のジェネリックコレクションです。 <xref:System.Collections.Generic.IEnumerable%601> を実装するコレクションは、`foreach` ステートメントを使用して列挙できます。  
  
 このインターフェイスの非ジェネリックバージョンについては、「<xref:System.Collections.IEnumerable?displayProperty=nameWithType>」を参照してください。  
  
 <xref:System.Collections.Generic.IEnumerable%601> には、このインターフェイスを実装するときに実装する必要がある1つのメソッドが含まれています。<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>。<xref:System.Collections.Generic.IEnumerator%601> オブジェクトを返します。 返される <xref:System.Collections.Generic.IEnumerator%601> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> プロパティを公開することによって、コレクションを反復処理する機能を提供します。  
  
   
  
## Examples  
 次の例は、<xref:System.Collections.Generic.IEnumerable%601> インターフェイスを実装する方法と、その実装を使用して LINQ クエリを作成する方法を示しています。 <xref:System.Collections.Generic.IEnumerable%601>を実装する場合は、<xref:System.Collections.Generic.IEnumerator%601> またはを実装するC#必要があります。また、の場合は、 [yield](~/docs/csharp/language-reference/keywords/yield.md)キーワードを使用することもできます。 <xref:System.Collections.Generic.IEnumerator%601> を実装するには、<xref:System.IDisposable> を実装する必要もあります。この例では、これが表示されます。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 <xref:System.Collections.Generic.IEnumerable%601> インターフェイスC#の実装方法を示す別の例については、「[ジェネリックのサンプル](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)」を参照してください。 このサンプルでは、<xref:System.Collections.Generic.IEnumerator%601>を実装する代わりに、`yield` キーワードを使用します。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>非ジェネリックコレクションを反復処理するメソッドとの互換性を維持するために、<see cref="T:System.Collections.Generic.IEnumerable`1" /> は <see cref="T:System.Collections.IEnumerable" />を実装します。 これにより、<see cref="T:System.Collections.IEnumerable" /> オブジェクトを必要とするメソッドにジェネリックコレクションを渡すことができます。</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
    <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">チュートリアル: Visual Basic での IEnumerable(Of T) の実装</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">反復子 (C# および Visual Basic)</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593">ジェネリックのサンプル</related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理する列挙子を返します。</summary>
        <returns>コレクションの繰り返し処理に使用できる列挙子です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返される <xref:System.Collections.Generic.IEnumerator%601> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> プロパティを公開することによって、コレクションを反復処理する機能を提供します。列挙子を使用してコレクション内のデータを読み取ることはできますが、コレクションを変更することはできません。  
  
 最初、列挙子はコレクションの先頭の要素の前に位置付けられます。 この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> は未定義です。 そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> メソッドを呼び出し、列挙子をコレクションの最初の要素に進める必要があります。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、次の要素に <xref:System.Collections.Generic.IEnumerator%601.Current%2A> を設定 <xref:System.Collections.IEnumerator.MoveNext%2A> として <xref:System.Collections.IEnumerator.MoveNext%2A> が再度呼び出されるまで、同じオブジェクトを返します。  
  
 <xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。 列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。 <xref:System.Collections.IEnumerator.MoveNext%2A> の最後の呼び出しが `false`を返した場合、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> は定義されていません。 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。  

 要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子の動作は未定義になります。  
  
 列挙子はコレクションに排他的にアクセスできないため、コレクションが変更されていない限り、列挙子は有効なままです。 要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子は無効になり、予期しない結果が発生する可能性があります。 また、コレクションの列挙はスレッドセーフなプロシージャではありません。 スレッドセーフを保証するには、列挙子の間にコレクションをロックするか、コレクションに対して同期を実装する必要があります。  
  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。  
  
   
  
## Examples  
 次の例は、<xref:System.Collections.Generic.IEnumerable%601> インターフェイスを実装し、その実装を使用して LINQ クエリを作成する方法を示しています。 <xref:System.Collections.Generic.IEnumerable%601>を実装する場合は、<xref:System.Collections.Generic.IEnumerator%601> またはを実装するC#必要があります。また、の場合は、 [yield](~/docs/csharp/language-reference/keywords/yield.md)キーワードを使用することもできます。 <xref:System.Collections.Generic.IEnumerator%601> を実装するには、<xref:System.IDisposable> を実装する必要もあります。この例では、これが表示されます。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 <xref:System.Collections.Generic.IEnumerable%601> インターフェイスC#の実装方法を示す別の例については、「[ジェネリックのサンプル](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)」を参照してください。 このサンプルでは、<xref:System.Collections.Generic.IEnumerator%601>を実装する代わりに、`yield` キーワードを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
        <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">チュートリアル: Visual Basic での IEnumerable(Of T) の実装</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">反復子 (C# および Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
