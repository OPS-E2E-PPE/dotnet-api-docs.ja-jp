<Type Name="XmlMessageFormatter" FullName="System.Messaging.XmlMessageFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ac2fbcd17f34ca9b08ffbb60e2705c9b3b24a9b7" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78822612" /></Metadata><TypeSignature Language="C#" Value="public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.XmlMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <TypeSignature Language="F#" Value="type XmlMessageFormatter = class&#xA;    interface IMessageFormatter&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>XSD スキーマ定義の XML 書式を使用して、メッセージ本文との間でオブジェクトをシリアル化および逆シリアル化します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter> は、<xref:System.Messaging.MessageQueue> のインスタンスがキューに書き込まれたメッセージをシリアル化するために使用する既定のフォーマッタです。 <xref:System.Messaging.MessageQueue>のインスタンスを作成すると、<xref:System.Messaging.XmlMessageFormatter> のインスタンスが作成され、<xref:System.Messaging.MessageQueue>に関連付けられます。 別のフォーマッタを指定するには、コードで作成し、それを <xref:System.Messaging.MessageQueue>の <xref:System.Messaging.MessageQueue.Formatter%2A> プロパティに割り当てます。  
  
 キューの既定の <xref:System.Messaging.XmlMessageFormatter> インスタンスを使用してキューに書き込むことができますが、フォーマッタで <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> または <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> プロパティを設定するまで、キューからの読み取りに使用することはできません。 これらの値の一方または両方を既定のフォーマッタインスタンスに設定することも、フォーマッタの新しいインスタンスを作成し、それらを引数として適切な <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> コンストラクターに渡すことによって値を自動的に設定することもできます。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>ではなく <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> を指定すると、読み取り時間ではなくコンパイル時に型の存在がチェックされるため、エラーの可能性が減少します。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> では、アセンブリ名を指定して、すべてのエントリが完全修飾されている必要があります。 さらに、複数の同時実行バージョンを使用する場合は、ターゲットの型名にもバージョン番号を追加する必要があります。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> プロパティと <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> プロパティは、メッセージを逆シリアル化するときにどのスキーマを照合するかをフォーマッタに指示します。 これにより、フォーマッタがメッセージ本文を解釈できるようになります。  
  
 メッセージ本文でシリアル化されるインスタンスは、型配列で表されるスキーマのいずれかに準拠している必要があります。 <xref:System.Messaging.MessageQueue.Receive%2A> メソッドを使用してメッセージを読み取ると、メソッドは、識別されたスキーマに対応する型のオブジェクトを作成し、そのオブジェクトにメッセージ本文を読み取ります。  
  
 キューから読み取る場合は、2つのプロパティのうち1つだけを設定する必要がありますが、両方を設定できます。 一連の型は、2つのプロパティの組み合わせセットです。 使用するプロパティの決定は、アプリケーションに固有のものです。 メッセージ本文に、いずれかのプロパティの配列内のいずれの型とも一致しないスキーマを持つ型が含まれている場合、メッセージが読み取られると例外がスローされます。  
  
 <xref:System.Messaging.XmlMessageFormatter> は、疎結合の XML ベースのメッセージングの重要なコンポーネントです。 XSD.EXE ユーティリティでは、xml 形式を使用して XML スキーマを生成します。たとえば、ユーティリティを使用してアプリケーションで使用されるクラスをシリアル化する場合などです。 このクラスには、パラメーターなしのコンストラクターが含まれている必要があります。  
  
 この形式は、クラスデータを記述するために配布するスキーマに基づいてクラスを生成するときに、逆プロセスで再び使用されます。 ユーティリティおよび生成された XML スキーマを使用すると、クラスの実装が変更された後でクラスを再コンパイルするたびに .dll ファイルの再配布を避けることができます。 スキーマがクライアントまたはサーバーで変更されていない限り、どちらか一方に加えられた変更は他方には影響しません。  
  
   
  
## Examples  
 次のコード例には、サーバーコンポーネント、注文クラス、およびクライアントコードの3つのコードが含まれています。 Order クラスを XSD.EXE ユーティリティで使用して、サーバーが受信メッセージ内で認識するスキーマを生成できます。 スキーマは、クラスの "形状" を記述する XML 形式のファイルです。 その後、このスキーマをクライアント側で使用して、サーバークラスと同じスキーマを共有するクライアント固有の順序クラスを生成できます。  
  
 次のコード例は、メッセージキューを介して注文を受信するサーバーコンポーネントを表しています。 メッセージの本文は、次の Order.cs クラスと一致するスキーマを持つ order オブジェクトである必要があります。 サーバープロセスまたはアプリケーションは、注文を逆シリアル化します。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlMessageFormatter Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source.cs#1)]
 [!code-vb[Classic XmlMessageFormatter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source.vb#1)]  
  
 次のコード例は、サーバー上のアプリケーションが受信して逆シリアル化する order オブジェクトのスキーマを提供する order クラスを表しています。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic XmlMessageFormatter Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source2.cs#2)]
 [!code-vb[Classic XmlMessageFormatter Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source2.vb#2)]  
  
 サーバー上のアプリケーションと対話するすべてのクライアントアプリケーションは、ローカルに定義された order クラスの情報をメッセージ本文にシリアル化することによって、サーバーにメッセージを送信する必要があります。 ローカルに定義された order クラスは、サーバー定義の order クラスと同じスキーマを持つ必要があります。このクラスは、サーバー上のアプリケーションがメッセージ本文を逆シリアル化しようとします。 XSD.EXE ユーティリティを使用すると、サーバー上のアプリケーションのマネージャーは、サーバーに送信されるメッセージをシリアル化するためにクライアントが使用する必要のあるスキーマを作成および配布できます。  
  
 クライアントアプリケーションのマネージャーが order クラスのスキーマを受け取ると、XSD.EXE ユーティリティを再度使用して、スキーマからクライアント固有の順序クラスを生成します。 このクラスは、サーバーの order クラスではなく、次のクライアントコード例で使用されています (XSD.EXE ユーティリティによって、スキーマによって生成されたクラスは元のクラスと同じ名前になります)。 この新しい order クラスは、注文をメッセージ本文にシリアル化するために使用されます。  
  
 次のコード例は、注文をシリアル化し、注文に関連付けられた情報をキューに送信するために使用されるクライアント側の処理です。 このコードは、XSD.EXE ユーティリティによって Order.cs クラス用に生成されたスキーマの要素に、項目、数量、および住所の情報を関連付けます。 注文がローカルコンピューターの Orders キューに送信されます。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source3.cpp#3)]
 [!code-csharp[Classic XmlMessageFormatter Example#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source3.cs#3)]
 [!code-vb[Classic XmlMessageFormatter Example#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source3.vb#3)]  
  
 サーバー上の order クラスからスキーマが生成された後、クラスを変更できます。 スキーマが変更されない限り、スキーマを再配布する必要はありません。 スキーマを配布し、クライアント側の順序クラスを生成した後は、スキーマ自体が変更されていない限り、そのクライアントクラスをサーバーの order クラスとは別に変更することもできます。 この2つのクラスは疎結合になっています。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
    <altmember cref="T:System.Messaging.IMessageFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Messaging.XmlMessageFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>対象の型を設定せずに、<see cref="T:System.Messaging.XmlMessageFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンストラクターのこのオーバーロードは、書き込み時にターゲットの型が不要であるため、キューへの書き込み時に最も頻繁に使用されます。  
  
 このコンストラクターを使用して作成された <xref:System.Messaging.XmlMessageFormatter> のインスタンスを使用してキューからメッセージを読み取るには、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> または <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> プロパティを設定して、フォーマッタが逆シリアル化しようとする型を認識できるようにする必要があります。  
  
 新しい <xref:System.Messaging.MessageQueue>を作成すると、既定の <xref:System.Messaging.XmlMessageFormatter> インスタンスが作成されます。対象の型は設定されません。 このコンストラクターを使用して作成されたフォーマッタと同様に、キューから読み取る場合は、そのフォーマッタインスタンスのターゲット型を設定する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (string[] targetTypeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] targetTypeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypeNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;System::String ^&gt; ^ targetTypeNames);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : string[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypeNames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypeNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="targetTypeNames">フォーマッタでメッセージから逆シリアル化できる型のセットを指定する <see cref="T:System.String" /> 型の配列。 これらの値は、たとえば "MyNamespace.MyOrders, MyOrdersAssemblyName" のように完全に限定されている必要があります。</param>
        <summary><see cref="T:System.Messaging.XmlMessageFormatter" /> クラスの新しいインスタンスを初期化し、完全限定型の文字列値の配列として渡された対象の型を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ターゲット型パラメーターを持つコンストラクターは、キューから読み取るときに最も頻繁に使用されます。 書き込み時には、対象の型を指定する必要はありません。  
  
 <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> コンストラクターのこのオーバーロードは、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> プロパティを `targetTypeNames` パラメーターを通じて渡される配列値に設定します。 このプロパティを設定すると、この <xref:System.Messaging.XmlMessageFormatter> インスタンスを使用して、指定された型のオブジェクトを含むメッセージを読み取る <xref:System.Messaging.MessageQueue> ことができます。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> と <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> の両方のプロパティは、メッセージを逆シリアル化するときにどのスキーマを照合するかをフォーマッタに指示します。 これにより、フォーマッタがメッセージ本文を解釈できるようになります。  
  
 メッセージ本文でシリアル化されるインスタンスは、型配列で表されるスキーマのいずれかに準拠している必要があります。 <xref:System.Messaging.MessageQueue.Receive%2A> メソッドを使用してメッセージを読み取ると、メソッドは、識別されたスキーマに対応する型のオブジェクトを作成し、そのオブジェクトにメッセージ本文を読み取ります。  
  
 キューから読み取る場合は、2つのプロパティのうち1つだけを設定する必要がありますが、両方を設定できます。 一連の型は、2つのプロパティの組み合わせセットです。 どちらを使用するかは、アプリケーションによって異なります。 いずれかのプロパティの配列内のいずれの型とも一致しないスキーマを持つ型がメッセージ本文に含まれている場合は、読み取り時に例外がスローされます。  
  
   
  
## Examples  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetTypeNames" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (Type[] targetTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type[] targetTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;Type ^&gt; ^ targetTypes);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : Type[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="targetTypes">フォーマッタでメッセージから逆シリアル化できる型のセットを指定する <see cref="T:System.Type" /> 型の配列。</param>
        <summary><see cref="T:System.Messaging.XmlMessageFormatter" /> クラスの新しいインスタンスを初期化し、オブジェクト型の配列として渡された対象の型を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ターゲット型パラメーターを持つコンストラクターは、キューから読み取るときに最も頻繁に使用されます。 書き込み時には、対象の型を指定する必要はありません。  
  
 <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> コンストラクターのこのオーバーロードは、<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> プロパティを `targetTypes` パラメーターを通じて渡される配列値に設定します。 このプロパティを設定すると、この <xref:System.Messaging.XmlMessageFormatter> インスタンスを使用して、指定された型のオブジェクトを含むメッセージを読み取る <xref:System.Messaging.MessageQueue> ことができます。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> と <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> の両方のプロパティは、メッセージを逆シリアル化するときにどのスキーマを照合するかをフォーマッタに指示します。 これにより、フォーマッタがメッセージ本文を解釈できるようになります。  
  
 メッセージ本文でシリアル化されるインスタンスは、型配列で表されるスキーマのいずれかに準拠している必要があります。 <xref:System.Messaging.MessageQueue.Receive%2A> メソッドを使用してメッセージを読み取ると、メソッドは、識別されたスキーマに対応する型のオブジェクトを作成し、そのオブジェクトにメッセージ本文を読み取ります。  
  
 キューから読み取る場合は、2つのプロパティのうち1つだけを設定する必要がありますが、両方を設定できます。 一連の型は、2つのプロパティの組み合わせセットです。 どちらを使用するかは、アプリケーションによって異なります。 いずれかのプロパティの配列内のいずれの型とも一致しないスキーマを持つ型がメッセージ本文に含まれている場合は、読み取り時に例外がスローされます。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>ではなく <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> を指定すると、読み取り時間ではなくコンパイル時に型の存在がチェックされるため、エラーの可能性が減少します。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> では、アセンブリ名を指定して、すべてのエントリが完全修飾されている必要があります。 さらに、複数の同時実行バージョンを使用する場合は、ターゲットの型名にもバージョン番号を追加する必要があります。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>を使用する場合は、次C#のコードで示すように、各オブジェクト (たとえば、`MyClass`) を一覧に追加できます。  
  
```  
TargetTypes = new Type[]{typeof(MyClass)}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetTypes" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanRead (message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool&#xA;override this.CanRead : System.Messaging.Message -&gt; bool" Usage="xmlMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">検査対象の <see cref="T:System.Messaging.Message" />。</param>
        <summary>フォーマッタがメッセージを逆シリアル化できるかどうかを判断します。</summary>
        <returns>XML フォーマッタがメッセージを逆シリアル化できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> が呼び出されると、フォーマッタは、メッセージの内容が逆シリアル化できるものかどうかを判断しようとします。 フォーマッタがメッセージを逆シリアル化できるのは、メッセージ本文の型のスキーマが、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> と <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> のプロパティで表される配列内の型の1つと同じ場合のみです。 <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> は、次の2つの状況下で `false` を返します。  
  
-   メッセージは <xref:System.Messaging.XmlMessageFormatter>を使用して書式設定されませんでした。  
  
-   メッセージ本文のスキーマは、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> または <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> のいずれかのプロパティに含まれていません。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> プロパティと <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> プロパティは、逆シリアル化できる必要があるオブジェクトの種類をフォーマッタに伝えます。 一覧に存在しない型がメッセージ内で見つかった場合、<xref:System.Messaging.XmlMessageFormatter.CanRead%2A> は `false`を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> プロパティも <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> プロパティも設定されていません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="xmlMessageFormatter.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Messaging.XmlMessageFormatter" /> インスタンスと同じ読み取り/書き込みプロパティ (対象の型のセット) の <see cref="T:System.Messaging.XmlMessageFormatter" /> クラスのインスタンスを作成します。</summary>
        <returns>この <see cref="T:System.Messaging.XmlMessageFormatter" /> インスタンスのプロパティと同一のプロパティだが、メタデータでフォーマッタ クラス インスタンスであることが指定されていないオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、フォーマッタのコピーを作成し、そのすべてのプロパティをこの <xref:System.Messaging.XmlMessageFormatter> オブジェクトの値に初期化します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (message As Message) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj&#xA;override this.Read : System.Messaging.Message -&gt; obj" Usage="xmlMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">逆シリアル化する XML 形式の <see cref="T:System.Messaging.Message" />。</param>
        <summary>指定されたメッセージからコンテンツを読み取り、逆シリアル化されたメッセージを含むオブジェクトを作成します。</summary>
        <returns>逆シリアル化されたメッセージ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> と <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> の両方のプロパティは、メッセージを逆シリアル化するときにどのスキーマを照合するかをフォーマッタに指示します。 これらのプロパティの1つは、メッセージを逆シリアル化する前に設定する必要があります。  
  
 メッセージ本文でシリアル化されるインスタンスは、型配列で表されるスキーマのいずれかに準拠している必要があります。 <xref:System.Messaging.MessageQueue.Receive%2A> メソッドを使用してメッセージを読み取ると、メソッドは、識別されたスキーマに対応する型のオブジェクトを作成し、そのオブジェクトにメッセージ本文を読み取ります。  
  
 キューに書き込むために、対象の型を指定する必要はありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> プロパティも <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> プロパティも設定されていません。  
  
または 
メッセージ本文でシリアル化されるインスタンスが、<see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> プロパティおよび <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> プロパティの型で表されたスキーマに従っていません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypeNames">
      <MemberSignature Language="C#" Value="public string[] TargetTypeNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] TargetTypeNames" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypeNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ TargetTypeNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypeNames : string[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypeNames")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供されたメッセージからフォーマッタで逆シリアル化できる型のセットを指定します。</summary>
        <value>メッセージの読み取り時に、メッセージ本文から逆シリアル化されるオブジェクトの型を指定する <see cref="T:System.String" /> 型の配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> と <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> の両方のプロパティは、メッセージを逆シリアル化するときにどのスキーマを照合するかをフォーマッタに指示します。 これにより、フォーマッタがメッセージ本文を解釈できるようになります。  
  
 メッセージ本文でシリアル化されるインスタンスは、型配列で表されるスキーマのいずれかに準拠している必要があります。 <xref:System.Messaging.MessageQueue.Receive%2A> メソッドを使用してメッセージを読み取ると、メソッドは、識別されたスキーマに対応する型のオブジェクトを作成し、そのオブジェクトにメッセージ本文を読み取ります。  
  
 キューから読み取る場合は、2つのプロパティのうち1つだけを設定する必要がありますが、両方を設定できます。 一連の型は、2つのプロパティの組み合わせセットです。 使用するプロパティの決定は、アプリケーションに固有のものです。 メッセージ本文に、いずれかのプロパティの配列内のいずれの型とも一致しないスキーマを持つ型が含まれている場合、メッセージが読み取られると例外がスローされます。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> では、アセンブリ名を指定して、すべてのエントリが完全修飾されている必要があります。 さらに、複数の同時実行バージョンを使用する場合は、ターゲットの型名にもバージョン番号を追加する必要があります。  
  
 対象の型は、キューから読み取る場合にのみ必要です。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> および <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> のプロパティは、キューに書き込むように設定する必要はありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> プロパティが <see langword="null" /> である。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypes">
      <MemberSignature Language="C#" Value="public Type[] TargetTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] TargetTypes" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypes As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;Type ^&gt; ^ TargetTypes { cli::array &lt;Type ^&gt; ^ get(); void set(cli::array &lt;Type ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypes : Type[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供されたメッセージからフォーマッタで逆シリアル化できる型のセットを指定します。</summary>
        <value>メッセージの読み取り時に、メッセージ本文から逆シリアル化されるオブジェクトの型を指定する <see cref="T:System.Type" /> 型の配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> と <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> の両方のプロパティは、メッセージを逆シリアル化するときにどのスキーマを照合するかをフォーマッタに指示します。 これにより、フォーマッタがメッセージ本文を解釈できるようになります。  
  
 メッセージ本文でシリアル化されるインスタンスは、型配列で表されるスキーマのいずれかに準拠している必要があります。 <xref:System.Messaging.MessageQueue.Receive%2A> メソッドを使用してメッセージを読み取ると、メソッドは、識別されたスキーマに対応する型のオブジェクトを作成し、そのオブジェクトにメッセージ本文を読み取ります。  
  
 キューから読み取る場合は、2つのプロパティのうち1つだけを設定する必要がありますが、両方を設定できます。 一連の型は、2つのプロパティの組み合わせセットです。 使用するプロパティの決定は、アプリケーションに固有のものです。 メッセージ本文に、いずれかのプロパティの配列内のいずれの型とも一致しないスキーマを持つ型が含まれている場合、メッセージが読み取られると例外がスローされます。  
  
 対象の型は、キューから読み取る場合にのみ必要です。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> および <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> のプロパティは、キューに書き込むように設定する必要はありません。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>ではなく <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> を指定すると、読み取り時間ではなくコンパイル時に型の存在がチェックされるため、エラーの可能性が減少します。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>を使用する場合は、 C#コード `TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`で示す方法で、各オブジェクト (`MyClass`など) を一覧に追加できます。  
  
   
  
## Examples  
 次のコード例では、キューとの間で注文を含むメッセージを送受信します。  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> プロパティが <see langword="null" /> である。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (message As Message, obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit&#xA;override this.Write : System.Messaging.Message * obj -&gt; unit" Usage="xmlMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="T:System.Messaging.Message" /> プロパティにシリアル化されたオブジェクトが含まれる <see cref="P:System.Messaging.Message.Body" />。</param>
        <param name="obj">メッセージの本文にシリアル化される <see cref="T:System.Object" />。</param>
        <summary>オブジェクトをメッセージの本文にシリアル化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 キューへの書き込みを行うには、対象の型を指定する必要があります。この場合、読み取り時に必要になります。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> または <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> プロパティは、メッセージを逆シリアル化するときにのみ、フォーマッタによって使用されます。  
  
 <xref:System.Messaging.XmlMessageFormatter> は <xref:System.Xml.Serialization.XmlSerializer> クラスを使用します。これにより、シリアル化できる内容が定義されます。 シリアル化できるのは、パブリックフィールドとパブリックプロパティだけです。 SOAP プロトコルでエンコードされたスタイルを使用しない限り、構造体、配列を含む構造体、および構造体の配列はすべてシリアル化できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> パラメーターが <see langword="null" /> です。  
  
または 
<paramref name="obj" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>
