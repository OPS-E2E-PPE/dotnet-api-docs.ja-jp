<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8efdebcdda0d244a01f27597d636c3a6bc61870e" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953892" /></Metadata><TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="70918-101">メッセージ キュー内のメッセージを列挙するための順方向専用カーソルを提供します。</span><span class="sxs-lookup"><span data-stu-id="70918-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-102">キュー内のメッセージと動的にやり取りするには、<xref:System.Messaging.MessageEnumerator> を使用します。</span><span class="sxs-lookup"><span data-stu-id="70918-102">Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue.</span></span> <span data-ttu-id="70918-103"><xref:System.Messaging.MessageQueue> クラスを介して使用できるメソッドは、キュー内のメッセージの動的な一覧を指す <xref:System.Messaging.MessageEnumerator>、または指定したメソッドが呼び出された時点でキューの特定のインスタントスナップショットにコピーを格納する配列を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="70918-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="70918-104">静的スナップショットとは異なり、列挙子を使用してコレクションを変更できます。</span><span class="sxs-lookup"><span data-stu-id="70918-104">Unlike a static snapshot, an enumerator allows you to modify the collection.</span></span> <span data-ttu-id="70918-105"><xref:System.Messaging.MessageEnumerator>を使用すると、キューからメッセージを削除することができ、変更は直ちにキューに反映されます。</span><span class="sxs-lookup"><span data-stu-id="70918-105">Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.</span></span>  
  
 <span data-ttu-id="70918-106">列挙子は、キューに対してクエリを行うときに、キューからメッセージを削除しません。</span><span class="sxs-lookup"><span data-stu-id="70918-106">An enumerator does not remove the messages from the queue when it queries the queue.</span></span> <span data-ttu-id="70918-107">現在のカーソル位置にあるメッセージに関する情報を返しますが、メッセージはキューに残されます。</span><span class="sxs-lookup"><span data-stu-id="70918-107">It returns information about the message at the current cursor position, but it leaves the message in the queue.</span></span>  
  
 <span data-ttu-id="70918-108"><xref:System.Messaging.MessageEnumerator> はカーソルで、動的なリストの先頭に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="70918-108">A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="70918-109">リストの順序は、メッセージの優先度に従って、キュー内のメッセージの順序と同じです。</span><span class="sxs-lookup"><span data-stu-id="70918-109">The list order is the same as the order of the messages in the queue, according to message priority.</span></span> <span data-ttu-id="70918-110">カーソルをキューの最初のメッセージに移動するには、<xref:System.Messaging.MessageEnumerator.MoveNext%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="70918-110">You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="70918-111">列挙子が初期化されたら、<xref:System.Messaging.MessageEnumerator.MoveNext%2A> を使用して残りのメッセージを順番に進めることができます。</span><span class="sxs-lookup"><span data-stu-id="70918-111">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages.</span></span> <span data-ttu-id="70918-112"><xref:System.Messaging.MessageEnumerator.MoveNext%2A> メソッドにタイムアウトを渡すことによって、メッセージが使用可能になるまで待機するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="70918-112">You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.</span></span>  
  
 <span data-ttu-id="70918-113">列挙子は動的であるため、カーソルの現在の位置の後に追加されるメッセージ (たとえば、優先度が低いため) には、列挙子からアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="70918-113">Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</span></span> <span data-ttu-id="70918-114">カーソルの現在位置の前に挿入されたメッセージにはアクセスできません。</span><span class="sxs-lookup"><span data-stu-id="70918-114">A message that is inserted before the cursor's current position cannot be accessed.</span></span> <span data-ttu-id="70918-115"><xref:System.Messaging.MessageEnumerator>を使用して戻ることはできません。</span><span class="sxs-lookup"><span data-stu-id="70918-115">It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>.</span></span> <span data-ttu-id="70918-116">カーソルは、順方向専用の移動を可能にします。</span><span class="sxs-lookup"><span data-stu-id="70918-116">A cursor allows forward-only movement.</span></span> <span data-ttu-id="70918-117"><xref:System.Messaging.MessageEnumerator.Reset%2A> メソッドを使用すると、キューの先頭にカーソルを戻すことができます。</span><span class="sxs-lookup"><span data-stu-id="70918-117">The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="70918-118">特定のキューに対する <xref:System.Messaging.MessageEnumerator> のインスタンスは、独立して動作します。</span><span class="sxs-lookup"><span data-stu-id="70918-118">Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently.</span></span> <span data-ttu-id="70918-119">同じキューに適用される2つの <xref:System.Messaging.MessageEnumerator> インスタンスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="70918-119">You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue.</span></span> <span data-ttu-id="70918-120">1つの <xref:System.Messaging.MessageEnumerator> がキュー内のメッセージに対して行った変更は、2番目の列挙子が最初の列挙子の前に配置されている場合、2番目の列挙子に直ちに反映されます。</span><span class="sxs-lookup"><span data-stu-id="70918-120">The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</span></span> <span data-ttu-id="70918-121">ただし、2つの列挙子の位置が同じで、そのうちの1つがその位置にあるメッセージを削除した場合、他の列挙子が、現在削除されているメッセージの <xref:System.Messaging.MessageEnumerator.Current%2A> プロパティの値を取得しようとすると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="70918-121">However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="70918-122"><xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> を `true`に設定して <xref:System.Messaging.MessageQueue> のインスタンスを作成した場合、そのキューへの接続が確立されている間、他のアプリケーションが列挙子内のメッセージを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="70918-122">If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70918-123">次の例では、キュー内のメッセージの動的な一覧を取得し、<xref:System.Messaging.Message.Priority%2A> プロパティが <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>に設定されているすべてのメッセージをカウントします。</span><span class="sxs-lookup"><span data-stu-id="70918-123">The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70918-124">列挙子と関連付けられたリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="70918-124">Frees the resources associated with the enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-125">オペレーティングシステムは、カーソルの有効期間中、キューへの開いているハンドルを保持します。</span><span class="sxs-lookup"><span data-stu-id="70918-125">The operating system retains an open handle to the queue during the lifetime of the cursor.</span></span> <span data-ttu-id="70918-126">列挙子の操作が終了したら、<xref:System.Messaging.MessageEnumerator.Close%2A> を呼び出して、ハンドルに関連付けられているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="70918-126">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.Message" Usage="System.Messaging.MessageEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="70918-127">その列挙子が指している現在の <see cref="T:System.Messaging.Message" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="70918-127">Gets the current <see cref="T:System.Messaging.Message" /> that this enumerator points to.</span></span></summary>
        <value><span data-ttu-id="70918-128">現在のメッセージ。</span><span class="sxs-lookup"><span data-stu-id="70918-128">The current message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-129">列挙子が作成されると、最初のメッセージの前の位置にあるキューの先頭を指します。</span><span class="sxs-lookup"><span data-stu-id="70918-129">When the enumerator is created, it points to the head of the queue, at a location before the first message.</span></span> <span data-ttu-id="70918-130">この場合、<xref:System.Messaging.MessageEnumerator.Current%2A> は無効であり、アクセスされると例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="70918-130">In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="70918-131">キューの最初のメッセージにカーソルを配置するには、<xref:System.Messaging.MessageEnumerator.MoveNext%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="70918-131">You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="70918-132">最初に <see cref="P:System.Messaging.MessageEnumerator.Current" /> を呼び出す前に <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> を呼び出しました。</span><span class="sxs-lookup"><span data-stu-id="70918-132">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span></span> <span data-ttu-id="70918-133">カーソルは、メッセージ列挙体の最初の要素よりも前に位置しています。</span><span class="sxs-lookup"><span data-stu-id="70918-133">The cursor is located before the first element of the message enumeration.</span></span>  
  
<span data-ttu-id="70918-134">または</span><span class="sxs-lookup"><span data-stu-id="70918-134">-or-</span></span> 
<span data-ttu-id="70918-135"><see cref="P:System.Messaging.MessageEnumerator.Current" /> の呼び出しにより <see langword="false" /> (メッセージ列挙体の中の最後の要素よりも後にカーソルが位置していることを示す) が返された後に <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> を呼び出しました。</span><span class="sxs-lookup"><span data-stu-id="70918-135">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned <see langword="false" /> (indicating the cursor is located after the last element of the message enumeration.)</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="70918-136">列挙子が現在指しているメッセージは存在しません。</span><span class="sxs-lookup"><span data-stu-id="70918-136">The message the enumerator is currently pointing to no longer exists.</span></span> <span data-ttu-id="70918-137">削除されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="70918-137">It might have been deleted.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.CursorHandle : nativeint" Usage="System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="70918-138">キュー内でメッセージを参照するために使われるネイティブなメッセージ キュー カーソル ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="70918-138">Gets the native Message Queuing cursor handle used to browse messages in the queue.</span></span></summary>
        <value><span data-ttu-id="70918-139">ネイティブなカーソル ハンドル。</span><span class="sxs-lookup"><span data-stu-id="70918-139">The native cursor handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-140">このプロパティは、列挙体へのネイティブハンドルを格納します。</span><span class="sxs-lookup"><span data-stu-id="70918-140">This property contains the native handle to the enumeration.</span></span> <span data-ttu-id="70918-141">列挙子の操作が終了したら、<xref:System.Messaging.MessageEnumerator.Close%2A> を呼び出してこのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="70918-141">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="70918-142">ハンドルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="70918-142">The handle does not exist.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="70918-143"><see cref="T:System.Messaging.MessageEnumerator" /> で使用されたリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="70918-143">Releases the resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70918-144"><see cref="T:System.Messaging.MessageEnumerator" /> で使用されるすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="70918-144">Releases all resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-145"><xref:System.Messaging.MessageEnumerator.Dispose%2A> を呼び出すと、<xref:System.Messaging.MessageEnumerator> によって使用されるリソースを他の目的で再割り当てできます。</span><span class="sxs-lookup"><span data-stu-id="70918-145">Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="70918-146"><xref:System.Messaging.MessageEnumerator.Dispose%2A>の詳細については、「[アンマネージリソースのクリーンアップ](/dotnet/standard/garbage-collection/unmanaged)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="70918-146">For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/garbage-collection/unmanaged"><span data-ttu-id="70918-147">アンマネージ リソースのクリーンアップ</span><span class="sxs-lookup"><span data-stu-id="70918-147">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="70918-148">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70918-148"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="70918-149"><see cref="T:System.Messaging.MessageEnumerator" /> で使用されたアンマネージド リソースを解放し、必要に応じてマネージド リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="70918-149">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageEnumerator" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-150">このメソッドは、パブリックな <xref:System.Messaging.MessageEnumerator.Dispose%2A> メソッドと <xref:System.Object.Finalize%2A> メソッドによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="70918-150">This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="70918-151">`Dispose()` は、`disposing` パラメーターを `true`に設定して、protected `Dispose(Boolean)` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="70918-151">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="70918-152"><xref:System.Object.Finalize%2A> は `disposing` を `false`に設定して `Dispose` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="70918-152"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="70918-153">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Messaging.MessageEnumerator> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="70918-153">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references.</span></span> <span data-ttu-id="70918-154">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="70918-154">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="70918-155">
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="70918-155">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="70918-156"><see langword="Dispose(Boolean)" /> をオーバーライドする場合は、以前に <see langword="Dispose" /> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="70918-156">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="70918-157"><see langword="Dispose" />を実装する方法の詳細については、「 [Dispose メソッドの実装](/dotnet/standard/garbage-collection/implementing-dispose)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="70918-157">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
<span data-ttu-id="70918-158"><see langword="Dispose" /> と <see langword="Finalize" />の詳細については、「[アンマネージリソースのクリーンアップ](/dotnet/standard/garbage-collection/unmanaged)」と「 [Finalize メソッドのオーバーライド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="70918-158">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
        <related type="Article" href="/dotnet/standard/garbage-collection/implementing-dispose"><span data-ttu-id="70918-159">Dispose メソッドの実装</span><span class="sxs-lookup"><span data-stu-id="70918-159">Implementing a Dispose method</span></span></related>
        <related type="Article" href="/dotnet/standard/garbage-collection/unmanaged"><span data-ttu-id="70918-160">アンマネージ リソースのクリーンアップ</span><span class="sxs-lookup"><span data-stu-id="70918-160">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70918-161">列挙子に保持されているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="70918-161">Releases the resources held by the enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="70918-162">このメソッドは、<xref:System.Object.Finalize> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="70918-162">This method overrides <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="70918-163">アプリケーションコードはこのメソッドを呼び出すことはできません。オブジェクトの Finalize メソッドは、ガベージコレクションの実行中に、<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> メソッドの呼び出しによってガベージコレクターによる終了が無効にされていない限り、自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="70918-163">Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="70918-164">詳細については、「 [Finalize メソッドとデストラクター](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100))」、「[アンマネージリソースのクリーンアップ](/dotnet/standard/garbage-collection/unmanaged)」、および「 [finalize メソッドのオーバーライド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="70918-164">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100)), [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="70918-165">キュー内の次のメッセージに列挙子を進めます。</span><span class="sxs-lookup"><span data-stu-id="70918-165">Advances the enumerator to the next message in the queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70918-166">キュー内の次のメッセージに列挙子を進めます (そのメッセージが現在使用できる場合)。</span><span class="sxs-lookup"><span data-stu-id="70918-166">Advances the enumerator to the next message in the queue, if one is currently available.</span></span></summary>
        <returns><span data-ttu-id="70918-167">列挙子が次のメッセージに正常に進んだ場合は <see langword="true" />。列挙子がキューの最後に到達した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70918-167"><see langword="true" /> if the enumerator was successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-168">キューにメッセージがない場合、このオーバーロードはすぐにを返します。</span><span class="sxs-lookup"><span data-stu-id="70918-168">This overload returns immediately if there is no message in the queue.</span></span> <span data-ttu-id="70918-169">メッセージが到着するまで、指定した <xref:System.TimeSpan> を待機するオーバーロードもあります。</span><span class="sxs-lookup"><span data-stu-id="70918-169">There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.</span></span>  
  
 <span data-ttu-id="70918-170">キューが空であるか、コレクション内の最後の要素を超えて移動したためにメッセージが現在使用できない場合、<xref:System.Messaging.MessageEnumerator.MoveNext%2A> は呼び出し元のメソッドに `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="70918-170">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> returns `false` to the calling method.</span></span>  
  
 <span data-ttu-id="70918-171">作成時に、列挙子は、キューの最初のメッセージの前に配置されます。 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> の最初の呼び出しでは、キューの最初のメッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="70918-171">Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="70918-172">メッセージ キューに固有の例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="70918-172">An exception specific to Message Queuing was thrown.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.MoveNext : TimeSpan -&gt; bool" Usage="messageEnumerator.MoveNext timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="70918-173">列挙子がキューの最後に位置しているときにメッセージが使用できるようになるまで待機する <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="70918-173">The <see cref="T:System.TimeSpan" /> to wait for a message to be available if the enumerator is positioned at the end of the queue.</span></span></param>
        <summary><span data-ttu-id="70918-174">キュー内の次のメッセージに列挙子を進めます。</span><span class="sxs-lookup"><span data-stu-id="70918-174">Advances the enumerator to the next message in the queue.</span></span> <span data-ttu-id="70918-175">列挙子がキューの最後に位置しているときは、<see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> は、メッセージが使用できるようになるか指定のタイムアウト時間が経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="70918-175">If the enumerator is positioned at the end of the queue, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> waits until a message is available or the given timeout expires.</span></span></summary>
        <returns><span data-ttu-id="70918-176">列挙子が次のメッセージに正常に進んだ場合は <see langword="true" />。列挙子がキューの最後に到達し、<paramref name="timeout" /> パラメーターによって指定される時間内にメッセージが使用できるようにならない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70918-176"><see langword="true" /> if the enumerator successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <paramref name="timeout" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-177">このオーバーロードは、キューにメッセージがない場合、またはカーソルがキューの最後に到達した場合に待機します。</span><span class="sxs-lookup"><span data-stu-id="70918-177">This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</span></span> <span data-ttu-id="70918-178">キューが空であるか、コレクション内の最後の要素を超えて移動したためにメッセージが現在使用できない場合、<xref:System.Messaging.MessageEnumerator.MoveNext%2A> は指定されたタイムアウトを待機します。</span><span class="sxs-lookup"><span data-stu-id="70918-178">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.</span></span>  
  
 <span data-ttu-id="70918-179">カーソルが既にキューの末尾にある場合、<xref:System.Messaging.MessageEnumerator.MoveNext%2A> は、指定された時間間隔内に新しいメッセージが到着した場合にのみ `true` を返します。は、現在キューにあるすべてのメッセージよりも優先度が低く、キューの末尾に配置されます。</span><span class="sxs-lookup"><span data-stu-id="70918-179">If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</span></span> <span data-ttu-id="70918-180">後続のメッセージがキューに存在しない場合、パラメーターを指定しないオーバーロードは直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="70918-180">An overload with no parameter returns immediately if no further messages are in the queue.</span></span>  
  
 <span data-ttu-id="70918-181">作成時に、列挙子は、列挙体の最初のメッセージの前に配置され、<xref:System.Messaging.MessageEnumerator.MoveNext%2A> の最初の呼び出しによって、列挙体の最初のメッセージがビューに取り込まれます。</span><span class="sxs-lookup"><span data-stu-id="70918-181">Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="70918-182">タイムアウト パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="70918-182">The value specified for the timeout parameter is invalid.</span></span> <span data-ttu-id="70918-183">負数を表している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="70918-183">It might represent a negative number.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="70918-184">メッセージ キューに固有の例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="70918-184">An exception specific to Message Queuing was thrown.</span></span>  
  
 <span data-ttu-id="70918-185">または</span><span class="sxs-lookup"><span data-stu-id="70918-185">-or-</span></span>  
  
 <span data-ttu-id="70918-186">タイムアウトの時間が経過しました。</span><span class="sxs-lookup"><span data-stu-id="70918-186">The timeout has expired.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="70918-187">キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span><span class="sxs-lookup"><span data-stu-id="70918-187">Removes the current message from the queue and returns the message to the calling application.</span></span> <span data-ttu-id="70918-188">メッセージを削除すると、そのメッセージがキューから削除されます。</span><span class="sxs-lookup"><span data-stu-id="70918-188">Removing the message deletes it from the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-189">これらのオーバーロードについて説明されている動作は、<xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>を使用して <xref:System.Messaging.MessageEnumerator> インスタンスを取得する場合にのみ適用できます。</span><span class="sxs-lookup"><span data-stu-id="70918-189">The behavior described for these overloads is applicable only if the <xref:System.Messaging.MessageEnumerator> instance is retrieved by using the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span></span> <span data-ttu-id="70918-190">このメソッドは非推奨とされているため、<xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> を使用して <xref:System.Messaging.MessageEnumerator> のインスタンスを取得しないでください。</span><span class="sxs-lookup"><span data-stu-id="70918-190">Do not use <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> to retrieve an instance of <xref:System.Messaging.MessageEnumerator> as this method has been deprecated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : unit -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70918-191">トランザクション キューまたは非トランザクション キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span><span class="sxs-lookup"><span data-stu-id="70918-191">Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="70918-192">メッセージがキューに到達するまでのタイムアウトは指定されていません。</span><span class="sxs-lookup"><span data-stu-id="70918-192">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="70918-193">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="70918-193">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-194"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> は、カーソルの現在の場所でメッセージを削除して返します。</span><span class="sxs-lookup"><span data-stu-id="70918-194"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span>  
  
 <span data-ttu-id="70918-195">キュージャーナリングを使用している場合は、メッセージを削除すると、<xref:System.Messaging.MessageQueue> クラスの <xref:System.Messaging.MessageQueue.Receive%2A> メソッドと同様に、コピーがジャーナルキューに保持されます。</span><span class="sxs-lookup"><span data-stu-id="70918-195">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="70918-196">現在のメッセージを削除すると、カーソルは次のメッセージに移動します。</span><span class="sxs-lookup"><span data-stu-id="70918-196">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="70918-197"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>を呼び出した後に <xref:System.Messaging.MessageEnumerator.MoveNext%2A> を呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="70918-197">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="70918-198">トランザクションキューでこのオーバーロードを呼び出すと、メッセージキューによって1つの内部トランザクションが作成されます。</span><span class="sxs-lookup"><span data-stu-id="70918-198">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction"><span data-ttu-id="70918-199">メッセージが削除されるトランザクションを指定する <see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="70918-199">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction in which the message will be removed.</span></span></param>
        <summary><span data-ttu-id="70918-200">トランザクション キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span><span class="sxs-lookup"><span data-stu-id="70918-200">Removes the current message from a transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="70918-201">メッセージがキューに到達するまでのタイムアウトは指定されていません。</span><span class="sxs-lookup"><span data-stu-id="70918-201">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="70918-202">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="70918-202">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-203"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> は、`transaction` パラメーターによって定義された内部トランザクションコンテキストを使用して、カーソルの現在の場所でメッセージを削除して返します。</span><span class="sxs-lookup"><span data-stu-id="70918-203"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using the internal transaction context defined by the `transaction` parameter.</span></span>  
  
 <span data-ttu-id="70918-204">キュージャーナリングを使用している場合は、メッセージを削除すると、<xref:System.Messaging.MessageQueue> クラスの <xref:System.Messaging.MessageQueue.Receive%2A> メソッドと同様に、コピーがジャーナルキューに保持されます。</span><span class="sxs-lookup"><span data-stu-id="70918-204">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="70918-205">トランザクションキューを使用する場合、トランザクションをロールバックすると、<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> の呼び出しによって削除されたメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="70918-205">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="70918-206">トランザクションがコミットされるまで、削除を元に戻すことはできません。</span><span class="sxs-lookup"><span data-stu-id="70918-206">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="70918-207">現在のメッセージを削除すると、カーソルは次のメッセージに移動します。</span><span class="sxs-lookup"><span data-stu-id="70918-207">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="70918-208"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>を呼び出した後に <xref:System.Messaging.MessageEnumerator.MoveNext%2A> を呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="70918-208">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="70918-209"><paramref name="transaction" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="70918-209">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transactionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType"><span data-ttu-id="70918-210">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="70918-210">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="70918-211">キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span><span class="sxs-lookup"><span data-stu-id="70918-211">Removes the current message from a queue and returns the message to the calling application.</span></span> <span data-ttu-id="70918-212">メッセージがキューに到達するまでのタイムアウトは指定されていません。</span><span class="sxs-lookup"><span data-stu-id="70918-212">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="70918-213">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="70918-213">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-214"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> は、`transactionType` パラメーターで定義されているトランザクションコンテキストを使用して、カーソルの現在の場所でメッセージを削除して返します。</span><span class="sxs-lookup"><span data-stu-id="70918-214"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span>  
  
 <span data-ttu-id="70918-215">メッセージの受信に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、`transactionType` パラメーターに `Automatic` を指定します。</span><span class="sxs-lookup"><span data-stu-id="70918-215">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="70918-216">メッセージを1つの内部トランザクションとして受信する場合は、`Single` を指定します。</span><span class="sxs-lookup"><span data-stu-id="70918-216">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="70918-217">トランザクションコンテキストの外部にあるトランザクションキューからメッセージを受信する場合は、`None` を指定できます。</span><span class="sxs-lookup"><span data-stu-id="70918-217">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="70918-218">キュージャーナリングを使用している場合は、メッセージを削除すると、<xref:System.Messaging.MessageQueue> クラスの <xref:System.Messaging.MessageQueue.Receive%2A> メソッドと同様に、コピーがジャーナルキューに保持されます。</span><span class="sxs-lookup"><span data-stu-id="70918-218">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="70918-219">トランザクションキューを使用する場合、トランザクションをロールバックすると、<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> の呼び出しによって削除されたメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="70918-219">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="70918-220">トランザクションがコミットされるまで、削除を元に戻すことはできません。</span><span class="sxs-lookup"><span data-stu-id="70918-220">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="70918-221">現在のメッセージを削除すると、カーソルは次のメッセージに移動します。</span><span class="sxs-lookup"><span data-stu-id="70918-221">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="70918-222"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>を呼び出した後に <xref:System.Messaging.MessageEnumerator.MoveNext%2A> を呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="70918-222">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="70918-223"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="70918-223">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="70918-224">メッセージがキューに到達するまで待機する時間間隔。</span><span class="sxs-lookup"><span data-stu-id="70918-224">The interval of time to wait for a message to arrive in the queue.</span></span></param>
        <summary><span data-ttu-id="70918-225">キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span><span class="sxs-lookup"><span data-stu-id="70918-225">Removes the current message from the queue and returns the message to the calling application.</span></span> <span data-ttu-id="70918-226">削除するメッセージがある場合、メソッドはすぐにメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="70918-226">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="70918-227">削除するメッセージがない場合、メソッドは新しいメッセージが到達するまで指定のタイムアウト時間だけ待機します。</span><span class="sxs-lookup"><span data-stu-id="70918-227">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="70918-228">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="70918-228">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-229"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> は、カーソルの現在の場所でメッセージを削除して返します。</span><span class="sxs-lookup"><span data-stu-id="70918-229"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="70918-230">カーソルがキューの末尾にある場合、メソッドのこのオーバーロードは、メッセージが使用可能になるか、`timeout` パラメーターで指定された間隔が経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="70918-230">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="70918-231">キュージャーナリングを使用している場合は、メッセージを削除すると、<xref:System.Messaging.MessageQueue> クラスの <xref:System.Messaging.MessageQueue.Receive%2A> メソッドと同様に、コピーがジャーナルキューに保持されます。</span><span class="sxs-lookup"><span data-stu-id="70918-231">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="70918-232">現在のメッセージを削除すると、カーソルは次のメッセージに移動します。</span><span class="sxs-lookup"><span data-stu-id="70918-232">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="70918-233"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>を呼び出した後に <xref:System.Messaging.MessageEnumerator.MoveNext%2A> を呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="70918-233">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="70918-234">トランザクションキューでこのオーバーロードを呼び出すと、メッセージキューによって1つの内部トランザクションが作成されます。</span><span class="sxs-lookup"><span data-stu-id="70918-234">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="70918-235"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="70918-235">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="70918-236">タイムアウトの時間が経過しました。</span><span class="sxs-lookup"><span data-stu-id="70918-236">The timeout has expired.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="70918-237">削除するメッセージを待機する時間間隔。</span><span class="sxs-lookup"><span data-stu-id="70918-237">The interval of time to wait for the message to be removed.</span></span></param>
        <param name="transaction"><span data-ttu-id="70918-238">メッセージのトランザクション コンテキストを指定する <see cref="T:System.Messaging.MessageQueueTransaction" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="70918-238">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction context for the message.</span></span></param>
        <summary><span data-ttu-id="70918-239">トランザクション キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span><span class="sxs-lookup"><span data-stu-id="70918-239">Removes the current message from a transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="70918-240">削除するメッセージがある場合、メソッドはすぐにメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="70918-240">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="70918-241">削除するメッセージがない場合、メソッドは新しいメッセージが到達するまで指定のタイムアウト時間だけ待機します。</span><span class="sxs-lookup"><span data-stu-id="70918-241">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="70918-242">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="70918-242">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-243"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> は、カーソルの現在の場所でメッセージを削除して返します。</span><span class="sxs-lookup"><span data-stu-id="70918-243"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="70918-244">カーソルがキューの末尾にある場合、メソッドのこのオーバーロードは、メッセージが使用可能になるか、`timeout` パラメーターで指定された間隔が経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="70918-244">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="70918-245">トランザクションキューを使用する場合、トランザクションをロールバックすると、<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> の呼び出しによって削除されたメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="70918-245">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="70918-246">トランザクションがコミットされるまで、削除を元に戻すことはできません。</span><span class="sxs-lookup"><span data-stu-id="70918-246">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="70918-247">キュージャーナリングを使用している場合は、メッセージを削除すると、<xref:System.Messaging.MessageQueue> クラスの <xref:System.Messaging.MessageQueue.Receive%2A> メソッドと同様に、コピーがジャーナルキューに保持されます。</span><span class="sxs-lookup"><span data-stu-id="70918-247">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="70918-248">現在のメッセージを削除すると、カーソルは次のメッセージに移動します。</span><span class="sxs-lookup"><span data-stu-id="70918-248">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="70918-249"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>を呼び出した後に <xref:System.Messaging.MessageEnumerator.MoveNext%2A> を呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="70918-249">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="70918-250"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="70918-250">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="70918-251"><paramref name="transaction" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="70918-251">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="70918-252">タイムアウトの時間が経過しました。</span><span class="sxs-lookup"><span data-stu-id="70918-252">The timeout has expired.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="70918-253">削除するメッセージを待機する時間間隔。</span><span class="sxs-lookup"><span data-stu-id="70918-253">The interval of time to wait for the message to be removed.</span></span></param>
        <param name="transactionType"><span data-ttu-id="70918-254">メッセージと関連付けるトランザクション コンテキストの種類を示す、<see cref="T:System.Messaging.MessageQueueTransactionType" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="70918-254">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="70918-255">キューから現在のメッセージを削除し、そのメッセージを呼び出し元アプリケーションに返します。</span><span class="sxs-lookup"><span data-stu-id="70918-255">Removes the current message from a queue and returns the message to the calling application.</span></span> <span data-ttu-id="70918-256">削除するメッセージがある場合、メソッドはすぐにメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="70918-256">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="70918-257">削除するメッセージがない場合、メソッドは新しいメッセージが到達するまで指定のタイムアウト時間だけ待機します。</span><span class="sxs-lookup"><span data-stu-id="70918-257">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="70918-258">キューで利用できる最初のメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="70918-258">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-259"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> は、`transactionType` パラメーターで定義されているトランザクションコンテキストを使用して、カーソルの現在の場所でメッセージを削除して返します。</span><span class="sxs-lookup"><span data-stu-id="70918-259"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="70918-260">カーソルがキューの末尾にある場合、メソッドのこのオーバーロードは、メッセージが使用可能になるか、`timeout` パラメーターで指定された間隔が経過するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="70918-260">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="70918-261">メッセージの受信に使用するスレッドに既に外部トランザクションコンテキストがアタッチされている場合は、`transactionType` パラメーターに `Automatic` を指定します。</span><span class="sxs-lookup"><span data-stu-id="70918-261">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="70918-262">メッセージを1つの内部トランザクションとして受信する場合は、`Single` を指定します。</span><span class="sxs-lookup"><span data-stu-id="70918-262">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="70918-263">トランザクションコンテキストの外部にあるトランザクションキューからメッセージを受信する場合は、`None` を指定できます。</span><span class="sxs-lookup"><span data-stu-id="70918-263">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="70918-264">キュージャーナリングを使用している場合は、メッセージを削除すると、<xref:System.Messaging.MessageQueue> クラスの <xref:System.Messaging.MessageQueue.Receive%2A> メソッドと同様に、コピーがジャーナルキューに保持されます。</span><span class="sxs-lookup"><span data-stu-id="70918-264">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="70918-265">トランザクションキューを使用する場合、トランザクションをロールバックすると、<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> の呼び出しによって削除されたメッセージがキューに返されます。</span><span class="sxs-lookup"><span data-stu-id="70918-265">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="70918-266">トランザクションがコミットされるまで、削除を元に戻すことはできません。</span><span class="sxs-lookup"><span data-stu-id="70918-266">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="70918-267">現在のメッセージを削除すると、カーソルは次のメッセージに移動します。</span><span class="sxs-lookup"><span data-stu-id="70918-267">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="70918-268"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>を呼び出した後に <xref:System.Messaging.MessageEnumerator.MoveNext%2A> を呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="70918-268">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="70918-269"><paramref name="timeout" /> パラメーターに指定された値が無効です。</span><span class="sxs-lookup"><span data-stu-id="70918-269">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="70918-270">タイムアウトの時間が経過しました。</span><span class="sxs-lookup"><span data-stu-id="70918-270">The timeout has expired.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="70918-271"><paramref name="transactionType" /> パラメーターが、<see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーの 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="70918-271">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70918-272">キューの先頭を指すように現在の列挙子をリセットします。</span><span class="sxs-lookup"><span data-stu-id="70918-272">Resets the current enumerator so it points to the head of the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70918-273">列挙子は、前方方向にのみ移動できます。</span><span class="sxs-lookup"><span data-stu-id="70918-273">An enumerator can only move in a forward direction.</span></span> <span data-ttu-id="70918-274">このメソッドを使用して、キューの先頭からやり直します。</span><span class="sxs-lookup"><span data-stu-id="70918-274">Use this method to start over at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="70918-275"><xref:System.Messaging.MessageEnumerator.Reset%2A>を呼び出すと、カーソルは最初のメッセージを指します。</span><span class="sxs-lookup"><span data-stu-id="70918-275">After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message.</span></span> <span data-ttu-id="70918-276"><xref:System.Messaging.MessageEnumerator.Reset%2A> を呼び出した後に <xref:System.Messaging.MessageEnumerator.MoveNext%2A> を呼び出して、キュー内の最初のメッセージにカーソルを移動する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="70918-276">You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IEnumerator.Current : obj" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="70918-277">現在のカーソル位置にあるメッセージを参照する <see cref="T:System.Messaging.Message" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="70918-277">Returns a <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span></span></summary>
        <value><span data-ttu-id="70918-278">現在のカーソル位置にあるメッセージを参照する <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="70918-278">A <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="70918-279">最初に <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> を呼び出す前に、このプロパティにアクセスしました。</span><span class="sxs-lookup"><span data-stu-id="70918-279">You accessed this property before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span></span> <span data-ttu-id="70918-280">カーソルは、メッセージ列挙体の最初の要素よりも前に位置しています。あるいは、<see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> の呼び出しにより false (メッセージ列挙体の中の最後の要素よりも後にカーソルが位置していることを示す) が返された後に、このプロパティにアクセスしました。</span><span class="sxs-lookup"><span data-stu-id="70918-280">The cursor is located before the first element of the message enumeration.-or- You accessed this property after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned false (indicating the cursor is located after the last element of the message enumeration.)</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="70918-281">列挙子が現在指しているメッセージは存在しません。</span><span class="sxs-lookup"><span data-stu-id="70918-281">The message the enumerator is currently pointing to no longer exists.</span></span> <span data-ttu-id="70918-282">削除されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="70918-282">It might have been deleted.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
