<Type Name="IInvokeProvider" FullName="System.Windows.Automation.Provider.IInvokeProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="672a5e0618bf218434890595f3a6f9184b5442f2" /><Meta Name="ms.sourcegitcommit" Value="83d757eaee63e682417f41094d711281691d9aba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/10/2020" /><Meta Name="ms.locfileid" Value="78956306" /></Metadata><TypeSignature Language="C#" Value="public interface IInvokeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInvokeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IInvokeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInvokeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInvokeProvider" />
  <TypeSignature Language="F#" Value="type IInvokeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3ac0f-101">明確な 1 つのアクションを開始または実行し、アクティブになったときの状態を保持しないコントロールへの UI オートメーション クライアント アクセスをサポートするメソッドとプロパティを公開します。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-101">Exposes methods and properties to support UI Automation client access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ac0f-102"><xref:System.Windows.Automation.InvokePattern> コントロールパターンをサポートする必要がある UI オートメーションプロバイダーに実装されます。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.InvokePattern> control pattern.</span></span>  
  
 <span data-ttu-id="3ac0f-103">別のコントロール パターン プロバイダーを通じて同じ動作が公開されていない場合、コントロールは <xref:System.Windows.Automation.Provider.IInvokeProvider> を実装します。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-103">Controls implement <xref:System.Windows.Automation.Provider.IInvokeProvider> if the same behavior is not exposed through another control pattern provider.</span></span> <span data-ttu-id="3ac0f-104">たとえば、コントロールの <xref:System.Windows.Automation.InvokePattern.Invoke%2A> メソッドが <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> メソッドまたは <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> メソッドと同じ処理を実行する場合、コントロールに <xref:System.Windows.Automation.Provider.IInvokeProvider>を実装しないようにします。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-104">For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control should not implement <xref:System.Windows.Automation.Provider.IInvokeProvider>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.InvokePattern" />
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-overview.md"><span data-ttu-id="3ac0f-105">UI オートメーション コントロール パターンの概要</span><span class="sxs-lookup"><span data-stu-id="3ac0f-105">UI Automation Control Patterns Overview</span></span></related>
    <related type="Article" href="~/docs/framework/ui-automation/server-side-ui-automation-provider-implementation.md"><span data-ttu-id="3ac0f-106">サーバー側 UI オートメーションプロバイダーの実装</span><span class="sxs-lookup"><span data-stu-id="3ac0f-106">Server-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="~/docs/framework/ui-automation/client-side-ui-automation-provider-implementation.md"><span data-ttu-id="3ac0f-107">クライアント側 UI オートメーションプロバイダーの実装</span><span class="sxs-lookup"><span data-stu-id="3ac0f-107">Client-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="~/docs/framework/ui-automation/support-control-patterns-in-a-ui-automation-provider.md"><span data-ttu-id="3ac0f-108">UI オートメーション プロバイダーでのコントロール パターンのサポート</span><span class="sxs-lookup"><span data-stu-id="3ac0f-108">Support Control Patterns in a UI Automation Provider</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/e5b1e239-49f8-468e-bfec-1fba02ec9ac4"><span data-ttu-id="3ac0f-109">UI オートメーション Invoke コントロール パターンの実装</span><span class="sxs-lookup"><span data-stu-id="3ac0f-109">Implementing the UI Automation Invoke Control Pattern</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberSignature Language="F#" Value="abstract member Invoke : unit -&gt; unit" Usage="iInvokeProvider.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3ac0f-110">要求を送信してコントロールをアクティブ化し、その 1 つの明確なアクションを開始します。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-110">Sends a request to activate a control and initiate its single, unambiguous action.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ac0f-111"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> は非同期呼び出しであるため、クライアントをブロックせずに即座に戻る必要があります。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-111"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> is an asynchronous call and must return immediately without blocking.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3ac0f-112">呼び出されたときにモーダル ダイアログを直接的または間接的に表示するコントロールでは、この動作は特に重要です。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-112">This behavior is particularly critical for controls that, directly or indirectly, launch a modal dialog when invoked.</span></span> <span data-ttu-id="3ac0f-113">イベントを発生させたすべての UI オートメーション クライアントは、モーダル ダイアログが閉じられるまで、ブロックされたままになります。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-113">Any UI Automation client that instigated the event will remain blocked until the modal dialog is closed.</span></span>  
  
 <span data-ttu-id="3ac0f-114"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> は、<xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-114"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> raises the <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> event.</span></span> <span data-ttu-id="3ac0f-115">可能な場合は、コントロールが関連するアクションを完了した後にイベントを発生させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-115">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="3ac0f-116"><xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> は、次のシナリオで <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> 要求を処理する前に発生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-116"><xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> should be raised before servicing the <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> request in the following scenarios:</span></span>  
  
-   <span data-ttu-id="3ac0f-117">処理が完了するまで待機することが不可能または非現実的である。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-117">It is not possible or practical to wait until the action is complete.</span></span>  
  
-   <span data-ttu-id="3ac0f-118">処理にユーザー操作が必要になる。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-118">The action requires user interaction.</span></span>  
  
-   <span data-ttu-id="3ac0f-119">アクションは時間がかかり、呼び出し元のクライアントが長時間ブロックされるようになります。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-119">The action is time-consuming and will cause the calling client to block for a significant length of time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3ac0f-120">次の例では、コントロールの MouseDown イベントハンドラーに <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> メソッドを実装しています。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-120">The following example implements the <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> method on the MouseDown event handler of a control.</span></span> <span data-ttu-id="3ac0f-121">`providerControl` は、クラスの構築時に初期化されたメンバー変数であると仮定します。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-121">Assume that `providerControl` is a member variable that was initialized when the class was constructed.</span></span>  
  
 [!code-csharp[UIAProvider_snip#106](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAProvider_snip/CSharp/Invoker.cs#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException"><span data-ttu-id="3ac0f-122">コントロールが有効ではない。</span><span class="sxs-lookup"><span data-stu-id="3ac0f-122">If the control is not enabled.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/e5b1e239-49f8-468e-bfec-1fba02ec9ac4"><span data-ttu-id="3ac0f-123">UI オートメーション Invoke コントロール パターンの実装</span><span class="sxs-lookup"><span data-stu-id="3ac0f-123">Implementing the UI Automation Invoke Control Pattern</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
