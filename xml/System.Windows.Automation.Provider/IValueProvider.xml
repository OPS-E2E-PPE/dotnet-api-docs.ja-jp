<Type Name="IValueProvider" FullName="System.Windows.Automation.Provider.IValueProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="171e2605a05b96d68b043c1094c31b33913334cf" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83978309" /></Metadata><TypeSignature Language="C#" Value="public interface IValueProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IValueProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IValueProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IValueProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IValueProvider" />
  <TypeSignature Language="F#" Value="type IValueProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("c7935180-6fb3-4201-b174-7df73adbf64a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d9b85-101">1 つの範囲に広がらず、文字列として表すことができる固有の値を持つコントロールへの、UI オートメーション クライアントのアクセスをサポートするメソッドとプロパティを公開します。</span><span class="sxs-lookup"><span data-stu-id="d9b85-101">Exposes methods and properties to support UI Automation client access to controls having an intrinsic value that does not span a range and that can be represented as a string.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9b85-102">コントロールの値は、コントロールとその設定に応じて編集できます。</span><span class="sxs-lookup"><span data-stu-id="d9b85-102">The value of the control may or may not be editable depending on the control and its settings.</span></span>  
  
 <span data-ttu-id="d9b85-103"><xref:System.Windows.Automation.ValuePattern> コントロールパターンをサポートする必要がある UI オートメーションプロバイダーに実装されます。</span><span class="sxs-lookup"><span data-stu-id="d9b85-103">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.ValuePattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.ValuePattern" />
    <related type="Article" href="/dotnet/framework/ui-automation/ui-automation-control-patterns-overview"><span data-ttu-id="d9b85-104">UI オートメーション コントロール パターンの概要</span><span class="sxs-lookup"><span data-stu-id="d9b85-104">UI Automation Control Patterns Overview</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/server-side-ui-automation-provider-implementation"><span data-ttu-id="d9b85-105">サーバー側 UI オートメーションプロバイダーの実装</span><span class="sxs-lookup"><span data-stu-id="d9b85-105">Server-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/client-side-ui-automation-provider-implementation"><span data-ttu-id="d9b85-106">クライアント側 UI オートメーションプロバイダーの実装</span><span class="sxs-lookup"><span data-stu-id="d9b85-106">Client-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/support-control-patterns-in-a-ui-automation-provider"><span data-ttu-id="d9b85-107">UI オートメーション プロバイダーでのコントロール パターンのサポート</span><span class="sxs-lookup"><span data-stu-id="d9b85-107">Support Control Patterns in a UI Automation Provider</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/b0fcdd87-3add-4345-bca9-e891205e02ba"><span data-ttu-id="d9b85-108">UI オートメーション Value コントロール パターンの実装</span><span class="sxs-lookup"><span data-stu-id="d9b85-108">Implementing the UI Automation Value Control Pattern</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Automation.Provider.IValueProvider.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d9b85-109">コントロールの値が読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d9b85-109">Gets a value that specifies whether the value of a control is read-only.</span></span></summary>
        <value><span data-ttu-id="d9b85-110">値が読み取り専用の場合は <see langword="true" />。変更可能な場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d9b85-110"><see langword="true" /> if the value is read-only; <see langword="false" /> if it can be modified.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9b85-111"><xref:System.Windows.Automation.AutomationElement.IsEnabledProperty> を呼び出せるようにするには、コントロールの `true` を <xref:System.Windows.Automation.ValuePattern.IsReadOnlyProperty> に設定し、 `false` を <xref:System.Windows.Automation.Provider.IValueProvider.SetValue%2A>に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d9b85-111">A control should have its <xref:System.Windows.Automation.AutomationElement.IsEnabledProperty> set to `true` and its <xref:System.Windows.Automation.ValuePattern.IsReadOnlyProperty> set to `false` before allowing a call to <xref:System.Windows.Automation.Provider.IValueProvider.SetValue%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9b85-112">次の例では、値を変更できるコントロールに対してこのメソッドを実装しています。</span><span class="sxs-lookup"><span data-stu-id="d9b85-112">The following example shows an implementation of this method for a control that allows its value to be changed.</span></span>  
  
 [!code-csharp[UIAIValueProvider_snip#IsReadOnly](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIValueProvider_snip/CSharp/ValueFragment.cs#isreadonly)]
 [!code-vb[UIAIValueProvider_snip#IsReadOnly](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIValueProvider_snip/visualbasic/valuefragment.vb#isreadonly)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : string -&gt; unit" Usage="iValueProvider.SetValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d9b85-113">設定する値。</span><span class="sxs-lookup"><span data-stu-id="d9b85-113">The value to set.</span></span> <span data-ttu-id="d9b85-114">プロバイダーは、値を適切なデータ型に変換します。</span><span class="sxs-lookup"><span data-stu-id="d9b85-114">The provider is responsible for converting the value to the appropriate data type.</span></span></param>
        <summary><span data-ttu-id="d9b85-115">コントロールの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="d9b85-115">Sets the value of a control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9b85-116">単一行のエディット コントロールは、そのコンテンツへのプログラムによるアクセスをサポートするために、 <xref:System.Windows.Automation.Provider.IValueProvider>を実装します。</span><span class="sxs-lookup"><span data-stu-id="d9b85-116">Single-line edit controls support programmatic access to their contents by implementing <xref:System.Windows.Automation.Provider.IValueProvider>.</span></span> <span data-ttu-id="d9b85-117">一方、複数行のエディット コントロールは <xref:System.Windows.Automation.Provider.IValueProvider>を実装しません。代わりに <xref:System.Windows.Automation.Provider.ITextProvider>を実装して、そのコンテンツへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="d9b85-117">However, multi-line edit controls do not implement <xref:System.Windows.Automation.Provider.IValueProvider>; instead they provide access to their content by implementing <xref:System.Windows.Automation.Provider.ITextProvider>.</span></span>  
  
 <span data-ttu-id="d9b85-118"><xref:System.Windows.Automation.ControlType.ListItem> や <xref:System.Windows.Automation.ControlType.TreeItem> などのコントロールは、コントロールの現在の編集モードに関係なく、いずれかの項目の値が編集可能である場合、<xref:System.Windows.Automation.Provider.IValueProvider> を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d9b85-118">Controls such as <xref:System.Windows.Automation.ControlType.ListItem> and <xref:System.Windows.Automation.ControlType.TreeItem> must implement <xref:System.Windows.Automation.Provider.IValueProvider> if the value of any of the items is editable, regardless of the current edit mode of the control.</span></span> <span data-ttu-id="d9b85-119">子項目が編集可能な場合は、親コントロールも <xref:System.Windows.Automation.Provider.IValueProvider> を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d9b85-119">The parent control must also implement <xref:System.Windows.Automation.Provider.IValueProvider> if the child items are editable.</span></span>  
  
 <span data-ttu-id="d9b85-120">![編集可能なリスト項目。](~/add/media/uia-valuepattern-editable-listitem.PNG "編集可能なリスト項目。")</span><span class="sxs-lookup"><span data-stu-id="d9b85-120">![Editable list item.](~/add/media/uia-valuepattern-editable-listitem.PNG "Editable list item.")</span></span>  
<span data-ttu-id="d9b85-121">編集可能なリスト項目の例</span><span class="sxs-lookup"><span data-stu-id="d9b85-121">Example of an Editable List Item</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9b85-122">次のコード例は、値を制限された長さの文字列に設定できるようにするカスタムコントロールを示しています。</span><span class="sxs-lookup"><span data-stu-id="d9b85-122">The following example code demonstrates a custom control that allows its value to be set to a string of limited length.</span></span>  
  
 [!code-csharp[UIAIValueProvider_snip#SetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIValueProvider_snip/CSharp/ValueFragment.cs#setvalue)]
 [!code-vb[UIAIValueProvider_snip#SetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIValueProvider_snip/visualbasic/valuefragment.vb#setvalue)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d9b85-123">ロケールに固有の情報が、誤った形式でコントロールに渡された場合 (誤った日付形式など)。</span><span class="sxs-lookup"><span data-stu-id="d9b85-123">If locale-specific information is passed to a control in an incorrect format such as an incorrectly formatted date.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9b85-124">新しい値を、文字列からコントロールが認識する形式に変換できない場合。</span><span class="sxs-lookup"><span data-stu-id="d9b85-124">If a new value cannot be converted from a string to a format the control recognizes.</span></span></exception>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException"><span data-ttu-id="d9b85-125">有効になっていないコントロールの操作が試行された場合。</span><span class="sxs-lookup"><span data-stu-id="d9b85-125">When an attempt is made to manipulate a control that is not enabled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IValueProvider.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Windows.Automation.Provider.IValueProvider.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d9b85-126">コントロールの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d9b85-126">Gets the value of the control.</span></span></summary>
        <value><span data-ttu-id="d9b85-127">文字列としてのコントロールの値。</span><span class="sxs-lookup"><span data-stu-id="d9b85-127">The value of the control as a string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9b85-128">単一行のエディットコントロールは、<xref:System.Windows.Automation.Provider.IValueProvider> (<xref:System.Windows.Automation.Provider.ITextProvider>に加えて) を実装することによって、コンテンツへのプログラムによるアクセスをサポートします。</span><span class="sxs-lookup"><span data-stu-id="d9b85-128">Single-line edit controls support programmatic access to their contents by implementing <xref:System.Windows.Automation.Provider.IValueProvider> (in addition to <xref:System.Windows.Automation.Provider.ITextProvider>).</span></span> <span data-ttu-id="d9b85-129">ただし、複数行のエディットコントロールは <xref:System.Windows.Automation.Provider.IValueProvider>を実装しません。</span><span class="sxs-lookup"><span data-stu-id="d9b85-129">However, multi-line edit controls do not implement <xref:System.Windows.Automation.Provider.IValueProvider>.</span></span>  
  
 <span data-ttu-id="d9b85-130">複数行の編集コントロールのテキストコンテンツを取得するには、コントロールが <xref:System.Windows.Automation.Provider.ITextProvider>を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d9b85-130">To retrieve the textual contents of multi-line edit controls, the controls must implement <xref:System.Windows.Automation.Provider.ITextProvider>.</span></span> <span data-ttu-id="d9b85-131">ただし、 <xref:System.Windows.Automation.Provider.ITextProvider> はコントロールの値の設定はサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="d9b85-131">However, <xref:System.Windows.Automation.Provider.ITextProvider> does not support setting the value of a control.</span></span>  
  
 <span data-ttu-id="d9b85-132"><xref:System.Windows.Automation.Provider.IValueProvider> は、書式設定情報や部分文字列の値の取得をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="d9b85-132"><xref:System.Windows.Automation.Provider.IValueProvider> does not support the retrieval of formatting information or substring values.</span></span> <span data-ttu-id="d9b85-133">このようなシナリオでは <xref:System.Windows.Automation.Provider.ITextProvider> を実装します。</span><span class="sxs-lookup"><span data-stu-id="d9b85-133">Implement <xref:System.Windows.Automation.Provider.ITextProvider> in these scenarios.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9b85-134">次の例は、その値を取得できるようにするコントロールのこのメソッドの実装を示しています。</span><span class="sxs-lookup"><span data-stu-id="d9b85-134">The following example shows an implementation of this method for a control that allows its value to be retrieved.</span></span>  
  
 [!code-csharp[UIAIValueProvider_snip#Value](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIValueProvider_snip/CSharp/ValueFragment.cs#value)]
 [!code-vb[UIAIValueProvider_snip#Value](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIValueProvider_snip/visualbasic/valuefragment.vb#value)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
