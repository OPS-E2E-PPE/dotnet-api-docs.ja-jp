<Type Name="FormsAuthentication" FullName="System.Web.Security.FormsAuthentication">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ff1d65750ec23d52fc93356a5fbbcd233711d01c" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73379857" /></Metadata><TypeSignature Language="C#" Value="public sealed class FormsAuthentication" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FormsAuthentication extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.FormsAuthentication" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FormsAuthentication" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormsAuthentication sealed" />
  <TypeSignature Language="F#" Value="type FormsAuthentication = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Web アプリケーションのフォーム認証サービスを管理します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 フォーム認証を使用すると、Windows 認証を必要としない Web アプリケーションに対してユーザーとパスワードの検証を行うことができます。 フォーム認証では、ユーザー情報は <xref:System.Web.Security.Membership> データベースなどの外部データソース、またはアプリケーションの構成ファイルに格納されます。 ユーザーが認証されると、フォーム認証は、認証されたユーザーが各要求で資格情報を提供する必要がないように、cookie または URL に認証チケットを保持します。  
  
 フォーム認証を有効にするには、[認証](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/532aee0e(v%3dvs.100))構成要素の `mode` 属性を `Forms`に設定します。 次の例に示すように、[承認](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/8d82143t(v%3dvs.100))構成要素を使用して、不明なユーザーの要求を拒否することにより、アプリケーションへのすべての要求に有効なユーザー認証チケットが含まれていることを要求できます。  
  
```  
<system.web>  
  <authentication mode="Forms">  
    <forms loginUrl="login.aspx" />  
  </authentication>  
  <authorization>  
    <deny users="?" />  
  </authorization>  
</system.web>  
```  
  
 前の例では、アプリケーションの一部である ASP.NET ページに対する要求は、フォーム認証によって提供される有効なユーザー名を必要とします。 ユーザー名が存在しない場合は、構成されている <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>に要求がリダイレクトされます。  
  
 <xref:System.Web.Security.FormsAuthentication> クラスは、ユーザーを認証するアプリケーションで使用できるメソッドとプロパティへのアクセスを提供します。 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドは、ユーザーがアプリケーションにログインするために、構成された <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> にブラウザーをリダイレクトします。 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは、認証されたユーザーを、要求された元の保護された URL または <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>にリダイレクトします。 必要に応じて、フォーム認証チケットを管理するためのメソッドも用意されています。  
  
   
  
## Examples  
 次のコード例は、フォーム認証に ASP.NET membership プロバイダーを使用し、すべてのユーザーを認証する必要がある ASP.NET アプリケーションの web.config ファイルを示しています。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <add name="SqlProvider"  
          type="System.Web.Security.SqlMembershipProvider"  
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="true"  
          requiresQuestionAndAnswer="true"  
          passwordFormat="Hashed"  
          applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
 次のコード例は、フォーム認証と ASP.NET メンバーシップを使用する ASP.NET アプリケーションのログインページを示しています。  
  
> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Web.AspNetHostingPermission">ホストされた環境で <see cref="T:System.Web.Security.FormsAuthentication" /> クラスを使用するには 要求の値: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。 アクセス許可値: <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" />。</permission>
    <related type="Article" href="https://msdn.microsoft.com/library/77e21ba2-bad1-4967-a8ec-74942dea7e47">フォーム認証プロバイダー</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormsAuthentication ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormsAuthentication();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.Security.FormsAuthentication" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、コードから使用するためのものではありません。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public static bool Authenticate (string name, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Authenticate(string name, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Authenticate(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Authenticate (name As String, password As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Authenticate(System::String ^ name, System::String ^ password);" />
      <MemberSignature Language="F#" Value="static member Authenticate : string * string -&gt; bool" Usage="System.Web.Security.FormsAuthentication.Authenticate (name, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("The recommended alternative is to use the Membership APIs, such as Membership.ValidateUser. For more information, see https://go.microsoft.com/fwlink/?LinkId=252463.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">ユーザー名。</param>
        <param name="password">ユーザーのパスワード。</param>
        <summary>アプリケーションの構成ファイルに格納されている資格情報に対してユーザー名とパスワードを検証します。</summary>
        <returns>ユーザー名とパスワードが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 認証方法は、アプリケーション構成ファイルの[資格情報](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e01fc50a(v%3dvs.100))セクションに格納されているユーザーの資格情報を検証します。 または、ASP.NET メンバーシップを使用してユーザーの資格情報を格納し、<xref:System.Web.Security.MembershipProvider.ValidateUser%2A> を呼び出して資格情報を確認することもできます。 詳細については、「[メンバーシップを使用](https://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd)したユーザーの管理」を参照してください。  
  
 セキュリティを強化するために、<xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A> メソッドを使用して、アプリケーションの構成ファイルに格納されているパスワードを暗号化することができます。  
  
   
  
## Examples  
 次のコード例は、アプリケーションの web.config ファイルに格納されているユーザー資格情報を示しています。 パスワードの値は、<xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A> メソッドを使用してハッシュされています。  

 この例では、SHA1 を使用します。 SHA1 との競合問題のため、Microsoft では SHA256 を推奨しています。  
  
 `<authentication mode="Forms">`  
  
 `<forms loginUrl="login.aspx">`  
  
 `<credentials passwordFormat="SHA1">`  
  
 `<user name="user1"   password="27CE4CA7FBF00685AF2F617E3F5BBCAFF7B7403C" />`  
  
 `<user name="user2"   password="D108F80936F78DFDD333141EBC985B0233A30C7A" />`  
  
 `<user name="user3" password="7BDB09781A3F23885CD43177C0508B375CB1B7E9"/>`  
  
 `</credentials>`  
  
 `</forms>`  
  
 `</authentication>`  
  
 次のコード例は、<xref:System.Web.Security.FormsAuthentication.Authenticate%2A> メソッドを使用してユーザーの資格情報を検証するログインページを示しています。  
  
> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="CookieDomain">
      <MemberSignature Language="C#" Value="public static string CookieDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieDomain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieDomain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieDomain { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieDomain : string" Usage="System.Web.Security.FormsAuthentication.CookieDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォーム認証クッキーのドメインの値を取得します。</summary>
        <value>フォーム認証クッキーの <see cref="P:System.Web.HttpCookie.Domain" />。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.CookieDomain%2A> プロパティ値は、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の `domain` 属性を使用して、ASP.NET アプリケーションの構成ファイルで設定されます。 <xref:System.Web.Security.FormsAuthentication.CookieDomain%2A> プロパティ値によって、cookie が使用される <xref:System.Web.HttpCookie.Domain%2A> が決まります。  
  
   
  
## Examples  
 次のコード例では、web.config ファイルの `domain` 属性を設定します。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    domain="contoso.com" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="CookieMode">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookieMode CookieMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.HttpCookieMode CookieMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieMode As HttpCookieMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::HttpCookieMode CookieMode { System::Web::HttpCookieMode get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieMode : System.Web.HttpCookieMode" Usage="System.Web.Security.FormsAuthentication.CookieMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションが Cookie なしのフォーム認証に対して構成されているかどうかを示す値を取得します。</summary>
        <value>アプリケーションが cookieless フォーム認証用に構成されているかどうかを示す <see cref="T:System.Web.HttpCookieMode" /> 値の 1 つ。 既定値は、<see cref="F:System.Web.HttpCookieMode.UseDeviceProfile" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> プロパティは、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の `cookieless` 属性の値を反映します。 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> プロパティは、<xref:System.Web.Security.FormsAuthenticationTicket> 値がブラウザーのセッション cookie に格納されるか、または <xref:System.Web.HttpRequest.QueryString%2A> プロパティに格納されるかを決定します。  
  
> [!NOTE]
>  <xref:System.Web.Security.FormsAuthenticationTicket> 値が URI に格納されている場合、生成される URI の長さが許容最大長を超えている可能性があります。 これは、<xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> プロパティがアプリケーション名に設定されていて、アプリケーション名が長い (40 以上の文字) 場合、アプリケーションのユーザー名が長い場合、または <xref:System.Web.Security.FormsAuthenticationTicket.UserData%2A> 文字列が <xref:System.Web.Security.FormsAuthenticationTicket> 値に格納されている場合に発生する可能性が最も高くなります。 生成された URI が長すぎる場合、Web サーバーは `400 - Bad Request` エラーを返します。  
  
   
  
## Examples  
 次のコード例では、`cookieless` 属性を Web.config ファイルで `AutoDetect` に設定します。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="AutoDetect" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="CookieSameSite">
      <MemberSignature Language="C#" Value="public static System.Web.SameSiteMode CookieSameSite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.SameSiteMode CookieSameSite" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieSameSite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSameSite As SameSiteMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::SameSiteMode CookieSameSite { System::Web::SameSiteMode get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieSameSite : System.Web.SameSiteMode" Usage="System.Web.Security.FormsAuthentication.CookieSameSite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SameSiteMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cookie の SameSite 属性の値を取得または設定します。</summary>
        <value>Cookie の強制モードを表す列挙値の 1 つ。 既定値は <see cref="F:System.Web.SameSiteMode.Lax" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CookiesSupported">
      <MemberSignature Language="C#" Value="public static bool CookiesSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookiesSupported" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookiesSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiesSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookiesSupported { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookiesSupported : bool" Usage="System.Web.Security.FormsAuthentication.CookiesSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションが Cookie なしのフォーム認証をサポートするように構成されているかどうかを示す値を取得します。</summary>
        <value>アプリケーションが cookieless フォーム認証をサポートするように構成されている場合は <see langword="false" />。それ以外の場合は <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> プロパティは、<xref:System.Web.Security.FormsAuthentication.CookieMode%2A> の値とブラウザーの機能に基づいて値を返します。  
  
-   <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> プロパティが <xref:System.Web.HttpCookieMode.UseCookies>に設定されている場合、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> プロパティは `true`を返します。  
  
-   <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> プロパティが <xref:System.Web.HttpCookieMode.UseUri>に設定されている場合、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> プロパティは `false`を返します。  
  
-   <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> プロパティが <xref:System.Web.HttpCookieMode.AutoDetect>に設定されている場合、ブラウザーが cookie をサポートし、cookie が有効になっていると、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> プロパティは `true` を返します。それ以外の場合、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> プロパティは `false`を返します。  
  
-   <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> プロパティが <xref:System.Web.HttpCookieMode.UseDeviceProfile>に設定されている場合、現在の <xref:System.Web.HttpRequest.Browser%2A> の <xref:System.Web.HttpContext.Request%2A> が cookie と cookie の両方をサポートしている場合は、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> プロパティによって `true` が返されます。それ以外の場合、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> プロパティは `false`を返します。  
  
   
  
## Examples  
 次のコード例では、`cookieless` 属性を Web.config ファイルで <xref:System.Web.HttpCookieMode.UseUri> に設定します。 この構成によって、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> プロパティが `false`を返します。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseUri" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public static System.Web.Security.FormsAuthenticationTicket Decrypt (string encryptedTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.FormsAuthenticationTicket Decrypt(string encryptedTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Decrypt(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decrypt (encryptedTicket As String) As FormsAuthenticationTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::FormsAuthenticationTicket ^ Decrypt(System::String ^ encryptedTicket);" />
      <MemberSignature Language="F#" Value="static member Decrypt : string -&gt; System.Web.Security.FormsAuthenticationTicket" Usage="System.Web.Security.FormsAuthentication.Decrypt encryptedTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.FormsAuthenticationTicket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedTicket" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="encryptedTicket">暗号化された認証チケット。</param>
        <summary>メソッドに渡される暗号化されたフォーム認証チケットに基づいて <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> オブジェクトを作成します。</summary>
        <returns><see cref="T:System.Web.Security.FormsAuthenticationTicket" /> オブジェクト。 <paramref name="encryptedTicket" /> パラメーターが有効なチケットでない場合、<see langword="null" /> が返ります。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="encryptedTicket" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="encryptedTicket" /> が空の文字列 ("") です。  
  
- または - 
<paramref name="encryptedTicket" /> の長さが 4096 文字を超えています。  
  
- または - 
 <paramref name="encryptedTicket" /> が無効な型です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultUrl">
      <MemberSignature Language="C#" Value="public static string DefaultUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string DefaultUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.DefaultUrl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DefaultUrl { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUrl : string" Usage="System.Web.Security.FormsAuthentication.DefaultUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リダイレクト URL が指定されていない場合に、<see cref="T:System.Web.Security.FormsAuthentication" /> クラスがリダイレクトする URL を取得します。</summary>
        <value>リダイレクト URL が指定されていない場合に <see cref="T:System.Web.Security.FormsAuthentication" /> クラスがリダイレクトする URL。 既定値は default.aspx です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> プロパティ値は、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の `defaultUrl` 属性を使用して、ASP.NET アプリケーションの構成ファイルで設定されます。 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> プロパティは、応答 URL が要求に含まれていない場合に、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドによって使用されます。 同様に、<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> メソッドは、応答 URL が要求に含まれていない場合に <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> を返します。  
  
   
  
## Examples  
 次のコード例では、web.config ファイルの `defaultUrl` 属性を設定します。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    defaultUrl="index.aspx" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="EnableCrossAppRedirects">
      <MemberSignature Language="C#" Value="public static bool EnableCrossAppRedirects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnableCrossAppRedirects" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnableCrossAppRedirects As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnableCrossAppRedirects { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EnableCrossAppRedirects : bool" Usage="System.Web.Security.FormsAuthentication.EnableCrossAppRedirects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>認証されたユーザーを他の Web アプリケーション内の URL にリダイレクトできるかどうかを示す値を取得します。</summary>
        <value>認証されたユーザーを他の Web アプリケーション内の URL にリダイレクトできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティ値は、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の `enableCrossAppRedirects` 属性を使用して設定されます。  
  
 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティは、リダイレクト URL が現在のアプリケーションのページを指していない場合に、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッド内でチェックされます。 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> が `true`場合は、リダイレクトが実行されます。<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> が `false`場合、ブラウザーは <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> プロパティで定義されているページにリダイレクトされます。  
  
> [!NOTE]
>  アプリケーション間でページをリダイレクトする場合は、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の特定の属性が、認証されたアプリケーション間で重複していることを確認する必要があります。 詳細と例については、「[アプリケーション間でのフォーム認証](https://msdn.microsoft.com/library/99e2f9e8-5b97-4a4d-a4ed-5f93276053b7)」を参照してください。  
  
> [!IMPORTANT]
>  アプリケーション間のリダイレクトが許可されている場合は、悪意のある Web サイトにユーザーを誘導し、サイトのログインページを使用する悪用に対してサイトが脆弱になります。 <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> メソッドによって返されるリダイレクト URL が想定した URL であることを必ず確認して、承認された Web サイトへのリダイレクトのみが許可されるようにしてください。 また、リダイレクト URL が適切なプロトコル (HTTP または HTTPS) を使用していることを確認する必要もあります。 これらの検証を実行するには、ログインページにポストバックイベントハンドラーを追加するか、<xref:System.Web.UI.WebControls.Login> コントロールの <xref:System.Web.UI.WebControls.Login.LoggedIn> イベントのハンドラーを追加します。  
  
   
  
## Examples  
 次のコード例では、ASP.NET アプリケーションの web.config ファイルで `enableCrossAppRedirects` 属性を `true` に設定します。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseUri"  
    requireSSL="true"   
    enableCrossAppRedirects="true" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="EnableFormsAuthentication">
      <MemberSignature Language="C#" Value="public static void EnableFormsAuthentication (System.Collections.Specialized.NameValueCollection configurationData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableFormsAuthentication(class System.Collections.Specialized.NameValueCollection configurationData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableFormsAuthentication (configurationData As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableFormsAuthentication(System::Collections::Specialized::NameValueCollection ^ configurationData);" />
      <MemberSignature Language="F#" Value="static member EnableFormsAuthentication : System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="System.Web.Security.FormsAuthentication.EnableFormsAuthentication configurationData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationData" Type="System.Collections.Specialized.NameValueCollection" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="configurationData">"defaultUrl" や "loginUrl" の値を含む名前と値のコレクション。 パラメーターは、既定の URL またはログイン URL の値が存在しない場合は null に設定できます。</param>
        <summary>フォーム認証を有効にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> プロパティが `null`場合、そのプロパティは `configurationData` パラメーターの既定の URL 値に設定されます。 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> プロパティが `null`の場合、そのプロパティは `configurationData` パラメーターの login URL 値に設定されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">アプリケーションは初期化開始前の段階にありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public static string Encrypt (System.Web.Security.FormsAuthenticationTicket ticket);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Encrypt(class System.Web.Security.FormsAuthenticationTicket ticket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Encrypt(System.Web.Security.FormsAuthenticationTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Encrypt (ticket As FormsAuthenticationTicket) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Encrypt(System::Web::Security::FormsAuthenticationTicket ^ ticket);" />
      <MemberSignature Language="F#" Value="static member Encrypt : System.Web.Security.FormsAuthenticationTicket -&gt; string" Usage="System.Web.Security.FormsAuthentication.Encrypt ticket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticket" Type="System.Web.Security.FormsAuthenticationTicket" />
      </Parameters>
      <Docs>
        <param name="ticket">暗号化フォーム認証チケットを作成するもとの <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> オブジェクト。</param>
        <summary>HTTP クッキーで使用するのに適した暗号化認証チケットを格納している文字列を生成します。</summary>
        <returns>暗号化された認証チケットが格納された文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、<xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A> プロパティを使用して cookie に <xref:System.Web.Security.FormsAuthentication.Encrypt%2A> メソッドの結果を格納し、<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> メソッドから返された URL にユーザーをリダイレクトします。  
  
> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[FormsAuthenticationTicketClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationTicketClass/CS/formsauthenticationticketclasscs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationTicketClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationTicketClass/VB/formsauthenticationticketclassvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ticket" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="FormsCookieName">
      <MemberSignature Language="C#" Value="public static string FormsCookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string FormsCookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.FormsCookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FormsCookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ FormsCookieName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormsCookieName : string" Usage="System.Web.Security.FormsAuthentication.FormsCookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォーム認証チケットを格納するのに使用されるクッキーの名前を取得します。</summary>
        <value>フォーム認証チケットを格納するのに使用されるクッキーの名前。 既定値は ".ASPXAUTH" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A> プロパティ値は、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の `name` 属性を使用して、ASP.NET アプリケーションの構成ファイルで設定されます。 <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A> は、<xref:System.Web.Security.FormsAuthenticationTicket> 情報を格納する cookie を参照するために使用されます。  
  
   
  
## Examples  
 次のコード例では、web.config ファイルの `name` 属性を使用して、<xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A> プロパティの値を設定します。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    name=".ASPXFORMSAUTH" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="FormsCookiePath">
      <MemberSignature Language="C#" Value="public static string FormsCookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string FormsCookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.FormsCookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FormsCookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ FormsCookiePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormsCookiePath : string" Usage="System.Web.Security.FormsAuthentication.FormsCookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォーム認証クッキーのパスを取得します。</summary>
        <value>フォーム認証チケット情報が格納されるクッキーのパス。 既定値は "/" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> プロパティ値は、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の `path` 属性を使用して、ASP.NET アプリケーションの構成ファイルで設定されます。 <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> は、<xref:System.Web.Security.FormsAuthenticationTicket> 情報を格納する cookie の <xref:System.Web.HttpCookie.Path%2A> を指定します。  
  
   
  
## Examples  
 次のコード例では、web.config ファイルの `path` 属性を使用して、<xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> プロパティの値を設定します。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    path="/MyApplication" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAuthCookie">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したユーザー名の認証クッキーを作成します。</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAuthCookie">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpCookie GetAuthCookie(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAuthCookie (userName As String, createPersistentCookie As Boolean) As HttpCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpCookie ^ GetAuthCookie(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member GetAuthCookie : string * bool -&gt; System.Web.HttpCookie" Usage="System.Web.Security.FormsAuthentication.GetAuthCookie (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">認証済みユーザーの名前。</param>
        <param name="createPersistentCookie">複数のブラウザー セッションにわたって保存される永続的なクッキーを作成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定したユーザー名の認証クッキーを作成します。 クッキーは発信応答の一部として設定されないため、アプリケーションはクッキーの発行方法を詳細に制御できます。</summary>
        <returns>暗号化されたフォーム認証チケット情報を含む <see cref="T:System.Web.HttpCookie" />。 <see cref="P:System.Web.Security.FormsAuthentication.FormsCookiePath" /> プロパティの既定値が使用されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クッキーのパスは、<xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> プロパティによって決定されます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="GetAuthCookie">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpCookie GetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAuthCookie (userName As String, createPersistentCookie As Boolean, strCookiePath As String) As HttpCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpCookie ^ GetAuthCookie(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member GetAuthCookie : string * bool * string -&gt; System.Web.HttpCookie" Usage="System.Web.Security.FormsAuthentication.GetAuthCookie (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">認証済みユーザーの名前。</param>
        <param name="createPersistentCookie">複数のブラウザー セッションにわたって保存される永続的なクッキーを作成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="strCookiePath">認証クッキーの <see cref="P:System.Web.HttpCookie.Path" />。</param>
        <summary>指定したユーザー名の認証クッキーを作成します。 クッキーは発信応答の一部として設定されません。</summary>
        <returns>暗号化されたフォーム認証チケット情報を含む <see cref="T:System.Web.HttpCookie" />。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="GetRedirectUrl">
      <MemberSignature Language="C#" Value="public static string GetRedirectUrl (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRedirectUrl(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetRedirectUrl(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRedirectUrl (userName As String, createPersistentCookie As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRedirectUrl(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member GetRedirectUrl : string * bool -&gt; string" Usage="System.Web.Security.FormsAuthentication.GetRedirectUrl (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">認証済みユーザーの名前。</param>
        <param name="createPersistentCookie">このパラメーターは無視されます。</param>
        <summary>ログイン ページへのリダイレクトを引き起こした元の要求に対する、リダイレクト URL を返します。</summary>
        <returns>リダイレクト URL が格納された文字列。<paramref name="userName" /> が null の場合は null です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドを使用するのではなく、アプリケーションコードでリダイレクトを実行する場合に使用できます。  
  
 <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> メソッドは、`ReturnURL` 変数名を使用して、クエリ文字列で指定されている URL を返します。 たとえば、URL `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`では、<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> メソッドは戻り値の URL `caller.aspx`を返します。 `ReturnURL` 変数が存在しない場合、<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> メソッドは <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> プロパティの URL を返します。  
  
 ASP.NET は、ブラウザーがログインページにリダイレクトされるときに、戻り先 URL を自動的に追加します。  
  
 既定では、`ReturnUrl` 変数は、現在のアプリケーション内のページを参照する必要があります。 `ReturnUrl` が別のアプリケーションまたは別のサーバーのページを参照している場合、<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> メソッドは <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> プロパティの URL を返します。 戻り先 URL が現在のアプリケーションの外部のページを参照できるようにするには、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の `enableCrossAppRedirects` 属性を使用して、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティを `true` に設定する必要があります。  

このメソッドは、cookie を作成しません。
  
> [!IMPORTANT]
>  アプリケーション間のリダイレクトを可能にするために <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティを `true` に設定することは、セキュリティ上の脅威となる可能性があります。 詳細については、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティを参照してください。  
  
   
  
## Examples  
 次のコード例では、認証されたユーザーを <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> メソッドから返された URL にリダイレクトします。  
  
> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[FormsAuthenticationTicketClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationTicketClass/CS/formsauthenticationticketclasscs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationTicketClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationTicketClass/VB/formsauthenticationticketclassvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="HashPasswordForStoringInConfigFile">
      <MemberSignature Language="C#" Value="public static string HashPasswordForStoringInConfigFile (string password, string passwordFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HashPasswordForStoringInConfigFile(string password, string passwordFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HashPasswordForStoringInConfigFile (password As String, passwordFormat As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HashPasswordForStoringInConfigFile(System::String ^ password, System::String ^ passwordFormat);" />
      <MemberSignature Language="F#" Value="static member HashPasswordForStoringInConfigFile : string * string -&gt; string" Usage="System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile (password, passwordFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("The recommended alternative is to use the Membership APIs, such as Membership.CreateUser. For more information, see https://go.microsoft.com/fwlink/?LinkId=252463.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="passwordFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="password">ハッシュするパスワード。</param>
        <param name="passwordFormat">使用するハッシュ アルゴリズム。 <paramref name="passwordFormat" /> は、<see cref="T:System.Web.Configuration.FormsAuthPasswordFormat" /> 列挙値の 1 つを表す <see langword="String" /> になります。</param>
        <summary>指定したパスワードとハッシュ アルゴリズムに基づいて、構成ファイルに格納できるハッシュ パスワードを生成します。</summary>
        <returns>ハッシュされたパスワード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A> メソッドは、アプリケーションの構成ファイルにフォーム認証資格情報を格納するときに使用できるハッシュされたパスワード値を作成します。  
  
 アプリケーションの構成ファイルに格納されている認証資格情報は、アプリケーションのユーザーのパスワードを確認するために <xref:System.Web.Security.FormsAuthentication.Authenticate%2A> メソッドによって使用されます。 または、ASP.NET メンバーシップを使用してユーザーの資格情報を保存することもできます。 詳細については、「[メンバーシップを使用](https://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd)したユーザーの管理」を参照してください。  
  
   
  
## Examples  
 次のコード例では、ユーザー名、パスワード、およびハッシュの種類を取得し、ユーザー定義とハッシュされたパスワードを含む構成の[資格情報](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e01fc50a(v%3dvs.100))セクションを表示します。  
  
> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[FormsAuthenticationHashPassword#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationHashPassword/CS/formsauthenticationhashpasswordcs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationHashPassword#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationHashPassword/VB/formsauthenticationhashpasswordvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="password" /> は <see langword="null" /> です  
  
- または - 
 <paramref name="passwordFormat" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="passwordFormat" /> は有効な <see cref="T:System.Web.Configuration.FormsAuthPasswordFormat" /> 値ではありません。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Initialize();" />
      <MemberSignature Language="F#" Value="static member Initialize : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アプリケーションの構成に基づいて <see cref="T:System.Web.Security.FormsAuthentication" /> オブジェクトを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.Initialize%2A> メソッドは、<xref:System.Web.Security.FormsAuthenticationModule> が <xref:System.Web.Security.FormsAuthentication> クラスのインスタンスを作成するときに呼び出されます。 このメソッドは、コードから呼び出すためのものではありません。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public static bool IsEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool" Usage="System.Web.Security.FormsAuthentication.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォーム認証が有効かどうかを示す値を取得します。</summary>
        <value>フォーム認証が有効な場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoginUrl">
      <MemberSignature Language="C#" Value="public static string LoginUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string LoginUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.LoginUrl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LoginUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ LoginUrl { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LoginUrl : string" Usage="System.Web.Security.FormsAuthentication.LoginUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.Security.FormsAuthentication" /> クラスがリダイレクトするログイン ページ用 URL を取得します。</summary>
        <value><see cref="T:System.Web.Security.FormsAuthentication" /> クラスがリダイレクトするログイン ページ用 URL。 既定値は login.aspx です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> プロパティ値は、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の `loginUrl` 属性を使用して、ASP.NET アプリケーションの構成ファイルで設定されます。 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> は、<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドによって使用されます。  
  
   
  
## Examples  
 次のコード例では、web.config ファイルの `loginUrl` 属性を設定します。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    defaultUrl="index.aspx" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="RedirectFromLoginPage">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>認証済みユーザーを最初に要求された URL または既定の URL にリダイレクトします。</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="RedirectFromLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectFromLoginPage (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectFromLoginPage(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectFromLoginPage (userName As String, createPersistentCookie As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectFromLoginPage(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member RedirectFromLoginPage : string * bool -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectFromLoginPage (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">認証済みユーザー名。</param>
        <param name="createPersistentCookie">複数のブラウザー セッションにわたって保存される永続的なクッキーを作成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>認証済みユーザーを最初に要求された URL または既定の URL にリダイレクトします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは、`ReturnURL` 変数名を使用して、クエリ文字列で指定された URL にリダイレクトします。 たとえば、URL `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`では、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは戻り先 URL `caller.aspx`にリダイレクトします。 `ReturnURL` 変数が存在しない場合、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> プロパティの URL にリダイレクトします。  
  
 ASP.NET は、ブラウザーがログインページにリダイレクトされるときに、戻り先 URL を自動的に追加します。  
  
 既定では、`ReturnUrl` 変数は、現在のアプリケーション内のページを参照する必要があります。 `ReturnUrl` が別のアプリケーションまたは別のサーバーのページを参照している場合、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> プロパティの URL にリダイレクトします。 現在のアプリケーションの外部のページへのリダイレクトを許可する場合は、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の `enableCrossAppRedirects` 属性を使用して、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティを `true` に設定する必要があります。  
  
> [!IMPORTANT]
>  アプリケーション間のリダイレクトを可能にするために <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティを `true` に設定することは、セキュリティ上の脅威となる可能性があります。 詳細については、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティを参照してください。  
  
 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> プロパティが `true`で、`ReturnUrl` 変数が現在のアプリケーション内にあるか、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティが `true`の場合、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは認証チケットを発行し、を使用して既定の cookie に格納し <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>b.  
  
 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> が `false` で、リダイレクトパスが現在のアプリケーションの URL に対しての場合、チケットはリダイレクト URL の一部として発行されます。 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> が `false`、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> が `true`、リダイレクト URL が現在のアプリケーション内のページを参照していない場合、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは認証チケットを発行し、それを <xref:System.Web.HttpRequest.QueryString%2A> プロパティに格納します。  
  
   
  
## Examples  
 次のコード例では、検証済みのユーザーを最初に要求された URL または <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>にリダイレクトします。 このコード例では、ASP.NET メンバーシップを使用してユーザーを検証します。 ASP.NET メンバーシップの詳細については、「[メンバーシップを使用](https://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd)したユーザーの管理」を参照してください。  
  
> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">クエリ文字列内に指定されている戻り先 URL に、HTTP: または HTTPS: 以外のプロトコルが含まれています。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="RedirectFromLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectFromLoginPage (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectFromLoginPage(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectFromLoginPage (userName As String, createPersistentCookie As Boolean, strCookiePath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectFromLoginPage(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member RedirectFromLoginPage : string * bool * string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectFromLoginPage (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">認証済みユーザー名。</param>
        <param name="createPersistentCookie">複数のブラウザー セッションにわたって保存される永続的なクッキーを作成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="strCookiePath">フォーム認証チケットのクッキー パス。</param>
        <summary>フォーム認証クッキーに指定されているクッキー パスを使用して、認証済みユーザーを最初に要求された URL または既定の URL にリダイレクトします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは、`ReturnURL` 変数名を使用して、クエリ文字列で指定された戻り先 URL にリダイレクトします。 たとえば、URL `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`では、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは戻り先 URL `caller.aspx`にリダイレクトします。 `ReturnURL` 変数が存在しない場合、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> プロパティの URL にリダイレクトします。  
  
 ASP.NET は、ブラウザーがログインページにリダイレクトされるときに、戻り先 URL を自動的に追加します。  
  
 既定では、`ReturnUrl` 変数は、現在のアプリケーション内のページを参照する必要があります。 `ReturnUrl` が別のアプリケーションまたは別のサーバーのページを参照している場合、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> プロパティの URL にリダイレクトします。 現在のアプリケーションの外部のページへのリダイレクトを許可する場合は、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の `enableCrossAppRedirects` 属性を使用して、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティを `true` に設定する必要があります。  
  
> [!IMPORTANT]
>  アプリケーション間のリダイレクトを可能にするために <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティを `true` に設定することは、セキュリティ上の脅威となる可能性があります。 詳細については、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティを参照してください。  
  
 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> プロパティが `true`で、`ReturnUrl` 変数が現在のアプリケーション内にあるか、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> プロパティが `true`の場合、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは認証チケットを発行し、によって指定された cookie にそのチケットを格納し `strCookiePath`<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> メソッドを使用するパラメーター。  
  
 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> が `false` で、リダイレクトパスが現在のアプリケーションの URL に対しての場合、チケットはリダイレクト URL の一部として発行されます。 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> が `false`、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> が `true`、リダイレクト URL が現在のアプリケーション内のページを参照していない場合、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドは認証チケットを発行し、それを <xref:System.Web.HttpRequest.QueryString%2A> プロパティに格納します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">クエリ文字列内に指定されている戻り先 URL に、HTTP: または HTTPS: 以外のプロトコルが含まれています。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="RedirectToLoginPage">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ブラウザーをログイン URL にリダイレクトします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドは、<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>にブラウザーをリダイレクトします。  
  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドは、フォーム認証 cookie をクリアしません。 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドを <xref:System.Web.Security.FormsAuthentication.SignOut%2A> メソッドと組み合わせて使用すると、1人のユーザーをログに記録し、別のユーザーがログインできるようにすることができます。  
  
 <xref:System.Web.HttpResponse.Redirect%2A?displayProperty=nameWithType> メソッドとは異なり、このメソッドは <xref:System.Web.HttpResponse.End%2A?displayProperty=nameWithType>を呼び出すことによって要求を終了しません。 これは、<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドの呼び出しの後のコードが実行されることを意味します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.FormsAuthentication.SignOut%2A> メソッドを使用してフォーム認証 cookie をクリアし、<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドを使用してユーザーをログインページにリダイレクトします。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="RedirectToLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectToLoginPage ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectToLoginPage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectToLoginPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectToLoginPage ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectToLoginPage();" />
      <MemberSignature Language="F#" Value="static member RedirectToLoginPage : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectToLoginPage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ブラウザーをログイン URL にリダイレクトします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドは、<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>にブラウザーをリダイレクトします。  
  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドは、フォーム認証 cookie をクリアしません。 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドを <xref:System.Web.Security.FormsAuthentication.SignOut%2A> メソッドと組み合わせて使用すると、1人のユーザーをログに記録し、別のユーザーがログインできるようにすることができます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.FormsAuthentication.SignOut%2A> メソッドを使用してフォーム認証 cookie をクリアし、<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドを使用してユーザーをログインページにリダイレクトします。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="RedirectToLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectToLoginPage (string extraQueryString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectToLoginPage(string extraQueryString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectToLoginPage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectToLoginPage (extraQueryString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectToLoginPage(System::String ^ extraQueryString);" />
      <MemberSignature Language="F#" Value="static member RedirectToLoginPage : string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectToLoginPage extraQueryString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extraQueryString" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="extraQueryString">リダイレクト URL に含めるクエリ文字列。</param>
        <summary>指定したクエリ文字列でログイン URL にブラウザーをリダイレクトします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドは、ブラウザーを <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> にリダイレクトし、リダイレクトされた URL の <xref:System.Management.ManagementQuery.QueryString%2A> として `extraQueryString` 値を含みます。  
  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドは、フォーム認証 cookie をクリアしません。 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドを <xref:System.Web.Security.FormsAuthentication.SignOut%2A> メソッドと組み合わせて使用すると、1人のユーザーをログに記録し、別のユーザーがログインできるようにすることができます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.FormsAuthentication.SignOut%2A> メソッドを使用してフォーム認証 cookie をクリアし、<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドを使用してユーザーをログインページにリダイレクトします。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signout2cs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signout2vb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="RenewTicketIfOld">
      <MemberSignature Language="C#" Value="public static System.Web.Security.FormsAuthenticationTicket RenewTicketIfOld (System.Web.Security.FormsAuthenticationTicket tOld);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.FormsAuthenticationTicket RenewTicketIfOld(class System.Web.Security.FormsAuthenticationTicket tOld) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RenewTicketIfOld (tOld As FormsAuthenticationTicket) As FormsAuthenticationTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::FormsAuthenticationTicket ^ RenewTicketIfOld(System::Web::Security::FormsAuthenticationTicket ^ tOld);" />
      <MemberSignature Language="F#" Value="static member RenewTicketIfOld : System.Web.Security.FormsAuthenticationTicket -&gt; System.Web.Security.FormsAuthenticationTicket" Usage="System.Web.Security.FormsAuthentication.RenewTicketIfOld tOld" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.FormsAuthenticationTicket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tOld" Type="System.Web.Security.FormsAuthenticationTicket" />
      </Parameters>
      <Docs>
        <param name="tOld">更新するフォーム認証チケット。</param>
        <summary>条件付きで <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> の発行日時と有効期限を更新します。</summary>
        <returns>更新された <see cref="T:System.Web.Security.FormsAuthenticationTicket" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RenewTicketIfOld%2A> メソッドは、現在の日付と時刻から <xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A> 値を引いた値が、現在の日付と時刻を引いた値 <xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A> よりも大きい場合に、指定された <xref:System.Web.Security.FormsAuthenticationTicket> の有効期限の日付と時刻を更新します。  
  
 チケットが更新されるのは、<xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A> プロパティが現在の日付と時刻に設定され、<xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A> プロパティが現在の日付と時刻に設定され、元の <xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A> 値から元の <xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A> 値を引いたものになります。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="RequireSSL">
      <MemberSignature Language="C#" Value="public static bool RequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.RequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool RequireSSL { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RequireSSL : bool" Usage="System.Web.Security.FormsAuthentication.RequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォーム認証のクッキーをサーバーに返すために SSL を必要とするかどうかを示す値を取得します。</summary>
        <value>フォーム認証のクッキーをサーバーに返すために SSL を必要とする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A> プロパティ値は、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の `requireSSL` 属性を使用して、ASP.NET アプリケーションの構成ファイルで設定されます。 ASP.NET アプリケーションの web.config ファイルで、`requireSSL` 属性を設定することによって、フォーム認証クッキーをサーバーに返すために SSL (Secure Sockets Layer) が必要かどうかを指定できます。 詳細については、「<xref:System.Web.HttpCookie.Secure%2A>」を参照してください。  
  
 `requireSSL` を `false`として構成する場合は、チケットが有効である期間を短縮するために、`slidingExpiration` を `false`として構成することをお勧めします。  
  
   
  
## Examples  
 次のコード例では、web.config ファイルの `requireSSL` 属性を設定します。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    requireSSL="true"  
    path="/MyApplication" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetAuthCookie">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したユーザー名に対して認証チケットを作成し、それを応答のクッキー コレクションに追加します。クッキーなしの認証を使用している場合は URL に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> メソッドは、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> が `false`場合に、cookies コレクションまたは URL のいずれかにフォーム認証チケットを追加します。 フォーム認証チケットは、ブラウザーによる次の要求にフォーム認証情報を提供します。 フォーム認証では、ユーザーを認証するときに、リダイレクトによるナビゲーションの制御を維持したまま、<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> 方法を使用できます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=197376">ASP.NET 2.0 でのフォーム認証について説明しました。</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=197377">方法: ASP.NET 2.0 のメンバーシップを使用する</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetAuthCookie">
      <MemberSignature Language="C#" Value="public static void SetAuthCookie (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAuthCookie(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetAuthCookie (userName As String, createPersistentCookie As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAuthCookie(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member SetAuthCookie : string * bool -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SetAuthCookie (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">認証済みユーザーの名前。 これは Windows アカウントに割り当てる必要はありません。</param>
        <param name="createPersistentCookie">複数のブラウザー セッションにわたって保存される永続的なクッキーを作成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定したユーザー名に対して認証チケットを作成し、それを応答のクッキー コレクションに追加します。クッキーなしの認証を使用している場合は URL に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> メソッドは、cookies コレクションにフォーム認証チケットを追加するか、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> が `false`場合は URL に追加します。 フォーム認証チケットは、ブラウザーによる次の要求にフォーム認証情報を提供します。 フォーム認証では、ユーザーを認証するときに、リダイレクトによるナビゲーションの制御を維持したまま、<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> 方法を使用できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><see cref="P:System.Web.Security.FormsAuthentication.RequireSSL" /> が <see langword="true" /> で、<see cref="P:System.Web.HttpRequest.IsSecureConnection" /> が <see langword="false" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="SetAuthCookie">
      <MemberSignature Language="C#" Value="public static void SetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetAuthCookie (userName As String, createPersistentCookie As Boolean, strCookiePath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAuthCookie(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member SetAuthCookie : string * bool * string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SetAuthCookie (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">認証済みユーザーの名前。</param>
        <param name="createPersistentCookie">複数のブラウザー セッションにわたって保存される永続的なクッキーを作成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="strCookiePath">フォーム認証チケットのクッキー パス。</param>
        <summary>指定したユーザー名に対して認証チケットを作成し、指定したクッキー パスを使用してそれを応答のクッキー コレクションに追加します。クッキーなしの認証を使用している場合は URL に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> メソッドは、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> が `false`場合に、cookies コレクションまたは URL のいずれかにフォーム認証チケットを追加します。 フォーム認証チケットは、ブラウザーによる次の要求にフォーム認証情報を提供します。 フォーム認証では、ユーザーを認証するときに、リダイレクトによるナビゲーションの制御を維持したまま、<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> 方法を使用できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><see cref="P:System.Web.Security.FormsAuthentication.RequireSSL" /> が <see langword="true" /> で、<see cref="P:System.Web.HttpRequest.IsSecureConnection" /> が <see langword="false" /> です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=197376">ASP.NET 2.0 でのフォーム認証について説明しました。</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=197377">方法: ASP.NET 2.0 のメンバーシップを使用する</related>
      </Docs>
    </Member>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public static void SignOut ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SignOut() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SignOut" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SignOut ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SignOut();" />
      <MemberSignature Language="F#" Value="static member SignOut : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SignOut " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ブラウザーからフォーム認証チケットを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SignOut%2A> メソッドは、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> が `false`場合に、cookie または URL からフォーム認証チケット情報を削除します。 <xref:System.Web.Security.FormsAuthentication.SignOut%2A> メソッドを <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドと組み合わせて使用すると、1人のユーザーをログに記録し、別のユーザーがログインできるようにすることができます。  
  
 Cookie なしのモードで排他的に実行する場合、または認証されたユーザーと匿名ユーザーの両方をサポートする場合は、匿名識別子を削除した結果として特別なビジネスロジックを実行する必要がある場合は、ログインページへのリダイレクトを明示的に制御する必要があります。  
  
 <xref:System.Web.Security.FormsAuthentication.SignOut%2A> メソッドを呼び出すと、`endResponse` パラメーターを `false`に設定して <xref:System.Web.HttpResponse.Redirect%2A> メソッドを呼び出すことによって、アプリケーションのログインページへのリダイレクトが行われます。 現在のページの実行が完了するまでリダイレクトは行われないため、追加のコードを実行できます。 コードに別のページへの明示的なリダイレクトが含まれていない場合、ユーザーはアプリケーションの構成ファイルで構成されたログインページにリダイレクトされます。  
  
 <xref:System.Web.Security.FormsAuthentication.SignOut%2A> メソッドを呼び出すと、フォーム認証 cookie だけが削除されます。 Web サーバーは、有効期限が切れた認証チケットを後で比較するために保存しません。 これにより、悪意のあるユーザーが有効なフォーム認証クッキーを取得した場合に、サイトが再生攻撃に対して脆弱になります。 フォーム認証クッキーを使用するときのセキュリティを強化するには、次の操作を行う必要があります。  
  
-   <xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A> プロパティを `false`に設定して、フォーム認証 cookie の絶対有効期限を使用します。 これにより、ハイジャックされた cookie を再生できるウィンドウが制限されます。  
  
-   <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A> プロパティを `true` に設定し、Web サイト全体を SSL で実行することによって、Secure Sockets Layer (SSL) の認証 cookie のみを発行および受け入れます。 <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A> プロパティを `true` に設定すると、SSL 以外の接続経由で ASP.NET がブラウザーに認証クッキーを送信することがなくなります。ただし、クライアントでは、cookie のセキュリティ設定が優先されない場合があります。 つまり、クライアントは、SSL 以外の接続を介してフォーム認証 cookie を送信する可能性があるため、ハイジャックに対して脆弱なままになります。 SSL で Web サイト全体を実行することで、クライアントがフォーム認証 cookie をクリアテキストで送信しないようにすることができます。  
  
-   サーバー上の永続的なストレージを使用して、ユーザーが Web サイトからログアウトしたことを記録し、<xref:System.Web.HttpApplication.PostAuthenticateRequest> イベントなどのアプリケーションイベントを使用して、現在のユーザーがフォーム認証で認証されているかどうかを判断します。 ユーザーがフォーム認証を使用して認証されていて、永続的なストレージの情報でユーザーがログアウトしたことが示された場合は、すぐに認証 cookie をクリアし、ブラウザーをログインページにリダイレクトします。 ログインが正常に完了したら、ユーザーがログインしたことを反映するようにストレージを更新します。 この方法を使用する場合、アプリケーションはユーザーのログイン状態を追跡する必要があり、アイドル状態のユーザーを強制的にログアウトさせる必要があります。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.FormsAuthentication.SignOut%2A> メソッドを使用してフォーム認証 cookie をクリアし、<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> メソッドを使用してユーザーをログインページにリダイレクトします。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=197376">ASP.NET 2.0 でのフォーム認証について説明しました。</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=197377">方法: ASP.NET 2.0 のメンバーシップを使用する</related>
      </Docs>
    </Member>
    <Member MemberName="SlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool SlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.SlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SlidingExpiration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SlidingExpiration : bool" Usage="System.Web.Security.FormsAuthentication.SlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>変化する有効期限が有効かどうかを示す値を取得します。</summary>
        <value>スライド式有効期限が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A> プロパティ値は、[フォーム](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))構成要素の `slidingExpiration` 属性を使用して設定されます。  
  
 スライド式有効期限は、要求が行われたときに、タイムアウト間隔の半分以上が経過した場合に、有効な認証クッキーの有効期限をリセットします。 Cookie の有効期限が切れると、ユーザーは再認証する必要があります。 <xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A> プロパティを `false` に設定すると、構成されている `timeout` の値に基づいて、認証 cookie が有効な時間を制限することで、アプリケーションのセキュリティを向上させることができます。  
  
 `requireSSL` を `false`として構成する場合は、チケットの有効期間を短縮するために、`slidingExpiration` を `false`として構成することをお勧めします。  
  
   
  
## Examples  
 次のコード例では、ASP.NET アプリケーションの web.config ファイルで `slidingExpiration` 属性を `false` に設定します。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    name=".ASPXFORMSAUTH"  
    cookieless="UseCookies"  
    requireSSL="true"   
    slidingExpiration="false" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/658d0430-1644-4744-b52d-08b0d6fcacb8">ASP.NET Web アプリケーションのセキュリティ</related>
      </Docs>
    </Member>
    <Member MemberName="TicketCompatibilityMode">
      <MemberSignature Language="C#" Value="public static System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.TicketCompatibilityMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TicketCompatibilityMode As TicketCompatibilityMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Configuration::TicketCompatibilityMode TicketCompatibilityMode { System::Web::Configuration::TicketCompatibilityMode get(); };" />
      <MemberSignature Language="F#" Value="member this.TicketCompatibilityMode : System.Web.Configuration.TicketCompatibilityMode" Usage="System.Web.Security.FormsAuthentication.TicketCompatibilityMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.TicketCompatibilityMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>チケットの有効期限に関して世界協定時刻 (UTC: Coordinated Universal Time) と現地時間のどちらを使用するかを示す値を取得します。</summary>
        <value>チケットの有効期限に関して世界協定時刻 (UTC: Coordinated Universal Time) と現地時間のどちらを使用するかを示す値。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public static TimeSpan Timeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan Timeout { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan" Usage="System.Web.Security.FormsAuthentication.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>認証チケットの有効期限が切れるまでの時間を取得します。</summary>
        <value>認証チケットの有効期限が切れるまでの時間。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
