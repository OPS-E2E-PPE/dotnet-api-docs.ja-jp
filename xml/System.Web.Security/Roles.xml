<Type Name="Roles" FullName="System.Web.Security.Roles">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6d6694dc9f6ad89b4adce161b5ff38a3f3a3368f" /><Meta Name="ms.sourcegitcommit" Value="1403e40e1f487577d6846a42664d2e74b78a08b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="01/29/2020" /><Meta Name="ms.locfileid" Value="76824976" /></Metadata><TypeSignature Language="C#" Value="public static class Roles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Roles extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Roles" />
  <TypeSignature Language="VB.NET" Value="Public Class Roles" />
  <TypeSignature Language="C++ CLI" Value="public ref class Roles abstract sealed" />
  <TypeSignature Language="F#" Value="type Roles = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ASP.NET アプリケーションの承認チェックに使用するロールのユーザー メンバーシップを管理します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET ロール管理を使用すると、ロールと呼ばれるユーザーのグループに基づいて、アプリケーションの承認を管理できます。 ユーザーをロールに割り当てることで、ユーザー名に基づいて承認を指定するのではなく、ロールに基づいて Web アプリケーションのさまざまな部分または機能へのアクセスを制御できます。 たとえば、従業員のアプリケーションには、ロールごとに異なる権限が指定されているマネージャー、従業員、ディレクターなどのロールがある場合があります。  
  
 ユーザーは複数のロールに属する場合があります。 たとえば、サイトがディスカッションフォーラムの場合、一部のユーザーはメンバーとモデレーターの両方の役割を果たすことがあります。 各ロールは、サイトに対して異なる権限を持つように定義できます。また、両方のロールに属しているユーザーには、両方の権限セットが与えられます。  
  
 ASP.NET アプリケーションのロール管理を有効にするには、次の例に示すように、アプリケーションの web.config ファイルの [`system.web`] セクションの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))要素を使用します。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
  <roleManager defaultProvider="SqlProvider"   
    enabled="true"  
    cacheRolesInCookie="true"  
    cookieName=".ASPROLES"  
    cookieTimeout="30"  
    cookiePath="/"  
    cookieRequireSSL="false"  
    cookieSlidingExpiration="true"  
    cookieProtection="All" >  
    <providers>  
      <add  
        name="SqlProvider"  
        type="System.Web.Security.SqlRoleProvider"  
        connectionStringName="SqlServices"  
        applicationName="SampleApplication" />  
      </providers>  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 承認規則は、Web アプリケーションの構成ファイルで指定することも、コード内でプログラムで指定することもできます。 たとえば、web.config ファイルの次の[承認](https://msdn.microsoft.com/library/2d3d9bf6-f914-4c30-ad03-32eea98fa612)セクションでは、ユーザーがログオンする必要があり (匿名ユーザーを拒否することによって)、管理者ロールのユーザーのみがアクセスできるようにする必要があります。  
  
```  
<authorization>  
  <deny users="?" />  
  <allow roles="Administrators" />  
  <deny users="*" />  
</authorization>  
```  
  
 アプリケーションの Web.config ファイルの `authorization` セクションを使用してロールに基づいて承認を指定する場合、アプリケーションのユーザーは認証されたユーザー id を提供する必要があります。 Windows 認証またはフォーム認証を使用して、ユーザーを認証できます。 匿名ユーザーをロールに割り当てることはできません。 ロールは、ASP.NET <xref:System.Web.Security.Membership> クラスとは別に使用することも、と組み合わせて使用することもできます。  
  
 プログラムによってロールのメンバーシップを確認するには、<xref:System.Web.Security.Roles> クラスまたは <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> プロパティを <xref:System.Web.Security.Roles.IsUserInRole%2A> メソッドと共に使用するか、<xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> プロパティを <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=nameWithType> メソッドと共に使用します。 プログラムによってロールのメンバーシップを確認するサンプルコードについては、このトピックの「例」を参照してください。  
  
 <xref:System.Web.Security.Roles> クラスを使用すると、ロールを作成および削除したり、ユーザーをロールに追加または削除したりすることもできます。  
  
> [!NOTE]
>  <xref:System.Web.Security.WindowsTokenRoleProvider> クラスを使用するようにアプリケーションを構成した場合は、ロールまたはロールメンバーシップを変更することはできません。 <xref:System.Web.Security.WindowsTokenRoleProvider> クラスは、Windows セキュリティグループのメンバーシップのみを検証します。 この場合、グループを作成および削除したり、グループのメンバーシップを管理したりするには、ASP.NET ロールではなく Windows ユーザーアカウント管理を使用する必要があります。  
  
 ロール情報は、複数のデータソースに格納できます。  
  
-   <xref:System.Web.Security.WindowsTokenRoleProvider> クラスを使用して、Windows グループのメンバーシップに基づいてロール情報を取得できます。  
  
-   <xref:System.Web.Security.SqlRoleProvider> クラスを使用して、SQL Server データベースにロール情報を格納できます。  
  
-   既存のロール情報がある場合、またはにロール情報を格納し、Windows、承認ストア、または SQL Server 以外のデータソースからロール情報を取得する場合は、<xref:System.Web.Security.RoleProvider> 抽象クラスを継承するクラスを作成することによって、カスタムロールプロバイダーを実装できます。 詳細については、「[ロールプロバイダーの実装](https://msdn.microsoft.com/library/851671ce-bf9b-43f2-aba4-bc9d28b11c7d)」を参照してください。  
  
 ユーザーのブラウザーが cookie を受け入れる場合は、ユーザーのコンピューターの cookie にそのユーザーのロール情報を格納できます。 各ページ要求で、ASP.NET はそのユーザーのロール情報をクッキーから読み取ります。 これにより、データソースがロール情報を取得するために必要な通信量を減らすことで、アプリケーションのパフォーマンスを向上させることができます。 ユーザーのロール情報が長すぎて cookie に格納できない場合、ASP.NET は、最近使用したロール情報だけを cookie に格納し、必要に応じてデータソース内の追加のロール情報を検索します。 ユーザーのブラウザーで cookie がサポートされていない場合、または cookie が無効になっている場合、ロール情報はクッキーにキャッシュされません。  
  
 ASP.NET ロールを構成するときに <xref:System.Web.Security.Roles.CookieProtectionValue%2A> プロパティを指定することで、クッキーにキャッシュされたロール名の信頼性を向上させることができます。 既定の <xref:System.Web.Security.Roles.CookieProtectionValue%2A> は `All`であり、cookie 内のロール名を暗号化し、cookie の内容が変更されていないことを検証します。  
  
   
  
## Examples  
 次の例では、ASP.NET membership ロールと ASP.NET ロールの両方を使用するように構成されたアプリケーションの web.config ファイルを示します。また、<xref:System.Web.Security.SqlRoleProvider> を使用して、メンバーシップとロール情報を SQL Server データベースに格納します。 ユーザーはフォーム認証を使用して認証され、管理者ロールのユーザーのみがアプリケーションへのアクセスを許可されます。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
    <authorization>  
      <deny users="?" />  
      <allow roles="Administrators" />  
      <deny users="*" />  
    </authorization>  
  
    <membership defaultProvider="AspNetSqlProvider" userIsOnlineTimeWindow="15">  
    </membership>  
  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="true"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
  
      <providers>  
        <clear />  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="SampleApplication" />  
        </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 次のコード例では、ユーザーが他のユーザーのロールを表示できるようにする前に、ログオンしているユーザーが管理者ロールにあるかどうかをプログラムによって確認します。  
  
  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
  </Docs>
  <Members>
    <Member MemberName="AddUsersToRole">
      <MemberSignature Language="C#" Value="public static void AddUsersToRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">指定されたロールに追加するユーザー名の文字列配列。</param>
        <param name="roleName">指定されたユーザー名を追加するロール。</param>
        <summary>指定されたユーザーを指定されたロールに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUsersToRole%2A> メソッドは、既定のロールプロバイダーを呼び出して、指定されたユーザーをデータソースの指定されたロールに関連付けます。  
  
 アプリケーションで <xref:System.Web.Security.SqlRoleProvider> クラスを使用する場合、<xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> メソッドの呼び出し中に実行されるデータベースの更新はトランザクション内で行われます。 指定されたロールに既に存在するユーザー名など、エラーが発生した場合、トランザクションはロールバックされ、更新は実行されません。  
  
> [!NOTE]
>  ユーザー名とロール名にコンマを含めることはできません。  
  
   
  
## Examples  
 次のコード例では、1人以上のユーザーをロールに追加するか、ユーザー入力に基づいてロールからユーザーを削除します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> が <see langword="null" /> です。  
  
または 
<paramref name="usernames" /> の要素の 1 つが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> が空の文字列であるか、またはコンマ (,) を含んでいます。  
  
または 
<paramref name="usernames" /> の要素の 1 つが空の文字列か、またはコンマ (,) を含んでいます。  
  
または 
 <paramref name="usernames" /> に重複した要素が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public static void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">指定されたロールに追加するユーザー名の文字列配列。</param>
        <param name="roleNames">指定されたユーザー名の割り当て先となるロール名の文字列配列。</param>
        <summary>指定されたユーザーを指定されたロールに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUsersToRoles%2A> メソッドは、既定のロールプロバイダーを呼び出して、指定されたユーザーをデータソースの指定されたロールに関連付けます。  
  
 アプリケーションで <xref:System.Web.Security.SqlRoleProvider> クラスを使用する場合、<xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> メソッドの呼び出し中に実行されるデータベースの更新はトランザクション内で行われます。 指定されたロールに既に存在するユーザー名など、エラーが発生した場合、トランザクションはロールバックされ、更新は実行されません。  
  
> [!NOTE]
>  ユーザー名とロール名にコンマを含めることはできません。  
  
   
  
## Examples  
 次のコード例では、1人以上のユーザーを1つ以上のロールに追加します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/adduserstorolescs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Roles#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/adduserstorolesvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" /> のロールの 1 つが <see langword="null" /> です。  
  
または 
<paramref name="usernames" /> のユーザーの 1 つが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" /> のロールの 1 つが空の文字列か、またはコンマ (,) を含んでいます。  
  
または 
<paramref name="usernames" /> のロールの 1 つが空の文字列か、またはコンマ (,) を含んでいます。  
  
または 
 <paramref name="roleNames" /> に重複した要素が含まれています。  
  
または 
 <paramref name="usernames" /> に重複した要素が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRole">
      <MemberSignature Language="C#" Value="public static void AddUserToRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUserToRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">指定されたロールに追加するユーザー名。</param>
        <param name="roleName">指定されたユーザー名を追加するロール。</param>
        <summary>指定されたユーザーを指定されたロールに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUserToRole%2A> メソッドは、既定のロールプロバイダーを呼び出して、指定されたユーザーをデータソースの指定されたロールに関連付けます。  
  
> [!NOTE]
>  ユーザー名とロール名にコンマを含めることはできません。  
  
   
  
## Examples  
 次のコード例では、ロールにユーザーを追加します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Roles#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> が <see langword="null" /> です。  
  
または 
 <paramref name="username" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> が空の文字列であるか、またはコンマ (,) を含んでいます。  
  
または 
 <paramref name="username" /> が空の文字列であるか、またはコンマ (,) を含んでいます。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。  
  
 または  
  
 ユーザーはすでに、指定されたロールに割り当てられています。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRoles">
      <MemberSignature Language="C#" Value="public static void AddUserToRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUserToRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">指定されたロールに追加するユーザー名。</param>
        <param name="roleNames">指定されたユーザー名を追加するロールの文字列配列。</param>
        <summary>指定されたユーザーを指定されたロールに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUserToRoles%2A> メソッドは、既定のロールプロバイダーを呼び出して、指定されたユーザーをデータソースの指定されたロールに関連付けます。  
  
 アプリケーションで <xref:System.Web.Security.SqlRoleProvider> クラスを使用する場合、<xref:System.Web.Security.Roles.AddUserToRoles%2A> メソッドの呼び出し中に実行されるデータベースの更新はトランザクション内で行われます。 指定されたロールに既に存在するユーザー名など、エラーが発生した場合、トランザクションはロールバックされ、更新は実行されません。  
  
> [!NOTE]
>  ユーザー名とロール名にコンマを含めることはできません。  
  
   
  
## Examples  
 次のコード例では、1つまたは複数のロールにユーザーを追加します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolescs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Roles#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolesvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" /> のロールの 1 つが <see langword="null" /> です。  
  
または 
 <paramref name="username" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" /> のロールの 1 つが空の文字列か、またはコンマ (,) を含んでいます。  
  
または 
 <paramref name="username" /> が空の文字列であるか、またはコンマ (,) を含んでいます。  
  
または 
 <paramref name="roleNames" /> に重複した要素が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.Roles.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール情報を保管および取得するアプリケーションの名前を取得または設定します。</summary>
        <value>ロール情報を保管および取得するアプリケーションの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティは、ユーザーとロールを異なるアプリケーションに関連付けるために、<xref:System.Web.Security.Roles> クラスによって使用されます。 これにより、複数のアプリケーションが同じデータソースを使用して、重複したユーザー名または重複したロール名の間で競合が生じることなく、ユーザーとロールの情報を格納できます。 複数の ASP.NET アプリケーションで同じデータソースを使用するには、<xref:System.Web.Security.Roles.ApplicationName%2A> プロパティで同じ値を指定します。 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティはプログラムによって設定できます。また、`applicationName` 属性を使用して、Web アプリケーションの構成ファイルで宣言によって設定することもできます。  
  
 Web アプリケーションが <xref:System.Web.Security.SqlRoleProvider> クラスを使用していて、構成ファイルの `applicationName` 属性に値が指定されていない場合は、現在の <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType> プロパティの <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> プロパティ値が使用されます。  
  
> [!CAUTION]
>  <xref:System.Web.HttpApplication> オブジェクトによって処理されるすべての要求に対して1つの既定のロールプロバイダーインスタンスが使用されるため、複数の要求を同時に実行し、<xref:System.Web.Security.Roles.ApplicationName%2A> プロパティ値を設定することができます。 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティは、複数の書き込みに対してスレッドセーフではありません。また、<xref:System.Web.Security.Roles.ApplicationName%2A> プロパティ値を変更すると、アプリケーションの複数のユーザーに対して予期しない動作が発生する可能性があります。 必要な場合を除き、ユーザーが <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティを設定できるようにコードを記述することは避けてください。 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティを設定する必要があるアプリケーションの例として、複数のアプリケーションのロールデータを管理する管理アプリケーションがあります。 このようなアプリケーションは、Web アプリケーションではなく、シングルユーザーアプリケーションである必要があります。  
  
   
  
## Examples  
 次の例は、ASP.NET アプリケーションの web.config ファイルの `system.web` セクションの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))要素を示しています。 これは、アプリケーションが <xref:System.Web.Security.SqlRoleProvider> インスタンスを使用し、`applicationName` 属性を `MyApplication`に設定することを指定します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="CacheRolesInCookie">
      <MemberSignature Language="C#" Value="public static bool CacheRolesInCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CacheRolesInCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CacheRolesInCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CacheRolesInCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CacheRolesInCookie : bool" Usage="System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のユーザーのロールがクッキーにキャッシュされているかどうかを示す値を取得します。</summary>
        <value>現在のユーザーのロールがクッキーにキャッシュされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web.config ファイルで <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> プロパティを `true` に設定すると、各ユーザーのロール情報が cookie に格納されます。 ロール管理によって、ユーザーが特定のロールに存在するかどうかが確認されると、ロールプロバイダーが呼び出されてから、データソースのロールの一覧が確認される前に、ロールの cookie がチェックされます。 クッキーは、最後に検証されたロール名をキャッシュするように動的に更新されます。  
  
 ASP.NET ロールを構成するときに <xref:System.Web.Security.Roles.CookieProtectionValue%2A> プロパティを指定することで、クッキーにキャッシュされたロール名の信頼性を向上させることができます。 既定の <xref:System.Web.Security.Roles.CookieProtectionValue%2A> は `All`であり、cookie 内のロール名を暗号化し、cookie の内容が変更されていないことを検証します。  
  
> [!NOTE]
>  ロール名はデータソースとは別にキャッシュできるため、データソースでのロール管理の変更がキャッシュされた値に反映されない可能性があります。 この場合、ユーザーはブラウザーを閉じて再度開いて、キャッシュされた cookie の値をクリアする必要があります。  
  
   
  
## Examples  
 次の例は、ASP.NET アプリケーションの web.config ファイルの `system.web` セクションの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))要素を示しています。 これは、アプリケーションが <xref:System.Web.Security.SqlRoleProvider> インスタンスを使用し、`cacheRolesInCookie` 属性を `true`に設定することを指定します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
   </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="CookieName">
      <MemberSignature Language="C#" Value="public static string CookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieName : string" Usage="System.Web.Security.Roles.CookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール名がキャッシュされているクッキーの名前を取得します。</summary>
        <value>ロール名がキャッシュされているクッキーの名前。 既定値は .ASPXROLES です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET アプリケーションの web.config ファイルで `cookieName` 属性を設定することにより、アプリケーションのロールがキャッシュされる cookie の名前を指定できます。 これは、アプリケーションの cookie を一意に識別する場合や、ドメインクッキーなどの複数のアプリケーションでクッキーを共有する場合に便利です。  
  
   
  
## Examples  
 次の例は、ASP.NET アプリケーションの web.config ファイルの `system.web` セクションの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))要素を示しています。 これは、アプリケーションが <xref:System.Web.Security.SqlRoleProvider> インスタンスを使用し、`cookieName` 属性をに設定することを指定します。ASPROLES ます。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="CookiePath">
      <MemberSignature Language="C#" Value="public static string CookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookiePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookiePath : string" Usage="System.Web.Security.Roles.CookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キャッシュされているロール名のクッキーへのパスを取得します。</summary>
        <value>ロール名がキャッシュされているクッキーのパス。 既定値は / です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET アプリケーションの web.config ファイルで `cookiePath` 属性を設定することにより、アプリケーションのロールがキャッシュされるクッキーのパスを指定できます。 Cookie のパスの詳細については、「<xref:System.Web.HttpCookie.Path%2A>」を参照してください。  
  
   
  
## Examples  
 次の例は、ASP.NET アプリケーションの web.config ファイルの `system.web` セクションの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))要素を示しています。 これは、アプリケーションが <xref:System.Web.Security.SqlRoleProvider> インスタンスを使用し、`cookiePath` 属性を/myapplicationに設定することを指定します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="CookieProtectionValue">
      <MemberSignature Language="C#" Value="public static System.Web.Security.CookieProtection CookieProtectionValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Security.CookieProtection CookieProtectionValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieProtectionValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieProtectionValue As CookieProtection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::CookieProtection CookieProtectionValue { System::Web::Security::CookieProtection get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieProtectionValue : System.Web.Security.CookieProtection" Usage="System.Web.Security.Roles.CookieProtectionValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.CookieProtection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クッキーにキャッシュされるロール名のセキュリティ保護の方法を示す値を取得します。</summary>
        <value>クッキーにキャッシュされるロール名のセキュリティ保護の方法を示す <see cref="T:System.Web.Security.CookieProtection" /> 列挙値の 1 つ。 既定では、 <see langword="All" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET アプリケーションの web.config ファイルで `cookieProtection` 属性を設定することにより、アプリケーションのロールがキャッシュされる cookie の保護を指定できます。 `cookieProtection` 属性は、ロール名が暗号化、検証、またはその両方であるかどうかを示す <xref:System.Web.Security.CookieProtection> 列挙値を受け取ります。  
  
   
  
## Examples  
 次の例は、ASP.NET アプリケーションの web.config ファイルの `system.web` セクションの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))要素を示しています。 これは、アプリケーションが <xref:System.Web.Security.SqlRoleProvider> インスタンスを使用し、`cookieProtection` 属性を `Encrypted`に設定することを指定します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="CookieRequireSSL">
      <MemberSignature Language="C#" Value="public static bool CookieRequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieRequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieRequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieRequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieRequireSSL { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieRequireSSL : bool" Usage="System.Web.Security.Roles.CookieRequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール名のクッキーをサーバーに返すために SSL を必要とするかどうかを示す値を取得します。</summary>
        <value>ロール名のクッキーをサーバーに返すために SSL を必要とする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET アプリケーションの web.config ファイルで `cookieRequireSSL` 属性を設定することによって、ロール名のクッキーをアプリケーションのサーバーに返すために SSL (Secure Sockets Layer) が必要かどうかを指定できます。 詳細については、<xref:System.Web.HttpCookie.Secure%2A> を参照してください。  
  
   
  
## Examples  
 次の例は、ASP.NET アプリケーションの web.config ファイルの `system.web` セクションの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))要素を示しています。 これは、アプリケーションが <xref:System.Web.Security.SqlRoleProvider> インスタンスを使用し、`cookieRequireSSL` を `true`に設定することを指定します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="CookieSlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool CookieSlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieSlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieSlidingExpiration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieSlidingExpiration : bool" Usage="System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール名のクッキーの有効期限の日時を定期的にリセットするかどうかを示します。</summary>
        <value>ロール名のクッキーの有効期限の日時を定期的にリセットする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="true" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET アプリケーションの web.config ファイルで `cookieSlidingExpiration` 属性を使用して、ロール名のクッキーの有効期限の日付と時刻を各応答にリセットするかどうかを指定できます。 `true`した場合、cookie の有効期限は最初に現在の日付と時刻に、<xref:System.Web.Security.Roles.CookieTimeout%2A> を分単位で設定します。 ユーザーが引き続き ASP.NET アプリケーションを使用している間は、cookie の有効期限の日付と時刻が、残りの <xref:System.Web.Security.Roles.CookieTimeout%2A> 半分未満の場合は自動的に更新されます。 詳細については、<xref:System.Web.HttpCookie.Expires%2A> プロパティを参照してください。  
  
   
  
## Examples  
 次の例は、ASP.NET アプリケーションの web.config ファイルの `system.web` セクションの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))要素を示しています。 これは、アプリケーションが <xref:System.Web.Security.SqlRoleProvider> インスタンスを使用し、<xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> プロパティを `false`に設定することを指定します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="false"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="CookieTimeout">
      <MemberSignature Language="C#" Value="public static int CookieTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CookieTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CookieTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieTimeout : int" Usage="System.Web.Security.Roles.CookieTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール クッキーの有効期限が切れるまでの時間 (分) を取得します。</summary>
        <value>ロール クッキーの有効期限が切れるまでの時間 (分) を指定する整数値。 既定値は、30 分です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CookieTimeout%2A> プロパティは、<xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> プロパティが `true` 場合に使用され、ロールクッキーの有効期限を分単位で指定します。 <xref:System.Web.Security.Roles.CookieTimeout%2A> 値を設定するには、ASP.NET アプリケーションの web.config ファイルの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))要素に `cookieTimeout` 属性を追加し、整数値を指定します。  
  
 <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> が `false`の場合、このプロパティは無視されます。  
  
   
  
## Examples  
 次の例は、ASP.NET アプリケーションの web.config ファイルの `system.web` セクションの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))要素を示しています。 これは、アプリケーションが <xref:System.Web.Security.SqlRoleProvider> インスタンスを使用し、<xref:System.Web.Security.Roles.CookieTimeout%2A> プロパティを30分に設定することを指定します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
  <add  
    name="SqlProvider"  
    type="System.Web.Security.SqlRoleProvider"  
    connectionStringName="SqlServices"  
    applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistentCookie">
      <MemberSignature Language="C#" Value="public static bool CreatePersistentCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CreatePersistentCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CreatePersistentCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CreatePersistentCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CreatePersistentCookie : bool" Usage="System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール名のクッキーがセッション ベースか、または永続的かを示す値を取得します。</summary>
        <value>ロール名のクッキーが永続的な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CreatePersistentCookie%2A> プロパティ値は、 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) configuration 要素の `createPersistentCookie` 属性を使用して、ASP.NET アプリケーションの構成で設定されます。  
  
 `false`すると、ロール名の cookie はセッション cookie になります。つまり、ブラウザーを閉じたときに cookie は失われます。 `true`すると、ロール名の cookie は、複数のブラウザーセッションで使用できる永続的なクッキーになります。 永続的な cookie の有効期限の日付と時刻には、現在の日付と時刻に、<xref:System.Web.Security.Roles.CookieTimeout%2A> の値に分を加えた値が設定されます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public static void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member CreateRole : string -&gt; unit" Usage="System.Web.Security.Roles.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">作成するロールの名前。</param>
        <summary>新しいロールをデータ ソースに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CreateRole%2A> メソッドは、データソースにロール名を追加します。 <xref:System.Web.Security.Roles.CreateRole%2A> は、既定のロールプロバイダーの <xref:System.Web.Security.RoleProvider.CreateRole%2A> メソッドを呼び出して、指定されたロールをデータソースに追加します。  
  
> [!NOTE]
>  ロール名にコンマを含めることはできません。  
  
   
  
## Examples  
 次のコード例では、データソースに新しいロールを作成します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> が空の文字列です。  
  
または 
 <paramref name="roleName" /> にコンマが含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCookie">
      <MemberSignature Language="C#" Value="public static void DeleteCookie ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCookie() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteCookie ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteCookie();" />
      <MemberSignature Language="F#" Value="static member DeleteCookie : unit -&gt; unit" Usage="System.Web.Security.Roles.DeleteCookie " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ロール名がキャッシュされているクッキーを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteCookie%2A> メソッドは、ロール名をキャッシュするために使用される cookie の内容をクリアします。 ロール名のキャッシュの詳細については、「<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>」を参照してください。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.Roles.DeleteCookie%2A> メソッドを呼び出して、ユーザーがログインするときに、キャッシュされたロール名をクリアします。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/logincs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Roles#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/loginvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データ ソースからロールを削除します。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">削除するロールの名前。</param>
        <summary>データ ソースからロールを削除します。</summary>
        <returns><see langword="true" /> がデータ ソースから削除された場合は <paramref name="roleName" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteRole%2A> メソッドは、データソースからロール名を削除します。 <xref:System.Web.Security.Roles.DeleteRole%2A> は、既定のロールプロバイダーの <xref:System.Web.Security.RoleProvider.DeleteRole%2A> メソッドを呼び出して、指定されたロールをデータソースから削除します。  
  
 `roleName` パラメーターで識別されるロールに1つ以上のメンバーがある場合は、例外がスローされ、ロールは削除されません。  
  
   
  
## Examples  
 次のコード例では、データソースからロールを削除します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> が空の文字列であるか、またはコンマ (,) を含んでいます。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> には、1 つ以上のメンバーがあります。  
  
または 
ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string * bool -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">削除するロールの名前。</param>
        <param name="throwOnPopulatedRole"><see langword="true" /> の場合は、<paramref name="roleName" /> に 1 つ以上のメンバーがあれば例外をスローします。</param>
        <summary>データ ソースからロールを削除します。</summary>
        <returns><see langword="true" /> がデータ ソースから削除された場合は <paramref name="roleName" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteRole%2A> メソッドは、データソースからロール名を削除します。 <xref:System.Web.Security.Roles.DeleteRole%2A> は、既定のロールプロバイダーの <xref:System.Web.Security.RoleProvider.DeleteRole%2A> メソッドを呼び出して、指定されたロールをデータソースから削除します。  
  
 `throwOnPopulatedRole` が `true`場合は、例外がスローされ、`roleName` パラメーターで識別されるロールに1つ以上のメンバーが含まれている場合、ロールは削除されません。 `throwOnPopulatedRole` が `false`場合、ロールは空であるかどうかにかかわらず削除されます。  
  
   
  
## Examples  
 次のコード例では、データソースからロールを削除します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> が空の文字列です。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> に 1 つ以上のメンバーがあり、<paramref name="throwOnPopulatedRole" /> は <see langword="true" /> です。  
  
または 
ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public static string Domain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Domain { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string" Usage="System.Web.Security.Roles.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール名のクッキーのドメインの値を取得します。</summary>
        <value>ロール名のクッキーの <see cref="P:System.Web.HttpCookie.Domain" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Domain%2A> プロパティ値は、 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) configuration 要素の `domain` 属性を使用して、ASP.NET アプリケーションの構成で設定されます。  
  
 ドメイン属性の構成に値が指定されていない場合、<xref:System.Web.Security.Roles.Domain%2A> プロパティは `null` を返し、ロール名の cookie ドメインの既定値は <xref:System.Web.HttpCookie><xref:System.Web.HttpCookie.Domain%2A> プロパティの動作になります。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public static bool Enabled { get; }" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".property bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Enabled As Boolean" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Enabled { bool get(); };" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool" Usage="System.Web.Security.Roles.Enabled" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C#" Value="public static bool Enabled { get; set; }" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Enabled As Boolean" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Enabled { bool get(); void set(bool value); };" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Web.Security.Roles.Enabled" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の Web アプリケーションに対してロール管理が有効になっているかどうかを示す値を取得または設定します。</summary>
        <value>ロール管理が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、ASP.NET アプリケーションの web.config ファイルの `system.web` セクションの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))要素を示しています。 これは、アプリケーションが <xref:System.Web.Security.SqlRoleProvider> インスタンスを使用し、`enabled` 属性を `true`に設定することを指定します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersInRole : string * string -&gt; string[]" Usage="System.Web.Security.Roles.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">検索範囲とするロール。</param>
        <param name="usernameToMatch">検索するユーザー名。</param>
        <summary>指定されたロールで、ユーザー名が指定内容と一致するユーザーの一覧を取得します。</summary>
        <returns>ユーザー名が <paramref name="usernameToMatch" /> に一致し、指定されたロールのメンバーであるすべてのユーザーの名前を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.FindUsersInRole%2A> は、ユーザー名に、構成された `applicationName`の指定した `usernameToMatch` との一致が含まれている、ロール内のユーザーの一覧を返します。 たとえば、`usernameToMatch` パラメーターが "user" に設定されている場合、ユーザー "user1"、"user2"、"user3" などが返されます。 ユーザーは、ユーザー名のアルファベット順に返されます。  
  
 <xref:System.Web.Security.SqlRoleProvider> は、`usernameToMatch` パラメーターに対して LIKE 句を使用して検索を実行します。 LIKE 句の SQL Server でサポートされているワイルドカードは、`usernameToMatch` パラメーター値で使用できます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.Roles.FindUsersInRole%2A> メソッドを使用して、ユーザー入力に基づいてロールのメンバーシップを表示します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> が <see langword="null" /> (Visual Basic の場合は <see langword="Nothing" />) です。  
  
または 
 <paramref name="usernameToMatch" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> が空の文字列であるか、またはコンマ (,) を含んでいます。  
  
または 
 <paramref name="usernameToMatch" /> が空の文字列です。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public static string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="static member GetAllRoles : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アプリケーションのすべてのロールのリストを取得します。</summary>
        <returns>アプリケーションのデータ ソースに保存されているすべてのロール名を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetAllRoles%2A> メソッドは、既定のロールプロバイダーの <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=nameWithType> メソッドを呼び出して、アプリケーションのデータソースからすべてのロールの一覧を取得します。 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティで指定されたアプリケーションのロールのみが取得されます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.Roles.GetAllRoles%2A> メソッドを使用して、アプリケーションのロールの一覧を取得し、その結果を <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> コントロールにバインドします。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRolesForUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ユーザーに割り当てられたロールのリストを取得します。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser();" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在ログオンしているユーザーに割り当てられているロールのリストを取得します。</summary>
        <returns>現在ログオンしているユーザーに割り当てられているすべてのロールの名前を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetRolesForUser%2A> メソッドは、既定のロールプロバイダーの <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> メソッドを呼び出して、現在ログオンしているユーザーが存在するロールをデータソースから取得します。 現在ログオンしているユーザーは、現在の <xref:System.Web.HttpContext?displayProperty=nameWithType>の <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> プロパティによって識別されるか、非 HTTP ホスティング環境の <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> によって識別されます。 ユーザーがログオンしていない場合は、例外がスローされます。 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティで指定されたアプリケーションのロールのみが取得されます。  
  
 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> が `true`場合、<xref:System.Web.Security.Roles.GetRolesForUser%2A> メソッドの結果は、指定されたロールプロバイダーではなくロールキャッシュから返される可能性があります。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.Roles.GetRolesForUser%2A> メソッドを使用して、指定されたユーザーのロールの一覧を取得し、返されたロールを <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> コントロールにバインドします。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">現在ログオンしているユーザーはありません。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : string -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">ロールの一覧を取得するユーザー。</param>
        <summary>ユーザーに割り当てられたロールのリストを取得します。</summary>
        <returns>指定ユーザーに割り当てられたすべてのロールの名前を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetRolesForUser%2A> メソッドは、既定のロールプロバイダーの <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> メソッドを呼び出して、ユーザーが存在するロールをデータソースから取得します。 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティで指定されたアプリケーションのロールのみが取得されます。  
  
 `username` が現在ログオンしているユーザーと等しく、<xref:System.Web.Security.Roles.CacheRolesInCookie%2A> が `true`場合、指定された <xref:System.Web.Security.Roles.Provider%2A>ではなく、<xref:System.Web.Security.Roles.GetRolesForUser%2A> メソッドの結果がロールキャッシュから返される可能性があります。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.Roles.GetRolesForUser%2A> メソッドを使用して、指定されたユーザーのロールの一覧を取得し、返されたロールを <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> コントロールにバインドします。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> にコンマ (,) が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member GetUsersInRole : string -&gt; string[]" Usage="System.Web.Security.Roles.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">ユーザーの一覧を取得するロール。</param>
        <summary>指定されたロールに属するユーザーのリストを取得します。</summary>
        <returns>指定されたロールのメンバーであるすべてのユーザーの名前を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetUsersInRole%2A> メソッドは、既定のロールプロバイダーの <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> メソッドを呼び出して、データソースからロールに関連付けられているユーザー名を取得します。 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティで指定されたアプリケーションのロールのみが取得されます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.Roles.GetUsersInRole%2A> メソッドを使用して、特定のロールのユーザーの一覧を取得し、その結果を <xref:System.Web.UI.WebControls.GridView> コントロールにバインドします。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> が空の文字列であるか、またはコンマ (,) を含んでいます。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUserInRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ユーザーが指定されたロールに存在するかどうかを示す値を取得します。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">検索対象のロールの名前。</param>
        <summary>現在ログオンしているユーザーが指定されたロールに存在するかどうかを示す値を取得します。 API は、ASP.NET 要求スレッドのコンテキスト内でのみ呼び出すよう意図されており、その許可されたユース ケースではスレッド セーフです。</summary>
        <returns>現在ログオンしているユーザーが、指定されたロールに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.IsUserInRole%2A> メソッドは、既定のロールプロバイダーの <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=nameWithType> メソッドを呼び出して、現在ログオンしているユーザーが、<xref:System.Web.Security.Roles.ApplicationName%2A> プロパティで指定されたアプリケーションのデータソースからロールに関連付けられているかどうかを確認します。 現在ログオンしているユーザーは、現在の <xref:System.Web.HttpContext?displayProperty=nameWithType>の <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> プロパティによって識別されるか、非 HTTP ホスティング環境の <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> によって識別されます。 ユーザーがログオンしていない場合は、例外がスローされます。 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティで指定されたアプリケーションのロールのみが取得されます。  
  
 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> が `true`場合は、指定されたロールプロバイダーではなく、ロールキャッシュに対して `roleName` をチェックすることができます。  
  
   
  
## Examples  
 次のコード例では、ユーザーがアプリケーションのロール設定を表示できるようにする前に、現在ログオンしているユーザーが管理者ロールにあるかどうかをプログラムによって確認します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> が <see langword="null" /> です。  
  
または 
現在ログオンしているユーザーはありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> が空の文字列であるか、またはコンマ (,) を含んでいます。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string * string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">検索対象のユーザーの名前。</param>
        <param name="roleName">検索対象のロールの名前。</param>
        <summary>指定したユーザーが指定したロールに存在するかどうかを示す値を取得します。 API は、ASP.NET 要求スレッドのコンテキスト内でのみ呼び出すよう意図されており、その許可されたユース ケースではスレッド セーフです。</summary>
        <returns>指定したユーザーが指定したロールにある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.IsUserInRole%2A> メソッドは、既定のロールプロバイダーの <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> メソッドを呼び出して、<xref:System.Web.Security.Roles.ApplicationName%2A> プロパティで指定されたアプリケーションのデータソースからユーザー名がロールに関連付けられているかどうかを判断します。  
  
 `username` が現在ログオンしているユーザーと同じで <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> プロパティの値が `true`場合は、指定された <xref:System.Web.Security.Roles.Provider%2A>ではなく、ロールキャッシュに対して `roleName` がチェックされる可能性があります。  
  
   
  
## Examples  
 次のコード例では、ユーザーがアプリケーションのロール設定を表示できるようにする前に、ユーザーが管理者ロールに存在するかどうかをプログラムによって確認します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> が <see langword="null" /> です。  
  
または 
 <paramref name="username" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> が空の文字列であるか、またはコンマ (,) を含んでいます。  
  
または 
 <paramref name="username" /> にコンマ (,) が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="MaxCachedResults">
      <MemberSignature Language="C#" Value="public static int MaxCachedResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxCachedResults" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.MaxCachedResults" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxCachedResults As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxCachedResults { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxCachedResults : int" Usage="System.Web.Security.Roles.MaxCachedResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーに対してキャッシュするロール名の最大数を取得します。</summary>
        <value>ユーザーに対してキャッシュするロール名の最大数。 既定値は 25 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.MaxCachedResults%2A> プロパティは、`maxCachedResults` 構成属性を使用して設定されます。 `maxCachedResults` 構成属性の値は、0より大きい整数値に設定する必要があります。  
  
   
  
## Examples  
 次の例は、ASP.NET アプリケーションの web.config ファイルの `system.web` セクションの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))要素を示しています。 これは、アプリケーションが <xref:System.Web.Security.SqlRoleProvider> インスタンスを使用し、`maxCachedResults` 属性を10に設定することを指定します。  
  
```  
<roleManager  
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All"   
  maxCachedResults="10" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As RoleProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProvider ^ Provider { System::Web::Security::RoleProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.Security.RoleProvider" Usage="System.Web.Security.Roles.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションの既定のロール プロバイダーを取得します。</summary>
        <value><see cref="T:System.Web.Security.RoleProvider" /> 抽象クラスを継承するクラスとして公開される、アプリケーションの既定のロール プロバイダー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Provider%2A> プロパティを使用すると、アプリケーションの既定のロールプロバイダーを直接参照できます。 これは一般的に、<xref:System.Web.Security.RoleProvider> 抽象クラスに含まれていないロールプロバイダーのカスタムメンバーにアクセスするために使用されます。  
  
 たとえば、<xref:System.Web.Security.WindowsTokenRoleProvider> クラスには、ユーザーが <xref:System.Security.Principal.WindowsBuiltInRole> 列挙値を使用して共通の Windows ロールに存在するかどうかを判断できるようにするための <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> メソッドのオーバーロードが含まれています。 アプリケーションの <xref:System.Web.Security.WindowsTokenRoleProvider> クラスへの参照は、<xref:System.Web.Security.Roles.Provider%2A> プロパティを使用して取得でき、<xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> のオーバーロードを参照するために <xref:System.Web.Security.WindowsTokenRoleProvider> としてキャストできます。  
  
 アプリケーションに複数のロールプロバイダーが構成されている場合は、<xref:System.Web.Security.Roles.Providers%2A> コレクションを使用して異なるロールプロバイダーにアクセスできます。  
  
   
  
## Examples  
 次のコード例では、既定のロールプロバイダーを <xref:System.Web.Security.WindowsTokenRoleProvider> としてキャストし、現在ログオンしているユーザーが管理者ロールに存在するかどうかを確認してから、ユーザーがアプリケーションのロール設定を表示できるようにします。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.WindowsTokenRoleProvider>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/CS/ViewRoles2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/VB/ViewRoles2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As RoleProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProviderCollection ^ Providers { System::Web::Security::RoleProviderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Web.Security.RoleProviderCollection" Usage="System.Web.Security.Roles.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET アプリケーションのロール プロバイダーのコレクションを取得します。</summary>
        <value>ASP.NET アプリケーション用に構成されたロール プロバイダーを含む <see cref="T:System.Web.Security.RoleProviderCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Providers%2A> プロパティは、web.config ファイルに追加されたプロバイダーを含め、アプリケーションに対して有効なすべてのロールプロバイダーを参照します。 アプリケーションで使用できるロールプロバイダーを制御するには、アプリケーションの web.config ファイルの[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))セクションの `providers` 要素を使用します。  
  
 次の例は、 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v=vs.100))セクションを示しています。このセクションでは、既存のプロバイダー (machine.config ファイルで指定されているものなど) を削除し、アプリケーションのロールプロバイダーとして <xref:System.Web.Security.SqlRoleProvider> インスタンスを追加します。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  
  <system.web>  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="false"  
      cookieSlidingExpiration="true"  
      cookieProtection="Encrypted">  
  
      <providers>  
        <clear/>  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="MyApplication" />  
         </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 名前によってロールプロバイダーのインデックスを作成し、目的の型としてキャストすることで、<xref:System.Web.Security.Roles.Providers%2A> コレクションからプロバイダーへの厳密に型指定された参照を取得できます。  
  
 アプリケーションの既定のプロバイダーへの参照を取得するには、<xref:System.Web.Security.Roles.Provider%2A> プロパティを使用します。  
  
   
  
## Examples  
 次のコード例では、アプリケーションに対して有効になっているプロバイダーとそれぞれの種類を一覧表示します。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Roles#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">指定されたロールから削除するユーザー。</param>
        <param name="roleName">指定されたユーザーを削除するロール。</param>
        <summary>指定されたユーザーを指定されたロールから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUserFromRole%2A> メソッドは、既定のロールプロバイダーを呼び出して、指定されたユーザーをデータソースの指定されたロールから削除します。  
  
   
  
## Examples  
 次のコード例では、ロールからユーザーを削除します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> が <see langword="null" /> です。  
  
または 
 <paramref name="username" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> が空の文字列であるか、またはコンマ (,) を含んでいます。 
 <paramref name="username" /> が空の文字列であるか、またはコンマ (,) を含んでいます。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">指定したロールから削除するユーザー。</param>
        <param name="roleNames">指定したユーザーを削除するロール名の文字列配列。</param>
        <summary>指定したユーザーを指定したロールから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> メソッドは、既定のロールプロバイダーを呼び出して、指定されたユーザーをデータソースの指定されたロールから削除します。  
  
 アプリケーションが <xref:System.Web.Security.SqlRoleProvider> クラスを使用するように構成されている場合、<xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> メソッドの呼び出し中に実行されるデータベースの更新はトランザクション内で行われます。 指定されたロールに含まれていないユーザー名など、エラーが発生した場合、トランザクションはロールバックされ、更新は実行されません。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> メソッドを使用して、1つまたは複数のロールからユーザーを削除します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUserFromRolescs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Roles#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUserFromRolesvb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" /> のロールの 1 つが <see langword="null" /> です。  
  
または 
 <paramref name="username" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" /> のロールの 1 つが空の文字列か、またはコンマ (,) を含んでいます。  
  
または 
 <paramref name="username" /> が空の文字列であるか、またはコンマ (,) を含んでいます。  
  
または 
 <paramref name="roleNames" /> に重複した要素が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">指定したロールから削除するユーザー名の文字列配列。</param>
        <param name="roleName">指定したユーザーを削除するロールの名前。</param>
        <summary>指定したユーザーを指定したロールから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> メソッドは、既定のロールプロバイダーを呼び出して、指定されたユーザーをデータソースの指定されたロールから削除します。  
  
 アプリケーションで <xref:System.Web.Security.SqlRoleProvider> クラスを使用している場合は、<xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> メソッドの呼び出し中に実行されるデータベースの更新がトランザクション内で行われます。 指定されたロールに含まれていないユーザー名など、エラーが発生した場合、トランザクションはロールバックされ、更新は実行されません。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> メソッドを使用して、1人以上のユーザーをロールから削除します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolecs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Roles#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolevb.aspx#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> が <see langword="null" /> です。  
  
または 
<paramref name="usernames" /> のユーザー名の 1 つが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> が空の文字列であるか、またはコンマ (,) を含んでいます。  
  
または 
<paramref name="usernames" /> のロールの 1 つが空の文字列か、またはコンマ (,) を含んでいます。  
  
または 
 <paramref name="usernames" /> に重複した要素が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">指定したロールから削除するユーザー名の文字列配列。</param>
        <param name="roleNames">指定したユーザーを削除するロール名の文字列配列。</param>
        <summary>指定されたユーザー名を指定されたロールから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> メソッドは、既定のロールプロバイダーを呼び出して、指定されたユーザーをデータソースの指定されたロールから削除します。  
  
 アプリケーションで <xref:System.Web.Security.SqlRoleProvider> クラスを使用している場合は、<xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> メソッドの呼び出し中に実行されるデータベースの更新がトランザクション内で行われます。 指定されたロールに含まれていないユーザー名など、エラーが発生した場合、トランザクションはロールバックされ、更新は実行されません。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> メソッドを使用して、ユーザー入力に基づいて1つ以上のロールから1人以上のユーザーを削除します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolescs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Roles#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolesvb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" /> で指定されたロールの 1 つが <see langword="null" /> です。  
  
または 
<paramref name="usernames" /> で指定されたユーザーの 1 つが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" /> で指定されたロールの 1 つが空の文字列か、またはコンマ (,) を含んでいます。  
  
または 
<paramref name="usernames" /> で指定されたユーザーの 1 つが空の文字列か、またはコンマ (,) を含んでいます。  
  
または 
 <paramref name="roleNames" /> に重複した要素が含まれています。  
  
または 
 <paramref name="usernames" /> に重複した要素が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public static bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RoleExists : string -&gt; bool" Usage="System.Web.Security.Roles.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">データ ソースで検索するロールの名前。</param>
        <summary>指定されたロール名がロール データ ソースに既に存在するかどうかを示す値を取得します。</summary>
        <returns>ロール名がデータ ソースに既に存在する場合は <see langword="true" />。それ以外の場合は<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RoleExists%2A> メソッドは、既定のロールプロバイダーの `RoleExists` メソッドを呼び出して、<xref:System.Web.Security.Roles.ApplicationName%2A> プロパティで指定されたアプリケーションのロール名がデータソースに存在するかどうかを判断します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.Security.Roles.RoleExists%2A> メソッドを使用して、ロールを作成する前にロール名が既に存在するかどうかを確認します。 ロール管理を有効にする web.config ファイルの例については、「<xref:System.Web.Security.Roles>」を参照してください。  
  
> [!IMPORTANT]
>  この例には、セキュリティ上の脅威となる可能性のあるユーザー入力を受け付けるテキストボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[スクリプトによる攻略の概要](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> が <see langword="null" /> (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> が空の文字列であるか、またはコンマ (,) を含んでいます。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理は有効になっていません。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">ASP.NET ロール管理について</related>
      </Docs>
    </Member>
  </Members>
</Type>
