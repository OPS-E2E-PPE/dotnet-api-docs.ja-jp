<Type Name="StronglyTypedResourceBuilder" FullName="System.Resources.Tools.StronglyTypedResourceBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8f576a39ff458c4d32741e680402ea733d1ea181" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83950610" /></Metadata><TypeSignature Language="C#" Value="public static class StronglyTypedResourceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StronglyTypedResourceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.Tools.StronglyTypedResourceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class StronglyTypedResourceBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class StronglyTypedResourceBuilder abstract sealed" />
  <TypeSignature Language="F#" Value="type StronglyTypedResourceBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>厳密に型指定されたリソースをサポートします。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 通常、リソースは、アプリケーション内のコンテンツからコードを分離します。 これらのリソースを作成して使用することで、ローカライズ可能なアプリケーションを簡単に開発できます。 .NET Framework では、リソースは通常、<xref:System.Resources.ResourceManager> クラスを使用して消費されます。このクラスには、実行時にカルチャ固有のリソースへのアクセスを提供するメソッドが含まれています。 リソースの作成と使用の詳細については、「[デスクトップアプリのリソース](/dotnet/framework/resources/)」を参照してください。

 厳密に型指定されたリソースのサポートは、静的な読み取り専用 (`get`) プロパティのセットを含むクラスを作成することによって、リソースへのアクセスをカプセル化するコンパイル時の機能です。 これにより、<xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> および <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> メソッドを呼び出す代わりに、リソースを使用する別の方法が提供されます。

 厳密に型指定されたリソースのサポートの基本機能は、<xref:System.Resources.Tools.StronglyTypedResourceBuilder> クラス ( [resgen.exe (リソースファイルジェネレーター)](/dotnet/framework/tools/resgen-exe-resource-file-generator)の `/str` コマンドラインオプション) によって提供されます。 <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> メソッドの出力は、入力パラメーターで参照されるリソースと一致する厳密に型指定されたプロパティを含むクラスです。 このクラスは、処理されたファイルで使用できるリソースへの読み取り専用アクセスを提供します。



## Examples
 次の例では、 C# (例のソースコードに応じて) または Visual Basic で記述された `DemoResources` という名前のクラスを生成します。 このクラスは `DemoApp` 名前空間にあり、ロゴのビットマップとアプリケーションの名前を返すプロパティがあります。 この例では、`CreateResourceFile` メソッドを呼び出して必要な resw ファイルを作成します。また、Logo という名前のビットマップファイルが、この例の現在のディレクトリにあることが必要です。 このコード例では、次のように、demo という名前のリソースファイルを使用します。

 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/example1.cs#1)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/example1.vb#1)]

 アプリケーションコードでは、次のようにクラスを使用できます。

 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/demoresources.cs#2)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/demoresources.vb#2)]

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>入力パラメーターで指定されているリソースと一致する、厳密に型指定されたプロパティが含まれるクラス ファイルを生成します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * System.CodeDom.Compiler.CodeDomProvider * bool * String[] -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">各ディクショナリ エントリのキーと値のペアがリソースの名前とリソースの値である <see cref="T:System.Collections.IDictionary" /> コレクション。</param>
        <param name="baseName">生成するクラスの名前。</param>
        <param name="generatedCodeNamespace">生成するクラスの名前空間。</param>
        <param name="codeProvider">クラスが生成される言語を提供する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラス。</param>
        <param name="internalClass">内部クラスを生成する場合は <see langword="true" />。パブリック クラスを生成する場合は <see langword="false" />。</param>
        <param name="unmatchable">プロパティを生成できない各リソース名が含まれる配列。 通常、プロパティが生成できないのは、リソース名が有効な識別子ではないためです。</param>
        <summary>指定されたコレクションで参照されたリソースと一致する、厳密に型指定されたプロパティが含まれるクラス ファイルを生成します。</summary>
        <returns><see cref="T:System.CodeDom.CodeCompileUnit" /> コンテナー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> メソッドを使用して、`resourceList` パラメーターに格納されているリソースにアクセスするための、厳密に型指定された読み取り専用ラッパーを提供するクラスを生成します。

 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> クラスは、文字 "$" または "> >" で始まるすべてのリソース名を無視します。 リソース名 "Culture" と "ResourceManager" は無効な識別子です。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceList" />、 <paramref name="basename" />、または <paramref name="codeProvider" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">リソース ノード名が <paramref name="resourceList" /> のそのキーと一致しません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool * String[] -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">入力として使用される .resx ファイルの名前。</param>
        <param name="baseName">生成するクラスの名前。</param>
        <param name="generatedCodeNamespace">生成するクラスの名前空間。</param>
        <param name="codeProvider">クラスが生成される言語を提供する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラス。</param>
        <param name="internalClass">内部クラスを生成する場合は <see langword="true" />。パブリック クラスを生成する場合は <see langword="false" />。</param>
        <param name="unmatchable">プロパティを生成できない各リソース名が含まれる <see cref="T:System.String" /> 配列。 通常、プロパティが生成できないのは、リソース名が有効な識別子ではないためです。</param>
        <summary>指定された .resx ファイルのリソースに一致する厳密に型指定されたプロパティを格納するクラス ファイルを生成します。</summary>
        <returns><see cref="T:System.CodeDom.CodeCompileUnit" /> コンテナー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> メソッドを使用して、`resxFile` パラメーターに含まれるリソースへの厳密に型指定された読み取り専用アクセスを提供するクラスを生成します。

 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> クラスは、文字 "$" または "> >" で始まるすべてのリソース名を無視します。 リソース名 "Culture" と "ResourceManager" は無効な識別子です。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="basename" /> 、または <paramref name="codeProvider" /> が <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool * String[] -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">各ディクショナリ エントリのキーと値のペアがリソースの名前とリソースの値である <see cref="T:System.Collections.IDictionary" /> コレクション。</param>
        <param name="baseName">生成するクラスの名前。</param>
        <param name="generatedCodeNamespace">生成するクラスの名前空間。</param>
        <param name="resourcesNamespace">生成するリソースの名前空間。</param>
        <param name="codeProvider">クラスが生成される言語を提供する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> オブジェクト。</param>
        <param name="internalClass">内部クラスを生成する場合は <see langword="true" />。パブリック クラスを生成する場合は <see langword="false" />。</param>
        <param name="unmatchable">プロパティを生成できない各リソース名が含まれる <see cref="T:System.String" /> 配列。 通常、プロパティが生成できないのは、リソース名が有効な識別子ではないためです。</param>
        <summary>指定されたコレクションで参照されたリソースと一致する、厳密に型指定されたプロパティが含まれるクラス ファイルを生成します。</summary>
        <returns><see cref="T:System.CodeDom.CodeCompileUnit" /> コンテナー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このオーバーロードでは、`resourcesNamespace` パラメーターを使用して、生成されるリソースの名前空間を指定できます。 この場合、生成されたコードは次のようになります。

```
System.Resources.ResourceManager rm = new System.Resources.ResourceManager("<resourceNamespace>.<baseName>",typeof(baseName).Assembly);
```

 ほとんどの場合、このメソッドをアプリケーションコードから呼び出す必要はありません。

 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> クラスは、文字 "$" または "> >" で始まるすべてのリソース名を無視します。 リソース名 "Culture" と "ResourceManager" は無効な識別子です。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceList" />、 <paramref name="basename" />、または <paramref name="codeProvider" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">リソース ノード名が <paramref name="resourceList" /> のそのキーと一致しません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool * String[] -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">入力として使用される .resx ファイルの名前。</param>
        <param name="baseName">生成するクラスの名前。</param>
        <param name="generatedCodeNamespace">生成するクラスの名前空間。</param>
        <param name="resourcesNamespace">生成するリソースの名前空間。</param>
        <param name="codeProvider">クラスが生成される言語を提供する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラス。</param>
        <param name="internalClass">内部クラスを生成する場合は <see langword="true" />。パブリック クラスを生成する場合は <see langword="false" />。</param>
        <param name="unmatchable">プロパティを生成できない各リソース名が含まれる <see cref="T:System.String" /> 配列。 通常、プロパティが生成できないのは、リソース名が有効な識別子ではないためです。</param>
        <summary>指定された .resx ファイルのリソースに一致する厳密に型指定されたプロパティを格納するクラス ファイルを生成します。</summary>
        <returns><see cref="T:System.CodeDom.CodeCompileUnit" /> コンテナー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> メソッドを使用して、`resxFile` パラメーターに含まれるリソースへの厳密に型指定された読み取り専用アクセスを提供するクラスを生成します。

 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> クラスは、文字 "$" または "> >" で始まるすべてのリソース名を無視します。 リソース名 "Culture" と "ResourceManager" は無効な識別子です。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="basename" /> 、または <paramref name="codeProvider" /> が <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyResourceName">
      <MemberSignature Language="C#" Value="public static string VerifyResourceName (string key, System.CodeDom.Compiler.CodeDomProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyResourceName(string key, class System.CodeDom.Compiler.CodeDomProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName(System.String,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyResourceName (key As String, provider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VerifyResourceName(System::String ^ key, System::CodeDom::Compiler::CodeDomProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member VerifyResourceName : string * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName (key, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="provider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="key">検証対象となる文字列。必要に応じて、有効なリソース名に変換します。</param>
        <param name="provider">使用する対象言語を指定する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> オブジェクト。</param>
        <summary>指定された入力文字列とコード プロバイダーに基づいて、有効なリソース文字列を生成します。</summary>
        <returns><paramref name="key" /> パラメーターから派生した有効なリソース名。 無効なトークンはアンダースコア (_) 文字で置き換えられます。または、<paramref name="provider" /> パラメーターで指定された言語では無効な文字が残っている場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 `key` パラメーターが有効な文字列である場合は、その文字列が返されます。 `key` パラメーターが無効な文字列であるか、無効な文字を含む文字列の場合、<xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> メソッドは、`key` および `provider` パラメーターに基づいて有効な文字列を生成しようとします。 有効な文字列を生成できる場合は、その文字列が返されます。それ以外の場合は `null` が返されます。

 `key` パラメーターが空の文字列 ("") の場合、1つのアンダースコア文字 (_) で構成される文字列が返されます。 `key` パラメーターが空の文字列でない場合、<xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> メソッドは、文字列内の各文字を、`provider` パラメーターで指定された言語に基づいて、無効なトークンのセットと比較します。 文字列内の無効な文字は、アンダースコア文字で置き換えられます。 アンダースコアで置換される文字は次のとおりです。

 ' ' (スペース)、U + 00A0 (改行なしのスペース)、'. '(ピリオド)、'、' (コンマ)、'; '(セミコロン)、' &#124; '、' ~ '、' @ '、' # '、'% '、' ^ '、' & '、' * '、' + '、'-'、'/'、'\\'、'\<'、' > '、'? '、' ['、'] '、' ('、') '、' {'、'} '、' "' (引用符)、' ' ' (アポストロフィ)、': '、および '! '。

> [!NOTE]
>  厳密に型指定されたリソースでは、リソースキー名として言語キーワード (`if`、`for`など) を使用することはできません。 ただし、<xref:System.CodeDom> 設計パターンでは、キーワードの前にアンダースコア文字を付けることで、言語キーワードを使用できます。 <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> メソッドは、このデザインを適用するために <xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A> メソッドを呼び出します。 たとえば、`for`などの言語キーワードと同じリソース名を使用すると、生成された厳密に型指定されたリソースクラスに `_for` として名前が表示されます。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> 、または <paramref name="provider" /> が <see langword="null" />です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
