<Type Name="IsImplicitlyDereferenced" FullName="System.Runtime.CompilerServices.IsImplicitlyDereferenced">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9051fbc5681b02a8ce7362165d080a8f0141a6d9" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953507" /></Metadata><TypeSignature Language="C#" Value="public static class IsImplicitlyDereferenced" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsImplicitlyDereferenced extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />
  <TypeSignature Language="VB.NET" Value="Public Class IsImplicitlyDereferenced" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsImplicitlyDereferenced abstract sealed" />
  <TypeSignature Language="F#" Value="type IsImplicitlyDereferenced = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.CompilerServices.VisualC" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a3796-101">修飾されるガベージ コレクション参照がメソッド シグネチャ内の参照パラメーターを表すことを示します。</span><span class="sxs-lookup"><span data-stu-id="a3796-101">Indicates that the modified garbage collection reference represents a reference parameter within a method signature.</span></span> <span data-ttu-id="a3796-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="a3796-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3796-103">コンパイラC++は <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> 修飾子を使用して、マネージ参照によって渡される参照クラスをマネージポインターによって渡されるものと区別します。</span><span class="sxs-lookup"><span data-stu-id="a3796-103">The C++ compiler uses the <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> modifier to distinguish reference classes that are passed by managed reference from those passed by managed pointer.</span></span>  <span data-ttu-id="a3796-104"><xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> クラスとそのパートナー (<xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> クラス) は、ポインターパラメーターから参照パラメーターを明確に区別します。</span><span class="sxs-lookup"><span data-stu-id="a3796-104">The <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> class and its partner, the <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters.</span></span>  
  
 <span data-ttu-id="a3796-105">コンパイラは、既定の動作が適切でない場合にジャストインタイム (JIT) コンパイラが値を処理する方法を変更するために、メタデータ内にカスタム修飾子を出力します。</span><span class="sxs-lookup"><span data-stu-id="a3796-105">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="a3796-106">JIT コンパイラはカスタム修飾子を検出すると、修飾子によって指定された方法で値を処理します。</span><span class="sxs-lookup"><span data-stu-id="a3796-106">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="a3796-107">コンパイラは、メソッド、パラメーター、および戻り値にカスタム修飾子を適用できます。</span><span class="sxs-lookup"><span data-stu-id="a3796-107">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="a3796-108">JIT コンパイラは必須の修飾子に応答する必要がありますが、省略可能な修飾子は無視できます。</span><span class="sxs-lookup"><span data-stu-id="a3796-108">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="a3796-109">次のいずれかの方法を使用して、カスタム修飾子をメタデータに出力できます。</span><span class="sxs-lookup"><span data-stu-id="a3796-109">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="a3796-110"><xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>、<xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>、<xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>、<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>などの <xref:System.Reflection.Emit.TypeBuilder> クラスのメソッドの使用。</span><span class="sxs-lookup"><span data-stu-id="a3796-110">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="a3796-111">`modopt` と `modreq`の呼び出しを含む Microsoft 中間言語 (MSIL) 命令ファイルを生成し、 [Ilasm (IL アセンブラー)](/dotnet/framework/tools/ilasm-exe-il-assembler)を使用してファイルをアセンブルします。</span><span class="sxs-lookup"><span data-stu-id="a3796-111">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](/dotnet/framework/tools/ilasm-exe-il-assembler).</span></span>  
  
-   <span data-ttu-id="a3796-112">アンマネージリフレクション API を使用します。</span><span class="sxs-lookup"><span data-stu-id="a3796-112">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3796-113">次の例は、リフレクションを使用して <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> オブジェクトをアセンブリに出力する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a3796-113">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsImplicitlyDereferenced#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsImplicitlyDereferenced/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
