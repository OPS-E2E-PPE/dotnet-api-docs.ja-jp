<Type Name="InternalsVisibleToAttribute" FullName="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5e9e388168203d273103968e34415264622b36de" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78691139" /></Metadata><TypeSignature Language="C#" Value="public sealed class InternalsVisibleToAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InternalsVisibleToAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InternalsVisibleToAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InternalsVisibleToAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type InternalsVisibleToAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c60e4-101">通常は現在のアセンブリ内でのみ参照できる型が、指定したアセンブリから参照可能であることを指定します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-101">Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c60e4-102">通常、`internal` または `private protected` スコープ (内C#) と `Friend` および `Private Protected` スコープ (Visual Basic) の型およびメンバーは、それらが定義されているアセンブリ内でのみ表示されます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-102">Ordinarily, types and members with `internal` or `private protected` scope (in C#) and `Friend` and `Private Protected` scope (in Visual Basic) are visible only in the assembly in which they are defined.</span></span> <span data-ttu-id="c60e4-103"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 属性は、フレンドアセンブリと呼ばれる、指定されたアセンブリ内の型からも参照できるようにします。</span><span class="sxs-lookup"><span data-stu-id="c60e4-103">The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute makes them also visible to the types in a specified assembly, which is known as a friend assembly.</span></span> <span data-ttu-id="c60e4-104">これは `internal` (VB の`Friend`) または `private protected`(VB の場合は`Private Protected`) にのみ適用されますが、`private` は含まれません。</span><span class="sxs-lookup"><span data-stu-id="c60e4-104">This only applies to `internal` (`Friend` in VB) or `private protected`(`Private Protected` in VB) methods only, but not `private` ones.</span></span>
  
 <span data-ttu-id="c60e4-105">属性は、アセンブリレベルで適用されます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-105">The attribute is applied at the assembly level.</span></span> <span data-ttu-id="c60e4-106">これは、ソースコードファイルの先頭に含めることも、Visual Studio プロジェクトの AssemblyInfo ファイルに含めることもできることを意味します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-106">This means that it can be included at the beginning of a source code file, or it can be included in the AssemblyInfo file in a Visual Studio project.</span></span> <span data-ttu-id="c60e4-107">属性を使用して、現在のアセンブリの内部型およびメンバーにアクセスできる単一のフレンドアセンブリを指定できます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-107">You can use the attribute to specify a single friend assembly that can access the internal types and members of the current assembly.</span></span> <span data-ttu-id="c60e4-108">複数のフレンドアセンブリを定義するには、次の2つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="c60e4-108">You can define multiple friend assemblies in two ways.</span></span> <span data-ttu-id="c60e4-109">これらは、次の例に示すように、個々のアセンブリレベル属性として表示できます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-109">They can appear as individual assembly-level attributes, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]  
  
 <span data-ttu-id="c60e4-110">また、次の例に示すように、個別の <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> タグでも1つの `assembly` キーワードを使用して表示することもできます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-110">They can also appear with separate <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> tags but a single `assembly` keyword, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]  
  
 <span data-ttu-id="c60e4-111">フレンドアセンブリは、<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> コンストラクターによって識別されます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-111">The friend assembly is identified by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor.</span></span> <span data-ttu-id="c60e4-112">現在のアセンブリとフレンドアセンブリの両方が符号なしであるか、または両方のアセンブリが厳密な名前で署名されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="c60e4-112">Both the current assembly and the friend assembly must be unsigned, or both assemblies must be signed with a strong name.</span></span>  
  
 <span data-ttu-id="c60e4-113">両方のアセンブリが署名されていない場合、`assemblyName` 引数は、ディレクトリパスまたはファイル名拡張子なしで指定されたフレンドアセンブリの名前で構成されます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-113">If both assemblies are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file name extension.</span></span>  
  
 <span data-ttu-id="c60e4-114">両方のアセンブリが厳密な名前で署名されている場合、<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> コンストラクターの引数は、ディレクトリパスまたはファイル名拡張子を持たないアセンブリの名前と、完全な公開キー (公開キートークンではなく) で構成されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="c60e4-114">If both assemblies are signed with a strong name, the argument to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor must consist of the name of the assembly without its directory path or file name extension, along with the full public key (and not its public key token).</span></span> <span data-ttu-id="c60e4-115">厳密な名前付きアセンブリの完全な公開キーを取得するには、この記事で後述する「[完全な公開キーの取得](#Key)」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="c60e4-115">To get the full public key of a strong-named assembly, see the [Getting the full public key](#Key) section later in this article.</span></span> <span data-ttu-id="c60e4-116">厳密な名前付きアセンブリでの <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> の使用の詳細については、<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> コンストラクターを参照してください。</span><span class="sxs-lookup"><span data-stu-id="c60e4-116">For more information about using <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> with strong-named assemblies, see the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="c60e4-117">引数に <xref:System.Reflection.AssemblyName.CultureInfo%2A>、<xref:System.Reflection.AssemblyName.Version%2A>、または <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> フィールドの値を含めないでください。Visual Basic、 C#、およびC++コンパイラは、これをコンパイラエラーとして扱います。</span><span class="sxs-lookup"><span data-stu-id="c60e4-117">Do not include values for the <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, or <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> field in the argument; the Visual Basic, C#, and C++ compilers treat this as a compiler error.</span></span> <span data-ttu-id="c60e4-118">エラーとして扱わないコンパイラ (たとえば、 [IL アセンブラー (ILAsm)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) を使用する場合、アセンブリは厳密な名前であるため、指定されたフレンドアセンブリが <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 属性を含むアセンブリに初めてアクセスすると、<xref:System.MethodAccessException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-118">If you use a compiler that does not treat it as an error (such as the [IL Assembler (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) and the assemblies are strong-named, a <xref:System.MethodAccessException> exception is thrown the first time the specified friend assembly accesses the assembly that contains the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute.</span></span>  
  
 <span data-ttu-id="c60e4-119">この属性の使用方法の詳細については、次のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="c60e4-119">For more information about how to use this attribute, see the following topics:</span></span>  
  
-   [<span data-ttu-id="c60e4-120">フレンド アセンブリ (C++)</span><span class="sxs-lookup"><span data-stu-id="c60e4-120">Friend Assemblies (C++)</span></span>](/cpp/dotnet/friend-assemblies-cpp)  
  
-   [<span data-ttu-id="c60e4-121">フレンド アセンブリ</span><span class="sxs-lookup"><span data-stu-id="c60e4-121">Friend assemblies</span></span>](~/docs/standard/assembly/friend.md)  
  
<a name="Key"></a>   
## <a name="getting-the-full-public-key"></a><span data-ttu-id="c60e4-122">完全な公開キーを取得しています</span><span class="sxs-lookup"><span data-stu-id="c60e4-122">Getting the full public key</span></span>  
 <span data-ttu-id="c60e4-123">厳密[名ツール (sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md)を使用して、厳密な名前のキー (.snk) ファイルから完全な公開キーを取得できます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-123">You can use the [Strong Name Tool (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file.</span></span> <span data-ttu-id="c60e4-124">これを行うには、次の手順を実行します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-124">To do this, you perform the following steps:</span></span>  
  
1.  <span data-ttu-id="c60e4-125">厳密な名前のキーファイルから別のファイルに公開キーを抽出します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-125">Extract the public key from the strong-named key file to a separate file:</span></span>  
  
     <span data-ttu-id="c60e4-126">\**Sn-p\*\*\*snk_file* \*\* の出力</span><span class="sxs-lookup"><span data-stu-id="c60e4-126">**Sn -p**  *snk_file* *outfile*</span></span>  
  
2.  <span data-ttu-id="c60e4-127">完全な公開キーをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-127">Display the full public key to the console:</span></span>  
  
     <span data-ttu-id="c60e4-128">\*\*Sn-tp\*\*\*\* 出力</span><span class="sxs-lookup"><span data-stu-id="c60e4-128">**Sn -tp**  *outfile*</span></span>  
  
3.  <span data-ttu-id="c60e4-129">完全な公開キーの値をコピーして、ソースコードに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-129">Copy and paste the full public key value into your source code.</span></span>  
  
## <a name="compiling-the-friend-assembly-with-c"></a><span data-ttu-id="c60e4-130">を使用したフレンドアセンブリのコンパイルC#</span><span class="sxs-lookup"><span data-stu-id="c60e4-130">Compiling the friend assembly with C#</span></span>  
 <span data-ttu-id="c60e4-131">C#コンパイラを使用してフレンドアセンブリをコンパイルする場合は、 **/out**コンパイラオプションを使用して、出力ファイル (.exe または .dll) の名前を明示的に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c60e4-131">If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option.</span></span> <span data-ttu-id="c60e4-132">この指定は必ず行ってください。コンパイラが外部参照にバインドする時点ではまだ、ビルド中のアセンブリの名前が生成されていないためです。</span><span class="sxs-lookup"><span data-stu-id="c60e4-132">This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.</span></span> <span data-ttu-id="c60e4-133">**/Out**コンパイラオプションは Visual Basic コンパイラでは省略可能であり、 F#コンパイラを使用してフレンドアセンブリをコンパイルするときに、対応する**out**または **-o**コンパイラオプションを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="c60e4-133">The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.</span></span>  
  
## <a name="compiling-the-friend-assembly-with-c"></a><span data-ttu-id="c60e4-134">を使用したフレンドアセンブリのコンパイルC++</span><span class="sxs-lookup"><span data-stu-id="c60e4-134">Compiling the friend assembly with C++</span></span>  
 <span data-ttu-id="c60e4-135">でC++は、<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 属性によって有効にされた内部メンバーをフレンドアセンブリからアクセスできるようにするには、 C++ディレクティブで `as_friend` 属性を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c60e4-135">In C++, in order to make the internal members enabled by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute accessible to a friend assembly, you must use the `as_friend` attribute in the C++  directive.</span></span> <span data-ttu-id="c60e4-136">詳細については、「 [FriendC++Assemblies ()](/cpp/dotnet/friend-assemblies-cpp)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c60e4-136">For more information, see [Friend Assemblies (C++)](/cpp/dotnet/friend-assemblies-cpp).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c60e4-137">**署名されたアセンブリ**</span><span class="sxs-lookup"><span data-stu-id="c60e4-137">**Signed assemblies**</span></span>  
  
 <span data-ttu-id="c60e4-138">次の例では、<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 属性を使用して、署名されたアセンブリに `AppendDirectorySeparator` という名前の `internal` メソッドを別の署名されたアセンブリから参照できるようにします。</span><span class="sxs-lookup"><span data-stu-id="c60e4-138">The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` method named `AppendDirectorySeparator` in a signed assembly visible to another signed assembly.</span></span> <span data-ttu-id="c60e4-139">内部 `AppendDirectorySeparator` メソッドを含む `FileUtilities` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-139">It defines a `FileUtilities` class that includes an internal `AppendDirectorySeparator` method.</span></span> <span data-ttu-id="c60e4-140"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 属性は、`FileUtilities` クラスを含むアセンブリに適用されます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-140">The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute is applied to the assembly that contains the `FileUtilities` class.</span></span> <span data-ttu-id="c60e4-141">属性は、`Friend1` という名前のアセンブリがこの内部メンバーにアクセスできるようにします。</span><span class="sxs-lookup"><span data-stu-id="c60e4-141">The attribute allows an assembly named `Friend1` to access this internal member.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 <span data-ttu-id="c60e4-142">次の例が `Friend1`という名前の厳密な名前のアセンブリにコンパイルされている場合、`Friend1` の `Example.Main` メソッドは `FileUtilities.AppendDirectorySeparator` メソッドを正常に呼び出すことができます。ただし、メソッドは `Assembly1` アセンブリの内部にあります。</span><span class="sxs-lookup"><span data-stu-id="c60e4-142">If the following example is compiled into a strong-named assembly named `Friend1`, the `Example.Main` method in `Friend1` can successfully call the `FileUtilities.AppendDirectorySeparator` method, although the method is internal to the `Assembly1` assembly.</span></span> <span data-ttu-id="c60e4-143">をC#コマンドラインからコンパイルする場合は、 **/out**コンパイラスイッチを使用して、コンパイラが外部参照にバインドするときにフレンドアセンブリの名前を使用できるようにする必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="c60e4-143">Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 <span data-ttu-id="c60e4-144">**署名されていないアセンブリ**</span><span class="sxs-lookup"><span data-stu-id="c60e4-144">**Unsigned assemblies**</span></span>  
  
 <span data-ttu-id="c60e4-145">次の例では、<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 属性を使用して、署名されていないアセンブリの `internal` メンバーを別の未署名のアセンブリに参照できるようにします。</span><span class="sxs-lookup"><span data-stu-id="c60e4-145">The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` member of an unsigned assembly visible to another unsigned assembly.</span></span> <span data-ttu-id="c60e4-146">属性を指定すると、`UtilityLib` という名前のアセンブリ内の `internal` `StringLib.IsFirstLetterUpperCase` メソッドが、`Friend2`という名前のアセンブリ内のコードから参照できるようになります。</span><span class="sxs-lookup"><span data-stu-id="c60e4-146">The attribute ensures that the `internal` `StringLib.IsFirstLetterUpperCase` method in an assembly named `UtilityLib` is visible to the code in an assembly named `Friend2`.</span></span>  <span data-ttu-id="c60e4-147">次に示すのは、ユーティリティのソースコードです。</span><span class="sxs-lookup"><span data-stu-id="c60e4-147">The following is the source code for UtilityLib.dll:</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 <span data-ttu-id="c60e4-148">次の例では、`Friend2` アセンブリのソースコードを提供します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-148">The following example provides the source code for the `Friend2` assembly.</span></span> <span data-ttu-id="c60e4-149">をC#コマンドラインからコンパイルする場合は、 **/out**コンパイラスイッチを使用して、コンパイラが外部参照にバインドするときにフレンドアセンブリの名前を使用できるようにする必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="c60e4-149">Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalsVisibleToAttribute (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InternalsVisibleToAttribute(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.CompilerServices.InternalsVisibleToAttribute : string -&gt; System.Runtime.CompilerServices.InternalsVisibleToAttribute" Usage="new System.Runtime.CompilerServices.InternalsVisibleToAttribute assemblyName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="c60e4-150">フレンド アセンブリの名前。</span><span class="sxs-lookup"><span data-stu-id="c60e4-150">The name of a friend assembly.</span></span></param>
        <summary><span data-ttu-id="c60e4-151">指定したフレンド アセンブリの名前を使用して <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-151">Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> class with the name of the specified friend assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c60e4-152"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> コンストラクターは、現在のアセンブリの内部およびプライベートの保護された型およびメンバーにアクセスできるアセンブリであるフレンドアセンブリを定義します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-152">The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor defines a friend assembly, which is an assembly that has access to the internal and private protected types and members of the current assembly.</span></span>  
  
 <span data-ttu-id="c60e4-153">現在のアセンブリとフレンドアセンブリの両方が符号なしであるか、またはその両方が厳密な名前で署名されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="c60e4-153">Both the current assembly and the friend assembly must be unsigned, or both must be signed with a strong name.</span></span> <span data-ttu-id="c60e4-154">(厳密な名前付きアセンブリの詳細については、「[厳密な名前付きアセンブリの作成と使用](~/docs/standard/assembly/create-use-strong-named.md)」を参照してください)。両方が符号なしの場合、`assemblyName` 引数は、ディレクトリパスまたはファイル拡張子なしで指定されたフレンドアセンブリの名前で構成されます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-154">(For more information about strong-named assemblies, see [Create and use strong-named assemblies](~/docs/standard/assembly/create-use-strong-named.md).) If both are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file extension.</span></span> <span data-ttu-id="c60e4-155">両方が署名されている場合、`assemblyName` は、ディレクトリパスまたはファイル名拡張子のないフレンドアセンブリの名前と、完全な公開キー (ただし、その公開キートークンではありません) で構成されます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-155">If both are signed, `assemblyName` consists of the name of the friend assembly without its directory path or file name extension, along with its full public key (but not its public key token).</span></span> <span data-ttu-id="c60e4-156">カルチャ、バージョン、またはプロセッサのアーキテクチャ情報を提供するコンポーネントなど、厳密な名前のその他のコンポーネントは、`assemblyName` 引数で指定できません。</span><span class="sxs-lookup"><span data-stu-id="c60e4-156">The other components of a strong name, such as those that provide culture, version, or processor architecture information, cannot be specified in the `assemblyName` argument.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c60e4-157">C#コンパイラを使用してフレンドアセンブリをコンパイルする場合は、 **/out**コンパイラオプションを使用して、出力ファイル (.exe または .dll) の名前を明示的に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c60e4-157">If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option.</span></span> <span data-ttu-id="c60e4-158">この指定は必ず行ってください。コンパイラが外部参照にバインドする時点ではまだ、ビルド中のアセンブリの名前が生成されていないためです。</span><span class="sxs-lookup"><span data-stu-id="c60e4-158">This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.</span></span> <span data-ttu-id="c60e4-159">**/Out**コンパイラオプションは Visual Basic コンパイラでは省略可能であり、 F#コンパイラを使用してフレンドアセンブリをコンパイルするときに、対応する**out**または **-o**コンパイラオプションを使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="c60e4-159">The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.</span></span>  
  
 <span data-ttu-id="c60e4-160">[Sn.exe (厳密名ツール)](~/docs/framework/tools/sn-exe-strong-name-tool.md)を使用して、厳密な名前のキー (.snk) ファイルから完全な公開キーを取得できます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-160">You can use [Sn.exe (Strong Name Tool)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file.</span></span> <span data-ttu-id="c60e4-161">これを行うには、次の手順を実行します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-161">To do this, you perform the following steps:</span></span>  
  
1.  <span data-ttu-id="c60e4-162">厳密な名前のキーファイルから別のファイルに公開キーを抽出します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-162">Extract the public key from the strong-named key file to a separate file:</span></span>  
  
     <span data-ttu-id="c60e4-163">\**Sn-p\*\*\*snk_file* \*\* の出力</span><span class="sxs-lookup"><span data-stu-id="c60e4-163">**Sn -p**  *snk_file* *outfile*</span></span>  
  
2.  <span data-ttu-id="c60e4-164">完全な公開キーをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-164">Display the full public key to the console:</span></span>  
  
     <span data-ttu-id="c60e4-165">\*\*Sn-tp\*\*\*\* 出力</span><span class="sxs-lookup"><span data-stu-id="c60e4-165">**Sn -tp**  *outfile*</span></span>  
  
3.  <span data-ttu-id="c60e4-166">完全な公開キーの値をコピーして、ソースコードに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-166">Copy and paste the full public key value into your source code.</span></span>  
  
 <span data-ttu-id="c60e4-167"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 属性の使用方法の詳細については、次のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="c60e4-167">For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:</span></span>  
  
-   [<span data-ttu-id="c60e4-168">フレンド アセンブリ (C++)</span><span class="sxs-lookup"><span data-stu-id="c60e4-168">Friend Assemblies (C++)</span></span>](/cpp/dotnet/friend-assemblies-cpp)  
  
-   [<span data-ttu-id="c60e4-169">フレンド アセンブリ</span><span class="sxs-lookup"><span data-stu-id="c60e4-169">Friend assemblies</span></span>](~/docs/standard/assembly/friend.md)  
  
   
  
## Examples  
 <span data-ttu-id="c60e4-170">**署名されたアセンブリ**</span><span class="sxs-lookup"><span data-stu-id="c60e4-170">**Signed assemblies**</span></span>  
  
 <span data-ttu-id="c60e4-171">次の例では、<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 属性を使用して、署名されたアセンブリに `AppendDirectorySeparator` という名前の `internal` メソッドを別の署名されたアセンブリから参照できるようにします。</span><span class="sxs-lookup"><span data-stu-id="c60e4-171">The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` method named `AppendDirectorySeparator` in a signed assembly visible to another signed assembly.</span></span> <span data-ttu-id="c60e4-172">内部 `AppendDirectorySeparator` メソッドを含む `FileUtilities` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-172">It defines a `FileUtilities` class that includes an internal `AppendDirectorySeparator` method.</span></span> <span data-ttu-id="c60e4-173"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 属性は、`FileUtilities` クラスを含むアセンブリに適用されます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-173">The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute is applied to the assembly that contains the `FileUtilities` class.</span></span> <span data-ttu-id="c60e4-174">属性は、`Friend1` という名前のアセンブリがこの内部メンバーにアクセスできるようにします。</span><span class="sxs-lookup"><span data-stu-id="c60e4-174">The attribute allows an assembly named `Friend1` to access this internal member.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 <span data-ttu-id="c60e4-175">次の例を `Friend1`という名前の厳密な名前のアセンブリにコンパイルすると、メソッドが `Assembly1` アセンブリの内部にある場合でも、`FileUtilities.AppendDirectorySeparator` メソッドを正常に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="c60e4-175">If the following example is compiled into a strong-named assembly named `Friend1`, it can successfully call the `FileUtilities.AppendDirectorySeparator` method, even though the method is internal to the `Assembly1` assembly.</span></span> <span data-ttu-id="c60e4-176">をC#コマンドラインからコンパイルする場合は、 **/out**コンパイラスイッチを使用して、コンパイラが外部参照にバインドするときにフレンドアセンブリの名前を使用できるようにする必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="c60e4-176">Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 <span data-ttu-id="c60e4-177">次の例では、<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 属性を使用して、署名されていないアセンブリの `internal` メンバーを別の未署名のアセンブリに参照できるようにします。</span><span class="sxs-lookup"><span data-stu-id="c60e4-177">The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` member of an unsigned assembly visible to another unsigned assembly.</span></span> <span data-ttu-id="c60e4-178">属性を指定すると、`UtilityLib` という名前のアセンブリ内の `internal` `StringLib.IsFirstLetterUpperCase` メソッドが、`Friend2`という名前のアセンブリ内のコードから参照できるようになります。</span><span class="sxs-lookup"><span data-stu-id="c60e4-178">The attribute ensures that the `internal` `StringLib.IsFirstLetterUpperCase` method in an assembly named `UtilityLib` is visible to the code in an assembly named `Friend2`.</span></span>  <span data-ttu-id="c60e4-179">次に示すのは、ユーティリティのソースコードです。</span><span class="sxs-lookup"><span data-stu-id="c60e4-179">The following is the source code for UtilityLib.dll:</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 <span data-ttu-id="c60e4-180">**署名されていないアセンブリ**</span><span class="sxs-lookup"><span data-stu-id="c60e4-180">**Unsigned assemblies**</span></span>  
  
 <span data-ttu-id="c60e4-181">次の例では、`Friend2` アセンブリのソースコードを提供します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-181">The following example provides the source code for the `Friend2` assembly.</span></span> <span data-ttu-id="c60e4-182">をC#コマンドラインからコンパイルする場合は、 **/out**コンパイラスイッチを使用して、コンパイラが外部参照にバインドするときにフレンドアセンブリの名前を使用できるようにする必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="c60e4-182">Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllInternalsVisible">
      <MemberSignature Language="C#" Value="public bool AllInternalsVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllInternalsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property AllInternalsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllInternalsVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllInternalsVisible : bool with get, set" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c60e4-183">このプロパティは実装されていません。</span><span class="sxs-lookup"><span data-stu-id="c60e4-183">This property is not implemented.</span></span></summary>
        <value><span data-ttu-id="c60e4-184">このプロパティは値を返しません。</span><span class="sxs-lookup"><span data-stu-id="c60e4-184">This property does not return a value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : string" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c60e4-185"><see langword="internal" /> キーワードを使用してマークされている型と型のメンバーをすべて参照できるようにする、フレンド アセンブリの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="c60e4-185">Gets the name of the friend assembly to which all types and type members that are marked with the <see langword="internal" /> keyword are to be made visible.</span></span></summary>
        <value><span data-ttu-id="c60e4-186">フレンド アセンブリの名前を表す文字列。</span><span class="sxs-lookup"><span data-stu-id="c60e4-186">A string that represents the name of the friend assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c60e4-187"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 属性の使用方法の詳細については、次のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="c60e4-187">For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:</span></span>  
  
-   [<span data-ttu-id="c60e4-188">フレンド アセンブリ (C++)</span><span class="sxs-lookup"><span data-stu-id="c60e4-188">Friend Assemblies (C++)</span></span>](/cpp/dotnet/friend-assemblies-cpp)  
  
-   [<span data-ttu-id="c60e4-189">フレンド アセンブリ</span><span class="sxs-lookup"><span data-stu-id="c60e4-189">Friend assemblies</span></span>](~/docs/standard/assembly/friend.md)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
