<Type Name="IsExplicitlyDereferenced" FullName="System.Runtime.CompilerServices.IsExplicitlyDereferenced">
  <Metadata><Meta Name="ms.openlocfilehash" Value="07705fd31edfe3692ef1db623601947c3ce564ba" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75091932" /></Metadata><TypeSignature Language="C#" Value="public static class IsExplicitlyDereferenced" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsExplicitlyDereferenced extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsExplicitlyDereferenced" />
  <TypeSignature Language="VB.NET" Value="Public Class IsExplicitlyDereferenced" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsExplicitlyDereferenced abstract sealed" />
  <TypeSignature Language="F#" Value="type IsExplicitlyDereferenced = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="96f5b-101">マネージド ポインターがメソッド シグネチャ内のポインター パラメーターを表すことを示します。</span><span class="sxs-lookup"><span data-stu-id="96f5b-101">Indicates that a managed pointer represents a pointer parameter within a method signature.</span></span> <span data-ttu-id="96f5b-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="96f5b-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96f5b-103">でC++は、マネージポインターとマネージ参照は、ポインターとしてメタデータに出力されます。</span><span class="sxs-lookup"><span data-stu-id="96f5b-103">In C++, managed pointers and managed references are emitted into metadata as pointers.</span></span>  <span data-ttu-id="96f5b-104">メタデータ内の2つの型を区別するC++ために、Microsoft コンパイラはこの修飾子をマネージポインターに適用します。</span><span class="sxs-lookup"><span data-stu-id="96f5b-104">To distinguish between the two types in metadata, the Microsoft  C++ compiler applies this modifier to managed pointers.</span></span>  <span data-ttu-id="96f5b-105">マネージ参照型に修飾子を出力しません。</span><span class="sxs-lookup"><span data-stu-id="96f5b-105">It emits no modifier on managed reference types.</span></span>  <span data-ttu-id="96f5b-106">コンパイラは、メタデータスコープからメソッドをインポートするときに、正しい呼び出し構文を認識している必要があります。</span><span class="sxs-lookup"><span data-stu-id="96f5b-106">Compilers need to know the correct calling syntax when importing a method from metadata scope.</span></span>  <span data-ttu-id="96f5b-107"><xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> クラスとそのパートナー (<xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> クラス) は、ポインターパラメーターから参照パラメーターを明確に区別します。</span><span class="sxs-lookup"><span data-stu-id="96f5b-107">The <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> class and its partner, the <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters.</span></span>  
  
 <span data-ttu-id="96f5b-108">コンパイラは、既定の動作が適切でない場合にジャストインタイム (JIT) コンパイラが値を処理する方法を変更するために、メタデータ内にカスタム修飾子を出力します。</span><span class="sxs-lookup"><span data-stu-id="96f5b-108">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="96f5b-109">JIT コンパイラはカスタム修飾子を検出すると、修飾子によって指定された方法で値を処理します。</span><span class="sxs-lookup"><span data-stu-id="96f5b-109">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="96f5b-110">コンパイラは、メソッド、パラメーター、および戻り値にカスタム修飾子を適用できます。</span><span class="sxs-lookup"><span data-stu-id="96f5b-110">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="96f5b-111">JIT コンパイラは必須の修飾子に応答する必要がありますが、省略可能な修飾子は無視できます。</span><span class="sxs-lookup"><span data-stu-id="96f5b-111">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="96f5b-112">次のいずれかの方法を使用して、カスタム修飾子をメタデータに出力できます。</span><span class="sxs-lookup"><span data-stu-id="96f5b-112">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="96f5b-113"><xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>、<xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>、<xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>、<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>などの <xref:System.Reflection.Emit.TypeBuilder> クラスのメソッドの使用。</span><span class="sxs-lookup"><span data-stu-id="96f5b-113">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="96f5b-114">`modopt` と `modreq`の呼び出しを含む Microsoft 中間言語 (MSIL) 命令ファイルを生成し、 [Ilasm (IL アセンブラー)](~/docs/framework/tools/ilasm-exe-il-assembler.md)を使用してファイルをアセンブルします。</span><span class="sxs-lookup"><span data-stu-id="96f5b-114">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="96f5b-115">アンマネージリフレクション API を使用します。</span><span class="sxs-lookup"><span data-stu-id="96f5b-115">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96f5b-116">次の例は、リフレクションを使用して <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> オブジェクトをアセンブリに出力する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="96f5b-116">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsExplicitlyDereferenced#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsExplicitlyDereferenced/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
