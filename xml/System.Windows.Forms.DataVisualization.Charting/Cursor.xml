<Type Name="Cursor" FullName="System.Windows.Forms.DataVisualization.Charting.Cursor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67e4fd12db024bf9957bf29c13b8e0f68113c4a7" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73397580" /></Metadata><TypeSignature Language="C#" Value="public class Cursor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Cursor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataVisualization.Charting.Cursor" />
  <TypeSignature Language="VB.NET" Value="Public Class Cursor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Cursor : IDisposable" />
  <TypeSignature Language="F#" Value="type Cursor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Enabled")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>軸に沿った位置を定義する水平方向の線と垂直方向の線を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カーソルは、軸に沿った位置を定義する水平方向または垂直方向の線です。 範囲選択は、開始位置と終了位置で定義される軸に沿った範囲であり、半透明色を使用して表示されます。  
  
 カーソルと範囲の選択はどちらも <xref:System.Windows.Forms.DataVisualization.Charting.Cursor> クラスによって実装されます。これは、<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea> オブジェクトの <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorX%2A> および <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorY%2A> プロパティとして公開されます。 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorX%2A> オブジェクトはグラフ領域の X 軸用で、<xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorY%2A> オブジェクトは Y 軸用です。 これらのオブジェクトの <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.AxisType%2A> プロパティは、関連付けられている軸がプライマリかセカンダリかを決定します。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.Cursor> クラスの外側にあるカーソルと範囲選択機能は、ルート <xref:System.Windows.Forms.DataVisualization.Charting.Chart> オブジェクト内のカーソルと範囲選択に関連するイベントです。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cursor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoScroll">
      <MemberSignature Language="C#" Value="public bool AutoScroll { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoScroll" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.AutoScroll" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoScroll As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoScroll { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoScroll : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.AutoScroll" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>範囲の選択操作がグラフ エリアの境界を越えて行われた場合に、スクロールするかどうかを示すフラグを取得または設定します。</summary>
        <value>データ ビューが自動的にスクロール可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データビューでプロットされた系列のすべてのデータポイントが表示されず、範囲がユーザーによって選択されている場合は、このプロパティが `true`、マウスでカーソルがグラフ領域の境界の外に移動されると、ビューの自動スクロールが行われます。  
  
 表示可能なデータが他にある場合、スクロールは軸に沿ってのみ行われます。  
  
 すべてのデータを表示しないデータビューは、通常、エンドユーザーがデータのサブセットにズームする場合に発生します。 ビューとズームは <xref:System.Windows.Forms.DataVisualization.Charting.AxisScaleView> クラスによって実装されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AxisType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.AxisType AxisType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.AxisType AxisType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.AxisType" />
      <MemberSignature Language="VB.NET" Value="Public Property AxisType As AxisType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::AxisType AxisType { System::Windows::Forms::DataVisualization::Charting::AxisType get(); void set(System::Windows::Forms::DataVisualization::Charting::AxisType value); };" />
      <MemberSignature Language="F#" Value="member this.AxisType : System.Windows.Forms.DataVisualization.Charting.AxisType with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.AxisType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.AxisType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルのアタッチ先の軸の種類を取得または設定します。</summary>
        <value>軸が主軸と第 2 軸のどちらにアタッチされるかを表す <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisType" /> 列挙値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 軸には、プライマリとセカンダリの2つのセットがあります。 横棒グラフを除くすべてのグラフの主軸は、グラフ領域の下 (主軸の X 軸) と左 (Y 軸) の境界に配置されます。  
  
 2番目の軸は、グラフ領域の右側 (2 番目の X 軸) と上部 (第2の Y 軸) の境界に配置されます。  
  
> [!NOTE]
>  グラフ領域内にプロットされたすべての系列が1種類の軸 (たとえば主軸の X 軸) のみを使用している場合、このプロパティを系列で使用されていない軸の種類 (この場合は第2の X 軸) に設定しても効果はありません。カーソルは、系列のプロットに使用されている唯一の軸に自動的にアタッチされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" /> クラスによって使用されているリソースを解放します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cursor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アンマネージ リソースを解放またはリセットするアプリケーション定義のタスクを実行します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="cursor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">アンマネージド リソースとマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>アンマネージド リソースおよび (オプションで) マネージド リソースを解放します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルの間隔を取得または設定します。</summary>
        <value>カーソルの間隔。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval%2A> プロパティは、エンドユーザーがカーソルを描画できる頻度と場所、および範囲選択の始点と終点を描画できる場所を決定します。 値が 0 (既定値) の場合は、カーソルまたは範囲選択をグラフ領域内の任意の場所に描画できることを示します。 0以外の値は、選択された範囲のカーソルまたは始点または終点が、ユーザーの操作によって設定された場合にのみ、指定した間隔で描画されることを示します。  
  
 測定単位は <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType%2A> プロパティによって決定されます。  
  
 このプロパティは、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset%2A> プロパティと組み合わせて使用することもできます。これにより、指定した間隔のオフセットを指定できます。 たとえば、土曜日にのみカーソルを表示できるようにするには、間隔を6日に設定して、1週間の間隔を指定する必要があります。 .NET Framework では、日曜日は週の最初の日と見なされます。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserEnabled%2A> プロパティを設定してカーソルのユーザーインターフェイスを有効にし、グラフ領域内でマウスをクリックすると、カーソルの位置は、最も近い場所に設定されます。  
  
> [!IMPORTANT]
>  カーソルまたは範囲選択の位置をプログラムで設定した場合、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval%2A> プロパティは効果がありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffset">
      <MemberSignature Language="C#" Value="public double IntervalOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 IntervalOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalOffset As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double IntervalOffset { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalOffset : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーによって設定されたカーソルと範囲選択を描画できる位置に影響する間隔のオフセットを取得または設定します。</summary>
        <value>間隔のオフセット。 既定値は 0 です。この場合は制限はありません。負の値も使用できます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset%2A> プロパティによって、カーソルの間隔のオフセットと範囲選択の開始点と終了点が決まります。 このプロパティは、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval%2A> プロパティと共に、グラフ領域内でカーソルと範囲を表示できる場所を決定します。 値が 0 (既定値) の場合は、オフセットがないことを示します。  
  
 測定単位は <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffsetType%2A> プロパティによって決定されます。  
  
 オフセットは、範囲選択のカーソルと始点または終点を描画できる位置に影響します。 たとえば、土曜日にのみカーソルを表示できるようにするには、間隔を6日に設定して、1週間の間隔を指定する必要があります。 .NET Framework では、日曜日は週の最初の日と見なされます。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserEnabled%2A> プロパティを設定してカーソルのユーザーインターフェイスを有効にし、グラフ領域内でマウスをクリックすると、カーソルの位置は、最も近い場所に設定されます。  
  
> [!IMPORTANT]
>  範囲の選択またはカーソル位置がプログラムによって設定されている場合、間隔関連のプロパティは効果がありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffsetType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffsetType" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalOffsetType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType IntervalOffsetType { System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalOffsetType : System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffsetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>軸のカーソルと選択範囲の間隔のオフセットの種類を取得または設定します。</summary>
        <value>間隔のオフセットの単位を示す <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> 列挙値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffsetType%2A> プロパティは、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset%2A> プロパティを使用して指定される間隔のオフセットの種類を決定します。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffsetType%2A> プロパティが <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto>に設定されている場合は、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType%2A> プロパティの設定が使用されます。  
  
> [!NOTE]
>  範囲の選択またはカーソル位置がプログラムによって設定されている場合、間隔関連のプロパティは効果がありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType IntervalType { System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalType : System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>軸のカーソルと選択範囲の間隔の種類を取得または設定します。</summary>
        <value>軸のカーソルと選択範囲の間隔の種類。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType%2A> プロパティは、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval%2A> プロパティを使用して指定される間隔の種類を決定します。  
  
 間隔の種類が <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto> の場合、間隔の単位は `double` として扱われます。これは、<xref:System.DateTime> の値が指定されている場合の1日に相当します。  
  
> [!NOTE]
>  範囲の選択またはカーソル位置がプログラムによって設定されている場合、間隔関連のプロパティは効果がありません。  
  
 軸の間隔の種類が時間、分などの時間を表す場合は、ズーム機能を正しく有効にするために、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType%2A> も時刻値に設定する必要があります。 たとえば、ChartArea1 の型が時間単位で表されている場合は、ChartArea1 型を minutes に設定できます。この場合、  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUserEnabled">
      <MemberSignature Language="C#" Value="public bool IsUserEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUserEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsUserEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUserEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsUserEnabled : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルのユーザー インターフェイスを有効または無効にするフラグを取得または設定します。</summary>
        <value>カーソルのユーザー インターフェイスを有効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUserSelectionEnabled">
      <MemberSignature Language="C#" Value="public bool IsUserSelectionEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUserSelectionEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserSelectionEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsUserSelectionEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUserSelectionEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsUserSelectionEnabled : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserSelectionEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>範囲選択ユーザー インターフェイスを有効または無効にするフラグを取得または設定します。</summary>
        <value>範囲選択ユーザー インターフェイスを有効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LineColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LineColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.LineColor" />
      <MemberSignature Language="VB.NET" Value="Public Property LineColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color LineColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.LineColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.LineColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Red")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルの線の色を取得または設定します。</summary>
        <value>カーソルの行の色。 既定値は <see cref="P:System.Drawing.Color.Red" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineDashStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartDashStyle LineDashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.ChartDashStyle LineDashStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.LineDashStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property LineDashStyle As ChartDashStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::ChartDashStyle LineDashStyle { System::Windows::Forms::DataVisualization::Charting::ChartDashStyle get(); void set(System::Windows::Forms::DataVisualization::Charting::ChartDashStyle value); };" />
      <MemberSignature Language="F#" Value="member this.LineDashStyle : System.Windows.Forms.DataVisualization.Charting.ChartDashStyle with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.LineDashStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartDashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルの線のスタイルを取得または設定します。</summary>
        <value>カーソルの線のスタイル。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineWidth">
      <MemberSignature Language="C#" Value="public int LineWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.LineWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property LineWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LineWidth : int with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.LineWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルの線の幅をピクセル単位で取得または設定します。</summary>
        <value>ラインの幅 (ピクセル単位)。 既定値は 1 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用して、カーソルの線の幅 (ピクセル単位) を指定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public double Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.Position" />
      <MemberSignature Language="VB.NET" Value="Public Property Position As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Position { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Position : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(NaN)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ParenthesizePropertyName(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.DoubleDateNanValueConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルの位置を取得または設定します。</summary>
        <value>カーソルの位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用して、カーソルの位置を取得するだけでなく、プログラムによってカーソルの位置を設定することもできます。  
  
 位置は、カーソルが属する軸の値として測定されます。これは、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.AxisType%2A> プロパティによって決定されます。 たとえば、カーソルがプライマリ X 軸に属している場合、このプロパティを2000年1月1日の値に設定すると、X 軸カーソルが軸に沿って2000の1月1日の位置に描画されます。 この軸の値が存在しない場合、カーソルは表示されません。  
  
 このプロパティを設定した場合、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval%2A> および <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset%2A> の各プロパティは無効になります。つまり、カーソルは指定した場所に表示されます。  
  
 このプロパティを設定しても、<xref:System.Windows.Forms.DataVisualization.Charting.Chart.CursorPositionChanged> または <xref:System.Windows.Forms.DataVisualization.Charting.Chart.CursorPositionChanging> のイベントは発生しません。  
  
 または、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetCursorPosition%2A> および <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetCursorPixelPosition%2A> の各メソッドを使用してカーソルを設定することもできます。  
  
 プログラムによってカーソルを削除するには、このプロパティを使用してカーソルの位置を <xref:System.Double.NaN> に設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color SelectionColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color SelectionColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionColor" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color SelectionColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "LightGray")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ範囲を強調表示する半透明の色を取得または設定します。</summary>
        <value>強調表示された範囲の色。 既定値は、アルファ値が 120 の <see cref="P:System.Drawing.Color.LightGray" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは範囲選択の色を決定し、任意の有効な ARGB (アルファ、赤、緑、青) 値に設定できます。 透明度のレベルを決定するアルファ値が指定されていない場合、既定のアルファ値120が使用されます。  
  
 選択した色は、X 軸と Y 軸の両方のカーソルに対して設定できます。これは、それぞれ <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea> オブジェクトの <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorX%2A> および <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorY%2A> プロパティを使用して実装されます。 範囲が X 軸に沿ってのみ選択されている場合は、X 軸カーソルの <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionColor%2A> 値が使用されます。範囲が Y 軸に沿ってのみ選択されている場合は、Y 軸カーソルの <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionColor%2A> 値が使用されます。 両方の軸に沿って範囲が選択されている場合は、Y 軸カーソルの <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionColor%2A> 値が、選択した色にも使用されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionEnd">
      <MemberSignature Language="C#" Value="public double SelectionEnd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SelectionEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionEnd As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double SelectionEnd { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionEnd : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(NaN)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.DoubleDateNanValueConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>範囲選択の終了位置を取得または設定します。</summary>
        <value>範囲選択の終了位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーは、マウスの左ボタンをクリックし、マウスをドラッグして、グラフ領域内の範囲を選択できます。 <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserSelectionEnabled%2A> プロパティも `true`に設定する必要があることに注意してください。 また、範囲選択は、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd%2A> および <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart%2A> のプロパティ、または <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPosition%2A> または <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPixelPosition%2A> のいずれかの方法を使用してプログラムで設定できます。  
  
 範囲選択の終了位置は、カーソルが属する軸の値として計算されます。 たとえば、カーソルがプライマリ X 軸に属していて、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd%2A> プロパティを2000年12月31日の値に設定した場合、選択した領域の終点は、プライマリ X 軸に沿って2000年12月31日に実行されます。  
  
 範囲選択をプログラムで削除するには、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd%2A> と <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart%2A> のプロパティを使用して範囲の開始点と終了点を <xref:System.Double.NaN> に設定するか、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPosition%2A> メソッドを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionStart">
      <MemberSignature Language="C#" Value="public double SelectionStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SelectionStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionStart As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double SelectionStart { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionStart : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(NaN)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.DoubleDateNanValueConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルの選択範囲の開始位置を取得または設定します。</summary>
        <value>カーソルの選択範囲の開始位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーは、マウスの左ボタンをクリックし、マウスをドラッグしてカーソルの位置を移動して、範囲を選択できます。 <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserSelectionEnabled%2A> プロパティも `true`に設定する必要があることに注意してください。 また、範囲選択は、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd%2A> および <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart%2A> のプロパティ、または <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPosition%2A> または <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPixelPosition%2A> のいずれかの方法を使用してプログラムで設定できます。  
  
 範囲選択の開始位置は、カーソルが属する軸の値として計算されます。 たとえば、カーソルがプライマリ X 軸に属していて、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart%2A> プロパティを2000年1月1日の値に設定した場合、選択された領域の開始は、プライマリ X 軸に沿って2000年1月1日に実行されます。  
  
 範囲選択をプログラムで削除するには、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd%2A> と <xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart%2A> のプロパティを使用して範囲の開始点と終了点を <xref:System.Double.NaN> に設定するか、<xref:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPosition%2A> メソッドを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPixelPosition">
      <MemberSignature Language="C#" Value="public void SetCursorPixelPosition (System.Drawing.PointF point, bool roundToBoundary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCursorPixelPosition(valuetype System.Drawing.PointF point, bool roundToBoundary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.SetCursorPixelPosition(System.Drawing.PointF,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCursorPixelPosition (point As PointF, roundToBoundary As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCursorPixelPosition(System::Drawing::PointF point, bool roundToBoundary);" />
      <MemberSignature Language="F#" Value="member this.SetCursorPixelPosition : System.Drawing.PointF * bool -&gt; unit" Usage="cursor.SetCursorPixelPosition (point, roundToBoundary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="roundToBoundary" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point">カーソルが描画される位置を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="roundToBoundary"><see langword="true" /> の場合、指定された位置が <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> オブジェクト内にないときは、カーソルは最も近いグラフ エリアの境界に沿って描画されます。</param>
        <summary>指定された位置にカーソルを表示します。 単位はピクセルです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPosition">
      <MemberSignature Language="C#" Value="public void SetCursorPosition (double newPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCursorPosition(float64 newPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.SetCursorPosition(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCursorPosition (newPosition As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCursorPosition(double newPosition);" />
      <MemberSignature Language="F#" Value="member this.SetCursorPosition : double -&gt; unit" Usage="cursor.SetCursorPosition newPosition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newPosition" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="newPosition">カーソルの新しい位置。 計測には、関連する軸に沿った値が使用されます。</param>
        <summary>グラフ エリア内で、指定された軸の値を使用してカーソルの位置を設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelectionPixelPosition">
      <MemberSignature Language="C#" Value="public void SetSelectionPixelPosition (System.Drawing.PointF startPoint, System.Drawing.PointF endPoint, bool roundToBoundary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelectionPixelPosition(valuetype System.Drawing.PointF startPoint, valuetype System.Drawing.PointF endPoint, bool roundToBoundary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPixelPosition(System.Drawing.PointF,System.Drawing.PointF,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelectionPixelPosition (startPoint As PointF, endPoint As PointF, roundToBoundary As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSelectionPixelPosition(System::Drawing::PointF startPoint, System::Drawing::PointF endPoint, bool roundToBoundary);" />
      <MemberSignature Language="F#" Value="member this.SetSelectionPixelPosition : System.Drawing.PointF * System.Drawing.PointF * bool -&gt; unit" Usage="cursor.SetSelectionPixelPosition (startPoint, endPoint, roundToBoundary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPoint" Type="System.Drawing.PointF" />
        <Parameter Name="endPoint" Type="System.Drawing.PointF" />
        <Parameter Name="roundToBoundary" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startPoint">範囲選択の開始位置を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="endPoint">範囲選択の終了位置を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="roundToBoundary"><see langword="true" /> の場合、指定された位置が <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> オブジェクト内にないときは、開始点および終了点として、最も近いグラフ エリアの境界が使用されます。</param>
        <summary>範囲選択の開始位置と終了位置を設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelectionPosition">
      <MemberSignature Language="C#" Value="public void SetSelectionPosition (double newStart, double newEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelectionPosition(float64 newStart, float64 newEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPosition(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelectionPosition (newStart As Double, newEnd As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSelectionPosition(double newStart, double newEnd);" />
      <MemberSignature Language="F#" Value="member this.SetSelectionPosition : double * double -&gt; unit" Usage="cursor.SetSelectionPosition (newStart, newEnd)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newStart" Type="System.Double" />
        <Parameter Name="newEnd" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="newStart">範囲選択の新しい開始位置。 計測には、関連する軸に沿った値が使用されます。</param>
        <param name="newEnd">範囲選択の新しい終了位置。 計測には、関連する軸に沿った値が使用されます。</param>
        <summary>グラフ エリア内で、指定された軸の値を使用して選択範囲の位置を設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
