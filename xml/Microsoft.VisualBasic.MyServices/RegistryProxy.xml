<Type Name="RegistryProxy" FullName="Microsoft.VisualBasic.MyServices.RegistryProxy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf4a79c4e67f47371e81afbc4359652af0e004d2" /><Meta Name="ms.sourcegitcommit" Value="8dc7427b3f8ede13c290b671feeb1dc33978e582" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/06/2020" /><Meta Name="ms.locfileid" Value="77043586" /></Metadata><TypeSignature Language="C#" Value="public class RegistryProxy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi RegistryProxy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.MyServices.RegistryProxy" />
  <TypeSignature Language="VB.NET" Value="Public Class RegistryProxy" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryProxy" />
  <TypeSignature Language="F#" Value="type RegistryProxy = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>レジストリを操作するためのプロパティとメソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これらのプロパティを使用するには、<xref:System.Security.Permissions.RegistryPermissionAccess> 列挙型からの読み取りおよび書き込みアクセス許可が必要です。 完全信頼で実行されているすべてのコード (既定のセキュリティポリシーでは、ユーザーのローカルハードドライブにインストールされているすべてのコード) には、レジストリにアクセスするために必要なアクセス許可が付与されています。 詳細については、<xref:System.Security.Permissions.RegistryPermission> クラスを参照してください。  
  
 次の表に、`My.Computer.Registry` オブジェクトに関連するタスクの例を示します。  
  
|目的|参照先|  
|--------|---------|  
|レジストリキーを作成し、その値を設定する|[方法: レジストリ キーを作成し、その値を設定する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value.md)|  
|レジストリキーの削除|[方法: レジストリ キーを削除する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key.md)|  
|レジストリからデータを読み取る|[方法 : レジストリ キーから値を読み取る](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key.md)|  
  
   
  
## Examples  
 この例では、`HKEY_CURRENT_USER\Software\MyApp` から `Name` 値を読み取り、メッセージボックスに表示します。  
  
 [!code-vb[VbVbalrMyRegistry#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#8)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.Registry" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">オブジェクト (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName="ClassesRoot">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey ClassesRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey ClassesRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.ClassesRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClassesRoot As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ ClassesRoot { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClassesRoot : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.ClassesRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:Microsoft.Win32.RegistryKey" /> へのアクセスを提供する <see langword="HKEY_CLASSES_ROOT" /> 型を返します。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HKEY_CLASSES_ROOT` は、主に Windows のファイルの関連付けに関する情報を格納するために使用されます。  
  
 <xref:System.Security.Permissions> 名前空間にある <xref:System.Security.Permissions.RegistryPermission> クラスは、レジストリ変数へのアクセスを制御します。 レジストリ変数は、<xref:System.Security.Permissions.RegistryPermission> を持たないコードがアクセスできるメモリの場所には格納しないようにする必要があります。 同様に、アクセス許可を付与する場合は、ジョブを実行するために必要な特権だけを付与します。  
  
 レジストリ アクセス許可のアクセス値は <xref:System.Security.Permissions.RegistryPermissionAccess> 列挙型により定義されます。 次の表はそのメンバーの詳細です。  
  
|値|説明|  
|-----------|-----------------|  
|AllAccess|レジストリ変数への作成、読み取り、および書き込みアクセス。|  
|作成|レジストリ変数に対する作成アクセス。|  
|NoAccess|レジストリ変数へのアクセスはありません。|  
|[読み取り]|レジストリ変数に対する読み取りアクセス。|  
|書き込み|レジストリ変数への書き込みアクセス。|  
  
 次の表に、`My.Computer.Registry` オブジェクトに関連するタスクの例を示します。  
  
|目的|参照先|  
|--------|---------|  
|レジストリキーを作成し、その値を設定する|[方法: レジストリ キーを作成し、その値を設定する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value.md)|  
|レジストリキーの削除|[方法: レジストリ キーを削除する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key.md)|  
|レジストリキーから値を読み取る|[方法 : レジストリ キーから値を読み取る](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key.md)|  
  
   
  
## Examples  
 この例では、`ClassesRoot` レジストリキーのサブキーの名前を取得し、`ListBox1`に追加します。  
  
 [!code-vb[VbVbalrMyRegistry#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#10)]  
  
 この例では、プロジェクトに `ListBox1` という名前の `ListBox` が必要です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.ClassesRoot" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">オブジェクト (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry.md">セキュリティとレジストリ (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentConfig">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey CurrentConfig { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey CurrentConfig" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentConfig" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentConfig As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ CurrentConfig { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentConfig : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentConfig" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:Microsoft.Win32.RegistryKey" /> へのアクセスを提供する <see langword="HKEY_CURRENT_CONFIG" /> 型を返します。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HKEY_CURRENT_CONFIG` は、主にコンピューター上のデバイスの設定を格納するために使用されます。  
  
 <xref:System.Security.Permissions> 名前空間にある <xref:System.Security.Permissions.RegistryPermission> クラスは、レジストリ変数へのアクセスを制御します。 レジストリ変数は、<xref:System.Security.Permissions.RegistryPermission> を持たないコードがアクセスできるメモリの場所には格納しないようにする必要があります。 同様に、アクセス許可を付与する場合は、ジョブを実行するために必要な特権だけを付与します。  
  
 レジストリ アクセス許可のアクセス値は <xref:System.Security.Permissions.RegistryPermissionAccess> 列挙型により定義されます。 次の表はそのメンバーの詳細です。  
  
|値|説明|  
|-----------|-----------------|  
|AllAccess|レジストリ変数への作成、読み取り、および書き込みアクセス。|  
|作成|レジストリ変数に対する作成アクセス。|  
|NoAccess|レジストリ変数へのアクセスはありません。|  
|[読み取り]|レジストリ変数に対する読み取りアクセス。|  
|書き込み|レジストリ変数への書き込みアクセス。|  
  
 次の表に、`My.Computer.Registry` オブジェクトに関連するタスクの例を示します。  
  
|目的|参照先|  
|--------|---------|  
|レジストリキーを作成し、その値を設定する|[方法: レジストリ キーを作成し、その値を設定する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value.md)|  
|レジストリキーの削除|[方法: レジストリ キーを削除する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key.md)|  
|レジストリキーから値を読み取る|[方法 : レジストリ キーから値を読み取る](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key.md)|  
  
   
  
## Examples  
 この例では、`MyDeviceSettings`サブキーを作成します。  
  
 [!code-vb[VbVbalrMyRegistry#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.CurrentConfig" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">オブジェクト (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry.md">セキュリティとレジストリ (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentUser">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey CurrentUser { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey CurrentUser" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentUser" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentUser As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ CurrentUser { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUser : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentUser" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:Microsoft.Win32.RegistryKey" /> へのアクセスを提供する <see langword="HKEY_CURRENT_USER" /> 型を返します。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HKEY_CURRENT_USER` は、主に、色やフォントなどのユーザーごとの設定を Windows に保存するために使用されます。 キーはユーザーによって異なります。  
  
 <xref:System.Security.Permissions> 名前空間にある <xref:System.Security.Permissions.RegistryPermission> クラスは、レジストリ変数へのアクセスを制御します。 レジストリ変数は、<xref:System.Security.Permissions.RegistryPermission> を持たないコードがアクセスできるメモリの場所には格納しないようにする必要があります。 同様に、アクセス許可を付与する場合は、ジョブを実行するために必要な最小限の特権を付与します。  
  
 レジストリ アクセス許可のアクセス値は <xref:System.Security.Permissions.RegistryPermissionAccess> 列挙型により定義されます。 次の表はそのメンバーの詳細です。  
  
|値|説明|  
|-----------|-----------------|  
|AllAccess|レジストリ変数への作成、読み取り、および書き込みアクセス。|  
|作成|レジストリ変数に対する作成アクセス。|  
|NoAccess|レジストリ変数へのアクセスはありません。|  
|[読み取り]|レジストリ変数に対する読み取りアクセス。|  
|書き込み|レジストリ変数への書き込みアクセス。|  
  
 次の表に、`My.Computer.Registry` オブジェクトに関連するタスクの例を示します。  
  
|目的|参照先|  
|--------|---------|  
|レジストリキーを作成し、その値を設定する|[方法: レジストリ キーを作成し、その値を設定する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value.md)|  
|レジストリキーの削除|[方法: レジストリ キーを削除する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key.md)|  
|レジストリキーから値を読み取る|[方法 : レジストリ キーから値を読み取る](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key.md)|  
  
   
  
## Examples  
 この例では、`Software\MyCompany\Preferences\UserData`サブキーを削除します。  
  
 [!code-vb[VbVbalrMyRegistry#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.CurrentUser" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">オブジェクト (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry.md">セキュリティとレジストリ (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DynData">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey DynData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey DynData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.DynData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DynData As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ DynData { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DynData : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.DynData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("The DynData registry key works only on Win9x, which is not supported by this version of the .NET Framework.  Use the PerformanceData registry key instead.  This property will be removed from a future version of the framework.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:Microsoft.Win32.RegistryKey" /> へのアクセスを提供する <see langword="HKEY_DYNDATA" /> 型を返します。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HKEY_DYNDATA` は、仮想デバイスドライバーによって使用されるような動的レジストリデータを格納するために使用され、Windows 95/98 システムでのみサポートされます。 Windows 95/98 以外のシステムでは、`CreateSubKey`、`DeleteSubKey`、`GetSubKeyCount`、`GetValueCount`など、`Registry.DynData`によって返されるキーのメソッドを呼び出すと、<xref:System.IO.IOException>がスローされます。  
  
 <xref:System.Security.Permissions> 名前空間にある <xref:System.Security.Permissions.RegistryPermission> クラスは、レジストリ変数へのアクセスを制御します。 レジストリ変数は、<xref:System.Security.Permissions.RegistryPermission> を持たないコードがアクセスできるメモリの場所には格納しないようにする必要があります。 同様に、アクセス許可を付与する場合は、ジョブを実行するために必要な最小限の特権を付与します。  
  
 レジストリ アクセス許可のアクセス値は <xref:System.Security.Permissions.RegistryPermissionAccess> 列挙型により定義されます。 次の表はそのメンバーの詳細です。  
  
|値|説明|  
|-----------|-----------------|  
|AllAccess|レジストリ変数への作成、読み取り、および書き込みアクセス。|  
|作成|レジストリ変数に対する作成アクセス。|  
|NoAccess|レジストリ変数へのアクセスはありません。|  
|[読み取り]|レジストリ変数に対する読み取りアクセス。|  
|書き込み|レジストリ変数への書き込みアクセス。|  
  
 次の表に、`My.Computer.Registry` オブジェクトに関連するタスクの例を示します。  
  
|目的|参照先|  
|--------|---------|  
|レジストリキーを作成し、その値を設定する|[方法: レジストリ キーを作成し、その値を設定する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value.md)|  
|レジストリキーの削除|[方法: レジストリ キーを削除する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key.md)|  
|レジストリキーから値を読み取る|[方法 : レジストリ キーから値を読み取る](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key.md)|  
  
   
  
## Examples  
 次の例では、サブキーツリー `Software\MyCompany\Preferences`を削除します。  
  
 [!code-vb[VbVbalrMyRegistry#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.DynData" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">オブジェクト (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry.md">セキュリティとレジストリ (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (string keyName, string valueName, object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public instance object GetValue(string keyName, string valueName, object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.RegistryProxy.GetValue(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (keyName As String, valueName As String, defaultValue As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::String ^ keyName, System::String ^ valueName, System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="member this.GetValue : string * string * obj -&gt; obj" Usage="registryProxy.GetValue (keyName, valueName, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="valueName" Type="System.String" />
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="keyName">[https://login.microsoftonline.com/consumers/](<see langword="String" />) 値の取得元のキー。 必須。</param>
        <param name="valueName">[https://login.microsoftonline.com/consumers/](<see langword="String" />) 取得する値。 必須。</param>
        <param name="defaultValue">[https://login.microsoftonline.com/consumers/](<see langword="Object" />) 値が存在しなかった場合に使用される既定値。 必須。</param>
        <summary>レジストリ キーから値を取得します。</summary>
        <returns>レジストリ キーから値を取得します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `valueName` では、大文字と小文字は区別されません。  
  
 レジストリキーには、どの名前にも関連付けられていない1つの値を含めることができます。 この名前のない値がレジストリエディターに表示されると、名前の代わりに "(既定値)" という文字列が表示されます。 この名前のない値を取得するには、`valueName`に null または空の文字列 ("") を指定します。  
  
 次の表に、`GetValue` メソッドに関連するタスクの例を示します。  
  
|目的|参照先|  
|--------|---------|  
|レジストリキーから値を読み取る|[方法 : レジストリ キーから値を読み取る](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key.md)|  
  
   
  
## Examples  
 この例では、`HKEY_CURRENT_USER\Software\MyApp` から `Name` 値を読み取り、`MessageBox`に表示します。  
  
 [!code-vb[VbVbalrMyRegistry#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">ユーザーに、レジストリ キーからの読み取りに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">指定された値を格納する <see cref="T:Microsoft.Win32.RegistryKey" /> は、削除対象としてマークされています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keyName" /> が有効なレジストリ ルートから始まっていません。</exception>
        <permission cref="T:System.Security.Permissions.RegistryPermission">レジストリから読み取ります。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">REG_EXPAND_SZ 型のレジストリキーを読み取るには 関連付けられた列挙型: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">オブジェクト (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry.md">セキュリティとレジストリ (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LocalMachine">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey LocalMachine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey LocalMachine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.LocalMachine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalMachine As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ LocalMachine { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalMachine : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.LocalMachine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:Microsoft.Win32.RegistryKey" /> へのアクセスを提供する <see langword="HKEY_LOCAL_MACHINE" /> 型を返します。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、`HKEY_LOCAL_MACHINE` は、Windows のユーザーごとに異なる設定を格納するために使用されます。 コンピューターのすべてのユーザーがこのキーを共有します。 5つのサブキー (`Hardware`、`SAM`、`Security`、`Software`、`System`) は、ローカルコンピューターの構成データを保持します。  
  
 <xref:System.Security.Permissions> 名前空間にある <xref:System.Security.Permissions.RegistryPermission> クラスは、レジストリ変数へのアクセスを制御します。 レジストリ変数は、<xref:System.Security.Permissions.RegistryPermission> を持たないコードがアクセスできるメモリの場所には格納しないようにする必要があります。 同様に、アクセス許可を付与する場合は、ジョブを実行するために必要な最小限の特権を付与します。  
  
 レジストリ アクセス許可のアクセス値は <xref:System.Security.Permissions.RegistryPermissionAccess> 列挙型により定義されます。 次の表はそのメンバーの詳細です。  
  
|値|説明|  
|-----------|-----------------|  
|AllAccess|レジストリ変数への作成、読み取り、および書き込みアクセス。|  
|作成|レジストリ変数に対する作成アクセス。|  
|NoAccess|レジストリ変数へのアクセスはありません。|  
|[読み取り]|レジストリ変数に対する読み取りアクセス。|  
|書き込み|レジストリ変数への書き込みアクセス。|  
  
 次の表に、`My.Computer.Registry` オブジェクトに関連するタスクの例を示します。  
  
|目的|参照先|  
|--------|---------|  
|レジストリキーを作成し、その値を設定する|[方法: レジストリ キーを作成し、その値を設定する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value.md)|  
|レジストリキーの削除|[方法: レジストリ キーを削除する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key.md)|  
|レジストリキーから値を読み取る|[方法 : レジストリ キーから値を読み取る](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key.md)|  
  
   
  
## Examples  
 次の例では、サブキー `Software\MyCompany\Preferences` を開き、値 `FontColor` を `"red"`に設定します。  
  
 [!code-vb[VbVbalrMyRegistry#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.LocalMachine" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">オブジェクト (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry.md">セキュリティとレジストリ (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="PerformanceData">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey PerformanceData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey PerformanceData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.PerformanceData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PerformanceData As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ PerformanceData { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PerformanceData : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.PerformanceData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:Microsoft.Win32.RegistryKey" /> へのアクセスを提供する <see langword="HKEY_PERFORMANCE_DATA" /> 型を返します。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソフトウェアコンポーネントのパフォーマンス情報にアクセスするには、`HKEY_PERFORMANCE_DATA` を使用します。 各ソフトウェアコンポーネントは、インストール時にオブジェクトとカウンターのキーを作成し、実行中にカウンターデータを書き込みます。 このデータはレジストリに格納されませんが、レジストリを使用してアクセスします。 代わりに、`HKEY_PERFORMANCE_DATA` 経由でレジストリ関数を呼び出すと、システムによって、適切なシステムオブジェクトマネージャーからデータが収集されます。  
  
 このキーは Windows 98 システムには存在しません。`Name` メソッドを呼び出さないで使用しようとすると、<xref:System.IO.IOException>がスローされます。  
  
 通常、このキーに書き込むことはできません。サブキーを作成しようとすると、<xref:System.IO.IOException>がスローされます。  
  
 <xref:System.Security.Permissions> 名前空間にある <xref:System.Security.Permissions.RegistryPermission> クラスは、レジストリ変数へのアクセスを制御します。 レジストリ変数は、<xref:System.Security.Permissions.RegistryPermission> を持たないコードがアクセスできるメモリの場所には格納しないようにする必要があります。 同様に、アクセス許可を付与する場合は、ジョブを実行するために必要な最小限の特権を付与します。  
  
 レジストリ アクセス許可のアクセス値は <xref:System.Security.Permissions.RegistryPermissionAccess> 列挙型により定義されます。 次の表はそのメンバーの詳細です。  
  
|値|説明|  
|-----------|-----------------|  
|AllAccess|レジストリ変数への作成、読み取り、および書き込みアクセス。|  
|作成|レジストリ変数に対する作成アクセス。|  
|NoAccess|レジストリ変数へのアクセスはありません。|  
|[読み取り]|レジストリ変数に対する読み取りアクセス。|  
|書き込み|レジストリ変数への書き込みアクセス。|  
  
 次の表に、`My.Computer.Registry` オブジェクトに関連するタスクの例を示します。  
  
|目的|参照先|  
|--------|---------|  
|レジストリキーを作成し、その値を設定する|[方法: レジストリ キーを作成し、その値を設定する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value.md)|  
|レジストリキーの削除|[方法: レジストリ キーを削除する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key.md)|  
|レジストリキーから値を読み取る|[方法 : レジストリ キーから値を読み取る](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key.md)|  
  
   
  
## Examples  
 この例では、`MyCompany` サブキーから `ThisSoftware` 値を取得します。  
  
 [!code-vb[VbVbalrMyRegistry#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.PerformanceData" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">オブジェクト (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry.md">セキュリティとレジストリ (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>レジストリ キーに値を書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (string keyName, string valueName, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetValue(string keyName, string valueName, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (keyName As String, valueName As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::String ^ keyName, System::String ^ valueName, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : string * string * obj -&gt; unit" Usage="registryProxy.SetValue (keyName, valueName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="valueName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="keyName">[https://login.microsoftonline.com/consumers/](<see langword="String" />) 書き込み先のキーの名前。 必須。</param>
        <param name="valueName">[https://login.microsoftonline.com/consumers/](<see langword="String" />) 書き込む値の名前。 必須。</param>
        <param name="value">[https://login.microsoftonline.com/consumers/](<see langword="Object" />) 書き込む値。 必須。</param>
        <summary>レジストリ キーに値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定されたキーまたは値が存在しない場合は、作成されます。  
  
 `My.Computer.Registry.SetValue` メソッドに関連するタスクの例を次に示します。  
  
|目的|参照先|  
|--------|---------|  
|レジストリキーに値を設定する|[方法: レジストリ キーを作成し、その値を設定する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value.md)|  
  
   
  
## Examples  
 この例では、キー `HKEY_LOCAL_MACHINE\Software\MyCompany\Preferences`で値 `FontColor` を "red" に設定します。  
  
 [!code-vb[VbVbalrMyRegistry#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keyName" /> が有効なレジストリ ルートから始まっていません。  
  
または 
 <paramref name="valueName" /> が許容される最大長 (255 文字) を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><see cref="T:Microsoft.Win32.RegistryKey" /> が読み取り専用であるため、このキーに書き込むことはできません。ルート レベル ノードの場合や、書き込みアクセスが設定された状態でキーが開かれていない場合などです。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーに、レジストリ キーの作成または変更に必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.RegistryPermission">指定したレジストリキーが存在する場合にそのキーを変更する場合は。存在しない場合はレジストリキーを作成する場合は。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Write" />、<see cref="F:System.Security.Permissions.RegistryPermissionAccess.Create" /></permission>
        <altmember cref="T:Microsoft.Win32.RegistryValueKind" />
        <altmember cref="Overload:Microsoft.Win32.Registry.SetValue" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">オブジェクト (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry.md">セキュリティとレジストリ (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetValue(string keyName, string valueName, object value, valuetype Microsoft.Win32.RegistryValueKind valueKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (keyName As String, valueName As String, value As Object, valueKind As RegistryValueKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::String ^ keyName, System::String ^ valueName, System::Object ^ value, Microsoft::Win32::RegistryValueKind valueKind);" />
      <MemberSignature Language="F#" Value="member this.SetValue : string * string * obj * Microsoft.Win32.RegistryValueKind -&gt; unit" Usage="registryProxy.SetValue (keyName, valueName, value, valueKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="valueName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="valueKind" Type="Microsoft.Win32.RegistryValueKind" />
      </Parameters>
      <Docs>
        <param name="keyName">[https://login.microsoftonline.com/consumers/](<see langword="String" />) 書き込み先のキーの名前。 必須。</param>
        <param name="valueName">[https://login.microsoftonline.com/consumers/](<see langword="String" />) 書き込む値の名前。 必須。</param>
        <param name="value">[https://login.microsoftonline.com/consumers/](<see langword="Object" />) 書き込む値。 必須。</param>
        <param name="valueKind">[https://login.microsoftonline.com/consumers/](<see cref="T:Microsoft.Win32.RegistryValueKind" />) 必須。</param>
        <summary>レジストリ キーに値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定されたキーまたは値が存在しない場合は、作成されます。  
  
 `My.Computer.Registry.SetValue` メソッドに関連するタスクの例を次に示します。  
  
|目的|参照先|  
|--------|---------|  
|レジストリキーに値を設定する|[方法: レジストリ キーを作成し、その値を設定する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value.md)|  
  
   
  
## Examples  
 この例では、キー `HKEY_LOCAL_MACHINE\Software\MyCompany\Preferences`で値 `FontColor` を "red" に設定します。  
  
 [!code-vb[VbVbalrMyRegistry#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keyName" /> が有効なレジストリ ルートから始まっていません。  
  
または 
 <paramref name="keyName" /> が許容される最大長 (255 文字) を超えています。  
  
または 
<paramref name="value" /> の型が <paramref name="valueKind" /> で指定したレジストリ データ型と一致しないため、データを適切に変換できません。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><see cref="T:Microsoft.Win32.RegistryKey" /> が読み取り専用であるため、このキーに書き込むことはできません。ルートレベル ノードの場合や、書き込みアクセスが設定された状態でキーが開かれていない場合などです。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーに、レジストリ キーの作成または変更に必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.RegistryPermission">指定したレジストリキーが存在する場合にそのキーを変更する場合は。存在しない場合はレジストリキーを作成する場合は。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Write" />、<see cref="F:System.Security.Permissions.RegistryPermissionAccess.Create" /></permission>
        <altmember cref="T:Microsoft.Win32.RegistryValueKind" />
        <altmember cref="Overload:Microsoft.Win32.Registry.SetValue" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">オブジェクト (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry.md">セキュリティとレジストリ (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Users">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.RegistryKey Users { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.RegistryKey Users" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.RegistryProxy.Users" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Users As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::RegistryKey ^ Users { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Users : Microsoft.Win32.RegistryKey" Usage="Microsoft.VisualBasic.MyServices.RegistryProxy.Users" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:Microsoft.Win32.RegistryKey" /> へのアクセスを提供する <see langword="HKEY_USERS" /> 型を返します。</summary>
        <value><see cref="T:Microsoft.Win32.RegistryKey" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HKEY_USERS` は、主に初回ユーザーの既定の設定を格納するために使用されます。  
  
 <xref:System.Security.Permissions> 名前空間にある <xref:System.Security.Permissions.RegistryPermission> クラスは、レジストリ変数へのアクセスを制御します。 レジストリ変数は、<xref:System.Security.Permissions.RegistryPermission> を持たないコードがアクセスできるメモリの場所には格納しないようにする必要があります。 同様に、アクセス許可を付与する場合は、ジョブを実行するために必要な最小限の特権を付与します。  
  
 レジストリ アクセス許可のアクセス値は <xref:System.Security.Permissions.RegistryPermissionAccess> 列挙型により定義されます。 次の表はそのメンバーの詳細です。  
  
|値|レジストリ変数へのアクセス|  
|-----------|----------------------------------|  
|AllAccess|作成、読み取り、書き込み|  
|作成|作成|  
|NoAccess|アクセスなし。|  
|[読み取り]|[読み取り]|  
|書き込み|書き込み|  
  
 次の表に、`My.Computer.Registry` オブジェクトに関連するタスクの例を示します。  
  
|**To**|**「**|  
|------------|-------------|  
|レジストリキーを作成し、その値を設定する|[方法: レジストリ キーを作成し、その値を設定する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-create-a-registry-key-and-set-its-value.md)|  
|レジストリキーの削除|[方法: レジストリ キーを削除する](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-delete-a-registry-key.md)|  
|レジストリキーから値を読み取る|[方法 : レジストリ キーから値を読み取る](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-read-a-value-from-a-registry-key.md)|  
  
   
  
## Examples  
 この例では、レジストリキーの値の数をカウントして表示します。  
  
 [!code-vb[VbVbalrMyRegistry#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyRegistry/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.Win32.RegistryKey" />
        <altmember cref="F:Microsoft.Win32.Registry.Users" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">オブジェクト (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/security-and-the-registry.md">セキュリティとレジストリ (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
