<Type Name="Char" FullName="System.Char">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8f5c992f5b8eb6dde1d176a07ccff2d64e55216a" /><Meta Name="ms.sourcegitcommit" Value="05b28af3128fd8a2fe51178c9a1cc798d4601bf7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/12/2020" /><Meta Name="ms.locfileid" Value="83231649" /></Metadata><TypeSignature Language="C#" Value="public struct Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;char&gt;, class System.IConvertible, class System.IEquatable`1&lt;char&gt;" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Char" />
  <TypeSignature Language="VB.NET" Value="Public Structure Char&#xA;Implements IComparable, IComparable(Of Char), IConvertible, IEquatable(Of Char)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public value class Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type char = struct&#xA;    interface IConvertible" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public struct Char : IComparable, IConvertible" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IConvertible" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Char&#xA;Implements IComparable, IConvertible" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public value class Char : IComparable, IConvertible" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;char&gt;, class System.IConvertible, class System.IEquatable`1&lt;char&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public struct Char : IComparable, IComparable&lt;char&gt;, IEquatable&lt;char&gt;" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;char&gt;, class System.IEquatable`1&lt;char&gt;" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="VB.NET" Value="Public Structure Char&#xA;Implements IComparable, IComparable(Of Char), IEquatable(Of Char)" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="C++ CLI" Value="public value class Char : IComparable, IComparable&lt;char&gt;, IEquatable&lt;char&gt;" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type char = struct" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Char&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e6c1c-101">文字を UTF-16 コード単位で表します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-101">Represents a character as a UTF-16 code unit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="e6c1c-102">.NET では、UTF-16 エンコーディングを使用して Unicode コードポイントを表すために、<xref:System.Char> 構造体を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-102">.NET uses the <xref:System.Char> structure to represent Unicode code points by using UTF-16 encoding.</span></span> <span data-ttu-id="e6c1c-103"><xref:System.Char> オブジェクトの値は、16ビット数値 (序数) 値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-103">The value of a <xref:System.Char> object is its 16-bit numeric (ordinal) value.</span></span>

<span data-ttu-id="e6c1c-104">Unicode、スカラー値、コードポイント、サロゲートペア、UTF-16、および <xref:System.Text.Rune> 型に慣れていない場合は、「 [.net での文字エンコードの概要](/dotnet/standard/base-types/character-encoding-introduction)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-104">If you aren't familiar with Unicode, scalar values, code points, surrogate pairs, UTF-16, and the <xref:System.Text.Rune> type, see [Introduction to character encoding in .NET](/dotnet/standard/base-types/character-encoding-introduction).</span></span>

<span data-ttu-id="e6c1c-105">次のセクションでは、<xref:System.Char> オブジェクトと文字の関係を確認し、<xref:System.Char> インスタンスで実行される一般的なタスクについて説明します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-105">The following sections examine the relationship between a <xref:System.Char> object and a character and discuss some common tasks performed with <xref:System.Char> instances.</span></span> <span data-ttu-id="e6c1c-106">これらのタスクの一部を実行するための <xref:System.Char> の代替手段として、.NET Core 3.0 で導入された <xref:System.Text.Rune> の種類について検討することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-106">We recommend that you consider the <xref:System.Text.Rune> type, introduced in .NET Core 3.0, as an alternative to <xref:System.Char> for performing some of these tasks.</span></span>

- [<span data-ttu-id="e6c1c-107">Char オブジェクト、Unicode 文字、および文字列</span><span class="sxs-lookup"><span data-stu-id="e6c1c-107">Char objects, Unicode characters, and strings</span></span>](#Relationship)
- [<span data-ttu-id="e6c1c-108">文字と文字カテゴリ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-108">Characters and character categories</span></span>](#Categories)
- [<span data-ttu-id="e6c1c-109">文字とテキスト要素</span><span class="sxs-lookup"><span data-stu-id="e6c1c-109">Characters and text elements</span></span>](#Elements)
- [<span data-ttu-id="e6c1c-110">一般的な操作</span><span class="sxs-lookup"><span data-stu-id="e6c1c-110">Common operations</span></span>](#Operations)
- [<span data-ttu-id="e6c1c-111">Char 値と相互運用</span><span class="sxs-lookup"><span data-stu-id="e6c1c-111">Char values and interop</span></span>](#Interop)

<a name="Relationship"></a>
## <a name="char-objects-unicode-characters-and-strings"></a><span data-ttu-id="e6c1c-112">Char オブジェクト、Unicode 文字、および文字列</span><span class="sxs-lookup"><span data-stu-id="e6c1c-112">Char objects, Unicode characters, and strings</span></span>
 <span data-ttu-id="e6c1c-113"><xref:System.String> オブジェクトは、テキストの文字列を表す <xref:System.Char> 構造体のシーケンシャルコレクションです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-113">A <xref:System.String> object is a sequential collection of <xref:System.Char> structures that represents a string of text.</span></span> <span data-ttu-id="e6c1c-114">ほとんどの Unicode 文字は、1つの <xref:System.Char> オブジェクトで表すことができますが、基本文字、サロゲートペア、または組み合わせ文字シーケンスとしてエンコードされた文字は、複数の <xref:System.Char> オブジェクトによって表されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-114">Most Unicode characters can be represented by a single <xref:System.Char> object, but a character that is encoded as a base character, surrogate pair, and/or combining character sequence is represented by multiple <xref:System.Char> objects.</span></span> <span data-ttu-id="e6c1c-115">このため、<xref:System.String> オブジェクト内の <xref:System.Char> 構造体は、必ずしも1つの Unicode 文字と同じではありません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-115">For this reason, a <xref:System.Char> structure in a <xref:System.String> object is not necessarily equivalent to a single Unicode character.</span></span>

 <span data-ttu-id="e6c1c-116">次の場合は、複数の16ビットコード単位を使用して、1つの Unicode 文字を表します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-116">Multiple 16-bit code units are used to represent single Unicode characters in the following cases:</span></span>

-   <span data-ttu-id="e6c1c-117">グリフ。1つの文字または基本文字の後に1つ以上の組み合わせ文字が続く形式で構成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-117">Glyphs, which may consist of a single character or of a base character followed by one or more combining characters.</span></span> <span data-ttu-id="e6c1c-118">たとえば、äという文字は、コード単位が U + 0061 の後に、そのコード単位が U + 0308 である <xref:System.Char> オブジェクトが続く <xref:System.Char> オブジェクトによって表されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-118">For example, the character ä is represented by a <xref:System.Char> object whose code unit is U+0061 followed by a <xref:System.Char> object whose code unit is U+0308.</span></span> <span data-ttu-id="e6c1c-119">(文字äは、U + 00E4 のコード単位を持つ単一の <xref:System.Char> オブジェクトで定義することもできます)。次の例では、ä文字が2つの <xref:System.Char> オブジェクトで構成されていることを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-119">(The character ä can also be defined by a single <xref:System.Char> object that has a code unit of U+00E4.) The following example illustrates that the character ä consists of two <xref:System.Char> objects.</span></span>

     [!code-csharp[System.Char.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/grapheme1.cs#1)]
     [!code-vb[System.Char.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/grapheme1.vb#1)]

-   <span data-ttu-id="e6c1c-120">Unicode 基本多言語平面 (BMP) 以外の文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-120">Characters outside the Unicode Basic Multilingual Plane (BMP).</span></span> <span data-ttu-id="e6c1c-121">Unicode では、平面0を表す BMP に加えて16の平面がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-121">Unicode supports sixteen planes in addition to the BMP, which represents plane 0.</span></span> <span data-ttu-id="e6c1c-122">Unicode コードポイントは、平面を含む21ビットの値によって UTF-32 で表されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-122">A Unicode code point is represented in UTF-32 by a 21-bit value that includes the plane.</span></span> <span data-ttu-id="e6c1c-123">たとえば、U + 1D160 は、音符の8番目の文字であるミュージックシンボルを表します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-123">For example, U+1D160 represents the MUSICAL SYMBOL EIGHTH NOTE character.</span></span> <span data-ttu-id="e6c1c-124">UTF-16 エンコーディングには16ビットしかないため、BMP の外側の文字は UTF-16 のサロゲートペアによって表されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-124">Because UTF-16 encoding has only 16 bits, characters outside the BMP are represented by surrogate pairs in UTF-16.</span></span> <span data-ttu-id="e6c1c-125">次の例では、32に相当する U + 1D160 という文字で、ミュージックシンボルの8番目の文字である "U + D834 U + DD60" が使用されていることを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-125">The following example illustrates that the UTF-32 equivalent of U+1D160, the MUSICAL SYMBOL EIGHTH NOTE character, is U+D834 U+DD60.</span></span> <span data-ttu-id="e6c1c-126">U + D834 は上位サロゲートです。サロゲートの範囲が U + D800 から U + DBFF になります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-126">U+D834 is the high surrogate; high surrogates range from U+D800 through U+DBFF.</span></span> <span data-ttu-id="e6c1c-127">U + DD60 は下位サロゲートです。下限サロゲートは U + DC00 から U + DFFF までの範囲です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-127">U+DD60 is the low surrogate; low surrogates range from U+DC00 through U+DFFF.</span></span>

     [!code-csharp[System.Char.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/surrogate1.cs#2)]
     [!code-vb[System.Char.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/surrogate1.vb#2)]

<a name="Categories"></a>
## <a name="characters-and-character-categories"></a><span data-ttu-id="e6c1c-128">文字と文字カテゴリ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-128">Characters and character categories</span></span>
<span data-ttu-id="e6c1c-129">Unicode 文字または有効なサロゲートペアは、それぞれ Unicode カテゴリに属しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-129">Each Unicode character or valid surrogate pair belongs to a Unicode category.</span></span> <span data-ttu-id="e6c1c-130">.NET Framework では、Unicode カテゴリは <xref:System.Globalization.UnicodeCategory> 列挙体のメンバーによって表され、<xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=nameWithType>、<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>、<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>などの値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-130">In the .NET Framework, Unicode categories are represented by members of the <xref:System.Globalization.UnicodeCategory> enumeration and include values such as <xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>, and <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>, for example.</span></span>

<span data-ttu-id="e6c1c-131">文字の Unicode カテゴリを確認するには、<xref:System.Char.GetUnicodeCategory%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-131">To determine the Unicode category of a character, call the <xref:System.Char.GetUnicodeCategory%2A> method.</span></span> <span data-ttu-id="e6c1c-132">たとえば、次の例では、<xref:System.Char.GetUnicodeCategory%2A> を呼び出して、文字列内の各文字の Unicode カテゴリを表示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-132">For example, the following example calls the <xref:System.Char.GetUnicodeCategory%2A> to display the Unicode category of each character in a string.</span></span> <span data-ttu-id="e6c1c-133">この例は、<xref:System.String> インスタンスにサロゲートペアがない場合にのみ正しく動作します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-133">The example works correctly only if there are no surrogate pairs in the <xref:System.String> instance.</span></span>

 [!code-csharp[System.Char.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/GetUnicodeCategory3.cs#6)]
 [!code-vb[System.Char.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/GetUnicodeCategory3.vb#6)]

 <span data-ttu-id="e6c1c-134">内部的には、ASCII 範囲外の文字 (U + 0000 ~ U + 00FF) の場合、<xref:System.Char.GetUnicodeCategory%2A> メソッドは、<xref:System.Globalization.CharUnicodeInfo> クラスによって報告された Unicode カテゴリに依存します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-134">Internally, for characters outside the ASCII range (U+0000 through U+00FF), the <xref:System.Char.GetUnicodeCategory%2A> method depends on Unicode categories reported by the <xref:System.Globalization.CharUnicodeInfo> class.</span></span> <span data-ttu-id="e6c1c-135">[!INCLUDE[net_v462](~/includes/net-v462-md.md)]以降では、unicode[標準バージョン 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)に基づいて unicode 文字が分類されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-135">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unicode Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="e6c1c-136">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] から [!INCLUDE[net_v461](~/includes/net-v461-md.md)]に .NET Framework のバージョンでは、 [Unicode 標準バージョン 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)に基づいて分類されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-136">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unicode Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>

<a name="Elements"></a>
## <a name="characters-and-text-elements"></a><span data-ttu-id="e6c1c-137">文字とテキスト要素</span><span class="sxs-lookup"><span data-stu-id="e6c1c-137">Characters and text elements</span></span>
 <span data-ttu-id="e6c1c-138">1つの文字は複数の <xref:System.Char> オブジェクトで表すことができるため、個別の <xref:System.Char> オブジェクトを操作することは常に意味がありません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-138">Because a single character can be represented by multiple <xref:System.Char> objects, it is not always meaningful to work with individual <xref:System.Char> objects.</span></span> <span data-ttu-id="e6c1c-139">たとえば、次の例では、0 ~ 9 の Aegean 番号を表す Unicode コードポイントを UTF-16 でエンコードされたコード単位に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-139">For instance, the following example converts the Unicode code points that represent the Aegean numbers zero through 9 to UTF-16 encoded code units.</span></span> <span data-ttu-id="e6c1c-140"><xref:System.Char> オブジェクトが文字で誤って表示されるため、結果として得られる文字列が20文字であることが誤って報告されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-140">Because it erroneously equates <xref:System.Char> objects with characters, it inaccurately reports that the resulting string has 20 characters.</span></span>

 [!code-csharp[System.Char.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2.cs#3)]
 [!code-vb[System.Char.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2.vb#3)]

 <span data-ttu-id="e6c1c-141"><xref:System.Char> オブジェクトが1つの文字を表すという想定を避けるために、次の操作を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-141">You can do the following to avoid the assumption that a <xref:System.Char> object represents a single character.</span></span>

-   <span data-ttu-id="e6c1c-142">個々の文字を操作して言語コンテンツを表現および分析するのではなく、<xref:System.String> オブジェクト全体を操作できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-142">You can work with a <xref:System.String> object in its entirety instead of working with its individual characters to represent and analyze linguistic content.</span></span>

-   <span data-ttu-id="e6c1c-143">次の例に示すように、<xref:System.String.EnumerateRunes%2A?displayProperty=nameWithType> を使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-143">You can use <xref:System.String.EnumerateRunes%2A?displayProperty=nameWithType> as shown in the following example:</span></span>

    :::code language="csharp" source="~/snippets/System.Text/Rune/csharp/CountLettersInString.cs" id="SnippetGoodExample":::

-   <span data-ttu-id="e6c1c-144"><xref:System.Globalization.StringInfo> クラスを使用すると、個々の <xref:System.Char> オブジェクトではなく、テキスト要素を操作できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-144">You can use the <xref:System.Globalization.StringInfo> class to work with text elements instead of individual <xref:System.Char> objects.</span></span> <span data-ttu-id="e6c1c-145">次の例では、<xref:System.Globalization.StringInfo> オブジェクトを使用して、0 ~ 9 の Aegean 番号で構成される文字列内のテキスト要素の数をカウントします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-145">The following example uses the <xref:System.Globalization.StringInfo> object to count the number of text elements in a string that consists of the Aegean numbers zero through nine.</span></span> <span data-ttu-id="e6c1c-146">サロゲートペアは1文字であると見なされるため、文字列に10文字が含まれていることが正しく報告されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-146">Because it considers a surrogate pair a single character, it correctly reports that the string contains ten characters.</span></span>

     [!code-csharp[System.Char.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2a.cs#4)]
     [!code-vb[System.Char.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2a.vb#4)]

-   <span data-ttu-id="e6c1c-147">1つ以上の組み合わせ文字を含む基本文字が文字列に含まれている場合は、<xref:System.String.Normalize%2A?displayProperty=nameWithType> メソッドを呼び出して、部分文字列を1つの UTF-16 でエンコードされたコード単位に変換できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-147">If a string contains a base character that has one or more combining characters, you can call the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method to convert the substring to a single UTF-16 encoded code unit.</span></span> <span data-ttu-id="e6c1c-148">次の例では、<xref:System.String.Normalize%2A?displayProperty=nameWithType> メソッドを呼び出して、基本文字 U + 0061 (ラテン小文字 A) と u + 0308 (ウムラウト) を U + 00E4 (ラテン小文字 A とウムラウト) に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-148">The following example calls the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method to convert the base character U+0061 (LATIN SMALL LETTER A) and combining character U+0308 (COMBINING DIAERESIS) to U+00E4 (LATIN SMALL LETTER A WITH DIAERESIS).</span></span>

     [!code-csharp[System.Char.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/normalized.cs#5)]
     [!code-vb[System.Char.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/normalized.vb#5)]

<a name="Operations"></a>
## <a name="common-operations"></a><span data-ttu-id="e6c1c-149">一般的な操作</span><span class="sxs-lookup"><span data-stu-id="e6c1c-149">Common operations</span></span>
 <span data-ttu-id="e6c1c-150"><xref:System.Char> 構造体は、<xref:System.Char> オブジェクトを比較し、現在の <xref:System.Char> オブジェクトの値を別の型のオブジェクトに変換し、<xref:System.Char> オブジェクトの Unicode カテゴリを決定するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-150">The <xref:System.Char> structure provides methods to compare <xref:System.Char> objects, convert the value of the current <xref:System.Char> object to an object of another type, and determine the Unicode category of a <xref:System.Char> object:</span></span>

|<span data-ttu-id="e6c1c-151">目的</span><span class="sxs-lookup"><span data-stu-id="e6c1c-151">To do this</span></span>|<span data-ttu-id="e6c1c-152">これらの `System.Char` メソッドを使用する</span><span class="sxs-lookup"><span data-stu-id="e6c1c-152">Use these `System.Char` methods</span></span>|
|----------------|-------------------------------------|
|<span data-ttu-id="e6c1c-153"><xref:System.Char> オブジェクトの比較</span><span class="sxs-lookup"><span data-stu-id="e6c1c-153">Compare <xref:System.Char> objects</span></span>|<span data-ttu-id="e6c1c-154"><xref:System.Char.CompareTo%2A> および <xref:System.Char.Equals%2A></span><span class="sxs-lookup"><span data-stu-id="e6c1c-154"><xref:System.Char.CompareTo%2A> and <xref:System.Char.Equals%2A></span></span>|
|<span data-ttu-id="e6c1c-155">コードポイントを文字列に変換する</span><span class="sxs-lookup"><span data-stu-id="e6c1c-155">Convert a code point to a string</span></span>|<xref:System.Char.ConvertFromUtf32%2A><br /><br />  <span data-ttu-id="e6c1c-156"><xref:System.Text.Rune> の種類も参照してください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-156">See also the <xref:System.Text.Rune> type.</span></span>|
|<span data-ttu-id="e6c1c-157"><xref:System.Char> オブジェクトの <xref:System.Char> オブジェクトまたはサロゲートペアをコードポイントに変換します</span><span class="sxs-lookup"><span data-stu-id="e6c1c-157">Convert a <xref:System.Char> object or a surrogate pair of <xref:System.Char> objects to a code point</span></span>|<span data-ttu-id="e6c1c-158">1文字の場合: <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="e6c1c-158">For a single character: <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType></span></span><br /><br /> <span data-ttu-id="e6c1c-159">サロゲートペアまたは文字列内の文字の場合: <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="e6c1c-159">For a surrogate pair or a character in a string: <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType></span></span><br /><br />  <span data-ttu-id="e6c1c-160"><xref:System.Text.Rune> の種類も参照してください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-160">See also the <xref:System.Text.Rune> type.</span></span>|
|<span data-ttu-id="e6c1c-161">文字の Unicode カテゴリを取得する</span><span class="sxs-lookup"><span data-stu-id="e6c1c-161">Get the Unicode category of a character</span></span>|<xref:System.Char.GetUnicodeCategory%2A><br /><br />  <span data-ttu-id="e6c1c-162"><xref:System.Text.Rune.GetUnicodeCategory%2A?displayProperty=nameWithType> も参照してください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-162">See also <xref:System.Text.Rune.GetUnicodeCategory%2A?displayProperty=nameWithType>.</span></span>|
|<span data-ttu-id="e6c1c-163">文字が特定の Unicode カテゴリ (数字、文字、句読点、制御文字など) に含まれているかどうかを判断する</span><span class="sxs-lookup"><span data-stu-id="e6c1c-163">Determine whether a character is in a particular Unicode category such as digit, letter, punctuation, control character, and so on</span></span>|<span data-ttu-id="e6c1c-164"><xref:System.Char.IsControl%2A>、<xref:System.Char.IsDigit%2A>、<xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLetter%2A>、<xref:System.Char.IsLetterOrDigit%2A>、<xref:System.Char.IsLower%2A>、<xref:System.Char.IsLowSurrogate%2A>、<xref:System.Char.IsNumber%2A>、<xref:System.Char.IsPunctuation%2A>、<xref:System.Char.IsSeparator%2A>、<xref:System.Char.IsSurrogate%2A>、および <xref:System.Char.IsSurrogatePair%2A>。<xref:System.Char.IsSymbol%2A><xref:System.Char.IsUpper%2A><xref:System.Char.IsWhiteSpace%2A></span><span class="sxs-lookup"><span data-stu-id="e6c1c-164"><xref:System.Char.IsControl%2A>, <xref:System.Char.IsDigit%2A>, <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLetter%2A>, <xref:System.Char.IsLetterOrDigit%2A>, <xref:System.Char.IsLower%2A>, <xref:System.Char.IsLowSurrogate%2A>, <xref:System.Char.IsNumber%2A>, <xref:System.Char.IsPunctuation%2A>, <xref:System.Char.IsSeparator%2A>, <xref:System.Char.IsSurrogate%2A>, <xref:System.Char.IsSurrogatePair%2A>, <xref:System.Char.IsSymbol%2A>, <xref:System.Char.IsUpper%2A>, and <xref:System.Char.IsWhiteSpace%2A></span></span><br /><br />  <span data-ttu-id="e6c1c-165"><xref:System.Text.Rune> 型についても、対応するメソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-165">See also corresponding methods on the <xref:System.Text.Rune> type.</span></span>|
|<span data-ttu-id="e6c1c-166">数値を表す <xref:System.Char> オブジェクトを数値型に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-166">Convert a <xref:System.Char> object that represents a number to a numeric value type</span></span>|<xref:System.Char.GetNumericValue%2A><br /><br /> <span data-ttu-id="e6c1c-167"><xref:System.Text.Rune.GetNumericValue%2A?displayProperty=nameWithType> も参照してください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-167">See also <xref:System.Text.Rune.GetNumericValue%2A?displayProperty=nameWithType>.</span></span>|
|<span data-ttu-id="e6c1c-168">文字列内の文字を <xref:System.Char> オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-168">Convert a character in a string into a <xref:System.Char> object</span></span>|<span data-ttu-id="e6c1c-169"><xref:System.Char.Parse%2A> および <xref:System.Char.TryParse%2A></span><span class="sxs-lookup"><span data-stu-id="e6c1c-169"><xref:System.Char.Parse%2A> and <xref:System.Char.TryParse%2A></span></span>|
|<span data-ttu-id="e6c1c-170"><xref:System.Char> オブジェクトを <xref:System.String> オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-170">Convert a <xref:System.Char> object to a <xref:System.String> object</span></span>|<xref:System.Char.ToString%2A>|
|<span data-ttu-id="e6c1c-171"><xref:System.Char> オブジェクトの大文字と小文字の変更</span><span class="sxs-lookup"><span data-stu-id="e6c1c-171">Change the case of a <xref:System.Char> object</span></span>|<span data-ttu-id="e6c1c-172"><xref:System.Char.ToLower%2A>、<xref:System.Char.ToLowerInvariant%2A>、<xref:System.Char.ToUpper%2A>、および <xref:System.Char.ToUpperInvariant%2A></span><span class="sxs-lookup"><span data-stu-id="e6c1c-172"><xref:System.Char.ToLower%2A>, <xref:System.Char.ToLowerInvariant%2A>, <xref:System.Char.ToUpper%2A>, and <xref:System.Char.ToUpperInvariant%2A></span></span><br /><br />  <span data-ttu-id="e6c1c-173"><xref:System.Text.Rune> 型についても、対応するメソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-173">See also corresponding methods on the <xref:System.Text.Rune> type.</span></span>|

<a name="Interop"></a>
## <a name="char-values-and-interop"></a><span data-ttu-id="e6c1c-174">Char 値と相互運用</span><span class="sxs-lookup"><span data-stu-id="e6c1c-174">Char values and interop</span></span>
<span data-ttu-id="e6c1c-175">Unicode UTF-16 でエンコードされたコード単位として表されるマネージ <xref:System.Char> 型がアンマネージコードに渡されると、既定では、相互運用マーシャラーによって文字セットが ANSI に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-175">When a managed <xref:System.Char> type, which is represented as a Unicode UTF-16 encoded code unit, is passed to unmanaged code, the interop marshaler converts the character set to ANSI by default.</span></span> <span data-ttu-id="e6c1c-176"><xref:System.Runtime.InteropServices.DllImportAttribute> 属性をプラットフォーム呼び出し宣言に適用し、<xref:System.Runtime.InteropServices.StructLayoutAttribute> 属性を COM 相互運用宣言に適用して、マーシャリングされた <xref:System.Char> 型が使用する文字セットを制御できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-176">You can apply the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to platform invoke declarations and the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute to a COM interop declaration to control which character set a marshaled <xref:System.Char> type uses.</span></span>



## Examples
 <span data-ttu-id="e6c1c-177">次のコード例は、<xref:System.Char>のメソッドの一部を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-177">The following code example demonstrates some of the methods in <xref:System.Char>.</span></span>

 [!code-cpp[System.Char &#91;Type Level&#93;#23](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char [Type Level]/CPP/charstructure.cpp#23)]
 [!code-csharp[System.Char &#91;Type Level&#93;#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char [Type Level]/CS/charstructure.cs#23)]
 [!code-vb[System.Char &#91;Type Level&#93;#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char [Type Level]/VB/charstructure.vb#23)]

 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="e6c1c-178">この型のすべてのメンバーは、スレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-178">All members of this type are thread safe.</span></span> <span data-ttu-id="e6c1c-179">インスタンスの状態を変更するように見えるメンバーは、実際には新しい値で初期化された新しいインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-179">Members that appear to modify instance state actually return a new instance initialized with the new value.</span></span> <span data-ttu-id="e6c1c-180">他の型と同様に、この型のインスタンスを含む共有変数の読み取りと書き込みは、スレッドセーフを保証するためにロックによって保護される必要があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-180">As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</span></span></threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.String" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-181">このインスタンスと指定したオブジェクトまたは値型とを比較し、並べ替え順序において、このインスタンスの位置が指定したオブジェクトまたは値型の前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-181">Compares this instance to a specified object or value type, and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or value type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(char value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : char -&gt; int&#xA;override this.CompareTo : char -&gt; int" Usage="char.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e6c1c-182">比較対象の <see cref="T:System.Char" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-182">A <see cref="T:System.Char" /> object to compare.</span></span></param>
        <summary><span data-ttu-id="e6c1c-183">このインスタンスと指定した <see cref="T:System.Char" /> オブジェクトとを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.Char" /> オブジェクトの前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-183">Compares this instance to a specified <see cref="T:System.Char" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Char" /> object.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-184">並べ替え順序における、<paramref name="value" /> パラメーターに対するこのインスタンスの相対位置を示す符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-184">A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="e6c1c-185">戻り値</span><span class="sxs-lookup"><span data-stu-id="e6c1c-185">Return Value</span></span>

 </term><description> <span data-ttu-id="e6c1c-186">説明</span><span class="sxs-lookup"><span data-stu-id="e6c1c-186">Description</span></span>

 </description></listheader><item><term> <span data-ttu-id="e6c1c-187">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="e6c1c-187">Less than zero</span></span>

 </term><description> <span data-ttu-id="e6c1c-188">このインスタンスの位置が <paramref name="value" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-188">This instance precedes <paramref name="value" />.</span></span>

 </description></item><item><term> <span data-ttu-id="e6c1c-189">ゼロ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-189">Zero</span></span>

 </term><description> <span data-ttu-id="e6c1c-190">このインスタンスの位置が、並べ替え順序において <paramref name="value" /> と同じです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-190">This instance has the same position in the sort order as <paramref name="value" />.</span></span>

 </description></item><item><term> <span data-ttu-id="e6c1c-191">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="e6c1c-191">Greater than zero</span></span>

 </term><description> <span data-ttu-id="e6c1c-192">このインスタンスの位置が <paramref name="value" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-192">This instance follows <paramref name="value" />.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-193">このメソッドは、<xref:System.IComparable%601?displayProperty=nameWithType> インターフェイスを実装し、`value` パラメーターをオブジェクトに変換する必要がないため、<xref:System.Char.CompareTo%2A?displayProperty=nameWithType> メソッドよりも若干優れています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-193">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.Char.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.</span></span>

 <span data-ttu-id="e6c1c-194">このメソッドによって実行される比較は、辞書式の特性ではなく、このインスタンスと `value`のエンコードされた値に基づいています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-194">The comparison performed by this method is based on the encoded values of this instance and `value`, not their lexicographical characteristics.</span></span>

 <span data-ttu-id="e6c1c-195"><xref:System.Char.CompareTo%2A> メソッドのパラメーターの型がインスタンスの型よりも少ないビット (幅が狭い) の場合、一部のプログラミング言語では、パラメーターの値をより多くのビットを持つ値に変換する暗黙的な拡大変換が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-195">If the <xref:System.Char.CompareTo%2A> method parameter type has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.</span></span>

 <span data-ttu-id="e6c1c-196">たとえば、インスタンスの型が <xref:System.Int32> で、パラメーターの型が <xref:System.Byte>であるとします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-196">For example, suppose the instance type is <xref:System.Int32> and the parameter type is <xref:System.Byte>.</span></span> <span data-ttu-id="e6c1c-197">Microsoft C#コンパイラは、パラメーターの値を <xref:System.Int32> オブジェクトとして表す命令を生成し、<xref:System.Int32> インスタンスと <xref:System.Int32> パラメーター表現の値を比較する <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> メソッドを生成します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-197">The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref:System.Int32> object, then generates a <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> method that compares the values of the <xref:System.Int32> instance and the <xref:System.Int32> parameter representation.</span></span>

 <span data-ttu-id="e6c1c-198">通常、暗黙的な拡大変換は数値型で実行されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-198">Typically, implicit widening conversions are performed on numeric types.</span></span> <span data-ttu-id="e6c1c-199">コンパイラが拡大変換を実行するかどうかを判断するには、プログラミング言語のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-199">Consult your programming language's documentation to determine if its compiler performs widening conversions.</span></span> <span data-ttu-id="e6c1c-200">インスタンスとパラメーターの型が一致せず、適切な変換が使用できない場合、コンパイラはパラメーターをボックスに表示する命令を生成し、<xref:System.Object> パラメーターを受け取る <xref:System.Char.CompareTo%2A> のオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-200">If the instance and parameter types mismatch and a suitable conversion is not available, the compiler generates instructions to box the parameter and invoke the <xref:System.Char.CompareTo%2A> overload that takes an <xref:System.Object> parameter.</span></span>



## Examples
 <span data-ttu-id="e6c1c-201">次のコード例は、いくつかの値および参照型について、`CompareTo` メソッドのジェネリックおよび非ジェネリックバージョンを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-201">The following code example demonstrates generic and non-generic versions of the `CompareTo` method for several value and reference types.</span></span>

 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="char.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e6c1c-202">このインスタンスと比較するオブジェクト、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-202">An object to compare this instance to, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-203">このインスタンスと指定したオブジェクトとを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.Object" /> の前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-203">Compares this instance to a specified object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-204">並べ替え順序における、<paramref name="value" /> パラメーターに対するこのインスタンスの相対位置を示す符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-204">A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="e6c1c-205">戻り値</span><span class="sxs-lookup"><span data-stu-id="e6c1c-205">Return Value</span></span>

 </term><description> <span data-ttu-id="e6c1c-206">説明</span><span class="sxs-lookup"><span data-stu-id="e6c1c-206">Description</span></span>

 </description></listheader><item><term> <span data-ttu-id="e6c1c-207">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="e6c1c-207">Less than zero</span></span>

 </term><description> <span data-ttu-id="e6c1c-208">このインスタンスの位置が <paramref name="value" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-208">This instance precedes <paramref name="value" />.</span></span>

 </description></item><item><term> <span data-ttu-id="e6c1c-209">ゼロ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-209">Zero</span></span>

 </term><description> <span data-ttu-id="e6c1c-210">このインスタンスの位置が、並べ替え順序において <paramref name="value" /> と同じです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-210">This instance has the same position in the sort order as <paramref name="value" />.</span></span>

 </description></item><item><term> <span data-ttu-id="e6c1c-211">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="e6c1c-211">Greater than zero</span></span>

 </term><description> <span data-ttu-id="e6c1c-212">このインスタンスの位置が <paramref name="value" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-212">This instance follows <paramref name="value" />.</span></span>

<span data-ttu-id="e6c1c-213">または</span><span class="sxs-lookup"><span data-stu-id="e6c1c-213">-or-</span></span>

 <span data-ttu-id="e6c1c-214"><paramref name="value" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-214"><paramref name="value" /> is <see langword="null" />.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-215"><xref:System.Char.CompareTo%2A> メソッドは、<xref:System.IComparable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-215">The <xref:System.Char.CompareTo%2A> method implements the <xref:System.IComparable> interface.</span></span>

 <span data-ttu-id="e6c1c-216">`value` パラメーターは、`null` または <xref:System.Char>のインスタンスである必要があります。それ以外の場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-216">The `value` parameter must be `null` or an instance of <xref:System.Char>; otherwise, an exception is thrown.</span></span>

 <span data-ttu-id="e6c1c-217">このメソッドによって実行される比較は、このインスタンスと `value`のエンコードされた値に基づいており、必ずしも辞書式の特性であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-217">The comparison performed by this method is based on the encoded values of this instance and `value`, not necessarily their lexicographical characteristics.</span></span> <span data-ttu-id="e6c1c-218"><xref:System.Char>のインスタンスは、その値に関係なく、`null`よりも大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-218">Any instance of <xref:System.Char>, regardless of its value, is considered greater than `null`.</span></span>



## Examples
 <span data-ttu-id="e6c1c-219">次のコード例は、<xref:System.Char.CompareTo%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-219">The following code example demonstrates <xref:System.Char.CompareTo%2A>.</span></span>

 [!code-cpp[System.Char.CompareTo#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.CompareTo/CPP/compareto.cpp#19)]
 [!code-csharp[System.Char.CompareTo#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.CompareTo/CS/compareto.cs#19)]
 [!code-vb[System.Char.CompareTo#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.CompareTo/VB/compareto.vb#19)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e6c1c-220"><paramref name="value" /> は <see cref="T:System.Char" /> オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-220"><paramref name="value" /> is not a <see cref="T:System.Char" /> object.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertFromUtf32">
      <MemberSignature Language="C#" Value="public static string ConvertFromUtf32 (int utf32);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ConvertFromUtf32(int32 utf32) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertFromUtf32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertFromUtf32 (utf32 As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ConvertFromUtf32(int utf32);" />
      <MemberSignature Language="F#" Value="static member ConvertFromUtf32 : int -&gt; string" Usage="System.char.ConvertFromUtf32 utf32" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf32" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="utf32"><span data-ttu-id="e6c1c-221">21 ビットの Unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-221">A 21-bit Unicode code point.</span></span></param>
        <summary><span data-ttu-id="e6c1c-222">指定された Unicode コード ポイントを UTF-16 エンコードの文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-222">Converts the specified Unicode code point into a UTF-16 encoded string.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-223"><see cref="T:System.Char" /> パラメーターに指定されたコード ポイントに対応する、単一の <see cref="T:System.Char" /> オブジェクトから成る文字列または <paramref name="utf32" /> オブジェクトのサロゲート ペアから成る文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-223">A string consisting of one <see cref="T:System.Char" /> object or a surrogate pair of <see cref="T:System.Char" /> objects equivalent to the code point specified by the <paramref name="utf32" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-224">このメソッドを使用して、21ビットの Unicode コードポイントを UTF-16 でエンコードされた文字列に変換してから、<xref:System.Char.IsLowSurrogate%28System.Char%29> や <xref:System.Char.IsHighSurrogate%28System.Char%29>などのメソッドを使用して文字列をテストします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-224">Use this method to convert a 21-bit Unicode code point to a UTF-16 encoded string before testing the string with methods such as <xref:System.Char.IsLowSurrogate%28System.Char%29> and <xref:System.Char.IsHighSurrogate%28System.Char%29>.</span></span>

 <span data-ttu-id="e6c1c-225">基本多言語面 (BMP) 以外の有効なコードポイントは、常に有効なサロゲートペアを生成します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-225">A valid code point outside the Basic Multilingual Plane (BMP) always yields a valid surrogate pair.</span></span> <span data-ttu-id="e6c1c-226">ただし、変換では言語処理が使用されないため、BMP 内の有効なコードポイントでは、Unicode 標準に従って有効な結果が得られない場合があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-226">However, a valid code point within the BMP might not yield a valid result according to the Unicode standard because no linguistic processing is used in the conversion.</span></span> <span data-ttu-id="e6c1c-227">そのため、<xref:System.Text.UTF32Encoding?displayProperty=nameWithType> クラスを使用して一括 32 UTF-8 データを一括 UTF-16 データに変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-227">For that reason, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class to convert bulk UTF-32 data into bulk UTF-16 data.</span></span>



## Examples
 <span data-ttu-id="e6c1c-228">次のコード例は、<xref:System.Char.ConvertToUtf32%2A> メソッドと <xref:System.Char.ConvertFromUtf32%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-228">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>

 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-229"><paramref name="utf32" /> は U+0 から U+10FFFF までの範囲の有効な 21 ビット Unicode コード ポイントではありません。これには、U+D800 から U+DFFF までの範囲のサロゲート ペアは含まれません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-229"><paramref name="utf32" /> is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertToUtf32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-230">UTF-16 でエンコードされたサロゲート ペアの値を Unicode コード ポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-230">Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUtf32 (highSurrogate As Char, lowSurrogate As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ConvertToUtf32(char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="F#" Value="static member ConvertToUtf32 : char * char -&gt; int" Usage="System.char.ConvertToUtf32 (highSurrogate, lowSurrogate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lowSurrogate" Type="System.Char" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="e6c1c-231">上位サロゲートのコード単位 (U+D800 から U+DBFF までのコード単位)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-231">A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF).</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="e6c1c-232">下位サロゲートのコード単位 (U+DC00 から U+DFFF までのコード単位)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-232">A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF).</span></span></param>
        <summary><span data-ttu-id="e6c1c-233">UTF-16 でエンコードされたサロゲート ペアの値を Unicode コード ポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-233">Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-234"><paramref name="highSurrogate" /> パラメーターおよび <paramref name="lowSurrogate" /> パラメーターによって表される 21 ビットの Unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-234">The 21-bit Unicode code point represented by the <paramref name="highSurrogate" /> and <paramref name="lowSurrogate" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-235">このメソッドを使用して、サロゲートペアを21ビットの Unicode コードポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-235">Use this method to convert a surrogate pair into a 21-bit Unicode code point.</span></span> <span data-ttu-id="e6c1c-236">UTF-16 データを 32 UTF-8 データに変換するには、<xref:System.Text.UTF32Encoding?displayProperty=nameWithType> クラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-236">To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class.</span></span>

 <span data-ttu-id="e6c1c-237">通常、UTF-16 エンコーディングは、16ビットコード単位として1つの Unicode 文字を表します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-237">Ordinarily, UTF-16 encoding represents a single Unicode character as a 16-bit code unit.</span></span> <span data-ttu-id="e6c1c-238">ただし、サロゲートペアもサポートしています。これにより、単一の抽象文字を 2 16 ビットのコード単位として表すことができます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-238">However, it also supports surrogate pairs, which allow a single abstract character to be represented as two 16-bit code units.</span></span> <span data-ttu-id="e6c1c-239">この2つの <xref:System.Char> オブジェクトには、最初の (高) サロゲートの場合は U + D800 から U + DBFF に、2番目の (low) サロゲートの場合は u + DC00 から u + DFFF までの範囲のコード単位を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-239">These two <xref:System.Char> objects must have code units that range from U+D800 to U+DBFF for the first (high) surrogate and from U+DC00 to U+DFFF for the second (low) surrogate.</span></span> <span data-ttu-id="e6c1c-240">サロゲートペアは、UTF-16 エンコードでのみサポートされています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-240">Surrogate pairs are supported only by UTF-16 encoding.</span></span> <span data-ttu-id="e6c1c-241">このメソッドでは、utf-16 サロゲートペアによって表される文字を、32 UTF-8 エンコーディングを使用して文字に変換できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-241">This method allows a character represented by a UTF-16 surrogate pair to be converted to a character using UTF-32 encoding.</span></span>



## Examples
 <span data-ttu-id="e6c1c-242">次のコード例は、<xref:System.Char.ConvertToUtf32%2A> メソッドと <xref:System.Char.ConvertFromUtf32%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-242">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>

 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-243"><paramref name="highSurrogate" /> が U+D800 から U+DBFF までの範囲内にないか、または <paramref name="lowSurrogate" /> が U+DC00 から U+DFFF までの範囲内にありません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-243"><paramref name="highSurrogate" /> is not in the range U+D800 through U+DBFF, or <paramref name="lowSurrogate" /> is not in the range U+DC00 through U+DFFF.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUtf32 (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ConvertToUtf32(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member ConvertToUtf32 : string * int -&gt; int" Usage="System.char.ConvertToUtf32 (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-244">文字またはサロゲート ペアを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-244">A string that contains a character or surrogate pair.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-245"><paramref name="s" /> 内の文字またはサロゲート ペアのインデックス位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-245">The index position of the character or surrogate pair in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-246">文字列中の指定位置にある UTF-16 エンコード文字またはサロゲート ペアの値を、Unicode コード ポイントに変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-246">Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-247"><paramref name="s" /> パラメーター内の、<paramref name="index" /> パラメーターによって指定された位置にある文字またはサロゲート ペアが表す、21 ビットの Unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-247">The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <paramref name="s" /> parameter specified by the <paramref name="index" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-248">文字またはサロゲートペアを21ビットの Unicode コードポイントに変換するには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-248">Use this method to convert a character or surrogate pair into a 21-bit Unicode code point.</span></span> <span data-ttu-id="e6c1c-249">UTF-16 データを 32 UTF-8 データに変換するには、<xref:System.Text.UTF32Encoding?displayProperty=nameWithType> クラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-249">To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class.</span></span>



## Examples
 <span data-ttu-id="e6c1c-250">次のコード例は、<xref:System.Char.ConvertToUtf32%2A> メソッドと <xref:System.Char.ConvertFromUtf32%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-250">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>

 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-251"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-251"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-252"><paramref name="index" /> が <paramref name="s" /> 内の位置ではありません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-252"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e6c1c-253">指定されたインデックスの位置には、サロゲート ペアが含まれています。ペアの最初の文字が有効な上位サロゲートではないか、または 2 番目の文字が有効な下位サロゲートではありません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-253">The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-254">対象のインスタンスが、指定したオブジェクトまたは <see cref="T:System.Char" /> 値に等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-254">Returns a value that indicates whether this instance is equal to a specified object or <see cref="T:System.Char" /> value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (char obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(char obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(char obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : char -&gt; bool" Usage="char.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e6c1c-255">このインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-255">An object to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="e6c1c-256">このインスタンスが、指定した <see cref="T:System.Char" /> オブジェクトと同一であるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-256">Returns a value that indicates whether this instance is equal to the specified <see cref="T:System.Char" /> object.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-257"><see langword="true" /> パラメーターがこのインスタンスの値と等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-257"><see langword="true" /> if the <paramref name="obj" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-258">このメソッドは <xref:System.IEquatable%601?displayProperty=nameWithType> インターフェイスを実装し、`obj` パラメーターのボックスを解除する必要がないため、<xref:System.Char.Equals%28System.Object%29?displayProperty=nameWithType> よりもわずかにパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-258">This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.Char.Equals%28System.Object%29?displayProperty=nameWithType> because it does not need to unbox the `obj` parameter.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="char.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e6c1c-259">このインスタンスと比較するオブジェクト、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-259">An object to compare with this instance or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-260">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-260">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-261"><see langword="true" /> が <paramref name="obj" /> のインスタンスで、このインスタンスの値に等しい場合は <see cref="T:System.Char" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-261"><see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Char" /> and equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-262">このメソッドによって実行される比較は、このインスタンスと `obj`のエンコードされた値に基づいており、必ずしも辞書式の特性であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-262">The comparison performed by this method is based on the encoded values of this instance and `obj`, not necessarily their lexicographical characteristics.</span></span>



## Examples
 <span data-ttu-id="e6c1c-263">次のコード例は、<xref:System.Char.Equals%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-263">The following code example demonstrates <xref:System.Char.Equals%2A>.</span></span>

 [!code-cpp[System.Char.Equals#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Equals/CPP/equals.cpp#20)]
 [!code-csharp[System.Char.Equals#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Equals/CS/equals.cs#20)]
 [!code-vb[System.Char.Equals#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Equals/VB/equals.vb#20)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="char.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e6c1c-264">このインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-264">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-265">32 ビットの符号付き整数のハッシュ コードです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-265">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-266">指定された Unicode 文字の数字を倍精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-266">Converts a specified numeric Unicode character to a double-precision floating-point number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (c As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char c);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.char.GetNumericValue c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-267">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-267">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="e6c1c-268">指定された Unicode の数字を倍精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-268">Converts the specified numeric Unicode character to a double-precision floating point number.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-269">この文字が数字を表す場合は <paramref name="c" /> の数値。それ以外の場合は -1.0。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-269">The numeric value of <paramref name="c" /> if that character represents a number; otherwise, -1.0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-270">`c` パラメーターは、数値の <xref:System.Char> 表現である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-270">The `c` parameter must be the <xref:System.Char> representation of a numeric value.</span></span> <span data-ttu-id="e6c1c-271">たとえば、`c` が "5" の場合、戻り値は5になります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-271">For example, if `c` is "5", the return value is 5.</span></span> <span data-ttu-id="e6c1c-272">ただし、`c` が "z" の場合、戻り値は-1.0 です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-272">However, if `c` is "z", the return value is -1.0.</span></span>

 <span data-ttu-id="e6c1c-273">文字は、次のいずれかの <xref:System.Globalization.UnicodeCategory> カテゴリ (`DecimalDigitNumber`、`LetterNumber`、または `OtherNumber`) のメンバーである場合にのみ、関連付けられた数値を持ちます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-273">A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.</span></span>

 <span data-ttu-id="e6c1c-274"><xref:System.Char.GetNumericValue%2A> メソッドは、`c` が1つの言語に対応し、その文字が10進数に変換できるかどうかをチェックします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-274">The <xref:System.Char.GetNumericValue%2A> method assumes that `c` corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit.</span></span> <span data-ttu-id="e6c1c-275">ただし、Unicode 規格の一部の数値は、サロゲートペアを形成する2つの <xref:System.Char> オブジェクトによって表されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-275">However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair.</span></span> <span data-ttu-id="e6c1c-276">たとえば、Aegean ナンバリングシステムは、コードポイント U + 10107 から U + 10133 で構成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-276">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="e6c1c-277">次の例では、<xref:System.Char.ConvertFromUtf32%2A> メソッドを使用して、AEGEAN NUMBER ONE を表す文字列をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-277">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="e6c1c-278">この例の出力結果が示すように、<xref:System.Char.GetNumericValue%28System.Char%29> メソッドは、この文字の上位サロゲートまたは下位サロゲートのいずれかが渡された場合に-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-278">As the output from the example shows, the <xref:System.Char.GetNumericValue%28System.Char%29> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.</span></span>

 [!code-csharp[System.Char.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#2)]
 [!code-vb[System.Char.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#2)]



## Examples
 <span data-ttu-id="e6c1c-279">次の例は <xref:System.Char.GetNumericValue%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-279">The following example demonstrates <xref:System.Char.GetNumericValue%2A>.</span></span>

 [!code-cpp[System.Char.GetNumericValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.GetNumericValue(System.Text.Rune)" />
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.char.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-280"><see cref="T:System.String" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-280">A <see cref="T:System.String" />.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-281"><paramref name="s" /> 内の文字位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-281">The character position in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-282">指定した文字列の指定位置にある Unicode の数字を倍精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-282">Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-283">この文字が数字の場合は、<paramref name="index" /> の <paramref name="s" /> の位置のこの文字の数値。それ以外の場合は -1。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-283">The numeric value of the character at position <paramref name="index" /> in <paramref name="s" /> if that character represents a number; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-284">`s` パラメーターは、数値の文字列形式である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-284">The `s` parameter must be the string representation of a numeric value.</span></span> <span data-ttu-id="e6c1c-285">たとえば、`s` の `index` 位置にある文字が "5" の場合、戻り値は5になります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-285">For example, if the character at position `index` in `s` is "5", the return value is 5.</span></span> <span data-ttu-id="e6c1c-286">ただし、`s` の `index` 位置にある文字が "z" の場合、戻り値は-1 になります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-286">However, if the character at position `index` in `s` is "z", the return value is -1.</span></span>

 <span data-ttu-id="e6c1c-287">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-287">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="e6c1c-288">文字は、次のいずれかの <xref:System.Globalization.UnicodeCategory> カテゴリ (`DecimalDigitNumber`、`LetterNumber`、または `OtherNumber`) のメンバーである場合にのみ、関連付けられた数値を持ちます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-288">A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.</span></span>

 <span data-ttu-id="e6c1c-289">`index` 位置にある <xref:System.Char> オブジェクトが有効なサロゲートペアの最初の文字である場合、<xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> メソッドは、サロゲートペアが数字を形成するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-289">If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit.</span></span> <span data-ttu-id="e6c1c-290">たとえば、Aegean ナンバリングシステムは、コードポイント U + 10107 から U + 10133 で構成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-290">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="e6c1c-291">次の例では、<xref:System.Char.ConvertFromUtf32%2A> メソッドを使用して、各 Aegean 番号を表す文字列をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-291">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents each Aegean number.</span></span> <span data-ttu-id="e6c1c-292">この例の出力が示すように、Aegean number の上位サロゲートが渡された場合、<xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> メソッドは正しい数値を返します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-292">As the output from the example shows, the <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> method returns the correct numeric value if it is passed the high surrogate of an Aegean number.</span></span> <span data-ttu-id="e6c1c-293">ただし、下位サロゲートを渡すと、下位サロゲートのみが分離され、-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-293">However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.</span></span>

 [!code-csharp[System.Char.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#3)]
 [!code-vb[System.Char.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#3)]



## Examples
 <span data-ttu-id="e6c1c-294">次のコード例は、<xref:System.Char.GetNumericValue%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-294">The following code example demonstrates <xref:System.Char.GetNumericValue%2A>.</span></span>

 [!code-cpp[System.Char.GetNumericValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-295"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-295"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-296"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-296"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="char.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e6c1c-297"><see cref="T:System.TypeCode" /> 値型の <see cref="T:System.Char" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-297">Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-298">列挙型定数 <see cref="F:System.TypeCode.Char" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-298">The enumerated constant, <see cref="F:System.TypeCode.Char" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-299">Unicode 文字を <see cref="T:System.Globalization.UnicodeCategory" /> 値のいずれかで識別されるグループに分類します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-299">Categorizes a Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (c As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char c);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.char.GetUnicodeCategory c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-300">分類する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-300">The Unicode character to categorize.</span></span></param>
        <summary><span data-ttu-id="e6c1c-301">指定された Unicode 文字を <see cref="T:System.Globalization.UnicodeCategory" /> 値のいずれかで識別されるグループに分類します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-301">Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-302"><see cref="T:System.Globalization.UnicodeCategory" /> が含まれているグループを識別する <paramref name="c" /> 値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-302">A <see cref="T:System.Globalization.UnicodeCategory" /> value that identifies the group that contains <paramref name="c" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-303"><xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> メソッドは、特定の文字がパラメーターとして渡された場合、必ずしも <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> メソッドと同じ <xref:System.Globalization.UnicodeCategory> 値を返しません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-303">The <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method when it is passed a particular character as a parameter.</span></span> <span data-ttu-id="e6c1c-304"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>メソッドは現在のバージョンの Unicode 標準を反映するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-304">The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method is designed to reflect the current version of the Unicode standard.</span></span> <span data-ttu-id="e6c1c-305">これに対し、<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> メソッドは通常、Unicode 標準の現在のバージョンを反映していますが、以前のバージョンの標準に基づいて文字のカテゴリを返すことがあります。または、旧バージョンとの互換性を維持するために、現在の標準とは異なるカテゴリを返す場合があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-305">In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility.</span></span> <span data-ttu-id="e6c1c-306">そのため、<xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>ではなく <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> メソッドを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-306">As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method instead of <xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="e6c1c-307">[!INCLUDE[net_v462](~/includes/net-v462-md.md)]以降では、unicode[標準バージョン 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)に基づいて unicode 文字が分類されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-307">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unicode Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="e6c1c-308">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] から [!INCLUDE[net_v461](~/includes/net-v461-md.md)]に .NET Framework のバージョンでは、 [Unicode 標準バージョン 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)に基づいて分類されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-308">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unicode Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>



## Examples
 <span data-ttu-id="e6c1c-309">次のコード例は、<xref:System.Char.GetUnicodeCategory%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-309">The following code example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.</span></span>

 [!code-cpp[System.Char.GetUnicodeCategory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)" />
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.char.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-310"><see cref="T:System.String" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-310">A <see cref="T:System.String" />.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-311"><paramref name="s" /> 内の文字位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-311">The character position in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-312">指定した文字列の指定位置にある文字を <see cref="T:System.Globalization.UnicodeCategory" /> 値のいずれかで識別されるグループに分類します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-312">Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-313"><see cref="T:System.Globalization.UnicodeCategory" /> の中で <paramref name="index" /> の位置の文字が含まれるグループを識別する <paramref name="s" /> 列挙定数。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-313">A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the group that contains the character at position <paramref name="index" /> in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-314">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-314">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="e6c1c-315"><xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> メソッドは、特定の文字がパラメーターとして渡された場合、必ずしも <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> メソッドと同じ <xref:System.Globalization.UnicodeCategory> 値を返しません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-315">The <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method when it is passed a particular character as a parameter.</span></span> <span data-ttu-id="e6c1c-316"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>メソッドは現在のバージョンの Unicode 標準を反映するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-316">The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method is designed to reflect the current version of the Unicode standard.</span></span> <span data-ttu-id="e6c1c-317">これに対し、<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> メソッドは通常、Unicode 標準の現在のバージョンを反映していますが、以前のバージョンの標準に基づいて文字のカテゴリを返すことがあります。または、旧バージョンとの互換性を維持するために、現在の標準とは異なるカテゴリを返す場合があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-317">In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility.</span></span> <span data-ttu-id="e6c1c-318">そのため、<xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>ではなく <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> メソッドを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-318">As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method instead of <xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="e6c1c-319">[!INCLUDE[net_v462](~/includes/net-v462-md.md)]以降では、unicode[標準バージョン 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)に基づいて unicode 文字が分類されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-319">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unicode Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="e6c1c-320">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] から [!INCLUDE[net_v461](~/includes/net-v461-md.md)]に .NET Framework のバージョンでは、 [Unicode 標準バージョン 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)に基づいて分類されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-320">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unicode Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>



## Examples
 <span data-ttu-id="e6c1c-321">次の例は <xref:System.Char.GetUnicodeCategory%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-321">The following example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.</span></span>

 [!code-cpp[System.Char.GetUnicodeCategory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-322"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-322"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-323"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-323"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsControl">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-324">指定した Unicode 文字が、制御文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-324">Indicates whether a specified Unicode character is categorized as a control character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-325">制御文字は、書式設定や、ACK、BEL、CR、FF、LF、VT などの印刷以外の文字です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-325">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="e6c1c-326">Unicode 規格では、\U0000 から \U001F、\U007F で、および \U0080 から \U009F にコードポイントが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-326">The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="e6c1c-327">Unicode 規格によれば、これらの値は、使用がアプリケーションによって定義されていない限り、制御文字として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-327">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="e6c1c-328">有効な制御文字は <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-328">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsControl(System.Text.Rune)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(char c);" />
      <MemberSignature Language="F#" Value="static member IsControl : char -&gt; bool" Usage="System.char.IsControl c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-329">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-329">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-330">指定した Unicode 文字が、制御文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-330">Indicates whether the specified Unicode character is categorized as a control character.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-331"><see langword="true" /> が制御文字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-331"><see langword="true" /> if <paramref name="c" /> is a control character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[


## Examples
 <span data-ttu-id="e6c1c-332">次の例では、各制御文字の Unicode コードポイントを一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-332">The following example lists the Unicode code point of each of the control characters.</span></span>

 [!code-cpp[System.Char.IsControl#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol1.cpp#1)]
 [!code-csharp[System.Char.IsControl#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl1.cs#1)]
 [!code-vb[System.Char.IsControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl1.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsControl : string * int -&gt; bool" Usage="System.char.IsControl (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-333">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-333">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-334"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-334">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-335">指定した文字列の指定位置にある文字が制御文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-335">Indicates whether the character at the specified position in a specified string is categorized as a control character.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-336"><see langword="true" /> の <paramref name="index" /> の位置にある文字が制御文字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-336"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a control character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[


## Examples
 <span data-ttu-id="e6c1c-337">次の例では、文字列内の文字を列挙し、が制御文字かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-337">The following example enumerates the characters in a string and determines whether any are control characters.</span></span>

 [!code-cpp[System.Char.IsControl#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol2.cpp#2)]
 [!code-csharp[System.Char.IsControl#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl2.cs#2)]
 [!code-vb[System.Char.IsControl#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl2.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-338"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-338"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-339"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-339"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-340">Unicode 文字が 10 進数の数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-340">Indicates whether a Unicode character is categorized as a decimal digit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-341">有効な数字は <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-341">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(char c);" />
      <MemberSignature Language="F#" Value="static member IsDigit : char -&gt; bool" Usage="System.char.IsDigit c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-342">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-342">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-343">指定した Unicode 文字が、10 進数の数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-343">Indicates whether the specified Unicode character is categorized as a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-344"><see langword="true" /> が 10 進数の数字の場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-344"><see langword="true" /> if <paramref name="c" /> is a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-345">このメソッドは、<xref:System.Char> が基数10の数字であるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-345">This method determines whether a <xref:System.Char> is a radix-10 digit.</span></span> <span data-ttu-id="e6c1c-346">これは、`Char` が任意の数値 Unicode カテゴリであるかどうかを判断する <xref:System.Char.IsNumber%2A>とは対照的です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-346">This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a `Char` is of any numeric Unicode category.</span></span> <span data-ttu-id="e6c1c-347">数値には、分数、添字、上付き文字、ローマ数字、通貨分子、encircled 番号、スクリプト固有の数字などの文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-347">Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</span></span>

 <span data-ttu-id="e6c1c-348">有効な数字は <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-348">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>



## Examples
 <span data-ttu-id="e6c1c-349">次のコード例は、<xref:System.Char.IsDigit%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-349">The following code example demonstrates <xref:System.Char.IsDigit%2A>.</span></span>

 [!code-cpp[System.Char.IsDigit#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp#4)]
 [!code-csharp[System.Char.IsDigit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs#4)]
 [!code-vb[System.Char.IsDigit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb#4)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsDigit(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsDigit : string * int -&gt; bool" Usage="System.char.IsDigit (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-350">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-350">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-351"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-351">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-352">指定した文字列の指定位置にある文字が 10 進数の数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-352">Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-353"><see langword="true" /> の <paramref name="index" /> の位置にある文字が 10 進数の数字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e6c1c-353"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-354">このメソッドは、<xref:System.Char> が基数10の数字であるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-354">This method determines whether a <xref:System.Char> is a radix-10 digit.</span></span> <span data-ttu-id="e6c1c-355">これは、<xref:System.Char> が任意の数値 Unicode カテゴリであるかどうかを判断する <xref:System.Char.IsNumber%2A>とは対照的です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-355">This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="e6c1c-356">数値には、分数、添字、上付き文字、ローマ数字、通貨分子、encircled 番号、スクリプト固有の数字などの文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-356">Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</span></span>

 <span data-ttu-id="e6c1c-357">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-357">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="e6c1c-358">有効な数字は <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-358">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>



## Examples
 <span data-ttu-id="e6c1c-359">次のコード例は、<xref:System.Char.IsDigit%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-359">The following code example demonstrates <xref:System.Char.IsDigit%2A>.</span></span>

 [!code-cpp[System.Char.IsDigit#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp#4)]
 [!code-csharp[System.Char.IsDigit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs#4)]
 [!code-vb[System.Char.IsDigit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-360"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-360"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-361"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-361"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsHighSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-362">指定された <see cref="T:System.Char" /> オブジェクトが上位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-362">Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHighSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHighSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsHighSurrogate : char -&gt; bool" Usage="System.char.IsHighSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-363">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-363">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-364">指定された <see cref="T:System.Char" /> オブジェクトが上位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-364">Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-365"><see langword="true" /> パラメーターの数値が U+D800 から U+DBFF の範囲内にある場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-365"><see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-366">UTF-16 エンコードでは、16ビットコードポイントを使用して1つの文字を表現するだけでなく、サロゲートペアと呼ばれる 2 16 ビットコードポイントを使用して抽象文字を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-366">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="e6c1c-367">このペアの最初の要素は、上位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-367">The first element in this pair is the high surrogate.</span></span> <span data-ttu-id="e6c1c-368">コードポイントは、U + D800 から U + DBFF までの範囲で指定できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-368">Its code point can range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="e6c1c-369">個々のサロゲートは、独自のものを解釈しません。これは、サロゲートペアの一部として使用されている場合にのみ意味があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-369">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>



## Examples
 <span data-ttu-id="e6c1c-370">次のコード例は、<xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLowSurrogate%2A>、および <xref:System.Char.IsSurrogatePair%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-370">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>

 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Rune" />
      </Docs>
    </Member>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHighSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHighSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsHighSurrogate : string * int -&gt; bool" Usage="System.char.IsHighSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-371">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-371">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-372"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-372">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-373">文字列中の指定された位置にある <see cref="T:System.Char" /> オブジェクトが、上位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-373">Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a high surrogate.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-374"><see langword="true" /> パラメーターに指定された文字の数値が U+D800 から U+DBFF の範囲内にある場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-374"><see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-375">`index` パラメーターは0から始まります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-375">The `index` parameter is zero-based.</span></span>

 <span data-ttu-id="e6c1c-376">UTF-16 エンコードでは、16ビットコードポイントを使用して1つの文字を表現するだけでなく、サロゲートペアと呼ばれる 2 16 ビットコードポイントを使用して抽象文字を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-376">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="e6c1c-377">このペアの最初の要素は、上位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-377">The first element in this pair is the high surrogate.</span></span> <span data-ttu-id="e6c1c-378">コードポイントは、U + D800 から U + DBFF までの範囲で指定できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-378">Its code point can range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="e6c1c-379">個々のサロゲートは、独自のものを解釈しません。これは、サロゲートペアの一部として使用されている場合にのみ意味があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-379">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>



## Examples
 <span data-ttu-id="e6c1c-380">次のコード例は、<xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLowSurrogate%2A>、および <xref:System.Char.IsSurrogatePair%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-380">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>

 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-381"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-381"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-382"><paramref name="index" /> が <paramref name="s" /> 内の位置ではありません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-382"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetter">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-383">Unicode 文字が Unicode の文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-383">Indicates whether a Unicode character is categorized as a Unicode letter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-384">このメソッドは、<xref:System.Char> が Unicode 文字の任意のカテゴリのメンバーであるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-384">This method determines whether a <xref:System.Char> is a member of any category of Unicode letter.</span></span> <span data-ttu-id="e6c1c-385">Unicode 文字には、次のようなものがあります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-385">Unicode letters include the following:</span></span>

-   <span data-ttu-id="e6c1c-386">U + 0041 という (ラテン大文字 A) から U + 005A (ラテン大文字 Z)、または U + 0400 (キリル文字の大文字の IE) から u + 042F (キリル文字 YA) までの大文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-386">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="e6c1c-387">これらの文字は <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-387">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="e6c1c-388">U + 0061 (ラテン小文字 A) から U + 007A (ラテン小文字 Z) または U + 03AC (ギリシャ語の小文字のアルファベットと TONOS を含む) などの小文字。 U + 03AC (ギリシャ文字オメガと TONOS) を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-388">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="e6c1c-389">これらの文字は <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-389">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="e6c1c-390">タイトルの文字 (U + 01C5 (小文字 Z を含むラテン大文字 D) または U + 1FFC (ギリシャ文字のオメガと PROSGEGRAMMENI) など)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-390">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="e6c1c-391">これらの文字は <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-391">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="e6c1c-392">U + 02B0 (修飾子文字が反転された GLOTTAL STOP)、u + 1D2C (修飾子文字の大文字 A) から u + 1D2c (修飾子文字の小さいカイ) までの修飾子 (U + 02B0 (修飾文字 s H) など)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-392">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="e6c1c-393">これらの文字は <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-393">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="e6c1c-394">U + 05D0 (ヘブライ文字の ALEF) から u + 05D0 (ヘブライ語文字の ALEF)、U + 0621 (アラビア文字の HAMZA)、u + 063A (アラビア文字の GHAIN)、または u + 4E00\<(>) から u + 9FC3 (\<CJK 漢字、Last >) までのその他の文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-394">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="e6c1c-395">これらの文字は <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-395">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(char c);" />
      <MemberSignature Language="F#" Value="static member IsLetter : char -&gt; bool" Usage="System.char.IsLetter c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-396">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-396">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-397">指定した Unicode 文字が Unicode 文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-397">Indicates whether the specified Unicode character is categorized as a Unicode letter.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-398"><see langword="true" /> が文字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-398"><see langword="true" /> if <paramref name="c" /> is a letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-399">このメソッドは、<xref:System.Char> が Unicode 文字の任意のカテゴリのメンバーであるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-399">This method determines whether a <xref:System.Char> is a member of any category of Unicode letter.</span></span> <span data-ttu-id="e6c1c-400">Unicode 文字には、次のようなものがあります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-400">Unicode letters include the following:</span></span>

-   <span data-ttu-id="e6c1c-401">U + 0041 という (ラテン大文字 A) から U + 005A (ラテン大文字 Z)、または U + 0400 (キリル文字の大文字の IE) から u + 042F (キリル文字 YA) までの大文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-401">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="e6c1c-402">これらの文字は <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-402">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="e6c1c-403">U + 0061 (ラテン小文字 A) から U + 007A (ラテン小文字 Z) または U + 03AC (ギリシャ語の小文字のアルファベットと TONOS を含む) などの小文字。 U + 03AC (ギリシャ文字オメガと TONOS) を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-403">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="e6c1c-404">これらの文字は <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-404">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="e6c1c-405">タイトルの文字 (U + 01C5 (小文字 Z を含むラテン大文字 D) または U + 1FFC (ギリシャ文字のオメガと PROSGEGRAMMENI) など)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-405">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="e6c1c-406">これらの文字は <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-406">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="e6c1c-407">U + 02B0 (修飾子文字が反転された GLOTTAL STOP)、u + 1D2C (修飾子文字の大文字 A) から u + 1D2c (修飾子文字の小さいカイ) までの修飾子 (U + 02B0 (修飾文字 s H) など)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-407">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="e6c1c-408">これらの文字は <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-408">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="e6c1c-409">U + 05D0 (ヘブライ文字の ALEF) から u + 05D0 (ヘブライ語文字の ALEF)、U + 0621 (アラビア文字の HAMZA)、u + 063A (アラビア文字の GHAIN)、または u + 4E00\<(>) から u + 9FC3 (\<CJK 漢字、Last >) までのその他の文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-409">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="e6c1c-410">これらの文字は <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-410">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>



## Examples
 <span data-ttu-id="e6c1c-411">次のコード例は、<xref:System.Char.IsLetter%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-411">The following code example demonstrates <xref:System.Char.IsLetter%2A>.</span></span>

 [!code-cpp[System.Char.IsLetter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsLetter(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLetter : string * int -&gt; bool" Usage="System.char.IsLetter (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-412">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-412">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-413"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-413">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-414">指定した文字列の指定位置にある文字が、Unicode 文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-414">Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-415"><see langword="true" /> の <paramref name="index" /> の位置にある文字が文字である場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-415"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-416">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-416">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="e6c1c-417">このメソッドは、文字列内の指定したインデックス位置にある文字が Unicode 文字の任意のカテゴリのメンバーであるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-417">This method determines whether the character at a specified index position in a string is a member of any category of Unicode letter.</span></span> <span data-ttu-id="e6c1c-418">Unicode 文字には、次のようなものがあります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-418">Unicode letters include the following:</span></span>

-   <span data-ttu-id="e6c1c-419">U + 0041 という (ラテン大文字 A) から U + 005A (ラテン大文字 Z)、または U + 0400 (キリル文字の大文字の IE) から u + 042F (キリル文字 YA) までの大文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-419">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="e6c1c-420">これらの文字は <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-420">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="e6c1c-421">U + 0061 (ラテン小文字 A) から U + 007A (ラテン小文字 Z) または U + 03AC (ギリシャ語の小文字のアルファベットと TONOS を含む) などの小文字。 U + 03AC (ギリシャ文字オメガと TONOS) を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-421">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="e6c1c-422">これらの文字は <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-422">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="e6c1c-423">タイトルの文字 (U + 01C5 (小文字 Z を含むラテン大文字 D) または U + 1FFC (ギリシャ文字のオメガと PROSGEGRAMMENI) など)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-423">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="e6c1c-424">これらの文字は <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-424">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="e6c1c-425">U + 02B0 (修飾子文字が反転された GLOTTAL STOP)、u + 1D2C (修飾子文字の大文字 A) から u + 1D2c (修飾子文字の小さいカイ) までの修飾子 (U + 02B0 (修飾文字 s H) など)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-425">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="e6c1c-426">これらの文字は <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-426">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>

-   <span data-ttu-id="e6c1c-427">U + 05D0 (ヘブライ文字の ALEF) から u + 05D0 (ヘブライ語文字の ALEF)、U + 0621 (アラビア文字の HAMZA)、u + 063A (アラビア文字の GHAIN)、または u + 4E00\<(>) から u + 9FC3 (\<CJK 漢字、Last >) までのその他の文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-427">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="e6c1c-428">これらの文字は <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-428">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>



## Examples
 <span data-ttu-id="e6c1c-429">次のコード例は、<xref:System.Char.IsLetter%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-429">The following code example demonstrates <xref:System.Char.IsLetter%2A>.</span></span>

 [!code-cpp[System.Char.IsLetter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-430"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-430"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-431"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-431"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetterOrDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-432">Unicode 文字が文字または 10 進数の数字であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-432">Indicates whether a Unicode character is categorized as a letter or a decimal digit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-433">有効な文字と小数点以下の桁数は <xref:System.Globalization.UnicodeCategory>の次のカテゴリのメンバーです: `UppercaseLetter`、`LowercaseLetter`、`TitlecaseLetter`、`ModifierLetter`、`OtherLetter`、または `DecimalDigitNumber`。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-433">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(char c);" />
      <MemberSignature Language="F#" Value="static member IsLetterOrDigit : char -&gt; bool" Usage="System.char.IsLetterOrDigit c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-434">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-434">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-435">指定した Unicode 文字が文字または 10 進数の数字なのかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-435">Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-436"><see langword="true" /> が文字または 10 進数の数字の場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-436"><see langword="true" /> if <paramref name="c" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-437">有効な文字と小数点以下の桁数は <xref:System.Globalization.UnicodeCategory>の次のカテゴリのメンバーです: `UppercaseLetter`、`LowercaseLetter`、`TitlecaseLetter`、`ModifierLetter`、`OtherLetter`、または `DecimalDigitNumber`。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-437">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>



## Examples
 <span data-ttu-id="e6c1c-438">次のコード例は、<xref:System.Char.IsLetterOrDigit%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-438">The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.</span></span>

 [!code-cpp[System.Char.IsLetterOrDigit#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsLetterOrDigit(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLetterOrDigit : string * int -&gt; bool" Usage="System.char.IsLetterOrDigit (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-439">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-439">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-440"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-440">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-441">指定した文字列の指定位置にある文字が文字または 10 進数の数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-441">Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-442"><see langword="true" /> の <paramref name="index" /> の位置にある文字が文字または 10 進数の数字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-442"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-443">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-443">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="e6c1c-444">有効な文字と小数点以下の桁数は <xref:System.Globalization.UnicodeCategory>の次のカテゴリのメンバーです: `UppercaseLetter`、`LowercaseLetter`、`TitlecaseLetter`、`ModifierLetter`、`OtherLetter`、または `DecimalDigitNumber`。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-444">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>



## Examples
 <span data-ttu-id="e6c1c-445">次のコード例は、<xref:System.Char.IsLetterOrDigit%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-445">The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.</span></span>

 [!code-cpp[System.Char.IsLetterOrDigit#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-446"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-446"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-447"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-447"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-448">Unicode 文字が小文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-448">Indicates whether a Unicode character is categorized as a lowercase letter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(char c);" />
      <MemberSignature Language="F#" Value="static member IsLower : char -&gt; bool" Usage="System.char.IsLower c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-449">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-449">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-450">指定した Unicode 文字が小文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-450">Indicates whether the specified Unicode character is categorized as a lowercase letter.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-451"><see langword="true" /> が小文字の場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-451"><see langword="true" /> if <paramref name="c" /> is a lowercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-452">有効な小文字は <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`の次のカテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-452">Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.</span></span>



## Examples
 <span data-ttu-id="e6c1c-453">次のコード例は、<xref:System.Char.IsLower%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-453">The following code example demonstrates <xref:System.Char.IsLower%2A>.</span></span>

 [!code-cpp[System.Char.IsLower#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsLower(System.Text.Rune)" />
        <altmember cref="M:System.Text.Rune.IsUpper(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLower : string * int -&gt; bool" Usage="System.char.IsLower (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-454">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-454">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-455"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-455">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-456">指定した文字列の指定位置にある文字が、小文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-456">Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-457"><see langword="true" /> の <paramref name="index" /> の位置にある文字が小文字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-457"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a lowercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-458">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-458">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="e6c1c-459">有効な小文字は <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`の次のカテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-459">Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.</span></span>



## Examples
 <span data-ttu-id="e6c1c-460">次のコード例は、<xref:System.Char.IsLower%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-460">The following code example demonstrates <xref:System.Char.IsLower%2A>.</span></span>

 [!code-cpp[System.Char.IsLower#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-461"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-461"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-462"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-462"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLowSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-463">指定された <see cref="T:System.Char" /> オブジェクトが下位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-463">Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLowSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLowSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsLowSurrogate : char -&gt; bool" Usage="System.char.IsLowSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-464">評価する文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-464">The character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-465">指定された <see cref="T:System.Char" /> オブジェクトが下位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-465">Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-466"><see langword="true" /> パラメーターの数値が U+DC00 から U+DFFF の範囲内にある場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-466"><see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-467">UTF-16 エンコードでは、16ビットコードポイントを使用して1つの文字を表現するだけでなく、サロゲートペアと呼ばれる 2 16 ビットコードポイントを使用して抽象文字を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-467">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="e6c1c-468">このペアの2番目の要素は下位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-468">The second element in this pair is the low surrogate.</span></span> <span data-ttu-id="e6c1c-469">コードポイントは、U + DC00 から U + DFFF までの範囲で指定できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-469">Its code point can range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="e6c1c-470">個々のサロゲートは、独自のものを解釈しません。これは、サロゲートペアの一部として使用されている場合にのみ意味があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-470">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>



## Examples
 <span data-ttu-id="e6c1c-471">次のコード例は、<xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLowSurrogate%2A>、および <xref:System.Char.IsSurrogatePair%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-471">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>

 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Rune" />
      </Docs>
    </Member>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLowSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLowSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLowSurrogate : string * int -&gt; bool" Usage="System.char.IsLowSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-472">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-472">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-473"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-473">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-474">文字列のうち、指定された位置にある <see cref="T:System.Char" /> オブジェクトが、下位サロゲートであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-474">Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a low surrogate.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-475"><see langword="true" /> パラメーターに指定された文字の数値が U+DC00 から U+DFFF の範囲内にある場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-475"><see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-476">`index` パラメーターは0から始まります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-476">The `index` parameter is zero-based.</span></span>

 <span data-ttu-id="e6c1c-477">UTF-16 エンコードでは、16ビットコードポイントを使用して1つの文字を表現するだけでなく、サロゲートペアと呼ばれる 2 16 ビットコードポイントを使用して抽象文字を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-477">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="e6c1c-478">このペアの2番目の要素は下位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-478">The second element in this pair is the low surrogate.</span></span> <span data-ttu-id="e6c1c-479">コードポイントは、U + DC00 から U + DFFF までの範囲で指定できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-479">Its code point can range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="e6c1c-480">個々のサロゲートは、独自のものを解釈しません。これは、サロゲートペアの一部として使用されている場合にのみ意味があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-480">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>



## Examples
 <span data-ttu-id="e6c1c-481">次のコード例は、<xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLowSurrogate%2A>、および <xref:System.Char.IsSurrogatePair%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-481">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>

 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-482"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-482"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-483"><paramref name="index" /> が <paramref name="s" /> 内の位置ではありません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-483"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
     </Docs>
    </Member>
    <MemberGroup MemberName="IsNumber">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-484">Unicode 文字が数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-484">Indicates whether a Unicode character is categorized as a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(char c);" />
      <MemberSignature Language="F#" Value="static member IsNumber : char -&gt; bool" Usage="System.char.IsNumber c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-485">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-485">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-486">指定された Unicode 文字が数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-486">Indicates whether the specified Unicode character is categorized as a number.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-487"><see langword="true" /> が数字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-487"><see langword="true" /> if <paramref name="c" /> is a number; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-488">このメソッドは、<xref:System.Char> が任意の数値 Unicode カテゴリであるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-488">This method determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="e6c1c-489">数字に加え、数字、分数、添字、上付き文字、ローマ数字、通貨分子、encircled 番号などが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-489">In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers.</span></span> <span data-ttu-id="e6c1c-490">このメソッドは、<xref:System.Char> が基数10の数字であるかどうかを判断する <xref:System.Char.IsDigit%2A> メソッドとは対照的です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-490">This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.</span></span>

> [!IMPORTANT]
>  <span data-ttu-id="e6c1c-491"><xref:System.Char.IsNumber%28System.Char%29> メソッドは、文字列が数字で構成されているかどうかを判断するためのものではありません (たとえば、文字列内の各文字に対してメソッドを呼び出すことによって)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-491">The <xref:System.Char.IsNumber%28System.Char%29> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string).</span></span> <span data-ttu-id="e6c1c-492">文字列が数値で構成されているかどうかを判断するには、`TryParse` メソッドのいずれかのオーバーロードを呼び出します (<xref:System.Int32.TryParse%2A?displayProperty=nameWithType>、整数型または浮動小数点型の <xref:System.Double.TryParse%2A?displayProperty=nameWithType> など)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-492">To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> or <xref:System.Double.TryParse%2A?displayProperty=nameWithType> of an integral or floating point type.</span></span>

 <span data-ttu-id="e6c1c-493">有効な数値は、<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>、<xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>、または <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-493">Valid numbers are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, or <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> category.</span></span>

 <span data-ttu-id="e6c1c-494"><xref:System.Char.IsNumber%28System.Char%29> メソッドは、`c` が1つの言語の文字に対応していることを前提としており、その文字が数値を表しているかどうかをチェックします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-494">The <xref:System.Char.IsNumber%28System.Char%29> method assumes that `c` corresponds to a single linguistic character and checks whether that character represents a number.</span></span> <span data-ttu-id="e6c1c-495">ただし、Unicode 規格の一部の数値は、サロゲートペアを形成する2つの <xref:System.Char> オブジェクトによって表されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-495">However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair.</span></span> <span data-ttu-id="e6c1c-496">たとえば、Aegean ナンバリングシステムは、コードポイント U + 10107 から U + 10133 で構成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-496">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="e6c1c-497">次の例では、<xref:System.Char.ConvertFromUtf32%2A> メソッドを使用して、AEGEAN NUMBER ONE を表す文字列をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-497">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="e6c1c-498">この例の出力が示すように、<xref:System.Char.IsNumber%28System.Char%29> メソッドは、この文字の上位サロゲートまたは下位サロゲートのいずれかが渡された場合に `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-498">As the output from the example shows, the <xref:System.Char.IsNumber%28System.Char%29> method returns `false` if it is passed either a high surrogate or a low surrogate of this character.</span></span>

 [!code-csharp[System.Char.IsNumber#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#1)]
 [!code-vb[System.Char.IsNumber#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#1)]



## Examples
 <span data-ttu-id="e6c1c-499">次の例は <xref:System.Char.IsNumber%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-499">The following example demonstrates <xref:System.Char.IsNumber%2A>.</span></span>

 [!code-cpp[System.Char.IsNumber#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsNumber(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsNumber : string * int -&gt; bool" Usage="System.char.IsNumber (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-500">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-500">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-501"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-501">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-502">指定した文字列の指定位置にある文字が数字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-502">Indicates whether the character at the specified position in a specified string is categorized as a number.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-503"><see langword="true" /> の <paramref name="index" /> の位置にある文字が数字である場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-503"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a number; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-504">このメソッドは、<xref:System.Char> が任意の数値 Unicode カテゴリであるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-504">This method determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="e6c1c-505">数字に加え、数字、分数、添字、上付き文字、ローマ数字、通貨分子、encircled 番号などが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-505">In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers.</span></span> <span data-ttu-id="e6c1c-506">このメソッドは、<xref:System.Char> が基数10の数字であるかどうかを判断する <xref:System.Char.IsDigit%2A> メソッドとは対照的です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-506">This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.</span></span>

 <span data-ttu-id="e6c1c-507">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-507">Character positions in a string are indexed starting from zero.</span></span>

> [!IMPORTANT]
>  <span data-ttu-id="e6c1c-508"><xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> メソッドは、文字列が数字で構成されているかどうかを判断するためのものではありません (たとえば、文字列内の各文字に対してメソッドを呼び出すことによって)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-508">The <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string).</span></span> <span data-ttu-id="e6c1c-509">文字列が数値で構成されているかどうかを判断するには、`TryParse` メソッドのいずれかのオーバーロードを呼び出します (<xref:System.Int32.TryParse%2A?displayProperty=nameWithType>、整数型または浮動小数点型の <xref:System.Double.TryParse%2A?displayProperty=nameWithType> など)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-509">To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> or <xref:System.Double.TryParse%2A?displayProperty=nameWithType> of an integral or floating point type.</span></span>

 <span data-ttu-id="e6c1c-510">有効な数値は、<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>、<xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>、または <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> カテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-510">Valid numbers are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, or <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> category.</span></span>

 <span data-ttu-id="e6c1c-511">`index` 位置にある <xref:System.Char> オブジェクトが有効なサロゲートペアの最初の文字である場合、<xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> メソッドは、サロゲートペアが数字を形成するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-511">If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit.</span></span> <span data-ttu-id="e6c1c-512">たとえば、Aegean ナンバリングシステムは、コードポイント U + 10107 から U + 10133 で構成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-512">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="e6c1c-513">次の例では、<xref:System.Char.ConvertFromUtf32%2A> メソッドを使用して、AEGEAN NUMBER ONE を表す文字列をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-513">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="e6c1c-514">この例の出力が示すように、<xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> メソッドは、AEGEAN NUMBER の上位サロゲートが渡された場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-514">As the output from the example shows, the <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method returns `true` if it is passed the high surrogate of AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="e6c1c-515">ただし、下位サロゲートを渡すと、下位サロゲートのカテゴリのみが考慮され、`false`が返されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-515">However, if it is passed the low surrogate, it considers only the category of the low surrogate and returns `false`.</span></span>

 [!code-csharp[System.Char.IsNumber#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#2)]
 [!code-vb[System.Char.IsNumber#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#2)]



## Examples
 <span data-ttu-id="e6c1c-516">次の例は <xref:System.Char.IsNumber%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-516">The following example demonstrates <xref:System.Char.IsNumber%2A>.</span></span>

 [!code-cpp[System.Char.IsNumber#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-517"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-517"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-518"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-518"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPunctuation">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-519">Unicode 文字が区切り記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-519">Indicates whether a Unicode character is categorized as a punctuation mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-520">有効な句読点は、<xref:System.Globalization.UnicodeCategory>の次のカテゴリのメンバーです: `ConnectorPunctuation`、`DashPunctuation`、`OpenPunctuation`、`ClosePunctuation`、`InitialQuotePunctuation`、`FinalQuotePunctuation`、または `OtherPunctuation`。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-520">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InitialQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="e6c1c-521">次の表に示す Unicode コードポイントの文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-521">They include characters with the Unicode code points listed in the following table.</span></span>

|||||
|-|-|-|-|
|<span data-ttu-id="e6c1c-522">U + 0021 から U + 0023</span><span class="sxs-lookup"><span data-stu-id="e6c1c-522">U+0021 to U+0023</span></span>|<span data-ttu-id="e6c1c-523">U + 060C および U + 060C</span><span class="sxs-lookup"><span data-stu-id="e6c1c-523">U+060C and U+060D</span></span>|<span data-ttu-id="e6c1c-524">U + 1800 から U + 180A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-524">U+1800 to U+180A</span></span>|<span data-ttu-id="e6c1c-525">U + 3014 から U + 301F へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-525">U+3014 to U+301F</span></span>|
|<span data-ttu-id="e6c1c-526">U + 0025 から U + 002A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-526">U+0025 to U+002A</span></span>|<span data-ttu-id="e6c1c-527">U+061B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-527">U+061B</span></span>|<span data-ttu-id="e6c1c-528">U + 1944 と U + 1945</span><span class="sxs-lookup"><span data-stu-id="e6c1c-528">U+1944 and U+1945</span></span>|<span data-ttu-id="e6c1c-529">U+3030</span><span class="sxs-lookup"><span data-stu-id="e6c1c-529">U+3030</span></span>|
|<span data-ttu-id="e6c1c-530">U + 002C から U + 002C</span><span class="sxs-lookup"><span data-stu-id="e6c1c-530">U+002C to U+002F</span></span>|<span data-ttu-id="e6c1c-531">U + 061E および U + 061E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-531">U+061E and U+061F</span></span>|<span data-ttu-id="e6c1c-532">U + 19DE および U + 19DE</span><span class="sxs-lookup"><span data-stu-id="e6c1c-532">U+19DE and U+19DF</span></span>|<span data-ttu-id="e6c1c-533">U + 303D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-533">U+303D</span></span>|
|<span data-ttu-id="e6c1c-534">U + 003A および U + 003A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-534">U+003A and U+003B</span></span>|<span data-ttu-id="e6c1c-535">U + 066A から U + 066D へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-535">U+066A to U+066D</span></span>|<span data-ttu-id="e6c1c-536">U + 1A1E および U + 1A1E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-536">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="e6c1c-537">U + 30A0</span><span class="sxs-lookup"><span data-stu-id="e6c1c-537">U+30A0</span></span>|
|<span data-ttu-id="e6c1c-538">U + 003F および U + 0040</span><span class="sxs-lookup"><span data-stu-id="e6c1c-538">U+003F and U+0040</span></span>|<span data-ttu-id="e6c1c-539">U+06D4</span><span class="sxs-lookup"><span data-stu-id="e6c1c-539">U+06D4</span></span>|<span data-ttu-id="e6c1c-540">U + 1B5A から U + 1B5a へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-540">U+1B5A to U+1B60</span></span>|<span data-ttu-id="e6c1c-541">U + 30FB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-541">U+30FB</span></span>|
|<span data-ttu-id="e6c1c-542">U + 005B ~ U + 005B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-542">U+005B to U+005D</span></span>|<span data-ttu-id="e6c1c-543">U + 0700 から U + 070D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-543">U+0700 to U+070D</span></span>|<span data-ttu-id="e6c1c-544">U + 2010 から U + 2027</span><span class="sxs-lookup"><span data-stu-id="e6c1c-544">U+2010 to U+2027</span></span>|<span data-ttu-id="e6c1c-545">U + A874 から U + A877</span><span class="sxs-lookup"><span data-stu-id="e6c1c-545">U+A874 to U+A877</span></span>|
|<span data-ttu-id="e6c1c-546">U+005F</span><span class="sxs-lookup"><span data-stu-id="e6c1c-546">U+005F</span></span>|<span data-ttu-id="e6c1c-547">U + 07F7 から U + 07F9</span><span class="sxs-lookup"><span data-stu-id="e6c1c-547">U+07F7 to U+07F9</span></span>|<span data-ttu-id="e6c1c-548">U + 2030 から U + 2043 へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-548">U+2030 to U+2043</span></span>|<span data-ttu-id="e6c1c-549">U + FD3E と U + FD3F</span><span class="sxs-lookup"><span data-stu-id="e6c1c-549">U+FD3E and U+FD3F</span></span>|
|<span data-ttu-id="e6c1c-550">U+007B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-550">U+007B</span></span>|<span data-ttu-id="e6c1c-551">U + 0964 と U + 0965</span><span class="sxs-lookup"><span data-stu-id="e6c1c-551">U+0964 and U+0965</span></span>|<span data-ttu-id="e6c1c-552">U + 2045 から U + 2051</span><span class="sxs-lookup"><span data-stu-id="e6c1c-552">U+2045 to U+2051</span></span>|<span data-ttu-id="e6c1c-553">U + FE10 から U + FE19</span><span class="sxs-lookup"><span data-stu-id="e6c1c-553">U+FE10 to U+FE19</span></span>|
|<span data-ttu-id="e6c1c-554">U+007D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-554">U+007D</span></span>|<span data-ttu-id="e6c1c-555">U+0970</span><span class="sxs-lookup"><span data-stu-id="e6c1c-555">U+0970</span></span>|<span data-ttu-id="e6c1c-556">U + 2053 から U + 205E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-556">U+2053 to U+205E</span></span>|<span data-ttu-id="e6c1c-557">U + FE30 から U + FE52</span><span class="sxs-lookup"><span data-stu-id="e6c1c-557">U+FE30 to U+FE52</span></span>|
|<span data-ttu-id="e6c1c-558">U+00A1</span><span class="sxs-lookup"><span data-stu-id="e6c1c-558">U+00A1</span></span>|<span data-ttu-id="e6c1c-559">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="e6c1c-559">U+0DF4</span></span>|<span data-ttu-id="e6c1c-560">U + 207D および U + 207E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-560">U+207D and  U+207E</span></span>|<span data-ttu-id="e6c1c-561">U + FE54 から U + FE61</span><span class="sxs-lookup"><span data-stu-id="e6c1c-561">U+FE54 to U+FE61</span></span>|
|<span data-ttu-id="e6c1c-562">U+00AB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-562">U+00AB</span></span>|<span data-ttu-id="e6c1c-563">U + 0E4F から U + 0E5B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-563">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="e6c1c-564">U + 208D と U + 208E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-564">U+208D and U+208E</span></span>|<span data-ttu-id="e6c1c-565">U+FE63</span><span class="sxs-lookup"><span data-stu-id="e6c1c-565">U+FE63</span></span>|
|<span data-ttu-id="e6c1c-566">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="e6c1c-566">U+00AD</span></span>|<span data-ttu-id="e6c1c-567">U + 0F04 から U + 0F12</span><span class="sxs-lookup"><span data-stu-id="e6c1c-567">U+0F04 to U+0F12</span></span>|<span data-ttu-id="e6c1c-568">U + 2329 と U + 232A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-568">U+2329 and U+232A</span></span>|<span data-ttu-id="e6c1c-569">U+FE68</span><span class="sxs-lookup"><span data-stu-id="e6c1c-569">U+FE68</span></span>|
|<span data-ttu-id="e6c1c-570">U+00B7</span><span class="sxs-lookup"><span data-stu-id="e6c1c-570">U+00B7</span></span>|<span data-ttu-id="e6c1c-571">U + 0F3A から U + 0F3D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-571">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="e6c1c-572">U + 2768 から U + 2775</span><span class="sxs-lookup"><span data-stu-id="e6c1c-572">U+2768 to U+2775</span></span>|<span data-ttu-id="e6c1c-573">U + FE6A と U + FE6B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-573">U+FE6A and U+FE6B</span></span>|
|<span data-ttu-id="e6c1c-574">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-574">U+00BB</span></span>|<span data-ttu-id="e6c1c-575">U+0F85</span><span class="sxs-lookup"><span data-stu-id="e6c1c-575">U+0F85</span></span>|<span data-ttu-id="e6c1c-576">U + 27C5 ~ U + 27C6</span><span class="sxs-lookup"><span data-stu-id="e6c1c-576">U+27C5 to U+27C6</span></span>|<span data-ttu-id="e6c1c-577">U + FF01 から U + FF03</span><span class="sxs-lookup"><span data-stu-id="e6c1c-577">U+FF01 to U+FF03</span></span>|
|<span data-ttu-id="e6c1c-578">U + 00BF</span><span class="sxs-lookup"><span data-stu-id="e6c1c-578">U+00BF</span></span>|<span data-ttu-id="e6c1c-579">U + 0FD0 および U + 0FD0</span><span class="sxs-lookup"><span data-stu-id="e6c1c-579">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="e6c1c-580">U + 27E6 から U + 27E6</span><span class="sxs-lookup"><span data-stu-id="e6c1c-580">U+27E6 to U+27EB</span></span>|<span data-ttu-id="e6c1c-581">U + FF05 から U + FF0A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-581">U+FF05 to U+FF0A</span></span>|
|<span data-ttu-id="e6c1c-582">U+037E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-582">U+037E</span></span>|<span data-ttu-id="e6c1c-583">U + 104A から U + 104F へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-583">U+104A to U+104F</span></span>|<span data-ttu-id="e6c1c-584">U + 2983 から U + 2998</span><span class="sxs-lookup"><span data-stu-id="e6c1c-584">U+2983 to U+2998</span></span>|<span data-ttu-id="e6c1c-585">U + FF0C から U + FF0F</span><span class="sxs-lookup"><span data-stu-id="e6c1c-585">U+FF0C to U+FF0F</span></span>|
|<span data-ttu-id="e6c1c-586">U+0387</span><span class="sxs-lookup"><span data-stu-id="e6c1c-586">U+0387</span></span>|<span data-ttu-id="e6c1c-587">U + 10FB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-587">U+10FB</span></span>|<span data-ttu-id="e6c1c-588">U + 29D8 ~ U + 29DB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-588">U+29D8 to U+29DB</span></span>|<span data-ttu-id="e6c1c-589">U + FF1A と U + FF1B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-589">U+FF1A and U+FF1B</span></span>|
|<span data-ttu-id="e6c1c-590">U + 055A から U + 055F へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-590">U+055A to U+055F</span></span>|<span data-ttu-id="e6c1c-591">U + 1361 から U + 1368</span><span class="sxs-lookup"><span data-stu-id="e6c1c-591">U+1361 to U+1368</span></span>|<span data-ttu-id="e6c1c-592">U + 29FC および U + 29FC</span><span class="sxs-lookup"><span data-stu-id="e6c1c-592">U+29FC and U+29FD</span></span>|<span data-ttu-id="e6c1c-593">U + FF1F と U + FF20</span><span class="sxs-lookup"><span data-stu-id="e6c1c-593">U+FF1F and U+FF20</span></span>|
|<span data-ttu-id="e6c1c-594">U + 0589 と U + 058A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-594">U+0589 and U+058A</span></span>|<span data-ttu-id="e6c1c-595">U + 166D と U + 166E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-595">U+166D and U+166E</span></span>|<span data-ttu-id="e6c1c-596">U + 2CF9 から U + 2CFC</span><span class="sxs-lookup"><span data-stu-id="e6c1c-596">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="e6c1c-597">U + FF3B から U + FF3D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-597">U+FF3B to U+FF3D</span></span>|
|<span data-ttu-id="e6c1c-598">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="e6c1c-598">U+05BE</span></span>|<span data-ttu-id="e6c1c-599">U + 169B と U + 169C</span><span class="sxs-lookup"><span data-stu-id="e6c1c-599">U+169B and U+169C</span></span>|<span data-ttu-id="e6c1c-600">U + 2CFE と U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="e6c1c-600">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="e6c1c-601">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="e6c1c-601">U+FF3F</span></span>|
|<span data-ttu-id="e6c1c-602">U+05C0</span><span class="sxs-lookup"><span data-stu-id="e6c1c-602">U+05C0</span></span>|<span data-ttu-id="e6c1c-603">U + 16EB から U + 16EB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-603">U+16EB to U+16ED</span></span>|<span data-ttu-id="e6c1c-604">U + 2E00 から U + 2E00</span><span class="sxs-lookup"><span data-stu-id="e6c1c-604">U+2E00 to U+2E17</span></span>|<span data-ttu-id="e6c1c-605">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-605">U+FF5B</span></span>|
|<span data-ttu-id="e6c1c-606">U+05C3</span><span class="sxs-lookup"><span data-stu-id="e6c1c-606">U+05C3</span></span>|<span data-ttu-id="e6c1c-607">U + 1735 および U + 1736</span><span class="sxs-lookup"><span data-stu-id="e6c1c-607">U+1735 and U+1736</span></span>|<span data-ttu-id="e6c1c-608">U + 2E1C および U + 2E1C</span><span class="sxs-lookup"><span data-stu-id="e6c1c-608">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="e6c1c-609">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-609">U+FF5D</span></span>|
|<span data-ttu-id="e6c1c-610">U+05C6</span><span class="sxs-lookup"><span data-stu-id="e6c1c-610">U+05C6</span></span>|<span data-ttu-id="e6c1c-611">U + 17D4 から U + 17D6</span><span class="sxs-lookup"><span data-stu-id="e6c1c-611">U+17D4 to U+17D6</span></span>|<span data-ttu-id="e6c1c-612">U + 3001 から U + 3003 へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-612">U+3001 to U+3003</span></span>|<span data-ttu-id="e6c1c-613">U + FF5F から U + FF65</span><span class="sxs-lookup"><span data-stu-id="e6c1c-613">U+FF5F to U+FF65</span></span>|
|<span data-ttu-id="e6c1c-614">U + 05F3 および U + 05F4</span><span class="sxs-lookup"><span data-stu-id="e6c1c-614">U+05F3 and U+05F4</span></span>|<span data-ttu-id="e6c1c-615">U + 17D8 から U + 17DA</span><span class="sxs-lookup"><span data-stu-id="e6c1c-615">U+17D8 to U+17DA</span></span>|<span data-ttu-id="e6c1c-616">U + 3008 から U + 3011</span><span class="sxs-lookup"><span data-stu-id="e6c1c-616">U+3008 to U+3011</span></span>||

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(char c);" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : char -&gt; bool" Usage="System.char.IsPunctuation c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-617">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-617">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-618">指定した Unicode 文字が区切り記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-618">Indicates whether the specified Unicode character is categorized as a punctuation mark.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-619"><see langword="true" /> が区切り記号の場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-619"><see langword="true" /> if <paramref name="c" /> is a punctuation mark; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-620">有効な句読点は、<xref:System.Globalization.UnicodeCategory>の次のカテゴリのメンバーです: `ConnectorPunctuation`、`DashPunctuation`、`OpenPunctuation`、`ClosePunctuation`、`InitialQuotePunctuation`、`FinalQuotePunctuation`、または `OtherPunctuation`。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-620">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InitialQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="e6c1c-621">次の表に示す Unicode コードポイントの文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-621">They include characters with the Unicode code points listed in the following table.</span></span>

|||||
|-|-|-|-|
|<span data-ttu-id="e6c1c-622">U + 0021 から U + 0023</span><span class="sxs-lookup"><span data-stu-id="e6c1c-622">U+0021 to U+0023</span></span>|<span data-ttu-id="e6c1c-623">U + 060C および U + 060C</span><span class="sxs-lookup"><span data-stu-id="e6c1c-623">U+060C and U+060D</span></span>|<span data-ttu-id="e6c1c-624">U + 1800 から U + 180A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-624">U+1800 to U+180A</span></span>|<span data-ttu-id="e6c1c-625">U + 3014 から U + 301F へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-625">U+3014 to U+301F</span></span>|
|<span data-ttu-id="e6c1c-626">U + 0025 から U + 002A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-626">U+0025 to U+002A</span></span>|<span data-ttu-id="e6c1c-627">U+061B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-627">U+061B</span></span>|<span data-ttu-id="e6c1c-628">U + 1944 と U + 1945</span><span class="sxs-lookup"><span data-stu-id="e6c1c-628">U+1944 and U+1945</span></span>|<span data-ttu-id="e6c1c-629">U+3030</span><span class="sxs-lookup"><span data-stu-id="e6c1c-629">U+3030</span></span>|
|<span data-ttu-id="e6c1c-630">U + 002C から U + 002C</span><span class="sxs-lookup"><span data-stu-id="e6c1c-630">U+002C to U+002F</span></span>|<span data-ttu-id="e6c1c-631">U + 061E および U + 061E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-631">U+061E and U+061F</span></span>|<span data-ttu-id="e6c1c-632">U + 19DE および U + 19DE</span><span class="sxs-lookup"><span data-stu-id="e6c1c-632">U+19DE and U+19DF</span></span>|<span data-ttu-id="e6c1c-633">U + 303D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-633">U+303D</span></span>|
|<span data-ttu-id="e6c1c-634">U + 003A および U + 003A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-634">U+003A and U+003B</span></span>|<span data-ttu-id="e6c1c-635">U + 066A から U + 066D へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-635">U+066A to U+066D</span></span>|<span data-ttu-id="e6c1c-636">U + 1A1E および U + 1A1E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-636">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="e6c1c-637">U + 30A0</span><span class="sxs-lookup"><span data-stu-id="e6c1c-637">U+30A0</span></span>|
|<span data-ttu-id="e6c1c-638">U + 003F および U + 0040</span><span class="sxs-lookup"><span data-stu-id="e6c1c-638">U+003F and U+0040</span></span>|<span data-ttu-id="e6c1c-639">U+06D4</span><span class="sxs-lookup"><span data-stu-id="e6c1c-639">U+06D4</span></span>|<span data-ttu-id="e6c1c-640">U + 1B5A から U + 1B5a へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-640">U+1B5A to U+1B60</span></span>|<span data-ttu-id="e6c1c-641">U + 30FB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-641">U+30FB</span></span>|
|<span data-ttu-id="e6c1c-642">U + 005B ~ U + 005B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-642">U+005B to U+005D</span></span>|<span data-ttu-id="e6c1c-643">U + 0700 から U + 070D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-643">U+0700 to U+070D</span></span>|<span data-ttu-id="e6c1c-644">U + 2010 から U + 2027</span><span class="sxs-lookup"><span data-stu-id="e6c1c-644">U+2010 to U+2027</span></span>|<span data-ttu-id="e6c1c-645">U + A874 から U + A877</span><span class="sxs-lookup"><span data-stu-id="e6c1c-645">U+A874 to U+A877</span></span>|
|<span data-ttu-id="e6c1c-646">U+005F</span><span class="sxs-lookup"><span data-stu-id="e6c1c-646">U+005F</span></span>|<span data-ttu-id="e6c1c-647">U + 07F7 から U + 07F9</span><span class="sxs-lookup"><span data-stu-id="e6c1c-647">U+07F7 to U+07F9</span></span>|<span data-ttu-id="e6c1c-648">U + 2030 から U + 2043 へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-648">U+2030 to U+2043</span></span>|<span data-ttu-id="e6c1c-649">U + FD3E と U + FD3F</span><span class="sxs-lookup"><span data-stu-id="e6c1c-649">U+FD3E and U+FD3F</span></span>|
|<span data-ttu-id="e6c1c-650">U+007B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-650">U+007B</span></span>|<span data-ttu-id="e6c1c-651">U + 0964 と U + 0965</span><span class="sxs-lookup"><span data-stu-id="e6c1c-651">U+0964 and U+0965</span></span>|<span data-ttu-id="e6c1c-652">U + 2045 から U + 2051</span><span class="sxs-lookup"><span data-stu-id="e6c1c-652">U+2045 to U+2051</span></span>|<span data-ttu-id="e6c1c-653">U + FE10 から U + FE19</span><span class="sxs-lookup"><span data-stu-id="e6c1c-653">U+FE10 to U+FE19</span></span>|
|<span data-ttu-id="e6c1c-654">U+007D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-654">U+007D</span></span>|<span data-ttu-id="e6c1c-655">U+0970</span><span class="sxs-lookup"><span data-stu-id="e6c1c-655">U+0970</span></span>|<span data-ttu-id="e6c1c-656">U + 2053 から U + 205E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-656">U+2053 to U+205E</span></span>|<span data-ttu-id="e6c1c-657">U + FE30 から U + FE52</span><span class="sxs-lookup"><span data-stu-id="e6c1c-657">U+FE30 to U+FE52</span></span>|
|<span data-ttu-id="e6c1c-658">U+00A1</span><span class="sxs-lookup"><span data-stu-id="e6c1c-658">U+00A1</span></span>|<span data-ttu-id="e6c1c-659">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="e6c1c-659">U+0DF4</span></span>|<span data-ttu-id="e6c1c-660">U + 207D および U + 207E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-660">U+207D and  U+207E</span></span>|<span data-ttu-id="e6c1c-661">U + FE54 から U + FE61</span><span class="sxs-lookup"><span data-stu-id="e6c1c-661">U+FE54 to U+FE61</span></span>|
|<span data-ttu-id="e6c1c-662">U+00AB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-662">U+00AB</span></span>|<span data-ttu-id="e6c1c-663">U + 0E4F から U + 0E5B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-663">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="e6c1c-664">U + 208D と U + 208E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-664">U+208D and U+208E</span></span>|<span data-ttu-id="e6c1c-665">U+FE63</span><span class="sxs-lookup"><span data-stu-id="e6c1c-665">U+FE63</span></span>|
|<span data-ttu-id="e6c1c-666">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="e6c1c-666">U+00AD</span></span>|<span data-ttu-id="e6c1c-667">U + 0F04 から U + 0F12</span><span class="sxs-lookup"><span data-stu-id="e6c1c-667">U+0F04 to U+0F12</span></span>|<span data-ttu-id="e6c1c-668">U + 2329 と U + 232A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-668">U+2329 and U+232A</span></span>|<span data-ttu-id="e6c1c-669">U+FE68</span><span class="sxs-lookup"><span data-stu-id="e6c1c-669">U+FE68</span></span>|
|<span data-ttu-id="e6c1c-670">U+00B7</span><span class="sxs-lookup"><span data-stu-id="e6c1c-670">U+00B7</span></span>|<span data-ttu-id="e6c1c-671">U + 0F3A から U + 0F3D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-671">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="e6c1c-672">U + 2768 から U + 2775</span><span class="sxs-lookup"><span data-stu-id="e6c1c-672">U+2768 to U+2775</span></span>|<span data-ttu-id="e6c1c-673">U + FE6A と U + FE6B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-673">U+FE6A and U+FE6B</span></span>|
|<span data-ttu-id="e6c1c-674">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-674">U+00BB</span></span>|<span data-ttu-id="e6c1c-675">U+0F85</span><span class="sxs-lookup"><span data-stu-id="e6c1c-675">U+0F85</span></span>|<span data-ttu-id="e6c1c-676">U + 27C5 ~ U + 27C6</span><span class="sxs-lookup"><span data-stu-id="e6c1c-676">U+27C5 to U+27C6</span></span>|<span data-ttu-id="e6c1c-677">U + FF01 から U + FF03</span><span class="sxs-lookup"><span data-stu-id="e6c1c-677">U+FF01 to U+FF03</span></span>|
|<span data-ttu-id="e6c1c-678">U + 00BF</span><span class="sxs-lookup"><span data-stu-id="e6c1c-678">U+00BF</span></span>|<span data-ttu-id="e6c1c-679">U + 0FD0 および U + 0FD0</span><span class="sxs-lookup"><span data-stu-id="e6c1c-679">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="e6c1c-680">U + 27E6 から U + 27E6</span><span class="sxs-lookup"><span data-stu-id="e6c1c-680">U+27E6 to U+27EB</span></span>|<span data-ttu-id="e6c1c-681">U + FF05 から U + FF0A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-681">U+FF05 to U+FF0A</span></span>|
|<span data-ttu-id="e6c1c-682">U+037E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-682">U+037E</span></span>|<span data-ttu-id="e6c1c-683">U + 104A から U + 104F へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-683">U+104A to U+104F</span></span>|<span data-ttu-id="e6c1c-684">U + 2983 から U + 2998</span><span class="sxs-lookup"><span data-stu-id="e6c1c-684">U+2983 to U+2998</span></span>|<span data-ttu-id="e6c1c-685">U + FF0C から U + FF0F</span><span class="sxs-lookup"><span data-stu-id="e6c1c-685">U+FF0C to U+FF0F</span></span>|
|<span data-ttu-id="e6c1c-686">U+0387</span><span class="sxs-lookup"><span data-stu-id="e6c1c-686">U+0387</span></span>|<span data-ttu-id="e6c1c-687">U + 10FB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-687">U+10FB</span></span>|<span data-ttu-id="e6c1c-688">U + 29D8 ~ U + 29DB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-688">U+29D8 to U+29DB</span></span>|<span data-ttu-id="e6c1c-689">U + FF1A と U + FF1B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-689">U+FF1A and U+FF1B</span></span>|
|<span data-ttu-id="e6c1c-690">U + 055A から U + 055F へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-690">U+055A to U+055F</span></span>|<span data-ttu-id="e6c1c-691">U + 1361 から U + 1368</span><span class="sxs-lookup"><span data-stu-id="e6c1c-691">U+1361 to U+1368</span></span>|<span data-ttu-id="e6c1c-692">U + 29FC および U + 29FC</span><span class="sxs-lookup"><span data-stu-id="e6c1c-692">U+29FC and U+29FD</span></span>|<span data-ttu-id="e6c1c-693">U + FF1F と U + FF20</span><span class="sxs-lookup"><span data-stu-id="e6c1c-693">U+FF1F and U+FF20</span></span>|
|<span data-ttu-id="e6c1c-694">U + 0589 と U + 058A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-694">U+0589 and U+058A</span></span>|<span data-ttu-id="e6c1c-695">U + 166D と U + 166E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-695">U+166D and U+166E</span></span>|<span data-ttu-id="e6c1c-696">U + 2CF9 から U + 2CFC</span><span class="sxs-lookup"><span data-stu-id="e6c1c-696">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="e6c1c-697">U + FF3B から U + FF3D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-697">U+FF3B to U+FF3D</span></span>|
|<span data-ttu-id="e6c1c-698">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="e6c1c-698">U+05BE</span></span>|<span data-ttu-id="e6c1c-699">U + 169B と U + 169C</span><span class="sxs-lookup"><span data-stu-id="e6c1c-699">U+169B and U+169C</span></span>|<span data-ttu-id="e6c1c-700">U + 2CFE と U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="e6c1c-700">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="e6c1c-701">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="e6c1c-701">U+FF3F</span></span>|
|<span data-ttu-id="e6c1c-702">U+05C0</span><span class="sxs-lookup"><span data-stu-id="e6c1c-702">U+05C0</span></span>|<span data-ttu-id="e6c1c-703">U + 16EB から U + 16EB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-703">U+16EB to U+16ED</span></span>|<span data-ttu-id="e6c1c-704">U + 2E00 から U + 2E00</span><span class="sxs-lookup"><span data-stu-id="e6c1c-704">U+2E00 to U+2E17</span></span>|<span data-ttu-id="e6c1c-705">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-705">U+FF5B</span></span>|
|<span data-ttu-id="e6c1c-706">U+05C3</span><span class="sxs-lookup"><span data-stu-id="e6c1c-706">U+05C3</span></span>|<span data-ttu-id="e6c1c-707">U + 1735 および U + 1736</span><span class="sxs-lookup"><span data-stu-id="e6c1c-707">U+1735 and U+1736</span></span>|<span data-ttu-id="e6c1c-708">U + 2E1C および U + 2E1C</span><span class="sxs-lookup"><span data-stu-id="e6c1c-708">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="e6c1c-709">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-709">U+FF5D</span></span>|
|<span data-ttu-id="e6c1c-710">U+05C6</span><span class="sxs-lookup"><span data-stu-id="e6c1c-710">U+05C6</span></span>|<span data-ttu-id="e6c1c-711">U + 17D4 から U + 17D6</span><span class="sxs-lookup"><span data-stu-id="e6c1c-711">U+17D4 to U+17D6</span></span>|<span data-ttu-id="e6c1c-712">U + 3001 から U + 3003 へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-712">U+3001 to U+3003</span></span>|<span data-ttu-id="e6c1c-713">U + FF5F から U + FF65</span><span class="sxs-lookup"><span data-stu-id="e6c1c-713">U+FF5F to U+FF65</span></span>|
|<span data-ttu-id="e6c1c-714">U + 05F3 および U + 05F4</span><span class="sxs-lookup"><span data-stu-id="e6c1c-714">U+05F3 and U+05F4</span></span>|<span data-ttu-id="e6c1c-715">U + 17D8 から U + 17DA</span><span class="sxs-lookup"><span data-stu-id="e6c1c-715">U+17D8 to U+17DA</span></span>|<span data-ttu-id="e6c1c-716">U + 3008 から U + 3011</span><span class="sxs-lookup"><span data-stu-id="e6c1c-716">U+3008 to U+3011</span></span>||



## Examples
 <span data-ttu-id="e6c1c-717">次のコード例は、<xref:System.Char.IsPunctuation%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-717">The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.</span></span>

 [!code-cpp[System.Char.IsPunctuation#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsPunctuation(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : string * int -&gt; bool" Usage="System.char.IsPunctuation (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-718">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-718">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-719"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-719">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-720">指定した文字列の指定位置にある文字が区切り記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-720">Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-721"><see langword="true" /> の <paramref name="index" /> の位置にある文字が区切り記号の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-721"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a punctuation mark; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-722">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-722">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="e6c1c-723">有効な句読点は、<xref:System.Globalization.UnicodeCategory>の次のカテゴリのメンバーです: `ConnectorPunctuation`、`DashPunctuation`、`OpenPunctuation`、`ClosePunctuation`、`InitialQuotePunctuation`、`FinalQuotePunctuation`、または `OtherPunctuation`。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-723">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InitialQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="e6c1c-724">次の表に示す Unicode コードポイントの文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-724">They include characters with the Unicode code points listed in the following table.</span></span>

|||||
|-|-|-|-|
|<span data-ttu-id="e6c1c-725">U + 0021 から U + 0023</span><span class="sxs-lookup"><span data-stu-id="e6c1c-725">U+0021 to U+0023</span></span>|<span data-ttu-id="e6c1c-726">U + 060C および U + 060C</span><span class="sxs-lookup"><span data-stu-id="e6c1c-726">U+060C and U+060D</span></span>|<span data-ttu-id="e6c1c-727">U + 1800 から U + 180A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-727">U+1800 to U+180A</span></span>|<span data-ttu-id="e6c1c-728">U + 3014 から U + 301F へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-728">U+3014 to U+301F</span></span>|
|<span data-ttu-id="e6c1c-729">U + 0025 から U + 002A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-729">U+0025 to U+002A</span></span>|<span data-ttu-id="e6c1c-730">U+061B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-730">U+061B</span></span>|<span data-ttu-id="e6c1c-731">U + 1944 と U + 1945</span><span class="sxs-lookup"><span data-stu-id="e6c1c-731">U+1944 and U+1945</span></span>|<span data-ttu-id="e6c1c-732">U+3030</span><span class="sxs-lookup"><span data-stu-id="e6c1c-732">U+3030</span></span>|
|<span data-ttu-id="e6c1c-733">U + 002C から U + 002C</span><span class="sxs-lookup"><span data-stu-id="e6c1c-733">U+002C to U+002F</span></span>|<span data-ttu-id="e6c1c-734">U + 061E および U + 061E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-734">U+061E and U+061F</span></span>|<span data-ttu-id="e6c1c-735">U + 19DE および U + 19DE</span><span class="sxs-lookup"><span data-stu-id="e6c1c-735">U+19DE and U+19DF</span></span>|<span data-ttu-id="e6c1c-736">U + 303D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-736">U+303D</span></span>|
|<span data-ttu-id="e6c1c-737">U + 003A および U + 003A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-737">U+003A and U+003B</span></span>|<span data-ttu-id="e6c1c-738">U + 066A から U + 066D へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-738">U+066A to U+066D</span></span>|<span data-ttu-id="e6c1c-739">U + 1A1E および U + 1A1E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-739">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="e6c1c-740">U + 30A0</span><span class="sxs-lookup"><span data-stu-id="e6c1c-740">U+30A0</span></span>|
|<span data-ttu-id="e6c1c-741">U + 003F および U + 0040</span><span class="sxs-lookup"><span data-stu-id="e6c1c-741">U+003F and U+0040</span></span>|<span data-ttu-id="e6c1c-742">U+06D4</span><span class="sxs-lookup"><span data-stu-id="e6c1c-742">U+06D4</span></span>|<span data-ttu-id="e6c1c-743">U + 1B5A から U + 1B5a へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-743">U+1B5A to U+1B60</span></span>|<span data-ttu-id="e6c1c-744">U + 30FB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-744">U+30FB</span></span>|
|<span data-ttu-id="e6c1c-745">U + 005B ~ U + 005B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-745">U+005B to U+005D</span></span>|<span data-ttu-id="e6c1c-746">U + 0700 から U + 070D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-746">U+0700 to U+070D</span></span>|<span data-ttu-id="e6c1c-747">U + 2010 から U + 2027</span><span class="sxs-lookup"><span data-stu-id="e6c1c-747">U+2010 to U+2027</span></span>|<span data-ttu-id="e6c1c-748">U + A874 から U + A877</span><span class="sxs-lookup"><span data-stu-id="e6c1c-748">U+A874 to U+A877</span></span>|
|<span data-ttu-id="e6c1c-749">U+005F</span><span class="sxs-lookup"><span data-stu-id="e6c1c-749">U+005F</span></span>|<span data-ttu-id="e6c1c-750">U + 07F7 から U + 07F9</span><span class="sxs-lookup"><span data-stu-id="e6c1c-750">U+07F7 to U+07F9</span></span>|<span data-ttu-id="e6c1c-751">U + 2030 から U + 2043 へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-751">U+2030 to U+2043</span></span>|<span data-ttu-id="e6c1c-752">U + FD3E と U + FD3F</span><span class="sxs-lookup"><span data-stu-id="e6c1c-752">U+FD3E and U+FD3F</span></span>|
|<span data-ttu-id="e6c1c-753">U+007B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-753">U+007B</span></span>|<span data-ttu-id="e6c1c-754">U + 0964 と U + 0965</span><span class="sxs-lookup"><span data-stu-id="e6c1c-754">U+0964 and U+0965</span></span>|<span data-ttu-id="e6c1c-755">U + 2045 から U + 2051</span><span class="sxs-lookup"><span data-stu-id="e6c1c-755">U+2045 to U+2051</span></span>|<span data-ttu-id="e6c1c-756">U + FE10 から U + FE19</span><span class="sxs-lookup"><span data-stu-id="e6c1c-756">U+FE10 to U+FE19</span></span>|
|<span data-ttu-id="e6c1c-757">U+007D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-757">U+007D</span></span>|<span data-ttu-id="e6c1c-758">U+0970</span><span class="sxs-lookup"><span data-stu-id="e6c1c-758">U+0970</span></span>|<span data-ttu-id="e6c1c-759">U + 2053 から U + 205E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-759">U+2053 to U+205E</span></span>|<span data-ttu-id="e6c1c-760">U + FE30 から U + FE52</span><span class="sxs-lookup"><span data-stu-id="e6c1c-760">U+FE30 to U+FE52</span></span>|
|<span data-ttu-id="e6c1c-761">U+00A1</span><span class="sxs-lookup"><span data-stu-id="e6c1c-761">U+00A1</span></span>|<span data-ttu-id="e6c1c-762">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="e6c1c-762">U+0DF4</span></span>|<span data-ttu-id="e6c1c-763">U + 207D および U + 207E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-763">U+207D and  U+207E</span></span>|<span data-ttu-id="e6c1c-764">U + FE54 から U + FE61</span><span class="sxs-lookup"><span data-stu-id="e6c1c-764">U+FE54 to U+FE61</span></span>|
|<span data-ttu-id="e6c1c-765">U+00AB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-765">U+00AB</span></span>|<span data-ttu-id="e6c1c-766">U + 0E4F から U + 0E5B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-766">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="e6c1c-767">U + 208D と U + 208E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-767">U+208D and U+208E</span></span>|<span data-ttu-id="e6c1c-768">U+FE63</span><span class="sxs-lookup"><span data-stu-id="e6c1c-768">U+FE63</span></span>|
|<span data-ttu-id="e6c1c-769">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="e6c1c-769">U+00AD</span></span>|<span data-ttu-id="e6c1c-770">U + 0F04 から U + 0F12</span><span class="sxs-lookup"><span data-stu-id="e6c1c-770">U+0F04 to U+0F12</span></span>|<span data-ttu-id="e6c1c-771">U + 2329 と U + 232A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-771">U+2329 and U+232A</span></span>|<span data-ttu-id="e6c1c-772">U+FE68</span><span class="sxs-lookup"><span data-stu-id="e6c1c-772">U+FE68</span></span>|
|<span data-ttu-id="e6c1c-773">U+00B7</span><span class="sxs-lookup"><span data-stu-id="e6c1c-773">U+00B7</span></span>|<span data-ttu-id="e6c1c-774">U + 0F3A から U + 0F3D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-774">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="e6c1c-775">U + 2768 から U + 2775</span><span class="sxs-lookup"><span data-stu-id="e6c1c-775">U+2768 to U+2775</span></span>|<span data-ttu-id="e6c1c-776">U + FE6A と U + FE6B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-776">U+FE6A and U+FE6B</span></span>|
|<span data-ttu-id="e6c1c-777">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-777">U+00BB</span></span>|<span data-ttu-id="e6c1c-778">U+0F85</span><span class="sxs-lookup"><span data-stu-id="e6c1c-778">U+0F85</span></span>|<span data-ttu-id="e6c1c-779">U + 27C5 ~ U + 27C6</span><span class="sxs-lookup"><span data-stu-id="e6c1c-779">U+27C5 to U+27C6</span></span>|<span data-ttu-id="e6c1c-780">U + FF01 から U + FF03</span><span class="sxs-lookup"><span data-stu-id="e6c1c-780">U+FF01 to U+FF03</span></span>|
|<span data-ttu-id="e6c1c-781">U + 00BF</span><span class="sxs-lookup"><span data-stu-id="e6c1c-781">U+00BF</span></span>|<span data-ttu-id="e6c1c-782">U + 0FD0 および U + 0FD0</span><span class="sxs-lookup"><span data-stu-id="e6c1c-782">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="e6c1c-783">U + 27E6 から U + 27E6</span><span class="sxs-lookup"><span data-stu-id="e6c1c-783">U+27E6 to U+27EB</span></span>|<span data-ttu-id="e6c1c-784">U + FF05 から U + FF0A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-784">U+FF05 to U+FF0A</span></span>|
|<span data-ttu-id="e6c1c-785">U+037E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-785">U+037E</span></span>|<span data-ttu-id="e6c1c-786">U + 104A から U + 104F へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-786">U+104A to U+104F</span></span>|<span data-ttu-id="e6c1c-787">U + 2983 から U + 2998</span><span class="sxs-lookup"><span data-stu-id="e6c1c-787">U+2983 to U+2998</span></span>|<span data-ttu-id="e6c1c-788">U + FF0C から U + FF0F</span><span class="sxs-lookup"><span data-stu-id="e6c1c-788">U+FF0C to U+FF0F</span></span>|
|<span data-ttu-id="e6c1c-789">U+0387</span><span class="sxs-lookup"><span data-stu-id="e6c1c-789">U+0387</span></span>|<span data-ttu-id="e6c1c-790">U + 10FB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-790">U+10FB</span></span>|<span data-ttu-id="e6c1c-791">U + 29D8 ~ U + 29DB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-791">U+29D8 to U+29DB</span></span>|<span data-ttu-id="e6c1c-792">U + FF1A と U + FF1B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-792">U+FF1A and U+FF1B</span></span>|
|<span data-ttu-id="e6c1c-793">U + 055A から U + 055F へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-793">U+055A to U+055F</span></span>|<span data-ttu-id="e6c1c-794">U + 1361 から U + 1368</span><span class="sxs-lookup"><span data-stu-id="e6c1c-794">U+1361 to U+1368</span></span>|<span data-ttu-id="e6c1c-795">U + 29FC および U + 29FC</span><span class="sxs-lookup"><span data-stu-id="e6c1c-795">U+29FC and U+29FD</span></span>|<span data-ttu-id="e6c1c-796">U + FF1F と U + FF20</span><span class="sxs-lookup"><span data-stu-id="e6c1c-796">U+FF1F and U+FF20</span></span>|
|<span data-ttu-id="e6c1c-797">U + 0589 と U + 058A</span><span class="sxs-lookup"><span data-stu-id="e6c1c-797">U+0589 and U+058A</span></span>|<span data-ttu-id="e6c1c-798">U + 166D と U + 166E</span><span class="sxs-lookup"><span data-stu-id="e6c1c-798">U+166D and U+166E</span></span>|<span data-ttu-id="e6c1c-799">U + 2CF9 から U + 2CFC</span><span class="sxs-lookup"><span data-stu-id="e6c1c-799">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="e6c1c-800">U + FF3B から U + FF3D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-800">U+FF3B to U+FF3D</span></span>|
|<span data-ttu-id="e6c1c-801">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="e6c1c-801">U+05BE</span></span>|<span data-ttu-id="e6c1c-802">U + 169B と U + 169C</span><span class="sxs-lookup"><span data-stu-id="e6c1c-802">U+169B and U+169C</span></span>|<span data-ttu-id="e6c1c-803">U + 2CFE と U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="e6c1c-803">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="e6c1c-804">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="e6c1c-804">U+FF3F</span></span>|
|<span data-ttu-id="e6c1c-805">U+05C0</span><span class="sxs-lookup"><span data-stu-id="e6c1c-805">U+05C0</span></span>|<span data-ttu-id="e6c1c-806">U + 16EB から U + 16EB</span><span class="sxs-lookup"><span data-stu-id="e6c1c-806">U+16EB to U+16ED</span></span>|<span data-ttu-id="e6c1c-807">U + 2E00 から U + 2E00</span><span class="sxs-lookup"><span data-stu-id="e6c1c-807">U+2E00 to U+2E17</span></span>|<span data-ttu-id="e6c1c-808">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="e6c1c-808">U+FF5B</span></span>|
|<span data-ttu-id="e6c1c-809">U+05C3</span><span class="sxs-lookup"><span data-stu-id="e6c1c-809">U+05C3</span></span>|<span data-ttu-id="e6c1c-810">U + 1735 および U + 1736</span><span class="sxs-lookup"><span data-stu-id="e6c1c-810">U+1735 and U+1736</span></span>|<span data-ttu-id="e6c1c-811">U + 2E1C および U + 2E1C</span><span class="sxs-lookup"><span data-stu-id="e6c1c-811">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="e6c1c-812">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="e6c1c-812">U+FF5D</span></span>|
|<span data-ttu-id="e6c1c-813">U+05C6</span><span class="sxs-lookup"><span data-stu-id="e6c1c-813">U+05C6</span></span>|<span data-ttu-id="e6c1c-814">U + 17D4 から U + 17D6</span><span class="sxs-lookup"><span data-stu-id="e6c1c-814">U+17D4 to U+17D6</span></span>|<span data-ttu-id="e6c1c-815">U + 3001 から U + 3003 へ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-815">U+3001 to U+3003</span></span>|<span data-ttu-id="e6c1c-816">U + FF5F から U + FF65</span><span class="sxs-lookup"><span data-stu-id="e6c1c-816">U+FF5F to U+FF65</span></span>|
|<span data-ttu-id="e6c1c-817">U + 05F3 および U + 05F4</span><span class="sxs-lookup"><span data-stu-id="e6c1c-817">U+05F3 and U+05F4</span></span>|<span data-ttu-id="e6c1c-818">U + 17D8 から U + 17DA</span><span class="sxs-lookup"><span data-stu-id="e6c1c-818">U+17D8 to U+17DA</span></span>|<span data-ttu-id="e6c1c-819">U + 3008 から U + 3011</span><span class="sxs-lookup"><span data-stu-id="e6c1c-819">U+3008 to U+3011</span></span>||



## Examples
 <span data-ttu-id="e6c1c-820">次のコード例は、<xref:System.Char.IsPunctuation%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-820">The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.</span></span>

 [!code-cpp[System.Char.IsPunctuation#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-821"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-821"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-822"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-822"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSeparator">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-823">Unicode 文字が区切り文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-823">Indicates whether a Unicode character is categorized as a separator character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-824">Unicode 標準では、区切り記号の次の3つのサブカテゴリが認識されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-824">The Unicode standard recognizes three subcategories of separators:</span></span>

-   <span data-ttu-id="e6c1c-825">スペース区切り記号 (<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> カテゴリ)。 \u0020. のような文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-825">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>

-   <span data-ttu-id="e6c1c-826">行区切り記号 (<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> カテゴリ)。 \u2028. が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-826">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>

-   <span data-ttu-id="e6c1c-827">段落区切り記号 (<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> カテゴリ)。 \u2029. が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-827">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>

> [!NOTE]
>  <span data-ttu-id="e6c1c-828">Unicode 規格では、区切り文字としてではなく、文字 \u000A (LF)、\u000C (FF)、および \u000D (CR) が制御文字 (<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> カテゴリのメンバー) として分類されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-828">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(char c);" />
      <MemberSignature Language="F#" Value="static member IsSeparator : char -&gt; bool" Usage="System.char.IsSeparator c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-829">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-829">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-830">指定した Unicode 文字が区切り文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-830">Indicates whether the specified Unicode character is categorized as a separator character.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-831"><see langword="true" /> が区切り文字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-831"><see langword="true" /> if <paramref name="c" /> is a separator character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-832">Unicode 標準では、区切り記号の次の3つのサブカテゴリが認識されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-832">The Unicode standard recognizes three subcategories of separators:</span></span>

-   <span data-ttu-id="e6c1c-833">スペース区切り記号 (<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> カテゴリ)。 \u0020. のような文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-833">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>

-   <span data-ttu-id="e6c1c-834">行区切り記号 (<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> カテゴリ)。 \u2028. が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-834">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>

-   <span data-ttu-id="e6c1c-835">段落区切り記号 (<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> カテゴリ)。 \u2029. が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-835">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>

> [!NOTE]
>  <span data-ttu-id="e6c1c-836">Unicode 規格では、区切り文字としてではなく、文字 \u000A (LF)、\u000C (FF)、および \u000D (CR) が制御文字 (<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> カテゴリのメンバー) として分類されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-836">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>



## Examples
 <span data-ttu-id="e6c1c-837">次の例では、区切り文字として分類されている <xref:System.Char> オブジェクトを一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-837">The following example lists the <xref:System.Char> objects that are classified as separator characters.</span></span>

 [!code-cpp[System.Char.IsSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator1.cpp#1)]
 [!code-csharp[System.Char.IsSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator1.cs#1)]
 [!code-vb[System.Char.IsSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator1.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsSeparator(System.Text.Rune)" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSeparator : string * int -&gt; bool" Usage="System.char.IsSeparator (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-838">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-838">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-839"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-839">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-840">指定した文字列の指定位置にある文字が区切り文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-840">Indicates whether the character at the specified position in a specified string is categorized as a separator character.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-841"><see langword="true" /> の <paramref name="index" /> の位置にある文字が区切り文字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-841"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a separator character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-842">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-842">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="e6c1c-843">Unicode 標準では、区切り記号の次の3つのサブカテゴリが認識されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-843">The Unicode standard recognizes three subcategories of separators:</span></span>

-   <span data-ttu-id="e6c1c-844">スペース区切り記号 (<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> カテゴリ)。 \u0020. のような文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-844">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>

-   <span data-ttu-id="e6c1c-845">行区切り記号 (<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> カテゴリ)。 \u2028. が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-845">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>

-   <span data-ttu-id="e6c1c-846">段落区切り記号 (<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> カテゴリ)。 \u2029. が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-846">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>

> [!NOTE]
>  <span data-ttu-id="e6c1c-847">Unicode 規格では、区切り文字としてではなく、文字 \u000A (LF)、\u000C (FF)、および \u000D (CR) が制御文字 (<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> カテゴリのメンバー) として分類されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-847">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>



## Examples
 <span data-ttu-id="e6c1c-848">次の例は <xref:System.Char.IsSeparator%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-848">The following example demonstrates <xref:System.Char.IsSeparator%2A>.</span></span>

 [!code-cpp[System.Char.IsSeparator#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator.cpp#10)]
 [!code-csharp[System.Char.IsSeparator#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator.cs#10)]
 [!code-vb[System.Char.IsSeparator#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator.vb#10)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-849"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-849"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-850"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-850"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-851">文字がサロゲート コード単位を持つかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-851">Indicates whether a character has a surrogate code unit.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsSurrogate : char -&gt; bool" Usage="System.char.IsSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-852">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-852">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-853">指定した文字がサロゲート コード単位を持つかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-853">Indicates whether the specified character has a surrogate code unit.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-854"><see langword="true" /> が上位サロゲートまたは下位サロゲートである場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-854"><see langword="true" /> if <paramref name="c" /> is either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-855">サロゲートは、U + D800 から U + DFFF までの範囲の UTF-16 コード単位を持つ <xref:System.Char> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-855">A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF.</span></span> <span data-ttu-id="e6c1c-856">この範囲のコード単位を持つ各文字は、<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> カテゴリに属しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-856">Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> category.</span></span> <span data-ttu-id="e6c1c-857">個々のサロゲートコード単位は独自のものではありませんが、サロゲートペアの一部として使用されている場合にのみ意味を持ちます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-857">The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair.</span></span> <span data-ttu-id="e6c1c-858">サロゲートペアの詳細については、unicode[ホームページ](https://go.microsoft.com/fwlink/?linkid=37123)の unicode 標準に関するページを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-858">For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?linkid=37123).</span></span>



## Examples
 <span data-ttu-id="e6c1c-859"><xref:System.Char.IsSurrogate%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-859">The following example demonstrates the <xref:System.Char.IsSurrogate%2A> method.</span></span>

 [!code-cpp[System.Char.IsSurrogate#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSurrogate : string * int -&gt; bool" Usage="System.char.IsSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-860">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-860">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-861"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-861">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-862">指定した文字列の指定位置にある文字がサロゲート コード単位を持つかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-862">Indicates whether the character at the specified position in a specified string has a surrogate code unit.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-863"><see langword="true" /> の <paramref name="index" /> にある文字が上位サロゲートまたは下位サロゲートである場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-863"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-864">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-864">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="e6c1c-865">サロゲートは、U + D800 から U + DFFF までの範囲の UTF-16 コード単位を持つ <xref:System.Char> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-865">A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF.</span></span> <span data-ttu-id="e6c1c-866">この範囲のコード単位を持つ各文字は、<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> カテゴリに属しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-866">Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> category.</span></span> <span data-ttu-id="e6c1c-867">個々のサロゲートコード単位は独自のものではありませんが、サロゲートペアの一部として使用されている場合にのみ意味を持ちます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-867">The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair.</span></span> <span data-ttu-id="e6c1c-868">サロゲートペアの詳細については、unicode[ホームページ](https://go.microsoft.com/fwlink/?linkid=37123)の unicode 標準に関するページを参照してください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-868">For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?linkid=37123).</span></span>



## Examples
 <span data-ttu-id="e6c1c-869">次のコード例は、<xref:System.Char.IsSurrogate%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-869">The following code example demonstrates <xref:System.Char.IsSurrogate%2A>.</span></span>

 [!code-cpp[System.Char.IsSurrogate#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-870"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-870"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-871"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-871"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSurrogatePair">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-872">指定された 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアを形成するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-872">Indicates whether two specified <see cref="T:System.Char" /> objects form a surrogate pair.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogatePair (highSurrogate As Char, lowSurrogate As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogatePair(char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="F#" Value="static member IsSurrogatePair : char * char -&gt; bool" Usage="System.char.IsSurrogatePair (highSurrogate, lowSurrogate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lowSurrogate" Type="System.Char" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="e6c1c-873">サロゲート ペアの上位サロゲートとして評価する文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-873">The character to evaluate as the high surrogate of a surrogate pair.</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="e6c1c-874">サロゲート ペアの下位サロゲートとして評価する文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-874">The character to evaluate as the low surrogate of a surrogate pair.</span></span></param>
        <summary><span data-ttu-id="e6c1c-875">指定された 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアを形成するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-875">Indicates whether the two specified <see cref="T:System.Char" /> objects form a surrogate pair.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-876"><see langword="true" /> パラメーターに指定された数値が U+D800 から U+DBFF の範囲内にあり、<paramref name="highSurrogate" /> パラメーターに指定された数値が U+DC00 から U+DFFF の範囲内にある場合は <paramref name="lowSurrogate" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-876"><see langword="true" /> if the numeric value of the <paramref name="highSurrogate" /> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <paramref name="lowSurrogate" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-877">通常、1つの文字は1つの16ビット Unicode コード単位で表されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-877">Ordinarily, a single character is represented by a single 16-bit Unicode code unit.</span></span> <span data-ttu-id="e6c1c-878">UTF-16 エンコーディングでは、サロゲートペアもサポートされています。これにより、1つの抽象文字を 2 16 ビットのコード単位で表すことができます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-878">UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units.</span></span> <span data-ttu-id="e6c1c-879">最初のコード単位は、値が U + D800 から U + DBFF の範囲内にある場合、上位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-879">The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate.</span></span> <span data-ttu-id="e6c1c-880">2番目のコード単位は、値が U + DC00 から U + DFFF の範囲内にある場合、下位サロゲートであることを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-880">The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate.</span></span> <span data-ttu-id="e6c1c-881">個々のサロゲートコードポイントは、独自のものを解釈しません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-881">Individual surrogate code points have no interpretation of their own.</span></span> <span data-ttu-id="e6c1c-882">サロゲートと Unicode 標準の詳細については、 [unicode ホームページ](https://go.microsoft.com/fwlink/?LinkId=37123)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-882">For more information about surrogates and the Unicode Standard, see the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>



## Examples
 <span data-ttu-id="e6c1c-883">次のコード例は、<xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLowSurrogate%2A>、および <xref:System.Char.IsSurrogatePair%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-883">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>

 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogatePair (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogatePair(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSurrogatePair : string * int -&gt; bool" Usage="System.char.IsSurrogatePair (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-884">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-884">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-885"><paramref name="s" /> 内の評価する文字のペアの開始位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-885">The starting position of the pair of characters to evaluate within <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-886">文字列中の指定された位置で互いに隣接する 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアを形成するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-886">Indicates whether two adjacent <see cref="T:System.Char" /> objects at a specified position in a string form a surrogate pair.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-887"><see langword="true" /> パラメーターの <paramref name="s" /> 位置と <paramref name="index" /> +1 位置に隣接して文字が含まれており、<paramref name="index" /> 位置にある文字の数値が U+D800 から U+DBFF の範囲内にあり、また、<paramref name="index" /> +1 位置にある文字の数値が U+DC00 から U+DFFF の範囲内にある場合は <paramref name="index" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-887"><see langword="true" /> if the <paramref name="s" /> parameter includes adjacent characters at positions <paramref name="index" /> and <paramref name="index" /> + 1, and the numeric value of the character at position <paramref name="index" /> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <paramref name="index" />+1 ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-888">通常、1つの文字は1つの16ビット Unicode コード単位で表されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-888">Ordinarily, a single character is represented by a single 16-bit Unicode code unit.</span></span> <span data-ttu-id="e6c1c-889">UTF-16 エンコーディングでは、サロゲートペアもサポートされています。これにより、1つの抽象文字を 2 16 ビットのコード単位で表すことができます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-889">UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units.</span></span> <span data-ttu-id="e6c1c-890">最初のコード単位は、値が U + D800 から U + DBFF の範囲内にある場合、上位サロゲートです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-890">The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate.</span></span> <span data-ttu-id="e6c1c-891">2番目のコード単位は、値が U + DC00 から U + DFFF の範囲内にある場合、下位サロゲートであることを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-891">The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate.</span></span> <span data-ttu-id="e6c1c-892">個々のサロゲートコードポイントは、独自のものを解釈しません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-892">Individual surrogate code points have no interpretation of their own.</span></span> <span data-ttu-id="e6c1c-893">サロゲートと Unicode 標準の詳細については、 [unicode ホームページ](https://go.microsoft.com/fwlink/?LinkId=37123)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-893">For more information about surrogates and the Unicode Standard, see the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>



## Examples
 <span data-ttu-id="e6c1c-894">次のコード例は、<xref:System.Char.IsHighSurrogate%2A>、<xref:System.Char.IsLowSurrogate%2A>、および <xref:System.Char.IsSurrogatePair%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-894">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>

 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-895"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-895"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-896"><paramref name="index" /> が <paramref name="s" /> 内の位置ではありません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-896"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Text.Rune" />
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSymbol">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-897">Unicode 文字が記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-897">Indicates whether a Unicode character is categorized as a symbol character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-898">有効なシンボルは <xref:System.Globalization.UnicodeCategory>内の次のカテゴリのメンバーです: `MathSymbol`、`CurrencySymbol`、`ModifierSymbol`、および `OtherSymbol`。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-898">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>

 <span data-ttu-id="e6c1c-899">Unicode 規格のシンボルは、次のような厳密に定義された文字のセットです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-899">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>

-   <span data-ttu-id="e6c1c-900">通貨記号。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-900">Currency symbols.</span></span>

-   <span data-ttu-id="e6c1c-901">Letterlike シンボルには、一連の英数字の記号と、c/o、No、™などの記号が含まれています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-901">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>

-   <span data-ttu-id="e6c1c-902">数値形式 (添字や上付き文字など)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-902">Number forms, such as subscripts and superscripts.</span></span>

-   <span data-ttu-id="e6c1c-903">算術演算子と矢印。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-903">Mathematical operators and arrows.</span></span>

-   <span data-ttu-id="e6c1c-904">幾何学的シンボル。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-904">Geometric symbols.</span></span>

-   <span data-ttu-id="e6c1c-905">テクニカルシンボル。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-905">Technical symbols.</span></span>

-   <span data-ttu-id="e6c1c-906">点字パターン。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-906">Braille patterns.</span></span>

-   <span data-ttu-id="e6c1c-907">装飾記号.</span><span class="sxs-lookup"><span data-stu-id="e6c1c-907">Dingbats.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(char c);" />
      <MemberSignature Language="F#" Value="static member IsSymbol : char -&gt; bool" Usage="System.char.IsSymbol c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-908">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-908">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-909">指定した Unicode 文字が記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-909">Indicates whether the specified Unicode character is categorized as a symbol character.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-910"><see langword="true" /> が記号である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-910"><see langword="true" /> if <paramref name="c" /> is a symbol character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-911">有効なシンボルは <xref:System.Globalization.UnicodeCategory>内の次のカテゴリのメンバーです: `MathSymbol`、`CurrencySymbol`、`ModifierSymbol`、および `OtherSymbol`。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-911">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>

 <span data-ttu-id="e6c1c-912">Unicode 規格のシンボルは、次のような厳密に定義された文字のセットです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-912">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>

-   <span data-ttu-id="e6c1c-913">通貨記号。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-913">Currency symbols.</span></span>

-   <span data-ttu-id="e6c1c-914">Letterlike シンボルには、一連の英数字の記号と、c/o、No、™などの記号が含まれています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-914">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>

-   <span data-ttu-id="e6c1c-915">数値形式 (添字や上付き文字など)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-915">Number forms, such as subscripts and superscripts.</span></span>

-   <span data-ttu-id="e6c1c-916">算術演算子と矢印。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-916">Mathematical operators and arrows.</span></span>

-   <span data-ttu-id="e6c1c-917">幾何学的シンボル。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-917">Geometric symbols.</span></span>

-   <span data-ttu-id="e6c1c-918">テクニカルシンボル。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-918">Technical symbols.</span></span>

-   <span data-ttu-id="e6c1c-919">点字パターン。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-919">Braille patterns.</span></span>

-   <span data-ttu-id="e6c1c-920">装飾記号.</span><span class="sxs-lookup"><span data-stu-id="e6c1c-920">Dingbats.</span></span>



## Examples
 <span data-ttu-id="e6c1c-921">次のコード例は、<xref:System.Char.IsSymbol%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-921">The following code example demonstrates <xref:System.Char.IsSymbol%2A>.</span></span>

 [!code-cpp[System.Char.IsSymbol#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsSymbol(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSymbol : string * int -&gt; bool" Usage="System.char.IsSymbol (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-922">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-922">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-923"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-923">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-924">指定した文字列の指定位置にある文字が記号かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-924">Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-925"><see langword="true" /> の <paramref name="index" /> の位置にある文字が記号である場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-925"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a symbol character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-926">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-926">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="e6c1c-927">有効なシンボルは <xref:System.Globalization.UnicodeCategory?displayProperty=nameWithType>内の次のカテゴリのメンバーです: `MathSymbol`、`CurrencySymbol`、`ModifierSymbol`、および `OtherSymbol`。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-927">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory?displayProperty=nameWithType>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>

 <span data-ttu-id="e6c1c-928">Unicode 規格のシンボルは、次のような厳密に定義された文字のセットです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-928">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>

-   <span data-ttu-id="e6c1c-929">通貨記号。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-929">Currency symbols.</span></span>

-   <span data-ttu-id="e6c1c-930">Letterlike シンボルには、一連の英数字の記号と、c/o、No、™などの記号が含まれています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-930">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>

-   <span data-ttu-id="e6c1c-931">数値形式 (添字や上付き文字など)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-931">Number forms, such as subscripts and superscripts.</span></span>

-   <span data-ttu-id="e6c1c-932">算術演算子と矢印。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-932">Mathematical operators and arrows.</span></span>

-   <span data-ttu-id="e6c1c-933">幾何学的シンボル。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-933">Geometric symbols.</span></span>

-   <span data-ttu-id="e6c1c-934">テクニカルシンボル。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-934">Technical symbols.</span></span>

-   <span data-ttu-id="e6c1c-935">点字パターン。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-935">Braille patterns.</span></span>

-   <span data-ttu-id="e6c1c-936">装飾記号.</span><span class="sxs-lookup"><span data-stu-id="e6c1c-936">Dingbats.</span></span>



## Examples
 <span data-ttu-id="e6c1c-937">次のコード例は、<xref:System.Char.IsSymbol%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-937">The following code example demonstrates <xref:System.Char.IsSymbol%2A>.</span></span>

 [!code-cpp[System.Char.IsSymbol#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-938"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-938"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-939"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-939"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-940">Unicode 文字が大文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-940">Indicates whether a Unicode character is categorized as an uppercase letter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(char c);" />
      <MemberSignature Language="F#" Value="static member IsUpper : char -&gt; bool" Usage="System.char.IsUpper c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-941">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-941">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-942">指定した Unicode 文字が大文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-942">Indicates whether the specified Unicode character is categorized as an uppercase letter.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-943"><see langword="true" /> が大文字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-943"><see langword="true" /> if <paramref name="c" /> is an uppercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-944">有効な大文字は <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`の次のカテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-944">Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsUpper(System.Text.Rune)" />
        <altmember cref="M:System.Text.Rune.IsLower(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsLower(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsUpper : string * int -&gt; bool" Usage="System.char.IsUpper (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-945">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-945">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-946"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-946">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-947">指定した文字列の指定位置にある文字が大文字かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-947">Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-948"><see langword="true" /> の <paramref name="index" /> の位置にある文字が大文字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-948"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is an uppercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-949">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-949">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="e6c1c-950">有効な大文字は <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`の次のカテゴリのメンバーです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-950">Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-951"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-951"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-952"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-952"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsWhiteSpace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-953">Unicode 文字が空白かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-953">Indicates whether a Unicode character is categorized as white space.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-954">空白文字は、次の Unicode 文字です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-954">White space characters are the following Unicode characters:</span></span>

-   <span data-ttu-id="e6c1c-955"><xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> カテゴリのメンバー。文字スペース (U + 0020) が含まれます。改行なし (U + 00A0)、OGHAM SPACE MARK (u + 1680)、EN QUAD (U + 2000)、EM QUAD (U + 2001)、EN SPACE (u + 2002)、EM SPACE (U + 2003)、全角スペース (u + 2004)、4/全角スペース (u + 2005)、EM スペースは 6 (U + 2006)、図はスペース (u + 2007)、スペース (u + 2008)、細いスペース (u + 2009)、ヘアスペース (u + 200A)、ナロースペース (u + 202F)、中かっこ (u + 205F)、および表意文字スペース (U + 3000) です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-955">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>

-   <span data-ttu-id="e6c1c-956"><xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> カテゴリのメンバー。行区切り文字 (U + 2028) だけで構成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-956">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>

-   <span data-ttu-id="e6c1c-957">段落区切り文字 (U + 2029) だけで構成される <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> カテゴリのメンバー。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-957">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>

-   <span data-ttu-id="e6c1c-958">文字集計 (U + 0009)、ラインフィード (U + 000A)、LINE 集計 (u + 000B)、FORM FEED (u + 000A)、キャリッジリターン (U + 000A)、および次の行 (U + 0085)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-958">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(char c);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : char -&gt; bool" Usage="System.char.IsWhiteSpace c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-959">評価する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-959">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="e6c1c-960">指定した Unicode 文字が空白かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-960">Indicates whether the specified Unicode character is categorized as white space.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-961"><see langword="true" /> が空白である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-961"><see langword="true" /> if <paramref name="c" /> is white space; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-962">空白文字は、次の Unicode 文字です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-962">White space characters are the following Unicode characters:</span></span>

-   <span data-ttu-id="e6c1c-963"><xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> カテゴリのメンバー。文字スペース (U + 0020) が含まれます。改行なし (U + 00A0)、OGHAM SPACE MARK (u + 1680)、EN QUAD (U + 2000)、EM QUAD (U + 2001)、EN SPACE (u + 2002)、EM SPACE (U + 2003)、全角スペース (u + 2004)、4/全角スペース (u + 2005)、EM スペースは 6 (U + 2006)、図はスペース (u + 2007)、スペース (u + 2008)、細いスペース (u + 2009)、ヘアスペース (u + 200A)、ナロースペース (u + 202F)、中かっこ (u + 205F)、および表意文字スペース (U + 3000) です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-963">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>

-   <span data-ttu-id="e6c1c-964"><xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> カテゴリのメンバー。行区切り文字 (U + 2028) だけで構成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-964">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>

-   <span data-ttu-id="e6c1c-965">段落区切り文字 (U + 2029) だけで構成される <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> カテゴリのメンバー。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-965">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>

-   <span data-ttu-id="e6c1c-966">文字集計 (U + 0009)、ラインフィード (U + 000A)、LINE 集計 (u + 000B)、FORM FEED (u + 000A)、キャリッジリターン (U + 000A)、および次の行 (U + 0085)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-966">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>



## Examples
 <span data-ttu-id="e6c1c-967"><xref:System.Char.IsWhiteSpace%28System.Char%29>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-967">The following example demonstrates the <xref:System.Char.IsWhiteSpace%28System.Char%29> method.</span></span>

 [!code-cpp[System.Char.IsWhiteSpace#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.IsWhiteSpace(System.Text.Rune)" />
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : string * int -&gt; bool" Usage="System.char.IsWhiteSpace (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-968">文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-968">A string.</span></span></param>
        <param name="index"><span data-ttu-id="e6c1c-969"><paramref name="s" /> 内の評価する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-969">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-970">指定した文字列の指定位置にある文字が空白かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-970">Indicates whether the character at the specified position in a specified string is categorized as white space.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-971"><see langword="true" /> の中の位置 <paramref name="index" /> にある文字が空白の場合、<paramref name="s" />。それ以外の場合、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-971"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is white space; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-972">文字列内の文字位置は0から始まるインデックスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-972">Character positions in a string are indexed starting from zero.</span></span>

 <span data-ttu-id="e6c1c-973">空白文字は、次の Unicode 文字です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-973">White space characters are the following Unicode characters:</span></span>

-   <span data-ttu-id="e6c1c-974"><xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> カテゴリのメンバー。文字スペース (U + 0020) が含まれます。改行なし (U + 00A0)、OGHAM SPACE MARK (u + 1680)、EN QUAD (U + 2000)、EM QUAD (U + 2001)、EN SPACE (u + 2002)、EM SPACE (U + 2003)、全角スペース (u + 2004)、4/全角スペース (u + 2005)、EM スペースは 6 (U + 2006)、図はスペース (u + 2007)、スペース (u + 2008)、細いスペース (u + 2009)、ヘアスペース (u + 200A)、ナロースペース (u + 202F)、中かっこ (u + 205F)、および表意文字スペース (U + 3000) です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-974">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>

-   <span data-ttu-id="e6c1c-975"><xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> カテゴリのメンバー。行区切り文字 (U + 2028) だけで構成されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-975">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>

-   <span data-ttu-id="e6c1c-976">段落区切り文字 (U + 2029) だけで構成される <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> カテゴリのメンバー。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-976">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>

-   <span data-ttu-id="e6c1c-977">文字集計 (U + 0009)、ラインフィード (U + 000A)、LINE 集計 (u + 000B)、FORM FEED (u + 000A)、キャリッジリターン (U + 000A)、および次の行 (U + 0085)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-977">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>



## Examples
 <span data-ttu-id="e6c1c-978">次のコード例は、<xref:System.Char.IsWhiteSpace%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-978">The following code example demonstrates <xref:System.Char.IsWhiteSpace%2A>.</span></span>

 [!code-cpp[System.Char.IsWhiteSpace#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-979"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-979"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6c1c-980"><paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-980"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const char MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char MaxValue;" />
      <MemberSignature Language="F#" Value="val mutable MaxValue : char" Usage="System.char.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e6c1c-981"><see cref="T:System.Char" /> の最大有効値を表します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-981">Represents the largest possible value of a <see cref="T:System.Char" />.</span></span> <span data-ttu-id="e6c1c-982">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-982">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-983">この定数の値は16進数の0xFFFF です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-983">The value of this constant is hexadecimal 0xFFFF.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const char MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MinValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char MinValue;" />
      <MemberSignature Language="F#" Value="val mutable MinValue : char" Usage="System.char.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e6c1c-984"><see cref="T:System.Char" /> の最小有効値を表します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-984">Represents the smallest possible value of a <see cref="T:System.Char" />.</span></span> <span data-ttu-id="e6c1c-985">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-985">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-986">この定数の値は16進数の0x00 です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-986">The value of this constant is hexadecimal 0x00.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static char Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; char" Usage="System.char.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-987">単一の文字を含む文字列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-987">A string that contains a single character, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="e6c1c-988">指定した文字列の値をそれと等価な Unicode 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-988">Converts the value of the specified string to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-989"><paramref name="s" /> の単一文字と等価な Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-989">A Unicode character equivalent to the sole character in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="e6c1c-990">次のコード例は、<xref:System.Char.Parse%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-990">The following code example demonstrates <xref:System.Char.Parse%2A>.</span></span>

 [!code-cpp[System.Char.Parse#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Parse/CPP/parse.cpp#15)]
 [!code-csharp[System.Char.Parse#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Parse/CS/parse.cs#15)]
 [!code-vb[System.Char.Parse#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Parse/VB/parse.vb#15)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-991"><paramref name="s" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-991"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="e6c1c-992"><paramref name="s" /> の長さが 1 ではありません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-992">The length of <paramref name="s" /> is not 1.</span></span></exception>
        <altmember cref="M:System.Char.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-other.md"><span data-ttu-id="e6c1c-993">.NET Framework におけるその他の文字列の解析</span><span class="sxs-lookup"><span data-stu-id="e6c1c-993">Parsing Other Strings in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="char.System.IComparable.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e6c1c-994">比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-994">The object to compare.</span></span></param>
        <summary><span data-ttu-id="e6c1c-995">現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-995">Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-996">比較対象オブジェクトの相対順序を示す値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-996">A value that indicates the relative order of the objects being compared.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e6c1c-997">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-997">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-998">これは、<xref:System.Char> のインスタンスが <xref:System.IComparable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-998">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IComparable> interface.</span></span>

| <span data-ttu-id="e6c1c-999">値</span><span class="sxs-lookup"><span data-stu-id="e6c1c-999">Value</span></span>             | <span data-ttu-id="e6c1c-1000">意味</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1000">Meaning</span></span>                                                                 |
|-------------------|-------------------------------------------------------------------------|
| <span data-ttu-id="e6c1c-1001">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1001">Less than zero</span></span>    | <span data-ttu-id="e6c1c-1002">このインスタンスの位置が、並べ替え順序において `value` よりも前です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1002">This instance precedes `value` in the sort order.</span></span>                       |
| <span data-ttu-id="e6c1c-1003">ゼロ</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1003">Zero</span></span>              | <span data-ttu-id="e6c1c-1004">並べ替え順序における、このインスタンスと `value` の位置が同じです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1004">This instance occurs in the same position in the sort order as `value`.</span></span> |
| <span data-ttu-id="e6c1c-1005">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1005">Greater than zero</span></span> | <span data-ttu-id="e6c1c-1006">このインスタンスの位置が、並べ替え順序において `value` よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1006">This instance follows `value` in the sort order.</span></span>                        |

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.GetTypeCode : unit -&gt; TypeCode&#xA;override this.System.IConvertible.GetTypeCode : unit -&gt; TypeCode" Usage="char.System.IConvertible.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e6c1c-1007">インスタンスの <see cref="T:System.TypeCode" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1007">Returns the <see cref="T:System.TypeCode" /> for this instance.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1008">インターフェイスを実装するクラスまたは値型の <see cref="T:System.TypeCode" /> である列挙定数。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1008">The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e6c1c-1009">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1009">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-1010">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1010">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToBoolean : IFormatProvider -&gt; bool&#xA;override this.System.IConvertible.ToBoolean : IFormatProvider -&gt; bool" Usage="char.System.IConvertible.ToBoolean provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1011">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1011">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1012">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1012">**Note** This conversion is not supported.</span></span> <span data-ttu-id="e6c1c-1013">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1013">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1014">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1014">This conversion is not supported.</span></span> <span data-ttu-id="e6c1c-1015">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1015">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="e6c1c-1016">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1016">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToByte : IFormatProvider -&gt; byte&#xA;override this.System.IConvertible.ToByte : IFormatProvider -&gt; byte" Usage="char.System.IConvertible.ToByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1017">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1017">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1018">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1018">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1019">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1019">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1020">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1020">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-1021">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1021">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="e6c1c-1022">代わりに、<xref:System.Convert.ToByte%28System.Char%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1022">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToChar : IFormatProvider -&gt; char&#xA;override this.System.IConvertible.ToChar : IFormatProvider -&gt; char" Usage="char.System.IConvertible.ToChar provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1023">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1023">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1024">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1024">For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1025">現在の <see cref="T:System.Char" /> オブジェクトの未変更の値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1025">The value of the current <see cref="T:System.Char" /> object unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1026">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1026">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-1027">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1027">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime&#xA;override this.System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime" Usage="char.System.IConvertible.ToDateTime provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1028">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1028">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1029">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1029">**Note** This conversion is not supported.</span></span> <span data-ttu-id="e6c1c-1030">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1030">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1031">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1031">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="e6c1c-1032">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1032">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal&#xA;override this.System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal" Usage="char.System.IConvertible.ToDecimal provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1033">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1033">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1034">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1034">**Note** This conversion is not supported.</span></span> <span data-ttu-id="e6c1c-1035">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1035">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1036">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1036">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="e6c1c-1037">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1037">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDouble : IFormatProvider -&gt; double&#xA;override this.System.IConvertible.ToDouble : IFormatProvider -&gt; double" Usage="char.System.IConvertible.ToDouble provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1038">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1038">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1039">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1039">**Note** This conversion is not supported.</span></span> <span data-ttu-id="e6c1c-1040">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1040">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1041">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1041">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="e6c1c-1042">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1042">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt16 : IFormatProvider -&gt; int16&#xA;override this.System.IConvertible.ToInt16 : IFormatProvider -&gt; int16" Usage="char.System.IConvertible.ToInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1043">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1043">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1044">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1044">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1045">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1045">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1046">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1046">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-1047">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1047">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="e6c1c-1048">代わりに、<xref:System.Convert.ToInt16%28System.Char%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1048">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt32 : IFormatProvider -&gt; int&#xA;override this.System.IConvertible.ToInt32 : IFormatProvider -&gt; int" Usage="char.System.IConvertible.ToInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1049">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1049">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1050">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1050">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1051">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1051">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1052">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1052">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-1053">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1053">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="e6c1c-1054">代わりに、<xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1054">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt64 : IFormatProvider -&gt; int64&#xA;override this.System.IConvertible.ToInt64 : IFormatProvider -&gt; int64" Usage="char.System.IConvertible.ToInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1055">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1055">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1056">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1056">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1057">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1057">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1058">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1058">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-1059">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1059">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="e6c1c-1060">代わりに、<xref:System.Convert.ToInt64%28System.Char%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1060">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte&#xA;override this.System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte" Usage="char.System.IConvertible.ToSByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1061">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1061">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1062">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1062">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1063">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1063">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1064">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1064">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-1065">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1065">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="e6c1c-1066">代わりに、<xref:System.Convert.ToSByte%28System.Char%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1066">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSingle : IFormatProvider -&gt; single&#xA;override this.System.IConvertible.ToSingle : IFormatProvider -&gt; single" Usage="char.System.IConvertible.ToSingle provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1067">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1067">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1068">**注**: この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1068">**Note** This conversion is not supported.</span></span> <span data-ttu-id="e6c1c-1069">変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1069">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1070">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1070">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="e6c1c-1071">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1071">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToString : IFormatProvider -&gt; string&#xA;override this.System.IConvertible.ToString : IFormatProvider -&gt; string" Usage="char.System.IConvertible.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1072">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1072">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1073">指定したカルチャ固有の書式情報を使用して、このインスタンスの値を等価の文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1073">Converts the value of this instance to an equivalent string, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1074">このインスタンスの値と等価な文字列。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1074">A string equivalent to the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="e6c1c-1075">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1075">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-1076">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1076">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToType (type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToType : Type * IFormatProvider -&gt; obj&#xA;override this.System.IConvertible.ToType : Type * IFormatProvider -&gt; obj" Usage="char.System.IConvertible.ToType (type, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e6c1c-1077"><see cref="T:System.Type" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1077">A <see cref="T:System.Type" /> object.</span></span></param>
        <param name="provider"><span data-ttu-id="e6c1c-1078"><see cref="T:System.IFormatProvider" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1078">An <see cref="T:System.IFormatProvider" /> object.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1079">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1079">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1080">指定した型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1080">An object of the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1081">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1081">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-1082">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1082">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="e6c1c-1083">代わりに、<xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1083">The recommended alternative is to call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method instead.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-1084"><paramref name="type" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1084"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="e6c1c-1085">現在の <see cref="T:System.Char" /> オブジェクトの値を、<paramref name="type" /> パラメーターで指定された型に変換できません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1085">The value of the current <see cref="T:System.Char" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16&#xA;override this.System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16" Usage="char.System.IConvertible.ToUInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1086"><see cref="T:System.IFormatProvider" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1086">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="e6c1c-1087">(<see langword="null" />  パラメーターは無視されるため、<paramref name="provider" /> を指定してください)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1087">(Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="e6c1c-1088">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1088">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1089">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1089">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1090">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1090">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-1091">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1091">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="e6c1c-1092">代わりに、<xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1092">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32&#xA;override this.System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32" Usage="char.System.IConvertible.ToUInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1093"><see cref="T:System.IFormatProvider" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1093">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="e6c1c-1094">(<see langword="null" />  パラメーターは無視されるため、<paramref name="provider" /> を指定してください)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1094">(Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="e6c1c-1095">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1095">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1096">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1096">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1097">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1097">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-1098">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1098">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="e6c1c-1099">代わりに、<xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1099">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64&#xA;override this.System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64" Usage="char.System.IConvertible.ToUInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1100"><see cref="T:System.IFormatProvider" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1100">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="e6c1c-1101">(<see langword="null" />  パラメーターは無視されるため、<paramref name="provider" /> を指定してください)。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1101">(Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="e6c1c-1102">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1102">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1103">現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1103">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1104">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1104">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e6c1c-1105">これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1105">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="e6c1c-1106">代わりに、<xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1106">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-1107">Unicode 文字の値をそれと等価な小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1107">Converts the value of a Unicode character to its lowercase equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLower(char c);" />
      <MemberSignature Language="F#" Value="static member ToLower : char -&gt; char" Usage="System.char.ToLower c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-1108">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1108">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1109">Unicode 文字の値をそれと等価な小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1109">Converts the value of a Unicode character to its lowercase equivalent.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1110"><paramref name="c" /> の小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1110">The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1111">大文字と小文字の規則は、現在のカルチャから取得されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1111">Casing rules are obtained from the current culture.</span></span>

 <span data-ttu-id="e6c1c-1112">文字列を小文字に変換するには、<xref:System.String.ToLower%2A?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1112">Use <xref:System.String.ToLower%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>



## Examples
 <span data-ttu-id="e6c1c-1113">次の例は <xref:System.Char.ToLower%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1113">The following example demonstrates <xref:System.Char.ToLower%2A>.</span></span>

 [!code-cpp[System.Char.ToLower#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="e6c1c-1114">「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」で説明されているように、既定値を置き換える文字の大文字と小文字の区別のメソッドの呼び出しは避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1114">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values.</span></span> <span data-ttu-id="e6c1c-1115">代わりに、パラメーターを明示的に指定する必要があるメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1115">Instead, you should call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="e6c1c-1116">現在のカルチャの大文字と小文字の表記規則を使用して文字を小文字に変換するには、その <paramref name="culture" /> パラメーターに <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> 値を指定して、<see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" /> メソッドのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1116">To convert a character to lowercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (c As Char, culture As CultureInfo) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLower(char c, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToLower : char * System.Globalization.CultureInfo -&gt; char" Usage="System.char.ToLower (c, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-1117">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1117">The Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="e6c1c-1118">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1118">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1119">指定したカルチャ固有の書式情報を使用して、指定した Unicode 文字の値をそれと等価な小文字へ変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1119">Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1120"><paramref name="c" /> に基づいて変換された、<paramref name="culture" /> の小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1120">The lowercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1121">文字列を小文字に変換するには、<xref:System.String.ToLower%2A?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1121">Use <xref:System.String.ToLower%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>



## Examples
 <span data-ttu-id="e6c1c-1122">次のコード例は、<xref:System.Char.ToLower%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1122">The following code example demonstrates <xref:System.Char.ToLower%2A>.</span></span>

 [!code-cpp[System.Char.ToLower#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-1123"><paramref name="culture" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1123"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public static char ToLowerInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLowerInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLowerInvariant(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLowerInvariant (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLowerInvariant(char c);" />
      <MemberSignature Language="F#" Value="static member ToLowerInvariant : char -&gt; char" Usage="System.char.ToLowerInvariant c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-1124">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1124">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1125">インバリアント カルチャの大文字と小文字の規則を使用して、Unicode 文字の値を対応する小文字表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1125">Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1126"><paramref name="c" /> パラメーターの小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変更なしでそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1126">The lowercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1127">アプリケーションが現在のカルチャの影響を受けず、予測可能な方法で変更された文字のケースに依存する場合は、<xref:System.Char.ToLowerInvariant%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1127">If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, then use the <xref:System.Char.ToLowerInvariant%2A> method.</span></span> <span data-ttu-id="e6c1c-1128"><xref:System.Char.ToLowerInvariant%2A> メソッドは `ToLower(Char, CultureInfo.InvariantCulture)`と同じです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1128">The <xref:System.Char.ToLowerInvariant%2A> method is equivalent to `ToLower(Char, CultureInfo.InvariantCulture)`.</span></span>

 <span data-ttu-id="e6c1c-1129">文字列を小文字に変換するには、<xref:System.String.ToLowerInvariant%2A?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1129">Use <xref:System.String.ToLowerInvariant%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.ToLowerInvariant(System.Text.Rune)" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-1130">このインスタンスの値を、それと等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1130">Converts the value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="char.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e6c1c-1131">このインスタンスの値を、それと等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1131">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1132">このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1132">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="e6c1c-1133">次のコード例は、<xref:System.Char.ToString%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1133">The following code example demonstrates <xref:System.Char.ToString%2A>.</span></span>

 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (c As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(char c);" />
      <MemberSignature Language="F#" Value="static member ToString : char -&gt; string" Usage="System.char.ToString c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-1134">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1134">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1135">指定した Unicode 文字をそれと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1135">Converts the specified Unicode character to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1136"><paramref name="c" /> の値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1136">The string representation of the value of <paramref name="c" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="e6c1c-1137">次のコード例は、<xref:System.Char.ToString%2A>を示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1137">The following code example demonstrates <xref:System.Char.ToString%2A>.</span></span>

 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="char.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="e6c1c-1138">(予約済み) カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1138">(Reserved) An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1139">指定したカルチャ固有の書式情報を使用して、このインスタンスの値をそれと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1139">Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1140"><paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1140">The string representation of the value of this instance as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1141">`provider` パラメーターは無視されます。この操作には参加しません。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1141">The `provider` parameter is ignored; it does not participate in this operation.</span></span>



## Examples
 <span data-ttu-id="e6c1c-1142">次のコード例は、<xref:System.Char.ToString%2A>のオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1142">The following code example demonstrates an overload of <xref:System.Char.ToString%2A>.</span></span>

 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e6c1c-1143">Unicode 文字の値をそれと等価な大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1143">Converts the value of a Unicode character to its uppercase equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpper(char c);" />
      <MemberSignature Language="F#" Value="static member ToUpper : char -&gt; char" Usage="System.char.ToUpper c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-1144">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1144">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1145">Unicode 文字の値をそれと等価な大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1145">Converts the value of a Unicode character to its uppercase equivalent.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1146"><paramref name="c" /> の大文字表現。<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、またはその大文字表現が存在しない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1146">The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1147">大文字と小文字の規則は、現在のカルチャから取得されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1147">Casing rules are obtained from the current culture.</span></span>

 <span data-ttu-id="e6c1c-1148">文字列を大文字に変換するには、<xref:System.String.ToUpper%2A?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1148">Use <xref:System.String.ToUpper%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>



## Examples
 <span data-ttu-id="e6c1c-1149">次の例では、配列内の各文字を、それと等価な大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1149">The following example converts each character in an array to its uppercase equivalent.</span></span>

 [!code-csharp[System.Char.ToUpper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper1.cs#1)]
 [!code-vb[System.Char.ToUpper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper1.vb#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="e6c1c-1150">「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」で説明されているように、既定値を置き換える文字の大文字と小文字の区別のメソッドの呼び出しは避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1150">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values.</span></span> <span data-ttu-id="e6c1c-1151">代わりに、パラメーターを明示的に指定する必要があるメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1151">Instead, you should call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="e6c1c-1152">現在のカルチャの大文字と小文字の表記規則を使用して文字を大文字に変換するには、その <paramref name="culture" /> パラメーターに <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> の値を指定して、<see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" /> メソッドのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1152">To convert a character to uppercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (c As Char, culture As CultureInfo) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpper(char c, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToUpper : char * System.Globalization.CultureInfo -&gt; char" Usage="System.char.ToUpper (c, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-1153">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1153">The Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="e6c1c-1154">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1154">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1155">指定したカルチャ固有の書式情報を使用して、指定した Unicode 文字の値をそれと等価な大文字へ変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1155">Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1156"><paramref name="c" /> に基づいて変換された、<paramref name="culture" /> の大文字表現。<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、またはその大文字表現が存在しない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1156">The uppercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1157">文字列を大文字に変換するには、<xref:System.String.ToUpper%2A?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1157">Use <xref:System.String.ToUpper%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>



## Examples
 <span data-ttu-id="e6c1c-1158">次の例では、配列内の各文字を、en-us カルチャ、インバリアントカルチャ、および tr-TR カルチャに対応する大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1158">The following example converts each character in an array to its uppercase equivalent for the en-US culture, the invariant culture, and the tr-TR culture.</span></span> <span data-ttu-id="e6c1c-1159">この例では、各小文字の大文字と小文字は、1つのケースを除くすべてのカルチャで同一です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1159">In this example, the uppercase equivalent of each lowercase letter is identical for all cultures except for one case.</span></span> <span data-ttu-id="e6c1c-1160">小文字の "i" 文字 (U + 0069) は、en-us およびインバリアントカルチャの "i" (U + 0049) に変換されますが、tr-TR カルチャでは "i" (U + 0130) に変換されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1160">The lowercase "i" character (U+0069) converts to "I" (U+0049) in the en-US and invariant cultures, but to "İ" (U+0130) in the tr-TR culture.</span></span>

 [!code-csharp[System.Char.ToUpper#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper5.cs#2)]
 [!code-vb[System.Char.ToUpper#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper5.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e6c1c-1161"><paramref name="culture" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1161"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public static char ToUpperInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpperInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpperInvariant(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpperInvariant (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpperInvariant(char c);" />
      <MemberSignature Language="F#" Value="static member ToUpperInvariant : char -&gt; char" Usage="System.char.ToUpperInvariant c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="e6c1c-1162">変換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1162">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1163">インバリアント カルチャの大文字と小文字の規則を使用して、Unicode 文字の値を対応する大文字表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1163">Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1164"><paramref name="c" /> パラメーターの大文字表現。または、<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変更なしでそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1164">The uppercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1165">アプリケーションが現在のカルチャの影響を受けず、予測可能な方法で変更された文字のケースに依存する場合は、<xref:System.Char.ToUpperInvariant%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1165">If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, use the <xref:System.Char.ToUpperInvariant%2A> method.</span></span>  <span data-ttu-id="e6c1c-1166"><xref:System.Char.ToUpperInvariant%2A> メソッドは `ToUpper(Char, CultureInfo.InvariantCulture)`と同じです。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1166">The <xref:System.Char.ToUpperInvariant%2A> method is equivalent to `ToUpper(Char, CultureInfo.InvariantCulture)`.</span></span>

 <span data-ttu-id="e6c1c-1167">文字列を大文字に変換するには、<xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1167">Use <xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Rune.ToUpperInvariant(System.Text.Rune)" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out char result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] char&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.TryParse(System.String,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] char % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * char -&gt; bool" Usage="System.char.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Char" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="e6c1c-1168">単一の文字を含む文字列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1168">A string that contains a single character, or <see langword="null" />.</span></span></param>
        <param name="result"><span data-ttu-id="e6c1c-1169">変換に成功した場合、メソッドから制御が戻ったときに、<paramref name="s" /> 内の単一文字に相当する Unicode 文字が格納されます。変換に失敗した場合は、未定義の値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1169">When this method returns, contains a Unicode character equivalent to the sole character in <paramref name="s" />, if the conversion succeeded, or an undefined value if the conversion failed.</span></span> <span data-ttu-id="e6c1c-1170"><paramref name="s" /> パラメーターが <see langword="null" /> の場合、または <paramref name="s" /> の長さが 1 でない場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1170">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or the length of <paramref name="s" /> is not 1.</span></span> <span data-ttu-id="e6c1c-1171">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1171">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="e6c1c-1172">指定した文字列の値をそれと等価な Unicode 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1172">Converts the value of the specified string to its equivalent Unicode character.</span></span> <span data-ttu-id="e6c1c-1173">リターン コードは、変換が成功したか失敗したかを示します。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1173">A return code indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="e6c1c-1174"><see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1174"><see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e6c1c-1175"><xref:System.Char.TryParse%2A> メソッドは、<xref:System.Char.Parse%2A> メソッドに似ていますが、変換に失敗した場合に <xref:System.Char.TryParse%2A> メソッドが例外をスローしない点が異なります。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1175">The <xref:System.Char.TryParse%2A> method is like the <xref:System.Char.Parse%2A> method, except the <xref:System.Char.TryParse%2A> method does not throw an exception if the conversion fails.</span></span>



## Examples
 <span data-ttu-id="e6c1c-1176">次のコード例は、いくつかの基本型の <xref:System.Char.TryParse%2A> メソッドのオーバーロードと、<xref:System.DateTime> 基本型の <xref:System.DateTime.TryParseExact%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1176">The following code example demonstrates overloads of the <xref:System.Char.TryParse%2A> method for several base types, and the <xref:System.DateTime.TryParseExact%2A> method for the <xref:System.DateTime> base type.</span></span>

 [!code-cpp[T.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.TryParse/CPP/tp.cpp#1)]
 [!code-csharp[T.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.TryParse/CS/tp.cs#1)]
 [!code-vb[T.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.TryParse/VB/tp.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="M:System.Char.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-other.md"><span data-ttu-id="e6c1c-1177">.NET Framework におけるその他の文字列の解析</span><span class="sxs-lookup"><span data-stu-id="e6c1c-1177">Parsing Other Strings in the .NET Framework</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
