<Type Name="LocalDataStoreSlot" FullName="System.LocalDataStoreSlot">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ceb64a9830e1a5db6369082ce17eecd9c5552054" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82485790" /></Metadata><TypeSignature Language="C#" Value="public sealed class LocalDataStoreSlot" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LocalDataStoreSlot extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.LocalDataStoreSlot" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LocalDataStoreSlot" />
  <TypeSignature Language="C++ CLI" Value="public ref class LocalDataStoreSlot sealed" />
  <TypeSignature Language="F#" Value="type LocalDataStoreSlot = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="73d30-101">ローカル データを格納するメモリ スロットをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="73d30-101">Encapsulates a memory slot to store local data.</span></span> <span data-ttu-id="73d30-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="73d30-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73d30-103">.NET Framework には、スレッドローカルストレージ (TLS) を使用するための2つのメカニズム (スレッド相対静的フィールドとデータスロット) が用意されています。</span><span class="sxs-lookup"><span data-stu-id="73d30-103">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields, and data slots.</span></span>  
  
-   <span data-ttu-id="73d30-104">スレッド相対静的フィールドは、<xref:System.ThreadStaticAttribute> 属性でマークされた `static` フィールド (Visual Basic の`Shared` フィールド) です。</span><span class="sxs-lookup"><span data-stu-id="73d30-104">Thread-relative static fields are `static` fields (`Shared` fields in Visual Basic) that are marked with the <xref:System.ThreadStaticAttribute> attribute.</span></span> <span data-ttu-id="73d30-105">データスロットより優れたパフォーマンスを提供し、コンパイル時の型チェックを有効にします。</span><span class="sxs-lookup"><span data-stu-id="73d30-105">They provide better performance than data slots, and enable compile-time type checking.</span></span>  
  
-   <span data-ttu-id="73d30-106">データスロットは、スレッド相対静的フィールドよりも低速で使いにくい。</span><span class="sxs-lookup"><span data-stu-id="73d30-106">Data slots are slower and more awkward to use than thread-relative static fields.</span></span> <span data-ttu-id="73d30-107">また、データは <xref:System.Object>型として格納されるため、使用する前に正しい型にキャストする必要があります。</span><span class="sxs-lookup"><span data-stu-id="73d30-107">Also, data is stored as type <xref:System.Object>, so you must cast it to the correct type before using it.</span></span> <span data-ttu-id="73d30-108">ただし、コンパイル時に静的フィールドを割り当てるのに十分な情報がない場合は、データスロットを使用できます。</span><span class="sxs-lookup"><span data-stu-id="73d30-108">However, you can use data slots when you have insufficient information at compile time to allocate static fields.</span></span>  
  
 <span data-ttu-id="73d30-109">TLS の使用の詳細については、「[スレッドローカルストレージ: スレッド相対静的フィールドとデータスロット](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="73d30-109">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="73d30-110">同様に、.NET Framework にはコンテキストローカルストレージを使用するための2つのメカニズムがあります。コンテキスト相対静的フィールドとデータスロットです。</span><span class="sxs-lookup"><span data-stu-id="73d30-110">Similarly, the .NET Framework provides two mechanisms for using context local storage: context-relative static fields and data slots.</span></span> <span data-ttu-id="73d30-111">コンテキスト相対静的フィールドは、<xref:System.ContextStaticAttribute> 属性でマークされた静的フィールドです。</span><span class="sxs-lookup"><span data-stu-id="73d30-111">Context-relative static fields are static fields that are marked with the <xref:System.ContextStaticAttribute> attribute.</span></span> <span data-ttu-id="73d30-112">これら2つのメカニズムを使用する間のトレードオフは、スレッド相対静的フィールドとデータスロットを使用する場合のトレードオフに似ています。</span><span class="sxs-lookup"><span data-stu-id="73d30-112">The trade-offs between using these two mechanisms are similar to the tradeoffs between using thread-relative static fields and data slots.</span></span>  
  
 <span data-ttu-id="73d30-113"><xref:System.LocalDataStoreSlot> 構造体は、スレッドとコンテキストがスレッド固有のデータとコンテキスト固有のデータを格納するために使用できるローカルストアのメモリ機構として機能します。</span><span class="sxs-lookup"><span data-stu-id="73d30-113">The <xref:System.LocalDataStoreSlot> structure serves as a local store memory mechanism that threads and contexts can use to store thread-specific and context-specific data, respectively.</span></span> <span data-ttu-id="73d30-114">共通言語ランタイムは、作成時に各プロセスに複数スロットのデータストア配列を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="73d30-114">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="73d30-115">スレッドまたはコンテキストは、データストアにデータスロットを割り当てたり、スロットにデータ値を格納および取得したり、スレッドまたはコンテキストオブジェクトの有効期限が切れた後で再利用できるようにデータスロットを解放したりするために、さまざまな関数を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="73d30-115">The thread or context calls various functions to allocate a data slot in the data store, to store and retrieve a data value in the slot, and to free a data slot for reuse after the thread or context object expires.</span></span>  
  
 <span data-ttu-id="73d30-116">データスロットはスレッドまたはコンテキストごとに一意です。これらの値は、スレッドまたはコンテキストオブジェクト間で共有されません。</span><span class="sxs-lookup"><span data-stu-id="73d30-116">The data slots are unique per thread or context; their values are not shared between the thread or context objects.</span></span> <span data-ttu-id="73d30-117">データスロットは、名前またはインデックス番号によって割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="73d30-117">Data slots can be allocated by a name or by an index number.</span></span>  
  
 <span data-ttu-id="73d30-118">ローカルデータの格納の詳細については、「<xref:System.Threading.Thread>」または「<xref:System.Runtime.Remoting.Contexts.Context>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="73d30-118">For more information about storing local data, see <xref:System.Threading.Thread> or <xref:System.Runtime.Remoting.Contexts.Context>.</span></span> <span data-ttu-id="73d30-119"><xref:System.LocalDataStoreSlot> クラスは、<xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=nameWithType>、<xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=nameWithType>、<xref:System.Threading.Thread.GetData%2A?displayProperty=nameWithType>、<xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=nameWithType>などのメソッドで使用されます。独自のメソッドを使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="73d30-119">The <xref:System.LocalDataStoreSlot> class is used with methods such as <xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=nameWithType>, <xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=nameWithType>, <xref:System.Threading.Thread.GetData%2A?displayProperty=nameWithType>, and <xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=nameWithType>; it does not have any methods of its own that you need to use.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Runtime.Remoting.Contexts.Context" />
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~LocalDataStoreSlot ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.LocalDataStoreSlot.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!LocalDataStoreSlot ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="localDataStoreSlot.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="73d30-120">ガベージ コレクターが <see cref="T:System.LocalDataStoreSlot" /> オブジェクトを再利用しているときに、リソースが解放され、他のクリーンアップ操作が確実に実行されるようにします。</span><span class="sxs-lookup"><span data-stu-id="73d30-120">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.LocalDataStoreSlot" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73d30-121">現在のオブジェクトを完了する準備が整うと、ガベージコレクターは <xref:System.LocalDataStoreSlot.Finalize%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="73d30-121">The garbage collector calls <xref:System.LocalDataStoreSlot.Finalize%2A> when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>
