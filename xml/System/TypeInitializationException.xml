<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="47970d6c34bc536fbad95329601734c8ce81fb23" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83528618" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeInitializationException : Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TypeInitializationException extends System.Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TypeInitializationException extends System.SystemException" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit SystemException" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7adb5-101">クラス初期化子によってスローされた例外をラップするラッパーとしてスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="7adb5-101">The exception that is thrown as a wrapper around the exception thrown by the class initializer.</span></span> <span data-ttu-id="7adb5-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="7adb5-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7adb5-103">クラス初期化子で型の初期化に失敗すると、<xref:System.TypeInitializationException> が作成され、その型のクラス初期化子でスローされる例外への参照が渡されます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-103">When a class initializer fails to initialize a type, a <xref:System.TypeInitializationException> is created and passed a reference to the exception thrown by the type's class initializer.</span></span> <span data-ttu-id="7adb5-104"><xref:System.TypeInitializationException> の <xref:System.Exception.InnerException%2A> プロパティは、基になる例外を保持します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-104">The <xref:System.Exception.InnerException%2A> property of <xref:System.TypeInitializationException> holds the underlying exception.</span></span>  
  
 <span data-ttu-id="7adb5-105">通常、<xref:System.TypeInitializationException> 例外は、アプリケーションの続行を妨げる致命的な状態 (ランタイムが型をインスタンス化できません) を反映します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-105">Typically, the <xref:System.TypeInitializationException> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.</span></span>  <span data-ttu-id="7adb5-106">通常、<xref:System.TypeInitializationException> は、アプリケーションの実行環境で何らかの変更が発生した場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-106">Most commonly, the <xref:System.TypeInitializationException> is thrown in response to some change in the executing environment of the application.</span></span> <span data-ttu-id="7adb5-107">そのため、デバッグコードのトラブルシューティングを行う場合以外は、`try`/`catch` ブロックで例外を処理することはできません。</span><span class="sxs-lookup"><span data-stu-id="7adb5-107">Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a `try`/`catch` block.</span></span> <span data-ttu-id="7adb5-108">代わりに、例外の原因を調査して削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7adb5-108">Instead, the cause of the exception should be investigated and eliminated.</span></span>  
  
 <span data-ttu-id="7adb5-109"><xref:System.TypeInitializationException> では、値0x80131534 を持つ HRESULT COR_E_TYPEINITIALIZATION を使用します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-109"><xref:System.TypeInitializationException> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.</span></span>  
  
 <span data-ttu-id="7adb5-110"><xref:System.TypeInitializationException>インスタンスの初期プロパティ値の一覧については、<xref:System.TypeInitializationException.%23ctor%2A>コンストラクターを参照してください。</span><span class="sxs-lookup"><span data-stu-id="7adb5-110">For a list of initial property values for an instance of <xref:System.TypeInitializationException>, see the <xref:System.TypeInitializationException.%23ctor%2A> constructors.</span></span>  
  
 <span data-ttu-id="7adb5-111">次のセクションでは、<xref:System.TypeInitializationException> 例外がスローされる状況について説明します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-111">The following sections describe some of the situations in which a <xref:System.TypeInitializationException> exception is thrown.</span></span>  
  
- [<span data-ttu-id="7adb5-112">静的コンストラクターと TypeInitializationException 例外</span><span class="sxs-lookup"><span data-stu-id="7adb5-112">Static constructors and the TypeInitializationException exception</span></span>](#Static)   
- [<span data-ttu-id="7adb5-113">正規表現の一致のタイムアウト値</span><span class="sxs-lookup"><span data-stu-id="7adb5-113">Regular expression match timeout values</span></span>](#Timeout)   
- [<span data-ttu-id="7adb5-114">予定表と文化データ</span><span class="sxs-lookup"><span data-stu-id="7adb5-114">Calendars and cultural data</span></span>](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception"></a><span data-ttu-id="7adb5-115">静的コンストラクターと TypeInitializationException</span><span class="sxs-lookup"><span data-stu-id="7adb5-115">Static constructors and the TypeInitializationException</span></span>

 <span data-ttu-id="7adb5-116">静的コンストラクター (存在する場合) は、型の新しいインスタンスを作成する前に、ランタイムによって自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-116">A static constructor, if one exists, is called automatically by the runtime before creating a new instance of a type.</span></span> <span data-ttu-id="7adb5-117">静的コンストラクターは、開発者が明示的に定義できます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-117">Static constructors can be explicitly defined by a developer.</span></span> <span data-ttu-id="7adb5-118">静的コンストラクターが明示的に定義されていない場合、コンパイラは、型のC#`static` (の場合) または `Shared` (Visual Basic) メンバーを初期化するために、それを自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-118">If a static  constructor is not explicitly defined, compilers automatically create one to initialize any `static` (in C#) or `Shared` (in Visual Basic) members of the type.</span></span>  <span data-ttu-id="7adb5-119">静的コンストラクターの詳細については、「[静的コンストラクター](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7adb5-119">For more information on static constructors, see [Static Constructors](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).</span></span>  
  
 <span data-ttu-id="7adb5-120">一般に、静的コンストラクターが型をインスタンス化できない場合、<xref:System.TypeInitializationException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-120">Most commonly, a <xref:System.TypeInitializationException> exception is thrown when a static constructor is unable to instantiate a type.</span></span>  <span data-ttu-id="7adb5-121"><xref:System.Exception.InnerException%2A> プロパティは、静的コンストラクターが型をインスタンス化できなかった理由を示します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-121">The <xref:System.Exception.InnerException%2A> property indicates why the static constructor was unable to instantiate the type.</span></span> <span data-ttu-id="7adb5-122"><xref:System.TypeInitializationException> 例外の一般的な原因のいくつかを次に示します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-122">Some of the more common causes of a <xref:System.TypeInitializationException> exception are:</span></span>  
  
- <span data-ttu-id="7adb5-123">静的コンストラクターでのハンドルされない例外</span><span class="sxs-lookup"><span data-stu-id="7adb5-123">An unhandled exception in a static constructor</span></span>  
 
   <span data-ttu-id="7adb5-124">静的コンストラクターで例外がスローされた場合、その例外は <xref:System.TypeInitializationException> 例外でラップされ、型をインスタンス化することはできません。</span><span class="sxs-lookup"><span data-stu-id="7adb5-124">If an exception is thrown in a static constructor, that exception is wrapped in a <xref:System.TypeInitializationException> exception, and the type cannot be instantiated.</span></span>  
  
   <span data-ttu-id="7adb5-125">多くの場合、この例外のトラブルシューティングが困難になるのは、静的コンストラクターがソースコードで明示的に定義されていないことです。</span><span class="sxs-lookup"><span data-stu-id="7adb5-125">What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code.</span></span> <span data-ttu-id="7adb5-126">次の場合、型に静的コンストラクターが存在します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-126">A static constructor exists in a type if:</span></span>  
  
   -   <span data-ttu-id="7adb5-127">これは、型のメンバーとして明示的に定義されています。</span><span class="sxs-lookup"><span data-stu-id="7adb5-127">It has been explicitly defined as a member of a type.</span></span>  
  
   -   <span data-ttu-id="7adb5-128">この型は、1つC#のステートメントで宣言および初期化される `static` (では) または `Shared` (Visual Basic) の変数を持ちます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-128">The type has  `static` (in C#) or `Shared` (in Visual Basic) variables that are declared and initialized in a single statement.</span></span> <span data-ttu-id="7adb5-129">この場合、言語コンパイラによって、型の静的コンストラクターが生成されます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-129">In this case, the language compiler generates a static constructor for the type.</span></span> <span data-ttu-id="7adb5-130">[IL 逆アセンブラー](~/docs/framework/tools/ildasm-exe-il-disassembler.md)などのユーティリティを使用して検査できます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-130">You can inspect it by using a utility such as [IL Disassembler](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span> <span data-ttu-id="7adb5-131">たとえば、と VB コンパイラC#が次の例をコンパイルすると、次のような静的コンストラクターの IL が生成されます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-131">For instance, when the C# and VB compilers compile the following example, they generate the IL for a static constructor that is similar to this:</span></span>  
  
   ```  
   .method private specialname rtspecialname static   
           void  .cctor() cil managed  
   {  
     // Code size       12 (0xc)  
     .maxstack  8  
     IL_0000:  ldc.i4.3  
     IL_0001:  newobj     instance void TestClass::.ctor(int32)  
     IL_0006:  stsfld     class TestClass Example::test  
     IL_000b:  ret  
   } // end of method Example::.cctor  
   ```  
  
   <span data-ttu-id="7adb5-132">次の例は、コンパイラによって生成された静的コンストラクターによってスローされた <xref:System.TypeInitializationException> 例外を示しています。</span><span class="sxs-lookup"><span data-stu-id="7adb5-132">The following example shows a <xref:System.TypeInitializationException> exception thrown by a compiler-generated static constructor.</span></span> <span data-ttu-id="7adb5-133">`Example` クラスには、値3をC#クラスコンストラクターに渡すことによってインスタンス化される、`TestClass` 型の `static` (では) または `Shared` (Visual Basic) フィールドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="7adb5-133">The `Example` class includes a `static` (in C#) or `Shared` (in Visual Basic) field of type `TestClass` that is instantiated by passing a value of 3 to its class constructor.</span></span>  <span data-ttu-id="7adb5-134">ただし、この値は無効です。0または1の値のみが許可されます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-134">That value, however, is illegal; only values of 0 or 1 are permitted.</span></span> <span data-ttu-id="7adb5-135">その結果、`TestClass` クラスコンストラクターは <xref:System.ArgumentOutOfRangeException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="7adb5-135">As a result, the `TestClass` class constructor throws an <xref:System.ArgumentOutOfRangeException>.</span></span> <span data-ttu-id="7adb5-136">この例外は処理されないため、<xref:System.TypeInitializationException> 例外でラップされます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-136">Since this exception is not handled, it is wrapped in a <xref:System.TypeInitializationException> exception.</span></span>  
  
   [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
   [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
   <span data-ttu-id="7adb5-137">例外メッセージには、<xref:System.Exception.InnerException%2A> プロパティに関する情報が表示されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="7adb5-137">Note that the exception message displays information about the <xref:System.Exception.InnerException%2A> property.</span></span>  
  
- <span data-ttu-id="7adb5-138">見つからないアセンブリまたはデータファイル</span><span class="sxs-lookup"><span data-stu-id="7adb5-138">A missing assembly or data file</span></span>  
 
   <span data-ttu-id="7adb5-139"><xref:System.TypeInitializationException> 例外の一般的な原因として、アプリケーションの開発環境やテスト環境に存在していたアセンブリまたはデータファイルがランタイム環境に存在しないことが挙げられます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-139">A common cause of a <xref:System.TypeInitializationException> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment.</span></span> <span data-ttu-id="7adb5-140">たとえば、次のコマンドライン構文を使用して、Missing1a という名前のアセンブリに次の例をコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-140">For example, you can compile the following example to an assembly named Missing1a.dll by using this command-line syntax:</span></span>  
  
   ```csharp  
   csc -t:library Missing1a.cs  
   ```  
  
   ```vb  
   vbc Missing1a.vb -t:library  
   ```  
  
   [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
   [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
   <span data-ttu-id="7adb5-141">次の例は、Missing1a への参照を含めることによって、Missing1 という名前の実行可能ファイルにコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-141">You can then compile the following example to an executable named Missing1.exe by including a reference to Missing1a.dll:</span></span>  
  
   ```csharp
   csc Missing1.cs /r:Missing1a.dll  
   ```  
  
   ```vb
   vbc Missing1.vb /r:Missing1a.dll  
   ```  
  
   <span data-ttu-id="7adb5-142">ただし、Missing1a の名前変更、移動、または削除を行ってこの例を実行すると、<xref:System.TypeInitializationException> 例外がスローされ、例に示されている出力が表示されます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-142">However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <xref:System.TypeInitializationException> exception and displays the output shown in the example.</span></span>  <span data-ttu-id="7adb5-143">例外メッセージには、<xref:System.Exception.InnerException%2A> プロパティに関する情報が含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="7adb5-143">Note that the exception message includes information about the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="7adb5-144">この場合、内部例外は、ランタイムが依存アセンブリを見つけることができないためにスローされる <xref:System.IO.FileNotFoundException> です。</span><span class="sxs-lookup"><span data-stu-id="7adb5-144">In this case,  the inner exception is a <xref:System.IO.FileNotFoundException> that is thrown because the runtime cannot find the dependent assembly.</span></span>  
  
   [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
   [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
   > [!NOTE]
   >  <span data-ttu-id="7adb5-145">この例では、アセンブリを読み込むことができなかったため、<xref:System.TypeInitializationException> 例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="7adb5-145">In this example, a <xref:System.TypeInitializationException> exception was thrown because an assembly could not be loaded.</span></span> <span data-ttu-id="7adb5-146">この例外は、静的コンストラクターが、構成ファイル、XML ファイル、シリアル化されたデータを含むファイルなど、見つからないデータファイルを開こうとした場合にもスローされることがあります。</span><span class="sxs-lookup"><span data-stu-id="7adb5-146">The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.</span></span>  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a><span data-ttu-id="7adb5-147">正規表現の一致のタイムアウト値</span><span class="sxs-lookup"><span data-stu-id="7adb5-147">Regular expression match timeout values</span></span>  
 <span data-ttu-id="7adb5-148">正規表現パターン一致操作の既定のタイムアウト値は、アプリケーションドメインごとに設定できます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-148">You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis.</span></span> <span data-ttu-id="7adb5-149">タイムアウトは、<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> メソッドに対して "REGEX_DEFAULT_MATCH_TIMEOUT" プロパティの <xref:System.TimeSpan> 値を指定するによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-149">The timeout is defined by a specifying a <xref:System.TimeSpan> value for the "REGEX_DEFAULT_MATCH_TIMEOUT" property to the  <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7adb5-150">時間間隔は、0より大きく、約24日未満の有効な <xref:System.TimeSpan> オブジェクトである必要があります。</span><span class="sxs-lookup"><span data-stu-id="7adb5-150">The time interval must be a valid <xref:System.TimeSpan> object that is greater than zero and less than approximately 24 days.</span></span> <span data-ttu-id="7adb5-151">これらの要件が満たされていない場合、既定のタイムアウト値を設定しようとすると、<xref:System.ArgumentOutOfRangeException>がスローされます。これは、<xref:System.TypeInitializationException> の例外でラップされます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-151">If these requirements are not met, the attempt to set the default timeout value throws an <xref:System.ArgumentOutOfRangeException>, which in turn is wrapped in a <xref:System.TypeInitializationException> exception.</span></span>  
  
 <span data-ttu-id="7adb5-152">次の例は、"REGEX_DEFAULT_MATCH_TIMEOUT" プロパティに割り当てられた値が無効な場合にスローされる <xref:System.TypeInitializationException> を示しています。</span><span class="sxs-lookup"><span data-stu-id="7adb5-152">The following example shows the <xref:System.TypeInitializationException> that is thrown when the value assigned to the "REGEX_DEFAULT_MATCH_TIMEOUT" property is invalid.</span></span> <span data-ttu-id="7adb5-153">この例外を回避するには、"REGEX_DEFAULT_MATCH_TIMEOUT" プロパティを0より大きく、約24日未満の <xref:System.TimeSpan> 値に設定します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-153">To eliminate the exception, set the"REGEX_DEFAULT_MATCH_TIMEOUT" property to a  <xref:System.TimeSpan> value that is greater than zero and less than approximately 24 days.</span></span>  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a><span data-ttu-id="7adb5-154">予定表と文化データ</span><span class="sxs-lookup"><span data-stu-id="7adb5-154">Calendars and cultural data</span></span>  
 <span data-ttu-id="7adb5-155">カレンダーのインスタンスを作成しようとしても、そのカレンダーに対応する <xref:System.Globalization.CultureInfo> オブジェクトをランタイムがインスタンス化できない場合は、<xref:System.TypeInitializationException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7adb5-155">If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <xref:System.Globalization.CultureInfo> object that corresponds to that calendar, it throws a <xref:System.TypeInitializationException> exception.</span></span> <span data-ttu-id="7adb5-156">この例外は、次のカレンダークラスコンストラクターによってスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7adb5-156">This exception can be thrown by the following calendar class constructors:</span></span>  
  
-   <span data-ttu-id="7adb5-157"><xref:System.Globalization.JapaneseCalendar> クラスのパラメーターなしのコンストラクター。</span><span class="sxs-lookup"><span data-stu-id="7adb5-157">The parameterless constructor of the <xref:System.Globalization.JapaneseCalendar> class.</span></span>  
  
-   <span data-ttu-id="7adb5-158"><xref:System.Globalization.KoreanCalendar> クラスのパラメーターなしのコンストラクター。</span><span class="sxs-lookup"><span data-stu-id="7adb5-158">The parameterless constructor of the <xref:System.Globalization.KoreanCalendar> class.</span></span>  
  
-   <span data-ttu-id="7adb5-159"><xref:System.Globalization.TaiwanCalendar> クラスのパラメーターなしのコンストラクター。</span><span class="sxs-lookup"><span data-stu-id="7adb5-159">The parameterless constructor of the <xref:System.Globalization.TaiwanCalendar> class.</span></span>  
  
 <span data-ttu-id="7adb5-160">これらのカルチャのカルチャデータはすべてのシステムで使用できる必要があるため、この例外が発生することはめったにありません。</span><span class="sxs-lookup"><span data-stu-id="7adb5-160">Since cultural data for these cultures should be available on all systems, you should rarely, if ever, encounter this exception.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="7adb5-161">.NET での例外の処理とスロー</span><span class="sxs-lookup"><span data-stu-id="7adb5-161">Handling and throwing exceptions in .NET</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new TypeInitializationException : string * Exception -&gt; TypeInitializationException" Usage="new System.TypeInitializationException (fullTypeName, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName"><span data-ttu-id="7adb5-162">初期化できなかった型の完全限定名。</span><span class="sxs-lookup"><span data-stu-id="7adb5-162">The fully qualified name of the type that fails to initialize.</span></span></param>
        <param name="innerException"><span data-ttu-id="7adb5-163">現在の例外の原因になった例外。</span><span class="sxs-lookup"><span data-stu-id="7adb5-163">The exception that is the cause of the current exception.</span></span> <span data-ttu-id="7adb5-164"><paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-164">If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span></span></param>
        <summary><span data-ttu-id="7adb5-165">既定のエラー メッセージ、指定した型名、この例外の原因である内部例外への参照を使用して、<see cref="T:System.TypeInitializationException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-165">Initializes a new instance of the <see cref="T:System.TypeInitializationException" /> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7adb5-166">前の例外の直接の結果としてスローされる例外は、<xref:System.Exception.InnerException%2A> プロパティに前の例外への参照を含んでいる場合があります。</span><span class="sxs-lookup"><span data-stu-id="7adb5-166">An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="7adb5-167"><xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されたものと同じ値を返します。内部例外値がコンストラクターに渡されなかった場合、<xref:System.Exception.InnerException%2A> プロパティはnull 参照 (Visual Basic の場合は `Nothing`) を返します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-167">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="7adb5-168">次の表に、<xref:System.TypeInitializationException> のインスタンスに対するプロパティの初期値を示します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-168">The following table shows the initial property values for an instance of <xref:System.TypeInitializationException>.</span></span>  
  
|<span data-ttu-id="7adb5-169">プロパティ</span><span class="sxs-lookup"><span data-stu-id="7adb5-169">Property</span></span>|<span data-ttu-id="7adb5-170">値</span><span class="sxs-lookup"><span data-stu-id="7adb5-170">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="7adb5-171">内部例外の参照です。</span><span class="sxs-lookup"><span data-stu-id="7adb5-171">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="7adb5-172">ローカライズされたエラー メッセージの文字列です。</span><span class="sxs-lookup"><span data-stu-id="7adb5-172">The localized error message string.</span></span>|  
|<xref:System.TypeInitializationException.TypeName%2A>|<span data-ttu-id="7adb5-173">型の名前。</span><span class="sxs-lookup"><span data-stu-id="7adb5-173">The name of the type.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="7adb5-174">.NET での例外の処理とスロー</span><span class="sxs-lookup"><span data-stu-id="7adb5-174">Handling and throwing exceptions in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="typeInitializationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="7adb5-175">スローされた例外に関する、シリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo" /> です。</span><span class="sxs-lookup"><span data-stu-id="7adb5-175">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span></span></param>
        <param name="context"><span data-ttu-id="7adb5-176">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</span><span class="sxs-lookup"><span data-stu-id="7adb5-176">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="7adb5-177">型名と追加の例外情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトを設定します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-177">Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the type name and additional exception information.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.TypeInitializationException.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7adb5-178">初期化できなかった型の完全限定名を取得します。</span><span class="sxs-lookup"><span data-stu-id="7adb5-178">Gets the fully qualified name of the type that fails to initialize.</span></span></summary>
        <value><span data-ttu-id="7adb5-179">初期化できなかった型の完全限定名。</span><span class="sxs-lookup"><span data-stu-id="7adb5-179">The fully qualified name of the type that fails to initialize.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
