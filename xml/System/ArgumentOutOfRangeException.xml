<Type Name="ArgumentOutOfRangeException" FullName="System.ArgumentOutOfRangeException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="91780250edf28d4efe95c8edcbe5c2a7b92532d6" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75043859" /></Metadata><TypeSignature Language="C#" Value="public class ArgumentOutOfRangeException : ArgumentException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ArgumentOutOfRangeException extends System.ArgumentException implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.ArgumentOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public Class ArgumentOutOfRangeException&#xA;Inherits ArgumentException" />
  <TypeSignature Language="C++ CLI" Value="public ref class ArgumentOutOfRangeException : ArgumentException" />
  <TypeSignature Language="F#" Value="type ArgumentOutOfRangeException = class&#xA;    inherit ArgumentException&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ArgumentException</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>引数の値が、呼び出されたメソッドで定義されている許容範囲外である場合にスローされる例外。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<xref:System.ArgumentOutOfRangeException> 例外がスローされるのは、メソッドが呼び出され、メソッドに渡された引数の少なくとも1つが `null` ではなく、引数に必要な値のセットのメンバーではない無効な値が含まれている場合です。 <xref:System.ArgumentException.ParamName%2A> プロパティは無効な引数を識別し、値が存在する場合は <xref:System.ArgumentOutOfRangeException.ActualValue%2A> プロパティが無効な値を識別します。  
  
通常、<xref:System.ArgumentOutOfRangeException> は開発者エラーの結果となります。 `try`/`catch` ブロックで例外を処理するのではなく、例外の原因を排除する必要があります。または、例外をスローするメソッドに渡される前に、ユーザーがメソッド呼び出しまたは入力によって引数が返された場合は、メソッドに渡す前に引数を検証する必要があります。  
  
<xref:System.ArgumentOutOfRangeException> は次のように広く使用されています。  
  
- <xref:System.Collections> 名前空間と <xref:System.IO> 名前空間のクラス。  
  
- <xref:System.Array> クラス  
  
- <xref:System.String> クラスの文字列操作メソッド。  
  
<xref:System.ArgumentOutOfRangeException> 例外がスローされる条件には、次のようなものがあります。  
  
- インデックス番号によってコレクションのメンバーを取得しようとしていますが、インデックス番号が無効です。  

   これは、<xref:System.ArgumentOutOfRangeException> 例外の最も一般的な原因です。 通常、インデックス番号は次の4つのいずれかの理由で無効です。  
  
   1. コレクションにはメンバーがないため、コードはそれを想定しています。 次の例では、要素を持たないコレクションの最初の要素を取得しようとしています。  
  
      [!code-csharp[System.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements.cs#4)]
      [!code-vb[System.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements.vb#4)]  
  
      この例外を回避するには、次のコードフラグメントに示すように、コレクションの `Count` プロパティが0より大きいかどうかを確認してから、メンバーを取得します。  
  
      [!code-csharp[System.ArgumentOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements.cs#5)]
      [!code-vb[System.ArgumentOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements.vb#5)]  
  
   2. 場合によっては、存在しないインデックスを使用してコレクションにメンバーを追加しようとしたときに、この目的のために存在する `Add`などのメソッドを呼び出さないと、例外が発生することがあります。  次の例では、<xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> メソッドを呼び出すのではなく、存在しないインデックスを使用して、コレクションに要素を追加しようとしています。  
  
      [!code-csharp[System.ArgumentOutOfRangeException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements2.cs#13)]
      [!code-vb[System.ArgumentOutOfRangeException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements2.vb#13)]  
  
      次のコードは、このエラーを修正します。  
  
      [!code-csharp[System.ArgumentOutOfRangeException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements2.cs#14)]
      [!code-vb[System.ArgumentOutOfRangeException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements2.vb#14)]  
  
   3. インデックスが負の項目を取得しようとしています。 これは通常、特定の要素のインデックスのコレクションを検索し、検索が成功したと誤って想定しているために発生します。 次の例では、<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29?displayProperty=nameWithType> メソッドの呼び出しが "Z" に等しい文字列を見つけることができず、-1 が返されます。 ただし、これは無効なインデックス値です。  
  
      [!code-csharp[System.ArgumentOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/BadSearch.cs#6)]
      [!code-vb[System.ArgumentOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/BadSearch.vb#6)]  
  
      この例外を回避するには、次のコードフラグメントに示すように、返されたインデックスが0以上であることを確認して、コレクションから項目を取得しようとする前に、検索が成功したことを確認します。  
  
      [!code-csharp[System.ArgumentOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/BadSearch.cs#7)]
      [!code-vb[System.ArgumentOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/BadSearch.vb#7)]  
  
   4. 次の例に示すように、インデックスがコレクションの `Count` プロパティの値と等しい要素を取得しようとしています。  
  
      [!code-csharp[System.ArgumentOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR2.cs#8)]
      [!code-vb[System.ArgumentOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR2.vb#8)]  
  
      .NET のコレクションでは0から始まるインデックスが使用されるため、コレクションの最初の要素はインデックス0になり、最後の要素はインデックス `Count`-1 になります。 次のコードに示すように、インデックス `Count`-1 の最後の要素にアクセスすることで、エラーを回避できます。  
  
      [!code-csharp[System.ArgumentOutOfRangeException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR2.cs#9)]
      [!code-vb[System.ArgumentOutOfRangeException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR2.vb#9)]  
  
- 文字列操作メソッドを呼び出して文字列操作を実行しようとしたときに、開始インデックスが文字列に存在しません。

   <xref:System.String.Compare%2A?displayProperty=nameWithType>、<xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType>、<xref:System.String.IndexOf%2A?displayProperty=nameWithType>、<xref:System.String.IndexOfAny%2A>、<xref:System.String.Insert%2A?displayProperty=nameWithType>、<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>、<xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType>、<xref:System.String.Remove%2A>、<xref:System.String.Substring%2A?displayProperty=nameWithType> などのメソッドのオーバーロードでは、操作の開始インデックスを指定できるようにするには、インデックスが文字列内の有効な位置である必要があります。 有効なインデックスの範囲は 0 ~ <xref:System.String.Length%2A?displayProperty=nameWithType>-1 です。  
  
   この <xref:System.ArgumentOutOfRangeException> 例外には、次の4つの一般的な原因があります。

   1. 空の文字列を使用しているか、<xref:System.String.Empty?displayProperty=nameWithType>しています。 <xref:System.String.Length%2A?displayProperty=nameWithType> プロパティは0を返します。そのため、インデックスを操作しようとすると、<xref:System.ArgumentOutOfRangeException> 例外がスローされます。 次の例では、文字列の最初の文字を返す `GetFirstCharacter` メソッドを定義します。 文字列が空の場合、メソッドに渡された最後の文字列がの場合、メソッドは <xref:System.ArgumentOutOfRangeException> 例外をスローします。  
  
      [!code-csharp[System.ArgumentOutOfRangeException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/EmptyString1.cs#15)]
      [!code-vb[System.ArgumentOutOfRangeException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/EmptyString1.vb#15)]  
  
      この例外を回避するには、文字列の <xref:System.String.Length%2A?displayProperty=nameWithType> がゼロより大きいかどうかをテストするか、<xref:System.String.IsNullOrEmpty%2A> メソッドを呼び出して、文字列が `null` または空でないことを確認します。 次のコードフラグメントは、後者を行います。 この場合、文字列が `null` または空の場合、`GetFirstCharacter` メソッドは U + 0000 を返します。  
  
      [!code-csharp[System.ArgumentOutOfRangeException#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/EmptyString1.cs#16)]
      [!code-vb[System.ArgumentOutOfRangeException#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/EmptyString1.vb#16)]  
  
   2. その文字列内の部分文字列の位置に基づいて文字列を操作していますが、その部分文字列が実際に見つかったかどうかを判断できませんでした。  
  
      次の例では、2つの単語の語句の2番目の単語を抽出します。 語句が1つの単語で構成されていて、空白文字が埋め込まれていない場合、<xref:System.ArgumentOutOfRangeException> 例外をスローします。  これは、<xref:System.String.IndexOf%28System.String%29?displayProperty=nameWithType> メソッドを呼び出すと、検索が失敗したことを示す-1 が返され、この無効な値が <xref:System.String.Substring%28System.Int32%29?displayProperty=nameWithType> メソッドに渡されるためです。  
  
      [!code-csharp[System.ArgumentOutOfRangeException#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoFind1.cs#17)]
      [!code-vb[System.ArgumentOutOfRangeException#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoFind1.vb#17)]  
  
      例外を除去するには、文字列操作メソッドを呼び出す前に、文字列検索メソッドによって返された値を検証します。  
  
      [!code-csharp[System.ArgumentOutOfRangeException#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoFind2.cs#18)]
      [!code-vb[System.ArgumentOutOfRangeException#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoFind2.vb#18)]  
  
   3. 現在の文字列の範囲外にある部分文字列を抽出しようとしました。  
 
      部分文字列を抽出するメソッドでは、部分文字列の開始位置を指定する必要があります。文字列の末尾まで継続しない部分文字列の場合は、部分文字列の文字数を指定する必要があります。 これは、部分文字列の最後の文字の*インデックス*ではないことに注意してください。  
  
      通常、この場合、<xref:System.ArgumentOutOfRangeException> 例外がスローされます。これは、部分文字列の文字数を誤って計算したためです。  <xref:System.String.IndexOf%2A?displayProperty=nameWithType> のような検索メソッドを使用して、部分文字列の開始位置と終了位置を識別する場合は、次の手順を実行します。  
  
      - <xref:System.String.IndexOf%2A?displayProperty=nameWithType> によって返される終了位置の文字が部分文字列に含まれる場合、その部分文字列の終了位置が数式によって指定されます。  
  
         ```  
         endIndex - startIndex + 1  
         ```  
  
      - <xref:System.String.IndexOf%2A?displayProperty=nameWithType> によって返される終了位置の文字が部分文字列から除外される場合、その部分文字列の終了位置が数式によって指定されます。  
  
         ```
         endIndex - startIndex   
         ```  

         次の例では、<xref:System.String.IndexOfAny%28System.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType> メソッドを使用して文字列内の空白文字と句読点を識別し、文字列で見つかった単語を含む配列を返す `FindWords` メソッドを定義します。  
  
         [!code-csharp[System.ArgumentOutOfRangeException#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/FindWords1.cs#19)]
         [!code-vb[System.ArgumentOutOfRangeException#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/FindWords1.vb#19)]  
  
- 正の数値と0のみを必要とする引数を持つメソッドに負の数を渡しました。または、正の数値のみを必要とする引数を使用して、負の数または0をメソッドに渡しました。  
 
   たとえば、<xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> メソッドでは、2次元配列の各次元の要素数を指定する必要があります。各次元の有効な値の範囲は 0 ~ <xref:System.Int32.MaxValue?displayProperty=nameWithType>です。 ただし、次の例の dimension 引数には負の値があるため、メソッドは <xref:System.ArgumentOutOfRangeException> 例外をスローします。  
  
   [!code-csharp[System.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR1.cs#1)]
   [!code-vb[System.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR1.vb#1)]  
  
   エラーを修正するには、無効な引数の値が負でないことを確認します。 これを行うには、次のコードフラグメントに示すように、有効な値を指定します。  
  
   [!code-csharp[System.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR1.cs#2)]
   [!code-vb[System.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR1.vb#2)]  
  
   入力を検証することもできます。無効な場合は、何らかの操作を実行します。 次のコードフラグメントは、メソッドを呼び出す代わりに、エラーメッセージを表示します。  
  
   [!code-csharp[System.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR1.cs#3)] 
   [!code-vb[System.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR1.vb#3)]  
  
- マルチスレッドであるか、または非同期的に実行され、配列またはコレクションを更新するタスクを含むアプリに競合状態が存在します。  

  次の例では、<xref:System.Collections.Generic.List%601> オブジェクトを使用して、`Continent` オブジェクトのコレクションを設定します。 コレクションが完全に設定される前に、この例でコレクション内の7つの項目を表示しようとすると、<xref:System.ArgumentOutOfRangeException> がスローされます。  
  
  [!code-csharp[System.ArgumentOutOfRangeException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/Race1.cs#11)]
  [!code-vb[System.ArgumentOutOfRangeException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/Race1.vb#11)]  
  
  この場合、次の2つのリソースに複数のスレッドからアクセスします。  
  
  - `continents` のコレクション。 <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> メソッドは、複数のスレッドから呼び出されます。 また、メインスレッドまたはプライマリスレッドは、メンバーを反復処理するときに、7つの要素がコレクションに完全に設定されることを前提としています。  
  
  - 複数のスレッドから連結された `msg` 文字列。  
  
  エラーを修正するには、次のように、共有状態がスレッドセーフな方法でアクセスされていることを確認します。  

  - アプリで配列またはコレクションオブジェクトを使用する場合は、<xref:System.Collections.Concurrent> 名前空間の型や <xref:System.Collections.Immutable> アウトオブバンドリリースなど、スレッドセーフなコレクションクラスを使用することを検討してください。  
  
  - 共有状態 (つまり、複数のスレッドからアクセスできるリソース) にスレッドセーフな方法でアクセスし、一度に1つのスレッドだけがリソースに排他的にアクセスできるようにします。 リソースへのアクセスを同期するために、<xref:System.Threading.CountdownEvent>、<xref:System.Threading.Interlocked>、<xref:System.Threading.Monitor>、<xref:System.Threading.Mutex>などの多数のクラスを使用できます。 詳細については、「[スレッド処理](~/docs/standard/threading/index.md)」を参照してください。 また、のC# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md)ステートメントと Visual Basic の[SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md)コンストラクトを使用して言語サポートを利用することもできます。  
  
  次の例では、<xref:System.ArgumentOutOfRangeException> と、前の例の他の問題に対処します。 <xref:System.Collections.Generic.List%601> オブジェクトを <xref:System.Collections.Concurrent.ConcurrentBag%601> オブジェクトに置き換えて、コレクションへのアクセスがスレッドセーフであることを確認し、<xref:System.Threading.CountdownEvent> オブジェクトを使用して、他のスレッドが実行された後にのみアプリケーションスレッドが続行されるようにします。また、ロックを使用して、一度に1つのスレッドだけが `msg` 変数にアクセスできるようにします。  
  
  [!code-csharp[System.ArgumentOutOfRangeException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/Race2.cs#12)]
  [!code-vb[System.ArgumentOutOfRangeException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/Race2.vb#12)]  
  
<xref:System.ArgumentOutOfRangeException> では、値 0x8013150 2 の HRESULT COR_E_ARGUMENTOUTOFRANGE を使用します。  
  
<xref:System.ArgumentOutOfRangeException>インスタンスの初期プロパティ値の一覧については、<xref:System.ArgumentOutOfRangeException>コンストラクターを参照してください。  
  
## Examples

次の例では、招待されたゲストに関する情報を格納するクラスを定義します。 ゲストが21よりも前の場合は、<xref:System.ArgumentOutOfRangeException> 例外がスローされます。  
  
 [!code-csharp[ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR/ArgumentOutOfRangeException/CS/program.cs#1)]
 [!code-vb[ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ArgumentOutOfRangeException/VB/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.ArgumentOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ArgumentOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、新しいインスタンスの <xref:System.ArgumentException.Message%2A> プロパティを初期化して、"負の数値が必要です" などのエラーを説明するシステム提供のメッセージを指定します。 このメッセージには、現在のシステムのカルチャが考慮されます。  
  
 <xref:System.ArgumentOutOfRangeException> インスタンスの初期プロパティ値を次の表に示します。  
  
|property|[値]|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 参照 (Visual Basic の場合は `Nothing`)。|  
|<xref:System.ArgumentOutOfRangeException.Message%2A>|ローカライズされたエラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException (string paramName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string paramName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (paramName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException(System::String ^ paramName);" />
      <MemberSignature Language="F#" Value="new ArgumentOutOfRangeException : string -&gt; ArgumentOutOfRangeException" Usage="new System.ArgumentOutOfRangeException paramName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">この例外の原因となったパラメーターの名前。</param>
        <summary>この例外の原因である引数の名前を指定して、<see cref="T:System.ArgumentOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、新しいインスタンスの <xref:System.ArgumentException.Message%2A> プロパティを初期化して、"負の数値が必要です" などのエラーを説明するシステム提供のメッセージを指定します。 このメッセージには、現在のシステムのカルチャが考慮されます。  
  
 このコンストラクターは、新しいインスタンスの <xref:System.ArgumentException.ParamName%2A> プロパティを `paramName` パラメーターを使用して初期化します。 `paramName` の内容は、ユーザーが理解できる内容にします。  
  
 <xref:System.ArgumentOutOfRangeException> インスタンスの初期プロパティ値を次の表に示します。  
  
|property|[値]|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 参照 (Visual Basic の場合は `Nothing`)。|  
|<xref:System.ArgumentOutOfRangeException.Message%2A>|空の文字列 ("")。|  
|<xref:System.ArgumentException.ParamName%2A>|パラメーター名の文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ArgumentOutOfRangeException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ArgumentOutOfRangeException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new ArgumentOutOfRangeException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; ArgumentOutOfRangeException" Usage="new System.ArgumentOutOfRangeException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
        <param name="context">シリアル化されたデータの転送元または転送先を記述するオブジェクト。</param>
        <summary>シリアル化したデータを使用して、<see cref="T:System.ArgumentOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、逆シリアル化中に、ストリームで送信された例外オブジェクトを再構築するために呼び出されます。 詳細については、次を参照してください。 [XML および SOAP シリアル化](~/docs/standard/serialization/xml-and-soap-serialization.md)します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML シリアル化および SOAP シリアル化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new ArgumentOutOfRangeException : string * Exception -&gt; ArgumentOutOfRangeException" Usage="new System.ArgumentOutOfRangeException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="innerException" Type="System.Exception" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="message">この例外の原因を説明するエラー メッセージ。</param>
        <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は null 参照 (Visual Basic では、<see langword="Nothing" />)。</param>
        <summary>エラー メッセージ、およびこの例外の原因である例外を指定して、<see cref="T:System.ArgumentOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException (string paramName, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string paramName, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (paramName As String, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException(System::String ^ paramName, System::String ^ message);" />
      <MemberSignature Language="F#" Value="new ArgumentOutOfRangeException : string * string -&gt; ArgumentOutOfRangeException" Usage="new System.ArgumentOutOfRangeException (paramName, message)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">例外の原因となったパラメーターの名前。</param>
        <param name="message">エラーを説明するメッセージ。</param>
        <summary>この例外の原因となるパラメーターの名前と、指定したエラー メッセージを使用して、<see cref="T:System.ArgumentOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、`message` パラメーターの値を使用して、新しいインスタンスの <xref:System.ArgumentOutOfRangeException.Message%2A> プロパティを初期化します。 `message` パラメーターの内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。  
  
 このコンストラクターは、新しいインスタンスの <xref:System.ArgumentException.ParamName%2A> プロパティを `paramName` パラメーターを使用して初期化します。 `paramName` の内容は、ユーザーが理解できる内容にします。  
  
 <xref:System.ArgumentOutOfRangeException> インスタンスの初期プロパティ値を次の表に示します。  
  
|property|[値]|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null` で初期化します。|  
|<xref:System.ArgumentOutOfRangeException.Message%2A>|エラー メッセージ文字列。|  
|<xref:System.ArgumentException.ParamName%2A>|パラメーター名の文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException (string paramName, object actualValue, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string paramName, object actualValue, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (paramName As String, actualValue As Object, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException(System::String ^ paramName, System::Object ^ actualValue, System::String ^ message);" />
      <MemberSignature Language="F#" Value="new ArgumentOutOfRangeException : string * obj * string -&gt; ArgumentOutOfRangeException" Usage="new System.ArgumentOutOfRangeException (paramName, actualValue, message)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
        <Parameter Name="actualValue" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">例外の原因となったパラメーターの名前。</param>
        <param name="actualValue">この例外の原因である引数の値。</param>
        <param name="message">エラーを説明するメッセージ。</param>
        <summary>パラメーター名、引数の値、および指定されたエラー メッセージを使用して、<see cref="T:System.ArgumentOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、`paramName` パラメーター、`actualValue` パラメーターを使用した <xref:System.ArgumentOutOfRangeException.ActualValue%2A> プロパティ、および <xref:System.ArgumentException.Message%2A> パラメーターを使用して、`message` プロパティを使用して、新しいインスタンスの <xref:System.ArgumentException.ParamName%2A> プロパティを初期化します。 `paramName` パラメーターと `message` パラメーターの内容は、人間が理解できるように設計されています。 このコンストラクターの呼び出し元は、これらの文字列が現在のシステムカルチャにローカライズされていることを確認するために必要です。  
  
 `actualValue` パラメーターは、.NET Framework クラスライブラリ内では使用されません。 ただし、<xref:System.ArgumentOutOfRangeException.ActualValue%2A> プロパティは、アプリケーションが使用可能な引数値を使用できるようにするために用意されています。  
  
 `actualValue` パラメーターに、メソッドに渡された無効な値が含まれているため、この例外がスローされます。 この値は <xref:System.ArgumentOutOfRangeException.ActualValue%2A> プロパティに格納され、その文字列表現は、<xref:System.ArgumentOutOfRangeException.Message%2A> プロパティに保持されているメッセージ文字列に追加されます。  
  
 <xref:System.ArgumentOutOfRangeException> インスタンスの初期プロパティ値を次の表に示します。  
  
|property|[値]|  
|--------------|-----------|  
|<xref:System.ArgumentOutOfRangeException.ActualValue%2A>|引数値。|  
|<xref:System.Exception.InnerException%2A>|Null 参照 (Visual Basic では`Nothing`)。|  
|<xref:System.ArgumentOutOfRangeException.Message%2A>|エラー メッセージ文字列。|  
|<xref:System.ArgumentException.ParamName%2A>|パラメーター名の文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualValue">
      <MemberSignature Language="C#" Value="public virtual object ActualValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ActualValue" />
      <MemberSignature Language="DocId" Value="P:System.ArgumentOutOfRangeException.ActualValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ActualValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ ActualValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualValue : obj" Usage="System.ArgumentOutOfRangeException.ActualValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この例外の原因である引数値を取得します。</summary>
        <value>現在の <see langword="Object" /> の原因となったパラメーターの値が含まれた <see cref="T:System.Exception" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用して、無効な引数を取得します。  
  
 `ActualValue` プロパティは、コンストラクターに渡されたものと同じ値を返します。値が指定されていない場合は `null` します。  
  
 <xref:System.ArgumentOutOfRangeException.ActualValue%2A> プロパティには、オブジェクトの構築時に値が割り当てられます。 <xref:System.ArgumentOutOfRangeException.ActualValue%2A> プロパティの値が `null`でない場合は、<xref:System.ArgumentOutOfRangeException.Message%2A> プロパティによって保持されているメッセージ文字列に値の文字列形式が付加されます。  
  
 <xref:System.ArgumentOutOfRangeException.ActualValue%2A> プロパティは、.NET Framework クラスライブラリ内では使用されません。 このメソッドは、.NET Framework クラスライブラリによってスローされたすべての <xref:System.ArgumentOutOfRangeException> オブジェクトに null 値を格納します。 <xref:System.ArgumentOutOfRangeException.ActualValue%2A> プロパティは、アプリケーションが使用可能な引数値を使用できるようにするために用意されています。  
  
 このプロパティは読み取り専用であり、値のコンテンツまたは形式をカスタマイズするためにのみオーバーライドする必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="argumentOutOfRangeException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
        <param name="context">シリアル化されたデータの転送元または転送先を記述するオブジェクト。</param>
        <summary>無効な引数値と追加の例外情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 シリアル化の対象となるすべての例外オブジェクトデータを含む <xref:System.Runtime.Serialization.SerializationInfo> オブジェクトを <xref:System.ArgumentOutOfRangeException.GetObjectData%2A> 設定します。 逆シリアル化中に、例外オブジェクトはストリームを介して送信された <xref:System.Runtime.Serialization.SerializationInfo> から再構成されます。  
  
 詳細については、「 <xref:System.Runtime.Serialization.SerializationInfo>」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> オブジェクトが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">シリアル化サービスを提供します。 関連付けられた列挙: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /> セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に完全信頼が必要です。 このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</permission>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public override string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.ArgumentOutOfRangeException.Message" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.ArgumentOutOfRangeException.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エラー メッセージおよび無効な引数値の文字列形式を取得します。引数値が null の場合は、エラー メッセージだけを取得します。</summary>
        <value>この例外のエラー メッセージ。 このプロパティの値は、次の 2 つの値のいずれかになります。  
  
 <list type="table"><listheader><term> 条件 
 </term><description> [値] 
 </description></listheader><item><term> <paramref name="actualValue" /> が <see langword="null" /> です。  
  
 </term><description> コンストラクターに渡された <paramref name="message" /> 文字列。  
  
 </description></item><item><term> <paramref name="actualValue" /> が <see langword="null" /> ではありません。  
  
 </term><description> 無効な引数値の文字列形式が末尾に追加された <paramref name="message" /> 文字列。  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは <xref:System.ArgumentException.Message%2A>をオーバーライドします。  
  
 エラーメッセージには、この例外の原因となったパラメーターの予期される値が記述されている必要があります。 エラーメッセージはローカライズされている必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
