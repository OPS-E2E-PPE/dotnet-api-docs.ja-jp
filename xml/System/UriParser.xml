<Type Name="UriParser" FullName="System.UriParser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ccc0e23582927b71a0af0970b0c2168916a64a8b" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75038210" /></Metadata><TypeSignature Language="C#" Value="public abstract class UriParser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract UriParser extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.UriParser" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class UriParser" />
  <TypeSignature Language="C++ CLI" Value="public ref class UriParser abstract" />
  <TypeSignature Language="F#" Value="type UriParser = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="77b7e-101">新しい URI スキームを解析します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-101">Parses a new URI scheme.</span></span> <span data-ttu-id="77b7e-102">これは抽象クラスです。</span><span class="sxs-lookup"><span data-stu-id="77b7e-102">This is an abstract class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77b7e-103">UriParser クラスを使用すると、新しい URI スキーム用のパーサーを作成できます。</span><span class="sxs-lookup"><span data-stu-id="77b7e-103">The UriParser class enables you to create parsers for new URI schemes.</span></span> <span data-ttu-id="77b7e-104">これらのパーサー全体を作成することも、パーサーを既知のスキーム (HTTP、FTP、およびネットワークプロトコルに基づくその他のスキーム) から派生させることもできます。</span><span class="sxs-lookup"><span data-stu-id="77b7e-104">You can write these parsers in their entirety, or the parsers can be derived from well-known schemes (HTTP, FTP, and other schemes based on network protocols).</span></span> <span data-ttu-id="77b7e-105">まったく新しいパーサーを作成する場合は、<xref:System.GenericUriParser>から継承します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-105">If you want to create a completely new parser, inherit from <xref:System.GenericUriParser>.</span></span> <span data-ttu-id="77b7e-106">既知の URI スキームを拡張するパーサーを作成する場合は、<xref:System.FtpStyleUriParser>、<xref:System.HttpStyleUriParser>、<xref:System.FileStyleUriParser>、<xref:System.GopherStyleUriParser>、または <xref:System.LdapStyleUriParser>から継承します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-106">If you want to create a parser that extends a well-known URI scheme, inherit from <xref:System.FtpStyleUriParser>, <xref:System.HttpStyleUriParser>, <xref:System.FileStyleUriParser>, <xref:System.GopherStyleUriParser>, or <xref:System.LdapStyleUriParser>.</span></span>  
  
 <span data-ttu-id="77b7e-107">Microsoft では、.NET に付属しているパーサーを使用することを強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="77b7e-107">Microsoft strongly recommends that you use a parser shipped with .NET.</span></span> <span data-ttu-id="77b7e-108">独自のパーサーを構築すると、アプリケーションの複雑さが増すだけでなく、配布されたパーサーと同様に動作しなくなります。</span><span class="sxs-lookup"><span data-stu-id="77b7e-108">Building your own parser increases the complexity of your application, and will not perform as well as the shipped parsers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UriParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; UriParser();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="77b7e-109">既定の URI パーサーを作成します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-109">Constructs a default URI parser.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetComponents">
      <MemberSignature Language="C#" Value="protected virtual string GetComponents (Uri uri, UriComponents components, UriFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetComponents(class System.Uri uri, valuetype System.UriComponents components, valuetype System.UriFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetComponents(Uri ^ uri, UriComponents components, UriFormat format);" />
      <MemberSignature Language="F#" Value="abstract member GetComponents : Uri * UriComponents * UriFormat -&gt; string&#xA;override this.GetComponents : Uri * UriComponents * UriFormat -&gt; string" Usage="uriParser.GetComponents (uri, components, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="components" Type="System.UriComponents" />
        <Parameter Name="format" Type="System.UriFormat" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="77b7e-110">解析する URI。</span><span class="sxs-lookup"><span data-stu-id="77b7e-110">The URI to parse.</span></span></param>
        <param name="components"><span data-ttu-id="77b7e-111"><see cref="T:System.UriComponents" /> から取得する <paramref name="uri" />。</span><span class="sxs-lookup"><span data-stu-id="77b7e-111">The <see cref="T:System.UriComponents" /> to retrieve from <paramref name="uri" />.</span></span></param>
        <param name="format"><span data-ttu-id="77b7e-112">特殊文字のエスケープ方法を制御する <see cref="T:System.UriFormat" /> の値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="77b7e-112">One of the <see cref="T:System.UriFormat" /> values that controls how special characters are escaped.</span></span></param>
        <summary><span data-ttu-id="77b7e-113">URI から構成要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-113">Gets the components from a URI.</span></span></summary>
        <returns><span data-ttu-id="77b7e-114">構成要素を指定する文字列。</span><span class="sxs-lookup"><span data-stu-id="77b7e-114">A string that contains the components.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77b7e-115"><xref:System.UriParser.GetComponents%2A> メソッドを使用して、<xref:System.UriComponents.Scheme>、<xref:System.UriComponents.Host>、<xref:System.UriComponents.Port>など、URI のさまざまな部分の値を確認します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-115">Use the <xref:System.UriParser.GetComponents%2A> method to determine the value of various parts of the URI, such as the <xref:System.UriComponents.Scheme>, <xref:System.UriComponents.Host>, or <xref:System.UriComponents.Port>.</span></span>  
  
 <span data-ttu-id="77b7e-116">コンポーネントは、URI に出現する順序で返されます。</span><span class="sxs-lookup"><span data-stu-id="77b7e-116">The components are returned in the order that they appear in the URI.</span></span> <span data-ttu-id="77b7e-117">たとえば、<xref:System.UriComponents.Scheme> が指定されている場合は、最初に表示されます。</span><span class="sxs-lookup"><span data-stu-id="77b7e-117">For example, if <xref:System.UriComponents.Scheme> is specified, it appears first.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="77b7e-118"><paramref name="uriFormat" /> が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="77b7e-118"><paramref name="uriFormat" /> is invalid.</span></span>  
  
<span data-ttu-id="77b7e-119">または</span><span class="sxs-lookup"><span data-stu-id="77b7e-119">-or-</span></span> 
 <span data-ttu-id="77b7e-120"><paramref name="uriComponents" /> が、有効な <see cref="T:System.UriComponents" /> 値の組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="77b7e-120"><paramref name="uriComponents" /> is not a combination of valid <see cref="T:System.UriComponents" /> values.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="77b7e-121"><paramref name="uri" /> が、ユーザーによる解析を必要とします。</span><span class="sxs-lookup"><span data-stu-id="77b7e-121"><paramref name="uri" /> requires user-driven parsing</span></span> 
<span data-ttu-id="77b7e-122">または</span><span class="sxs-lookup"><span data-stu-id="77b7e-122">-or-</span></span> 
 <span data-ttu-id="77b7e-123"><paramref name="uri" /> は絶対 URI ではありません。</span><span class="sxs-lookup"><span data-stu-id="77b7e-123"><paramref name="uri" /> is not an absolute URI.</span></span> <span data-ttu-id="77b7e-124">相対 URI は、このメソッドでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="77b7e-124">Relative URIs cannot be used with this method.</span></span></exception>
        <altmember cref="T:System.UriComponents" />
        <altmember cref="F:System.UriComponents.Host" />
        <altmember cref="F:System.UriComponents.Port" />
        <altmember cref="F:System.UriComponents.Scheme" />
        <altmember cref="T:System.UriFormat" />
        <altmember cref="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)" />
      </Docs>
    </Member>
    <Member MemberName="InitializeAndValidate">
      <MemberSignature Language="C#" Value="protected virtual void InitializeAndValidate (Uri uri, out UriFormatException parsingError);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeAndValidate(class System.Uri uri, [out] class System.UriFormatException&amp; parsingError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeAndValidate(Uri ^ uri, [Runtime::InteropServices::Out] UriFormatException ^ % parsingError);" />
      <MemberSignature Language="F#" Value="abstract member InitializeAndValidate : Uri * UriFormatException -&gt; unit&#xA;override this.InitializeAndValidate : Uri * UriFormatException -&gt; unit" Usage="uriParser.InitializeAndValidate (uri, parsingError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="parsingError" Type="System.UriFormatException" RefType="out" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="77b7e-125">検証する URI。</span><span class="sxs-lookup"><span data-stu-id="77b7e-125">The T:System.Uri to validate.</span></span></param>
        <param name="parsingError"><span data-ttu-id="77b7e-126">検証エラー (存在する場合)。</span><span class="sxs-lookup"><span data-stu-id="77b7e-126">Validation errors, if any.</span></span></param>
        <summary><span data-ttu-id="77b7e-127">パーサーの状態を初期化し、URI を検証します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-127">Initialize the state of the parser and validate the URI.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77b7e-128"><xref:System.UriParser.InitializeAndValidate%2A> メソッドは、<xref:System.Uri> がインスタンス化されるたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="77b7e-128">The <xref:System.UriParser.InitializeAndValidate%2A> method is called every time a <xref:System.Uri> is instantiated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBaseOf">
      <MemberSignature Language="C#" Value="protected virtual bool IsBaseOf (Uri baseUri, Uri relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsBaseOf(class System.Uri baseUri, class System.Uri relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsBaseOf (baseUri As Uri, relativeUri As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsBaseOf(Uri ^ baseUri, Uri ^ relativeUri);" />
      <MemberSignature Language="F#" Value="abstract member IsBaseOf : Uri * Uri -&gt; bool&#xA;override this.IsBaseOf : Uri * Uri -&gt; bool" Usage="uriParser.IsBaseOf (baseUri, relativeUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="baseUri"><span data-ttu-id="77b7e-129">ベース URI。</span><span class="sxs-lookup"><span data-stu-id="77b7e-129">The base URI.</span></span></param>
        <param name="relativeUri"><span data-ttu-id="77b7e-130">テスト対象の URI。</span><span class="sxs-lookup"><span data-stu-id="77b7e-130">The URI to test.</span></span></param>
        <summary><span data-ttu-id="77b7e-131"><paramref name="baseUri" /> が <paramref name="relativeUri" /> のベース URI であるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-131">Determines whether <paramref name="baseUri" /> is a base URI for <paramref name="relativeUri" />.</span></span></summary>
        <returns><span data-ttu-id="77b7e-132"><see langword="true" /> が <paramref name="baseUri" /> のベース URI である場合は <paramref name="relativeUri" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="77b7e-132"><see langword="true" /> if <paramref name="baseUri" /> is a base URI for <paramref name="relativeUri" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKnownScheme">
      <MemberSignature Language="C#" Value="public static bool IsKnownScheme (string schemeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKnownScheme(string schemeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.IsKnownScheme(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsKnownScheme (schemeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKnownScheme(System::String ^ schemeName);" />
      <MemberSignature Language="F#" Value="static member IsKnownScheme : string -&gt; bool" Usage="System.UriParser.IsKnownScheme schemeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="schemeName"><span data-ttu-id="77b7e-133">確認対象のスキーム名。</span><span class="sxs-lookup"><span data-stu-id="77b7e-133">The scheme name to check.</span></span></param>
        <summary><span data-ttu-id="77b7e-134">スキームのパーサーが登録されているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-134">Indicates whether the parser for a scheme is registered.</span></span></summary>
        <returns><span data-ttu-id="77b7e-135"><see langword="true" /> が登録されている場合は <paramref name="schemeName" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="77b7e-135"><see langword="true" /> if <paramref name="schemeName" /> has been registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="77b7e-136"><paramref name="schemeName" /> パラメーターが null です。</span><span class="sxs-lookup"><span data-stu-id="77b7e-136">The <paramref name="schemeName" /> parameter is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="77b7e-137"><paramref name="schemeName" /> パラメーターが正しくありません。</span><span class="sxs-lookup"><span data-stu-id="77b7e-137">The <paramref name="schemeName" /> parameter is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsWellFormedOriginalString">
      <MemberSignature Language="C#" Value="protected virtual bool IsWellFormedOriginalString (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsWellFormedOriginalString(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.IsWellFormedOriginalString(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsWellFormedOriginalString(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="abstract member IsWellFormedOriginalString : Uri -&gt; bool&#xA;override this.IsWellFormedOriginalString : Uri -&gt; bool" Usage="uriParser.IsWellFormedOriginalString uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="77b7e-138">確認対象の URI。</span><span class="sxs-lookup"><span data-stu-id="77b7e-138">The URI to check.</span></span></param>
        <summary><span data-ttu-id="77b7e-139">URI の構成が正しいかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-139">Indicates whether a URI is well-formed.</span></span></summary>
        <returns><span data-ttu-id="77b7e-140"><see langword="true" /> の構成が正しい場合は <paramref name="uri" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="77b7e-140"><see langword="true" /> if <paramref name="uri" /> is well-formed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77b7e-141"><xref:System.UriParser.IsWellFormedOriginalString%2A> メソッドは、次の場合に false を返します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-141">The <xref:System.UriParser.IsWellFormedOriginalString%2A> method will return false if:</span></span>  
  
-   <span data-ttu-id="77b7e-142">RFC 2396 に従って文字列が正しくエスケープされていません。</span><span class="sxs-lookup"><span data-stu-id="77b7e-142">The string is not correctly escaped per RFC 2396.</span></span>  
  
-   <span data-ttu-id="77b7e-143">文字列は、暗黙的なファイル URI を参照する絶対 URI を表します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-143">The string represents an absolute URI that references an implicit file URI.</span></span>  
  
-   <span data-ttu-id="77b7e-144">文字列は、パスコンポーネントの前にスラッシュがない絶対 URI を表します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-144">The string represents an absolute URI that is missing a forward slash before the path component.</span></span>  
  
-   <span data-ttu-id="77b7e-145">文字列には、スラッシュとして扱われる場合でも、エスケープ解除された円記号が含まれています。</span><span class="sxs-lookup"><span data-stu-id="77b7e-145">The string contains unescaped backslashes, even if they will be treated as forward slashes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNewUri">
      <MemberSignature Language="C#" Value="protected virtual UriParser OnNewUri ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.UriParser OnNewUri() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.OnNewUri" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnNewUri () As UriParser" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual UriParser ^ OnNewUri();" />
      <MemberSignature Language="F#" Value="abstract member OnNewUri : unit -&gt; UriParser&#xA;override this.OnNewUri : unit -&gt; UriParser" Usage="uriParser.OnNewUri " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UriParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="77b7e-146"><see cref="T:System.Uri" /> コンストラクターによって起動され、<see cref="T:System.UriParser" /> インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-146">Invoked by a <see cref="T:System.Uri" /> constructor to get a <see cref="T:System.UriParser" /> instance.</span></span></summary>
        <returns><span data-ttu-id="77b7e-147">構築された <see cref="T:System.UriParser" /> の<see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="77b7e-147">A <see cref="T:System.UriParser" /> for the constructed <see cref="T:System.Uri" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77b7e-148">既定の実装では、同じ <xref:System.UriParser> インスタンスが返されます。</span><span class="sxs-lookup"><span data-stu-id="77b7e-148">The default implementation returns the same <xref:System.UriParser> instance.</span></span> <span data-ttu-id="77b7e-149">マルチスレッド環境で動作している場合は、このメソッドをオーバーライドして、呼び出しごとに異なる <xref:System.UriParser> を返すことが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="77b7e-149">You may need to override this method and return a different <xref:System.UriParser> for each invocation if you are operating in a multithreaded environment.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRegister">
      <MemberSignature Language="C#" Value="protected virtual void OnRegister (string schemeName, int defaultPort);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRegister(string schemeName, int32 defaultPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.OnRegister(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRegister (schemeName As String, defaultPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRegister(System::String ^ schemeName, int defaultPort);" />
      <MemberSignature Language="F#" Value="abstract member OnRegister : string * int -&gt; unit&#xA;override this.OnRegister : string * int -&gt; unit" Usage="uriParser.OnRegister (schemeName, defaultPort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemeName" Type="System.String" />
        <Parameter Name="defaultPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemeName"><span data-ttu-id="77b7e-150">この <see cref="T:System.UriParser" /> に関連付けられている スキーム。</span><span class="sxs-lookup"><span data-stu-id="77b7e-150">The scheme that is associated with this <see cref="T:System.UriParser" />.</span></span></param>
        <param name="defaultPort"><span data-ttu-id="77b7e-151">スキームのポート番号。</span><span class="sxs-lookup"><span data-stu-id="77b7e-151">The port number of the scheme.</span></span></param>
        <summary><span data-ttu-id="77b7e-152"><see cref="T:System.UriParser" /> メソッドが登録されている場合、Framework によって起動されます。</span><span class="sxs-lookup"><span data-stu-id="77b7e-152">Invoked by the Framework when a <see cref="T:System.UriParser" /> method is registered.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static void Register (UriParser uriParser, string schemeName, int defaultPort);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Register(class System.UriParser uriParser, string schemeName, int32 defaultPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Register(UriParser ^ uriParser, System::String ^ schemeName, int defaultPort);" />
      <MemberSignature Language="F#" Value="static member Register : UriParser * string * int -&gt; unit" Usage="System.UriParser.Register (uriParser, schemeName, defaultPort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriParser" Type="System.UriParser" />
        <Parameter Name="schemeName" Type="System.String" />
        <Parameter Name="defaultPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="uriParser"><span data-ttu-id="77b7e-153">登録する URI パーサー。</span><span class="sxs-lookup"><span data-stu-id="77b7e-153">The URI parser to register.</span></span></param>
        <param name="schemeName"><span data-ttu-id="77b7e-154">このパーサーに関連付けられたスキームの名前。</span><span class="sxs-lookup"><span data-stu-id="77b7e-154">The name of the scheme that is associated with this parser.</span></span></param>
        <param name="defaultPort"><span data-ttu-id="77b7e-155">指定したスキームの既定のポート番号。</span><span class="sxs-lookup"><span data-stu-id="77b7e-155">The default port number for the specified scheme.</span></span></param>
        <summary><span data-ttu-id="77b7e-156">スキームとポート番号を <see cref="T:System.UriParser" /> に関連付けます。</span><span class="sxs-lookup"><span data-stu-id="77b7e-156">Associates a scheme and port number with a <see cref="T:System.UriParser" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77b7e-157">`defaultPort` パラメーターが-1 に設定されている場合、<xref:System.UriParser.Register%2A> メソッドは、ポート番号に既定値を登録しません。</span><span class="sxs-lookup"><span data-stu-id="77b7e-157">If the `defaultPort` parameter is set to -1, the <xref:System.UriParser.Register%2A> method registers no default value for the port number.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="77b7e-158"><paramref name="uriParser" /> パラメーターが null です。</span><span class="sxs-lookup"><span data-stu-id="77b7e-158"><paramref name="uriParser" /> parameter is null</span></span> 
<span data-ttu-id="77b7e-159">または</span><span class="sxs-lookup"><span data-stu-id="77b7e-159">-or-</span></span> 
 <span data-ttu-id="77b7e-160"><paramref name="schemeName" /> パラメーターが null です。</span><span class="sxs-lookup"><span data-stu-id="77b7e-160"><paramref name="schemeName" /> parameter is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="77b7e-161"><paramref name="schemeName" /> パラメーターが有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="77b7e-161"><paramref name="schemeName" /> parameter is not valid</span></span> 
<span data-ttu-id="77b7e-162">または</span><span class="sxs-lookup"><span data-stu-id="77b7e-162">-or-</span></span> 
 <span data-ttu-id="77b7e-163"><paramref name="defaultPort" /> パラメーターが有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="77b7e-163"><paramref name="defaultPort" /> parameter is not valid.</span></span> <span data-ttu-id="77b7e-164"><paramref name="defaultPort" /> パラメーターが -1 未満であるか、または 65,534 を超えています。</span><span class="sxs-lookup"><span data-stu-id="77b7e-164">The <paramref name="defaultPort" /> parameter is less than -1 or greater than 65,534.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="protected virtual string Resolve (Uri baseUri, Uri relativeUri, out UriFormatException parsingError);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string Resolve(class System.Uri baseUri, class System.Uri relativeUri, [out] class System.UriFormatException&amp; parsingError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Resolve (baseUri As Uri, relativeUri As Uri, ByRef parsingError As UriFormatException) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ Resolve(Uri ^ baseUri, Uri ^ relativeUri, [Runtime::InteropServices::Out] UriFormatException ^ % parsingError);" />
      <MemberSignature Language="F#" Value="abstract member Resolve : Uri * Uri * UriFormatException -&gt; string&#xA;override this.Resolve : Uri * Uri * UriFormatException -&gt; string" Usage="uriParser.Resolve (baseUri, relativeUri, parsingError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.Uri" />
        <Parameter Name="parsingError" Type="System.UriFormatException" RefType="out" />
      </Parameters>
      <Docs>
        <param name="baseUri"><span data-ttu-id="77b7e-165">ベース URI。</span><span class="sxs-lookup"><span data-stu-id="77b7e-165">A base URI.</span></span></param>
        <param name="relativeUri"><span data-ttu-id="77b7e-166">相対 URI。</span><span class="sxs-lookup"><span data-stu-id="77b7e-166">A relative URI.</span></span></param>
        <param name="parsingError"><span data-ttu-id="77b7e-167">解決処理中のエラー (存在する場合)。</span><span class="sxs-lookup"><span data-stu-id="77b7e-167">Errors during the resolve process, if any.</span></span></param>
        <summary><span data-ttu-id="77b7e-168">相対 URI を解決するために、<see cref="T:System.Uri" /> コンストラクターと <see cref="Overload:System.Uri.TryCreate" /> によって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="77b7e-168">Called by <see cref="T:System.Uri" /> constructors and <see cref="Overload:System.Uri.TryCreate" /> to resolve a relative URI.</span></span></summary>
        <returns><span data-ttu-id="77b7e-169">解決された相対 <see cref="T:System.Uri" /> の文字列。</span><span class="sxs-lookup"><span data-stu-id="77b7e-169">The string of the resolved relative <see cref="T:System.Uri" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77b7e-170"><xref:System.Uri> コンストラクターと <xref:System.Uri.TryCreate%2A?displayProperty=nameWithType> は <xref:System.UriParser.Resolve%2A> を使用して `baseUri` および `relativeUri`から URI を作成します。</span><span class="sxs-lookup"><span data-stu-id="77b7e-170"><xref:System.Uri> constructors and <xref:System.Uri.TryCreate%2A?displayProperty=nameWithType> use <xref:System.UriParser.Resolve%2A> to construct a URI from `baseUri` and `relativeUri`.</span></span>  
  
 <span data-ttu-id="77b7e-171">解析エラーが発生した場合、解決された相対 <xref:System.Uri> に返される文字列は null になります。</span><span class="sxs-lookup"><span data-stu-id="77b7e-171">If a parsing error occurs, the returned string for the resolved relative <xref:System.Uri> is null.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="77b7e-172"><paramref name="baseUri" /> パラメーターが絶対 <see cref="T:System.Uri" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="77b7e-172"><paramref name="baseUri" /> parameter is not an absolute <see cref="T:System.Uri" /></span></span>  
  
<span data-ttu-id="77b7e-173">または</span><span class="sxs-lookup"><span data-stu-id="77b7e-173">-or-</span></span> 
 <span data-ttu-id="77b7e-174"><paramref name="baseUri" /> パラメーターが、ユーザーによる解析を必要とします。</span><span class="sxs-lookup"><span data-stu-id="77b7e-174"><paramref name="baseUri" /> parameter requires user-driven parsing.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
