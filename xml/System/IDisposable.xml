<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="78f125ef404fd834753376f23e6a2e57faee282b" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78684755" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>アンマネージ リソースを解放するためのメカニズムを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このインターフェイスの主な用途は、アンマネージリソースを解放することです。 ガベージコレクターは、そのオブジェクトが使用されなくなったときに、マネージオブジェクトに割り当てられたメモリを自動的に解放します。 ただし、ガベージコレクションがいつ発生するかを予測することはできません。 さらに、ガベージコレクターは、ウィンドウハンドルや開いているファイルやストリームなどのアンマネージリソースに関する情報を持っていません。  
  
 このインターフェイスの <xref:System.IDisposable.Dispose%2A> メソッドを使用して、ガベージコレクターと共にアンマネージリソースを明示的に解放します。 オブジェクトのコンシューマーは、オブジェクトが不要になったときにこのメソッドを呼び出すことができます。  
  
> [!WARNING]
>  既存のクラスに<xref:System.IDisposable>インターフェイスを追加することは互換性に影響する重大な変更です。 型の既存のコンシューマーは<xref:System.IDisposable.Dispose%2A>を呼び出すことができないため、型によって保持されているアンマネージリソースが解放されることは確実ではありません。  
  
 インスタンスが所有されているリソースが不要になったときに、型のコンシューマーによって<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 実装が呼び出されるため、マネージオブジェクトを<xref:System.Runtime.InteropServices.SafeHandle> でラップするか(推奨される方法)、コンシューマーが<xref:System.IDisposable.Dispose%2A>を呼び出し忘れた場合にアンマネージリソースを解放するために、<xref:System.Object.Finalize%2A?displayProperty=nameWithType>をオーバーライドする必要があります。  
  
> [!IMPORTANT]
>  .NET Framework では、C++ コンパイラはリソースの決定的な破棄をサポートしており、 <xref:System.IDisposable.Dispose%2A>メソッドを直接実装することはできません。  
  
 このインターフェイスと <xref:System.Object.Finalize%2A?displayProperty=nameWithType> メソッドの使用方法の詳細については、「[ガベージコレクション](~/docs/standard/garbage-collection/index.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)」のトピックを参照してください。  
  
## <a name="using-an-object-that-implements-idisposable"></a>IDisposable を実装するオブジェクトの使用  
 アプリケーションで<xref:System.IDisposable>インターフェイスを実装するオブジェクトのみを使用する場合は、オブジェクトの使用が終了したら、そのオブジェクトの<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>実装を呼び出す必要があります。 プログラミング言語によっては、次の 2 つの方法のいずれかでこれを行うことができます。  
  
-   C# および Visual Basic の `using` ステートメントなどの言語構造を使用する。  
  
-   <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>実装の呼び出しを`try`/`finally`ブロックでラップする。  
  
> [!NOTE]
>  <xref:System.IDisposable>を実装する型のドキュメントでは、その事実や<xref:System.IDisposable.Dispose%2A>実装を呼び出すためのリマインダーが含まれています。  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>C#および Visual Basic using ステートメント  
 言語が[using](~/docs/csharp/language-reference/keywords/using.md)(C#) ステートメント、 [Using](~/docs/visual-basic/language-reference/statements/using-statement.md)(Visual Basic) ステートメントなどをサポートしている場合、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>を自分で明示的に呼び出す代わりに、それらを使用できます。 次のコードの例ではこの方法を使用して、ファイルとその中の単語の数に関する情報を保持する`WordCount`クラスを定義します。  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 `using` ステートメントは、実際には構文的に便利です。 コンパイル時に、言語コンパイラは`try`/`finally`ブロックの中間言語 (IL) を実装します。  
  
 `using`ステートメントの詳細については、 [Using ステートメント](~/docs/visual-basic/language-reference/statements/using-statement.md) または [using ステートメント](~/docs/csharp/language-reference/keywords/using-statement.md) のトピックを参照してください。  
  
### <a name="the-tryfinally-block"></a>Try/Finally ブロック  
 使用するプログラミング言語がのようなコンストラクトをサポートしないかどうか、 `using` C# または Visual Basic では、ステートメントでそれを使用していない場合を呼び出すことができます、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>から実装、`finally`のブロックを`try`/`finally`ステートメント。 次の例は、`using`ブロックの前の例では、 `try`/`finally`ブロックします。  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 `try`/`finally`パターンの詳細については、[Try...Catch...Finally ステートメント](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)、 [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md)、または[try-finally ステートメント](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)を参照してください。  
  
## <a name="implementing-idisposable"></a>IDisposable の実装  
 型でアンマネージリソースを直接使用する場合にのみ、<xref:System.IDisposable>を実装する必要があります。 インスタンスが不要になった場合は 、型のコンシューマーが<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>実装を呼び出してリソースを解放できます。 <xref:System.IDisposable.Dispose%2A>の呼び出しに失敗したケースを処理するには、<xref:System.Runtime.InteropServices.SafeHandle>から派生したクラスを使用してアンマネージリソースをラップするか、参照型に対して<xref:System.Object.Finalize%2A?displayProperty=nameWithType>メソッドをオーバーライドする必要があります。 どちらの場合も、アンマネージリソースの解放、解放、またはリセットなど、アンマネージリソースを使用した後に必要なクリーンアップを実行するには、<xref:System.IDisposable.Dispose%2A>メソッドを使用します。  
  
> [!IMPORTANT]
>  アンマネージリソースを使用し、破棄する必要があるサブクラスを持っているか、または存在する可能性が高い基底クラスを定義する場合は、次のセクションで説明する様に、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>メソッドを実装し、2 番目の`Dispose`オーバーロードを提供する必要があります。  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable および継承階層  
 破棄可能である必要があるサブクラスを持つ基底クラスは、次のように<xref:System.IDisposable>を実装する必要があります。 `sealed` されていない型 (Visual Basic では`NotInheritable`) に <xref:System.IDisposable> を実装する場合は常に、このパターンを使用する必要があります。  
  
-   1つのパブリック、非仮想 <xref:System.IDisposable.Dispose> メソッド、および保護された仮想 `Dispose(Boolean disposing)` メソッドを提供する必要があります。  
  
-   <xref:System.IDisposable.Dispose> メソッドは `Dispose(true)` を呼び出す必要があり、パフォーマンスのために終了処理を抑制する必要があります。  
  
-   基本型はファイナライザーを含めることはできません。  
  
 次のコード片は、基底クラスの dispose パターンを反映しています。 型が<xref:System.Object.Finalize%2A?displayProperty=nameWithType>メソッドをオーバーライドしないことを前提としています。  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> メソッドをオーバーライドする場合、クラスは次のパターンを実装する必要があります。  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 サブクラスは破棄可能なパターンを次のように実装する必要があります。  
  
-   これらは `Dispose(Boolean)` をオーバーライドし、基底クラスの `Dispose(Boolean)` の実装を呼び出す必要があります。  
  
-   必要な場合にはファイナライザーを提供します。 ファイナライザーは `Dispose(false)` を呼び出す必要があります。  
  
 派生クラスは、それ自体がインターフェイスを<xref:System.IDisposable>実装しておらず、パラメーターなしの <xref:System.IDisposable.Dispose%2A>メソッドを含んでいないことに注意してください。 基底クラスの`Dispose(Boolean)`メソッドをオーバーライドしているだけです。  
  
 次のコード片は、派生クラスの dispose パターンを反映しています。 型が<xref:System.Object.Finalize%2A?displayProperty=nameWithType>メソッドをオーバーライドしないことを前提としています。  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 次の例は、<xref:System.IDisposable> インターフェイスを実装するリソースクラスを作成する方法を示しています。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Dispose メソッドの実装</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アンマネージ リソースの解放またはリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、このインターフェイスを実装するクラスのインスタンスによって保持されているファイル、ストリーム、ハンドルなどのアンマネージリソースを閉じたり解放したりします。 慣例により、このメソッドは、オブジェクトが保持するリソースの解放に関連するすべてのタスク、またはオブジェクトを再利用するための準備に使用されます。  
  
> [!WARNING]
>  <xref:System.IDisposable>インターフェイスを実装するクラスを使用している場合は、クラスの使用が終了したら、その<xref:System.IDisposable.Dispose%2A>実装を呼び出す必要があります。 詳細については、「<xref:System.IDisposable> 」の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。  
  
 このメソッドを実装する場合は、包含階層を介して呼び出しを伝達することによって、保持されているすべてのリソースが解放されるようにします。 たとえば、オブジェクト a がオブジェクト b を割り当て、オブジェクト b がオブジェクト c を割り当てる場合、<xref:System.IDisposable.Dispose%2A>実装は b に対して<xref:System.IDisposable.Dispose%2A>を呼び出す必要があります。<xref:System.IDisposable.Dispose%2A>この場合、c を呼び出す必要があります。  
  
> [!IMPORTANT]
>  C++ コンパイラはリソースの決定的な破棄をサポートし、 <xref:System.IDisposable.Dispose%2A>メソッドを直接実装することはできません。  
  
 基底クラスが <xref:System.IDisposable>を実装している場合、オブジェクトはその基底クラスの <xref:System.IDisposable.Dispose%2A>メソッドも呼び出す必要があります。 基底クラスとそのサブクラスに<xref:System.IDisposable>を実装する方法の詳細については、「<xref:System.IDisposable>」の「IDisposable および継承階層」セクションを参照してください。  
  
 オブジェクトの<xref:System.IDisposable.Dispose%2A>メソッドが 2 回以上呼び出された場合、オブジェクトは、最初の呼び出しの後すべての呼び出しを無視する必要があります。 <xref:System.IDisposable.Dispose%2A> メソッドが複数回呼び出された場合、オブジェクトは例外をスローしません。 リソースが既に破棄されている場合、<xref:System.IDisposable.Dispose%2A>以外のインスタンスメソッドは<xref:System.ObjectDisposedException>をスローする可能性があります。  
  
 ユーザーは、割り当てられた状態と解放された状態を示すために、リソースの種類が特定の規則を使用することを期待できます。 この例としては、従来は open または closed と考えられるストリームクラスがあります。 このような規則を持つクラスの実装者は、<xref:System.IDisposable.Dispose%2A> メソッドを呼び出す `Close`など、カスタマイズされた名前を持つパブリックメソッドを実装することができます。  
  
 <xref:System.IDisposable.Dispose%2A>メソッドを明示的に呼び出す必要があるが、オブジェクトのコンシューマーが<xref:System.IDisposable.Dispose%2A>メソッドを呼び出し忘れ、アンマネージリソースが解放されないという危険性は常にあります。 これを回避するには、次の 2 つの方法があります。  
  
-   マネージリソースを<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>から派生したオブジェクトでラップします。 次に、 <xref:System.IDisposable.Dispose%2A>実装は、 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>インスタンスの <xref:System.IDisposable.Dispose%2A>メソッドを呼び出します。 詳細については、「<xref:System.Object.Finalize%2A?displayProperty=nameWithType>」の 「SafeHandle 代替」セクションを参照してください。  
  
-   <xref:System.IDisposable.Dispose%2A>が呼び出されない場合にリソースを解放するには、ファイナライザーを実装します。 既定では、ガベージコレクターは、メモリを再利用する前に、オブジェクトのファイナライザーを自動的に呼び出します。 ただし、<xref:System.IDisposable.Dispose%2A> メソッドが呼び出された場合は、通常、ガベージコレクターが破棄されたオブジェクトのファイナライザーを呼び出す必要はありません。 自動終了処理を回避するために、 <xref:System.IDisposable.Dispose%2A>実装では<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>メソッドを呼び出すことができます。  
  
 <xref:System.IO.StreamWriter>などの、アンマネージリソースにアクセスするオブジェクトを使用する場合は、 `using`ステートメントを使用してインスタンスを作成することをお勧めします。 `using`ステートメントは、それを使用しているコードが完了すると、ストリームを自動的に閉じ、そのオブジェクトに対して<xref:System.IDisposable.Dispose%2A> を呼び出します。 例については、<xref:System.IO.StreamWriter> クラスを参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.IDisposable.Dispose%2A> メソッドを実装する方法を示しています。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Dispose メソッドの実装</related>
      </Docs>
    </Member>
  </Members>
</Type>
