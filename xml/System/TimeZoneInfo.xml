<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="13e2879ce6b3030f29fc44edc39adf08f7ecedc3" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77221330" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>世界中のいずれかのタイム ゾーンを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 タイム ゾーンは、同じ時刻が使用されている地域です。  
  
 <xref:System.TimeZoneInfo> クラスは、機能が制限されている <xref:System.TimeZone> クラスよりも大幅な機能強化を提供します。  
  
 <xref:System.TimeZone> クラスは、ローカルタイムゾーンのみを認識し、世界協定時刻 (UTC) と現地時刻の間で時刻を変換できます。 <xref:System.TimeZoneInfo> オブジェクトは任意のタイムゾーンを表すことができ、<xref:System.TimeZoneInfo> クラスのメソッドを使用して、あるタイムゾーンの時刻を他のタイムゾーンの対応する時刻に変換できます。 <xref:System.TimeZoneInfo> クラスのメンバーは、次の操作をサポートします。  
  
-   オペレーティングシステムによって既に定義されているタイムゾーンを取得しています。  
  
-   システムで使用できるタイムゾーンを列挙する。  
  
-   異なるタイムゾーン間での時刻の変換。  
  
-   オペレーティングシステムによって定義されていない新しいタイムゾーンを作成しています。  
  
-   後で取得するためにタイムゾーンをシリアル化する。  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo> クラスのインスタンスは変更できません。 オブジェクトがインスタンス化されると、その値を変更することはできません。  
  
 `new` キーワードを使用して <xref:System.TimeZoneInfo> オブジェクトをインスタンス化することはできません。 代わりに、次の表に示す <xref:System.TimeZoneInfo> クラスの静的メンバーの1つを呼び出す必要があります。  
  
|静的メンバー名|説明|  
|------------------------|-----------------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> メソッド|アプリケーションによって提供されるデータからカスタムタイムゾーンを作成します。|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> メソッド|識別子に基づいてタイムゾーンをインスタンス化します。|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A> メソッド|文字列値を逆シリアル化して、以前にシリアル化された <xref:System.TimeZoneInfo> オブジェクトを再作成します。|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A> メソッド|ローカルシステムで使用できるすべてのタイムゾーンを表す <xref:System.TimeZoneInfo> オブジェクトの列挙可能な <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> を返します。|  
|<xref:System.TimeZoneInfo.Local%2A> プロパティ|ローカルタイムゾーンを表す <xref:System.TimeZoneInfo> オブジェクトをインスタンス化します。|  
|<xref:System.TimeZoneInfo.Utc%2A> プロパティ|UTC ゾーンを表す <xref:System.TimeZoneInfo> オブジェクトをインスタンス化します。|  
  
 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> メソッドを使用して、Windows システムのローカルシステムレジストリで定義されていないタイムゾーンを作成したり、Linux または macOS の[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)のタイムゾーンクラスを使用してタイムゾーンを作成したりできます。 次に、<xref:System.TimeZoneInfo.ToSerializedString%2A> プロパティを使用して、タイムゾーンオブジェクトの情報を文字列として保存できます。これは、アプリケーションからアクセスできる何らかの形式で格納できます。 <xref:System.TimeZoneInfo.FromSerializedString%2A> メソッドを使用して、シリアル化された文字列を <xref:System.TimeZoneInfo> オブジェクトに変換して戻すことができます。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のタイム ゾーンの標準時と世界協定時刻 (UTC) との差を返します。</summary>
        <value>現在のタイム ゾーンの標準時と世界協定時刻 (UTC) との時差を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> プロパティによって返される時間間隔は、14時間 (世界協定時刻 (UTC) から14時間経過したタイムゾーンの場合) から-14 時間 (UTC の遅れが14時間のタイムゾーンの場合) までの範囲で指定できます。 UTC より前のタイムゾーンには、正のオフセットがあります。UTC の後ろにあるタイムゾーンのオフセットは負になります。  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 値は、分の整数で表されます。 分数を含めることはできません。  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.BaseUtcOffset%2A> は <xref:System.TimeZoneInfo.AdjustmentRule> オブジェクトではなく <xref:System.TimeZoneInfo> オブジェクトのプロパティであるため、<xref:System.TimeZoneInfo> クラスは UTC からすべてのタイムゾーンの調整に対して1つのオフセットを適用します。 UTC からのオフセットを変更したタイムゾーンを反映するには、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> メソッドを使用して新しいタイムゾーンを作成する必要があります。  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> プロパティは、次の方法で <xref:System.TimeZoneInfo.GetUtcOffset%2A> メソッドとは異なります。  
  
-   <xref:System.TimeZoneInfo.BaseUtcOffset%2A> プロパティは、UTC とタイムゾーンの標準時刻の差を返します。<xref:System.TimeZoneInfo.GetUtcOffset%2A> メソッドは、特定の時点での UTC とタイムゾーンの時刻の差を返します。  
  
-   <xref:System.TimeZoneInfo.GetUtcOffset%2A> メソッドは、調整規則の適用をタイムゾーンに反映します。<xref:System.TimeZoneInfo.BaseUtcOffset%2A> プロパティにはありません。  
  
   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.BaseUtcOffset%2A> プロパティを使用して、現地時刻と世界協定時刻 (UTC) の差を表示します。  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>キャッシュされたタイム ゾーン データをクリアします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 キャッシュされたタイムゾーンデータには、ローカルタイムゾーンおよび世界協定時刻 (UTC) ゾーンのデータが含まれます。  
  
 `ClearCachedData` メソッドを呼び出して、アプリケーションのタイムゾーン情報のキャッシュに専念するメモリを減らすか、ローカルシステムのタイムゾーンが変更されたという事実を反映することができます。  
  
 ローカルタイムゾーンと UTC タイムゾーンへの参照を格納することはお勧めできません。 `ClearCachedData` メソッドを呼び出した後、これらのオブジェクト変数は <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> または <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>への参照がなくなったオブジェクト <xref:System.TimeZoneInfo> 未定義になります。 たとえば、次のコードでは、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> メソッドの2回目の呼び出しでは、`local` 変数が <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>とは見なされなくなったため、<xref:System.ArgumentException> がスローされます。  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>時刻を特定のタイム ゾーンの時刻に変換します。</summary>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="destinationTimeZone"><paramref name="dateTime" /> の変換先タイム ゾーン。</param>
        <summary>時刻を特定のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行すると、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> メソッドによって、`destinationTimeZone` タイムゾーンで有効になっている調整規則が適用されます。  
  
 次の表に示すように、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> メソッドのこのオーバーロードは、`dateTime` パラメーターの <xref:System.DateTime.Kind%2A> プロパティの値からソースタイムゾーンを決定します。  
  
|Kind プロパティ値|ソースタイムゾーン|メソッドの動作|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|ローカル時刻を `destinationTimeZone`の時刻に変換します。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|世界協定時刻 (UTC) を `destinationTimeZone`の時刻に変換します。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>と想定されます。|ローカル時刻を `destinationTimeZone`の時刻に変換します。|  
  
 返された <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは、次の表に示すように設定されます。  
  
|条件|返された Kind プロパティ値|  
|---------------|----------------------------------|  
|`destinationTimeZone` は <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> です。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` は <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> です。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|その他のすべての日付と時刻の値と変換先のタイムゾーン。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 `dateTime` パラメーターの値があいまいな現地時刻の場合、標準時として解釈されます。 `dateTime` パラメーターが無効な現地時刻の場合、このメソッドは <xref:System.ArgumentException>をスローします。  
  
 `dateTime` の変換によって <xref:System.DateTime.MaxValue?displayProperty=nameWithType>よりも <xref:System.DateTime.MinValue?displayProperty=nameWithType> 前の日付と時刻の値が返される場合、このメソッドは <xref:System.DateTime.MinValue?displayProperty=nameWithType> または <xref:System.DateTime.MaxValue?displayProperty=nameWithType>をそれぞれ返します。  
  
 <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> および <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> メソッドを呼び出すことによって、UTC との間で変換を行うこともできます。  
  
   
  
## Examples  
 次の例では、日付と時刻の値の配列を米国およびカナダの東部標準時のタイムゾーンの時刻に変換します。 これは、ソースタイムゾーンがソース <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> プロパティに依存していることを示しています。 また、タイムゾーンの調整は、ソースと宛先の両方のタイムゾーンで午前2:00 に行われるため、<xref:System.TimeZoneInfo.ConvertTime%2A> メソッドではタイムゾーンの調整が行われることも示しています。 2010年11月7日。  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> パラメーターの値が無効な時刻を表しています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> パラメーターの値が <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">変換する日付と時刻。</param>
        <param name="destinationTimeZone"><paramref name="dateTime" /> の変換先タイム ゾーン。</param>
        <summary>時刻を特定のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行すると、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> メソッドによって、`destinationTimeZone` タイムゾーンで有効になっている調整規則が適用されます。  
  
 このオーバーロードは、最初のパラメーターとして <xref:System.DateTimeOffset> 値を受け取ることによって、<xref:System.TimeZoneInfo.ConvertTime%2A> メソッドの他のオーバーロードとは異なります。 これにより、特定のタイムゾーンの日付と時刻ではなく世界協定時刻 (UTC) からのオフセットとして日付と時刻が識別されます。 その結果、`dateTimeOffset` パラメーターはあいまいな時刻または無効な時刻を表すことができません。  
  
 `dateTimeOffset` 値を変換先タイムゾーンの時刻に変換する場合、この方法では、変換先タイムゾーンで有効になっている調整規則が考慮されます。  
  
 `dateTimeOffset` の変換によって <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>よりも <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> 前の日付と時刻の値が返される場合、このメソッドは <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> または <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>をそれぞれ返します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset> 値の配列を米国およびカナダの東部標準時のタイムゾーンの時刻に変換します。 タイムゾーンの調整は、移行元と移行先の両方のタイムゾーンで午前2:00 に行われるため、<xref:System.TimeZoneInfo.ConvertTime%2A> メソッドではタイムゾーン調整が考慮されることを示しています。 2010年11月7日。  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> パラメーターの値が <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="sourceTimeZone"><paramref name="dateTime" /> のタイム ゾーン。</param>
        <param name="destinationTimeZone"><paramref name="dateTime" /> の変換先タイム ゾーン。</param>
        <summary>あるタイム ゾーンの時刻を別のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換元タイム ゾーンでの <paramref name="dateTime" /> パラメーターに対応する、変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行すると、<xref:System.TimeZoneInfo.ConvertTime%2A> メソッドによって、`destinationTimeZone` タイムゾーンで有効になっている調整規則が適用されます。  
  
 次の表に示すように、`dateTime` パラメーターの <xref:System.DateTime.Kind%2A> プロパティの値は、`sourceTimeZone` パラメーターに対応している必要があります。  
  
|DateTime. Kind 値|sourceTimeZone 値|メソッドの動作|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|が <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>に等しい。|`dateTime` を変換先タイムゾーンの時刻に変換します。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Does not equal <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>です。|<xref:System.ArgumentException>をスローします。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|が <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>に等しい。|`dateTime` を変換先タイムゾーンの時刻に変換します。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Does not equal <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>です。|<xref:System.ArgumentException>をスローします。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|いつ.|`dateTime` を変換先タイムゾーンの時刻に変換します。|  
  
 <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> および <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> メソッドを呼び出すことによって、世界協定時刻 (UTC) との間で変換を行うこともできます。  
  
 返された <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは、次の表に示すように設定されます。  
  
|条件|返された Kind プロパティ値|  
|---------------|----------------------------------|  
|`destinationTimeZone` 引数が <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> です。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` 引数が <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> です。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|その他のすべての日付と時刻の値、変換元のタイムゾーン、および変換先のタイムゾーン。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 `dateTime` パラメーターの値がソースタイムゾーンのあいまいな時刻の場合、標準時として解釈されます。 `dateTime` パラメーターがソースタイムゾーンの無効な時刻の場合、このメソッドは <xref:System.ArgumentException>をスローします。  
  
 `dateTime` の変換によって <xref:System.DateTime.MaxValue?displayProperty=nameWithType>よりも <xref:System.DateTime.MinValue?displayProperty=nameWithType> 前の日付と時刻の値が返される場合、このメソッドは <xref:System.DateTime.MinValue?displayProperty=nameWithType> または <xref:System.DateTime.MaxValue?displayProperty=nameWithType>をそれぞれ返します。  
  
 `dateTime` 引数の <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType> でも、`sourceTimeZone` 引数が <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>ない場合、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> メソッドは <xref:System.ArgumentException> 例外をスローします。 ソースタイムゾーンがローカルタイムゾーンとユニバーサルタイムゾーンのどちらであるかを判断するために、メソッドは、<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> メソッドとの値が等しいかどうかをテストするのではなく、参照の等価性をテストします。 ローカルタイムゾーンを表すオブジェクト <xref:System.TimeZoneInfo> <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> メソッドを呼び出すことによって取得されるオブジェクトは、<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>との参照等値を持っていないことに注意してください。 さらに、ローカルタイムゾーンまたはユニバーサルタイムゾーンを表すオブジェクト <xref:System.TimeZoneInfo>、<xref:System.TimeZoneInfo.GetSystemTimeZones%2A> メソッドによって返されるコレクションを反復処理することによって取得されるオブジェクトには、<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> または <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>との参照の等価性がありません。 別の方法として、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> メソッドを呼び出すこともできます。  
  
   
  
## Examples  
 次の例は、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> メソッドを使用して、ハワイ標準時から現地時刻に変換する方法を示しています。  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> パラメーターの <paramref name="dateTime" /> プロパティは <see cref="F:System.DateTimeKind.Local" /> ですが、<paramref name="sourceTimeZone" /> パラメーターが <see cref="F:System.DateTimeKind.Local" /> と等しくありません。  
  
または 
<see cref="P:System.DateTime.Kind" /> パラメーターの <paramref name="dateTime" /> プロパティは <see cref="F:System.DateTimeKind.Utc" /> ですが、<paramref name="sourceTimeZone" /> パラメーターが <see cref="P:System.TimeZoneInfo.Utc" /> と等しくありません。  
  
または 
<paramref name="dateTime" /> パラメーターが無効な時刻です (つまり、タイム ゾーンの調整規則が原因で、存在しない時刻を表しています)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> パラメーターが <see langword="null" /> です。  
  
または 
<paramref name="destinationTimeZone" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ある時刻をタイム ゾーン ID に基づいて別のタイム ゾーンの時刻に変換します。</summary>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="destinationTimeZoneId">変換先タイム ゾーンの ID。</param>
        <summary>ある時刻をタイム ゾーン ID に基づいて別のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行すると、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> メソッドによって、`destinationTimeZoneId` タイムゾーンで有効になっている調整規則が適用されます。  
  
 このオーバーロードは、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> メソッドの呼び出しとほぼ同じですが、オブジェクト参照ではなく、識別子によって変換先のタイムゾーンを指定できる点が異なります。 このメソッドは、対応するタイムゾーンオブジェクトを取得せずに時刻を変換する必要があり、変換された時刻が標準と夏時間のどちらであるかを知る必要がない場合に最も役立ちます。  
  
 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> メソッドは、次の表に示すように、`dateTime` パラメーターの <xref:System.DateTime.Kind%2A> プロパティの値からソースタイムゾーンを決定します。  
  
|Kind プロパティ値|ソースタイムゾーン|メソッドの動作|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|ローカル時刻を `destinationTimeZone`の時刻に変換します。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|世界協定時刻 (UTC) を `destinationTimeZone`の時刻に変換します。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>と想定されます。|ローカル時刻を `destinationTimeZone`の時刻に変換します。|  
  
 返された <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは、次の表に示すように設定されます。  
  
|条件|返された Kind プロパティ値|  
|---------------|----------------------------------|  
|`destinationTimeZone` は `TimeZoneInfo.Utc.Id` です。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|その他の `destinationTimeZone` 値。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 `dateTime` パラメーターの値があいまいな現地時刻の場合、標準時として解釈されます。 `dateTime` パラメーターが無効な現地時刻の場合、このメソッドは <xref:System.ArgumentException>をスローします。  
  
 `dateTime` の変換によって <xref:System.DateTime.MaxValue?displayProperty=nameWithType>よりも <xref:System.DateTime.MinValue?displayProperty=nameWithType> 前の日付と時刻の値が返される場合、このメソッドは <xref:System.DateTime.MinValue?displayProperty=nameWithType> または <xref:System.DateTime.MaxValue?displayProperty=nameWithType>をそれぞれ返します。  
  
 このメソッドは、Windows システムのレジストリと Linux および macOS の[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)から、`destinationTimeZoneId` パラメーターで指定された識別子を持つタイムゾーンに関する情報を取得します。 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> メソッドを使用して作成されたタイムゾーンオブジェクトを取得することはできません。 `destinationTimeZoneId` パラメーターは、タイムゾーンの長さの識別子と正確に対応している必要がありますが、一致と見なされるようにするには、大文字と小文字は区別されません。つまり、`destinationTimeZoneId` とタイムゾーン識別子の比較では、大文字と小文字は区別されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidTimeZoneException">タイム ゾーン ID が見つかりましたが、レジストリ データが壊れています。</exception>
        <exception cref="T:System.Security.SecurityException">プロセスには、タイム ゾーン情報を格納するレジストリ キーからの読み取りに必要な権限がありません。</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="destinationTimeZoneId" /> 識別子が、ローカル システムで見つかりませんでした。</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">変換する日付と時刻。</param>
        <param name="destinationTimeZoneId">変換先タイム ゾーンの ID。</param>
        <summary>ある時刻をタイム ゾーン ID に基づいて別のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行すると、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> メソッドによって、`destinationTimeZoneId` タイムゾーンで有効になっている調整規則が適用されます。  
  
 このオーバーロードは <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> メソッドを呼び出すことと同じですが、オブジェクト参照ではなく、識別子を使用して変換先のタイムゾーンを指定できる点が異なります。 このメソッドは、対応するタイムゾーンオブジェクトを取得せずに時刻を変換する必要があり、変換された時刻が標準と夏時間のどちらであるかを知る必要がない場合に最も役立ちます。  
  
 `dateTimeOffset` パラメーターは、世界協定時刻 (UTC) からの時刻のオフセットと共に日付と時刻を表しているので、あいまいな時刻と無効な時刻のどちらも表すことはできません。  
  
 このメソッドは、Windows システムのレジストリと Linux および macOS の[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)から、`destinationTimeZoneId` パラメーターで指定された識別子を持つタイムゾーンを取得します。 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> メソッドを使用して作成されたタイムゾーンオブジェクトを取得することはできません。 `destinationTimeZoneId` パラメーターは、タイムゾーンの長さの識別子と正確に対応している必要がありますが、一致と見なされるようにするには、大文字と小文字は区別されません。つまり、`destinationTimeZoneId` とタイムゾーン識別子の比較では、大文字と小文字は区別されません。  
  
 `dateTimeOffset` 値を変換先タイムゾーンの時刻に変換する場合、メソッドは、変換先タイムゾーンで有効になっている調整規則を考慮に入れます。  
  
 `dateTimeOffset` の変換によって <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>よりも <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> 前の日付と時刻の値が返される場合、このメソッドは <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> または <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>をそれぞれ返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidTimeZoneException">タイム ゾーン ID が見つかりましたが、レジストリ データが壊れています。</exception>
        <exception cref="T:System.Security.SecurityException">プロセスには、タイム ゾーン情報を格納するレジストリ キーからの読み取りに必要な権限がありません。</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="destinationTimeZoneId" /> 識別子が、ローカル システムで見つかりませんでした。</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="sourceTimeZoneId">変換元タイム ゾーンの ID。</param>
        <param name="destinationTimeZoneId">変換先タイム ゾーンの ID。</param>
        <summary>あるタイム ゾーンの時刻を別のタイム ゾーンの時刻にタイム ゾーン ID に基づいて変換します。</summary>
        <returns>変換元タイム ゾーンでの <paramref name="dateTime" /> パラメーターに対応する、変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行すると、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> メソッドによって、`destinationTimeZoneId` タイムゾーンで有効になっている調整規則が適用されます。  
  
 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> メソッドに似ていますが、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> を使用して、<xref:System.TimeZoneInfo> オブジェクトではなく識別子を使用して、ソースとターゲットのタイムゾーンを指定できます。 このメソッドは、対応するタイムゾーンオブジェクトを取得せずに時刻を変換する必要があり、変換された時刻が標準と夏時間のどちらであるかを知る必要がない場合に最も役立ちます。  
  
 このメソッドは、Windows システムのレジストリおよび Linux および macOS の[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)から、識別子が `sourceTimeZoneId` および `destinationTimeZoneId` パラメーターであるタイムゾーンを取得します。 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> メソッドを使用して作成されたタイムゾーンオブジェクトを取得することはできません。  
  
 次の表に示すように、`dateTime` パラメーターの <xref:System.DateTime.Kind%2A> プロパティの値は、`sourceTimeZoneId` パラメーターに対応している必要があります。  
  
|DateTime. Kind 値|sourceTimeZone 値|メソッドの動作|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|が `TimeZoneInfo.Utc.Id`に等しい。|`dateTime` を変換先タイムゾーンの時刻に変換します。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Does not equal `TimeZoneInfo.Utc.Id`です。|<xref:System.ArgumentException>をスローします。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|が `TimeZoneInfo.Local.Id`に等しい。|`dateTime` を変換先タイムゾーンの時刻に変換します。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Does not equal `TimeZoneInfo.Local.Id`です。|<xref:System.ArgumentException>をスローします。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|いつ.|`dateTime` を変換先タイムゾーンの時刻に変換します。|  
  
 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> メソッドは、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> メソッドの呼び出しに依存しているため、`sourceTimeZoneId` と `destinationTimeZoneId`に対応するタイムゾーンを検索するために、大文字と小文字を区別しない検索を実行します。  
  
 `dateTime` パラメーターの値がソースタイムゾーンのあいまいな時刻の場合、標準時として解釈されます。 `dateTime` パラメーターがソースタイムゾーンの無効な時刻の場合、このメソッドは <xref:System.ArgumentException>をスローします。  
  
 返された <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> に設定されます。ただし、変換先のタイムゾーンが世界協定時刻 (UTC) である場合は、<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定されます。  
  
   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> メソッドを使用して、世界の8都市でローカルシステム時刻に対応する時刻を表示します。  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> パラメーターの <paramref name="dateTime" /> プロパティは変換元タイム ゾーンと対応していません。  
  
または 
 <paramref name="dateTime" /> はソース タイム ゾーンで無効な時間です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" /> が <see langword="null" /> です。  
  
または 
 <paramref name="destinationTimeZoneId" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidTimeZoneException">タイム ゾーン ID が見つかりましたが、レジストリ データが破損しています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、タイム ゾーン データが格納されているレジストリ キーからの読み取りに必要な権限がありません。</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="sourceTimeZoneId" /> 識別子が、ローカル システムで見つかりませんでした。  
  
または 
<paramref name="destinationTimeZoneId" /> 識別子が、ローカル システムで見つかりませんでした。</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">世界協定時刻 (UTC)。</param>
        <param name="destinationTimeZone"><paramref name="dateTime" /> の変換先タイム ゾーン。</param>
        <summary>世界協定時刻 (UTC) を、指定されたタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。 <see cref="P:System.DateTime.Kind" /> が <see cref="F:System.DateTimeKind.Utc" /> の場合、<paramref name="destinationTimeZone" /> プロパティは <see cref="P:System.TimeZoneInfo.Utc" />。それ以外の場合、<see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変換を実行すると、<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> メソッドによって、`destinationTimeZone` タイムゾーンで有効になっている調整規則が適用されます。  
  
 このメソッドの正確な動作は、次の表に示すように、`dateTime` パラメーターの <xref:System.DateTime.Kind%2A> プロパティの値によって異なります。  
  
|DateTime. Kind プロパティ|変換|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.ArgumentException>をスローします。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> または <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|世界協定時刻 (UTC) から変換します。|  
  
 `dateTime` の変換によって <xref:System.DateTime.MaxValue?displayProperty=nameWithType>よりも <xref:System.DateTime.MinValue?displayProperty=nameWithType> 前の日付と時刻の値が返される場合、このメソッドは <xref:System.DateTime.MinValue?displayProperty=nameWithType> または <xref:System.DateTime.MaxValue?displayProperty=nameWithType>をそれぞれ返します。  
  
   
  
## Examples  
 次の例では、世界協定時刻 (UTC) を中部標準時に変換します。  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> の <paramref name="dateTime" /> プロパティが <see cref="F:System.DateTimeKind.Local" /> です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>日付と時刻を世界協定時刻 (UTC) に変換します。</summary>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <summary>指定の日付と時刻を世界協定時刻 (UTC) に変換します。</summary>
        <returns><paramref name="dateTime" /> パラメーターに対応する世界協定時刻 (UTC)。 <see cref="T:System.DateTime" /> 値の <see cref="P:System.DateTime.Kind" /> プロパティは、常に <see cref="F:System.DateTimeKind.Utc" /> に設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実行される正確な変換は、次の表に示すように、`dateTime` パラメーターの <xref:System.DateTime.Kind%2A> プロパティの値によって異なります。  
  
|DateTime. Kind プロパティ|変換|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|現地時刻から世界協定時刻 (UTC) に変換します。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|は現地時刻であり、現地時刻から UTC に変換される `dateTime` を想定しています。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|`dateTime` を変更せずに返します。|  
  
 `dateTime` があいまいな現地時刻に対応する場合、このメソッドは標準の現地時刻であると想定します。 `dateTime` が無効な現地時刻に対応する場合、メソッドは <xref:System.ArgumentException>をスローします。  
  
> [!NOTE]
>  現在のコンピューターのローカルタイムゾーンに複数の調整規則が含まれている場合、<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> メソッドのこのオーバーロードは、<xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> メソッドと <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> メソッドとは異なる結果を返す可能性があります。 <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> は、`dateTime` がその日付範囲内にあるかどうかにかかわらず、常に現在の調整規則をタイムゾーンの変換に適用します。 また、[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]で実行する場合、<xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> の日付範囲内に `dateTime` かどうかにかかわらず、現在の調整規則をタイムゾーンの変換にも適用します。  
  
 `dateTime` に対応する UTC が <xref:System.DateTime.MinValue?displayProperty=nameWithType> 以降の <xref:System.DateTime.MaxValue?displayProperty=nameWithType>よりも前の場合、このメソッドは <xref:System.DateTime.MinValue> または <xref:System.DateTime.MaxValue>をそれぞれ返します。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTime.Kind%2A> プロパティがそれぞれ <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>、<xref:System.DateTimeKind.Local?displayProperty=nameWithType>、および <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>である時間値の変換を示しています。 また、あいまいな時刻と無効な時刻の変換についても説明します。  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> は <see langword="true" /> を返します。</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="sourceTimeZone"><paramref name="dateTime" /> のタイム ゾーン。</param>
        <summary>指定されたタイム ゾーンの時刻を世界協定時刻 (UTC) に変換します。</summary>
        <returns><paramref name="dateTime" /> パラメーターに対応する世界協定時刻 (UTC)。 <see cref="T:System.DateTime" /> オブジェクトの <see cref="P:System.DateTime.Kind" /> プロパティは、常に <see cref="F:System.DateTimeKind.Utc" /> に設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `dateTime` パラメーターの <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> で、`sourceTimeZone` パラメーターが <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>と等しい場合、このメソッドは変換を実行せずに `dateTime` を返します。  
  
 `dateTime` があいまいな時刻に対応する場合、このメソッドは、ソースタイムゾーンの標準時刻であると想定します。 `dateTime` が無効な時刻に対応する場合、このメソッドは <xref:System.ArgumentException>をスローします。  
  
 `dateTime` に対応する世界協定時刻 (UTC) が、<xref:System.DateTime.MaxValue?displayProperty=nameWithType><xref:System.DateTime.MinValue?displayProperty=nameWithType> 以降よりも前の場合、このメソッドは <xref:System.DateTime.MinValue> または <xref:System.DateTime.MaxValue>をそれぞれ返します。  
  
   
  
## Examples  
 次の例では、ローカルシステムから現在の日付を取得し、世界協定時刻 (UTC) に変換した後、東京標準時に変換し、最後に東京標準時から UTC に変換します。 2つの UTC 時刻は同じであることに注意してください。  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />」を参照してください。<see langword="Kind" /> は <see cref="F:System.DateTimeKind.Utc" /> であり、<paramref name="sourceTimeZone" /> は <see cref="P:System.TimeZoneInfo.Utc" /> と一致しません。  
  
または 
 <paramref name="dateTime" />」を参照してください。<see langword="Kind" /> は <see cref="F:System.DateTimeKind.Local" /> であり、<paramref name="sourceTimeZone" /> は <see cref="P:System.TimeZoneInfo.Local" /> と一致しません。  
  
または 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> は <see langword="true" /> を返します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> が <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">タイム ゾーン間での時刻の変換</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ローカル コンピューターにないタイム ゾーンを定義します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="id">タイム ゾーン ID。</param>
        <param name="baseUtcOffset">このタイム ゾーンの標準時と世界協定時刻 (UTC) との時差を表すオブジェクト。</param>
        <param name="displayName">新しいタイム ゾーンの表示名。</param>
        <param name="standardDisplayName">新しいタイム ゾーンの標準時名。</param>
        <summary>指定された ID、世界協定時刻 (UTC) からのオフセット、表示名、および標準時の表示名を使用して、カスタム タイム ゾーンを作成します。</summary>
        <returns>新しいタイム ゾーン。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> メソッドのこのオーバーロードは、調整のないタイムゾーン (つまり、夏時間をサポートしていないタイムゾーン) を作成するのに適しています。 夏時間の調整を含むタイムゾーンを定義するには、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> または <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> のいずれかの方法を使用します。  
  
 次の表は、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> メソッドに提供されるパラメーターと、メソッド呼び出しによって返される <xref:System.TimeZoneInfo> オブジェクトのプロパティとの間の関係を示しています。  
  
|CreateCustomTimeZone パラメーター|TimeZoneInfo プロパティ|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 通常、タイムゾーンの標準時名とその識別子は同じです。 ただし、タイムゾーンの識別子の長さは32文字を超えないようにする必要があります。 `displayName` パラメーターに渡された文字列は、かなり標準的な形式に従います。 表示名の最初の部分は、協定世界時からのタイムゾーンのベースオフセットです。これは、かっこで囲まれた GMT (グリニッジ標準時) で表されます。 この後には、タイムゾーン自体、またはタイムゾーン内の1つ以上の都市、地域、または国を識別する文字列、またはその両方が続きます。 例 :  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 次の例では、南極の Mawson および Holme Bay 領域のカスタムタイムゾーンを作成します。 次に、現地時刻を新しいタイムゾーンの時刻に変換した結果が表示されます。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> パラメーターが空の文字列 ("") です。  
  
または 
<paramref name="baseUtcOffset" /> パラメーターが、分を表す整数値ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> パラメーターが 14 時間を上回っているか、-14 時間を下回っています。</exception>
        <related type="Article" href="~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md">方法 : 調整規則のないタイム ゾーンを作成する</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="id">タイム ゾーン ID。</param>
        <param name="baseUtcOffset">このタイム ゾーンの標準時と世界協定時刻 (UTC) との時差を表すオブジェクト。</param>
        <param name="displayName">新しいタイム ゾーンの表示名。</param>
        <param name="standardDisplayName">新しいタイム ゾーンの標準時名。</param>
        <param name="daylightDisplayName">新しいタイム ゾーンの夏時間名。</param>
        <param name="adjustmentRules">特定の期間のベース UTC オフセットを増やす配列。</param>
        <summary>指定された ID、世界協定時刻 (UTC) からのオフセット、表示名、標準時名、夏時間名、および夏時間規則を使用して、カスタム タイム ゾーンを作成します。</summary>
        <returns>新しいタイム ゾーンを表す <see cref="T:System.TimeZoneInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> メソッドのこのオーバーロードは、夏時間をサポートするタイムゾーンを作成するのに適しています。 夏時間をサポートしていないタイムゾーンを定義するには、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> または <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> のいずれかの方法を使用します。  
  
 次の表は、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> メソッドに提供されるパラメーターと、メソッド呼び出しによって返される <xref:System.TimeZoneInfo> オブジェクトのメンバーとの関係を示しています。  
  
|CreateCustomTimeZone パラメーター|TimeZoneInfo メンバー|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|<xref:System.TimeZoneInfo.GetAdjustmentRules%2A> メソッドによって返される <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> オブジェクトの配列。|  
  
 通常、タイムゾーンの標準時名とその識別子は同じです。 ただし、タイムゾーンの識別子の長さは32文字を超えないようにする必要があります。 `displayName` パラメーターに渡された文字列は、かなり標準的な形式に従います。 表示名の最初の部分は、協定世界時からのタイムゾーンのベースオフセットです。これは、かっこで囲まれた GMT (グリニッジ標準時) で表されます。 この後には、タイムゾーン自体、またはタイムゾーン内の1つ以上の都市、地域、または国を識別する文字列、またはその両方が続きます。 例 :  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 `baseUtcOffset` パラメーターは、すべてのタイムゾーンの調整規則について、世界協定時刻 (UTC) からのカスタムタイムゾーンのオフセットを定義します。 言い換えると、<xref:System.TimeZoneInfo> オブジェクトモデルは、タイムゾーンの UTC からのオフセットがタイムゾーンの有効期間全体にわたって一定であると想定し、特定の調整規則とは独立して存在します。 UTC からのオフセットを変更したタイムゾーンを反映するには、新しいタイムゾーンオブジェクトを作成する必要があります。  
  
 タイムゾーンの調整規則を定義するには、次の手順を実行します。  
  
1.  <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> または <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> のいずれかのメソッドを呼び出して、各調整規則の開始と終了の切り替え時間を定義します。  
  
2.  各調整規則に対して <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> メソッドを呼び出します。  
  
3.  `adjustmentRules` パラメーターとして渡すことができる配列に調整規則を割り当てます。  
  
   
  
## Examples  
 次の例では、南極に、パーマー局および Anvers 島のカスタムタイムゾーンを作成します。 次に、現地時刻を新しいタイムゾーンの時刻に変換し、結果を表示します。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> パラメーターが空の文字列 ("") です。  
  
または 
<paramref name="baseUtcOffset" /> パラメーターが、分を表す整数値ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> パラメーターが 14 時間を上回っているか、-14 時間を下回っています。</exception>
        <exception cref="T:System.InvalidTimeZoneException"><paramref name="adjustmentRules" /> パラメーターに指定された調整規則が重複しています。  
  
または 
<paramref name="adjustmentRules" /> パラメーターに指定された調整規則が時系列順ではありません。  
  
または 
<paramref name="adjustmentRules" /> の 1 つ以上の要素が <see langword="null" /> です。  
  
または 
複数の調整規則を適用できる日付があります。  
  
または 
<paramref name="baseUtcOffset" /> パラメーターと、<see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 配列内にある 1 つ以上のオブジェクトの <paramref name="adjustmentRules" /> 値の合計が、14 時間を上回っているか、-14 時間を下回っています。</exception>
        <related type="Article" href="~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md">方法 : 調整規則のあるタイム ゾーンを作成する</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="id">タイム ゾーン ID。</param>
        <param name="baseUtcOffset">現在のタイム ゾーンの標準時と世界協定時刻 (UTC) との時差を表す <see cref="T:System.TimeSpan" /> オブジェクト。</param>
        <param name="displayName">新しいタイム ゾーンの表示名。</param>
        <param name="standardDisplayName">新しいタイム ゾーンの標準時名。</param>
        <param name="daylightDisplayName">新しいタイム ゾーンの夏時間名。</param>
        <param name="adjustmentRules">特定の期間のベース UTC オフセットを増やす <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> オブジェクトの配列。</param>
        <param name="disableDaylightSavingTime">新しいオブジェクトの <see langword="true" /> に含まれている夏時間関連の情報をすべて破棄する場合は <paramref name="adjustmentRules" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定された ID、世界協定時刻 (UTC) からのオフセット、表示名、標準時名、夏時間名、夏時間規則、および返されるオブジェクトに夏時間情報を反映するかどうかを示す値を使用して、カスタム タイム ゾーンを作成します。</summary>
        <returns>新しいタイム ゾーン。 <paramref name="disableDaylightSavingTime" /> パラメーターが <see langword="true" /> の場合、返されるオブジェクトに夏時間データはありません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> メソッドのこのオーバーロードを使用して、実行時の条件によって夏時間をサポートするカスタムタイムゾーンを作成できます。  
  
 次の表は、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> メソッドに提供されるパラメーターと、メソッド呼び出しによって返される <xref:System.TimeZoneInfo> オブジェクトのメンバーとの関係を示しています。  
  
|CreateCustomTimeZone パラメーター|TimeZoneInfo プロパティ|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|`disableDaylightSavingTime` が `false`場合に <xref:System.TimeZoneInfo.DaylightName%2A> します。`disableDaylightSavingTime` が `true`場合は <xref:System.String.Empty?displayProperty=nameWithType> します。|  
|`adjustmentRules`|`disableDaylightSavingTime` が `false`の場合に <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> メソッドによって返される <xref:System.TimeZoneInfo.AdjustmentRule> オブジェクトの配列。`disableDaylightSavingTime` が `true`場合は、<xref:System.TimeZoneInfo.GetAdjustmentRules%2A> メソッドによって返される空の配列。|  
|`disableDaylightSavingTime`|<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>ません。|  
  
 通常、タイムゾーンの標準時名とその識別子は同じです。 ただし、タイムゾーンの識別子の長さは32文字を超えないようにする必要があります。 `displayName` パラメーターに渡された文字列は、かなり標準的な形式に従います。 表示名の最初の部分は、協定世界時からのタイムゾーンのベースオフセットです。これは、かっこで囲まれた GMT (グリニッジ標準時) で表されます。 この後には、タイムゾーン自体、またはタイムゾーン内の1つ以上の都市、地域、または国を識別する文字列、またはその両方が続きます。 例 :  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 タイムゾーンの調整規則を定義するには、次の手順を実行します。  
  
1.  <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> または <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> のいずれかのメソッドを呼び出して、各調整規則の開始および終了の遷移規則を定義します。  
  
2.  各調整規則に対して <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> メソッドを呼び出します。  
  
3.  `adjustmentRules` パラメーターとして渡すことができる配列に調整規則を割り当てます。  
  
 `disableDaylightSavingTime` パラメーターが `false`の場合、このメソッドの操作は <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> オーバーロードと同じになります。 `disableDaylightSavingTime` が `true`場合、返されるオブジェクトには、調整規則と、値が空の文字列である <xref:System.TimeZoneInfo.DaylightName%2A> プロパティは含まれません。  
  
   
  
## Examples  
 次の例では、南極に、パーマー局および Anvers 島のカスタムタイムゾーンを作成します。 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> メソッドの呼び出しで `disableDaylightSavingTime` パラメーターを `true`に設定します。 次に、新しいタイムゾーンの夏時間名 (存在する場合) と、新しいタイムゾーンに夏時間情報がないことを確認する調整規則の数を表示します。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> パラメーターが空の文字列 ("") です。  
  
または 
<paramref name="baseUtcOffset" /> パラメーターが、分を表す整数値ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> パラメーターが 14 時間を上回っているか、-14 時間を下回っています。</exception>
        <exception cref="T:System.InvalidTimeZoneException"><paramref name="adjustmentRules" /> パラメーターに指定された調整規則が重複しています。  
  
または 
<paramref name="adjustmentRules" /> パラメーターに指定された調整規則が時系列順ではありません。  
  
または 
<paramref name="adjustmentRules" /> の 1 つ以上の要素が <see langword="null" /> です。  
  
または 
複数の調整規則を適用できる日付があります。  
  
または 
<paramref name="baseUtcOffset" /> パラメーターと、<see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 配列内にある 1 つ以上のオブジェクトの <paramref name="adjustmentRules" /> 値の合計が、14 時間を上回っているか、-14 時間を下回っています。</exception>
        <related type="Article" href="~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md">方法 : 調整規則のないタイム ゾーンを作成する</related>
        <related type="Article" href="~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md">方法 : 調整規則のあるタイム ゾーンを作成する</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のタイム ゾーンの夏時間の表示名を取得します。</summary>
        <value>タイム ゾーンの夏時間の表示名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示名は、Windows オペレーティングシステムと共にインストールされたカルチャに基づいてローカライズされます。  
  
 値が <xref:System.String.Empty?displayProperty=nameWithType> または `null` ではない <xref:System.TimeZoneInfo.DaylightName%2A> プロパティは、必ずしもタイムゾーンが夏時間をサポートしていることを示しているわけではありません。 タイムゾーンで夏時間がサポートされているかどうかを確認するには、<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> プロパティの値を確認します。  
  
 ほとんどの場合、システム定義のタイムゾーンの `DaylightName` プロパティは <xref:System.String.Empty?displayProperty=nameWithType> または `null`いません。 ただし、カスタムタイムゾーンの <xref:System.TimeZoneInfo.DaylightName%2A> プロパティは <xref:System.String.Empty?displayProperty=nameWithType>に設定できます。 これは、<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> または <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> のオーバーロードによってカスタムタイムゾーンが作成され、`disableDaylightSavingTime` パラメーターが `true`場合に発生します。 したがって、コードでは、<xref:System.TimeZoneInfo.DaylightName%2A> プロパティの値が `null` でも空でもないとは限りません。  
  
 <xref:System.TimeZoneInfo.DaylightName%2A> プロパティは、<xref:System.TimeZone> クラスの <xref:System.TimeZone.DaylightName%2A> プロパティと同じです。  
  
   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> メソッドを使用してタイムゾーンの標準時名または夏時間名を表示するかどうかを決定する `DisplayDateWithTimeZoneName` という名前のメソッドを定義します。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイム ゾーンを表す標準表示名を取得します。</summary>
        <value>タイム ゾーンの標準表示名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示名は、Windows オペレーティングシステムと共にインストールされたカルチャに基づいてローカライズされます。  
  
 Windows システムタイムゾーンのタイムゾーン表示名は、ごく標準的な形式に従います。 表示名の最初の部分は、協定世界時からのタイムゾーンのベースオフセットです。これは、かっこで囲まれた GMT (グリニッジ標準時) で表されます。 世界協定時刻では、オフセットのない GMT 頭字語がかっこで囲まれています。  この後に、タイムゾーンを識別する文字列、またはタイムゾーンに含まれる都市、地域、または国の1つ以上を指定します。 例 :  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 次の例では、ローカルタイムゾーンを表す <xref:System.TimeZoneInfo> オブジェクトを取得し、その表示名、標準時名、および夏時間名を出力します。 米国太平洋標準時ゾーンのシステムの出力が表示されます。  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの <see cref="T:System.TimeZoneInfo" /> オブジェクトが等しいかどうかを確認します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="obj">現在のオブジェクトと比較するもう 1 つのオブジェクト。</param>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトと別のオブジェクトが等しいかどうかを判断します。</summary>
        <returns><see langword="true" /> が現在のインスタンスと等しい <paramref name="obj" /> オブジェクトである場合は <see cref="T:System.TimeZoneInfo" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`obj` を <xref:System.TimeZoneInfo> オブジェクトに変換またはキャストし、現在のインスタンスと比較します。 等しいかどうかのテストは、値の比較に基づいています。 現在の <xref:System.TimeZoneInfo> インスタンスと `obj` は、次の条件に一致していると見なされます。  
  
-   `obj` の実行時の型が <xref:System.TimeZoneInfo>。  
  
-   2つのオブジェクトの <xref:System.TimeZoneInfo.Id%2A> プロパティ値が同じです。  
  
-   2つのオブジェクトの調整規則は同じです。  
  
 `obj` が `null` の場合、このメソッドは `false` を返します。  
  
   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.Equals%28System.Object%29> メソッドを使用して、ローカルタイムゾーンが太平洋標準時か東部標準時かを判断します。  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">現在のオブジェクトと比較するもう 1 つのオブジェクト。</param>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトと別の <see cref="T:System.TimeZoneInfo" /> オブジェクトが等しいかどうかを判断します。</summary>
        <returns>2 つの <see langword="true" /> オブジェクトが等しい場合は <see cref="T:System.TimeZoneInfo" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 等値は、値の比較に基づいています。 次の条件下では、2つの <xref:System.TimeZoneInfo> オブジェクトが等しいと見なされます。  
  
-   <xref:System.TimeZoneInfo.Id%2A> プロパティの値が同じです。  
  
-   同じ調整規則があります。  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> は、次の式を評価した結果のブール値を返します。  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 `other` パラメーターが初期化されていない <xref:System.TimeZoneInfo> オブジェクトの場合、このメソッドは `false`を返します。  
  
   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> メソッドを使用して、ローカルタイムゾーンが太平洋標準時か東部標準時かを判断します。  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id">タイム ゾーン ID。<see cref="P:System.TimeZoneInfo.Id" /> プロパティの値です。</param>
        <summary>その識別子に基づいて、新しい <see cref="T:System.TimeZoneInfo" /> オブジェクトをインスタンス化されます。</summary>
        <returns>ID が <paramref name="id" /> パラメーターの値であるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` パラメーターは、タイムゾーンの長さの識別子と正確に対応している必要がありますが、一致と見なされるようにするには、大文字と小文字は区別されません。つまり、`id` とタイムゾーン識別子の比較では、大文字と小文字は区別されません。 部分一致に基づいてタイムゾーンオブジェクトを取得する場合は、<xref:System.TimeZoneInfo.GetSystemTimeZones%2A> メソッドによって返される <xref:System.TimeZoneInfo> オブジェクトの読み取り専用コレクションを操作するカスタムプロシージャを記述できます。  
  
 Windows システムでは、`FindSystemTimeZoneById` は、レジストリの HKEY_LOCAL_MACHINE \Software\Microsoft\Windows NT\CurrentVersion\Time Zones 分岐のサブキー名と `id` を照合しようとします。 Linux と macOS では、 [ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)にあるタイムゾーン情報が使用されます。 レジストリまたはライブラリに必要なタイムゾーンの情報がない場合は、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> メソッドのいずれかのオーバーロードを呼び出すか、<xref:System.TimeZoneInfo.FromSerializedString%2A> を呼び出して必要なタイムゾーンを表す <xref:System.TimeZoneInfo> オブジェクトを逆シリアル化することによって、特定のタイムゾーンを作成できます。 ただし、これらのメソッド呼び出しによって作成されたタイムゾーンはシステム定義の時刻ではなく、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> メソッドを使用して取得することはできません。 これらのカスタムタイムゾーンには、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> または <xref:System.TimeZoneInfo.FromSerializedString%2A> メソッド呼び出しによって返されるオブジェクト参照を使用してのみアクセスできます。  
  
このメソッドは、メソッドの呼び出しごとに新しい <xref:System.TimeZoneInfo> インスタンスを返します。キャッシュされたオブジェクトは返しません。 これは、同じ識別子を使用して `FindSystemTimeZoneById` メソッドを繰り返し呼び出すアプリケーションのパフォーマンスに影響を与える可能性があります。   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> メソッドを使用して、東京標準タイムゾーンを取得します。 この <xref:System.TimeZoneInfo> オブジェクトを使用して、現地時刻を東京の時刻に変換し、東京標準時または東京夏時間のどちらであるかを判断します。  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">システムに、タイム ゾーンの情報を保持するための十分なメモリがありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">指定されたタイム ゾーン ID <paramref name="id" /> が見つかりませんでした。 つまり、<paramref name="id" /> と同じ名前のタイム ゾーン識別子が存在していないか、または識別子は存在するものの、それにはタイム ゾーンのデータが含まれていません。</exception>
        <exception cref="T:System.Security.SecurityException">プロセスには、タイム ゾーン情報を格納するレジストリ キーからの読み取りに必要な権限がありません。</exception>
        <exception cref="T:System.InvalidTimeZoneException">タイム ゾーン ID が見つかりましたが、レジストリ データが壊れています。</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="~/docs/standard/datetime/instantiate-time-zone-info.md">方法 : TimeZoneInfo オブジェクトをインスタンス化する</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="source">シリアル化された <see cref="T:System.TimeZoneInfo" /> オブジェクトの文字列表現。</param>
        <summary>文字列を逆シリアル化して、シリアル化された元の <see cref="T:System.TimeZoneInfo" /> オブジェクトを再作成します。</summary>
        <returns>シリアル化された元のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows のレジストリまたは Linux と macOS の[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)にないタイムゾーンを作成するために必要なすべてのコードを提供する代わりに、その他の方法もあります。 カスタムタイムゾーンを定義し、スタンドアロンの実行可能ファイルで <xref:System.TimeZoneInfo.ToSerializedString%2A> メソッドを使用することも、アプリケーションのセットアッププログラムを使用してタイムゾーンを文字列として保存することもできます。 その後、アプリケーションは、その格納場所からこの文字列を取得し、<xref:System.TimeZoneInfo.FromSerializedString%2A> メソッドを使用してインスタンス化できます。  
  
   
  
## Examples  
 次の例では、ローカルシステムから南極/南部のタイムゾーンを取得しようとします。 失敗した場合、コードはアプリケーションディレクトリ内のテキストファイルからタイムゾーンに関する情報を取得しようとします。 この試行が失敗した場合、コードはタイムゾーンを作成し、タイムゾーンに関する情報をテキストファイルに書き込みます。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="source" /> パラメーターが <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> パラメーターが null 文字列です。</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">ソース パラメーターを逆シリアル化して <see cref="T:System.TimeZoneInfo" /> オブジェクトに戻すことはできません。</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="~/docs/standard/datetime/restore-time-zones-from-an-embedded-resource.md">方法 : 埋め込みリソースからタイム ゾーンを復元する</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> オブジェクトに適用する <see cref="T:System.TimeZoneInfo" /> オブジェクトの配列を取得します。</summary>
        <returns>このタイム ゾーンのオブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> メソッドは、<xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> オブジェクトの配列を取得します。 配列内の各オブジェクトは、そのタイムゾーン調整の有効な開始日と終了日、およびデルタ (調整によって時間が変化する正確な量) を定義します。 また、2つのプロパティは <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> を返します。これらのオブジェクトは、標準時間との間の毎年の遷移が発生するタイミングを定義します。  
  
 タイムゾーンに複数の調整規則がある場合、通常は、最初の (インデックス0の) から最後 (インデックス <xref:System.Array.Length%2A>-1) までの順序で並べ替えられます。  
  
 タイムゾーンに調整規則がない場合、<xref:System.TimeZoneInfo.GetAdjustmentRules%2A> メソッドは空の配列 (<xref:System.Array.Length%2A> が0の配列) を返します。  
  
 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> メソッドによって返される配列の要素に対する変更は、特定のタイムゾーンに属する調整規則には反映されません。 タイムゾーンの調整規則 (夏時間前後の履歴を反映するなど) を変更するには、既存のタイムゾーンを変更するのではなく、適切な調整規則を指定して新しいタイムゾーンを作成する必要があります。  
  
   
  
## Examples  
 次の例では、ローカルシステムで定義されているすべてのタイムゾーンを取得し、その調整規則に関する完全な情報をコンソールに表示します。  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">システムには、調整規則のメモリ内コピーを作成するのに十分なメモリがありません。</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>あいまいな日付と時刻を割り当て可能な、日付と時刻に関する情報を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻。</param>
        <summary>あいまいな日付と時刻を割り当て可能な、日付と時刻に関する情報を返します。</summary>
        <returns>特定の日付と時刻を割り当て可能な、世界協定時刻 (UTC) オフセットを表すオブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの正確な動作は、次の表に示すように、<xref:System.DateTime.Kind%2A> プロパティと <xref:System.TimeZoneInfo> オブジェクトの関係によって異なります。  
  
|TimeZoneInfo オブジェクトの種類|Kind プロパティ値|動作|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> または <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|`dateTime`のあいまいな時刻オフセットを返します。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|`dateTime` を現地時刻に変換し、その時間のあいまいな時刻オフセットを返します。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|任意の値。|<xref:System.ArgumentException>をスローします。|  
|その他のタイムゾーン。|<xref:System.DateTimeKind.Local> または <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|`dateTime` を指定したタイムゾーンに変換し、その時刻があいまいであるかどうかを判断します。|  
|その他のタイムゾーン。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|指定したタイムゾーンで `dateTime` があいまいであるかどうかを判断します。|  
  
 このメソッドによって返される配列内の <xref:System.TimeSpan> オブジェクトの順序は定義されていません。 ただし、タイムゾーンの標準時からのオフセットを表す要素を特定するには、その値をタイムゾーンの <xref:System.TimeZoneInfo.BaseUtcOffset%2A> プロパティと比較します。 あいまいな時刻をタイムゾーンの標準時刻にマップする方法については、「[方法: あいまい](~/docs/standard/datetime/resolve-ambiguous-times.md)な時刻を解決する」を参照してください。  
  
   
  
## Examples  
 次の例では `ShowPossibleUtcTimes` という名前のメソッドを定義します。このメソッドは、<xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> メソッドを使用して、あいまいな時刻を、それに対応する世界協定時刻 (UTC) の時刻にマップします。  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 その後、次のようなコードを使用してメソッドを呼び出すことができます。  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> はあいまいな時刻ではありません。</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="~/docs/standard/datetime/resolve-ambiguous-times.md">方法 : あいまいな時刻を解決する</related>
        <related type="Article" href="~/docs/standard/datetime/let-users-resolve-ambiguous-times.md">方法 : ユーザーがあいまいな時刻を解決できるようにする</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日付と時刻。</param>
        <summary>あいまいな日付と時刻を割り当て可能な、日付と時刻に関する情報を返します。</summary>
        <returns>特定の日付と時刻を割り当て可能な、世界協定時刻 (UTC) オフセットを表すオブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの正確な動作は、`dateTimeOffset` パラメーターの <xref:System.DateTimeOffset.Offset%2A> プロパティと <xref:System.TimeZoneInfo> オブジェクトの関係によって異なります。 <xref:System.DateTimeOffset.Offset%2A> プロパティの値が、その日付と時刻の世界協定時刻 (UTC) からの現在のタイムゾーンのオフセットに対応する場合、メソッドは可能なオフセットを返します。 それ以外の場合は、`dateTimeOffset` を現在のタイムゾーンの時刻に変換し、その日付と時刻のオフセットを返します。  
  
 このメソッドによって返される配列内の <xref:System.TimeSpan> オブジェクトの順序は定義されていません。 ただし、タイムゾーンの標準時からのオフセットを表す要素を特定するには、その値をタイムゾーンの <xref:System.TimeZoneInfo.BaseUtcOffset%2A> プロパティと比較します。 あいまいな時刻をタイムゾーンの標準時刻にマップする方法については、「[方法: あいまい](~/docs/standard/datetime/resolve-ambiguous-times.md)な時刻を解決する」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTimeOffset" /> はあいまいな時刻ではありません。</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="~/docs/standard/datetime/resolve-ambiguous-times.md">方法 : あいまいな時刻を解決する</related>
        <related type="Article" href="~/docs/standard/datetime/let-users-resolve-ambiguous-times.md">方法 : ユーザーがあいまいな時刻を解決できるようにする</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ハッシュ関数として機能し、ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造に使用されます。</summary>
        <returns>この <see cref="T:System.TimeZoneInfo" /> オブジェクトのハッシュ コードとして機能する 32 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetHashCode%2A> 方法の詳細については、「<xref:System.Object.GetHashCode%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ローカル システムで情報を使用できるすべてのタイム ゾーンのコレクションを、並べ替えられた状態で返します。</summary>
        <returns><see cref="T:System.TimeZoneInfo" /> オブジェクトの読み取り専用のコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> メソッドは、Windows システムのレジストリの HKEY_LOCAL_MACHINE \Software\Microsoft\Windows NT\CurrentVersion\Time Zones キーのサブキー、および Linux および macOS の[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)から、使用可能なすべてのタイムゾーン情報を取得します。 個々の <xref:System.TimeZoneInfo> オブジェクトの特定の文字列プロパティの値を正常に取得および解析できない場合、このメソッドはその値を空の文字列 ("") に設定します。  
  
> [!IMPORTANT]
>  <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> メソッドは、Windows レジストリまたは ICU ライブラリで定義されているタイムゾーンに対してのみ <xref:System.TimeZoneInfo> オブジェクトのコレクションを返します。 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> メソッドのオーバーロードを使用して作成されたタイムゾーンは含まれません。 これらは、タイムゾーンの作成方法によって返されるオブジェクト参照を通じてのみアクセスできます。  
  
 このメソッドによって返されるコレクションは、UTC オフセットと、現在のカルチャを使用する表示名によって同じ UTC オフセットを持つタイムゾーンに対して並べ替えられます。 表示名の詳細については、「<xref:System.TimeZoneInfo.DisplayName%2A>」を参照してください。  
  
 このメソッドによって返される <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> オブジェクトは、<xref:System.Collections.Generic.IEnumerable%601> インターフェイスをサポートしています。つまり、`foreach` ( C#の場合) または `For Each…Next` (Visual Basic) ステートメントを使用して反復処理できます。 ループの各反復処理では、コレクション内の次の <xref:System.TimeZoneInfo> オブジェクトが提供されます。  
  
 <xref:System.TimeZoneInfo> オブジェクトのコレクションは、ローカルコンピューターで定義されているタイムゾーンを表します。すべての期間中、すべてのタイムゾーンについて完全な情報が提供されるとは限りません。 アプリケーションでローカルコンピューターにタイムゾーンが見つからない場合は、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> メソッドのオーバーロードを使用してカスタムタイムゾーンを作成できます。 詳細については、「[方法: 調整規則のないタイムゾーンを作成](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md)する」および「[方法: 調整規則を使用してタイムゾーンを作成する](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)」を参照してください。  
  
 また、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> メソッドを呼び出し、パラメーターとして取得するタイムゾーンの識別子を指定することによって、ローカルコンピューターで個別のタイムゾーンが定義されているかどうかを確認することもできます。  
  
   
  
## Examples  
 次の例では、コンピューターで定義されているタイムゾーンを表すタイムゾーンオブジェクトのコレクションを取得し、それらに関する情報をテキストファイルに書き込みます。  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">すべてのタイム ゾーン情報を格納するにはメモリが不足しています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、タイム ゾーン情報が含まれているレジストリ キーから読み取る権限がありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定の日付と時刻について、このタイム ゾーンでの時刻と世界協定時刻 (UTC) とのオフセットまたは差を計算します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">オフセットの計算対象となる日付と時刻。</param>
        <summary>特定の日付と時刻について、このタイム ゾーンでの時刻と世界協定時刻 (UTC) とのオフセットまたは差を計算します。</summary>
        <returns>2 つのタイム ゾーンの時差を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返された期間には、現在のタイムゾーンに調整規則を適用したことによるすべての違いが含まれます。 これは <xref:System.TimeZoneInfo.BaseUtcOffset%2A> プロパティとは異なり、世界協定時刻 (UTC) とタイムゾーンの標準時刻の差を返します。したがって、調整規則は考慮されません。  
  
 `dateTime` パラメーターの <xref:System.DateTime.Kind%2A> プロパティがタイムゾーンオブジェクトに対応していない場合、このメソッドは結果を返す前に必要な変換を実行します。 たとえば、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType> でも、タイムゾーンオブジェクトがローカルタイムゾーンではない場合に発生する可能性があります。 `dateTime` があいまいな場合、または変換された時刻があいまいな場合、このメソッドは、あいまいな時刻を標準時として解釈します。 `dateTime` が無効な場合、このメソッドは、UTC とタイムゾーンの標準時刻の差を反映する <xref:System.TimeSpan> オブジェクトを返します。  
  
 <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> メソッドは、<xref:System.TimeZone> クラスの <xref:System.TimeZone.GetUtcOffset%2A> メソッドに似ています。  
  
   
  
## Examples  
 次の例では、異なるタイムゾーンと、異なる <xref:System.DateTime.Kind%2A> プロパティ値を持つ日付値を使用して、<xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> メソッドを使用する方法を示します。  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">オフセットの計算対象となる日付と時刻。</param>
        <summary>特定の日付と時刻について、このタイム ゾーンでの時刻と世界協定時刻 (UTC) とのオフセットまたは差を計算します。</summary>
        <returns>世界協定時刻 (UTC) と現在のタイム ゾーンとの時差を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返された期間には、現在のタイムゾーンに調整規則を適用したことによるすべての違いが含まれます。 これは <xref:System.TimeZoneInfo.BaseUtcOffset%2A> プロパティとは異なり、世界協定時刻 (UTC) とタイムゾーンの標準時刻の差を返します。したがって、調整規則は考慮されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="other">現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトと比較するもう 1 つのオブジェクト。</param>
        <summary>現在のオブジェクトと別の <see cref="T:System.TimeZoneInfo" /> オブジェクトが同じ調整規則を持っているかどうかを判断します。</summary>
        <returns>2 つのタイム ゾーンが同じ調整規則と同じベース オフセットを持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> メソッドと同様に、<xref:System.TimeZoneInfo.HasSameRules%2A> メソッドは、2つのタイムゾーンが同じベースオフセット (<xref:System.TimeZoneInfo.BaseUtcOffset%2A> プロパティによって定義される) と同じ調整規則を持っているかどうかを示します。 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> メソッドとは異なり、<xref:System.TimeZoneInfo.HasSameRules%2A> では、(<xref:System.TimeZoneInfo.Id%2A> プロパティによって定義された) タイムゾーン id を比較しません。  
  
   
  
## Examples  
 通常、Windows のレジストリで定義されている多くのタイムゾーンと、Linux および macOS の[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)のオフセットは、世界協定時刻 (UTC) と同じ調整規則と同じです。 次の例では、これらのタイムゾーンの一覧をコンソールに表示します。  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="other" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイム ゾーン ID を取得します。</summary>
        <value>タイム ゾーン ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 タイムゾーン識別子は、特定のタイムゾーンを一意に識別するキー文字列です。 Windows システムでは、Windows システムのレジストリの HKEY_LOCAL_MACHINE \Software\Microsoft\Windows NT\CurrentVersion\Time ゾーンブランチのサブキー、および Linux および macOS の[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)に対応しています。 特定のタイムゾーンを表す <xref:System.TimeZoneInfo> オブジェクトをインスタンス化するために、パラメーターとして <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> メソッドに渡すことができます。  
  
> [!IMPORTANT]
>  Windows レジストリのキー名は最大255文字にすることができますが、カスタムタイムゾーンに割り当てる識別子は32文字以下にすることをお勧めします。 識別子が長いほど、取得時に無効なキー名が指定される確率が高くなります。  
  
 <xref:System.TimeZoneInfo.Id%2A> プロパティの値は通常、<xref:System.TimeZoneInfo.StandardName%2A> プロパティの値と同じですが、常にではありません。 協定世界時ゾーンの識別子は UTC です。  
  
   
  
## Examples  
 次の例では、ローカルコンピューターで定義されている各タイムゾーンの識別子を一覧表示します。  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定のタイム ゾーンの特定の日付と時刻があいまいかどうか、および複数の世界協定時刻 (UTC) に割り当て可能かどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日時の値。</param>
        <summary>特定のタイム ゾーンの特定の日付と時刻があいまいかどうか、および複数の世界協定時刻 (UTC) に割り当て可能かどうかを判断します。</summary>
        <returns><see langword="true" /> パラメーターがあいまいな場合は <paramref name="dateTime" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 あいまいな時刻は、現在のタイムゾーンの時間範囲内にあります。 これは、調整規則の適用によって生成される標準時間または時刻のいずれかになります。 通常、時刻が夏時間から標準時間に戻るように設定されている場合は、あいまいな時刻が返されます。 図については、「例」を参照してください。  
  
 協定世界時 (UTC) にはあいまいな時刻がありません。夏時間をサポートしていないタイムゾーンはありません。 したがって、これらのタイムゾーンには調整規則がなく、<xref:System.TimeZoneInfo.IsAmbiguousTime%2A> メソッドの呼び出しは常に `false`を返します。  
  
 夏時間を観察するタイムゾーンの場合、このメソッドの正確な動作は、次の表に示すように、<xref:System.DateTime.Kind%2A> プロパティと <xref:System.TimeZoneInfo> オブジェクトの関係によって異なります。  
  
|TimeZoneInfo オブジェクトの種類|Kind プロパティ値|動作|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> または <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|`dateTime` パラメーターがあいまいであるかどうかを判断します。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|`dateTime` を現地時刻に変換し、その時刻があいまいであるかどうかを判断します。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> または <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|`false` を返します。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|`dateTime` があいまいな場合、は標準時であると見なし、UTC に変換して `false`を返します。|  
|その他のタイムゾーン。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> または <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|`dateTime` を指定したタイムゾーンの時刻に変換し、その時刻があいまいであるかどうかを判断します。|  
|その他のタイムゾーン。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|`dateTime` があいまいであるかどうかを判断します。|  
  
   
  
## Examples  
 太平洋標準時ゾーンでは、夏時間は午前2:00 に終了します。 2007年11月4日。 次の例では、時刻を1分間隔で 12:59 A.M. から渡します。 2007年11月4日から 2:01 A.M. まで 2007年11月4日に、太平洋標準時のタイムゾーンを表す <xref:System.TimeZoneInfo> オブジェクトの <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> メソッドにします。 コンソール出力は、すべての時刻が午前1:00 から始まることを示します。 2007年11月4日から 1:59 A.M. まで 2007年11月4日にはあいまいです。  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> 値の <paramref name="dateTime" /> プロパティは <see cref="F:System.DateTimeKind.Local" /> で、<paramref name="dateTime" /> は無効な時刻です。</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日付と時刻。</param>
        <summary>特定のタイム ゾーンの特定の日付と時刻があいまいかどうか、および複数の世界協定時刻 (UTC) に割り当て可能かどうかを判断します。</summary>
        <returns><see langword="true" /> パラメーターが現在のタイム ゾーンであいまいな場合は <paramref name="dateTimeOffset" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 あいまいな時刻は、現在のタイムゾーンの時間範囲内にあります。 これは、調整規則の適用によって生成される標準時間または時刻のいずれかになります。 通常、時刻が夏時間から標準時間に戻るように設定されている場合は、あいまいな時刻が返されます。 協定世界時 (UTC) にはあいまいな時刻がありません。夏時間をサポートしていないタイムゾーンはありません。  
  
 メソッドの正確な動作は、`dateTimeOffset` パラメーターの <xref:System.DateTimeOffset.Offset%2A> プロパティと現在のタイムゾーンとの関係によって異なります。 <xref:System.DateTimeOffset.Offset%2A> プロパティの値が、現在のタイムゾーンの UTC からのオフセットとして使用できる場合、メソッドは、その日付と時刻があいまいであるかどうかを判断します。 それ以外の場合は、`dateTimeOffset` を現在のタイムゾーンの時刻に変換し、その日付と時刻があいまいであるかどうかを判断します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された日付と時刻が、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトのタイム ゾーンの夏時間の範囲内かどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日時の値。</param>
        <summary>指定された日付と時刻が、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトのタイム ゾーンの夏時間範囲内かどうかを示します。</summary>
        <returns><see langword="true" /> パラメーターが夏時間の範囲内の場合は <paramref name="dateTime" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> の戻り値は、次の表に示すように、<xref:System.TimeZoneInfo> オブジェクトによって表されるタイムゾーンと `dateTime` パラメーターの <xref:System.DateTime.Kind%2A> プロパティの関係によって影響を受けます。  
  
|TimeZoneInfo オブジェクト|DateTime. Kind プロパティ|結果|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|`dateTime` が夏時間かどうかを判断します。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|`dateTime` を世界協定時刻 (UTC) から現地時刻に変換し、夏時間かどうかを判断します。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|`dateTime` が現地時刻を表し、夏時間かどうかを判断します。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`、`DateTimeKind.Unspecified`、または `DateTimeKind.Utc`|`false` を返します (UTC は夏時間をサポートしていません)。|  
|その他の <xref:System.TimeZoneInfo> オブジェクト。|`DateTimeKind.Local`|現地時刻を <xref:System.TimeZoneInfo> オブジェクトの同等の時刻に変換し、その後、その後の時刻が夏時間かどうかを判断します。|  
|その他の <xref:System.TimeZoneInfo> オブジェクト。|`DateTimeKind.Utc`|UTC を <xref:System.TimeZoneInfo> オブジェクトの同等の時刻に変換し、後者が夏時間かどうかを判断します。|  
|その他の <xref:System.TimeZoneInfo> オブジェクト。|`DateTimeKind.Unspecified`|`dateTime` が夏時間かどうかを判断します。|  
  
 <xref:System.TimeZoneInfo> オブジェクトによって表されるタイムゾーンで夏時間がサポートされていない場合、メソッドは常に `false`を返します。 <xref:System.TimeZoneInfo.Utc%2A>を含む多くのタイムゾーンは、夏時間を監視しません。  タイムゾーンで夏時間がサポートされているかどうかを確認するには、<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> プロパティの値を取得します。  
  
 `dateTime` パラメーターが、現在のオブジェクトのタイムゾーンであいまいな時刻を指定した場合、<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> メソッドは `dateTime` を標準時として解釈し、その <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType> または <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>の場合は `false` を返します。 <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>場合、このメソッドは正しいあいまいな時刻を選択し、それが夏時間であるかどうかを示します。  
  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> メソッドは、あいまいな日付と時刻 (つまり、特定のタイムゾーンの標準時刻または夏時間を表す日付と時刻) に対して `false` を返すことができるため、<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> メソッドを <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> メソッドと組み合わせて、時刻が夏時間かどうかを判断できます。 あいまいな時刻は、夏時間と標準時間の両方になる可能性があるため、<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> メソッドを最初に呼び出して、日付と時刻が夏時間であるかどうかを判断できます。 メソッドが `false`を返す場合、<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> メソッドを呼び出して、<xref:System.DateTime> 値が夏時間であるかどうかを判断できます。 次の例は、この手法を示しています。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 `dateTime` パラメーターで無効な時刻が指定されている場合、`dateTime` パラメーターの <xref:System.DateTime.Kind%2A> プロパティの値が <xref:System.DateTimeKind.Local?displayProperty=nameWithType>の場合、メソッドの呼び出しで <xref:System.ArgumentException> がスローされます。それ以外の場合、メソッドは `false`を返します。  
  
 タイムゾーンの <xref:System.TimeZoneInfo.StandardName%2A> 値を使用するか、タイムゾーン名を表示するときにその <xref:System.TimeZoneInfo.DaylightName%2A> 値を使用するかを決定するには、<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> メソッドを呼び出します。 図については、「例」を参照してください。  
  
   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> メソッドを使用してタイムゾーンの標準時名または夏時間名を表示するかどうかを決定する `DisplayDateWithTimeZoneName` という名前のメソッドを定義します。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> 値の <paramref name="dateTime" /> プロパティは <see cref="F:System.DateTimeKind.Local" /> で、<paramref name="dateTime" /> は無効な時刻です。</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日時の値。</param>
        <summary>指定された日付と時刻が、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトのタイム ゾーンの夏時間範囲内かどうかを示します。</summary>
        <returns><see langword="true" /> パラメーターが夏時間の範囲内の場合は <paramref name="dateTimeOffset" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> の戻り値は、<xref:System.TimeZoneInfo> オブジェクトによって表されるタイムゾーンと `dateTimeOffset` パラメーターの <xref:System.DateTimeOffset.Offset%2A> プロパティの関係によって影響を受けます。 `dateTimeOffset` が、世界協定時刻 (UTC) からの現在のタイムゾーンのオフセットに対応していない場合、メソッドはその時刻を現在のタイムゾーンの時刻に変換します。 次に、その日付と時刻が夏時間かどうかを判断します。  
  
 <xref:System.TimeZoneInfo> オブジェクトによって表されるタイムゾーンで夏時間がサポートされていない場合、メソッドは常に `false`を返します。 タイムゾーンで夏時間がサポートされているかどうかを確認するには、<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> プロパティの値を取得します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日時の値。</param>
        <summary>指定された日付と時刻が無効かどうかを示します。</summary>
        <returns><see langword="true" /> が無効の場合は <paramref name="dateTime" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 無効な時間は、調整規則の適用により、世界協定時刻 (UTC) にマップできない現在のタイムゾーンの時間範囲内にあります。 通常、時刻が夏時間の前に移動すると、無効な時刻が発生します。 図については、「例」を参照してください。  
  
 `dateTime` パラメーターの <xref:System.DateTime.Kind%2A> プロパティの値は、次の表に示すように、`dateTime` が無効な時刻を表しているかどうかに影響します。  
  
|DateTime. Kind プロパティ|TimeZoneInfo オブジェクト (該当する場合)|動作|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|時刻が無効かどうかを判断します。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> またはローカルでないタイムゾーン。|`dateTime` を <xref:System.TimeZoneInfo> オブジェクトの時刻に変換し `false`を返します。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|該当しない。|は `dateTime` が <xref:System.TimeZoneInfo> オブジェクトの時刻であると想定し、無効かどうかを判断します。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|該当しない。|`false` を返します。|  
  
   
  
## Examples  
 太平洋標準時ゾーンでは、夏時間は午前2:00 に開始されます。 2006年4月2日。 次のコードは、時刻を1分間隔で1:59 の午前から渡します。 2006年4月2日、午前3:01 時に 2006年4月2日に、太平洋標準時のタイムゾーンを表す <xref:System.TimeZoneInfo> オブジェクトの <xref:System.TimeZoneInfo.IsInvalidTime%2A> メソッドにします。 コンソール出力は、すべての時刻が午前2:00 から始まることを示します。 2006年4月2日、午前2:59 時に 2006年4月2日には無効です。  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ローカル タイム ゾーンを表す <see cref="T:System.TimeZoneInfo" /> オブジェクトを取得します。</summary>
        <value>ローカル タイム ゾーンを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ローカルタイムゾーンは、コードが実行されているコンピューターのタイムゾーンです。  
  
> [!IMPORTANT]
>  ローカルタイムゾーンには、ローカルタイムゾーンを <xref:System.TimeZoneInfo> オブジェクト変数に割り当てるのではなく、常に <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> プロパティを使用してアクセスする必要があります。 これにより、<xref:System.TimeZoneInfo.ClearCachedData%2A> メソッドの呼び出しによって <xref:System.TimeZoneInfo> オブジェクト変数が無効になるのを防ぐことができます。  
  
 Windows システムでは、<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.TimeZoneInfo> オブジェクトは、コントロールパネルの**日付と時刻**のアプリケーションの **[夏時間の自動調整時間]** チェックボックスの設定を反映しています。 チェックボックスがオフの場合、ローカルタイムゾーンのキャッシュされたコピーには夏時間情報が含まれていません。 これは、次のことを意味します。  
  
-   ローカルタイムゾーンの <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> メソッドは、長さが0の配列を返します。  
  
-   ローカルタイムゾーンの <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> プロパティは `false`を返します。  
  
-   ローカルタイムゾーンにあいまいまたは無効な時刻がありません (<xref:System.TimeZoneInfo.IsAmbiguousTime%2A> または <xref:System.TimeZoneInfo.IsInvalidTime%2A> のすべての呼び出しで `false`が返されます)。  
  
-   個々のローカル時刻で <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> を呼び出すと、すべて false が返されます。  
  
 ただし、ローカルタイムゾーンへの参照が <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> メソッドを使用して取得された場合、これは当てはまりません。  
  
 <xref:System.TimeZoneInfo.Local%2A> プロパティは、<xref:System.TimeZone> クラスの <xref:System.TimeZone.CurrentTimeZone%2A> プロパティに対応します。  
  
   
  
## Examples  
 次の例では、ローカルタイムゾーンを表す <xref:System.TimeZoneInfo> オブジェクトを取得し、その表示名、標準時名、および夏時間名を出力します。  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/access-utc-and-local.md">方法 : 定義済みの UTC オブジェクトおよびローカル タイム ゾーン オブジェクトにアクセスする</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイム ゾーンの標準時の表示名を取得します。</summary>
        <value>タイム ゾーンの標準時間の表示名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示名は、Windows オペレーティングシステムと共にインストールされたカルチャに基づいてローカライズされます。  
  
 <xref:System.TimeZoneInfo.StandardName%2A> プロパティは、<xref:System.TimeZone> クラスの <xref:System.TimeZone.StandardName%2A> プロパティと同じです。  
  
 オペレーティングシステムの言語が英語の場合、<xref:System.TimeZoneInfo.StandardName%2A> プロパティの値は通常、<xref:System.TimeZoneInfo.Id%2A> プロパティの値と同じですが、常にではありません。  
  
   
  
## Examples  
 次の例では、<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> メソッドを使用してタイムゾーンの標準時名または夏時間名を表示するかどうかを決定する `DisplayDateWithTimeZoneName` という名前のメソッドを定義します。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイム ゾーンに夏時間規則があるかどうかを示す値を取得します。</summary>
        <value>タイム ゾーンが夏時間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> プロパティによって返されるローカルタイムゾーンの <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> プロパティの値には、コントロールパネルの**日付と時刻**のアプリケーションのチェックボックスの設定が反映されます。これは、システムが夏時間を自動的に調整するかどうかを定義します。 このチェックボックスがオフになっている場合、またはタイムゾーンに対してチェックボックスが表示されない場合は、このプロパティの値が `false`ます。  
  
   
  
## Examples  
 次の例では、ローカルシステムで使用できるすべてのタイムゾーンのコレクションを取得し、夏時間をサポートしていない名前を表示します。  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sender">コールバックを開始したオブジェクトです。 このパラメーターの機能は、現在実装されていません。</param>
        <summary>オブジェクトの逆シリアル化の完了後に実行します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><see cref="T:System.TimeZoneInfo" /> オブジェクトには、無効なデータまたは破損したデータが含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info">データを読み込む先の <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトです。</param>
        <param name="context">このシリアル化のシリアル化先 (<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照)。</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトをシリアル化するために必要なすべてのデータを格納します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトをシリアル化された文字列に変換します。</summary>
        <returns>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、Windows システムのレジストリで定義されていないタイムゾーンや Linux および macOScan の[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)に依存するアプリケーションでは、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> メソッドを使用して、<xref:System.TimeZoneInfo> オブジェクトとして必要なタイムゾーンをインスタンス化できます。 その後、アプリケーションは <xref:System.TimeZoneInfo.ToSerializedString%2A> メソッドを呼び出して、タイムゾーンオブジェクトを文字列に変換できます。  
  
 <xref:System.TimeZoneInfo> オブジェクトは、アプリケーションが必要に応じて取得できる場所にも格納する必要があります。 以下の場所が可能です。  
  
-   Windows システム上のレジストリ。  
  
-   アプリケーションリソースファイル。  
  
-   テキストファイルなどの外部ファイル。  
  
   
  
## Examples  
 次の例では、ローカルシステムから南極/南部のタイムゾーンを取得しようとします。 失敗した場合、コードはアプリケーションディレクトリ内のテキストファイルからタイムゾーンに関する情報を取得しようとします。 この試行が失敗した場合、コードはタイムゾーンを作成し、それに関する情報をテキストファイルに書き込みます。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="~/docs/standard/datetime/save-time-zones-to-an-embedded-resource.md">方法 : 埋め込みリソースにタイム ゾーンを保存する</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトの表示名を返します。</summary>
        <returns>現在の <see cref="P:System.TimeZoneInfo.DisplayName" /> オブジェクトの <see cref="T:System.TimeZoneInfo" /> プロパティの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox> コントロールなどのリストコントロールに <xref:System.TimeZoneInfo> オブジェクトを含むコレクションを割り当てると、コントロールは <xref:System.TimeZoneInfo.ToString%2A> メソッドを自動的に呼び出して、リストに表示される各オブジェクトを記述する文字列を抽出します。 その結果、オブジェクトのわかりやすい説明を文字列として格納する必要がなく、ユーザーはその文字列を使用してコレクションからオブジェクトを抽出する必要がなくなります。 詳細については[、「方法: コンピューター上に存在するタイムゾーンを列挙する](~/docs/standard/datetime/enumerate-time-zones.md)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>世界協定時刻 (UTC) ゾーンを表す <see cref="T:System.TimeZoneInfo" /> オブジェクトを取得します。</summary>
        <value>世界協定時刻 (UTC) ゾーンを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは組み込みのオブジェクトです。この <xref:System.TimeZoneInfo> オブジェクトに関する情報は、Windows システムのレジストリ、および Linux および macOS の[ICU ライブラリ](http://userguide.icu-project.org/datetime/timezone)からは取得されません。  
  
> [!IMPORTANT]
>  UTC タイムゾーンを <xref:System.TimeZoneInfo> オブジェクト変数に割り当てるのではなく、常に <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> プロパティを使用して世界協定時刻 (UTC) ゾーンにアクセスする必要があります。 これにより、<xref:System.TimeZoneInfo.ClearCachedData%2A> メソッドの呼び出しによって <xref:System.TimeZoneInfo> オブジェクト変数が無効になるのを防ぐことができます。  
  
 協定世界時は、以前はグリニッジ標準時 (GMT) と呼ばれていました。  
  
   
  
## Examples  
 次の例では、世界協定時刻 (UTC) を表す <xref:System.TimeZoneInfo> オブジェクトを取得し、その表示名、標準時名、および夏時間名を出力します。  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/access-utc-and-local.md">方法 : 定義済みの UTC オブジェクトおよびローカル タイム ゾーン オブジェクトにアクセスする</related>
      </Docs>
    </Member>
  </Members>
</Type>
