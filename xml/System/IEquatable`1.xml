<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d9c8d383866590a1884201bc535b43fac25ab1da" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78684741" /></Metadata><TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="1d138-101">比較するオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="1d138-101">The type of objects to compare.</span></span></typeparam>
    <summary><span data-ttu-id="1d138-102">インスタンスの等価性判断を目的とする型固有のメソッドを作成するために値型またはクラスで実装する、汎用のメソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="1d138-102">Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d138-103">このインターフェイスは、値を処理できる型 (数値クラスや文字列クラスなど) によって実装されます。</span><span class="sxs-lookup"><span data-stu-id="1d138-103">This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</span></span> <span data-ttu-id="1d138-104">値型またはクラスは、<xref:System.IEquatable%601.Equals%2A> メソッドを実装して、インスタンスの等価性を判断するために適した型固有のメソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="1d138-104">A value type or class implements the <xref:System.IEquatable%601.Equals%2A> method to create a type-specific method suitable for determining equality of instances.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d138-105"><xref:System.IComparable%601> インターフェイスは、実装する型のインスタンスの並べ替え順序を決定する <xref:System.IComparable%601.CompareTo%2A> メソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="1d138-105">The <xref:System.IComparable%601> interface defines the <xref:System.IComparable%601.CompareTo%2A> method, which determines the sort order of instances of the implementing type.</span></span> <span data-ttu-id="1d138-106"><xref:System.IEquatable%601> インターフェイスは、実装する型のインスタンスが等しいかどうかを判断する <xref:System.IEquatable%601.Equals%2A> メソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="1d138-106">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="1d138-107"><xref:System.IEquatable%601> インターフェイスは、`Contains`、`IndexOf`、`LastIndexOf`、`Remove`などのメソッドで等しいかどうかをテストするときに、<xref:System.Collections.Generic.Dictionary%602>、<xref:System.Collections.Generic.List%601>、<xref:System.Collections.Generic.LinkedList%601> などのジェネリックコレクションオブジェクトによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="1d138-107">The <xref:System.IEquatable%601> interface is used by generic collection objects such as <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, and <xref:System.Collections.Generic.LinkedList%601> when testing for equality in such methods as `Contains`, `IndexOf`, `LastIndexOf`, and `Remove`.</span></span> <span data-ttu-id="1d138-108">ジェネリックコレクションに格納されている可能性のある任意のオブジェクトに対して実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d138-108">It should be implemented for any object that might be stored in a generic collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d138-109"><xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> メソッドの例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1d138-109">See the example for the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="1d138-110"><see cref="T:System.IEquatable`1" /> インターフェイスの型パラメーターを、このインターフェイスを実装している型に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="1d138-110">Replace the type parameter of the <see cref="T:System.IEquatable`1" /> interface with the type that is implementing this interface.</span></span>  
  
<span data-ttu-id="1d138-111"><see cref="T:System.IEquatable`1" />を実装する場合は、<see cref="M:System.Object.Equals(System.Object)" /> と <see cref="M:System.Object.GetHashCode" /> の基本クラスの実装もオーバーライドして、その動作が <see cref="M:System.IEquatable`1.Equals(`0)" /> メソッドの動作と一致するようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d138-111">If you implement <see cref="T:System.IEquatable`1" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method.</span></span> <span data-ttu-id="1d138-112"><see cref="M:System.Object.Equals(System.Object)" />をオーバーライドする場合、オーバーライドされた実装は、クラスの静的 <see langword="Equals(System.Object, System.Object)" /> メソッドの呼び出しでも呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1d138-112">If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class.</span></span> <span data-ttu-id="1d138-113">さらに、<see langword="op_Equality" /> 演算子と <see langword="op_Inequality" /> 演算子をオーバーロードする必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d138-113">In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators.</span></span> <span data-ttu-id="1d138-114">これにより、すべての等しいテストで一貫性のある結果が返されるようになります。</span><span class="sxs-lookup"><span data-stu-id="1d138-114">This ensures that all tests for equality return consistent results.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="1d138-115"><see cref="M:System.Object.Equals(System.Object)" />のオーバーライドの詳細については、<see cref="M:System.Object.Equals(System.Object)" /> の記事を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1d138-115">For information on overriding <see cref="M:System.Object.Equals(System.Object)" />, see the <see cref="M:System.Object.Equals(System.Object)" /> article.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="1d138-116">値型の場合は、常に <see cref="T:System.IEquatable`1" /> を実装し、<see cref="M:System.Object.Equals(System.Object)" /> をオーバーライドしてパフォーマンスを向上させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d138-116">For a value type, you should always implement <see cref="T:System.IEquatable`1" /> and override <see cref="M:System.Object.Equals(System.Object)" /> for better performance.</span></span> <span data-ttu-id="1d138-117"><see cref="M:System.Object.Equals(System.Object)" /> ボックスの値型とは、2つの値が等しいかどうかを比較するためにリフレクションに依存します。</span><span class="sxs-lookup"><span data-stu-id="1d138-117"><see cref="M:System.Object.Equals(System.Object)" /> boxes value types and relies on reflection to compare two values for equality.</span></span> <span data-ttu-id="1d138-118"><see cref="M:System.IEquatable`1.Equals(`0)" /> の実装と <see cref="M:System.Object.Equals(System.Object)" /> のオーバーライドは両方とも、一貫性のある結果を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d138-118">Both your implementation of <see cref="M:System.IEquatable`1.Equals(`0)" /> and your override of <see cref="M:System.Object.Equals(System.Object)" /> should return consistent results.</span></span>  
  
<span data-ttu-id="1d138-119"><see cref="T:System.IEquatable`1" />を実装する場合は、型のインスタンスの順序付けまたは並べ替えが可能な場合は、<see cref="T:System.IComparable`1" /> も実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d138-119">If you implement <see cref="T:System.IEquatable`1" />, you should also implement <see cref="T:System.IComparable`1" /> if instances of your type can be ordered or sorted.</span></span> <span data-ttu-id="1d138-120">型が <see cref="T:System.IComparable`1" />を実装している場合は、ほとんどの場合、<see cref="T:System.IEquatable`1" />も実装します。</span><span class="sxs-lookup"><span data-stu-id="1d138-120">If your type implements <see cref="T:System.IComparable`1" />, you almost always also implement <see cref="T:System.IEquatable`1" />.</span></span></para>
      <para><span data-ttu-id="1d138-121">型が注文関係をサポートしていても、等価性が順序の関係と異なる場合があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d138-121">Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation.</span></span> <span data-ttu-id="1d138-122">アルファベット順に並べ替える `Person` クラスを考えてみましょう。</span><span class="sxs-lookup"><span data-stu-id="1d138-122">Consider a `Person` class where you sort alphabetically.</span></span> <span data-ttu-id="1d138-123">同じ名前の2人のユーザーが同じように並べ替えられますが、同じユーザーではありません。</span><span class="sxs-lookup"><span data-stu-id="1d138-123">Two people with the same name sort the same, but are not the same person.</span></span></para></block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="1d138-124">このオブジェクトと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d138-124">An object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="1d138-125">現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="1d138-125">Indicates whether the current object is equal to another object of the same type.</span></span></summary>
        <returns><span data-ttu-id="1d138-126">現在のオブジェクトが <paramref name="other" /> パラメーターと等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d138-126"><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d138-127"><xref:System.IEquatable%601.Equals%2A> メソッドの実装は、現在のオブジェクトと同じ型 `T`型の別のオブジェクトと等しいかどうかのテストを実行することを目的としています。</span><span class="sxs-lookup"><span data-stu-id="1d138-127">The implementation of the <xref:System.IEquatable%601.Equals%2A> method is intended to perform a test for equality with another object of type `T`, the same type as the current object.</span></span> <span data-ttu-id="1d138-128"><xref:System.IEquatable%601.Equals(%600)> メソッドは、次のような場合に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1d138-128">The <xref:System.IEquatable%601.Equals(%600)> method is called in the following circumstances:</span></span>  
  
-   <span data-ttu-id="1d138-129">`Equals` メソッドが呼び出され、`other` 引数が `T`型の厳密に型指定されたオブジェクトである場合。</span><span class="sxs-lookup"><span data-stu-id="1d138-129">When the `Equals` method is called and the `other` argument is a strongly-typed object of type `T`.</span></span> <span data-ttu-id="1d138-130">(`other` が `T`型ではない場合、基本 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1d138-130">(If `other` is not of type `T`, the base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="1d138-131">2つの方法のうち、<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> ではパフォーマンスが若干向上します)。</span><span class="sxs-lookup"><span data-stu-id="1d138-131">Of the two methods, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> offers slightly better performance.)</span></span>  
  
-   <span data-ttu-id="1d138-132">多数のジェネリックコレクションオブジェクトの検索メソッドが呼び出されたとき。</span><span class="sxs-lookup"><span data-stu-id="1d138-132">When the search methods of a number of generic collection objects are called.</span></span> <span data-ttu-id="1d138-133">これらの型とメソッドには、次のようなものがあります。</span><span class="sxs-lookup"><span data-stu-id="1d138-133">Some of these types and their methods include the following:</span></span>  
  
    -   <span data-ttu-id="1d138-134"><xref:System.Array.BinarySearch%2A> メソッドの一部のジェネリックオーバーロード。</span><span class="sxs-lookup"><span data-stu-id="1d138-134">Some of the generic overloads of the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
    -   <span data-ttu-id="1d138-135"><xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>、<xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>、<xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>、<xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>を含む <xref:System.Collections.Generic.List%601> クラスの検索メソッド。</span><span class="sxs-lookup"><span data-stu-id="1d138-135">The search methods of the <xref:System.Collections.Generic.List%601> class, including <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span></span>  
  
    -   <span data-ttu-id="1d138-136"><xref:System.Collections.Generic.Dictionary%602> クラスの検索メソッド (<xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> と <xref:System.Collections.Generic.IDictionary%602.Remove%2A>を含む)。</span><span class="sxs-lookup"><span data-stu-id="1d138-136">The search methods of the <xref:System.Collections.Generic.Dictionary%602> class, including <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> and <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span></span>  
  
    -   <span data-ttu-id="1d138-137">ジェネリック <xref:System.Collections.Generic.LinkedList%601> クラスの検索メソッド (<xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> と <xref:System.Collections.Generic.LinkedList%601.Remove%2A>を含む)。</span><span class="sxs-lookup"><span data-stu-id="1d138-137">The search methods of the generic <xref:System.Collections.Generic.LinkedList%601> class, including <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> and <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span></span>  
  
 <span data-ttu-id="1d138-138">つまり、クラスのオブジェクトが配列またはジェネリックコレクションオブジェクトに格納される可能性を処理するには、オブジェクトを簡単に識別して操作できるように <xref:System.IEquatable%601> を実装することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="1d138-138">In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <xref:System.IEquatable%601> so that the object can be easily identified and manipulated.</span></span>  
  
 <span data-ttu-id="1d138-139"><xref:System.IEquatable%601.Equals%2A> メソッドを実装する場合は、ジェネリック型引数によって指定された型に対して、適切に等しいかどうかを定義します。</span><span class="sxs-lookup"><span data-stu-id="1d138-139">When implementing the <xref:System.IEquatable%601.Equals%2A> method, define equality appropriately for the type specified by the generic type argument.</span></span> <span data-ttu-id="1d138-140">たとえば、型引数が <xref:System.Int32>場合は、2 32 ビット符号付き整数の比較のために適切に等しいかどうかを定義します。</span><span class="sxs-lookup"><span data-stu-id="1d138-140">For example, if the type argument is <xref:System.Int32>, define equality appropriately for the comparison of two 32-bit signed integers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d138-141">次の例は、<xref:System.IEquatable%601> を実装し、`LastName` と `SSN`の2つのプロパティを持つ `Person` クラスの部分実装を示しています。</span><span class="sxs-lookup"><span data-stu-id="1d138-141">The following example shows the partial implementation of a `Person` class that implements <xref:System.IEquatable%601> and has two properties, `LastName` and `SSN`.</span></span> <span data-ttu-id="1d138-142"><xref:System.IEquatable%601.Equals%2A> メソッドは、2つの `Person` オブジェクトの `SSN` プロパティが同一である場合に `True` を返します。それ以外の場合は `False`を返します。</span><span class="sxs-lookup"><span data-stu-id="1d138-142">The <xref:System.IEquatable%601.Equals%2A> method returns `True` if the `SSN` property of two `Person` objects is identical; otherwise, it returns `False`.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 <span data-ttu-id="1d138-143">`Person` オブジェクトは、次の例に示すように、<xref:System.Collections.Generic.List%601> オブジェクトに格納し、`Contains` メソッドで識別できます。</span><span class="sxs-lookup"><span data-stu-id="1d138-143">`Person` objects can then be stored in a <xref:System.Collections.Generic.List%601> object and can be identified by the `Contains` method, as the following example shows.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="1d138-144"><see cref="M:System.IEquatable`1.Equals(`0)" />を実装する場合は、<see cref="M:System.Object.Equals(System.Object)" /> と <see cref="M:System.Object.GetHashCode" /> の基本クラスの実装もオーバーライドして、その動作が <see cref="M:System.IEquatable`1.Equals(`0)" /> メソッドの動作と一致するようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d138-144">If you implement <see cref="M:System.IEquatable`1.Equals(`0)" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method.</span></span> <span data-ttu-id="1d138-145"><see cref="M:System.Object.Equals(System.Object)" />をオーバーライドする場合、オーバーライドされた実装は、クラスの静的 <see langword="Equals(System.Object, System.Object)" /> メソッドの呼び出しでも呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1d138-145">If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class.</span></span> <span data-ttu-id="1d138-146">さらに、<see langword="op_Equality" /> 演算子と <see langword="op_Inequality" /> 演算子をオーバーロードする必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d138-146">In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators.</span></span> <span data-ttu-id="1d138-147">これにより、等価性のすべてのテストが一貫した結果を返すようになります。この例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="1d138-147">This ensures that all tests for equality return consistent results, which the example illustrates.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
