<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7d6014ed5f8b82671c89ac49d5ac72e1a653ba58" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82419763" /></Metadata><TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">比較するオブジェクトの型。</typeparam>
    <summary>インスタンスの等価性判断を目的とする型固有のメソッドを作成するために値型またはクラスで実装する、汎用のメソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このインターフェイスは、値を処理できる型 (数値クラスや文字列クラスなど) によって実装されます。 値型またはクラスは、<xref:System.IEquatable%601.Equals%2A> メソッドを実装して、インスタンスの等価性を判断するために適した型固有のメソッドを作成します。  
  
> [!NOTE]
>  <xref:System.IComparable%601> インターフェイスは、実装する型のインスタンスの並べ替え順序を決定する <xref:System.IComparable%601.CompareTo%2A> メソッドを定義します。 <xref:System.IEquatable%601> インターフェイスは、実装する型のインスタンスが等しいかどうかを判断する <xref:System.IEquatable%601.Equals%2A> メソッドを定義します。  
  
 <xref:System.IEquatable%601> インターフェイスは、`Contains`、`IndexOf`、`LastIndexOf`、`Remove`などのメソッドで等しいかどうかをテストするときに、<xref:System.Collections.Generic.Dictionary%602>、<xref:System.Collections.Generic.List%601>、<xref:System.Collections.Generic.LinkedList%601> などのジェネリックコレクションオブジェクトによって使用されます。 ジェネリックコレクションに格納されている可能性のある任意のオブジェクトに対して実装する必要があります。  
  
   
  
## Examples  
 <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> メソッドの例を参照してください。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><see cref="T:System.IEquatable`1" /> インターフェイスの型パラメーターを、このインターフェイスを実装している型に置き換えます。  
  
<see cref="T:System.IEquatable`1" />を実装する場合は、<see cref="M:System.Object.Equals(System.Object)" /> と <see cref="M:System.Object.GetHashCode" /> の基本クラスの実装もオーバーライドして、その動作が <see cref="M:System.IEquatable`1.Equals(`0)" /> メソッドの動作と一致するようにする必要があります。 <see cref="M:System.Object.Equals(System.Object)" />をオーバーライドする場合、オーバーライドされた実装は、クラスの静的 <see langword="Equals(System.Object, System.Object)" /> メソッドの呼び出しでも呼び出されます。 さらに、<see langword="op_Equality" /> 演算子と <see langword="op_Inequality" /> 演算子をオーバーロードする必要があります。 これにより、すべての等しいテストで一貫性のある結果が返されるようになります。  
  
 <block subset="none" type="note"><para>  
 <see cref="M:System.Object.Equals(System.Object)" />のオーバーライドの詳細については、<see cref="M:System.Object.Equals(System.Object)" /> の記事を参照してください。  
  
</para></block>  
  
 値型の場合は、常に <see cref="T:System.IEquatable`1" /> を実装し、<see cref="M:System.Object.Equals(System.Object)" /> をオーバーライドしてパフォーマンスを向上させる必要があります。 <see cref="M:System.Object.Equals(System.Object)" /> ボックスの値型とは、2つの値が等しいかどうかを比較するためにリフレクションに依存します。 <see cref="M:System.IEquatable`1.Equals(`0)" /> の実装と <see cref="M:System.Object.Equals(System.Object)" /> のオーバーライドは両方とも、一貫性のある結果を返す必要があります。  
  
<see cref="T:System.IEquatable`1" />を実装する場合は、型のインスタンスの順序付けまたは並べ替えが可能な場合は、<see cref="T:System.IComparable`1" /> も実装する必要があります。 型が <see cref="T:System.IComparable`1" />を実装している場合は、ほとんどの場合、<see cref="T:System.IEquatable`1" />も実装します。</para>
      <para>型が注文関係をサポートしていても、等価性が順序の関係と異なる場合があることに注意してください。 アルファベット順に並べ替える `Person` クラスを考えてみましょう。 同じ名前の2人のユーザーが同じように並べ替えられますが、同じユーザーではありません。</para></block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">このオブジェクトと比較するオブジェクト。</param>
        <summary>現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。</summary>
        <returns>現在のオブジェクトが <see langword="true" /> パラメーターと等しい場合は <paramref name="other" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IEquatable%601.Equals%2A> メソッドの実装は、現在のオブジェクトと同じ型 `T`型の別のオブジェクトと等しいかどうかのテストを実行することを目的としています。 <xref:System.IEquatable%601.Equals(%600)> メソッドは、次のような場合に呼び出されます。  
  
-   `Equals` メソッドが呼び出され、`other` 引数が `T`型の厳密に型指定されたオブジェクトである場合。 (`other` が `T`型ではない場合、基本 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> メソッドが呼び出されます。 2つの方法のうち、<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> ではパフォーマンスが若干向上します)。  
  
-   多数のジェネリックコレクションオブジェクトの検索メソッドが呼び出されたとき。 これらの型とメソッドには、次のようなものがあります。  
  
    -   <xref:System.Array.BinarySearch%2A> メソッドの一部のジェネリックオーバーロード。  
  
    -   <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>、<xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>、<xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>、<xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>を含む <xref:System.Collections.Generic.List%601> クラスの検索メソッド。  
  
    -   <xref:System.Collections.Generic.Dictionary%602> クラスの検索メソッド (<xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> と <xref:System.Collections.Generic.IDictionary%602.Remove%2A>を含む)。  
  
    -   ジェネリック <xref:System.Collections.Generic.LinkedList%601> クラスの検索メソッド (<xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> と <xref:System.Collections.Generic.LinkedList%601.Remove%2A>を含む)。  
  
 つまり、クラスのオブジェクトが配列またはジェネリックコレクションオブジェクトに格納される可能性を処理するには、オブジェクトを簡単に識別して操作できるように <xref:System.IEquatable%601> を実装することをお勧めします。  
  
 <xref:System.IEquatable%601.Equals%2A> メソッドを実装する場合は、ジェネリック型引数によって指定された型に対して、適切に等しいかどうかを定義します。 たとえば、型引数が <xref:System.Int32>場合は、2 32 ビット符号付き整数の比較のために適切に等しいかどうかを定義します。  
  
   
  
## Examples  
 次の例は、<xref:System.IEquatable%601> を実装し、`LastName` と `SSN`の2つのプロパティを持つ `Person` クラスの部分実装を示しています。 <xref:System.IEquatable%601.Equals%2A> メソッドは、2つの `Person` オブジェクトの `SSN` プロパティが同一である場合に `True` を返します。それ以外の場合は `False`を返します。  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person` オブジェクトは、次の例に示すように、<xref:System.Collections.Generic.List%601> オブジェクトに格納し、`Contains` メソッドで識別できます。  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.IEquatable`1.Equals(`0)" />を実装する場合は、<see cref="M:System.Object.Equals(System.Object)" /> と <see cref="M:System.Object.GetHashCode" /> の基本クラスの実装もオーバーライドして、その動作が <see cref="M:System.IEquatable`1.Equals(`0)" /> メソッドの動作と一致するようにする必要があります。 <see cref="M:System.Object.Equals(System.Object)" />をオーバーライドする場合、オーバーライドされた実装は、クラスの静的 <see langword="Equals(System.Object, System.Object)" /> メソッドの呼び出しでも呼び出されます。 さらに、<see langword="op_Equality" /> 演算子と <see langword="op_Inequality" /> 演算子をオーバーロードする必要があります。 これにより、等価性のすべてのテストが一貫した結果を返すようになります。この例を次に示します。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
