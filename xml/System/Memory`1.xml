<Type Name="Memory&lt;T&gt;" FullName="System.Memory&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="373adafc0d60016d22a99b46096511e7bdd6d707" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75040423" /></Metadata><TypeSignature Language="C#" Value="public struct Memory&lt;T&gt; : IEquatable&lt;Memory&lt;T&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Memory`1&lt;T&gt; extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Memory`1&lt;!T&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Memory`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Memory(Of T)&#xA;Implements IEquatable(Of Memory(Of T))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class Memory : IEquatable&lt;Memory&lt;T&gt;&gt;" />
  <TypeSignature Language="F#" Value="type Memory&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Memory&lt;T&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><see cref="T:System.Memory`1" />内の項目の型。</typeparam>
    <summary>メモリの隣接した領域を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<xref:System.Span%601>と同様に、`Memory<T>` は連続したメモリ領域を表します。 ただし <xref:System.Span%601>とは異なり、`Memory<T>` は[ref 構造体](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types)ではありません。 これは、`Memory<T>` をマネージヒープに配置できるのに対し、<xref:System.Span%601> はできないことを意味します。 その結果、`Memory<T>` 構造体には、<xref:System.Span%601> インスタンスと同じ制限がありません。 特に次の点に注意してください。

- クラスのフィールドとして使用できます。

- `await` と `yield` の境界を越えて使用できます。

`Memory<T>`に加えて、<xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> を使用して、変更不可または読み取り専用のメモリを表すことができます。

    ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><see cref="T:System.Memory`1" /> オブジェクトの作成元になる配列。</param>
        <summary>指定された配列全体で新しい <see cref="T:System.Memory`1" /> オブジェクトを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`array` が `null`場合、このコンストラクターは `default<T>` 値を持つ <xref:System.Memory%601> オブジェクトを返します。

      ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><paramref name="T" /> は参照型です。<paramref name="array" /> は型 <paramref name="T" /> の配列ではありません。
        
または

配列が<see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">共変です。</see></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">ソースの配列。</param>
        <param name="start">新しい <see cref="T:System.Memory`1" /> に含める最初の要素のインデックス。</param>
        <param name="length">新しい <see cref="T:System.Memory`1" /> に含める要素の数。</param>
        <summary>配列の、指定したインデックスから始まる指定した数の要素を含む新しい <see cref="T:System.Memory`1" /> オブジェクトを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`array` が `null`場合、このコンストラクターは `default<T>` 値を持つ <xref:System.Memory%601> オブジェクトを返します。

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="array" /> は <see langword="null" /> ですが、<paramref name="start" /> または <paramref name="length" /> は 0 以外です。


または

<paramref name="start" /> は配列の境界の外側にあります。

または

<paramref name="start" /> と <paramref name="length" /> は配列の要素数を超えています。</exception>
        <exception cref="T:System.ArrayTypeMismatchException"><paramref name="T" /> は参照型です。<paramref name="array" /> は型 <paramref name="T" /> の配列ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.CopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Memory(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Memory&lt;'T&gt; -&gt; unit" Usage="memory.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">コピー先 <see cref="T:System.Memory`1" /> オブジェクト。</param>
        <summary><see cref="T:System.Memory`1" /> オブジェクトの内容を、コピー先である <see cref="T:System.Memory`1" /> オブジェクトにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

このメソッドは、現在の `destination` インスタンスの内容が重複している場合でも、現在の <xref:System.Memory%601> インスタンスのすべての内容を `destination` にコピーします。

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destination" /> の長さが、現在のインスタンスの長さ未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Memory`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Memory&lt;T&gt; Empty { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>空の <see cref="T:System.Memory`1" /> オブジェクトを返します。</summary>
        <value>空のオブジェクト。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Memory&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Memory`1&lt;!T&gt; other) cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Memory&lt;T&gt; other);" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="F#" Value="override this.Equals : Memory&lt;'T&gt; -&gt; bool" Usage="memory.Equals other" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Memory`1&lt;!T&gt; other) cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Memory&lt;T&gt; other);" FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other">現在のインスタンスと比較するオブジェクト。</param>
        <summary>指定した <see cref="T:System.Memory`1" /> オブジェクトが現在のオブジェクトと等しいかどうかを判断します。</summary>
        <returns>現在のインスタンスと <see langword="true" /> が等しい場合は <paramref name="other" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

以下の場合に、2つのオブジェクトが等しいと判定します。

   - `other` は <xref:System.Memory%601> または <xref:System.ReadOnlyMemory%601> オブジェクトです。
   
   - 両方のオブジェクトは、同じ配列を指し、同じ長さである。

`Equals(Memory<T>)` メソッドは、参照の等価性のテストを実行します。<xref:System.Memory%601> の要素が等しいかどうかを比較しません。

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="memory.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
        <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
        <returns>現在のインスタンスと <see langword="true" /> が等しい場合は <paramref name="obj" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

2つの <xref:System.Memory%601> オブジェクトは、両方のオブジェクトが同じ配列を指し、長さが同じである場合に等しくなります。 要素が等しいかどうかはチェックされないことに注意してください。
   
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="memory.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Memory&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のインスタンスが空であるかどうかを示します。</summary>
        <value>現在のインスタンスが空の場合は <see langword="true" />。それ以外の場合は、<see langword="false" />ます。</value>
        <remarks>長さが0の場合、<see cref="T:System.Memory`1" /> オブジェクトは空になります。</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Memory&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のインスタンス内の項目の数を取得します。</summary>
        <value>現在のインスタンス内の項目の数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.ArraySegment{`0})~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="segment">変換対象のオブジェクト。</param>
        <summary><see cref="T:System.ArraySegment`1" /> オブジェクトから <see cref="T:System.Memory`1" /> オブジェクトへの暗黙の型変換を定義します。</summary>
        <returns>変換後の <see cref="T:System.ArraySegment`1" /> オブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlyMemory&lt;T&gt; (Memory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlyMemory`1&lt;!T&gt; op_Implicit(valuetype System.Memory`1&lt;!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.Memory{`0})~System.ReadOnlyMemory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (memory As Memory(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlyMemory&lt;T&gt;(Memory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Memory&lt;'T&gt; -&gt; ReadOnlyMemory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="memory">変換対象のオブジェクト。</param>
        <summary><see cref="T:System.Memory`1" /> オブジェクトから <see cref="T:System.ReadOnlyMemory`1" /> オブジェクトへの暗黙の型変換を定義します。</summary>
        <returns>変換後のオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(`0[])~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">変換する配列。</param>
        <summary>配列から <see cref="T:System.Memory`1" /> オブジェクトへの暗黙の型変換を定義します。</summary>
        <returns>変換後のオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pin">
      <MemberSignature Language="C#" Value="public System.Buffers.MemoryHandle Pin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.MemoryHandle Pin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Pin" />
      <MemberSignature Language="VB.NET" Value="Public Function Pin () As MemoryHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Buffers::MemoryHandle Pin();" />
      <MemberSignature Language="F#" Value="member this.Pin : unit -&gt; System.Buffers.MemoryHandle" Usage="memory.Pin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.MemoryHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Memory`1" /> オブジェクトのハンドルを作成します。</summary>
        <returns><see cref="T:System.Memory`1" /> オブジェクトのハンドル。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

## <a name="see-also"></a>関連項目

ガベージコレクターは、返された <xref:System.Buffers.MemoryHandle> オブジェクトが破棄されるまでメモリを移動しません。 これにより、メモリのアドレスを取得し、使用することができます。

<xref:System.Type.IsPrimitive> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">非プリミティブ (blittable でない) メンバーを持つインスタンスはピン留めできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">スライスの開始位置を示すインデックス。</param>
        <summary>指定したインデックスで始まる現在のメモリからスライスを形成します。</summary>
        <returns>現在のインスタンスのすべての要素を、<paramref name="start" /> からインスタンスの末尾まで含んでいるオブジェクト。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start" /> が 0 未満であるか、<see cref="P:System.Memory`1.Length" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">スライスの開始位置を示すインデックス。</param>
        <param name="length">スライスに含める要素の数。</param>
        <summary>指定したインデックスで始まる現在のメモリから指定した長さでスライスを形成します。</summary>
        <returns><paramref name="length" /> で始まる現在のインスタンスの <paramref name="start" /> 要素を含むオブジェクト。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start" /> が 0 未満であるか、<see cref="P:System.Memory`1.Length" /> を超えています。

または

<paramref name="length" /> が <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /> より大きくなっています</exception>
      </Docs>
    </Member>
    <Member MemberName="Span">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; Span { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Span`1&lt;!T&gt; Span" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Span" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Span As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Span&lt;T&gt; Span { Span&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Span : Span&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Span" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のインスタンスのスパンを返します。</summary>
        <value>現在の <see cref="T:System.Memory`1" /> オブジェクトから作成されたスパン。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="memory.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>メモリの内容を新しい配列にコピーします。</summary>
        <returns>現在のメモリの要素を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`ToArray` メソッドを呼び出すとヒープ割り当てが実行されるため、通常は回避する必要があります。 ただし、配列でのみ使用できる機能を活用するためには必要です。

`ToArray` メソッドを呼び出すたびに、新しい配列が返されます。 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="memory.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Memory`1" /> オブジェクトの文字列表現を返します。</summary>
        <returns>この <see cref="T:System.Memory`1" /> オブジェクトの文字列表現。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Memory<Char>`の場合、`ToString` メソッドは <xref:System.Memory%601>が指す文字を含む <xref:System.String> を返します。 それ以外の場合は、型の名前と <xref:System.Memory%601> に含まれる要素の数を含む <xref:System.String> を返します。

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.TryCopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Memory&lt;'T&gt; -&gt; bool" Usage="memory.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">コピー先 <see cref="T:System.Memory`1" /> オブジェクト。</param>
        <summary>メモリの内容をコピー先である <see cref="T:System.Memory`1" /> インスタンスにコピーします。</summary>
        <returns>コピー操作が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

このメソッドは、現在の `destination` インスタンスの内容が重複している場合でも、現在の <xref:System.Memory%601> インスタンスのすべての内容を `destination` にコピーします。

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
