<Type Name="Memory&lt;T&gt;" FullName="System.Memory&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0a40ee021fa689fa695a7df9e3ce4d1e3a423c97" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82419152" /></Metadata><TypeSignature Language="C#" Value="public struct Memory&lt;T&gt; : IEquatable&lt;Memory&lt;T&gt;&gt;" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Memory`1&lt;T&gt; extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Memory`1&lt;!T&gt;&gt;" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Memory`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Memory(Of T)&#xA;Implements IEquatable(Of Memory(Of T))" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class Memory : IEquatable&lt;Memory&lt;T&gt;&gt;" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type Memory&lt;'T&gt; = struct" />
  <TypeSignature Language="C#" Value="public struct Memory&lt;T&gt;" FrameworkAlternate="netcore-2.1;netcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Memory`1&lt;T&gt; extends System.ValueType" FrameworkAlternate="netcore-2.1;netcore-2.2" />
  <TypeSignature Language="VB.NET" Value="Public Structure Memory(Of T)" FrameworkAlternate="netcore-2.1;netcore-2.2" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class Memory" FrameworkAlternate="netcore-2.1;netcore-2.2" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Memory" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Memory&lt;T&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="9421d-101"><see cref="T:System.Memory`1" />内の項目の型。</span><span class="sxs-lookup"><span data-stu-id="9421d-101">The type of items in the <see cref="T:System.Memory`1" />.</span></span></typeparam>
    <summary><span data-ttu-id="9421d-102">メモリの隣接した領域を表します。</span><span class="sxs-lookup"><span data-stu-id="9421d-102">Represents a contiguous region of memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="9421d-103"><xref:System.Span%601>と同様に、`Memory<T>` は連続したメモリ領域を表します。</span><span class="sxs-lookup"><span data-stu-id="9421d-103">Like <xref:System.Span%601>, `Memory<T>` represents a contiguous region of memory.</span></span> <span data-ttu-id="9421d-104">ただし <xref:System.Span%601>とは異なり、`Memory<T>` は[ref 構造体](~/docs/csharp/language-reference/builtin-types/struct.md#ref-struct)ではありません。</span><span class="sxs-lookup"><span data-stu-id="9421d-104">Unlike <xref:System.Span%601>, however, `Memory<T>` is not a [ref struct](~/docs/csharp/language-reference/builtin-types/struct.md#ref-struct).</span></span> <span data-ttu-id="9421d-105">これは、`Memory<T>` をマネージヒープに配置できるのに対し、<xref:System.Span%601> はできないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="9421d-105">This means that `Memory<T>` can be placed on the managed heap, whereas <xref:System.Span%601> cannot.</span></span> <span data-ttu-id="9421d-106">その結果、`Memory<T>` 構造体には、<xref:System.Span%601> インスタンスと同じ制限がありません。</span><span class="sxs-lookup"><span data-stu-id="9421d-106">As a result, the `Memory<T>` structure does not have the same restrictions as a <xref:System.Span%601> instance.</span></span> <span data-ttu-id="9421d-107">特に次の点に違いがあります。</span><span class="sxs-lookup"><span data-stu-id="9421d-107">In particular:</span></span>

- <span data-ttu-id="9421d-108">クラスのフィールドとして使用できます。</span><span class="sxs-lookup"><span data-stu-id="9421d-108">It can be used as a field in a class.</span></span>

- <span data-ttu-id="9421d-109">`await` と `yield` の境界を越えて使用できます。</span><span class="sxs-lookup"><span data-stu-id="9421d-109">It can be used across `await` and `yield` boundaries.</span></span>

<span data-ttu-id="9421d-110">`Memory<T>`に加えて、<xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> を使用して、変更不可または読み取り専用のメモリを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="9421d-110">In addition to `Memory<T>`, you can use <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> to represent immutable or read-only memory.</span></span>

    ]]></format>
    </remarks>
    <related type="article" href="~/docs/standard/memory-and-spans/index.md"><span data-ttu-id="9421d-111">メモリおよびスパンに関連する型</span><span class="sxs-lookup"><span data-stu-id="9421d-111">Memory- and span-related types</span></span></related>
    <related type="article" href="~/docs/standard/memory-and-spans/memory-t-usage-guidelines.md"><span data-ttu-id="9421d-112">メモリ&lt;T&gt; とスパン&lt;T&gt; 使用ガイドライン</span><span class="sxs-lookup"><span data-stu-id="9421d-112">Memory&lt;T&gt; and Span&lt;T&gt; usage guidelines</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="9421d-113"><see cref="T:System.Memory`1" /> オブジェクトの作成元になる配列。</span><span class="sxs-lookup"><span data-stu-id="9421d-113">The array from which to create the <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="9421d-114">指定された配列全体で新しい <see cref="T:System.Memory`1" /> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="9421d-114">Creates a new <see cref="T:System.Memory`1" /> object over the entirety of a specified array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="9421d-115">`array` が `null`場合、このコンストラクターは `default<T>` 値を持つ <xref:System.Memory%601> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="9421d-115">If `array` is `null`, this constructor returns a <xref:System.Memory%601> object with a `default<T>` value.</span></span>

      ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="9421d-116"><paramref name="T" /> は参照型です。<paramref name="array" /> は型 <paramref name="T" /> の配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="9421d-116"><paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span></span>
        
<span data-ttu-id="9421d-117">または</span><span class="sxs-lookup"><span data-stu-id="9421d-117">-or-</span></span>

<span data-ttu-id="9421d-118">配列が<see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">共変です。</see></span><span class="sxs-lookup"><span data-stu-id="9421d-118">The array is <see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">covariant.</see></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="9421d-119">ソース配列です。</span><span class="sxs-lookup"><span data-stu-id="9421d-119">The source array.</span></span></param>
        <param name="start"><span data-ttu-id="9421d-120">新しい <see cref="T:System.Memory`1" /> に含める最初の要素のインデックス。</span><span class="sxs-lookup"><span data-stu-id="9421d-120">The index of the first element to include in the new <see cref="T:System.Memory`1" />.</span></span></param>
        <param name="length"><span data-ttu-id="9421d-121">新しい <see cref="T:System.Memory`1" /> に含める要素の数。</span><span class="sxs-lookup"><span data-stu-id="9421d-121">The number of elements to include in the new <see cref="T:System.Memory`1" />.</span></span></param>
        <summary><span data-ttu-id="9421d-122">配列の、指定したインデックスから始まる指定した数の要素を含む新しい <see cref="T:System.Memory`1" /> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="9421d-122">Creates a new <see cref="T:System.Memory`1" /> object that includes a specified number of elements of an array beginning at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="9421d-123">`array` が `null`場合、このコンストラクターは `default<T>` 値を持つ <xref:System.Memory%601> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="9421d-123">If `array` is `null`, this constructor returns a  <xref:System.Memory%601> object with a `default<T>` value.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9421d-124"><paramref name="array" /> は <see langword="null" /> ですが、<paramref name="start" /> または <paramref name="length" /> は 0 以外です。</span><span class="sxs-lookup"><span data-stu-id="9421d-124"><paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span></span>


<span data-ttu-id="9421d-125">または</span><span class="sxs-lookup"><span data-stu-id="9421d-125">-or-</span></span>

<span data-ttu-id="9421d-126"><paramref name="start" /> は配列の境界の外側にあります。</span><span class="sxs-lookup"><span data-stu-id="9421d-126"><paramref name="start" /> is outside the bounds of the array.</span></span>

<span data-ttu-id="9421d-127">または</span><span class="sxs-lookup"><span data-stu-id="9421d-127">-or-</span></span>

<span data-ttu-id="9421d-128"><paramref name="start" /> と <paramref name="length" /> は配列の要素数を超えています。</span><span class="sxs-lookup"><span data-stu-id="9421d-128"><paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="9421d-129"><paramref name="T" /> は参照型です。<paramref name="array" /> は型 <paramref name="T" /> の配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="9421d-129"><paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.CopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Memory(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Memory&lt;'T&gt; -&gt; unit" Usage="memory.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="9421d-130">コピー先 <see cref="T:System.Memory`1" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9421d-130">The destination <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="9421d-131"><see cref="T:System.Memory`1" /> オブジェクトの内容を、コピー先である <see cref="T:System.Memory`1" /> オブジェクトにコピーします。</span><span class="sxs-lookup"><span data-stu-id="9421d-131">Copies the contents of a <see cref="T:System.Memory`1" /> object into a destination <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="9421d-132">このメソッドは、現在の `destination` インスタンスの内容が重複している場合でも、現在の <xref:System.Memory%601> インスタンスのすべての内容を `destination` にコピーします。</span><span class="sxs-lookup"><span data-stu-id="9421d-132">This method copies all of the contents of the current <xref:System.Memory%601> instance to `destination` even if the contents of the current instance and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9421d-133"><paramref name="destination" /> の長さが、現在のインスタンスの長さ未満です。</span><span class="sxs-lookup"><span data-stu-id="9421d-133">The length of <paramref name="destination" /> is less than the length of the current instance.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Memory`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Memory&lt;T&gt; Empty { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9421d-134">空の <see cref="T:System.Memory`1" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="9421d-134">Returns an empty <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <value><span data-ttu-id="9421d-135">空のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9421d-135">An empty object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Memory&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Memory`1&lt;!T&gt; other) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Memory&lt;T&gt; other);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="F#" Value="override this.Equals : Memory&lt;'T&gt; -&gt; bool" Usage="memory.Equals other" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Memory`1&lt;!T&gt; other) cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Memory&lt;T&gt; other);" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="9421d-136">現在のインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9421d-136">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="9421d-137">指定された <see cref="T:System.Memory`1" /> オブジェクトが現在のオブジェクトと等しいかどうかを判定します。</span><span class="sxs-lookup"><span data-stu-id="9421d-137">Determines whether the specified <see cref="T:System.Memory`1" /> object is equal to the current object.</span></span></summary>
        <returns><span data-ttu-id="9421d-138">現在のインスタンスと <see langword="true" /> が等しい場合は <paramref name="other" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9421d-138"><see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="9421d-139">以下の場合に、2つのオブジェクトが等しいと判定します。</span><span class="sxs-lookup"><span data-stu-id="9421d-139">The two objects are equal if:</span></span>

   - <span data-ttu-id="9421d-140">`other` は <xref:System.Memory%601> または <xref:System.ReadOnlyMemory%601> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="9421d-140">`other` is a <xref:System.Memory%601> or <xref:System.ReadOnlyMemory%601> object.</span></span>
   
   - <span data-ttu-id="9421d-141">両方のオブジェクトは、同じ配列を指し、同じ長さである。</span><span class="sxs-lookup"><span data-stu-id="9421d-141">Both objects point to the same array and have the same length.</span></span>

<span data-ttu-id="9421d-142">`Equals(Memory<T>)` メソッドは、参照の等価性のテストを実行します。<xref:System.Memory%601> の要素が等しいかどうかを比較しません。</span><span class="sxs-lookup"><span data-stu-id="9421d-142">The `Equals(Memory<T>)` method performs a test for reference equality; it does not compare the elements of <xref:System.Memory%601> for equality.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="memory.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="9421d-143">現在のインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9421d-143">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="9421d-144">指定されたオブジェクトが現在のオブジェクトと等しいかどうかを判定します。</span><span class="sxs-lookup"><span data-stu-id="9421d-144">Determines whether the specified object is equal to the current object.</span></span></summary>
        <returns><span data-ttu-id="9421d-145">現在のインスタンスと <see langword="true" /> が等しい場合は <paramref name="obj" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9421d-145"><see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="9421d-146">2つの <xref:System.Memory%601> オブジェクトは、両方のオブジェクトが同じ配列を指し、長さが同じである場合に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="9421d-146">Two <xref:System.Memory%601> objects are equal if both objects point to the same array and have the same length.</span></span> <span data-ttu-id="9421d-147">要素が等しいかどうかはチェックされないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="9421d-147">Note that the test for equality does not check whether the contents are equal.</span></span>
   
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="memory.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9421d-148">このインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="9421d-148">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="9421d-149">32 ビットの符号付き整数のハッシュ コードです。</span><span class="sxs-lookup"><span data-stu-id="9421d-149">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Memory&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9421d-150">現在のインスタンスが空であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="9421d-150">Indicates whether the current instance is empty.</span></span></summary>
        <value><span data-ttu-id="9421d-151">現在のインスタンスが空の場合は <see langword="true" />。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="9421d-151"><see langword="true" /> if the current instance is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks><span data-ttu-id="9421d-152">長さが0の場合、<see cref="T:System.Memory`1" /> オブジェクトは空になります。</span><span class="sxs-lookup"><span data-stu-id="9421d-152">A <see cref="T:System.Memory`1" /> object is empty if its length is 0.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Memory&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9421d-153">現在のインスタンス内の項目の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="9421d-153">Gets the number of items in the current instance.</span></span></summary>
        <value><span data-ttu-id="9421d-154">現在のインスタンス内の項目の数。</span><span class="sxs-lookup"><span data-stu-id="9421d-154">The number of items in the current instance.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.ArraySegment{`0})~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="segment"><span data-ttu-id="9421d-155">変換するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9421d-155">The object to convert.</span></span></param>
        <summary><span data-ttu-id="9421d-156"><see cref="T:System.ArraySegment`1" /> オブジェクトから <see cref="T:System.Memory`1" /> オブジェクトへの暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="9421d-156">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> object to a <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="9421d-157">変換された <see cref="T:System.ArraySegment`1" /> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="9421d-157">The converted <see cref="T:System.ArraySegment`1" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlyMemory&lt;T&gt; (Memory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlyMemory`1&lt;!T&gt; op_Implicit(valuetype System.Memory`1&lt;!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.Memory{`0})~System.ReadOnlyMemory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (memory As Memory(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlyMemory&lt;T&gt;(Memory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Memory&lt;'T&gt; -&gt; ReadOnlyMemory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="9421d-158">変換するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9421d-158">The object to convert.</span></span></param>
        <summary><span data-ttu-id="9421d-159"><see cref="T:System.Memory`1" /> オブジェクトから <see cref="T:System.ReadOnlyMemory`1" /> オブジェクトへの暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="9421d-159">Defines an implicit conversion of a <see cref="T:System.Memory`1" /> object to a <see cref="T:System.ReadOnlyMemory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="9421d-160">変換されたオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="9421d-160">The converted object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(`0[])~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="9421d-161">変換する配列です。</span><span class="sxs-lookup"><span data-stu-id="9421d-161">The array to convert.</span></span></param>
        <summary><span data-ttu-id="9421d-162">配列から <see cref="T:System.Memory`1" /> オブジェクトへの暗黙の型変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="9421d-162">Defines an implicit conversion of an array to a <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="9421d-163">変換されたオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="9421d-163">The converted object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pin">
      <MemberSignature Language="C#" Value="public System.Buffers.MemoryHandle Pin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.MemoryHandle Pin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Pin" />
      <MemberSignature Language="VB.NET" Value="Public Function Pin () As MemoryHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Buffers::MemoryHandle Pin();" />
      <MemberSignature Language="F#" Value="member this.Pin : unit -&gt; System.Buffers.MemoryHandle" Usage="memory.Pin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.MemoryHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9421d-164"><see cref="T:System.Memory`1" /> オブジェクトのハンドルを作成します。</span><span class="sxs-lookup"><span data-stu-id="9421d-164">Creates a handle for the <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="9421d-165"><see cref="T:System.Memory`1" /> オブジェクトのハンドル。</span><span class="sxs-lookup"><span data-stu-id="9421d-165">A handle for the <see cref="T:System.Memory`1" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

## <a name="see-also"></a><span data-ttu-id="9421d-166">参照</span><span class="sxs-lookup"><span data-stu-id="9421d-166">See also</span></span>

<span data-ttu-id="9421d-167">ガベージコレクターは、返された <xref:System.Buffers.MemoryHandle> オブジェクトが破棄されるまでメモリを移動しません。</span><span class="sxs-lookup"><span data-stu-id="9421d-167">The garbage collector will not move the memory until the returned <xref:System.Buffers.MemoryHandle> object is disposed.</span></span> <span data-ttu-id="9421d-168">これにより、メモリのアドレスを取得し、使用することができます。</span><span class="sxs-lookup"><span data-stu-id="9421d-168">This enables you to retrieve and use the memory's address.</span></span>

<xref:System.Type.IsPrimitive> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9421d-169">非プリミティブ (blittable でない) メンバーを持つインスタンスはピン留めできません。</span><span class="sxs-lookup"><span data-stu-id="9421d-169">An instance with non-primitive (non-blittable) members cannot be pinned.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="9421d-170">スライスの開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="9421d-170">The index at which to begin the slice.</span></span></param>
        <summary><span data-ttu-id="9421d-171">指定したインデックスで始まる現在のメモリからスライスを形成します。</span><span class="sxs-lookup"><span data-stu-id="9421d-171">Forms a slice out of the current memory that begins at a specified index.</span></span></summary>
        <returns><span data-ttu-id="9421d-172">現在のインスタンスのすべての要素を、<paramref name="start" /> からインスタンスの末尾まで含んでいるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9421d-172">An object that contains all elements of the current instance from <paramref name="start" /> to the end of the instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9421d-173"><paramref name="start" /> が 0 未満であるか、<see cref="P:System.Memory`1.Length" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="9421d-173"><paramref name="start" /> is less than zero or greater than <see cref="P:System.Memory`1.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="9421d-174">スライスの開始位置を示すインデックス。</span><span class="sxs-lookup"><span data-stu-id="9421d-174">The index at which to begin the slice.</span></span></param>
        <param name="length"><span data-ttu-id="9421d-175">スライスに含める要素の数。</span><span class="sxs-lookup"><span data-stu-id="9421d-175">The number of elements to include in the slice.</span></span></param>
        <summary><span data-ttu-id="9421d-176">指定したインデックスで始まる現在のメモリから指定した長さでスライスを形成します。</span><span class="sxs-lookup"><span data-stu-id="9421d-176">Forms a slice out of the current memory starting at a specified index for a specified length.</span></span></summary>
        <returns><span data-ttu-id="9421d-177"><paramref name="length" /> で始まる現在のインスタンスの <paramref name="start" /> 要素を含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9421d-177">An object that contains <paramref name="length" /> elements from the current instance starting at <paramref name="start" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9421d-178"><paramref name="start" /> が 0 未満であるか、<see cref="P:System.Memory`1.Length" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="9421d-178"><paramref name="start" /> is less than zero or greater than <see cref="P:System.Memory`1.Length" />.</span></span>

<span data-ttu-id="9421d-179">または</span><span class="sxs-lookup"><span data-stu-id="9421d-179">-or-</span></span>

<span data-ttu-id="9421d-180"><paramref name="length" /> が <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /> より大きくなっています</span><span class="sxs-lookup"><span data-stu-id="9421d-180"><paramref name="length" /> is greater than <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Span">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; Span { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Span`1&lt;!T&gt; Span" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Span" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Span As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Span&lt;T&gt; Span { Span&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Span : Span&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Span" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9421d-181">現在のインスタンスのスパンを返します。</span><span class="sxs-lookup"><span data-stu-id="9421d-181">Returns a span from the current instance.</span></span></summary>
        <value><span data-ttu-id="9421d-182">現在の <see cref="T:System.Memory`1" /> オブジェクトから作成されたスパン。</span><span class="sxs-lookup"><span data-stu-id="9421d-182">A span created from the current <see cref="T:System.Memory`1" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="memory.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9421d-183">メモリの内容を新しい配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="9421d-183">Copies the contents from the memory into a new array.</span></span></summary>
        <returns><span data-ttu-id="9421d-184">現在のメモリの要素を含む配列。</span><span class="sxs-lookup"><span data-stu-id="9421d-184">An array containing the elements in the current memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="9421d-185">`ToArray` メソッドを呼び出すとヒープ割り当てが実行されるため、通常は回避する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9421d-185">Because a call to the `ToArray` method performs a heap allocation, it should generally be avoided.</span></span> <span data-ttu-id="9421d-186">ただし、配列でのみ使用できる機能を活用するためには必要です。</span><span class="sxs-lookup"><span data-stu-id="9421d-186">However, it is sometimes necessary to take advantage of functionality that is only available for arrays.</span></span>

<span data-ttu-id="9421d-187">`ToArray` メソッドを呼び出すたびに、新しい配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="9421d-187">Each call to the `ToArray` method returns a new array.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="memory.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9421d-188">この <see cref="T:System.Memory`1" /> オブジェクトの文字列表現を返します。</span><span class="sxs-lookup"><span data-stu-id="9421d-188">Returns the string representation of this <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="9421d-189">この <see cref="T:System.Memory`1" /> オブジェクトの文字列表現。</span><span class="sxs-lookup"><span data-stu-id="9421d-189">the string representation of this <see cref="T:System.Memory`1" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="9421d-190">`Memory<Char>`の場合、`ToString` メソッドは <xref:System.Memory%601>が指す文字を含む <xref:System.String> を返します。</span><span class="sxs-lookup"><span data-stu-id="9421d-190">For a `Memory<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the <xref:System.Memory%601>.</span></span> <span data-ttu-id="9421d-191">それ以外の場合は、型の名前と <xref:System.Memory%601> に含まれる要素の数を含む <xref:System.String> を返します。</span><span class="sxs-lookup"><span data-stu-id="9421d-191">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the <xref:System.Memory%601> contains.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.TryCopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Memory&lt;'T&gt; -&gt; bool" Usage="memory.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="9421d-192">コピー先 <see cref="T:System.Memory`1" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9421d-192">The destination <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="9421d-193">メモリの内容をコピー先である <see cref="T:System.Memory`1" /> インスタンスにコピーします。</span><span class="sxs-lookup"><span data-stu-id="9421d-193">Copies the contents of the memory into a destination <see cref="T:System.Memory`1" /> instance.</span></span></summary>
        <returns><span data-ttu-id="9421d-194">コピー操作が成功した場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="9421d-194"><see langword="true" /> if the copy operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="9421d-195">このメソッドは、現在の `destination` インスタンスの内容が重複している場合でも、現在の <xref:System.Memory%601> インスタンスのすべての内容を `destination` にコピーします。</span><span class="sxs-lookup"><span data-stu-id="9421d-195">This method copies all of the contents of the current <xref:System.Memory%601> instance to `destination` even if the contents of the current instance and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
