<Type Name="AccessViolationException" FullName="System.AccessViolationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="698524b25947330b03161abd4670726579a482cb" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83957016" /></Metadata><TypeSignature Language="C#" Value="public class AccessViolationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AccessViolationException extends System.SystemException" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.AccessViolationException" />
  <TypeSignature Language="VB.NET" Value="Public Class AccessViolationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class AccessViolationException : SystemException" />
  <TypeSignature Language="F#" Value="type AccessViolationException = class&#xA;    inherit SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit AccessViolationException extends System.SystemException" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e8a4e-101">保護されたメモリに対して読み取りまたは書き込みを行おうとするとスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-101">The exception that is thrown when there is an attempt to read or write protected memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a4e-102">アンマネージコードまたはアンセーフコードでアクセス違反が発生するのは、割り当てられていないメモリに対してコードが読み取りまたは書き込みを試みた場合、またはアクセスできない場合です。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-102">An access violation occurs in unmanaged or unsafe code when the code attempts to read or write to memory that has not been allocated, or to which it does not have access.</span></span> <span data-ttu-id="e8a4e-103">これは通常、ポインターの値が正しくないために発生します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-103">This usually occurs because a pointer has a bad value.</span></span> <span data-ttu-id="e8a4e-104">無効なポインターによる読み取りまたは書き込みがすべてアクセス違反になるとは限らないため、通常、アクセス違反は、無効なポインターによって複数の読み取りまたは書き込みが発生したこと、およびメモリが破損している可能性があることを示します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-104">Not all reads or writes through bad pointers lead to access violations, so an access violation usually indicates that several reads or writes have occurred through bad pointers, and that memory might be corrupted.</span></span> <span data-ttu-id="e8a4e-105">したがって、アクセス違反は、ほとんどの場合、プログラミングエラーが深刻であることを示します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-105">Thus, access violations almost always indicate serious programming errors.</span></span> <span data-ttu-id="e8a4e-106"><xref:System.AccessViolationException> は、これらの重大なエラーを明確に特定します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-106">An <xref:System.AccessViolationException> clearly identifies these serious errors.</span></span>  
  
 <span data-ttu-id="e8a4e-107">検証可能なマネージコードだけで構成されるプログラムでは、すべての参照が有効または null であり、アクセス違反は不可能です。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-107">In programs consisting entirely of verifiable managed code, all references are either valid or null, and access violations are impossible.</span></span> <span data-ttu-id="e8a4e-108">検証可能なコード内の null 参照を参照しようとする操作では、<xref:System.NullReferenceException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-108">Any operation that attempts to reference a null reference in verifiable code throws a <xref:System.NullReferenceException> exception.</span></span> <span data-ttu-id="e8a4e-109"><xref:System.AccessViolationException> は、検証可能なマネージコードがアンマネージコードまたはアンマネージコードと対話する場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-109">An <xref:System.AccessViolationException> occurs only when verifiable managed code interacts with unmanaged code or with unsafe managed code.</span></span>  
  
## <a name="troubleshooting-accessviolationexception-exceptions"></a><span data-ttu-id="e8a4e-110">Accessが発生する例外のトラブルシューティング</span><span class="sxs-lookup"><span data-stu-id="e8a4e-110">Troubleshooting AccessViolationException exceptions</span></span>  
 <span data-ttu-id="e8a4e-111"><xref:System.AccessViolationException> 例外は、アンセーフマネージコードでのみ、または検証可能なマネージコードがアンマネージコードと対話するときにのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-111">An <xref:System.AccessViolationException> exception can occur only in unsafe managed code or when verifiable managed code interacts with unmanaged code:</span></span>  
  
-   <span data-ttu-id="e8a4e-112">アンセーフマネージコードで発生するアクセス違反は、プラットフォームに応じて、<xref:System.NullReferenceException> 例外または <xref:System.AccessViolationException> 例外として表すことができます。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-112">An access violation that occurs in unsafe managed code can be expressed as either a <xref:System.NullReferenceException> exception or an <xref:System.AccessViolationException> exception, depending on the platform.</span></span>  
  
-   <span data-ttu-id="e8a4e-113">マネージコードにバブルアップするアンマネージコードのアクセス違反は、常に <xref:System.AccessViolationException> の例外でラップされます。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-113">An access violation in unmanaged code that bubbles up to managed code is always wrapped in an <xref:System.AccessViolationException> exception.</span></span>  
  
 <span data-ttu-id="e8a4e-114">どちらの場合も、次のように <xref:System.AccessViolationException> 例外の原因を特定して修正することができます。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-114">In either case, you can identify and correct the cause of the <xref:System.AccessViolationException> exception as follows:</span></span>  
  
 <span data-ttu-id="e8a4e-115">アクセスしようとしているメモリが割り当て済みであることを確認します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-115">Make sure that the memory that you are attempting to access has been allocated.</span></span>  
 <span data-ttu-id="e8a4e-116"><xref:System.AccessViolationException> 例外は、割り当てられていない、またはプロセスによって所有されていないメモリにアクセスするために、保護されたメモリにアクセスしようとすると常にスローされます。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-116">An <xref:System.AccessViolationException> exception is always thrown by an attempt to access protected memory -- that is, to access memory that is not allocated or that is not owned by a process.</span></span>  
  
 <span data-ttu-id="e8a4e-117">自動メモリ管理は、共通言語ランタイムが提供するサービスの 1 つです。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-117">Automatic memory management is one of the services that the common language runtime provides.</span></span> <span data-ttu-id="e8a4e-118">マネージコードがアンマネージコードと同じ機能を提供する場合は、この機能を利用するために、マネージコードに移行することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-118">If managed code provides the same functionality as your unmanaged code, you may wish to move to managed code to take advantage of this functionality.</span></span> <span data-ttu-id="e8a4e-119">詳細については、「 [Automatic Memory Management](/dotnet/standard/automatic-memory-management)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-119">For more information, see [Automatic Memory Management](/dotnet/standard/automatic-memory-management).</span></span>  
  
 <span data-ttu-id="e8a4e-120">アクセスしようとしているメモリが破損していないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-120">Make sure that the memory that you are attempting to access has not been corrupted.</span></span>  
 <span data-ttu-id="e8a4e-121">無効なポインターによって複数の読み取り操作または書き込み操作が発生すると、メモリが破損する場合があります。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-121">If several read or write operations have occurred through bad pointers, memory may be corrupted.</span></span> <span data-ttu-id="e8a4e-122">これは通常、事前定義されたバッファーの外部のアドレスの読み取りまたは書き込みを行う場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-122">This typically occurs when reading or writing to addresses outside of a predefined buffer.</span></span>  
  
## <a name="accessviolationexception-and-trycatch-blocks"></a><span data-ttu-id="e8a4e-123">Accessている例外と try/catch ブロック</span><span class="sxs-lookup"><span data-stu-id="e8a4e-123">AccessViolationException and try/catch blocks</span></span>  
 <span data-ttu-id="e8a4e-124">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では <xref:System.AccessViolationException>、共通言語ランタイムによって予約されているメモリの外部で例外が発生した場合、共通言語ランタイムによってスローされる例外は、構造化例外ハンドラーの `catch` ステートメントによって処理されません。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-124">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.AccessViolationException> exceptions thrown by the common language runtime are not handled by the `catch` statement in a structured exception handler if the exception occurs outside of the memory reserved by the common language runtime.</span></span> <span data-ttu-id="e8a4e-125">このような <xref:System.AccessViolationException> 例外を処理するには、例外がスローされるメソッドに <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> 属性を適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-125">To handle such an <xref:System.AccessViolationException> exception, you should apply the  <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to the method in which the exception is thrown.</span></span> <span data-ttu-id="e8a4e-126">この変更は、ユーザーコードによってスローされた例外 <xref:System.AccessViolationException> には影響しません。これは、`catch` ステートメントによって引き続きキャッチされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-126">This change does not affect <xref:System.AccessViolationException> exceptions thrown by user code, which can continue to be caught by a `catch` statement.</span></span> <span data-ttu-id="e8a4e-127">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]で再コンパイルして実行する .NET Framework の以前のバージョン用に記述されたコードの場合、 [\<legacyCorruptedStateExceptionsPolicy >](/dotnet/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element)要素をアプリの構成ファイルに追加できます。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-127">For code written for previous versions of the .NET Framework that you want to recompile and run without modification on the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can add the [\<legacyCorruptedStateExceptionsPolicy>](/dotnet/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element) element to your app's configuration file.</span></span> <span data-ttu-id="e8a4e-128"><xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> または <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> イベントのハンドラーを定義している場合は、例外の通知を受け取ることもできます。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-128">Note that you can also receive notification of the exceptions if you have defined a handler for the <xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> or <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="e8a4e-129">バージョン情報</span><span class="sxs-lookup"><span data-stu-id="e8a4e-129">Version Information</span></span>  
 <span data-ttu-id="e8a4e-130">この例外は、.NET Framework 2.0 以降のバージョンでスローされます。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-130">This exception is thrown in the .NET Framework 2.0 and later versions.</span></span> <span data-ttu-id="e8a4e-131">以前のバージョンの .NET Framework では、アンマネージコードまたはアンセーフマネージコードのアクセス違反は、マネージコードの <xref:System.NullReferenceException> によって表されます。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-131">In earlier versions of the .NET Framework, an access violation in unmanaged code or unsafe managed code is represented by a <xref:System.NullReferenceException> in managed code.</span></span> <span data-ttu-id="e8a4e-132">また、<xref:System.NullReferenceException> は、検証可能なマネージコードで null 参照が逆参照された場合、データの破損が発生していない場合にもスローされます。また、バージョン1.0 または1.1 の2つの状況を区別する方法はありません。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-132">A <xref:System.NullReferenceException> is also thrown when a null reference is dereferenced in verifiable managed code, an occurrence that does not involve data corruption, and there is no way to distinguish between the two situations in versions 1.0 or 1.1.</span></span>  
  
 <span data-ttu-id="e8a4e-133">管理者は、選択したアプリケーションを .NET Framework バージョン1.1 の動作に戻すことを許可できます。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-133">Administrators can allow selected applications to revert to the behavior of the .NET Framework version 1.1.</span></span> <span data-ttu-id="e8a4e-134">アプリケーションの構成ファイルの[&lt;runtime&gt; Element](/dotnet/framework/configure-apps/file-schema/runtime/runtime-element)セクションに次の行を挿入します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-134">Place the following line in the [&lt;runtime&gt; Element](/dotnet/framework/configure-apps/file-schema/runtime/runtime-element) section of the configuration file for the application:</span></span>  
  
```  
<legacyNullReferenceExceptionPolicy enabled = "1"/>  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/exceptions/"><span data-ttu-id="e8a4e-135">例外の処理とスロー</span><span class="sxs-lookup"><span data-stu-id="e8a4e-135">Handling and Throwing Exceptions</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8a4e-136"><see cref="T:System.AccessViolationException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-136">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8a4e-137">エラーを説明するシステム提供メッセージを使用して、<see cref="T:System.AccessViolationException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-137">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a system-supplied message that describes the error.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a4e-138">このコンストラクターは、"保護されたメモリの読み取りまたは書き込みを試行しました。" など、エラーを説明するシステム提供のメッセージに新しいインスタンスの <xref:System.Exception.Message%2A> プロパティを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-138">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "Attempted to read or write protected memory.</span></span> <span data-ttu-id="e8a4e-139">これは、多くの場合、他のメモリが破損していることを示しています。 "</span><span class="sxs-lookup"><span data-stu-id="e8a4e-139">This is often an indication that other memory has been corrupted."</span></span> <span data-ttu-id="e8a4e-140">このメッセージには、システムの現在のカルチャが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-140">This message takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="e8a4e-141">次の表に、<xref:System.AccessViolationException> のインスタンスに対するプロパティの初期値を示します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-141">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="e8a4e-142">プロパティ</span><span class="sxs-lookup"><span data-stu-id="e8a4e-142">Property</span></span>|<span data-ttu-id="e8a4e-143">値</span><span class="sxs-lookup"><span data-stu-id="e8a4e-143">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="e8a4e-144">[https://login.microsoftonline.com/consumers/](`null`)</span><span class="sxs-lookup"><span data-stu-id="e8a4e-144">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="e8a4e-145">ローカライズされたエラー メッセージの文字列です。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-145">The localized error message string.</span></span>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/exceptions/"><span data-ttu-id="e8a4e-146">例外の処理とスロー</span><span class="sxs-lookup"><span data-stu-id="e8a4e-146">Handling and Throwing Exceptions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : string -&gt; AccessViolationException" Usage="new System.AccessViolationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="e8a4e-147">例外を説明するメッセージ。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-147">The message that describes the exception.</span></span> <span data-ttu-id="e8a4e-148">このコンストラクターの呼び出し元は、この文字列が現在のシステム環境向けにローカライズされていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-148">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span></param>
        <summary><span data-ttu-id="e8a4e-149">指定したメッセージでエラーを説明する <see cref="T:System.AccessViolationException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-149">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified message that describes the error.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a4e-150">次の表に、<xref:System.AccessViolationException> のインスタンスに対するプロパティの初期値を示します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-150">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="e8a4e-151">プロパティ</span><span class="sxs-lookup"><span data-stu-id="e8a4e-151">Property</span></span>|<span data-ttu-id="e8a4e-152">値</span><span class="sxs-lookup"><span data-stu-id="e8a4e-152">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="e8a4e-153">[https://login.microsoftonline.com/consumers/](`null`)</span><span class="sxs-lookup"><span data-stu-id="e8a4e-153">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="e8a4e-154">`message` で指定したエラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-154">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/exceptions/"><span data-ttu-id="e8a4e-155">例外の処理とスロー</span><span class="sxs-lookup"><span data-stu-id="e8a4e-155">Handling and Throwing Exceptions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AccessViolationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; AccessViolationException" Usage="new System.AccessViolationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="e8a4e-156">シリアル化されたデータ オブジェクトを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo" /> です。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-156">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</span></span></param>
        <param name="context"><span data-ttu-id="e8a4e-157">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-157">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="e8a4e-158">シリアル化されたデータを使用して、<see cref="T:System.AccessViolationException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-158">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with serialized data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a4e-159">このコンストラクターは、シリアル化解除の際に呼び出されて、ストリームで送信された例外オブジェクトを再構成します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-159">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="e8a4e-160">詳細については、次を参照してください。 [XML および SOAP シリアル化](/dotnet/standard/serialization/xml-and-soap-serialization)します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-160">For more information, see [XML and SOAP Serialization](/dotnet/standard/serialization/xml-and-soap-serialization).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/serialization/xml-and-soap-serialization"><span data-ttu-id="e8a4e-161">XML シリアル化および SOAP シリアル化</span><span class="sxs-lookup"><span data-stu-id="e8a4e-161">XML and SOAP Serialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : string * Exception -&gt; AccessViolationException" Usage="new System.AccessViolationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="e8a4e-162">例外を説明するメッセージ。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-162">The message that describes the exception.</span></span> <span data-ttu-id="e8a4e-163">このコンストラクターの呼び出し元は、この文字列が現在のシステム環境向けにローカライズされていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-163">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span></param>
        <param name="innerException"><span data-ttu-id="e8a4e-164">現在の例外の原因になった例外です。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-164">The exception that is the cause of the current exception.</span></span> <span data-ttu-id="e8a4e-165"><paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-165">If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span></span></param>
        <summary><span data-ttu-id="e8a4e-166">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.AccessViolationException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-166">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a4e-167">前回の例外の直接的な結果としてスローされる例外は、<xref:System.Exception.InnerException%2A> プロパティに前回の例外への参照を含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-167">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="e8a4e-168"><xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されるのと同じ値を返します。または、<xref:System.Exception.InnerException%2A> プロパティがコンストラクターに内部例外値を提供しない場合には `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-168">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="e8a4e-169">次の表に、<xref:System.AccessViolationException> のインスタンスに対するプロパティの初期値を示します。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-169">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="e8a4e-170">プロパティ</span><span class="sxs-lookup"><span data-stu-id="e8a4e-170">Property</span></span>|<span data-ttu-id="e8a4e-171">値</span><span class="sxs-lookup"><span data-stu-id="e8a4e-171">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="e8a4e-172">[https://login.microsoftonline.com/consumers/](`null`)</span><span class="sxs-lookup"><span data-stu-id="e8a4e-172">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="e8a4e-173">`message` で指定したエラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="e8a4e-173">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/exceptions/"><span data-ttu-id="e8a4e-174">例外の処理とスロー</span><span class="sxs-lookup"><span data-stu-id="e8a4e-174">Handling and Throwing Exceptions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
