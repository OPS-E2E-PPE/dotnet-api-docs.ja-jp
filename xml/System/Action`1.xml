<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0055643439e2b1026fd57941cbfe60d14124af66" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78829125" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <TypeSignature Language="C#" Value="public delegate void Action&lt;T&gt;(T obj);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;T&gt; extends System.MulticastDelegate" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of T)(obj As T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T"><span data-ttu-id="70c12-101">このデリゲートによってカプセル化されるメソッドのパラメーターの型。</span><span class="sxs-lookup"><span data-stu-id="70c12-101">The type of the parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="obj"><span data-ttu-id="70c12-102">このデリゲートによってカプセル化されるメソッドのパラメーター。</span><span class="sxs-lookup"><span data-stu-id="70c12-102">The parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="70c12-103">単一のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="70c12-103">Encapsulates a method that has a single parameter and does not return a value.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70c12-104"><xref:System.Action%601> デリゲートを使用して、カスタムデリゲートを明示的に宣言せずに、メソッドをパラメーターとして渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="70c12-104">You can use the <xref:System.Action%601> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="70c12-105">カプセル化されたメソッドは、このデリゲートで定義されているメソッドシグネチャに対応している必要があります。</span><span class="sxs-lookup"><span data-stu-id="70c12-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="70c12-106">つまり、カプセル化されたメソッドは、値によって渡される1つのパラメーターを持つ必要があり、値を返さないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="70c12-106">This means that the encapsulated method must have one parameter that is passed to it by value, and it must not return a value.</span></span> <span data-ttu-id="70c12-107">(でC#は、メソッドは `void`を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="70c12-107">(In C#, the method must return `void`.</span></span> <span data-ttu-id="70c12-108">Visual Basic では、`Sub`...`End Sub` で定義されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="70c12-108">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="70c12-109">construct。</span><span class="sxs-lookup"><span data-stu-id="70c12-109">construct.</span></span> <span data-ttu-id="70c12-110">また、無視される値を返すメソッドを指定することもできます)。通常、このようなメソッドは、操作を実行するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="70c12-110">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="70c12-111">1つのパラメーターを持ち、値を返すメソッドを参照するには、代わりにジェネリック <xref:System.Func%602> デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="70c12-111">To reference a method that has one parameter and returns a value, use the generic <xref:System.Func%602> delegate instead.</span></span>  
  
 <span data-ttu-id="70c12-112"><xref:System.Action%601> デリゲートを使用する場合、1つのパラメーターを持つメソッドをカプセル化するデリゲートを明示的に定義する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="70c12-112">When you use the <xref:System.Action%601> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="70c12-113">たとえば、次のコードでは、`DisplayMessage` という名前のデリゲートを明示的に宣言し、<xref:System.Console.WriteLine%2A> メソッドまたは `ShowWindowsMessage` メソッドへの参照をそのデリゲートインスタンスに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="70c12-113">For example, the following code explicitly declares a delegate named `DisplayMessage` and assigns a reference to either the <xref:System.Console.WriteLine%2A> method or the `ShowWindowsMessage` method to its delegate instance.</span></span>  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="70c12-114">次の例では、新しいデリゲートを明示的に定義し、名前付きメソッドを割り当てるのではなく、<xref:System.Action%601> デリゲートをインスタンス化することによって、このコードを簡略化します。</span><span class="sxs-lookup"><span data-stu-id="70c12-114">The following example simplifies this code by instantiating the <xref:System.Action%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 <span data-ttu-id="70c12-115">次の例に示すように、のC#匿名メソッドで <xref:System.Action%601> デリゲートを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="70c12-115">You can also use the <xref:System.Action%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="70c12-116">(匿名メソッドの概要については、「[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="70c12-116">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="70c12-117">次の例に示すように、ラムダ式を <xref:System.Action%601> デリゲートインスタンスに割り当てることもできます。</span><span class="sxs-lookup"><span data-stu-id="70c12-117">You can also assign a lambda expression to an <xref:System.Action%601> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="70c12-118">(ラムダ式の概要については、「[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="70c12-118">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <span data-ttu-id="70c12-119"><xref:System.Collections.Generic.List%601.ForEach%2A> メソッドと <xref:System.Array.ForEach%2A> メソッドはそれぞれ <xref:System.Action%601> デリゲートをパラメーターとして受け取ります。</span><span class="sxs-lookup"><span data-stu-id="70c12-119">The <xref:System.Collections.Generic.List%601.ForEach%2A> and <xref:System.Array.ForEach%2A> methods each take an <xref:System.Action%601> delegate as a parameter.</span></span> <span data-ttu-id="70c12-120">デリゲートによってカプセル化されたメソッドを使用すると、配列またはリストの各要素に対してアクションを実行できます。</span><span class="sxs-lookup"><span data-stu-id="70c12-120">The method encapsulated by the delegate allows you to perform an action on each element in the array or list.</span></span> <span data-ttu-id="70c12-121">この例では、<xref:System.Collections.Generic.List%601.ForEach%2A> メソッドを使用して、図を提供しています。</span><span class="sxs-lookup"><span data-stu-id="70c12-121">The example uses the <xref:System.Collections.Generic.List%601.ForEach%2A> method to provide an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70c12-122">次の例では、<xref:System.Action%601> デリゲートを使用して、<xref:System.Collections.Generic.List%601> オブジェクトの内容を出力する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="70c12-122">The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="70c12-123">この例では、`Print` メソッドを使用して、リストの内容をコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="70c12-123">In this example, the `Print` method is used to display the contents of the list to the console.</span></span> <span data-ttu-id="70c12-124">また、このC#例では、匿名メソッドを使用してコンテンツをコンソールに表示する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="70c12-124">In addition, the C# example also demonstrates the use of anonymous methods to display the contents to the console.</span></span> <span data-ttu-id="70c12-125">この例では、<xref:System.Action%601> 変数が明示的に宣言されていないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="70c12-125">Note that the example does not explicitly declare an <xref:System.Action%601> variable.</span></span> <span data-ttu-id="70c12-126">代わりに、1つのパラメーターを受け取り、1つのパラメーターが <xref:System.Action%601> デリゲートである <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> メソッドに値を返さないメソッドへの参照を渡します。</span><span class="sxs-lookup"><span data-stu-id="70c12-126">Instead, it passes a reference to a method that takes a single parameter and that does not return a value to the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method, whose single parameter is an <xref:System.Action%601> delegate.</span></span> <span data-ttu-id="70c12-127">同様に、このC#例では、<xref:System.Action%601> デリゲートは明示的にインスタンス化されません。これは、匿名メソッドのシグネチャが、<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> メソッドによって予期される <xref:System.Action%601> デリゲートのシグネチャと一致するためです。</span><span class="sxs-lookup"><span data-stu-id="70c12-127">Similarly, in the C# example, an <xref:System.Action%601> delegate is not explicitly instantiated because the signature of the anonymous method matches the signature of the <xref:System.Action%601> delegate that is expected by the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method.</span></span>  

 [!code-csharp-interactive[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>
