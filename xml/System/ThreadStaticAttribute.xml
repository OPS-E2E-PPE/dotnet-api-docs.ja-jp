<Type Name="ThreadStaticAttribute" FullName="System.ThreadStaticAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="04c9a75e50df4dfaef8f2d308c8ef318e3496227" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172194" /></Metadata><TypeSignature Language="C#" Value="public class ThreadStaticAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ThreadStaticAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ThreadStaticAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadStaticAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadStaticAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type ThreadStaticAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="451e8-101">静的フィールドの値がスレッドごとに一意であることを示します。</span><span class="sxs-lookup"><span data-stu-id="451e8-101">Indicates that the value of a static field is unique for each thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="451e8-102"><xref:System.ThreadStaticAttribute> でマークされた `static` フィールドは、スレッド間で共有されません。</span><span class="sxs-lookup"><span data-stu-id="451e8-102">A `static` field marked with <xref:System.ThreadStaticAttribute> is not shared between threads.</span></span> <span data-ttu-id="451e8-103">実行中の各スレッドには、フィールドの個別のインスタンスがあり、そのフィールドの値を個別に設定して取得します。</span><span class="sxs-lookup"><span data-stu-id="451e8-103">Each executing thread has a separate instance of the field, and independently sets and gets values for that field.</span></span> <span data-ttu-id="451e8-104">フィールドに別のスレッドでアクセスした場合は、別の値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="451e8-104">If the field is accessed on a different thread, it will contain a different value.</span></span>  
  
 <span data-ttu-id="451e8-105"><xref:System.ThreadStaticAttribute> 属性をフィールドに適用するだけでなく、フィールドを `static` フィールド (でC#は) または `Shared` フィールド (Visual Basic) として定義する必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="451e8-105">Note that in addition to applying the <xref:System.ThreadStaticAttribute> attribute to a field, you must also define it as a `static` field (in C#) or a `Shared` field (in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="451e8-106">`ThreadStaticAttribute`でマークされたフィールドに初期値を指定しないでください。この初期化は、クラスコンストラクターが実行されるときに1回だけ行われるため、1つのスレッドにのみ影響します。</span><span class="sxs-lookup"><span data-stu-id="451e8-106">Do not specify initial values for fields marked with `ThreadStaticAttribute`, because such initialization occurs only once, when the class constructor executes, and therefore affects only one thread.</span></span> <span data-ttu-id="451e8-107">初期値を指定しない場合は、値の型である場合は既定値に初期化されているフィールドに依存することも、参照型であるかどうかを `null` することもできます。</span><span class="sxs-lookup"><span data-stu-id="451e8-107">If you do not specify an initial value, you can rely on the field being initialized to its default value if it is a value type, or to `null` if it is a reference type.</span></span>  
  
 <span data-ttu-id="451e8-108">この属性はそのように使用し、派生させません。</span><span class="sxs-lookup"><span data-stu-id="451e8-108">Use this attribute as it is, and do not derive from it.</span></span>  
  
 <span data-ttu-id="451e8-109">属性の使用方法の詳細については、「[属性](~/docs/standard/attributes/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="451e8-109">For more information about using attributes, see [Attributes](~/docs/standard/attributes/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="451e8-110">次の例では、乱数ジェネレーターをインスタンス化し、メインスレッドに加えて10個のスレッドを作成した後、各スレッドで200万の乱数を生成します。</span><span class="sxs-lookup"><span data-stu-id="451e8-110">The following example instantiates a random number generator, creates ten threads in addition to the main thread, and then generates two million random numbers in each thread.</span></span> <span data-ttu-id="451e8-111">この例では、<xref:System.ThreadStaticAttribute> 属性を使用して、スレッドごとの合計と乱数の数を計算します。</span><span class="sxs-lookup"><span data-stu-id="451e8-111">It uses the <xref:System.ThreadStaticAttribute> attribute to calculate the sum and the count of random numbers per thread.</span></span> <span data-ttu-id="451e8-112">また、スレッドごとに追加される2つのフィールド `previous` と `abnormal`を定義して、乱数ジェネレーターの破損を検出できるようにします。</span><span class="sxs-lookup"><span data-stu-id="451e8-112">It also defines two additional per-thread fields, `previous` and `abnormal`, that allows it to detect corruption of the random number generator.</span></span>  
  
 [!code-csharp[System.ThreadStaticAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threadstaticattribute/cs/threadsafe2a.cs#1)]
 [!code-vb[System.ThreadStaticAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threadstaticattribute/vb/threadsafe2a.vb#1)]  
  
 <span data-ttu-id="451e8-113">この例では、のC# `lock` ステートメントと Visual Basic の `SyncLock` コンストラクトを使用して、乱数ジェネレーターへのアクセスを同期します。</span><span class="sxs-lookup"><span data-stu-id="451e8-113">The example uses the `lock` statement in C# and the `SyncLock` construct in Visual Basic to synchronize access to the random number generator.</span></span> <span data-ttu-id="451e8-114">これにより、乱数ジェネレーターが破損するのを防ぐことができます。通常は、後続のすべての呼び出しで値0が返されます。</span><span class="sxs-lookup"><span data-stu-id="451e8-114">This prevents corruption of the random number generator, which typically results in its returning a value of zero for all subsequent calls.</span></span>  
  
 <span data-ttu-id="451e8-115">また、この例では、<xref:System.Threading.CountdownEvent> クラスを使用して、呼び出しの合計数を表示する前に、各スレッドが乱数の生成を完了したことを確認します。</span><span class="sxs-lookup"><span data-stu-id="451e8-115">The example also uses the <xref:System.Threading.CountdownEvent> class to ensure that each thread has finished generating random numbers before it displays the total number of calls.</span></span> <span data-ttu-id="451e8-116">それ以外の場合、メインスレッドが生成する追加スレッドの前に実行が完了すると、メソッド呼び出しの合計数に対して不正確な値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="451e8-116">Otherwise, if the main thread completes execution before the additional threads that it spawns, it displays an inaccurate value for the total number of method calls.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Attribute" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Threading.AsyncLocal`1" />
    <related type="Article" href="~/docs/standard/attributes/index.md"><span data-ttu-id="451e8-117">属性を使用したメタデータの拡張</span><span class="sxs-lookup"><span data-stu-id="451e8-117">Extending Metadata Using Attributes</span></span></related>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="451e8-118">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="451e8-118">Managed Threading</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadStaticAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ThreadStaticAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadStaticAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="451e8-119"><see cref="T:System.ThreadStaticAttribute" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="451e8-119">Initializes a new instance of the <see cref="T:System.ThreadStaticAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
