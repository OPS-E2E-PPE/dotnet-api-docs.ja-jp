<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d4ae89c72b5a41371e0e3591beb8e3537cb0d2a6" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172805" /></Metadata><TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <TypeSignature Language="F#" Value="type IFormattable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>オブジェクトの値を文字列形式で書式設定する機能を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable> インターフェイスは、書式指定文字列と書式プロバイダーに基づいて、オブジェクトを文字列形式に変換します。  
  
 書式指定文字列は、通常、オブジェクトの全般的な外観を定義します。 たとえば、.NET Framework では次のことがサポートされています。  
  
-   列挙値の書式を設定するための標準書式指定文字列 (「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください)。  
  
-   数値の書式設定に使用する標準およびカスタムの書式指定文字列 (「[標準の数値書式指定](~/docs/standard/base-types/standard-numeric-format-strings.md)文字列」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください)。  
  
-   日付と時刻の値を書式設定するための標準およびカスタムの書式指定文字列 (「[標準の日付と時刻の書式指定](~/docs/standard/base-types/standard-date-and-time-format-strings.md)文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照)。  
  
-   時間間隔を書式設定するための標準およびカスタムの書式指定文字列 (「[標準の Timespan 書式指定文字列](~/docs/standard/base-types/standard-timespan-format-strings.md)」および「[カスタム TimeSpan 書式指定文字列](~/docs/standard/base-types/custom-timespan-format-strings.md)」を参照してください)。  
  
 独自の書式指定文字列を定義して、アプリケーション定義型の書式設定をサポートすることもできます。  
  
 書式プロバイダーは、オブジェクトを文字列形式に変換するときに使用するシンボルを定義する書式設定オブジェクトを返します。 たとえば、数値を通貨値に変換すると、書式プロバイダーによって、結果文字列に表示される通貨記号が定義されます。 .NET Framework は、次の3つの書式プロバイダーを定義します。  
  
-   <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> クラス。数値の書式設定に使用する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返すか、日付と時刻の値を書式設定するための <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを返します。  
  
-   <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> クラス。数値を書式設定するために、それ自体のインスタンスを返します。  
  
-   <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType> クラス。日付と時刻の値を書式設定するために自身のインスタンスを返します。  
  
 また、独自のカスタム書式プロバイダーを定義して、書式設定で使用されるカルチャ固有の情報、職業に固有の情報、または業界固有の情報を提供することもできます。 カスタム書式プロバイダーを使用したカスタム書式設定の実装の詳細については、「<xref:System.ICustomFormatter>」を参照してください。  
  
 <xref:System.IFormattable> インターフェイスは、実装する型の書式指定サービスを提供する単一のメソッド <xref:System.IFormattable.ToString%2A>を定義します。 <xref:System.IFormattable.ToString%2A> メソッドは、直接呼び出すことができます。 さらに、<xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> および <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドによって、および .NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用するメソッドによって自動的に呼び出されます。 そのような方法には、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType>、<xref:System.String.Format%2A?displayProperty=nameWithType>、<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType>などがあります。 <xref:System.IFormattable.ToString%2A> メソッドは、メソッドの書式指定文字列の各書式指定項目に対して呼び出されます。  
  
 <xref:System.IFormattable> インターフェイスは、基本データ型によって実装されます。  
  
   
  
## Examples  
 次の例では、 `Temperature` インターフェイスを実装する <xref:System.IFormattable> クラスを定義しています。 クラスは、"G" および "C" という4つの書式指定子をサポートしています。これは、気温が摂氏で表示されることを示します。"F"。気温が華氏で表示されることを示します。"K" は、気温がケルビンで表示されることを示します。 さらに、<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> の実装では、`null` または空の書式指定文字列を処理することもできます。 `Temperature` クラスによって定義される他の2つの `ToString` メソッドは、<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> の実装への呼び出しをラップするだけです。  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 次の例では、<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 実装を直接呼び出すか、複合書式指定文字列を使用して呼び出します。  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><see cref="M:System.Object.ToString" /> で提供される文字列の書式設定をより詳細に制御する必要があるクラスは <see cref="T:System.IFormattable" />を実装する必要があります。  
  
<see cref="T:System.IFormattable" /> を実装するクラスは、"G" (general) 書式指定子をサポートする必要があります。 "G" 指定子に加えて、クラスは、サポートする書式指定子のリストを定義できます。 また、クラスは、<see langword="null" />された書式指定子を処理できるように準備する必要があります。 書式設定および書式設定コードの詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</para></block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member ToString : string * IFormatProvider -&gt; string" Usage="iFormattable.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">使用する書式。  
  
または 
<see langword="Nothing" /> 実装の型に対して定義されている既定の形式を使用するには null 参照 (Visual Basic では<see cref="T:System.IFormattable" />)。</param>
        <param name="formatProvider">値を書式設定するために使用するプロバイダー。  
  
または 
オペレーティング システムの現在のロケール設定から数値形式の情報を取得するための null 参照 (Visual Basic では <see langword="Nothing" />)。</param>
        <summary>指定された書式を使用して現在のインスタンスの値を書式設定します。</summary>
        <returns>指定された書式の現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable.ToString%2A> メソッドは、値を複数の方法で表現できる文字列形式に変換します。 正確な形式は、特定のカルチャ、職業、または業界によって定義された特定の記号や指定された順序によって異なります。 メソッドは直接呼び出すことができます。 また、<xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> および <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドによって自動的に呼び出されるほか、.NET Framework の複合書式指定機能 (<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>、<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>など) を使用するメソッドによっても呼び出されます。 (詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください)。  
  
 複合書式指定メソッドは、書式指定文字列の書式指定項目ごとに <xref:System.IFormattable.ToString%2A> メソッドを1回呼び出します。 メソッドに渡されるパラメーターは、次のように、書式指定項目の内容および書式指定項目の内容に対して呼び出される特定の書式指定メソッドによって異なります。  
  
-   書式指定項目に書式文字列が含まれていない場合 (たとえば、書式項目が単に `{0}`)、<xref:System.String?displayProperty=nameWithType> パラメーターの値として `null` 渡されます。  
  
-   書式指定文字列 (`{0:G}`など) が書式設定項目に含まれている場合は、その書式文字列が <xref:System.String?displayProperty=nameWithType> パラメーターの値として渡されます。  
  
-   元のメソッド呼び出しに <xref:System.IFormatProvider?displayProperty=nameWithType> パラメーターが含まれていない場合、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> は <xref:System.IFormatProvider?displayProperty=nameWithType> パラメーターの値として渡されます。  
  
-   元のメソッドの呼び出しに <xref:System.IFormatProvider?displayProperty=nameWithType> パラメーターが含まれている場合、メソッドの呼び出しで指定されたプロバイダーは、<xref:System.IFormatProvider?displayProperty=nameWithType> パラメーターの値として渡されます。  
  
> [!NOTE]
>  オブジェクトの <xref:System.IFormattable.ToString%2A> 実装は、<xref:System.ICustomFormatter> 形式プロバイダーが渡されない場合、またはカスタム書式プロバイダーの <xref:System.ICustomFormatter.Format%2A> メソッドが `null`を返す場合にのみ、複合書式指定メソッドによって呼び出されます。  
  
 .NET Framework には、次の3つの書式プロバイダーが含まれています。これらはすべて <xref:System.IFormatProvider> インターフェイスを実装します。  
  
-   <xref:System.Globalization.NumberFormatInfo> には、小数点と桁区切り記号に使用する文字、通貨記号のスペルと位置など、数値の書式設定情報を指定します。  
  
-   <xref:System.Globalization.DateTimeFormatInfo> は、日付パターンにおける月、日、および年の位置など、日付関連および時間に関連する書式設定情報を提供します。  
  
-   <xref:System.Globalization.CultureInfo> には、数値書式情報や日付関連の書式設定情報など、特定のカルチャの既定の書式情報が含まれています。  
  
 また、独自のカスタム書式プロバイダーを定義することもできます。  
  
   
  
## Examples  
 次の例は、<xref:System.IFormattable.ToString%2A> メソッドを実装する `Temperature` クラスを示しています。 このコード例は、<xref:System.IFormattable> クラス用に用意されている大規模な例の一部です。  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> メソッドでは、"G" (general) 書式指定子をサポートする必要があります。 "G" 指定子に加えて、クラスは、サポートする書式指定子のリストを定義できます。 また、クラスは、<see langword="null" />された書式指定子を処理できるように準備する必要があります。 書式設定と書式設定のコードの詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</para></block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>
