<Type Name="AppContext" FullName="System.AppContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b4b33adbeba5ec52f9d7b4dd9a6a1db504305300" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75173611" /></Metadata><TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <TypeSignature Language="F#" Value="type AppContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f6999-101">アプリケーションのコンテキストについてのデータを設定したり取得したりするためのメンバーを提供します。</span><span class="sxs-lookup"><span data-stu-id="f6999-101">Provides members for setting and retrieving data about an application's context.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="f6999-102"><xref:System.AppContext> クラスを使用すると、ライブラリの作成者は、ユーザーに対して新しい機能のための統一されたオプトアウトメカニズムを提供できます。</span><span class="sxs-lookup"><span data-stu-id="f6999-102">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="f6999-103">これは、オプトアウト要求を伝達するために、コンポーネント間に疎結合のコントラクトを確立します。</span><span class="sxs-lookup"><span data-stu-id="f6999-103">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="f6999-104">通常、この機能は既存の機能が変更されるときに重要となります。</span><span class="sxs-lookup"><span data-stu-id="f6999-104">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="f6999-105">それに対して、新しい機能には暗黙のオプトインが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="f6999-105">Conversely, there is already an implicit opt-in for new functionality.</span></span>

## <a name="appcontext-for-library-developers"></a><span data-ttu-id="f6999-106">ライブラリ開発者のための AppContext</span><span class="sxs-lookup"><span data-stu-id="f6999-106">AppContext for library developers</span></span>
 <span data-ttu-id="f6999-107">ライブラリは、<xref:System.AppContext> クラスを使用して互換性スイッチを定義および公開します。一方、ライブラリユーザーは、これらのスイッチを設定してライブラリの動作に影響を与えることができます。</span><span class="sxs-lookup"><span data-stu-id="f6999-107">Libraries use  the <xref:System.AppContext> class to define and expose compatibility switches, while library users can set those switches to affect the library behavior.</span></span> <span data-ttu-id="f6999-108">ライブラリは、既定では新しい機能を提供し、スイッチが設定されている場合のみそれを変更する (つまり以前の機能を提供する) ことができます。</span><span class="sxs-lookup"><span data-stu-id="f6999-108">By default, libraries provide the new functionality, and they only alter it (that is, they provide the previous functionality) if the switch is set.</span></span>  <span data-ttu-id="f6999-109">これにより、ライブラリは既存の API に新しい動作を提供しながら、以前の動作に依存する呼び出し元のサポートを継続できます。</span><span class="sxs-lookup"><span data-stu-id="f6999-109">This allows libraries to provide new behavior for an existing API while continuing to support callers who depend on the previous behavior.</span></span>

### <a name="defining-the-switch-name"></a><span data-ttu-id="f6999-110">スイッチ名の定義</span><span class="sxs-lookup"><span data-stu-id="f6999-110">Defining the switch name</span></span>
 <span data-ttu-id="f6999-111">ライブラリのコンシューマーが動作の変更をオプトアウトできるようにする最も一般的な方法は、名前付きスイッチを定義することです。</span><span class="sxs-lookup"><span data-stu-id="f6999-111">The most common way to allow consumers of your library to opt out of a change of behavior is to define a named switch.</span></span>  <span data-ttu-id="f6999-112">`value` 要素は、スイッチの名前とその <xref:System.Boolean> 値で構成される名前と値のペアです。</span><span class="sxs-lookup"><span data-stu-id="f6999-112">Its `value` element is a name/value pair that consists of the name of a switch and its <xref:System.Boolean> value.</span></span>  <span data-ttu-id="f6999-113">既定では、スイッチは常に暗黙的に `false`になります。これにより新しい動作が提供され、既定では新しい動作がオプトインされます。</span><span class="sxs-lookup"><span data-stu-id="f6999-113">By default, the switch is always implicitly `false`, which provides the new behavior (and makes the new behavior opt-in by default).</span></span> <span data-ttu-id="f6999-114">スイッチを `true` に設定すると、従来の動作が提供されるようになります。</span><span class="sxs-lookup"><span data-stu-id="f6999-114">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="f6999-115">スイッチを明示的に `false` に設定すると、新しい動作も提供されます。</span><span class="sxs-lookup"><span data-stu-id="f6999-115">Explicitly setting the switch to `false` also provides the new behavior.</span></span>

 <span data-ttu-id="f6999-116">スイッチ名には、ライブラリによって公開される正式なコントラクトであるため、一貫した形式を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="f6999-116">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="f6999-117">2 つの明確な形式を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f6999-117">The following are two obvious formats.</span></span>

-   <span data-ttu-id="f6999-118">*Switch*.*namespace*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="f6999-118">*Switch*.*namespace*.*switchname*</span></span>

-   <span data-ttu-id="f6999-119">*Switch*.*library*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="f6999-119">*Switch*.*library*.*switchname*</span></span>

 <span data-ttu-id="f6999-120">スイッチを定義してドキュメント化すると、呼び出し元は、レジストリを使用して、 [\<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)要素をアプリケーション構成ファイルに追加するか、<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> メソッドをプログラムによって呼び出すことで、このスイッチを使用できます。</span><span class="sxs-lookup"><span data-stu-id="f6999-120">Once you define and document the switch, callers can use it by using the registry, by adding an  [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element to their application configuration file, or by calling the  <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method programmatically.</span></span> <span data-ttu-id="f6999-121">呼び出し元がを使用して <xref:System.AppContext> 構成スイッチの値を設定する方法の詳細については、「[ライブラリコンシューマーの Appcontext](#ForConsumers) 」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="f6999-121">See the [AppContext for library consumers](#ForConsumers) section for more information about how callers use and set the value of <xref:System.AppContext> configuration switches.</span></span>

 <span data-ttu-id="f6999-122">共通言語ランタイムがアプリケーションを実行すると、アプリケーションの <xref:System.AppContext> インスタンスを設定するために、レジストリの互換性設定が自動的に読み取られ、アプリケーション構成ファイルが読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f6999-122">When the common language runtime runs an application, it automatically reads the registry's compatibility settings and loads the application configuration file in order to populate the application's <xref:System.AppContext> instance.</span></span> <span data-ttu-id="f6999-123"><xref:System.AppContext> インスタンスは、呼び出し元またはランタイムによってプログラムによって設定されるので、<xref:System.AppContext> インスタンスを構成するために、<xref:System.AppContext.SetSwitch%2A> メソッドの呼び出しなどの操作を行う必要はありません。</span><span class="sxs-lookup"><span data-stu-id="f6999-123">Because the <xref:System.AppContext> instance is populated either programmatically by the caller or by the runtime, you do not have to take any action, such as calling the <xref:System.AppContext.SetSwitch%2A> method,  to configure the <xref:System.AppContext> instance.</span></span>

### <a name="checking-the-setting"></a><span data-ttu-id="f6999-124">設定を確認しています</span><span class="sxs-lookup"><span data-stu-id="f6999-124">Checking the setting</span></span>
 <span data-ttu-id="f6999-125">その後、コンシューマーがスイッチの値を宣言したかどうかを確認し、<xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> メソッドを呼び出すことによって適切に動作させることができます。</span><span class="sxs-lookup"><span data-stu-id="f6999-125">You can then check if a consumer has declared the value of the switch and act appropriately by calling the <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="f6999-126">メソッドは、`switchName` 引数が見つかった場合に `true` を返します。メソッドから制御が戻ったときに、その `isEnabled` 引数はスイッチの値を示します。</span><span class="sxs-lookup"><span data-stu-id="f6999-126">The method returns `true` if the `switchName` argument is found, and when the method returns, its `isEnabled` argument indicates the value of the switch.</span></span>  <span data-ttu-id="f6999-127">それ以外の場合、メソッドは `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="f6999-127">Otherwise, the method returns `false`.</span></span>

### <a name="an-example"></a><span data-ttu-id="f6999-128">使用例</span><span class="sxs-lookup"><span data-stu-id="f6999-128">An example</span></span>
 <span data-ttu-id="f6999-129">次の例は、<xref:System.AppContext> クラスを使用して、顧客がライブラリメソッドの元の動作を選択できるようにする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f6999-129">The following example illustrates the use of the <xref:System.AppContext> class to allow the customer to choose the original behavior of a library method.</span></span>   <span data-ttu-id="f6999-130">`StringLibrary`という名前のライブラリのバージョン1.0 を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f6999-130">The following is version 1.0 of a library named `StringLibrary`.</span></span> <span data-ttu-id="f6999-131">これは、序数による比較を実行して、より大きな文字列内の部分文字列の開始インデックスを決定する `SubstringStartsAt` メソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="f6999-131">It defines a `SubstringStartsAt` method that performs an ordinal comparison to determine the starting index of a substring within a larger string.</span></span>

 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]

 <span data-ttu-id="f6999-132">次の例では、ライブラリを使用して、"the archaeologist" の部分文字列 "arch æ" の開始インデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="f6999-132">The following example then uses the library to find the starting index of the substring "archæ" in "The archaeologist".</span></span> <span data-ttu-id="f6999-133">メソッドは序数による比較を実行するため、部分文字列は見つかりません。</span><span class="sxs-lookup"><span data-stu-id="f6999-133">Because the method performs an ordinal comparison, the substring cannot be found.</span></span>

 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]

 <span data-ttu-id="f6999-134">ただし、ライブラリのバージョン2では、カルチャに依存した比較を使用するように `SubstringStartsAt` メソッドを変更します。</span><span class="sxs-lookup"><span data-stu-id="f6999-134">Version 2 of the library, however, changes the `SubstringStartsAt` method to use culture-sensitive comparison.</span></span>

 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]

 <span data-ttu-id="f6999-135">新しいバージョンのライブラリに対して実行するようにアプリを再コンパイルすると、"the archaeologist" のインデックス4に部分文字列 "arch æ" があることが報告されるようになりました。</span><span class="sxs-lookup"><span data-stu-id="f6999-135">When the app is recompiled to run against the new version of the library, it now reports that the substring "archæ" is found at index 4 in "The archaeologist".</span></span>

 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]

 <span data-ttu-id="f6999-136">この変更は、 [\<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)スイッチを定義することによって、元の動作に依存するアプリケーションを中断することを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="f6999-136">This change can be prevented from breaking the applications that depend on the original behavior by defining an [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) switch.</span></span> <span data-ttu-id="f6999-137">この場合、スイッチには `StringLibrary.DoNotUseCultureSensitiveComparison`という名前が付けられます。</span><span class="sxs-lookup"><span data-stu-id="f6999-137">In this case, the switch is named `StringLibrary.DoNotUseCultureSensitiveComparison`.</span></span> <span data-ttu-id="f6999-138">既定値の `false`は、ライブラリがバージョン2.0 のカルチャに依存した比較を実行する必要があることを示します。</span><span class="sxs-lookup"><span data-stu-id="f6999-138">Its default value, `false`, indicates that the library should perform its version 2.0 culture-sensitive comparison.</span></span> <span data-ttu-id="f6999-139">`true` は、ライブラリがバージョン1.0 の序数比較を実行する必要があることを示します。</span><span class="sxs-lookup"><span data-stu-id="f6999-139">`true` indicates that the library should perform its version 1.0 ordinal comparison.</span></span>  <span data-ttu-id="f6999-140">前のコードを少し変更することで、ライブラリコンシューマーはスイッチを設定して、メソッドが実行する比較の種類を決定できます。</span><span class="sxs-lookup"><span data-stu-id="f6999-140">A slight modification of the previous code allows the library consumer to set the switch to determine the kind of comparison the method performs.</span></span>

 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]

 <span data-ttu-id="f6999-141">アプリケーションで次の構成ファイルを使用して、バージョン1.0 の動作を復元できる場合。</span><span class="sxs-lookup"><span data-stu-id="f6999-141">If application can then use the following configuration file to restore the version 1.0 behavior.</span></span>

```xml

<configuration>
   <runtime>
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />
   </runtime>
</configuration>

```

 <span data-ttu-id="f6999-142">構成ファイルが存在するアプリケーションを実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="f6999-142">When the application is run with the configuration file present, it produces the following output:</span></span>

```
'archæ' not found in 'The archaeologist'
```

<a name="ForConsumers"></a>
## <a name="appcontext-for-library-consumers"></a><span data-ttu-id="f6999-143">ライブラリコンシューマーの AppContext</span><span class="sxs-lookup"><span data-stu-id="f6999-143">AppContext for library consumers</span></span>
 <span data-ttu-id="f6999-144">ライブラリのコンシューマーの場合、<xref:System.AppContext> クラスを使用すると、ライブラリまたはライブラリのメソッドのオプトアウトメカニズムを利用して新しい機能を利用できます。</span><span class="sxs-lookup"><span data-stu-id="f6999-144">If you are the consumer of a library, the <xref:System.AppContext> class  allows you to take advantage of a library or library method's opt-out mechanism for new functionality.</span></span>   <span data-ttu-id="f6999-145">呼び出し元のクラスライブラリの個々のメソッドは、新しい動作を有効または無効にする特定のスイッチを定義します。</span><span class="sxs-lookup"><span data-stu-id="f6999-145">Individual methods of the class library that you are calling define particular switches that enable or disable a new behavior.</span></span> <span data-ttu-id="f6999-146">スイッチの値はブール値です。</span><span class="sxs-lookup"><span data-stu-id="f6999-146">The value of the switch  is a Boolean.</span></span> <span data-ttu-id="f6999-147">`false`の場合 (通常は既定値)、新しい動作が有効になります。`true`の場合、新しい動作は無効になり、メンバーは以前と同じように動作します。</span><span class="sxs-lookup"><span data-stu-id="f6999-147">If it is `false`, which is typically the default value, the new behavior is enabled; if it is `true`, the new behavior is disabled, and the member behaves as it did previously.</span></span>

 <span data-ttu-id="f6999-148">スイッチの値は、次の4つの方法のいずれかで設定できます。</span><span class="sxs-lookup"><span data-stu-id="f6999-148">You can set the value of a switch in one of four ways:</span></span>

-   <span data-ttu-id="f6999-149">コード内で <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="f6999-149">By calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method in your code.</span></span>  <span data-ttu-id="f6999-150">`switchName` 引数はスイッチ名を定義し、`isEnabled` プロパティはスイッチの値を定義します。</span><span class="sxs-lookup"><span data-stu-id="f6999-150">The `switchName` argument defines the switch name, and the `isEnabled` property defines the value of the switch.</span></span> <span data-ttu-id="f6999-151"><xref:System.AppContext> は静的クラスであるため、アプリケーションドメインごとに使用できます。</span><span class="sxs-lookup"><span data-stu-id="f6999-151">Because <xref:System.AppContext> is a static class, it is available on a per-application domain basis.</span></span>

     <span data-ttu-id="f6999-152"><xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> の呼び出しにはアプリケーションスコープがあります。つまり、アプリケーションにのみ影響します。</span><span class="sxs-lookup"><span data-stu-id="f6999-152">Calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> has application scope; that is, it affects only the application.</span></span>

-   <span data-ttu-id="f6999-153">App.config ファイルの[\<ランタイム >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)セクションに `<AppContextSwitchOverrides>` 要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="f6999-153">By adding an `<AppContextSwitchOverrides>` element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your app.config file.</span></span> <span data-ttu-id="f6999-154">スイッチには、`value`という1つの属性があります。値は、スイッチ名とその値の両方を含むキーと値のペアを表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="f6999-154">The switch has a single attribute, `value`, whose value is a string that represents a key/value pair containing both the switch name and its value.</span></span>

     <span data-ttu-id="f6999-155">複数のスイッチを定義するには、 [\<AppContextSwitchOverrides](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)各スイッチのキーと値のペアを区別し、> 要素の `value` 属性をセミコロンで区切ります。</span><span class="sxs-lookup"><span data-stu-id="f6999-155">To define multiple switches, separate each switch's key/value pair in the [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element's `value` attribute with a semicolon.</span></span> <span data-ttu-id="f6999-156">この場合、`<AppContextSwitchOverrides>` 要素の形式は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="f6999-156">In that case, the `<AppContextSwitchOverrides>` element has the following format:</span></span>

    ```xml
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />
    ```

     <span data-ttu-id="f6999-157">`<AppContextSwitchOverrides>` 要素を使用して構成設定を定義するには、アプリケーションスコープを使用します。つまり、アプリケーションにのみ影響します。</span><span class="sxs-lookup"><span data-stu-id="f6999-157">Using the `<AppContextSwitchOverrides>` element to define a configuration setting has application scope; that is, it affects only the application.</span></span>

    > [!NOTE]
    > <span data-ttu-id="f6999-158">.NET Framework によって定義されるスイッチの詳細については、 [\<AppContextSwitchOverrides > 要素](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f6999-158">For information on the switches defined by the .NET Framework, see the [\<AppContextSwitchOverrides> element](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md).</span></span>

-   <span data-ttu-id="f6999-159">名前がレジストリの `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` キーへのスイッチの名前である文字列値を追加します。</span><span class="sxs-lookup"><span data-stu-id="f6999-159">By adding a string value whose name is the name of the switch to the `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` key in the registry.</span></span> <span data-ttu-id="f6999-160">この値は、<xref:System.Boolean.Parse%2A?displayProperty=nameWithType> メソッドで解析できる <xref:System.Boolean> の文字列表現である必要があります。つまり、"True"、"true"、"False"、または "false" である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f6999-160">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span> <span data-ttu-id="f6999-161">ランタイムがその他の値を検出した場合、スイッチは無視されます。</span><span class="sxs-lookup"><span data-stu-id="f6999-161">If the runtime encounters any other value, it ignores the switch.</span></span>

     <span data-ttu-id="f6999-162">レジストリを使用して <xref:System.AppContext> スイッチを定義するには、コンピューターのスコープが必要です。つまり、コンピューター上で実行されているすべてのアプリケーションに影響します。</span><span class="sxs-lookup"><span data-stu-id="f6999-162">Using the registry to define an <xref:System.AppContext> switch has machine scope; that is, it affects every application running on the machine.</span></span>

- <span data-ttu-id="f6999-163">ASP.NET アプリケーションの場合は、web.config ファイルの[\<appSettings >](~/docs/framework/configure-apps/file-schema/appsettings/index.md)セクションに > 要素を[追加\<](~/docs/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings.md)を追加します。</span><span class="sxs-lookup"><span data-stu-id="f6999-163">For ASP.NET applications, you add an [\<Add>](~/docs/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings.md) element to the [\<appSettings>](~/docs/framework/configure-apps/file-schema/appsettings/index.md) section of the web.config file.</span></span> <span data-ttu-id="f6999-164">例 :</span><span class="sxs-lookup"><span data-stu-id="f6999-164">For example:</span></span>

   ```xml
   <appSettings>
      <add key="AppContext.SetSwitch:switchName1" value="switchValue1" />
      <add key="AppContext.SetSwitch:switchName2" value="switchValue2" />
   </appSettings>
   ```

 <span data-ttu-id="f6999-165">同じスイッチを複数の方法で設定した場合、他の設定をオーバーライドする設定を決定する優先順位は次のようになります。</span><span class="sxs-lookup"><span data-stu-id="f6999-165">If you set the same switch in more than one way, the order of precedence for determining which setting overrides the others is:</span></span>

1.  <span data-ttu-id="f6999-166">プログラム設定。</span><span class="sxs-lookup"><span data-stu-id="f6999-166">The programmatic setting.</span></span>

2.  <span data-ttu-id="f6999-167">アプリ構成ファイルまたは web.config ファイル内の設定。</span><span class="sxs-lookup"><span data-stu-id="f6999-167">The setting in the app config file or the web.config file.</span></span>

3.  <span data-ttu-id="f6999-168">レジストリ設定です。</span><span class="sxs-lookup"><span data-stu-id="f6999-168">The registry setting.</span></span>

 <span data-ttu-id="f6999-169">ファイルの URI を <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> メソッドに渡す単純なアプリケーションを次に示します。</span><span class="sxs-lookup"><span data-stu-id="f6999-169">The following is a simple application that passes a file URI to the <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="f6999-170">.NET Framework 4.6 で実行すると、`file://` がファイルパスの有効な部分ではなくなったため、<xref:System.ArgumentException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f6999-170">When run under the .NET Framework 4.6, it throws an <xref:System.ArgumentException> because `file://` is no longer a valid part of a file path.</span></span>

 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]

 <span data-ttu-id="f6999-171">メソッドの以前の動作を復元し、例外を回避するには、次の例のように、アプリケーション構成ファイルに `Switch.System.IO.UseLegacyPathHandling` スイッチを追加します。</span><span class="sxs-lookup"><span data-stu-id="f6999-171">To restore the method's previous behavior and prevent the exception, you can add the `Switch.System.IO.UseLegacyPathHandling` switch to the application configuration file for the example:</span></span>

```xml
<configuration>
    <runtime>
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />
    </runtime>
</configuration>
```
## <a name="see-also"></a><span data-ttu-id="f6999-172">参照</span><span class="sxs-lookup"><span data-stu-id="f6999-172">See also</span></span>
[<span data-ttu-id="f6999-173">AppContext スイッチ</span><span class="sxs-lookup"><span data-stu-id="f6999-173">AppContext switch</span></span>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)

 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/1eb2fae3-de4b-45b6-852f-517c39b751bd"><span data-ttu-id="f6999-174">&lt;ランタイム&gt; 要素</span><span class="sxs-lookup"><span data-stu-id="f6999-174">&lt;runtime&gt; Element</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/4ce07f47-7ddb-4d91-b067-501bd8b88752"><span data-ttu-id="f6999-175">&lt;AppContextSwitchOverrides&gt; 要素</span><span class="sxs-lookup"><span data-stu-id="f6999-175">&lt;AppContextSwitchOverrides&gt; Element</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppContext.BaseDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6999-176">アセンブリを探すためにアセンブリ リゾルバーが使用するベース ディレクトリのパス名を取得します。</span><span class="sxs-lookup"><span data-stu-id="f6999-176">Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies.</span></span></summary>
        <value><span data-ttu-id="f6999-177">アセンブリを探すためにアセンブリ リゾルバーが使用するベース ディレクトリのパス名。</span><span class="sxs-lookup"><span data-stu-id="f6999-177">the pathname of the base directory that the assembly resolver uses to probe for assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="f6999-178">これは、アプリケーションドメインごとのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="f6999-178">This is a per application domain property.</span></span> <span data-ttu-id="f6999-179">この値は、現在のアプリケーションドメインの <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> プロパティに対応します。</span><span class="sxs-lookup"><span data-stu-id="f6999-179">Its value corresponds to the <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> property of the current application domain.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetData : string -&gt; obj" Usage="System.AppContext.GetData name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="f6999-180">データ要素の名前。</span><span class="sxs-lookup"><span data-stu-id="f6999-180">The name of the data element.</span></span></param>
        <summary><span data-ttu-id="f6999-181">現在のアプリケーション ドメインに割り当てられている名前付きデータ要素の値を返します。</span><span class="sxs-lookup"><span data-stu-id="f6999-181">Returns the value of the named data element assigned to the current application domain.</span></span></summary>
        <returns><span data-ttu-id="f6999-182"><paramref name="name" /> が名前付きの値を識別する場合は <paramref name="name" /> の値。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6999-182">The value of <paramref name="name" />, if <paramref name="name" /> identifies a named value; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberSignature Language="F#" Value="static member SetSwitch : string * bool -&gt; unit" Usage="System.AppContext.SetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName"><span data-ttu-id="f6999-183">スイッチの名前。</span><span class="sxs-lookup"><span data-stu-id="f6999-183">The name of the switch.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="f6999-184">スイッチの値です。</span><span class="sxs-lookup"><span data-stu-id="f6999-184">The value of the switch.</span></span></param>
        <summary><span data-ttu-id="f6999-185">スイッチの値を設定します。</span><span class="sxs-lookup"><span data-stu-id="f6999-185">Sets the value of a switch.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="f6999-186"><xref:System.AppContext> クラスを使用すると、ライブラリの作成者は、ユーザーに対して新しい機能のための統一されたオプトアウトメカニズムを提供できます。</span><span class="sxs-lookup"><span data-stu-id="f6999-186">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="f6999-187">これは、オプトアウト要求を伝達するために、コンポーネント間に疎結合のコントラクトを確立します。</span><span class="sxs-lookup"><span data-stu-id="f6999-187">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="f6999-188">通常、この機能は既存の機能が変更されるときに重要となります。</span><span class="sxs-lookup"><span data-stu-id="f6999-188">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="f6999-189">それに対して、新しい機能には暗黙のオプトインが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="f6999-189">Conversely, there is already an implicit opt-in for new functionality.</span></span>

 <span data-ttu-id="f6999-190"><xref:System.AppContext.SetSwitch%2A> メソッドは、依存ライブラリによって定義されるスイッチ (常に <xref:System.Boolean> 値) の値を宣言するために、アプリケーション (またはライブラリ) によって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f6999-190">The <xref:System.AppContext.SetSwitch%2A> method is called by an application (or a library) to declare the value of a switch (which is always a <xref:System.Boolean> value) that a dependent library defines.</span></span> <span data-ttu-id="f6999-191">スイッチは常に暗黙的に `false`になり、新しい動作が提供されます。</span><span class="sxs-lookup"><span data-stu-id="f6999-191">The switch is always implicitly `false`, which provides the new behavior.</span></span> <span data-ttu-id="f6999-192">スイッチを `true` に設定すると、従来の動作が提供されるようになります。</span><span class="sxs-lookup"><span data-stu-id="f6999-192">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="f6999-193">スイッチを明示的に `false` に設定すると、新しい動作も提供されます。</span><span class="sxs-lookup"><span data-stu-id="f6999-193">Explicitly setting the switch to `false` also provides the new behavior.</span></span> <span data-ttu-id="f6999-194">その後、依存ライブラリは、<xref:System.AppContext.TryGetSwitch%2A> メソッドを呼び出すことによって、スイッチの値を確認できます。</span><span class="sxs-lookup"><span data-stu-id="f6999-194">The dependent library can then check the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>

> [!NOTE]
> <span data-ttu-id="f6999-195">スイッチ名には、ライブラリによって公開される正式なコントラクトであるため、一貫した形式を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="f6999-195">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="f6999-196">2 つの明確な形式を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f6999-196">The following are two obvious formats.</span></span>
>
> -   <span data-ttu-id="f6999-197">*Switch*.*namespace*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="f6999-197">*Switch*.*namespace*.*switchname*</span></span>
> -   <span data-ttu-id="f6999-198">*Switch*.*library*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="f6999-198">*Switch*.*library*.*switchname*</span></span>

 <span data-ttu-id="f6999-199">.NET Framework で実行されているアプリケーションでは、スイッチの値をプログラムで設定するだけでなく、次のように設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="f6999-199">For applications running on the .NET Framework, in addition to setting the value of a switch programmatically, it can also be set:</span></span>

-   <span data-ttu-id="f6999-200">スイッチの名前と値を[\<AppContextSwitchOverrides](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)に追加することにより、アプリケーション構成ファイルの[\<ランタイム >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)セクションの > 要素をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="f6999-200">By adding the switch name and value to the [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element in the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of an application configuration file.</span></span> <span data-ttu-id="f6999-201">たとえば、次の例では、値が `False``Libraries.FPLibrary.UseExactFloatingPointComparison` という名前のスイッチを定義しています。</span><span class="sxs-lookup"><span data-stu-id="f6999-201">For example, the following defines a switch named `Libraries.FPLibrary.UseExactFloatingPointComparison` whose value is `False`.</span></span>

    ```xml

    <configuration>
       <runtime>
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />
       </runtime>
    </configuration>

    ```

-   <span data-ttu-id="f6999-202">名前がレジストリの `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` キーへのスイッチの名前である文字列値を追加します。</span><span class="sxs-lookup"><span data-stu-id="f6999-202">By adding a string value whose name is the name of the switch to the `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` key in the registry.</span></span> <span data-ttu-id="f6999-203">この値は、<xref:System.Boolean.Parse%2A?displayProperty=nameWithType> メソッドで解析できる <xref:System.Boolean> の文字列表現である必要があります。つまり、"True"、"true"、"False"、または "false" である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f6999-203">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span>

 <span data-ttu-id="f6999-204">`switchName` 既に存在する場合、その値は `isEnabled` 引数によって上書きされます。</span><span class="sxs-lookup"><span data-stu-id="f6999-204">If `switchName` already exists, its value is overwritten by the `isEnabled` argument.</span></span>  <span data-ttu-id="f6999-205">つまり、<xref:System.AppContext.SetSwitch%2A> メソッドの最新の呼び出しは、レジストリ、アプリ構成ファイル、または <xref:System.AppContext.SetSwitch%2A> メソッドの以前の呼び出しで定義された値をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="f6999-205">That is, the most recent call to the <xref:System.AppContext.SetSwitch%2A> method overrides the value defined in the registry, in an app configuration file, or by previous calls to the <xref:System.AppContext.SetSwitch%2A> method.</span></span>

 ### <a name="appcontextsetswitch-and-net-core"></a><span data-ttu-id="f6999-206">AppContext. SetSwitch と .NET Core</span><span class="sxs-lookup"><span data-stu-id="f6999-206">AppContext.SetSwitch and .NET Core</span></span>

<span data-ttu-id="f6999-207">.NET Core では、<xref:System.AppContext.SetSwitch%2A> メソッドを使用したプログラム呼び出しのみがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="f6999-207">.NET Core supports programmatic calls with the <xref:System.AppContext.SetSwitch%2A> method only.</span></span> <span data-ttu-id="f6999-208">次のスイッチがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="f6999-208">The following switches are supported:</span></span>

|<span data-ttu-id="f6999-209">切り替え</span><span class="sxs-lookup"><span data-stu-id="f6999-209">Switch</span></span>|<span data-ttu-id="f6999-210">値</span><span class="sxs-lookup"><span data-stu-id="f6999-210">Values</span></span>|<span data-ttu-id="f6999-211">説明</span><span class="sxs-lookup"><span data-stu-id="f6999-211">Description</span></span>|
|--|--|--|
|`System.Net.Http.SocketsHttpHandler.Http2Support`|<span data-ttu-id="f6999-212">`true` または `false`</span><span class="sxs-lookup"><span data-stu-id="f6999-212">`true` or `false`</span></span>|<span data-ttu-id="f6999-213">HTTP/2 プロトコルのサポートが有効かどうかを示します (`true`) または無効 (`false`)。</span><span class="sxs-lookup"><span data-stu-id="f6999-213">Indicates whether support for the HTTP/2 protocol is enabled (`true`) or disabled (`false`).</span></span> <span data-ttu-id="f6999-214">既定値は無効です。</span><span class="sxs-lookup"><span data-stu-id="f6999-214">The default is disabled.</span></span> <span data-ttu-id="f6999-215">最初に <xref:System.Net.Http.HttpClient>を使用する前に、スイッチを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f6999-215">The switch must be set before the first use of <xref:System.Net.Http.HttpClient>.</span></span> <span data-ttu-id="f6999-216">.NET Core 3.0 Preview 4 以降で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f6999-216">Available starting with .NET Core 3.0 Preview 4.</span></span>|
|`System.Net.Http.UseSocketsHttpHandler` |<span data-ttu-id="f6999-217">`true` または `false`</span><span class="sxs-lookup"><span data-stu-id="f6999-217">`true` or `false`</span></span>|<span data-ttu-id="f6999-218"><xref:System.Net.Http.HttpClient> などの高レベルのネットワーク Api が <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) または <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`) を使用するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="f6999-218">Determines whether high-level networking APIs such as <xref:System.Net.Http.HttpClient> use <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) or <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`).</span></span>|

## Examples
 <span data-ttu-id="f6999-219">次のコード行では、`Switch.AmazingLib.ThrowOnException` という名前のスイッチを `true`に設定します。これにより、従来の動作が有効になります。</span><span class="sxs-lookup"><span data-stu-id="f6999-219">The following line of code sets a switch named `Switch.AmazingLib.ThrowOnException` to `true`, which enables a legacy behavior.</span></span> <span data-ttu-id="f6999-220">ライブラリは、<xref:System.AppContext.TryGetSwitch%2A> メソッドを呼び出すことによって、ライブラリコンシューマーがスイッチの値を設定したかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="f6999-220">The library can then check whether a library consumer has set the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>

 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6999-221"><paramref name="switchName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f6999-221"><paramref name="switchName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f6999-222"><paramref name="switchName" /> は <see cref="F:System.String.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="f6999-222"><paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetFrameworkName : string" Usage="System.AppContext.TargetFrameworkName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6999-223">現在のアプリケーションの対象となるフレームワークのバージョンの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="f6999-223">Gets the name of the framework version targeted by the current application.</span></span></summary>
        <value><span data-ttu-id="f6999-224">現在のアプリケーションの対象となるフレームワークのバージョンの名前。</span><span class="sxs-lookup"><span data-stu-id="f6999-224">The name of the framework version targeted by the current application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="f6999-225">ターゲットフレームワークのバージョンの名前は、<xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> プロパティの値に対応します。</span><span class="sxs-lookup"><span data-stu-id="f6999-225">The name of the target framework version corresponds to the value of the <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="f6999-226">.NET Framework のターゲットフレームワーク名の一覧については、「 [&lt;supportedRuntime&gt; 要素](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md)要素」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f6999-226">For a list of target framework names for the .NET Framework, see the [&lt;supportedRuntime&gt; Element](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md) element.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberSignature Language="F#" Value="static member TryGetSwitch : string * bool -&gt; bool" Usage="System.AppContext.TryGetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName"><span data-ttu-id="f6999-227">スイッチの名前。</span><span class="sxs-lookup"><span data-stu-id="f6999-227">The name of the switch.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="f6999-228">このメソッドが返されるときに <paramref name="switchName" /> が見つかった場合、<paramref name="switchName" /> の値が含まれます。<see langword="false" /> が見つからなかった場合は <paramref name="switchName" />。</span><span class="sxs-lookup"><span data-stu-id="f6999-228">When this method returns, contains the value of <paramref name="switchName" /> if <paramref name="switchName" /> was found, or <see langword="false" /> if <paramref name="switchName" /> was not found.</span></span> <span data-ttu-id="f6999-229">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="f6999-229">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="f6999-230">スイッチの値の取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="f6999-230">Tries to get the value of a switch.</span></span></summary>
        <returns><span data-ttu-id="f6999-231"><see langword="true" /> が設定され、<paramref name="switchName" /> の引数にスイッチの値が含まれている場合は <paramref name="isEnabled" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f6999-231"><see langword="true" /> if <paramref name="switchName" /> was set and the <paramref name="isEnabled" /> argument contains the value of the switch; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="f6999-232"><xref:System.AppContext> クラスを使用すると、ライブラリの作成者は、ユーザーに対して新しい機能のための統一されたオプトアウトメカニズムを提供できます。</span><span class="sxs-lookup"><span data-stu-id="f6999-232">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="f6999-233">これは、オプトアウト要求を伝達するために、コンポーネント間に疎結合のコントラクトを確立します。</span><span class="sxs-lookup"><span data-stu-id="f6999-233">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="f6999-234">通常、この機能は既存の機能が変更されるときに重要となります。</span><span class="sxs-lookup"><span data-stu-id="f6999-234">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="f6999-235">それに対して、新しい機能には暗黙のオプトインが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="f6999-235">Conversely, there is already an implicit opt-in for new functionality.</span></span>

 <span data-ttu-id="f6999-236">共通言語ランタイムは、レジストリとアプリケーションの構成ファイルを読み取って、<xref:System.AppContext> インスタンスに割り当てられたスイッチを自動的に設定します。</span><span class="sxs-lookup"><span data-stu-id="f6999-236">The common language runtime automatically populates the switches assigned to an <xref:System.AppContext> instance by reading the registry and the application's configuration file.</span></span> <span data-ttu-id="f6999-237">その後、これらのスイッチの値をオーバーライドし、新しいスイッチを追加して、<xref:System.AppContext.SetSwitch%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="f6999-237">The value of these switches can then be overridden, and new switches added, by calling the <xref:System.AppContext.SetSwitch%2A> method.</span></span>

 <span data-ttu-id="f6999-238">ライブラリは <xref:System.AppContext.TryGetSwitch%2A> メソッドを呼び出して、そのコンシューマーがスイッチの値を宣言したかどうかを確認し、適切に操作します。</span><span class="sxs-lookup"><span data-stu-id="f6999-238">A library calls the <xref:System.AppContext.TryGetSwitch%2A> method to check whether its consumers have declared the value of the switch and then act appropriately on it.</span></span>  <span data-ttu-id="f6999-239">既定では、スイッチが定義されていない場合は、新しい機能が有効になります。</span><span class="sxs-lookup"><span data-stu-id="f6999-239">By default, if the switch is not defined, the new functionality is enabled..</span></span> <span data-ttu-id="f6999-240">スイッチが定義されていて、その値が `false`である場合は、新しい機能も有効になります。</span><span class="sxs-lookup"><span data-stu-id="f6999-240">If the switch is defined and its value is `false`, the new functionality is also enabled.</span></span> <span data-ttu-id="f6999-241">値が `true`場合は、従来の動作が有効になります。</span><span class="sxs-lookup"><span data-stu-id="f6999-241">If its value is `true`, the legacy behavior is enabled.</span></span>



## Examples
 <span data-ttu-id="f6999-242">次の例では、ライブラリコンシューマーが `Switch.AmazingLib.ThrowOnException`という名前のスイッチを設定しているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="f6999-242">The following example determines whether a library consumer has set a switch named `Switch.AmazingLib.ThrowOnException`.</span></span>

 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6999-243"><paramref name="switchName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f6999-243"><paramref name="switchName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f6999-244"><paramref name="switchName" /> は <see cref="F:System.String.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="f6999-244"><paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>
