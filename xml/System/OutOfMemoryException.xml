<Type Name="OutOfMemoryException" FullName="System.OutOfMemoryException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed76cddb06fa1c84c76873730a96484921bf6cc4" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78682724" /></Metadata><TypeSignature Language="C#" Value="public class OutOfMemoryException : Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OutOfMemoryException extends System.Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.OutOfMemoryException" />
  <TypeSignature Language="VB.NET" Value="Public Class OutOfMemoryException&#xA;Inherits Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutOfMemoryException : Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type OutOfMemoryException = class&#xA;    inherit Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public class OutOfMemoryException : SystemException" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OutOfMemoryException extends System.SystemException" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Class OutOfMemoryException&#xA;Inherits SystemException" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutOfMemoryException : SystemException" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type OutOfMemoryException = class&#xA;    inherit SystemException" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit OutOfMemoryException extends System.SystemException" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d269f-101">プログラムの実行を継続するためのメモリが不足している場合にスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="d269f-101">The exception that is thrown when there is not enough memory to continue the execution of a program.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="d269f-102"><xref:System.OutOfMemoryException> は、値が0x8007000E の HRESULT `COR_E_OUTOFMEMORY`を使用します。</span><span class="sxs-lookup"><span data-stu-id="d269f-102"><xref:System.OutOfMemoryException> uses the HRESULT `COR_E_OUTOFMEMORY`, which has the value 0x8007000E.</span></span>  
  
<span data-ttu-id="d269f-103"><xref:System.OutOfMemoryException>インスタンスの初期プロパティ値の一覧については、<xref:System.OutOfMemoryException.%23ctor%2A>コンストラクターを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d269f-103">For a list of initial property values for an instance of <xref:System.OutOfMemoryException>, see the <xref:System.OutOfMemoryException.%23ctor%2A> constructors.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d269f-104">継承された <xref:System.Exception.Data%2A> プロパティの値は常に `null`です。</span><span class="sxs-lookup"><span data-stu-id="d269f-104">The value of the inherited <xref:System.Exception.Data%2A> property is always `null`.</span></span>  
  
<span data-ttu-id="d269f-105"><xref:System.OutOfMemoryException> 例外には、次の2つの主要な原因があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-105">An <xref:System.OutOfMemoryException> exception has two major causes:</span></span>  
  
-   <span data-ttu-id="d269f-106"><xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> プロパティで定義されている長さを超えて <xref:System.Text.StringBuilder> オブジェクトを展開しようとしています。</span><span class="sxs-lookup"><span data-stu-id="d269f-106">You are attempting to expand a <xref:System.Text.StringBuilder> object beyond the length defined by its <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="d269f-107">共通言語ランタイムは、操作を正常に実行するために十分な連続メモリを割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="d269f-107">The common language runtime cannot allocate enough contiguous memory to successfully perform an operation.</span></span> <span data-ttu-id="d269f-108">この例外は、メモリの割り当てを必要とするプロパティの割り当てまたはメソッドの呼び出しによってスローされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-108">This exception can be thrown by any property assignment or method call that requires a memory allocation.</span></span> <span data-ttu-id="d269f-109"><xref:System.OutOfMemoryException> 例外の原因の詳細については、ブログの[「メモリ不足」によって物理メモリが参照されていないこと](https://docs.microsoft.com/archive/blogs/ericlippert/out-of-memory-does-not-refer-to-physical-memory)を確認してください。</span><span class="sxs-lookup"><span data-stu-id="d269f-109">For more information on the cause of the <xref:System.OutOfMemoryException> exception, see the blog post ["Out of Memory" Does Not Refer to Physical Memory](https://docs.microsoft.com/archive/blogs/ericlippert/out-of-memory-does-not-refer-to-physical-memory).</span></span>  
  
     <span data-ttu-id="d269f-110">この種類の <xref:System.OutOfMemoryException> 例外は、致命的なエラーを表します。</span><span class="sxs-lookup"><span data-stu-id="d269f-110">This type of <xref:System.OutOfMemoryException> exception represents a catastrophic failure.</span></span> <span data-ttu-id="d269f-111">例外を処理する場合は、次の例のように、<xref:System.Environment.FailFast%2A?displayProperty=nameWithType> メソッドを呼び出してアプリを終了し、システムイベントログにエントリを追加する `catch` ブロックを含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-111">If you choose to handle the exception, you should include a `catch` block that calls the <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> method to terminate your app and add an entry to the system event log, as the following example does.</span></span>  
  
     [!code-csharp[System.OutOfMemoryException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/failfast1.cs#2)]
     [!code-vb[System.OutOfMemoryException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/failfast1.vb#2)]  
  
 <span data-ttu-id="d269f-112">例外がスローされるいくつかの条件と、それを排除するために実行できるアクションを次に示します。</span><span class="sxs-lookup"><span data-stu-id="d269f-112">Some of the conditions under which the exception is thrown and the actions you can take to eliminate it include the following:</span></span>  
  
<span data-ttu-id="d269f-113">**<xref:System.Text.StringBuilder.Insert%2A?displayProperty=nameWithType> メソッドを呼び出しています。**</span><span class="sxs-lookup"><span data-stu-id="d269f-113">**You are calling the <xref:System.Text.StringBuilder.Insert%2A?displayProperty=nameWithType> method.**</span></span>  

<span data-ttu-id="d269f-114"><xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> プロパティによって指定されたサイズを超えて <xref:System.Text.StringBuilder> オブジェクトの長さを増やしようとしています。</span><span class="sxs-lookup"><span data-stu-id="d269f-114">You are attempting to increase the length of a <xref:System.Text.StringBuilder> object beyond the size specified by its <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d269f-115">次の例は、<xref:System.Text.StringBuilder.Insert%28System.Int32%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> メソッドの呼び出しによってスローされる <xref:System.OutOfMemoryException> 例外を示しています。この例では、オブジェクトの <xref:System.Text.StringBuilder.Length%2A> プロパティの最大容量を超える文字列を挿入しようとした場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="d269f-115">The following example illustrates the <xref:System.OutOfMemoryException> exception thrown by a call to the <xref:System.Text.StringBuilder.Insert%28System.Int32%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> method when the example tries to insert a string that would cause the object's <xref:System.Text.StringBuilder.Length%2A> property to exceed its maximum capacity.</span></span>  
  
[!code-csharp[System.OutOfMemoryException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/sb_example1.cs#1)]
[!code-vb[System.OutOfMemoryException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/sb_example1.vb#1)]  
  
<span data-ttu-id="d269f-116">エラーを解決するには、次のいずれかを実行します。</span><span class="sxs-lookup"><span data-stu-id="d269f-116">You can do either of the following to address the error:</span></span>  
  
-   <span data-ttu-id="d269f-117"><xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> コンストラクターへの呼び出しを、他の <xref:System.Text.StringBuilder> コンストラクターオーバーロードの呼び出しに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="d269f-117">Replace the call to the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> constructor with a call any other <xref:System.Text.StringBuilder> constructor overload.</span></span> <span data-ttu-id="d269f-118"><xref:System.Text.StringBuilder> オブジェクトの最大容量は、<xref:System.Int32.MaxValue?displayProperty=nameWithType>の既定値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="d269f-118">The maximum capacity of your <xref:System.Text.StringBuilder> object will be set to its default value, which is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  

-   <span data-ttu-id="d269f-119"><xref:System.Text.StringBuilder> オブジェクトへの拡張を格納するのに十分な大きさの `maxCapacity` 値を使用して、<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d269f-119">Call the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> constructor with a `maxCapacity` value that is large enough to accommodate any expansions to the <xref:System.Text.StringBuilder> object.</span></span>  
  
<span data-ttu-id="d269f-120">**アプリは、32ビットプロセスとして実行されます。**</span><span class="sxs-lookup"><span data-stu-id="d269f-120">**Your app runs as a 32-bit process.**</span></span>

<span data-ttu-id="d269f-121">32ビットプロセスでは、32ビットシステムでは最大 2 GB の仮想ユーザーモードメモリ、64ビットシステムでは 4 GB の仮想ユーザーモードメモリを割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="d269f-121">32-bit processes can allocate a maximum of 2GB of virtual user-mode memory on 32-bit systems, and 4GB of virtual user-mode memory on 64-bit systems.</span></span> <span data-ttu-id="d269f-122">これにより、大量の割り当てが必要な場合に、共通言語ランタイムが十分な連続メモリを割り当てることが困難になる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-122">This can make it more difficult for the common language runtime to allocate sufficient contiguous memory when a large allocation is needed.</span></span> <span data-ttu-id="d269f-123">これに対し、64ビットプロセスでは最大 8 TB の仮想メモリを割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="d269f-123">In contrast, 64-bit processes can allocate up to 8TB of virtual memory.</span></span> <span data-ttu-id="d269f-124">この例外に対処するには、64ビットプラットフォームを対象とするようにアプリを再コンパイルします。</span><span class="sxs-lookup"><span data-stu-id="d269f-124">To address this exception, recompile your app to target a 64-bit platform.</span></span> <span data-ttu-id="d269f-125">Visual Studio で特定のプラットフォームを対象にする方法については、「[方法: プロジェクトを構成してターゲットプラットフォームを設定](/visualstudio/ide/how-to-configure-projects-to-target-platforms)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d269f-125">For information on targeting specific platforms in Visual Studio, see [How to: Configure Projects to Target Platforms](/visualstudio/ide/how-to-configure-projects-to-target-platforms).</span></span>  
  
<span data-ttu-id="d269f-126">**アプリがアンマネージリソースをリークしています**</span><span class="sxs-lookup"><span data-stu-id="d269f-126">**Your app is leaking unmanaged resources**</span></span> 

<span data-ttu-id="d269f-127">ガベージコレクターはマネージ型に割り当てられたメモリを解放できますが、オペレーティングシステムハンドル (ファイルへのハンドル、メモリマップトファイル、パイプ、レジストリキー、待機ハンドルなど) および Windows API 呼び出しによって直接割り当てられたメモリブロックや、`malloc`などのメモリ割り当て関数への呼び出しによって割り当てられたメモリブロックは管理しません。</span><span class="sxs-lookup"><span data-stu-id="d269f-127">Although the garbage collector is able to free memory allocated to managed types, it does not manage memory allocated to unmanaged resources such as operating system handles (including handles to files, memory-mapped files, pipes, registry keys, and wait handles) and memory blocks allocated directly by Windows API calls or by calls to memory allocation functions such as `malloc`.</span></span> <span data-ttu-id="d269f-128">アンマネージリソースを使用する型は、<xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="d269f-128">Types that consume unmanaged resources implement the <xref:System.IDisposable> interface.</span></span>  

<span data-ttu-id="d269f-129">アンマネージリソースを使用する型を使用している場合は、使用が終了したときに <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-129">If you are consuming a type that uses unmanaged resources, you should be sure to call its <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method when you have finished using it.</span></span> <span data-ttu-id="d269f-130">(一部の型は、関数内で `Dispose` メソッドと同じ `Close` メソッドを実装している場合もあります)。詳細については、「 [IDisposable を実装するオブジェクトの使用](~/docs/standard/garbage-collection/using-objects.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d269f-130">(Some types also implement a `Close` method that is identical in function to a `Dispose` method.) For more information, see the [Using Objects That Implement IDisposable](~/docs/standard/garbage-collection/using-objects.md) topic.</span></span>  

<span data-ttu-id="d269f-131">アンマネージリソースを使用する型を作成した場合は、Dispose パターンを実装していることを確認し、必要に応じてファイナライザーを指定してください。</span><span class="sxs-lookup"><span data-stu-id="d269f-131">If you have created a type that uses unmanaged resources, make sure that you have implemented the Dispose pattern and, if necessary, supplied a finalizer.</span></span> <span data-ttu-id="d269f-132">詳細については、「 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)」および「<xref:System.Object.Finalize%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d269f-132">For more information, see  [Implementing a Dispose method](~/docs/standard/garbage-collection/implementing-dispose.md) and <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span>  
  
<span data-ttu-id="d269f-133">**64ビットプロセスで大きな配列を作成しようとしています**</span><span class="sxs-lookup"><span data-stu-id="d269f-133">**You are attempting to create a large array in a 64-bit process**</span></span>

<span data-ttu-id="d269f-134">既定では .NET Framework の共通言語ランタイムでは、サイズが 2 GB を超える単一オブジェクトは許可されません。</span><span class="sxs-lookup"><span data-stu-id="d269f-134">By default, the common language runtime in .NET Framework does not allow single objects whose size exceeds 2GB.</span></span> <span data-ttu-id="d269f-135">この既定値をオーバーライドするには、 [\<gcAllowVeryLargeObjects >](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md)構成ファイルの設定を使用して、合計サイズが 2 GB を超える配列を有効にします。</span><span class="sxs-lookup"><span data-stu-id="d269f-135">To override this default, you can use the [\<gcAllowVeryLargeObjects>](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) configuration file setting to enable arrays whose total size exceeds 2 GB.</span></span> <span data-ttu-id="d269f-136">.NET Core では、2 GB を超える配列のサポートは既定で有効になっています。</span><span class="sxs-lookup"><span data-stu-id="d269f-136">On .NET Core, support for arrays of greater than 2 GB is enabled by default.</span></span> 
  
<span data-ttu-id="d269f-137">**メモリ内で非常に大きなデータセット (配列、コレクション、データベースデータセットなど) を使用しています。**</span><span class="sxs-lookup"><span data-stu-id="d269f-137">**You are working with very large sets of data (such as arrays, collections, or database data sets) in memory.**</span></span>

<span data-ttu-id="d269f-138">メモリに格納されているデータ構造またはデータセットが非常に大きくなり、共通言語ランタイムがそれに対して十分な連続メモリを割り当てることができない場合、<xref:System.OutOfMemoryException> 例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="d269f-138">When data structures or data sets that reside in memory become so large that the common language runtime is unable to allocate enough contiguous memory for them, an <xref:System.OutOfMemoryException> exception results.</span></span>  

<span data-ttu-id="d269f-139"><xref:System.OutOfMemoryException> 例外を回避するには、メモリに格納されるデータが少なくなるようにアプリケーションを変更するか、メモリの割り当てを小さくする必要があるセグメントにデータを分割します。</span><span class="sxs-lookup"><span data-stu-id="d269f-139">To prevent the <xref:System.OutOfMemoryException> exceptions, you must modify your application so that less data is resident in memory, or the data is divided into segments that require smaller memory allocations.</span></span> <span data-ttu-id="d269f-140">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="d269f-140">For example:</span></span>  

-   <span data-ttu-id="d269f-141">データベースからすべてのデータを取得し、それをアプリでフィルター処理してサーバーへのトリップを最小限に抑える場合は、アプリに必要なデータのサブセットのみを返すようにクエリを変更する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-141">If you are retrieving all of the data from a database and then filtering it in your app to minimize trips to the server, you should modify your queries to return only the subset of data that your app needs.</span></span> <span data-ttu-id="d269f-142">大きなテーブルを扱う場合、1つのテーブル内のすべてのデータを取得して操作するよりも、ほとんどの場合、複数のクエリの方が効率的です。</span><span class="sxs-lookup"><span data-stu-id="d269f-142">When working with large tables, multiple queries are almost always more efficient than retrieving all of the data in a single table and then manipulating it.</span></span>  

-   <span data-ttu-id="d269f-143">ユーザーが動的に作成するクエリを実行する場合は、クエリによって返されるレコードの数が制限されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-143">If you are executing queries that users create dynamically, you should ensure that the number of records returned by the query is limited.</span></span>  

-   <span data-ttu-id="d269f-144">サイズの大きい配列またはその他のコレクションオブジェクトを使用して <xref:System.OutOfMemoryException> 例外が発生する場合は、すべてのデータを一度に処理するのではなく、サブセットのデータを処理するようにアプリケーションを変更する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-144">If you are using large arrays or other collection objects whose size results in an <xref:System.OutOfMemoryException> exception, you should modify your application to work the data in subsets rather than to work with it all at once.</span></span>  
  
<span data-ttu-id="d269f-145">次の例では、2億の浮動小数点値で構成される配列を取得し、その平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="d269f-145">The following example gets a array that consists of 200 million floating-point values and then calculates their mean.</span></span> <span data-ttu-id="d269f-146">この例の出力は、平均値を計算する前に配列全体がメモリに格納されるため、<xref:System.OutOfMemoryException> がスローされることを示しています。</span><span class="sxs-lookup"><span data-stu-id="d269f-146">The output from the example shows that, because the example stores the entire array in memory before it calculates the mean, an <xref:System.OutOfMemoryException> is thrown.</span></span>  

[!code-csharp[System.OutOfMemoryException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data1.cs#3)]
[!code-vb[System.OutOfMemoryException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data1.vb#3)]  
  
<span data-ttu-id="d269f-147">次の例では、データセット全体をメモリに格納せずに受信データを処理し、さらに処理を許可する必要がある場合にデータをファイルにシリアル化することによって、<xref:System.OutOfMemoryException> の例外を除去します (この場合、この例では、サイズが 1 GB を超えるファイルを生成し、計算された平均とケースの</span><span class="sxs-lookup"><span data-stu-id="d269f-147">The following example eliminates the <xref:System.OutOfMemoryException> exception by processing the incoming data without storing the entire data set in memory, serializing the data to a file if necessary to permit further processing (these lines are commented out in the example, since in this case they produce a file whose size is greater than 1GB), and returning the calculated mean and the number of cases to the calling routine.</span></span>  

[!code-csharp[System.OutOfMemoryException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data2.cs#4)]
[!code-vb[System.OutOfMemoryException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data2.vb#4)]  
  
<span data-ttu-id="d269f-148">**大きな文字列を繰り返し連結しています。**</span><span class="sxs-lookup"><span data-stu-id="d269f-148">**You are repeatedly concatenating large strings.**</span></span> 

<span data-ttu-id="d269f-149">文字列は不変であるため、各文字列連結操作で新しい文字列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="d269f-149">Because strings are immutable, each string concatenation operation creates a new string.</span></span> <span data-ttu-id="d269f-150">小さな文字列への影響、または少数の連結操作に対する影響は、ごくわずかです。</span><span class="sxs-lookup"><span data-stu-id="d269f-150">The impact for small strings, or for a small number of concatenation operations, is negligible.</span></span> <span data-ttu-id="d269f-151">ただし、大きな文字列または非常に多くの連結操作の場合、文字列の連結によって、大量のメモリ割り当てとメモリの断片化、パフォーマンスの低下、および場合によっては <xref:System.OutOfMemoryException> 例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-151">But for large strings or a very large number of concatenation operations, string concatenation can lead to a large number of memory allocations and memory fragmentation, poor performance, and possibly <xref:System.OutOfMemoryException> exceptions.</span></span>  

<span data-ttu-id="d269f-152">大きな文字列を連結する場合、または多数の連結演算を実行する場合は、<xref:System.String> クラスではなく、<xref:System.Text.StringBuilder> クラスを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-152">When concatenating large strings or performing a large number of concatenation operations, you should use the <xref:System.Text.StringBuilder> class instead of the <xref:System.String> class.</span></span> <span data-ttu-id="d269f-153">文字列の操作が完了したら、<xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> メソッドを呼び出して、<xref:System.Text.StringBuilder> インスタンスを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="d269f-153">When you have finished manipulating the string, convert the <xref:System.Text.StringBuilder> instance to a string by calling the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
<span data-ttu-id="d269f-154">**メモリ内に多数のオブジェクトをピン留めします。**</span><span class="sxs-lookup"><span data-stu-id="d269f-154">**You pin a large number of objects in memory.**</span></span>  
 
<span data-ttu-id="d269f-155">長時間にわたって多数のオブジェクトをメモリに固定すると、ガベージコレクターが連続したメモリブロックを割り当てることが困難になる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-155">Pinning a large number of objects in memory for long periods can make it difficult for the garbage collector to allocate contiguous blocks of memory.</span></span> <span data-ttu-id="d269f-156">たとえば、の `fixed` ステートメントを使用しC#たり、<xref:System.Runtime.InteropServices.GCHandleType.Pinned?displayProperty=nameWithType>のハンドル型で <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> メソッドを呼び出したりして、メモリ内に多数のオブジェクトをピン留めした場合は、次のようにして <xref:System.OutOfMemoryException> 例外に対処できます。</span><span class="sxs-lookup"><span data-stu-id="d269f-156">If you've pinned a large number of objects in memory, for example by using the `fixed` statement in C# or by calling the <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> method with a handle type of <xref:System.Runtime.InteropServices.GCHandleType.Pinned?displayProperty=nameWithType>, you can do the following to address the <xref:System.OutOfMemoryException> exception.</span></span>  
  
-   <span data-ttu-id="d269f-157">各オブジェクトを実際に固定する必要があるかどうかを評価します。</span><span class="sxs-lookup"><span data-stu-id="d269f-157">Evaluate whether each object really needs to be pinned,</span></span>  

-   <span data-ttu-id="d269f-158">各オブジェクトの固定ができるだけ早く解除されていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="d269f-158">Ensure that each object is unpinned as soon as possible.</span></span>  

-   <span data-ttu-id="d269f-159">メモリを固定するための <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> メソッドの各呼び出しに、<xref:System.Runtime.InteropServices.GCHandle.Free%2A?displayProperty=nameWithType> メソッドへの対応する呼び出しがあることを確認して、そのメモリを固定解除します。</span><span class="sxs-lookup"><span data-stu-id="d269f-159">Make sure that each call to the <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> method to pin memory has a corresponding call to the <xref:System.Runtime.InteropServices.GCHandle.Free%2A?displayProperty=nameWithType> method to unpin that memory.</span></span>  

<span data-ttu-id="d269f-160">次の Microsoft 中間 (MSIL) 命令は、<xref:System.OutOfMemoryException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d269f-160">The following Microsoft intermediate (MSIL) instructions throw an <xref:System.OutOfMemoryException> exception:</span></span>  
  
-   [<span data-ttu-id="d269f-161">箱</span><span class="sxs-lookup"><span data-stu-id="d269f-161">box</span></span>](xref:System.Reflection.Emit.OpCodes.Box)  
-   [<span data-ttu-id="d269f-162">newarr</span><span class="sxs-lookup"><span data-stu-id="d269f-162">newarr</span></span>](xref:System.Reflection.Emit.OpCodes.Newarr)  
-   [<span data-ttu-id="d269f-163">newobj</span><span class="sxs-lookup"><span data-stu-id="d269f-163">newobj</span></span>](xref:System.Reflection.Emit.OpCodes.Newobj)  


 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="d269f-164">例外の処理とスロー</span><span class="sxs-lookup"><span data-stu-id="d269f-164">Handling and Throwing Exceptions</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d269f-165"><see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d269f-165">Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d269f-166"><see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d269f-166">Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d269f-167">このコンストラクターは、新しいインスタンスの <xref:System.Exception.Message%2A> プロパティを、"プログラムの実行を続行するために必要なメモリが不足しています" などのエラーを説明するシステム提供のメッセージに初期化します。</span><span class="sxs-lookup"><span data-stu-id="d269f-167">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "There was not enough memory to continue the execution of the program."</span></span> <span data-ttu-id="d269f-168">このメッセージには、現在のシステムのカルチャが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="d269f-168">This message takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="d269f-169"><xref:System.OutOfMemoryException> インスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="d269f-169">The following table shows the initial property values for an instance of <xref:System.OutOfMemoryException>.</span></span>  
  
|<span data-ttu-id="d269f-170">プロパティ</span><span class="sxs-lookup"><span data-stu-id="d269f-170">Property</span></span>|<span data-ttu-id="d269f-171">[値]</span><span class="sxs-lookup"><span data-stu-id="d269f-171">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="d269f-172">`null`。</span><span class="sxs-lookup"><span data-stu-id="d269f-172">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="d269f-173">ローカライズされたエラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="d269f-173">The localized error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="d269f-174">エラーを説明するメッセージ。</span><span class="sxs-lookup"><span data-stu-id="d269f-174">The message that describes the error.</span></span></param>
        <summary><span data-ttu-id="d269f-175">指定したエラー メッセージを使用して、<see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d269f-175">Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with a specified error message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d269f-176">`message` パラメーターの内容は、ユーザーが理解できる内容にします。</span><span class="sxs-lookup"><span data-stu-id="d269f-176">The content of the `message` parameter is intended to be understood by humans.</span></span> <span data-ttu-id="d269f-177">このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-177">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span>  
  
 <span data-ttu-id="d269f-178"><xref:System.OutOfMemoryException> インスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="d269f-178">The following table shows the initial property values for an instance of <xref:System.OutOfMemoryException>.</span></span>  
  
|<span data-ttu-id="d269f-179">プロパティ</span><span class="sxs-lookup"><span data-stu-id="d269f-179">Property</span></span>|<span data-ttu-id="d269f-180">[値]</span><span class="sxs-lookup"><span data-stu-id="d269f-180">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="d269f-181">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="d269f-181">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="d269f-182">エラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="d269f-182">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OutOfMemoryException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OutOfMemoryException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="d269f-183">シリアル化されたオブジェクト データを保持するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d269f-183">The object that holds the serialized object data.</span></span></param>
        <param name="context"><span data-ttu-id="d269f-184">転送元または転送先に関するコンテキスト情報。</span><span class="sxs-lookup"><span data-stu-id="d269f-184">The contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="d269f-185">シリアル化したデータを使用して、<see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d269f-185">Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with serialized data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d269f-186">このコンストラクターは、逆シリアル化中に、ストリームで送信された例外オブジェクトを再構築するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d269f-186">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="d269f-187">詳細については、次を参照してください。 [XML および SOAP シリアル化](~/docs/standard/serialization/xml-and-soap-serialization.md)します。</span><span class="sxs-lookup"><span data-stu-id="d269f-187">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md"><span data-ttu-id="d269f-188">XML シリアル化および SOAP シリアル化</span><span class="sxs-lookup"><span data-stu-id="d269f-188">XML and SOAP Serialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string * Exception -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="d269f-189">例外の原因を説明するエラー メッセージ。</span><span class="sxs-lookup"><span data-stu-id="d269f-189">The error message that explains the reason for the exception.</span></span></param>
        <param name="innerException"><span data-ttu-id="d269f-190">現在の例外の原因となった例外。</span><span class="sxs-lookup"><span data-stu-id="d269f-190">The exception that is the cause of the current exception.</span></span> <span data-ttu-id="d269f-191"><paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="d269f-191">If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span></span></param>
        <summary><span data-ttu-id="d269f-192">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d269f-192">Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d269f-193">前の例外の直接の結果としてスローされる例外は、<xref:System.Exception.InnerException%2A> プロパティに前の例外への参照を含んでいる場合があります。</span><span class="sxs-lookup"><span data-stu-id="d269f-193">An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="d269f-194"><xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されたものと同じ値を返します。`Nothing` プロパティによって内部例外値がコンストラクターに渡されなかった場合は、null 参照 (Visual Basic の場合は <xref:System.Exception.InnerException%2A>) を返します。</span><span class="sxs-lookup"><span data-stu-id="d269f-194">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="d269f-195"><xref:System.OutOfMemoryException> インスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="d269f-195">The following table shows the initial property values for an instance of <xref:System.OutOfMemoryException>.</span></span>  
  
|<span data-ttu-id="d269f-196">プロパティ</span><span class="sxs-lookup"><span data-stu-id="d269f-196">Property</span></span>|<span data-ttu-id="d269f-197">[値]</span><span class="sxs-lookup"><span data-stu-id="d269f-197">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="d269f-198">内部例外の参照。</span><span class="sxs-lookup"><span data-stu-id="d269f-198">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="d269f-199">エラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="d269f-199">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="d269f-200">例外の処理とスロー</span><span class="sxs-lookup"><span data-stu-id="d269f-200">Handling and Throwing Exceptions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
