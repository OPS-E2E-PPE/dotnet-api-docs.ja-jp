<Type Name="IObservable&lt;T&gt;" FullName="System.IObservable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cb87991243714d4f80978f60c8aa7e0f0962d5b3" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83477089" /></Metadata><TypeSignature Language="C#" Value="public interface IObservable&lt;out T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObservable`1&lt;+ T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObservable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObservable(Of Out T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObservable" />
  <TypeSignature Language="F#" Value="type IObservable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">通知情報を提供するオブジェクト。</typeparam>
    <summary>プッシュ ベースの通知用プロバイダーを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IObserver%601> インターフェイスと <xref:System.IObservable%601> インターフェイスは、オブザーバーデザインパターンとも呼ばれる、プッシュベースの通知の一般化されたメカニズムを提供します。 <xref:System.IObservable%601> インターフェイスは、通知を送信するクラス (プロバイダー) を表します。<xref:System.IObserver%601> インターフェイスは、それを受け取るクラス (オブザーバー) を表します。 `T` は、通知情報を提供するクラスを表します。 一部のプッシュベースの通知では、<xref:System.IObserver%601> の実装と `T` は同じ型を表すことができます。  
  
 プロバイダーは、オブザーバーがプッシュベースの通知を受け取ることを示す1つのメソッド <xref:System.IObservable%601.Subscribe%2A>を実装する必要があります。 メソッドへの呼び出し元は、オブザーバーのインスタンスを渡します。 メソッドは、プロバイダーが通知の送信を停止する前に、オブザーバーが通知をキャンセルできるようにする <xref:System.IDisposable> の実装を返します。  
  
 特定の時点で、指定されたプロバイダーは、0、1、または複数のオブザーバーを持つことができます。 プロバイダーは、オブザーバーへの参照を保存し、通知を送信する前に有効であることを確認します。 <xref:System.IObservable%601> インターフェイスは、オブザーバーの数や通知が送信される順序については想定していません。  
  
 プロバイダーは、<xref:System.IObserver%601> メソッドを呼び出すことによって、次の3種類の通知をオブザーバーに送信します。  
  
-   現在のデータ。 プロバイダーは、<xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType> メソッドを呼び出して、現在のデータ、変更されたデータ、または新しいデータを持つ `T` オブジェクトをオブザーバーに渡すことができます。  
  
-   エラー状態。 プロバイダーは、<xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType> メソッドを呼び出して、何らかのエラー状態が発生したことをオブザーバーに通知できます。  
  
-   それ以上のデータはありません。 プロバイダーは、<xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> メソッドを呼び出して、通知の送信が完了したことをオブザーバーに通知できます。  
  
   
  
## Examples  
 次の例は、オブザーバーデザインパターンを示しています。 緯度と経度の情報を含む `Location` クラスを定義します。  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 `LocationTracker` クラスは、<xref:System.IObservable%601> の実装を提供します。 `TrackLocation` メソッドには、緯度と経度のデータを格納する null 許容の `Location` オブジェクトが渡されます。 `Location` 値が `null`でない場合、`TrackLocation` メソッドは各オブザーバーの <xref:System.IObserver%601.OnNext%2A> メソッドを呼び出します。  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 `Location` 値が `null`の場合、`TrackLocation` メソッドによって `LocationUnknownException` オブジェクトがインスタンス化されます。これを次の例に示します。 次に、各オブザーバーの <xref:System.IObserver%601.OnError%2A> メソッドを呼び出し、`LocationUnknownException` オブジェクトに渡します。 `LocationUnknownException` は <xref:System.Exception>から派生しますが、新しいメンバーは追加されません。  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 オブザーバーは、<xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> メソッドを呼び出すことによって `TrackLocation` オブジェクトから通知を受信するように登録します。これにより、オブザーバーオブジェクトへの参照がプライベートの汎用 <xref:System.Collections.Generic.List%601> オブジェクトに割り当てられます。 メソッドは `Unsubscriber` オブジェクトを返します。これは、オブザーバーが通知の受信を停止できるようにする <xref:System.IDisposable> の実装です。 `LocationTracker` クラスには、`EndTransmission` メソッドも含まれています。 これ以上の場所データが使用できない場合、メソッドは各オブザーバーの <xref:System.IObserver%601.OnCompleted%2A> メソッドを呼び出し、オブザーバーの内部リストをクリアします。  
  
 この例では、`LocationReporter` クラスによって <xref:System.IObserver%601> の実装が提供されます。 現在の場所に関する情報がコンソールに表示されます。 コンストラクターには `name` パラメーターが含まれています。これにより、`LocationReporter` インスタンスはその文字列の出力で自身を識別できます。 また、プロバイダーの <xref:System.IObservable%601.Subscribe%2A> メソッドの呼び出しをラップする `Subscribe` メソッドも含まれています。 これにより、メソッドは、返された <xref:System.IDisposable> 参照をプライベート変数に割り当てることができます。 `LocationReporter` クラスには、<xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> メソッドによって返されるオブジェクトの <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> メソッドを呼び出す `Unsubscribe` メソッドも含まれています。 次のコードでは、`LocationReporter` クラスを定義しています。  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 次のコードでは、プロバイダーとオブザーバーをインスタンス化します。  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObserver`1" />
    <related type="Article" href="https://msdn.microsoft.com/library/3680171f-f522-453c-aa4a-54f755a78f88">オブザーバーデザインパターン</related>
  </Docs>
  <Members>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public IDisposable Subscribe (IObserver&lt;out T&gt; observer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;!T&gt; observer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObservable`1.Subscribe(System.IObserver{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Subscribe (observer As IObserver(Of Out T)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Subscribe(IObserver&lt;T&gt; ^ observer);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;'T&gt; -&gt; IDisposable" Usage="iObservable.Subscribe observer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="observer">通知を受け取るオブジェクト。</param>
        <summary>オブザーバーが通知を受け取ることをプロバイダーに通知します。</summary>
        <returns>プロバイダーが通知の送信を完了する前に、オブザーバーが通知の受信を停止できるインターフェイスへの参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プッシュベースの通知にオブザーバーを登録するには、<xref:System.IObservable%601.Subscribe%2A> メソッドを呼び出す必要があります。 <xref:System.IObservable%601.Subscribe%2A> メソッドの一般的な実装では、次のことを行います。  
  
-   このメソッドは、<xref:System.Collections.Generic.List%601> オブジェクトなどのコレクションオブジェクトにオブザーバーへの参照を格納します。  
  
-   <xref:System.IDisposable> インターフェイスへの参照を返します。 これにより、オブザーバーは、プロバイダーがサブスクリプションの送信を終了し、サブスクライバーの <xref:System.IObserver%601.OnCompleted%2A> メソッドと呼ばれる前に、通知の受信を停止することができます。  
  
 任意の時点で、<xref:System.IObservable%601> の実装の特定のインスタンスが、すべてのサブスクリプションを処理し、すべてのサブスクライバーに通知する役割を担います。 特定の <xref:System.IObservable%601> の実装に関するドキュメントで特に指定されていない限り、オブザーバーは、複数のオブザーバーが受信する通知の順序など、<xref:System.IObservable%601> の実装について想定しません。  
  
   
  
## Examples  
 次の例は、緯度と経度の情報を報告するアプリケーションの <xref:System.IObservable%601.Subscribe%2A> 方法を示しています。 すべてのオブザーバーへの参照を格納する <xref:System.Collections.Generic.IList%601> collection オブジェクトを定義します。 また、<xref:System.IDisposable> インターフェイスを実装する `Unsubscriber` という名前のプライベートクラスを返し、サブスクライバーがイベント通知の受信を停止できるようにします。  完全な例については、<xref:System.IObservable%601> のトピックの「例」を参照してください。  
  
 [!code-csharp[System.IObserver.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#13)]
 [!code-vb[System.IObserver.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IObserver`1" />
      </Docs>
    </Member>
  </Members>
</Type>
