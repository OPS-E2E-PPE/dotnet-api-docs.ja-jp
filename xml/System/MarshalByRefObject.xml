<Type Name="MarshalByRefObject" FullName="System.MarshalByRefObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="add5df2f5ab5c4945c908af8156f0102ac1ca4df" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172649" /></Metadata><TypeSignature Language="C#" Value="public abstract class MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit MarshalByRefObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.MarshalByRefObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarshalByRefObject abstract" />
  <TypeSignature Language="F#" Value="type MarshalByRefObject = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3a4fc-101">リモート処理をサポートするアプリケーションで、アプリケーションのドメインの境界を越えてオブジェクトにアクセスできるようにします。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-101">Enables access to objects across application domain boundaries in applications that support remoting.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4fc-102">アプリケーションドメインは、1つまたは複数のアプリケーションが存在するオペレーティングシステムプロセス内のパーティションです。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-102">An application domain is a partition in an operating system process where one or more applications reside.</span></span> <span data-ttu-id="3a4fc-103">同じアプリケーションドメイン内のオブジェクトが直接通信します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-103">Objects in the same application domain communicate directly.</span></span> <span data-ttu-id="3a4fc-104">異なるアプリケーションドメイン内のオブジェクトは、オブジェクトのコピーをアプリケーションドメインの境界を越えて転送するか、プロキシを使用してメッセージを交換することによって通信します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-104">Objects in different application domains communicate either by transporting copies of objects across application domain boundaries, or by using a proxy to exchange messages.</span></span>  
  
 <span data-ttu-id="3a4fc-105"><xref:System.MarshalByRefObject> は、プロキシを使用してメッセージを交換することによって、アプリケーションドメインの境界を越えて通信するオブジェクトの基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-105"><xref:System.MarshalByRefObject> is the base class for objects that communicate across application domain boundaries by exchanging messages using a proxy.</span></span> <span data-ttu-id="3a4fc-106"><xref:System.MarshalByRefObject> から継承しないオブジェクトは、暗黙的に値によってマーシャリングされます。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-106">Objects that do not inherit from <xref:System.MarshalByRefObject> are implicitly marshal by value.</span></span> <span data-ttu-id="3a4fc-107">リモートアプリケーションが値渡しでマーシャリングするオブジェクトを参照する場合、オブジェクトのコピーがアプリケーションドメインの境界を越えて渡されます。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-107">When a remote application references a marshal by value object, a copy of the object is passed across application domain boundaries.</span></span>  
  
 <span data-ttu-id="3a4fc-108"><xref:System.MarshalByRefObject> オブジェクトは、ローカルアプリケーションドメインの境界内で直接アクセスされます。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-108"><xref:System.MarshalByRefObject> objects are accessed directly within the boundaries of the local application domain.</span></span> <span data-ttu-id="3a4fc-109">リモートアプリケーションドメインのアプリケーションが初めて <xref:System.MarshalByRefObject>にアクセスするときは、プロキシがリモートアプリケーションに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-109">The first time an application in a remote application domain accesses a <xref:System.MarshalByRefObject>, a proxy is passed to the remote application.</span></span> <span data-ttu-id="3a4fc-110">プロキシでの後続の呼び出しは、ローカルアプリケーションドメインに存在するオブジェクトにマーシャリングされます。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-110">Subsequent calls on the proxy are marshaled back to the object residing in the local application domain.</span></span>  
  
 <span data-ttu-id="3a4fc-111">型がアプリケーションドメインの境界を越えて使用される場合、型は <xref:System.MarshalByRefObject> から継承する必要があります。また、オブジェクトのメンバーは、作成されたアプリケーションドメインの外部では使用できないため、オブジェクトの状態をコピーすることはできません。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-111">Types must inherit from <xref:System.MarshalByRefObject> when the type is used across application domain boundaries, and the state of the object must not be copied because the members of the object are not usable outside the application domain where they were created.</span></span>  
  
 <span data-ttu-id="3a4fc-112">アプリケーションドメインの境界を越えて使用するために <xref:System.MarshalByRefObject> からオブジェクトを派生させる場合は、そのメンバーをオーバーライドしたり、メソッドを直接呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-112">When you derive an object from <xref:System.MarshalByRefObject> for use across application domain boundaries, you should not override any of its members, nor should you call its methods directly.</span></span> <span data-ttu-id="3a4fc-113">ランタイムは、<xref:System.MarshalByRefObject> から派生したクラスをアプリケーションドメインの境界を越えてマーシャリングする必要があることを認識します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-113">The runtime recognizes that classes derived from  <xref:System.MarshalByRefObject> should be marshaled across app domain boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4fc-114">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-114">This section contains two code examples.</span></span> <span data-ttu-id="3a4fc-115">最初のコード例では、別のアプリケーションドメインにクラスのインスタンスを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-115">The first code example shows how to create an instance of a class in another application domain.</span></span> <span data-ttu-id="3a4fc-116">2番目のコード例は、リモート処理に使用できる単純なクラスを示しています。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-116">The second code example shows a simple class that can be used for remoting.</span></span>  
  
 <span data-ttu-id="3a4fc-117">**例1**</span><span class="sxs-lookup"><span data-stu-id="3a4fc-117">**Example 1**</span></span>  
  
 <span data-ttu-id="3a4fc-118">次のコード例は、別のアプリケーションドメインでコードを実行する最も簡単な方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-118">The following code example shows the simplest way to execute code in another application domain.</span></span> <span data-ttu-id="3a4fc-119">この例では、<xref:System.MarshalByRefObject>を継承する `Worker` という名前のクラスと、それが実行されているアプリケーションドメインの名前を表示するメソッドを定義しています。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-119">The example defines a class named `Worker` that inherits <xref:System.MarshalByRefObject>, with a method that displays the name of the application domain in which it is executing.</span></span> <span data-ttu-id="3a4fc-120">この例では、既定のアプリケーションドメインと新しいアプリケーションドメインに `Worker` のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-120">The example creates instances of `Worker` in the default application domain and in a new application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4fc-121">`Worker` を含むアセンブリを両方のアプリケーションドメインに読み込む必要がありますが、新しいアプリケーションドメインにのみ存在する他のアセンブリを読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-121">The assembly that contains `Worker` must be loaded into both application domains, but it could load other assemblies that would exist only in the new application domain.</span></span>  
  
 [!code-cpp[CreateInstanceAndUnwrap2#1](~/samples/snippets/cpp/VS_Snippets_CLR/CreateInstanceAndUnwrap2/cpp/source.cpp#1)]
 [!code-csharp[CreateInstanceAndUnwrap2#1](~/samples/snippets/csharp/VS_Snippets_CLR/CreateInstanceAndUnwrap2/cs/source.cs#1)]
 [!code-vb[CreateInstanceAndUnwrap2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CreateInstanceAndUnwrap2/VB/source.vb#1)]  
  
 <span data-ttu-id="3a4fc-122">**例2**</span><span class="sxs-lookup"><span data-stu-id="3a4fc-122">**Example 2**</span></span>  
  
 <span data-ttu-id="3a4fc-123">次の例は、リモート処理で後で使用される <xref:System.MarshalByRefObject> から派生したクラスを示しています。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-123">The following example demonstrates a class derived from <xref:System.MarshalByRefObject> that is used later in remoting.</span></span>  
  
 [!code-cpp[RemotingServices.SetObjectUriForMarshal#1](~/samples/snippets/cpp/VS_Snippets_CLR/RemotingServices.SetObjectUriForMarshal/CPP/source.cpp#1)]
 [!code-csharp[RemotingServices.SetObjectUriForMarshal#1](~/samples/snippets/csharp/VS_Snippets_CLR/RemotingServices.SetObjectUriForMarshal/CS/source.cs#1)]
 [!code-vb[RemotingServices.SetObjectUriForMarshal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/RemotingServices.SetObjectUriForMarshal/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MarshalByRefObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MarshalByRefObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarshalByRefObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a4fc-124">
          <see cref="T:System.MarshalByRefObject" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-124">Initializes a new instance of the <see cref="T:System.MarshalByRefObject" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjRef">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjRef CreateObjRef (Type requestedType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjRef CreateObjRef(class System.Type requestedType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MarshalByRefObject.CreateObjRef(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateObjRef (requestedType As Type) As ObjRef" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjRef ^ CreateObjRef(Type ^ requestedType);" />
      <MemberSignature Language="F#" Value="abstract member CreateObjRef : Type -&gt; System.Runtime.Remoting.ObjRef&#xA;override this.CreateObjRef : Type -&gt; System.Runtime.Remoting.ObjRef" Usage="marshalByRefObject.CreateObjRef requestedType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjRef</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestedType" Type="System.Type" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="requestedType"><span data-ttu-id="3a4fc-125">新しい <see cref="T:System.Type" /> が参照するオブジェクトの <see cref="T:System.Runtime.Remoting.ObjRef" />。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-125">The <see cref="T:System.Type" /> of the object that the new <see cref="T:System.Runtime.Remoting.ObjRef" /> will reference.</span></span></param>
        <summary><span data-ttu-id="3a4fc-126">リモート オブジェクトとの通信に使用するプロキシの生成に必要な情報をすべて格納しているオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-126">Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.</span></span></summary>
        <returns><span data-ttu-id="3a4fc-127">プロキシを生成するのに必要な情報。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-127">Information required to generate a proxy.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4fc-128"><xref:System.MarshalByRefObject.CreateObjRef%2A> メソッドは、<xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType> や <xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType>などのリモートオブジェクトの作成方法によって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-128">The <xref:System.MarshalByRefObject.CreateObjRef%2A> method is called by remote object creation methods such as <xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType> and <xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3a4fc-129">ほとんどの場合、このメソッドをオーバーライドする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-129">In most cases, there is no need to override this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Remoting.RemotingException"><span data-ttu-id="3a4fc-130">このインスタンスが有効なリモート処理オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-130">This instance is not a valid remoting object.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4fc-131">直前の呼び出し元に、インフラストラクチャ アクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-131">The immediate caller does not have infrastructure permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="3a4fc-132">直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-132">requires full trust for the immediate caller.</span></span> <span data-ttu-id="3a4fc-133">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-133">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetLifetimeService">
      <MemberSignature Language="C#" Value="public object GetLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetLifetimeService() cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="DocId" Value="M:System.MarshalByRefObject.GetLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetLifetimeService();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="member this.GetLifetimeService : unit -&gt; obj" Usage="marshalByRefObject.GetLifetimeService " FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetLifetimeService() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetLifetimeService();" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetLifetimeService : unit -&gt; obj&#xA;override this.GetLifetimeService : unit -&gt; obj" Usage="marshalByRefObject.GetLifetimeService " FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a4fc-134">対象のインスタンスの有効期間ポリシーを制御する、現在の有効期間サービス オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-134">Retrieves the current lifetime service object that controls the lifetime policy for this instance.</span></span></summary>
        <returns><span data-ttu-id="3a4fc-135">対象のインスタンスの有効期間ポリシーを制御するときに使用する、<see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> 型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-135">An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4fc-136">有効期間サービスの詳細については、<xref:System.Runtime.Remoting.Lifetime.LifetimeServices> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-136">For more information about lifetime services, see the <xref:System.Runtime.Remoting.Lifetime.LifetimeServices> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4fc-137">直前の呼び出し元に、インフラストラクチャ アクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-137">The immediate caller does not have infrastructure permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="3a4fc-138">直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-138">requires full trust for the immediate caller.</span></span> <span data-ttu-id="3a4fc-139">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-139">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public virtual object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MarshalByRefObject.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="abstract member InitializeLifetimeService : unit -&gt; obj&#xA;override this.InitializeLifetimeService : unit -&gt; obj" Usage="marshalByRefObject.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a4fc-140">このインスタンスの有効期間ポリシーを制御する有効期間サービス オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-140">Obtains a lifetime service object to control the lifetime policy for this instance.</span></span></summary>
        <returns><span data-ttu-id="3a4fc-141">対象のインスタンスの有効期間ポリシーを制御するときに使用する、<see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> 型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-141">An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance.</span></span> <span data-ttu-id="3a4fc-142">存在する場合は、このインスタンスの現在の有効期間サービス オブジェクトです。それ以外の場合は、<see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> プロパティの値に初期化された新しい有効期間サービス オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-142">This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4fc-143">有効期間サービスの詳細については、<xref:System.Runtime.Remoting.Lifetime.LifetimeServices> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-143">For more information about lifetime services, see the <xref:System.Runtime.Remoting.Lifetime.LifetimeServices> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4fc-144">リースを作成するコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-144">The following code example demonstrates creating a lease.</span></span>  
  
 [!code-cpp[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MarshalByRefObject.InitializeLifetimeService Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MarshalByRefObject.InitializeLifetimeService Example/CS/source.cs#1)]
 [!code-vb[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MarshalByRefObject.InitializeLifetimeService Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4fc-145">直前の呼び出し元に、インフラストラクチャ アクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-145">The immediate caller does not have infrastructure permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="3a4fc-146">直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-146">requires full trust for the immediate caller.</span></span> <span data-ttu-id="3a4fc-147">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-147">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberwiseClone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4fc-148">現在のオブジェクトの簡易コピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-148">Creates a shallow copy of the current object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberwiseClone">
      <MemberSignature Language="C#" Value="protected MarshalByRefObject MemberwiseClone (bool cloneIdentity);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.MarshalByRefObject MemberwiseClone(bool cloneIdentity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function MemberwiseClone (cloneIdentity As Boolean) As MarshalByRefObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarshalByRefObject ^ MemberwiseClone(bool cloneIdentity);" />
      <MemberSignature Language="F#" Value="override this.MemberwiseClone : bool -&gt; MarshalByRefObject" Usage="marshalByRefObject.MemberwiseClone cloneIdentity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.MarshalByRefObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cloneIdentity" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="cloneIdentity"><span data-ttu-id="3a4fc-149"><see langword="false" /> を指定すると、現在の <see cref="T:System.MarshalByRefObject" /> オブジェクトの ID が削除されます。これにより、このオブジェクトがリモート処理の境界を越えてマーシャリングされるときに、新しい ID が割り当てられることになります。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-149"><see langword="false" /> to delete the current <see cref="T:System.MarshalByRefObject" /> object's identity, which will cause the object to be assigned a new identity when it is marshaled across a remoting boundary.</span></span> <span data-ttu-id="3a4fc-150">通常は、値 <see langword="false" /> が適しています。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-150">A value of <see langword="false" /> is usually appropriate.</span></span> <span data-ttu-id="3a4fc-151"><see langword="true" /> を指定した場合は、現在の <see cref="T:System.MarshalByRefObject" /> オブジェクトの ID がその複製にコピーされます。これにより、リモート処理クライアントの呼び出しは、リモート サーバー オブジェクトにルーティングされることになります。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-151"><see langword="true" /> to copy the current <see cref="T:System.MarshalByRefObject" /> object's identity to its clone, which will cause remoting client calls to be routed to the remote server object.</span></span></param>
        <summary><span data-ttu-id="3a4fc-152">現在の <see cref="T:System.MarshalByRefObject" /> オブジェクトの簡易コピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-152">Creates a shallow copy of the current <see cref="T:System.MarshalByRefObject" /> object.</span></span></summary>
        <returns><span data-ttu-id="3a4fc-153">現在の <see cref="T:System.MarshalByRefObject" /> オブジェクトの簡易コピー。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-153">A shallow copy of the current <see cref="T:System.MarshalByRefObject" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4fc-154"><xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29> メソッドは、新しい <xref:System.MarshalByRefObject> オブジェクトを作成し、現在の <xref:System.MarshalByRefObject> オブジェクトの非静的フィールドを新しいオブジェクトにコピーすることによって、簡易コピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-154">The <xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29> method creates a shallow copy by creating a new <xref:System.MarshalByRefObject> object, and then copying the nonstatic fields of the current <xref:System.MarshalByRefObject> object to the new object.</span></span> <span data-ttu-id="3a4fc-155">フィールドが値型の場合は、フィールドのビットごとのコピーが実行されます。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-155">If a field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="3a4fc-156">フィールドが参照型の場合、参照はコピーされますが、参照先のオブジェクトはコピーされません。したがって、元のオブジェクトとその複製は、同じオブジェクトを参照します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-156">If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.</span></span>  
  
 <span data-ttu-id="3a4fc-157">たとえば、オブジェクト A と B を参照する X という <xref:System.MarshalByRefObject> オブジェクトについて考えてみます。オブジェクト B がオブジェクト C を参照しているとします。X の簡易コピーでは、オブジェクト A と B も参照する新しいオブジェクト X2 が作成されます。これに対し、X の詳細コピーでは、新しいオブジェクト (A2 と B2) を参照する新しいオブジェクト X2 が作成されます。これは A と B のコピーです。 B2 は、新しいオブジェクト C2 (コピー C) を参照します。オブジェクトのディープまたは浅いコピーを実行するには、<xref:System.ICloneable> インターフェイスを実装するクラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-157">For example, consider a <xref:System.MarshalByRefObject> object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy C. Use a class that implements the <xref:System.ICloneable> interface to perform a deep or shallow copy of an object.</span></span>  
  
 <span data-ttu-id="3a4fc-158"><xref:System.MarshalByRefObject> オブジェクトの id は、リモート処理クライアント呼び出しの対象となるリモートサーバーオブジェクトとして定義されます。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-158">The identity of a <xref:System.MarshalByRefObject> object is defined as the remote server object that is the target of a remoting client call.</span></span> <span data-ttu-id="3a4fc-159">既定では、<xref:System.MarshalByRefObject> オブジェクトのメンバーごとの複製には、元のオブジェクトと同じ id が付けられます。これは通常、リモート処理の境界を越えてクライアント側にマーシャリングされるサーバー側オブジェクトの複製に対しては正しい動作ではありません。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-159">By default, the memberwise clone of a <xref:System.MarshalByRefObject> object has the same identity as the original object, which is typically not the correct behavior for clones of server-side objects that are marshaled across a remoting boundary to the client side.</span></span> <span data-ttu-id="3a4fc-160">`false`を指定します。通常は、複製の id を削除し、リモート処理の境界を越えて複製がマーシャリングされるときに新しい id が割り当てられるようにするか、`true` して、複製が元の <xref:System.MarshalByRefObject> オブジェクトの id を保持するようにします。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-160">Specify `false`, which is usually appropriate, to delete the identity of the clone and cause a new identity to be assigned when the clone is marshaled across a remoting boundary, or `true` to cause the clone to retain the identity of the original <xref:System.MarshalByRefObject> object.</span></span> <span data-ttu-id="3a4fc-161"><xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29> メソッドは、リモートサーバーオブジェクトを実装する開発者が使用することを目的としています。</span><span class="sxs-lookup"><span data-stu-id="3a4fc-161">The <xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29> method is intended to be used by developers implementing remote server objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
