<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1a8f261ac98722901087915f60409bf608f07982" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75038809" /></Metadata><TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`8" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename TRest&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
    <TypeParameter Name="T7" />
    <TypeParameter Name="TRest" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="3fe87-101">組の 1 番目のコンポーネントの型。</span><span class="sxs-lookup"><span data-stu-id="3fe87-101">The type of the tuple's first component.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="3fe87-102">組の 2 番目のコンポーネントの型。</span><span class="sxs-lookup"><span data-stu-id="3fe87-102">The type of the tuple's second component.</span></span></typeparam>
    <typeparam name="T3"><span data-ttu-id="3fe87-103">組の 3 番目のコンポーネントの型。</span><span class="sxs-lookup"><span data-stu-id="3fe87-103">The type of the tuple's third component.</span></span></typeparam>
    <typeparam name="T4"><span data-ttu-id="3fe87-104">組の 4 番目のコンポーネントの型。</span><span class="sxs-lookup"><span data-stu-id="3fe87-104">The type of the tuple's fourth component.</span></span></typeparam>
    <typeparam name="T5"><span data-ttu-id="3fe87-105">組の 5 番目のコンポーネントの型。</span><span class="sxs-lookup"><span data-stu-id="3fe87-105">The type of the tuple's fifth component.</span></span></typeparam>
    <typeparam name="T6"><span data-ttu-id="3fe87-106">組の 6 番目のコンポーネントの型。</span><span class="sxs-lookup"><span data-stu-id="3fe87-106">The type of the tuple's sixth component.</span></span></typeparam>
    <typeparam name="T7"><span data-ttu-id="3fe87-107">組の 7 番目のコンポーネントの型。</span><span class="sxs-lookup"><span data-stu-id="3fe87-107">The type of the tuple's seventh component.</span></span></typeparam>
    <typeparam name="TRest"><span data-ttu-id="3fe87-108">組の残りのコンポーネントの型を定義する汎用 <see langword="Tuple" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3fe87-108">Any generic <see langword="Tuple" /> object that defines the types of the tuple's remaining components.</span></span></typeparam>
    <summary><span data-ttu-id="3fe87-109">*n* 組 (*n* は 8 以上) を表します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-109">Represents an *n*-tuple, where *n* is 8 or greater.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-110">組は、特定の数と値のシーケンスを持つデータ構造です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-110">A tuple is a data structure that has a specific number and sequence of values.</span></span> <span data-ttu-id="3fe87-111"><xref:System.Tuple%608> クラスは、8個以上のコンポーネントを持つ*n*タプルを表します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-111">The <xref:System.Tuple%608> class represents an *n*-tuple that has eight or more components.</span></span>  
  
 <span data-ttu-id="3fe87-112">静的 <xref:System.Tuple.Create%2A?displayProperty=nameWithType> メソッドを呼び出すことによって、厳密に8個のコンポーネントを持つ <xref:System.Tuple%608> オブジェクトをインスタンス化できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-112">You can instantiate a <xref:System.Tuple%608> object with exactly eight components by calling the static <xref:System.Tuple.Create%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3fe87-113">次の例では、20未満の素数を含む8タプル (octuple) を作成します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-113">The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20.</span></span> <span data-ttu-id="3fe87-114">型の推定を使用して各コンポーネントの型を決定することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="3fe87-114">Note that it uses type inference to determine the type of each component.</span></span>  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 <span data-ttu-id="3fe87-115">また、<xref:System.Tuple%608.%23ctor%2A> コンストラクターを呼び出すことによって、8つ以上のコンポーネントを含む n タプルオブジェクトをインスタンス化することもできます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-115">You can also instantiate an n-tuple object with eight or more components by calling the <xref:System.Tuple%608.%23ctor%2A> constructor.</span></span> <span data-ttu-id="3fe87-116">次の例では、<xref:System.Tuple%608.%23ctor%2A> コンストラクターを使用して、前の例で作成した組と等価の8組を作成します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-116">The following example uses the <xref:System.Tuple%608.%23ctor%2A> constructor to create an 8-tuple that is equivalent to the tuple created in the previous example.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
> [!NOTE]
>  <span data-ttu-id="3fe87-117">9個以上のコンポーネントを含む n タプルを作成するには、<xref:System.Tuple%608.%23ctor%2A> コンストラクターを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="3fe87-117">To create an n-tuple with nine or more components, you must call the  <xref:System.Tuple%608.%23ctor%2A> constructor.</span></span> <span data-ttu-id="3fe87-118"><xref:System.Tuple> クラスの静的ファクトリメソッドでは、8個を超えるコンポーネントを持つ `Tuple` オブジェクトの作成はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="3fe87-118">The static factory methods of the <xref:System.Tuple> class do not support the creation of `Tuple` objects with more than eight components.</span></span>  
  
 <span data-ttu-id="3fe87-119"><xref:System.Tuple%608.%23ctor%2A> コンストラクターを持つ8個以上のコンポーネントを持つ n タプルをインスタンス化するには、ジェネリック `Tuple` オブジェクトを `rest` パラメーターとして指定し、タプルの8番目から*n*番目のコンポーネントを定義します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-119">To instantiate an n-tuple that has eight or more components with the <xref:System.Tuple%608.%23ctor%2A> constructor, you supply a generic `Tuple` object as the `rest` parameter to define the eighth through *n*th components of the tuple.</span></span> <span data-ttu-id="3fe87-120">ジェネリック `Tuple` オブジェクトをこの方法で入れ子にすることにより、そのコンポーネントの数に実際の制限がないタプルを作成できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-120">By nesting generic `Tuple` objects in this way, you can create a tuple that has no practical limitation on the number of its components.</span></span>  
  
 <span data-ttu-id="3fe87-121">次の例では、1860から2000の各 national 国勢調査のミシガン市の人口データを含む17組を作成します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-121">The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each national census from 1860 to 2000.</span></span> <span data-ttu-id="3fe87-122">組の最初の要素は都市名です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-122">The first component of the tuple is the city name.</span></span> <span data-ttu-id="3fe87-123">2番目のコンポーネントはデータ系列の開始日で、3番目のコンポーネントは開始日の母集団です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-123">The second component is the start date of the data series, and the third component is the population at the start date.</span></span> <span data-ttu-id="3fe87-124">後続の各コンポーネントでは、10分間隔で作成されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-124">Each subsequent component provides the population at decade intervals.</span></span> <span data-ttu-id="3fe87-125">17組は、<xref:System.Tuple%608> オブジェクト内に <xref:System.Tuple%603> オブジェクトを入れ子にすることによって作成されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-125">The 17-tuple is created by nesting a <xref:System.Tuple%603> object inside a <xref:System.Tuple%608> object.</span></span> <span data-ttu-id="3fe87-126">つまり、<xref:System.Tuple%603> オブジェクトは <xref:System.Tuple%608> クラスコンストラクターの `rest` パラメーターの値として指定されます。この <xref:System.Tuple%608> オブジェクトは、外側の <xref:System.Tuple%608> オブジェクト内に入れ子になっています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-126">(That is, the <xref:System.Tuple%603> object is supplied as the value of the `rest` parameter in the <xref:System.Tuple%608> class constructor.) This <xref:System.Tuple%608> object is, in turn, nested in an outer <xref:System.Tuple%608> object.</span></span> <span data-ttu-id="3fe87-127">つまり、<xref:System.Tuple%608> オブジェクトは、外部 <xref:System.Tuple%608> オブジェクトのクラスコンストラクターの `rest` パラメーターの値として指定されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-127">(That is, the <xref:System.Tuple%608> object is supplied as the value of the `rest` parameter in the outer <xref:System.Tuple%608> object's class constructor.)</span></span>  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 <span data-ttu-id="3fe87-128">読み取り専用の <xref:System.Tuple%607.Item1%2A>、<xref:System.Tuple%607.Item2%2A>、<xref:System.Tuple%607.Item3%2A>、<xref:System.Tuple%607.Item4%2A>、<xref:System.Tuple%607.Item5%2A>、<xref:System.Tuple%607.Item6%2A>、および <xref:System.Tuple%607.Item7%2A> インスタンスの各プロパティを使用して、組の最初の7つのコンポーネントの値を取得できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-128">You can retrieve the value of the tuple's first seven components by using the read-only <xref:System.Tuple%607.Item1%2A>, <xref:System.Tuple%607.Item2%2A>, <xref:System.Tuple%607.Item3%2A>, <xref:System.Tuple%607.Item4%2A>, <xref:System.Tuple%607.Item5%2A>, <xref:System.Tuple%607.Item6%2A>, and <xref:System.Tuple%607.Item7%2A> instance properties.</span></span> <span data-ttu-id="3fe87-129">追加のコンポーネントは入れ子になっており、<xref:System.Tuple%608.Rest%2A> プロパティから取得できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-129">Any additional components are nested and can be retrieved from the <xref:System.Tuple%608.Rest%2A> property.</span></span> <span data-ttu-id="3fe87-130">前の例では、<xref:System.Tuple%608.Item7%2A> プロパティを通じて <xref:System.Tuple%608.Item1%2A> は、タプルの最初から7番目のコンポーネントを取得します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-130">In the previous example, the <xref:System.Tuple%608.Item1%2A> through <xref:System.Tuple%608.Item7%2A> properties retrieve the first through seventh components of the tuple.</span></span> <span data-ttu-id="3fe87-131">8 ~ 14 番目のコンポーネントは、2番目のレベルで入れ子になっている組に含まれ、`Rest.Item7` のプロパティを通じて `Rest.Item1` によって表されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-131">The eighth through fourteenth components are contained in the tuple that is nested at the second level, and are represented by the `Rest.Item1` through `Rest.Item7` properties.</span></span> <span data-ttu-id="3fe87-132">15 ~ 17 番目のコンポーネントは、3番目のレベルで入れ子になっているタプルに含まれており、`Rest.Rest.Item3` プロパティ `Rest.Rest.Item1` によって表されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-132">The fifteenth through seventeenth components are contained in the tuple that is nested at the third level, and are represented by the `Rest.Rest.Item1` though `Rest.Rest.Item3` properties.</span></span>  
  
 <span data-ttu-id="3fe87-133">組は、主に次の4つの方法で使用されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-133">Tuples are commonly used in four different ways:</span></span>  
  
-   <span data-ttu-id="3fe87-134">データの1つのセットを表す場合は。</span><span class="sxs-lookup"><span data-stu-id="3fe87-134">To represent a single set of data.</span></span> <span data-ttu-id="3fe87-135">たとえば、組はデータベースレコードを表すことができ、そのコンポーネントはレコードの個々のフィールドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-135">For example, a tuple can represent a database record, and its components can represent individual fields of the record.</span></span>  
  
-   <span data-ttu-id="3fe87-136">データセットに簡単にアクセスして操作できるようにするため。</span><span class="sxs-lookup"><span data-stu-id="3fe87-136">To provide easy access to, and manipulation of, a data set.</span></span>  
  
-   <span data-ttu-id="3fe87-137">`out` パラメーター (でC#は) または `ByRef` パラメーター (Visual Basic) を使用せずに、メソッドから複数の値を返す場合は。</span><span class="sxs-lookup"><span data-stu-id="3fe87-137">To return multiple values from a method without the use of `out` parameters (in C#) or `ByRef` parameters (in Visual Basic).</span></span> <span data-ttu-id="3fe87-138">たとえば、前の例では、計算された統計情報と市区町村名を <xref:System.Tuple%607> オブジェクトで返しています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-138">For example, the previous example returns its computed statistics, along with the city name, in a <xref:System.Tuple%607> object.</span></span>  
  
-   <span data-ttu-id="3fe87-139">1つのパラメーターを使用して複数の値をメソッドに渡す場合は。</span><span class="sxs-lookup"><span data-stu-id="3fe87-139">To pass multiple values to a method through a single parameter.</span></span> <span data-ttu-id="3fe87-140">たとえば、<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> メソッドには、起動時にスレッドが実行するメソッドに1つの値を指定できる1つのパラメーターがあります。</span><span class="sxs-lookup"><span data-stu-id="3fe87-140">For example, the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</span></span> <span data-ttu-id="3fe87-141">メソッドの引数として <xref:System.Tuple%607> オブジェクトを指定した場合は、スレッドのスタートアップルーチンに7つのデータ項目を指定できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-141">If you supply a <xref:System.Tuple%607> object as the method argument, you can supply the thread's startup routine with seven items of data.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6, !T7 item7, !TRest rest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, rest As TRest)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="F#" Value="new Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'Rest -&gt; Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;" Usage="new System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; (item1, item2, item3, item4, item5, item6, item7, rest)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
        <Parameter Name="rest" Type="TRest" />
      </Parameters>
      <Docs>
        <param name="item1"><span data-ttu-id="3fe87-142">組の 1 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-142">The value of the tuple's first component.</span></span></param>
        <param name="item2"><span data-ttu-id="3fe87-143">組の 2 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-143">The value of the tuple's second component.</span></span></param>
        <param name="item3"><span data-ttu-id="3fe87-144">組の 3 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-144">The value of the tuple's third component.</span></span></param>
        <param name="item4"><span data-ttu-id="3fe87-145">組の 4 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-145">The value of the tuple's fourth component</span></span></param>
        <param name="item5"><span data-ttu-id="3fe87-146">組の 5 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-146">The value of the tuple's fifth component.</span></span></param>
        <param name="item6"><span data-ttu-id="3fe87-147">組の 6 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-147">The value of the tuple's sixth component.</span></span></param>
        <param name="item7"><span data-ttu-id="3fe87-148">組の 7 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-148">The value of the tuple's seventh component.</span></span></param>
        <param name="rest"><span data-ttu-id="3fe87-149">組の残りのコンポーネントの値を格納する汎用 <see langword="Tuple" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3fe87-149">Any generic <see langword="Tuple" /> object that contains the values of the tuple's remaining components.</span></span></param>
        <summary><span data-ttu-id="3fe87-150"><see cref="T:System.Tuple`8" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-150">Initializes a new instance of the <see cref="T:System.Tuple`8" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-151">また、静的 <xref:System.Tuple.Create%2A?displayProperty=nameWithType> メソッドを使用して、そのコンポーネントの型を明示的に指定しなくても、8タプル (octuple) オブジェクトをインスタンス化できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-151">You can also use the static <xref:System.Tuple.Create%2A?displayProperty=nameWithType> method to instantiate an 8-tuple (octuple) object without having to explicitly specify the types of its components.</span></span> <span data-ttu-id="3fe87-152">次の例では、<xref:System.Tuple.Create%2A?displayProperty=nameWithType> メソッドを使用して、20未満の素数を含む8組のオブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-152">The following example uses the <xref:System.Tuple.Create%2A?displayProperty=nameWithType> method to instantiate an 8-tuple object that contains prime numbers that are less than 20.</span></span>  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 <span data-ttu-id="3fe87-153">これは、<xref:System.Tuple%607.%23ctor%2A> クラスコンストラクターへの次の呼び出しに相当します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-153">This is equivalent to the following call to the <xref:System.Tuple%607.%23ctor%2A> class constructor.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
 <span data-ttu-id="3fe87-154">ただし、静的 <xref:System.Tuple.Create%2A?displayProperty=nameWithType> メソッドを使用して、8個を超えるコンポーネントを含むタプルオブジェクトを作成することはできません。</span><span class="sxs-lookup"><span data-stu-id="3fe87-154">However, the static <xref:System.Tuple.Create%2A?displayProperty=nameWithType> method cannot be used to create a tuple object with more than eight components.</span></span>  
  
 <span data-ttu-id="3fe87-155"><xref:System.Tuple%608.%23ctor%2A> コンストラクターを使用して、8個以上のコンポーネントを含む n タプルを作成する場合は、`rest` パラメーターを使用して、1 ~ 7 個のコンポーネントからなる入れ子になった n タプルを作成します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-155">When using the <xref:System.Tuple%608.%23ctor%2A> constructor to create an n-tuple with eight or more components, you use the `rest` parameter to create a nested n-tuple that has from one to seven components.</span></span> <span data-ttu-id="3fe87-156">入れ子のレベルを連続して使用することで、ほぼ無制限の数のコンポーネントを持つ n タプルを作成できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-156">By using successive levels of nesting, you can create an n-tuple that has a virtually unlimited number of components.</span></span> <span data-ttu-id="3fe87-157">たとえば、25組を作成するには、次のように3つの入れ子のレベルを使用して <xref:System.Tuple%608> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-157">For example, to create a 25-tuple, you instantiate a <xref:System.Tuple%608> object with three levels of nesting, as follows:</span></span>  
  
-   <span data-ttu-id="3fe87-158">最も外側の <xref:System.Tuple%608> オブジェクトには、最初から7番目のコンポーネントが含まれます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-158">The outermost <xref:System.Tuple%608> object contains the first through seventh components.</span></span> <span data-ttu-id="3fe87-159"><xref:System.Tuple%608.Rest%2A> プロパティは、入れ子の最初のレベルで <xref:System.Tuple%608> オブジェクトへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-159">Its <xref:System.Tuple%608.Rest%2A> property provides access to an <xref:System.Tuple%608> object at the first level of nesting.</span></span>  
  
-   <span data-ttu-id="3fe87-160">最も外側の入れ子になった <xref:System.Tuple%608> オブジェクトには、8番目から14番目のコンポーネントが含まれており、その <xref:System.Tuple%608.Rest%2A> プロパティは、入れ子の第2レベルにある <xref:System.Tuple%608> オブジェクトへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-160">The outermost nested <xref:System.Tuple%608> object contains the eighth through fourteenth components, and its <xref:System.Tuple%608.Rest%2A> property provides access to an <xref:System.Tuple%608> object at the second level of nesting.</span></span>  
  
-   <span data-ttu-id="3fe87-161">入れ子の第2レベルの <xref:System.Tuple%608> オブジェクトには 15 ~ 20 番目のコンポーネントが含まれており、その <xref:System.Tuple%608.Rest%2A> プロパティは、入れ子の第3レベルにある <xref:System.Tuple%604> オブジェクトへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-161">The <xref:System.Tuple%608> object at the second level of nesting contains the fifteenth through twenty-first  components, and its <xref:System.Tuple%608.Rest%2A> property provides access to an <xref:System.Tuple%604> object at the third level of nesting.</span></span>  
  
-   <span data-ttu-id="3fe87-162">最も内側の組は、21秒から5番目のコンポーネントを含む <xref:System.Tuple%604> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="3fe87-162">The innermost tuple is a <xref:System.Tuple%604> object that contains the twenty-second through twenty-fifth components.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-163">次の例では、1860から2000の各国勢調査のミシガン市の人口データを含む17組を作成します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-163">The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each census from 1860 to 2000.</span></span> <span data-ttu-id="3fe87-164">組の最初の要素は都市名です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-164">The first component of the tuple is the city name.</span></span> <span data-ttu-id="3fe87-165">2番目のコンポーネントは、一連のデータの開始日です。3番目のコンポーネントは、開始日の母集団です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-165">The second component is the start date of the series of data, and the third component is the population at the start date.</span></span> <span data-ttu-id="3fe87-166">後続の各コンポーネントでは、10分間隔で作成されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-166">Each subsequent component provides the population at decade intervals.</span></span> <span data-ttu-id="3fe87-167">この例では、入れ子になっている2つの層を使用して17組を作成します。3番目のコンポーネントには、1860 ~ 1900 の母集団データを格納する7タプルを定義します。また、1910から1970の母集団データを含む入れ子になった7タプルと入れ子になった3タプルを定義します。1980 ~ 2000 の母集団データを格納する。</span><span class="sxs-lookup"><span data-stu-id="3fe87-167">The example uses two layers of nesting to create the 17-tuple: It defines a 7-tuple whose third through seventh components contain population data for 1860 through 1900, a nested 7-tuple that contains population data for 1910 through 1970, and an inner nested 3-tuple that contains population data for 1980 through 2000.</span></span>  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3fe87-168"><paramref name="rest" /> がジェネリック <see langword="Tuple" /> オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="3fe87-168"><paramref name="rest" /> is not a generic <see langword="Tuple" /> object.</span></span></exception>
        <altmember cref="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tuple.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="3fe87-169">このインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3fe87-169">The object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="3fe87-170">現在の <see cref="T:System.Tuple`8" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-170">Returns a value that indicates whether the current <see cref="T:System.Tuple`8" /> object is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="3fe87-171">現在のインスタンスが指定したオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3fe87-171"><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-172">`obj` パラメーターは、次のすべての条件を満たしている場合、現在のインスタンスと等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-172">The `obj` parameter is considered to be equal to the current instance if it meets all the following conditions:</span></span>  
  
-   <span data-ttu-id="3fe87-173">これは <xref:System.Tuple%608> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="3fe87-173">It is a <xref:System.Tuple%608> object.</span></span>  
  
-   <span data-ttu-id="3fe87-174">これには、現在のインスタンスと同じ種類のコンポーネントの合計数が含まれています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-174">It has the same total number of components that are of the same types as the current instance.</span></span>  
  
-   <span data-ttu-id="3fe87-175">そのコンポーネント (入れ子になったコンポーネントを含む) は、現在のインスタンスのコンポーネントと同じです。</span><span class="sxs-lookup"><span data-stu-id="3fe87-175">Its components (including its nested components) are equal to those of the current instance.</span></span> <span data-ttu-id="3fe87-176">等値は、各コンポーネントの既定の等値比較子によって決定されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-176">Equality is determined by the default equality comparer for each component.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-177">次の例では、素数を含む5つの <xref:System.Tuple%608> オブジェクトを定義します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-177">The following example defines five <xref:System.Tuple%608> objects that contain prime numbers.</span></span> <span data-ttu-id="3fe87-178">次に、最初のオブジェクトと残りの各オブジェクトを比較します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-178">It then compares the first object with each of the remaining objects.</span></span> <span data-ttu-id="3fe87-179">出力に示されているように、1番目と最後の <xref:System.Tuple%608> オブジェクトのみが等しいので、同じ値を持つコンポーネントの数が同一であるためです。</span><span class="sxs-lookup"><span data-stu-id="3fe87-179">As the output shows, only the first and the last <xref:System.Tuple%608> objects are equal, because they have an identical number of components with identical values.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`8.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tuple.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3fe87-180">現在の <see cref="T:System.Tuple`8" /> オブジェクトのハッシュ コードを計算します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-180">Calculates the hash code for the current <see cref="T:System.Tuple`8" /> object.</span></span></summary>
        <returns><span data-ttu-id="3fe87-181">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="3fe87-181">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item1 : 'T1" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3fe87-182">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 1 番目のコンポーネントの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-182">Gets the value of the current <see cref="T:System.Tuple`8" /> object's first component.</span></span></summary>
        <value><span data-ttu-id="3fe87-183">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 1 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-183">The value of the current <see cref="T:System.Tuple`8" /> object's first component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-184"><xref:System.Tuple%608.Item1%2A> コンポーネントの型は、次の2つの方法のいずれかで動的に決定できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-184">You can dynamically determine the type of the <xref:System.Tuple%608.Item1%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="3fe87-185"><xref:System.Tuple%608.Item1%2A> プロパティによって返される値に対して `GetType` メソッドを呼び出す。</span><span class="sxs-lookup"><span data-stu-id="3fe87-185">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item1%2A> property.</span></span>  
  
-   <span data-ttu-id="3fe87-186"><xref:System.Tuple%608> オブジェクトを表す <xref:System.Type> オブジェクトを取得し、その <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> メソッドによって返される配列から最初の要素を取得する。</span><span class="sxs-lookup"><span data-stu-id="3fe87-186">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the first element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-187">次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-187">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="3fe87-188">17組の最初のコンポーネントは都市名です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-188">The first component of the 17-tuple is the city name.</span></span> <span data-ttu-id="3fe87-189">この例では、<xref:System.Tuple%608.Item1%2A> プロパティを使用して、カタログ作成データを表示する前に、テーブルヘッダーに市区町村名を表示します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-189">The example uses the <xref:System.Tuple%608.Item1%2A> property to display the city name in the table header before displaying the population data.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item2 : 'T2" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3fe87-190">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 2 番目のコンポーネントの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-190">Gets the value of the current <see cref="T:System.Tuple`8" /> object's second component.</span></span></summary>
        <value><span data-ttu-id="3fe87-191">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 2 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-191">The value of the current <see cref="T:System.Tuple`8" /> object's second component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-192"><xref:System.Tuple%608.Item2%2A> コンポーネントの型は、次の2つの方法のいずれかで動的に決定できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-192">You can dynamically determine the type of the <xref:System.Tuple%608.Item2%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="3fe87-193"><xref:System.Tuple%608.Item2%2A> プロパティによって返される値に対して `GetType` メソッドを呼び出す。</span><span class="sxs-lookup"><span data-stu-id="3fe87-193">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item2%2A> property.</span></span>  
  
-   <span data-ttu-id="3fe87-194"><xref:System.Tuple%608> オブジェクトを表す <xref:System.Type> オブジェクトを取得し、その <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> メソッドによって返される配列から2番目の要素を取得する。</span><span class="sxs-lookup"><span data-stu-id="3fe87-194">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the second element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-195">次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-195">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="3fe87-196">17組の2番目のコンポーネントは、データ系列の最初の年です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-196">The second component of the 17-tuple is the first year of the data series.</span></span> <span data-ttu-id="3fe87-197">この例では、<xref:System.Tuple%608.Item2%2A> プロパティの値を変数に割り当て、その変数を使用して、データが表示される年を表します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-197">The example assigns the value of the <xref:System.Tuple%608.Item2%2A> property to a variable, and then uses that variable to represent the year whose data is displayed.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item3 : 'T3" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3fe87-198">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 3 番目のコンポーネントの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-198">Gets the value of the current <see cref="T:System.Tuple`8" /> object's third component.</span></span></summary>
        <value><span data-ttu-id="3fe87-199">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 3 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-199">The value of the current <see cref="T:System.Tuple`8" /> object's third component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-200"><xref:System.Tuple%608.Item3%2A> コンポーネントの型は、次の2つの方法のいずれかで動的に決定できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-200">You can dynamically determine the type of the <xref:System.Tuple%608.Item3%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="3fe87-201"><xref:System.Tuple%608.Item3%2A> プロパティによって返される値に対して `GetType` メソッドを呼び出す。</span><span class="sxs-lookup"><span data-stu-id="3fe87-201">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item3%2A> property.</span></span>  
  
-   <span data-ttu-id="3fe87-202"><xref:System.Tuple%608> オブジェクトを表す <xref:System.Type> オブジェクトを取得し、その <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> メソッドによって返される配列から3番目の要素を取得する。</span><span class="sxs-lookup"><span data-stu-id="3fe87-202">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the third element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-203">次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-203">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="3fe87-204">17組の3番目のコンポーネントは、1860の母集団です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-204">The third component of the 17-tuple is the population in 1860.</span></span> <span data-ttu-id="3fe87-205">この例では、<xref:System.Tuple%608.Item3%2A> プロパティを使用して、母集団の値を表示し、1860と1870の間の母集団変化率を計算します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-205">The example uses the <xref:System.Tuple%608.Item3%2A> property to display the population value and to calculate the annual rate of population change between 1860 and 1870.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item4 : 'T4" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3fe87-206">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 4 番目のコンポーネントの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-206">Gets the value of the current <see cref="T:System.Tuple`8" /> object's fourth component.</span></span></summary>
        <value><span data-ttu-id="3fe87-207">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 4 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-207">The value of the current <see cref="T:System.Tuple`8" /> object's fourth component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-208"><xref:System.Tuple%608.Item4%2A> コンポーネントの型は、次の2つの方法のいずれかで動的に決定できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-208">You can dynamically determine the type of the <xref:System.Tuple%608.Item4%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="3fe87-209"><xref:System.Tuple%608.Item4%2A> プロパティによって返される値に対して `GetType` メソッドを呼び出す。</span><span class="sxs-lookup"><span data-stu-id="3fe87-209">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item4%2A> property.</span></span>  
  
-   <span data-ttu-id="3fe87-210"><xref:System.Tuple%608> オブジェクトを表す <xref:System.Type> オブジェクトを取得し、その <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> メソッドによって返される配列から4番目の要素を取得する。</span><span class="sxs-lookup"><span data-stu-id="3fe87-210">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the fourth element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-211">次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-211">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="3fe87-212">17組の4番目のコンポーネントは、1870の母集団です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-212">The fourth component of the 17-tuple is the population in 1870.</span></span> <span data-ttu-id="3fe87-213">この例では、<xref:System.Tuple%608.Item4%2A> プロパティを使用して、母集団の値を表示し、1870と1880の間の母集団変化率を計算します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-213">The example uses the <xref:System.Tuple%608.Item4%2A> property to display the population value and to calculate the annual rate of population change between 1870 and 1880.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item5 : 'T5" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3fe87-214">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 5 番目のコンポーネントの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-214">Gets the value of the current <see cref="T:System.Tuple`8" /> object's fifth component.</span></span></summary>
        <value><span data-ttu-id="3fe87-215">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 5 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-215">The value of the current <see cref="T:System.Tuple`8" /> object's fifth component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-216"><xref:System.Tuple%608.Item5%2A> コンポーネントの型は、次の2つの方法のいずれかで動的に決定できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-216">You can dynamically determine the type of the <xref:System.Tuple%608.Item5%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="3fe87-217"><xref:System.Tuple%608.Item5%2A> プロパティによって返される値に対して `GetType` メソッドを呼び出す。</span><span class="sxs-lookup"><span data-stu-id="3fe87-217">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item5%2A> property.</span></span>  
  
-   <span data-ttu-id="3fe87-218"><xref:System.Tuple%608> オブジェクトを表す <xref:System.Type> オブジェクトを取得し、その <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> メソッドによって返される配列から5番目の要素を取得する。</span><span class="sxs-lookup"><span data-stu-id="3fe87-218">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the fifth element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-219">次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-219">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="3fe87-220">17組の5番目のコンポーネントは、1880の母集団です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-220">The fifth component of the 17-tuple is the population in 1880.</span></span> <span data-ttu-id="3fe87-221">この例では、<xref:System.Tuple%608.Item5%2A> プロパティを使用して、母集団の値を表示し、1880と1890の間の母集団変化率を計算します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-221">The example uses the <xref:System.Tuple%608.Item5%2A> property to display the population value and to calculate the annual rate of population change between 1880 and 1890.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item6 : 'T6" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3fe87-222">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 6 番目のコンポーネントの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-222">Gets the value of the current <see cref="T:System.Tuple`8" /> object's sixth component.</span></span></summary>
        <value><span data-ttu-id="3fe87-223">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 6 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-223">The value of the current <see cref="T:System.Tuple`8" /> object's sixth component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-224"><xref:System.Tuple%608.Item6%2A> コンポーネントの型は、次の2つの方法のいずれかで動的に決定できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-224">You can dynamically determine the type of the <xref:System.Tuple%608.Item6%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="3fe87-225"><xref:System.Tuple%608.Item6%2A> プロパティによって返される値に対して `GetType` メソッドを呼び出す。</span><span class="sxs-lookup"><span data-stu-id="3fe87-225">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item6%2A> property.</span></span>  
  
-   <span data-ttu-id="3fe87-226"><xref:System.Tuple%608> オブジェクトを表す <xref:System.Type> オブジェクトを取得し、その <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> メソッドによって返される配列から6番目の要素を取得する。</span><span class="sxs-lookup"><span data-stu-id="3fe87-226">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the sixth element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-227">次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-227">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="3fe87-228">17組の6番目のコンポーネントは、1890の母集団です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-228">The sixth component of the 17-tuple is the population in 1890.</span></span> <span data-ttu-id="3fe87-229">この例では、<xref:System.Tuple%608.Item6%2A> プロパティを使用して、母集団の値を表示し、1890と1900の間の母集団変化率を計算します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-229">The example uses the <xref:System.Tuple%608.Item6%2A> property to display the population value and to calculate the annual rate of population change between 1890 and 1900.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item7">
      <MemberSignature Language="C#" Value="public T7 Item7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T7 Item7" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item7" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item7 As T7" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T7 Item7 { T7 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item7 : 'T7" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item7" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T7</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3fe87-230">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 7 番目のコンポーネントの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-230">Gets the value of the current <see cref="T:System.Tuple`8" /> object's seventh component.</span></span></summary>
        <value><span data-ttu-id="3fe87-231">現在の <see cref="T:System.Tuple`8" /> オブジェクトの 7 番目のコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-231">The value of the current <see cref="T:System.Tuple`8" /> object's seventh component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-232"><xref:System.Tuple%608.Item7%2A> コンポーネントの型は、次の2つの方法のいずれかで動的に決定できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-232">You can dynamically determine the type of the <xref:System.Tuple%608.Item7%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="3fe87-233"><xref:System.Tuple%608.Item7%2A> プロパティによって返される値に対して `GetType` メソッドを呼び出す。</span><span class="sxs-lookup"><span data-stu-id="3fe87-233">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item7%2A> property.</span></span>  
  
-   <span data-ttu-id="3fe87-234"><xref:System.Tuple%608> オブジェクトを表す <xref:System.Type> オブジェクトを取得し、その <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> メソッドによって返される配列から7番目の要素を取得する。</span><span class="sxs-lookup"><span data-stu-id="3fe87-234">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the seventh element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-235">次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-235">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="3fe87-236">17組の7番目のコンポーネントは、1900の母集団です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-236">The seventh component of the 17-tuple is the population in 1900.</span></span> <span data-ttu-id="3fe87-237">この例では、<xref:System.Tuple%608.Item7%2A> プロパティを使用して、母集団の値を表示し、1900と1910の間の母集団変化率を計算します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-237">The example uses the <xref:System.Tuple%608.Item7%2A> property to display the population value and to calculate the annual rate of population change between 1900 and 1910.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rest">
      <MemberSignature Language="C#" Value="public TRest Rest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TRest Rest" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Rest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rest As TRest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TRest Rest { TRest get(); };" />
      <MemberSignature Language="F#" Value="member this.Rest : 'Rest" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Rest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3fe87-238">現在の <see cref="T:System.Tuple`8" /> オブジェクトの残りのコンポーネントを取得します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-238">Gets the current <see cref="T:System.Tuple`8" /> object's remaining components.</span></span></summary>
        <value><span data-ttu-id="3fe87-239">現在の <see cref="T:System.Tuple`8" /> オブジェクトの残りのコンポーネントの値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-239">The value of the current <see cref="T:System.Tuple`8" /> object's remaining components.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-240"><xref:System.Tuple%608.Rest%2A> プロパティは、タプルの*8 番目*のコンポーネントにアクセスできるようにする、入れ子になった `Tuple` オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-240">The <xref:System.Tuple%608.Rest%2A> property returns a nested `Tuple` object that allows access to the eighth though *n*th components of the tuple.</span></span> <span data-ttu-id="3fe87-241">タプル内のコンポーネントの合計数に応じて、<xref:System.Tuple%608.Item7%2A> プロパティを使用して、入れ子になった `Tuple` オブジェクトの <xref:System.Tuple%608.Item1%2A> から、8番目から14番目のコンポーネントの値を取得できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-241">Depending on the total number of components in the tuple, the values of the eighth through fourteenth components can be retrieved from the nested `Tuple` object's <xref:System.Tuple%608.Item1%2A> through <xref:System.Tuple%608.Item7%2A> properties.</span></span> <span data-ttu-id="3fe87-242">入れ子になった <xref:System.Tuple%608> オブジェクトの <xref:System.Tuple%608.Rest%2A> プロパティを使用して、次の入れ子レベルで `Tuple` オブジェクトを取得できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-242">You can then use the <xref:System.Tuple%608.Rest%2A> property of a nested <xref:System.Tuple%608> object to retrieve the `Tuple` object at the next level of nesting.</span></span>  
  
 <span data-ttu-id="3fe87-243">型名から数字を抽出することによって、<xref:System.Tuple%608.Rest%2A> プロパティによって返される入れ子になった `Tuple` オブジェクト内のコンポーネントの数を動的に決定できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-243">You can dynamically determine the number of components in a nested `Tuple` object that is returned by the <xref:System.Tuple%608.Rest%2A> property by extracting the digit from its type name.</span></span> <span data-ttu-id="3fe87-244">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-244">The following example provides an illustration.</span></span>  
  
 [!code-vb[System.Tuple\`8.Item1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/rest.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-245">次の例では、17組のオブジェクトを作成します。このオブジェクトには、ミシガンの市区町村の人口データ (1860 から 2000) が格納されています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-245">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="3fe87-246">17組の7番目のコンポーネントは、1900の母集団です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-246">The seventh component of the 17-tuple is the population in 1900.</span></span> <span data-ttu-id="3fe87-247">この例では、<xref:System.Tuple%608.Rest%2A> プロパティを使用して、8番目から14番目のコンポーネントの値を取得し、入れ子になった <xref:System.Tuple%608> オブジェクトの <xref:System.Tuple%608.Rest%2A> プロパティを使用して残りのコンポーネントの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-247">The example uses the <xref:System.Tuple%608.Rest%2A> property to retrieve the values of the eighth through fourteenth components, and it uses the <xref:System.Tuple%608.Rest%2A> property of the nested <xref:System.Tuple%608> object to retrieve the values of the remaining components.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="3fe87-248">現在のインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3fe87-248">An object to compare with the current instance.</span></span></param>
        <param name="comparer"><span data-ttu-id="3fe87-249">比較用のカスタムの規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3fe87-249">An object that provides custom rules for comparison.</span></span></param>
        <summary><span data-ttu-id="3fe87-250">指定された比較子を使用して現在の <see cref="T:System.Tuple`8" /> オブジェクトと指定されたオブジェクトを比較し、並べ替え順序において、現在のオブジェクトの位置が指定されたオブジェクトの前になるか、後ろになるか、同じになるかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-250">Compares the current <see cref="T:System.Tuple`8" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</span></span></summary>
        <returns><span data-ttu-id="3fe87-251">並べ替え順序における、このインスタンスと <paramref name="other" /> の相対位置を示す符号付き整数値 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="3fe87-251">A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="3fe87-252">[値]</span><span class="sxs-lookup"><span data-stu-id="3fe87-252">Value</span></span> 
 </term><description> <span data-ttu-id="3fe87-253">説明</span><span class="sxs-lookup"><span data-stu-id="3fe87-253">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="3fe87-254">負の整数</span><span class="sxs-lookup"><span data-stu-id="3fe87-254">A negative integer</span></span> 
 </term><description> <span data-ttu-id="3fe87-255">このインスタンスの位置が <paramref name="other" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-255">This instance precedes <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="3fe87-256">0</span><span class="sxs-lookup"><span data-stu-id="3fe87-256">Zero</span></span> 
 </term><description> <span data-ttu-id="3fe87-257">このインスタンスと <paramref name="other" /> の位置は、並べ替え順序において同じです。</span><span class="sxs-lookup"><span data-stu-id="3fe87-257">This instance and <paramref name="other" /> have the same position in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="3fe87-258">正の整数</span><span class="sxs-lookup"><span data-stu-id="3fe87-258">A positive integer</span></span> 
 </term><description> <span data-ttu-id="3fe87-259">このインスタンスの位置が <paramref name="other" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="3fe87-259">This instance follows <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-260">このメンバーは、明示的なインターフェイス実装です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-260">This member is an explicit interface implementation.</span></span> <span data-ttu-id="3fe87-261">これは、<xref:System.Tuple%608> のインスタンスが <xref:System.Collections.IStructuralComparable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-261">It can be used only when the <xref:System.Tuple%608> instance is cast to an <xref:System.Collections.IStructuralComparable> interface.</span></span>  
  
 <span data-ttu-id="3fe87-262">このメソッドを使用すると、<xref:System.Tuple%608> オブジェクトのカスタマイズされた比較を定義できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-262">This method lets you define customized comparisons of <xref:System.Tuple%608> objects.</span></span> <span data-ttu-id="3fe87-263">たとえば、このメソッドを使用して、特定のコンポーネントの値に基づいて <xref:System.Tuple%608> オブジェクトを並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-263">For example, you can use this method to order <xref:System.Tuple%608> objects based on the value of a specific component.</span></span>  
  
 <span data-ttu-id="3fe87-264">このメソッドは直接呼び出すことができますが、コレクションのメンバーを並べ替える <xref:System.Collections.IComparer> パラメーターを含むコレクションの並べ替えメソッドによって最も一般的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-264">Although this method can be called directly, it is most commonly called by collection-sorting methods that include <xref:System.Collections.IComparer> parameters to order the members of a collection.</span></span> <span data-ttu-id="3fe87-265">たとえば、<xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> メソッドと、<xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> コンストラクターを使用してインスタンス化される <xref:System.Collections.SortedList> オブジェクトの <xref:System.Collections.SortedList.Add%2A> メソッドによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-265">For example, it is called by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> method and the <xref:System.Collections.SortedList.Add%2A> method of a <xref:System.Collections.SortedList> object that is instantiated by using the <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> constructor.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3fe87-266"><xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A> メソッドは、並べ替え操作で使用することを目的としています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-266">The <xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A> method is intended for use in sorting operations.</span></span> <span data-ttu-id="3fe87-267">比較の主な目的が2つのオブジェクトが等しいかどうかを判断する場合は、この値を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="3fe87-267">It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</span></span> <span data-ttu-id="3fe87-268">2つのオブジェクトが等しいかどうかを判断するには、<xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-268">To determine whether two objects are equal, call the <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-269">次の例では、1940から2000の米国の4都市の人口データを格納する <xref:System.Tuple%608> オブジェクトの配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-269">The following example creates an array of <xref:System.Tuple%608> objects that contains population data for four U.S. cities from 1940 to 2000.</span></span> <span data-ttu-id="3fe87-270">Octuple の最初のコンポーネントは、市区町村名です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-270">The octuple's first component is the city name.</span></span> <span data-ttu-id="3fe87-271">残りの6つのコンポーネントは、1940から2000までの10年間隔での母集団を表します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-271">The remaining six components represent the population at 10-year intervals from 1940 to 2000.</span></span>  
  
 <span data-ttu-id="3fe87-272">`PopulationComparer` クラスは、<xref:System.Collections.IComparer> の実装を提供します。この実装により、octuples の配列をそのいずれかのコンポーネントで並べ替えることができます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-272">The `PopulationComparer` class provides an <xref:System.Collections.IComparer> implementation that allows the array of octuples to be sorted by any one of its components.</span></span> <span data-ttu-id="3fe87-273">コンストラクターの `PopulationComparer` クラスには、並べ替え順序を定義するコンポーネントの位置と、組オブジェクトを昇順と降順のどちらで並べ替えるかを示す <xref:System.Boolean> 値という2つの値が用意されています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-273">Two values are provided to the `PopulationComparer` class in its constructor: The position of the component that defines the sort order, and a <xref:System.Boolean> value that indicates whether the tuple objects should be sorted in ascending or descending order.</span></span>  
  
 <span data-ttu-id="3fe87-274">次に、配列内の要素を並べ替えられていない順序で表示し、3番目のコンポーネント (1950 の母集団) によってそれらを並べ替えて、8番目のコンポーネント (2000 では母集団) で並べ替え、それらを表示します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-274">The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1950) and displays them, and then sorts them by the eighth component (the population in 2000) and displays them.</span></span>  
  
 [!code-csharp[System.Tuple\`8.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`8.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3fe87-275"><paramref name="other" /> は <see cref="T:System.Tuple`8" /> オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="3fe87-275"><paramref name="other" /> is not a <see cref="T:System.Tuple`8" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="3fe87-276">このインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3fe87-276">The object to compare with this instance.</span></span></param>
        <param name="comparer"><span data-ttu-id="3fe87-277">2 つのオブジェクトが等しいかどうかの評価に使用するメソッドを定義するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3fe87-277">An object that defines the method to use to evaluate whether the two objects are equal.</span></span></param>
        <summary><span data-ttu-id="3fe87-278">指定された比較メソッドに基づいて、現在の <see cref="T:System.Tuple`8" /> オブジェクトが指定したオブジェクトと等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-278">Returns a value that indicates whether the current <see cref="T:System.Tuple`8" /> object is equal to a specified object based on a specified comparison method.</span></span></summary>
        <returns><span data-ttu-id="3fe87-279">現在のインスタンスが指定したオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3fe87-279"><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-280">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-280">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3fe87-281">これは、<xref:System.Tuple%608> のインスタンスが <xref:System.Collections.IStructuralEquatable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-281">It can be used only when the <xref:System.Tuple%608> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.</span></span>  
  
 <span data-ttu-id="3fe87-282"><xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> 実装は、`other` が `null`されていない場合、および現在のインスタンスと同じ型C#の (入れ子になった <xref:System.Tuple%608> オブジェクトに含まれる) コンポーネントの合計数が同じである `Tuple` オブジェクトに正常にキャスト (in) または変換 (Visual Basic) できる場合にのみ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-282">The <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementation is called only if `other` is not `null`, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <xref:System.Tuple%608> object that has the same total number of components (including those in nested `Tuple` objects) of the same types as the current instance.</span></span> <span data-ttu-id="3fe87-283"><xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> メソッドは、最初に <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> 実装と比較する <xref:System.Tuple%608> オブジェクトの <xref:System.Tuple%608.Item1%2A> 値を渡します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-283">The <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> method first passes the <xref:System.Tuple%608.Item1%2A> values of the <xref:System.Tuple%608> objects to be compared to the <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="3fe87-284">このメソッド呼び出しによって `true`が返された場合、メソッドが再度呼び出され、2つの <xref:System.Tuple%608> オブジェクトの <xref:System.Tuple%608.Item2%2A> 値が渡されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-284">If this method call returns `true`, the method is called again and passed the <xref:System.Tuple%608.Item2%2A> values of the two <xref:System.Tuple%608> objects.</span></span> <span data-ttu-id="3fe87-285">この処理は、メソッド呼び出しが特定の値のペアを比較したときに `false` 返されるか、2つの <xref:System.Tuple%608.Rest%2A> 値がメソッドに渡されるまで続行されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-285">This continues until the method call returns `false` when it compares a specific pair of values, or the two <xref:System.Tuple%608.Rest%2A> values are passed to the method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="3fe87-286">現在の <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> オブジェクトのハッシュ コードを計算する <see cref="T:System.Tuple`8" /> メソッドを持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3fe87-286">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`8" /> object.</span></span></param>
        <summary><span data-ttu-id="3fe87-287">指定した計算メソッドを使用して、現在の <see cref="T:System.Tuple`8" /> オブジェクトのハッシュ コードを計算します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-287">Calculates the hash code for the current <see cref="T:System.Tuple`8" /> object by using a specified computation method.</span></span></summary>
        <returns><span data-ttu-id="3fe87-288">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="3fe87-288">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-289">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3fe87-290">これは、<xref:System.Tuple%608> のインスタンスが <xref:System.Collections.IStructuralEquatable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-290">It can be used only when the <xref:System.Tuple%608> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.</span></span>  
  
 <span data-ttu-id="3fe87-291">メソッドは、`comparer` オブジェクトの <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> の実装の呼び出しを単にラップします。</span><span class="sxs-lookup"><span data-stu-id="3fe87-291">The method simply wraps a call to the `comparer` object's <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> implementation.</span></span>  
  
 <span data-ttu-id="3fe87-292">ハッシュコードを計算するために使用されるアルゴリズムは、等しいと見なされる2つの <xref:System.Tuple%608> オブジェクトに対して同じハッシュコードを返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="3fe87-292">The algorithm used to compute the hash code should return the same hash code for two <xref:System.Tuple%608> objects that are considered to be equal.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="3fe87-293">現在のインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3fe87-293">An object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="3fe87-294">現在の <see cref="T:System.Tuple`8" /> オブジェクトと指定したオブジェクトを比較して、現在のオブジェクトが、並べ替え順序において、指定したオブジェクトの前後または同じ位置のいずれにあるかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-294">Compares the current <see cref="T:System.Tuple`8" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</span></span></summary>
        <returns><span data-ttu-id="3fe87-295">並べ替え順序における、このインスタンスと <paramref name="obj" /> の相対位置を示す符号付き整数値 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="3fe87-295">A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="3fe87-296">[値]</span><span class="sxs-lookup"><span data-stu-id="3fe87-296">Value</span></span> 
 </term><description> <span data-ttu-id="3fe87-297">説明</span><span class="sxs-lookup"><span data-stu-id="3fe87-297">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="3fe87-298">負の整数</span><span class="sxs-lookup"><span data-stu-id="3fe87-298">A negative integer</span></span> 
 </term><description> <span data-ttu-id="3fe87-299">このインスタンスの位置が <paramref name="obj" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-299">This instance precedes <paramref name="obj" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="3fe87-300">0</span><span class="sxs-lookup"><span data-stu-id="3fe87-300">Zero</span></span> 
 </term><description> <span data-ttu-id="3fe87-301">このインスタンスと <paramref name="obj" /> の位置は、並べ替え順序において同じです。</span><span class="sxs-lookup"><span data-stu-id="3fe87-301">This instance and <paramref name="obj" /> have the same position in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="3fe87-302">正の整数</span><span class="sxs-lookup"><span data-stu-id="3fe87-302">A positive integer</span></span> 
 </term><description> <span data-ttu-id="3fe87-303">このインスタンスの位置が <paramref name="obj" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="3fe87-303">This instance follows <paramref name="obj" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-304">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-304">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3fe87-305">これは、<xref:System.Tuple%608> のインスタンスが <xref:System.IComparable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-305">It can be used only when the <xref:System.Tuple%608> instance is cast to an <xref:System.IComparable> interface.</span></span>  
  
 <span data-ttu-id="3fe87-306">このメソッドは、<xref:System.Tuple%608> クラスの <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-306">This method provides the <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> implementation for the <xref:System.Tuple%608> class.</span></span> <span data-ttu-id="3fe87-307">メソッドは直接呼び出すことができますが、通常は、コレクションのメンバーを並べ替えるために、<xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> や <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>などのコレクションの並べ替えメソッドの既定のオーバーロードによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-307">Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> and <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, to order the members of a collection.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3fe87-308"><xref:System.Tuple%608.System%23IComparable%23CompareTo%2A> メソッドは、並べ替え操作で使用することを目的としています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-308">The <xref:System.Tuple%608.System%23IComparable%23CompareTo%2A> method is intended for use in sorting operations.</span></span> <span data-ttu-id="3fe87-309">比較の主な目的が2つのオブジェクトが等しいかどうかを判断する場合は、この値を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="3fe87-309">It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</span></span> <span data-ttu-id="3fe87-310">2つのオブジェクトが等しいかどうかを判断するには、<xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-310">To determine whether two objects are equal, call the <xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="3fe87-311">このメソッドは、既定のオブジェクト比較子を使用して、各コンポーネントを比較します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-311">This method uses the default object comparer to compare each component.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-312">次の例では、素数の範囲を含む整数を持つ、octuples の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-312">The following example creates an array of octuples whose components are integers that contain a range of prime numbers.</span></span> <span data-ttu-id="3fe87-313">この例では、配列の要素を並べ替えられていない順序で表示し、配列を並べ替え、並べ替えた順序で配列を表示します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-313">The example displays the elements of the array in unsorted order, sorts the array, and then displays the array in sorted order.</span></span> <span data-ttu-id="3fe87-314">出力は、配列が <xref:System.Tuple%608.Item1%2A>によって、または組の最初のコンポーネントによって並べ替えられていることを示しています。</span><span class="sxs-lookup"><span data-stu-id="3fe87-314">The output shows that the array has been sorted by <xref:System.Tuple%608.Item1%2A>, or the tuple's first component.</span></span> <span data-ttu-id="3fe87-315">この例では、<xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29> メソッドが直接呼び出されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="3fe87-315">Note that the example does not directly call the <xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29> method.</span></span> <span data-ttu-id="3fe87-316">このメソッドは、配列内の各要素に対して <xref:System.Array.Sort%28System.Array%29> メソッドによって暗黙的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-316">This method is called implicitly by the <xref:System.Array.Sort%28System.Array%29> method for each element in the array.</span></span>  
  
 [!code-csharp[System.Tuple\`8.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`8.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3fe87-317"><paramref name="obj" /> は <see cref="T:System.Tuple`8" /> オブジェクトではありません。</span><span class="sxs-lookup"><span data-stu-id="3fe87-317"><paramref name="obj" /> is not a <see cref="T:System.Tuple`8" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Runtime::CompilerServices::ITuple::Item[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3fe87-318">指定した <see langword="Tuple" /> 要素のインデックス。</span><span class="sxs-lookup"><span data-stu-id="3fe87-318">The index of the specified <see langword="Tuple" /> element.</span></span> <span data-ttu-id="3fe87-319"><paramref name="index" /> の範囲は、<see langword="Item1" /> について 0 から、<see langword="Tuple" /> の要素の数より 1 少ない数までです。</span><span class="sxs-lookup"><span data-stu-id="3fe87-319"><paramref name="index" /> can range from 0 for <see langword="Item1" /> to one less than the number of elements in the <see langword="Tuple" />.</span></span></param>
        <summary><span data-ttu-id="3fe87-320">指定した <see langword="Tuple" /> 要素の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-320">Gets the value of the specified <see langword="Tuple" /> element.</span></span></summary>
        <value><span data-ttu-id="3fe87-321">指定した位置にある <see langword="Tuple" /> 要素の値。</span><span class="sxs-lookup"><span data-stu-id="3fe87-321">The value of the <see langword="Tuple" /> element at the specified position.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-322"><xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> プロパティは、明示的なインターフェイスの実装です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-322">The <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> property is an explicit interface implementation.</span></span> <span data-ttu-id="3fe87-323">これを呼び出すには、<xref:System.Tuple%608> オブジェクトを <xref:System.Runtime.CompilerServices.ITuple> インターフェイスオブジェクトにキャストまたは変換する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3fe87-323">To call it, you must cast or convert the <xref:System.Tuple%608> object to an <xref:System.Runtime.CompilerServices.ITuple> interface object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="3fe87-324"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-324"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="3fe87-325">または</span><span class="sxs-lookup"><span data-stu-id="3fe87-325">-or-</span></span> 
 <span data-ttu-id="3fe87-326"><paramref name="index" /> が <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-326"><paramref name="index" /> is greater than or equal to <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System::Runtime::CompilerServices::ITuple::Length { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Length" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3fe87-327"><see langword="Tuple" /> にある要素の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-327">Gets the number of elements in the <see langword="Tuple" />.</span></span></summary>
        <value><span data-ttu-id="3fe87-328"><see langword="Tuple" /> にある要素の数。</span><span class="sxs-lookup"><span data-stu-id="3fe87-328">The number of elements in the <see langword="Tuple" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-329"><xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> プロパティは、明示的なインターフェイスの実装です。</span><span class="sxs-lookup"><span data-stu-id="3fe87-329">The <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> property is an explicit interface implementation.</span></span> <span data-ttu-id="3fe87-330">このメソッドを呼び出すには、<xref:System.Tuple%608> 型を <xref:System.Runtime.CompilerServices.ITuple> インターフェイスオブジェクトにキャストまたは変換する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3fe87-330">To call it, you must cast or convert the <xref:System.Tuple%608> type to an <xref:System.Runtime.CompilerServices.ITuple> interface object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tuple.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3fe87-331">この <see cref="T:System.Tuple`8" /> インスタンスの値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-331">Returns a string that represents the value of this <see cref="T:System.Tuple`8" /> instance.</span></span></summary>
        <returns><span data-ttu-id="3fe87-332">この <see cref="T:System.Tuple`8" /> オブジェクトの文字列表現。</span><span class="sxs-lookup"><span data-stu-id="3fe87-332">The string representation of this <see cref="T:System.Tuple`8" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fe87-333">このメソッドによって返される文字列の形式は、(*Item1*、 *Item2*、 *Item3*、 *tuple.item4*、`Item5, Item6, Item7`、 *Item8*...) です。ここで、 *Item1* *、Item2*、 *Item3、tuple.item4*、 *tuple.item5* *、* *tuple.item6*、 *tuple.item7*は、<xref:System.Tuple%608.Item1%2A>、<xref:System.Tuple%608.Item2%2A>、<xref:System.Tuple%608.Item3%2A>、<xref:System.Tuple%608.Item4%2A>、<xref:System.Tuple%608.Item5%2A>、<xref:System.Tuple%608.Item6%2A>、および <xref:System.Tuple%608.Item7%2A> の各プロパティの値を表します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-333">The string returned by this method takes the form (*Item1*, *Item2*, *Item3*, *Item4*, `Item5, Item6, Item7`, *Item8*…), where *Item1*, *Item2*, *Item3*, *Item4*, *Item5*, *Item6*, and *Item7* represent the values of the <xref:System.Tuple%608.Item1%2A>, <xref:System.Tuple%608.Item2%2A>, <xref:System.Tuple%608.Item3%2A>, <xref:System.Tuple%608.Item4%2A>, <xref:System.Tuple%608.Item5%2A>, <xref:System.Tuple%608.Item6%2A>, and <xref:System.Tuple%608.Item7%2A> properties.</span></span> <span data-ttu-id="3fe87-334">*Item8*は、<xref:System.Tuple%608> オブジェクトの `Next.Item1` プロパティの値を表します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-334">*Item8* represents the value of the <xref:System.Tuple%608> object's `Next.Item1` property.</span></span> <span data-ttu-id="3fe87-335">入れ子になった追加のコンポーネントの値は、 *Item8*に従います。</span><span class="sxs-lookup"><span data-stu-id="3fe87-335">The value of any additional nested components follow *Item8*.</span></span> <span data-ttu-id="3fe87-336">いずれかのプロパティ値が `null`場合は、<xref:System.String.Empty?displayProperty=nameWithType>として表されます。</span><span class="sxs-lookup"><span data-stu-id="3fe87-336">If any of the property values is `null`, it is represented as <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fe87-337">次の例では、1860から1900までの、デトロイト市のミシガンの人口データを含む17組を作成します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-337">The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, from 1860 to 1900.</span></span> <span data-ttu-id="3fe87-338">次に、<xref:System.Tuple%608.ToString%2A> メソッドを使用して、組のデータを表示します。</span><span class="sxs-lookup"><span data-stu-id="3fe87-338">It then uses the <xref:System.Tuple%608.ToString%2A> method to display the tuple's data.</span></span>  
  
 [!code-csharp[System.Tuple\`8.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`8.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
