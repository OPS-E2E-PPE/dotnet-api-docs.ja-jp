<Type Name="ReadOnlySpan&lt;T&gt;+Enumerator" FullName="System.ReadOnlySpan&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d4fb5970a2200de77b4ecebaf6f82ef841d4c6aa" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73384016" /></Metadata><TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpan`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class ReadOnlySpan&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.ReadOnlySpan`1" /> の要素の列挙子を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

C# の[foreach](~/docs/csharp/language-reference/keywords/foreach-in.md)とVisual Basicの[For Each...Next](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)構造は、列挙子の複雑さを隠します。 列挙子を直接操作するのではなく、`foreach`または`For Each...Next`を使用することをお勧めします。 

初期状態で、列挙子は<xref:System.ReadOnlySpan`1>内の最初の要素の前に配置されます。 この位置では、<xref:System.ReadOnlySpan`1.Enumerator.Current> は未定義です。 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>の値を読み取る前に、<xref:System.ReadOnlySpan`1>を呼び出し、列挙子を<xref:System.ReadOnlySpan`1.Enumerator.Current>の最初の項目に進める必要があります。

<xref:System.ReadOnlySpan`1.Enumerator.Current>が呼び出されるまで、<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> は同じ値を返します。 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>は、<xref:System.ReadOnlySpan`1.Enumerator.Current>を<xref:System.ReadOnlySpan`1>の次の項目に設定します。

<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>が<xref:System.ReadOnlySpan`1>の末尾を超えた場合、<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>は`false`を返します。 列挙子がこの状態にある場合、<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>の後続の呼び出しも`false`を返し、<xref:System.ReadOnlySpan`1.Enumerator.Current>は未定義になります。 <xref:System.ReadOnlySpan`1.Enumerator.Current>に再度<xref:System.ReadOnlySpan`1>の最初の項目を設定することはできません。列挙子の新しいインスタンスを代わりに作成する必要があります。 

<xref:System.ReadOnlySpan`1>はスタックに割り当てられますが、<xref:System.ReadOnlySpan`1>の指す基底データはそうでない可能性があります。 そのため、<xref:System.ReadOnlySpan`1>の列挙処理は、本質的にはスレッド セーフな手順ではありません。 列挙中のスレッドセーフを保証するには、独自の同期を実装する必要があります。

<xref:System.ReadOnlySpan`1.Enumerator>は、.NETの他の列挙子構造体とは異なります。

- <xref:System.Collections.IEnumerator>または<xref:System.Collections.Generic.IEnumerator`1>インターフェイスを実装しません。 これは、<xref:System.ReadOnlySpan`1.Enumerator>が[ref 構造体](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types)であり、ボックス化できないためです。

- 列挙子をスパン内の最初の要素より前の初期位置に設定する、`Reset`メソッドは含まれません。 (<xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType>メソッドは、インターフェイスの一部として実装する必要がありますが、ほとんどの実装が例外をスローするか、実装されていません。)

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ Current { T&amp; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.ReadOnlySpan&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列挙子の現在位置にある項目への参照を取得します。</summary>
        <value><see cref="T:System.ReadOnlySpan`1" /> のうち、列挙子の現在位置にある要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

`Current`は、次の条件のいずれかの場合に未定義です 

- 列挙子が作成された直後、列挙子はスパンの最初の要素の前に配置されます。 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>の値を読み取る前に、`Current`を呼び出して、範囲の最初の要素へ列挙子を進める必要があります。

- <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>の最後の呼び出しが`false`を返した。これはスパンの終わりを示します。 

`Current`が呼び出されるまで、<xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> は同じ値を返します。 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>は`Current`をスパンの次の項目に設定します。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>列挙子を <see cref="T:System.ReadOnlySpan`1" /> の次の項目に進めます。</summary>
        <returns>列挙子が次の項目に正常に進んだ場合は <see langword="true" />、範囲の末尾を超えた場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

列挙子が作成された後、列挙子はスパンの最初の要素の前に配置されます。`MoveNext`の最初の呼び出しで、列挙子をスパンの最初の項目に進めます。 

`MoveNext`が範囲の末尾を超えた場合、`MoveNext`は`false`を返します。 列挙子がこの状態にある場合、`MoveNext`の後続の呼び出しも`false`を返します。

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
