<Type Name="ReadOnlySpan&lt;T&gt;+Enumerator" FullName="System.ReadOnlySpan&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a583db45cb87cdd05545e635ed88d44722db4b86" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83965879" /></Metadata><TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpan`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class ReadOnlySpan&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Memory" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e7e1d-101"><see cref="T:System.ReadOnlySpan`1" /> の要素の列挙子を提供します。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-101">Provides an enumerator for the elements of a <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e7e1d-102">C# の[foreach](/dotnet/csharp/language-reference/keywords/foreach-in)とVisual Basicの[For Each...Next](/dotnet/visual-basic/language-reference/statements/for-each-next-statement)構造は、列挙子の複雑さを隠します。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-102">The C# [foreach](/dotnet/csharp/language-reference/keywords/foreach-in) of the C# language and the [For Each...Next](/dotnet/visual-basic/language-reference/statements/for-each-next-statement) construct in Visual Basic hides the complexity of enumerators.</span></span> <span data-ttu-id="e7e1d-103">列挙子を直接操作するのではなく、`foreach`または`For Each...Next`を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-103">Instead of directly manipulating the enumerator, using `foreach` or `For Each...Next` is recommended.</span></span> 

<span data-ttu-id="e7e1d-104">初期状態で、列挙子は<xref:System.ReadOnlySpan`1>内の最初の要素の前に配置されます。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-104">Initially, the enumerator is positioned before the first element in the <xref:System.ReadOnlySpan`1>.</span></span> <span data-ttu-id="e7e1d-105">この位置では、<xref:System.ReadOnlySpan`1.Enumerator.Current> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-105">At this position, <xref:System.ReadOnlySpan`1.Enumerator.Current> is undefined.</span></span> <span data-ttu-id="e7e1d-106"><xref:System.ReadOnlySpan`1.Enumerator.Current>の値を読み取る前に、<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>を呼び出し、列挙子を<xref:System.ReadOnlySpan`1>の最初の項目に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-106">You must call <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> to advance the enumerator to the first item in the <xref:System.ReadOnlySpan`1> before reading the value of <xref:System.ReadOnlySpan`1.Enumerator.Current>.</span></span>

<span data-ttu-id="e7e1d-107"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>が呼び出されるまで、<xref:System.ReadOnlySpan`1.Enumerator.Current>は同じ値を返します。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-107"><xref:System.ReadOnlySpan`1.Enumerator.Current> returns the same value until <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="e7e1d-108"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>は、<xref:System.ReadOnlySpan`1.Enumerator.Current>を<xref:System.ReadOnlySpan`1>の次の項目に設定します。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-108"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> sets <xref:System.ReadOnlySpan`1.Enumerator.Current> to the next item in the <xref:System.ReadOnlySpan`1>.</span></span>

<span data-ttu-id="e7e1d-109"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>が<xref:System.ReadOnlySpan`1>の末尾を超えた場合、<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>は`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-109">If <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> passes the end of the <xref:System.ReadOnlySpan`1>, <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="e7e1d-110">列挙子がこの状態にある場合、<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>の後続の呼び出しも`false`を返し、<xref:System.ReadOnlySpan`1.Enumerator.Current>は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-110">When the enumerator is at this state, subsequent calls to <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> also return `false` and <xref:System.ReadOnlySpan`1.Enumerator.Current> is undefined.</span></span> <span data-ttu-id="e7e1d-111"><xref:System.ReadOnlySpan`1.Enumerator.Current>に再度<xref:System.ReadOnlySpan`1>の最初の項目を設定することはできません。列挙子の新しいインスタンスを代わりに作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-111">You cannot set <xref:System.ReadOnlySpan`1.Enumerator.Current> to the first item in the <xref:System.ReadOnlySpan`1> again; you must create a new enumerator instance instead.</span></span> 

<span data-ttu-id="e7e1d-112"><xref:System.ReadOnlySpan`1>はスタックに割り当てられますが、<xref:System.ReadOnlySpan`1>の指す基底データはそうでない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-112">Though the <xref:System.ReadOnlySpan`1> is allocated on the stack, the underlying data on which the <xref:System.ReadOnlySpan`1> points to, may not be.</span></span> <span data-ttu-id="e7e1d-113">そのため、<xref:System.ReadOnlySpan`1>の列挙処理は、本質的にはスレッド セーフな手順ではありません。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-113">Therefore, enumerating through a <xref:System.ReadOnlySpan`1> is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="e7e1d-114">列挙中のスレッドセーフを保証するには、独自の同期を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-114">To guarantee thread safety during enumeration, you must implement your own synchronization.</span></span>

<span data-ttu-id="e7e1d-115"><xref:System.ReadOnlySpan`1.Enumerator>は、.NETの他の列挙子構造体とは異なります。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-115">Unlike some other enumerator structures in .NET, the <xref:System.ReadOnlySpan`1.Enumerator>:</span></span>

- <span data-ttu-id="e7e1d-116"><xref:System.Collections.IEnumerator>または<xref:System.Collections.Generic.IEnumerator`1>インターフェイスを実装しません。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-116">Does not implement the <xref:System.Collections.IEnumerator> or <xref:System.Collections.Generic.IEnumerator`1> interface.</span></span> <span data-ttu-id="e7e1d-117">これは、<xref:System.ReadOnlySpan`1.Enumerator>が[ref 構造体](/dotnet/csharp/language-reference/builtin-types/struct#ref-struct)であり、ボックス化できないためです。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-117">This is because <xref:System.ReadOnlySpan`1.Enumerator> is a [ref struct](/dotnet/csharp/language-reference/builtin-types/struct#ref-struct) and cannot be boxed.</span></span>

- <span data-ttu-id="e7e1d-118">列挙子をスパン内の最初の要素より前の初期位置に設定する、`Reset`メソッドは含まれません。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-118">Does not include a `Reset` method, which can set the enumerator to its initial position before the first element in the span.</span></span> <span data-ttu-id="e7e1d-119">(<xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType>メソッドは、インターフェイスの一部として実装する必要がありますが、ほとんどの実装が例外をスローするか、実装されていません。)</span><span class="sxs-lookup"><span data-stu-id="e7e1d-119">(The <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> method must be implemented as part of the interface, but most implementors either throw an exception or provide no implementation.)</span></span>

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ Current { T&amp; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.ReadOnlySpan&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e7e1d-120">列挙子の現在位置にある項目への参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-120">Gets a reference to the item at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="e7e1d-121"><see cref="T:System.ReadOnlySpan`1" /> のうち、列挙子の現在位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-121">The element in the <see cref="T:System.ReadOnlySpan`1" /> at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e7e1d-122">`Current`は、次の条件のいずれかの場合に未定義です</span><span class="sxs-lookup"><span data-stu-id="e7e1d-122">`Current` is undefined under either of the following conditions:</span></span> 

- <span data-ttu-id="e7e1d-123">列挙子が作成された直後、列挙子はスパンの最初の要素の前に配置されます。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-123">Immediately after the enumerator is created, the enumerator is positioned before the first element in the span.</span></span> <span data-ttu-id="e7e1d-124">`Current`の値を読み取る前に、<xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>を呼び出して、範囲の最初の要素へ列挙子を進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-124"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> must be called to advance the enumerator to the first element of the span before reading the value of `Current`.</span></span>

- <span data-ttu-id="e7e1d-125"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>の最後の呼び出しが`false`を返した。これはスパンの終わりを示します。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-125">The last call to <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> returned `false`, which indicates the end of the span.</span></span> 

<span data-ttu-id="e7e1d-126"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>が呼び出されるまで、`Current`は同じ値を返します。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-126">`Current` returns the same value until <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> is called.</span></span> <span data-ttu-id="e7e1d-127"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>は`Current`をスパンの次の項目に設定します。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-127"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> sets `Current` to the next item in the span.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7e1d-128">列挙子を <see cref="T:System.ReadOnlySpan`1" /> の次の項目に進めます。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-128">Advances the enumerator to the next item of the <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
        <returns><span data-ttu-id="e7e1d-129">列挙子が次の項目に正常に進んだ場合は <see langword="true" />、範囲の末尾を超えた場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-129"><see langword="true" /> if the enumerator successfully advanced to the next item; <see langword="false" /> if the end of the span has been passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e7e1d-130">列挙子が作成された後、列挙子はスパンの最初の要素の前に配置されます。`MoveNext`の最初の呼び出しで、列挙子をスパンの最初の項目に進めます。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-130">After an enumerator is created, it is positioned before the first element in the span, and the first call to `MoveNext` advances the enumerator to the first item in the span.</span></span> 

<span data-ttu-id="e7e1d-131">`MoveNext`が範囲の末尾を超えた場合、`MoveNext`は`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-131">If `MoveNext` passes the end of the span, `MoveNext` returns `false`.</span></span> <span data-ttu-id="e7e1d-132">列挙子がこの状態にある場合、`MoveNext`の後続の呼び出しも`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="e7e1d-132">When the enumerator is at this state, subsequent calls to `MoveNext` also return `false`.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
