<Type Name="Func&lt;T1,T2,T3,T4,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e75c409b58a16c431065108e6cbda461cc8828ce" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83976196" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`5&lt;- T1, - T2, - T3, - T4, + TResult&gt; extends System.MulticastDelegate" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Func`5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4) As TResult " FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'T4, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 -&gt; 'Result" />
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;T1,T2,T3,T4,TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`5&lt;T1, T2, T3, T4, TResult&gt; extends System.MulticastDelegate" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of T1, T2, T3, T4, TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4) As TResult " FrameworkAlternate="netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="mscorlib" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
    <TypeForwarding From="System.Core" FromVersion="2.0.5.0" To="mscorlib" ToVersion="2.0.5.0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="c7bec-101">このデリゲートによってカプセル化されるメソッドの最初のパラメーターの型。</span><span class="sxs-lookup"><span data-stu-id="c7bec-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="c7bec-102">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーターの型。</span><span class="sxs-lookup"><span data-stu-id="c7bec-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T3"><span data-ttu-id="c7bec-103">このデリゲートによってカプセル化されるメソッドの 3 番目のパラメーターの型。</span><span class="sxs-lookup"><span data-stu-id="c7bec-103">The type of the third parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T4"><span data-ttu-id="c7bec-104">このデリゲートによってカプセル化されるメソッドの 4 番目のパラメーターの型。</span><span class="sxs-lookup"><span data-stu-id="c7bec-104">The type of the fourth parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="c7bec-105">このデリゲートによってカプセル化されるメソッドの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="c7bec-105">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="c7bec-106">このデリゲートによってカプセル化されるメソッドの最初のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="c7bec-106">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="c7bec-107">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="c7bec-107">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg3"><span data-ttu-id="c7bec-108">このデリゲートによってカプセル化されるメソッドの 3 番目のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="c7bec-108">The third parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg4"><span data-ttu-id="c7bec-109">このデリゲートによってカプセル化されるメソッドの 4 番目のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="c7bec-109">The fourth parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="c7bec-110">4 個のパラメーターを持ち、<typeparamref name="TResult" /> パラメーターで指定された型の値を返すメソッドをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="c7bec-110">Encapsulates a method that has four parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="c7bec-111">このデリゲートによってカプセル化されるメソッドの戻り値。</span><span class="sxs-lookup"><span data-stu-id="c7bec-111">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c7bec-112">このデリゲートを使用すると、カスタムデリゲートを明示的に宣言しなくてもパラメーターとして渡すことができるメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="c7bec-112">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="c7bec-113">カプセル化されたメソッドは、このデリゲートで定義されているメソッドシグネチャに対応している必要があります。</span><span class="sxs-lookup"><span data-stu-id="c7bec-113">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="c7bec-114">つまり、カプセル化されたメソッドには4つのパラメーターが必要であり、それぞれが値で渡され、値を返す必要があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="c7bec-114">This means that the encapsulated method must have four parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c7bec-115">4つのパラメーターを持ち `void` を返すメソッドを参照するには (Visual Basic で、`Function`ではなく `Sub` として宣言されている)、代わりに汎用 <xref:System.Action%604> デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="c7bec-115">To reference a method that has four parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%604> delegate instead.</span></span>  
  
 <span data-ttu-id="c7bec-116"><xref:System.Func%605> デリゲートを使用する場合は、4つのパラメーターを持つメソッドをカプセル化するデリゲートを明示的に定義する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="c7bec-116">When you use the <xref:System.Func%605> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters.</span></span> <span data-ttu-id="c7bec-117">たとえば、次のコードでは、`Searcher` という名前の汎用デリゲートを明示的に宣言し、そのデリゲートインスタンスに <xref:System.String.IndexOf%2A> メソッドへの参照を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="c7bec-117">For example, the following code explicitly declares a generic delegate named `Searcher` and assigns a reference to the <xref:System.String.IndexOf%2A> method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Delegate.cs#1)]
 [!code-vb[System.Func~5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="c7bec-118">次の例では、新しいデリゲートを明示的に定義し、名前付きメソッドを割り当てるのではなく、<xref:System.Func%605> デリゲートをインスタンス化することによって、このコードを簡略化します。</span><span class="sxs-lookup"><span data-stu-id="c7bec-118">The following example simplifies this code by instantiating the <xref:System.Func%605> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~5#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Func5.cs#2)]
 [!code-vb[System.Func~5#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Func5.vb#2)]  
  
 <span data-ttu-id="c7bec-119">次の例に示すように、でC#は <xref:System.Func%605> デリゲートを匿名メソッドと共に使用できます。</span><span class="sxs-lookup"><span data-stu-id="c7bec-119">You can use the <xref:System.Func%605> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="c7bec-120">(匿名メソッドの概要については、「[匿名メソッド](/dotnet/csharp/programming-guide/statements-expressions-operators/anonymous-methods)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="c7bec-120">(For an introduction to anonymous methods, see [Anonymous Methods](/dotnet/csharp/programming-guide/statements-expressions-operators/anonymous-methods).)</span></span>  
  
 [!code-csharp[System.Func~5#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Anon.cs#3)]  
  
 <span data-ttu-id="c7bec-121">次の例に示すように、ラムダ式を <xref:System.Func%605> デリゲートに割り当てることもできます。</span><span class="sxs-lookup"><span data-stu-id="c7bec-121">You can also assign a lambda expression to a <xref:System.Func%605> delegate, as the following example illustrates.</span></span> <span data-ttu-id="c7bec-122">(ラムダ式の概要については、「[ラムダ式](/dotnet/visual-basic/programming-guide/language-features/procedures/lambda-expressions)」と「[ラムダ式](/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="c7bec-122">(For an introduction to lambda expressions, see [Lambda Expressions](/dotnet/visual-basic/programming-guide/language-features/procedures/lambda-expressions) and [Lambda Expressions](/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions).)</span></span>  
  
 [!code-csharp[System.Func~5#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Lambda.cs#4)]
 [!code-vb[System.Func~5#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="c7bec-123">ラムダ式の基になる型は、ジェネリック `Func` デリゲートの1つです。</span><span class="sxs-lookup"><span data-stu-id="c7bec-123">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="c7bec-124">これにより、ラムダ式をデリゲートに明示的に代入せずに、パラメーターとして渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="c7bec-124">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="c7bec-125">特に、<xref:System.Linq> 名前空間の型の多くのメソッドには `Func` パラメーターがあるため、`Func` デリゲートを明示的にインスタンス化せずに、これらのメソッドにラムダ式を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="c7bec-125">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c7bec-126">次の例は、<xref:System.Func%603> デリゲートを宣言して使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c7bec-126">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="c7bec-127">この例では、<xref:System.Func%603> 変数を宣言し、<xref:System.String> 値と <xref:System.Int32> 値をパラメーターとして受け取るラムダ式を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="c7bec-127">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="c7bec-128">ラムダ式は、<xref:System.String> パラメーターの長さが <xref:System.Int32> パラメーターの値と等しい場合に `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="c7bec-128">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="c7bec-129">その後、このメソッドをカプセル化するデリゲートは、文字列の配列内の文字列をフィルター処理するためにクエリで使用されます。</span><span class="sxs-lookup"><span data-stu-id="c7bec-129">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions"><span data-ttu-id="c7bec-130">ラムダ式 (C# プログラミング ガイド)</span><span class="sxs-lookup"><span data-stu-id="c7bec-130">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/procedures/lambda-expressions"><span data-ttu-id="c7bec-131">ラムダ式</span><span class="sxs-lookup"><span data-stu-id="c7bec-131">Lambda Expressions</span></span></related>
    <related type="Article" href="/dotnet/csharp/programming-guide/delegates/"><span data-ttu-id="c7bec-132">デリゲート (C# プログラミング ガイド)</span><span class="sxs-lookup"><span data-stu-id="c7bec-132">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/delegates/"><span data-ttu-id="c7bec-133">Visual Basic 内のデリゲート</span><span class="sxs-lookup"><span data-stu-id="c7bec-133">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>
