<Type Name="Delegate" FullName="System.Delegate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fe0923b02c59df19b6a47c8736f1e550f384af41" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77229030" /></Metadata><TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Delegate = class&#xA;    interface ICloneable&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="60f23-101">デリゲートを表します。デリゲートとは、静的メソッドを参照するデータ構造、またはクラス インスタンスおよびクラスのインスタンス メソッドを参照するデータ構造です。</span><span class="sxs-lookup"><span data-stu-id="60f23-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-102"><xref:System.Delegate> クラスは、デリゲート型の基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="60f23-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="60f23-103">ただし、システムとコンパイラだけを <xref:System.Delegate> クラスまたは <xref:System.MulticastDelegate> クラスから明示的に派生させることができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="60f23-104">また、デリゲート型から新しい型を派生させることもできません。</span><span class="sxs-lookup"><span data-stu-id="60f23-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="60f23-105"><xref:System.Delegate> クラスは、デリゲート型とは見なされません。これは、デリゲート型を派生させるために使用されるクラスです。</span><span class="sxs-lookup"><span data-stu-id="60f23-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="60f23-106">ほとんどの言語では `delegate` キーワードが実装されており、これらの言語のコンパイラは、<xref:System.MulticastDelegate> クラスから派生できます。そのため、ユーザーは、言語によって提供される `delegate` キーワードを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-107">共通言語ランタイムは、デリゲートと同じシグネチャを持つデリゲート型ごとに `Invoke` メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="60f23-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="60f23-108">このメソッドは、コンパイラによって自動的にC#呼び出されるため、、 C++Visual Basic、またはビジュアルから明示的に呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="60f23-109">`Invoke` メソッドは、デリゲート型のシグネチャを検索する場合に、[リフレクション](~/docs/framework/reflection-and-codedom/reflection.md)に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="60f23-109">The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="60f23-110">共通言語ランタイムは、デリゲートの非同期呼び出しを可能にするために、`BeginInvoke` および `EndInvoke` メソッドを使用して各デリゲート型を提供します。</span><span class="sxs-lookup"><span data-stu-id="60f23-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="60f23-111">これらのメソッドの詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="60f23-112">デリゲート型の宣言は、1つまたは複数のメソッドのシグネチャを指定するコントラクトを確立します。</span><span class="sxs-lookup"><span data-stu-id="60f23-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="60f23-113">デリゲートは、への参照を持つデリゲート型のインスタンスです。</span><span class="sxs-lookup"><span data-stu-id="60f23-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="60f23-114">型のインスタンスメソッドとターゲットオブジェクトは、その型に割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="60f23-115">型のインスタンスメソッドです。非表示の `this` パラメーターは、仮パラメーターリストで公開されています。</span><span class="sxs-lookup"><span data-stu-id="60f23-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="60f23-116">デリゲートは、オープンインスタンスデリゲートと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="60f23-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="60f23-117">静的メソッド。</span><span class="sxs-lookup"><span data-stu-id="60f23-117">A static method.</span></span>  
  
-   <span data-ttu-id="60f23-118">静的メソッドとターゲットオブジェクトは、メソッドの最初のパラメーターに割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="60f23-119">デリゲートは、最初の引数に対して閉じられると言います。</span><span class="sxs-lookup"><span data-stu-id="60f23-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="60f23-120">デリゲートバインディングの詳細については、「<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> メソッドのオーバーロード」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-121">.NET Framework バージョン1.0 および1.1 では、デリゲートはメソッドのシグネチャがデリゲート型によって指定されたシグネチャと完全に一致する場合にのみメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="60f23-122">したがって、上記のリストの最初と3番目の箇条書きのみがサポートされており、最初の箇条書きでは正確な型の一致が必要です。</span><span class="sxs-lookup"><span data-stu-id="60f23-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="60f23-123">デリゲートが最初の引数に対して閉じたインスタンスメソッドを表す場合 (最も一般的なケース)、デリゲートは、メソッドのエントリポイントへの参照と、ターゲットと呼ばれるオブジェクトへの参照を格納します。これは、b.</span><span class="sxs-lookup"><span data-stu-id="60f23-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="60f23-124">デリゲートがオープンインスタンスメソッドを表す場合は、メソッドのエントリポイントへの参照を格納します。</span><span class="sxs-lookup"><span data-stu-id="60f23-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="60f23-125">デリゲートシグネチャには、非表示の `this` パラメーターを仮パラメーターリストに含める必要があります。この場合、デリゲートにはターゲットオブジェクトへの参照がなく、デリゲートの呼び出し時にターゲットオブジェクトを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="60f23-126">デリゲートが静的メソッドを表す場合、デリゲートはメソッドのエントリポイントへの参照を格納します。</span><span class="sxs-lookup"><span data-stu-id="60f23-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="60f23-127">デリゲートが最初の引数に対して閉じた静的メソッドを表す場合、デリゲートはメソッドのエントリポイントへの参照と、メソッドの最初の引数の型に割り当て可能なターゲットオブジェクトへの参照を格納します。</span><span class="sxs-lookup"><span data-stu-id="60f23-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="60f23-128">デリゲートが呼び出されると、静的メソッドの最初の引数はターゲットオブジェクトを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="60f23-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="60f23-129">デリゲートの呼び出しリストは、リストの各要素がデリゲートによって表されるメソッドの1つを厳密に呼び出すデリゲートの順序付きセットです。</span><span class="sxs-lookup"><span data-stu-id="60f23-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="60f23-130">呼び出しリストには、重複するメソッドを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="60f23-131">呼び出し時に、メソッドは呼び出しリストに出現する順序で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="60f23-132">デリゲートは、呼び出しリスト内のすべてのメソッドを呼び出そうとします。重複は、呼び出しリストに出現するたびに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="60f23-133">デリゲートは変更できません。作成されると、デリゲートの呼び出しリストは変更されません。</span><span class="sxs-lookup"><span data-stu-id="60f23-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="60f23-134">デリゲートは1つ以上のメソッドを呼び出すことができ、組み合わせ操作で使用できるため、デリゲートはマルチキャスト (組み合わせ可能) と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="60f23-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="60f23-135"><xref:System.Delegate.Combine%2A> や <xref:System.Delegate.Remove%2A>などの組み合わせ操作では、既存のデリゲートを変更しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="60f23-136">代わりに、このような操作では、操作の結果、変更されていないデリゲート、または `null`を含む新しいデリゲートが返されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="60f23-137">結合操作は、操作の結果が1つ以上のメソッドを参照しないデリゲートである場合に `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="60f23-138">結合操作は、要求された操作に影響がない場合に、変更されていないデリゲートを返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-139">マネージ言語では、<xref:System.Delegate.Combine%2A> メソッドと <xref:System.Delegate.Remove%2A> メソッドを使用して、デリゲート操作を実装します。</span><span class="sxs-lookup"><span data-stu-id="60f23-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="60f23-140">例としては、Visual Basic 内の `AddHandler` および `RemoveHandler` ステートメントと、のC#デリゲート型に対する + = 演算子および-= 演算子があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="60f23-141">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、ジェネリックデリゲート型にバリアント型パラメーターを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="60f23-142">反変の型パラメーターは、デリゲートのパラメーターの型として使用できます。また、共変の型パラメーターを戻り値の型として使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="60f23-143">この機能を使用すると、[共変性と反変性](~/docs/standard/generics/covariance-and-contravariance.md)に関する説明に従って、型引数が継承関係を持つ参照型である場合に、同じジェネリック型定義から構築されたジェネリックデリゲート型を割り当て互換にすることができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-144">分散によって割り当て互換性がある汎用デリゲートは、必ずしも組み合わせ可能であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="60f23-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="60f23-145">組み合わせ可能にするには、型が正確に一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="60f23-146">たとえば、`Derived` という名前のクラスが `Base`という名前のクラスから派生しているとします。</span><span class="sxs-lookup"><span data-stu-id="60f23-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="60f23-147">型 `Action<Base>` (Visual Basic 内の`Action(Of Base)`) のデリゲートは `Action<Derived>`型の変数に割り当てることができますが、型が正確に一致しないため、2つのデリゲートを組み合わせることはできません。</span><span class="sxs-lookup"><span data-stu-id="60f23-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="60f23-148">呼び出されたメソッドが例外をスローした場合、メソッドは実行を停止し、例外はデリゲートの呼び出し元に戻され、呼び出しリスト内の残りのメソッドは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="60f23-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="60f23-149">呼び出し元で例外をキャッチしても、この動作は変更されません。</span><span class="sxs-lookup"><span data-stu-id="60f23-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="60f23-150">デリゲートによって呼び出されたメソッドのシグネチャに戻り値が含まれている場合、デリゲートは呼び出しリスト内の最後の要素の戻り値を返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="60f23-151">シグネチャに参照によって渡されたパラメーターが含まれている場合、パラメーターの最終的な値は、呼び出しリスト内のすべてのメソッドのうち、連続して実行され、パラメーターの値が更新された結果になります。</span><span class="sxs-lookup"><span data-stu-id="60f23-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="60f23-152">C のデリゲートに最も近いものは、関数ポインターです。</span><span class="sxs-lookup"><span data-stu-id="60f23-152">The closest equivalent of a delegate in C is a function pointer.</span></span> <span data-ttu-id="60f23-153">デリゲートは、静的メソッドまたはインスタンスメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="60f23-154">デリゲートがインスタンスメソッドを表す場合、デリゲートは、メソッドのエントリポイントへの参照だけでなく、クラスインスタンスへの参照も格納します。</span><span class="sxs-lookup"><span data-stu-id="60f23-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="60f23-155">関数ポインターとは異なり、デリゲートはオブジェクト指向でタイプセーフです。</span><span class="sxs-lookup"><span data-stu-id="60f23-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60f23-156">次の例は、`myMethodDelegate`という名前のデリゲートを定義する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="60f23-157">このデリゲートのインスタンスは、インスタンスメソッドと入れ子になった `mySampleClass` クラスの静的メソッドに対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="60f23-158">インスタンスメソッドのデリゲートには `mySampleClass`のインスタンスが必要です。</span><span class="sxs-lookup"><span data-stu-id="60f23-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="60f23-159">`mySampleClass` インスタンスは `mySC`という名前の変数に保存されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
    <related type="Article" href="https://msdn.microsoft.com/library/41972034-92ed-450a-9664-ab93fcc6f1fb"><span data-ttu-id="60f23-160">同期メソッドの非同期呼び出し</span><span class="sxs-lookup"><span data-stu-id="60f23-160">Calling Synchronous Methods Asynchronously</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="60f23-161">デリゲート (C# プログラミング ガイド)</span><span class="sxs-lookup"><span data-stu-id="60f23-161">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="60f23-162">デリゲート (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="60f23-162">Delegates (Visual Basic)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/1cdf3420-89c1-47c0-b796-aa984020e0f8"><span data-ttu-id="60f23-163">方法: デリゲートを定義および使用する (C++/CLI)</span><span class="sxs-lookup"><span data-stu-id="60f23-163">How to: Define and Use Delegates (C++/CLI)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f"><span data-ttu-id="60f23-164">イベントの処理と発生</span><span class="sxs-lookup"><span data-stu-id="60f23-164">Handling and Raising Events</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60f23-165">新しいデリゲートを初期化します。</span><span class="sxs-lookup"><span data-stu-id="60f23-165">Initializes a new delegate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : obj * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="method" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="60f23-166">デリゲートが <paramref name="method" /> を呼び出す対象のクラス インスタンス。</span><span class="sxs-lookup"><span data-stu-id="60f23-166">The class instance on which the delegate invokes <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="60f23-167">デリゲートによって表されるインスタンス メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="60f23-167">The name of the instance method that the delegate represents.</span></span></param>
        <summary><span data-ttu-id="60f23-168">指定したインスタンス メソッドを指定のクラス インスタンスに対して呼び出すデリゲートを初期化します。</span><span class="sxs-lookup"><span data-stu-id="60f23-168">Initializes a delegate that invokes the specified instance method on the specified class instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-169">このコンストラクターは、アプリケーションコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="60f23-169">This constructor cannot be used in application code.</span></span> <span data-ttu-id="60f23-170">インスタンスメソッドの名前を指定してデリゲートを作成するには、メソッド名とターゲットオブジェクトを指定する <xref:System.Delegate.CreateDelegate%2A> メソッドのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="60f23-170">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="60f23-171">たとえば、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> メソッドオーバーロードは、指定された名前を持つインスタンスメソッドのデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-171">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="60f23-172">このコンストラクターは、インスタンスメソッドに対してのみデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-172">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="60f23-173">インスタンスメソッドは、クラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられているメソッドです。</span><span class="sxs-lookup"><span data-stu-id="60f23-173">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60f23-174"><paramref name="target" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-174"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-175">または</span><span class="sxs-lookup"><span data-stu-id="60f23-175">-or-</span></span> 
 <span data-ttu-id="60f23-176"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-176"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-177">呼び出し先のメソッドをバインドするときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="60f23-177">There was an error binding to the target method.</span></span></exception>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : Type * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="method" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="60f23-178"><see cref="T:System.Type" /> を定義するクラスを表す <paramref name="method" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-178">The <see cref="T:System.Type" /> representing the class that defines <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="60f23-179">デリゲートによって表される静的メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="60f23-179">The name of the static method that the delegate represents.</span></span></param>
        <summary><span data-ttu-id="60f23-180">指定したクラスから指定の静的メソッドを呼び出すデリゲートを初期化します。</span><span class="sxs-lookup"><span data-stu-id="60f23-180">Initializes a delegate that invokes the specified static method from the specified class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-181">このコンストラクターは、アプリケーションコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="60f23-181">This constructor cannot be used in application code.</span></span> <span data-ttu-id="60f23-182">静的メソッドの名前を指定してデリゲートを作成するには、メソッド名を指定し、ターゲットオブジェクトを指定しない <xref:System.Delegate.CreateDelegate%2A> メソッドのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="60f23-182">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="60f23-183">たとえば、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> メソッドオーバーロードは、指定された名前を持つメソッドの静的デリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-183">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="60f23-184">このコンストラクターは、静的メソッドに対してのみデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-184">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="60f23-185">インスタンスメソッドは、クラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられているメソッドです。</span><span class="sxs-lookup"><span data-stu-id="60f23-185">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60f23-186"><paramref name="target" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-186"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-187">または</span><span class="sxs-lookup"><span data-stu-id="60f23-187">-or-</span></span> 
 <span data-ttu-id="60f23-188"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-188"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-189"><paramref name="target" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-189"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="60f23-190">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-190">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="60f23-191">または</span><span class="sxs-lookup"><span data-stu-id="60f23-191">-or-</span></span> 
 <span data-ttu-id="60f23-192"><paramref name="target" /> は、オープン ジェネリック型を表します。</span><span class="sxs-lookup"><span data-stu-id="60f23-192"><paramref name="target" /> represents an open generic type.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="delegate.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60f23-193">デリゲートの簡易コピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-193">Creates a shallow copy of the delegate.</span></span></summary>
        <returns><span data-ttu-id="60f23-194">デリゲートの簡易コピー。</span><span class="sxs-lookup"><span data-stu-id="60f23-194">A shallow copy of the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-195">複製には、元のデリゲートと同じ <xref:System.Type>、ターゲット、メソッド、および呼び出しリストがあります。</span><span class="sxs-lookup"><span data-stu-id="60f23-195">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="60f23-196">シャローコピーは、元のオブジェクトと同じ型の新しいインスタンスを作成し、元のオブジェクトの非静的フィールドをコピーします。</span><span class="sxs-lookup"><span data-stu-id="60f23-196">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="60f23-197">フィールドが値型の場合は、フィールドのビットごとのコピーが実行されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-197">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="60f23-198">フィールドが参照型の場合、参照はコピーされますが、参照先のオブジェクトはコピーされません。したがって、元のオブジェクトの参照と複製内の参照は、同じオブジェクトを指します。</span><span class="sxs-lookup"><span data-stu-id="60f23-198">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="60f23-199">これに対し、オブジェクトの詳細コピーでは、オブジェクトのフィールドによって直接的または間接的に参照されるすべてのものが複製されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-199">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60f23-200">指定したマルチキャスト (組み合わせ可能) デリゲートの呼び出しリストを連結します。</span><span class="sxs-lookup"><span data-stu-id="60f23-200">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate[] -&gt; Delegate" Usage="System.Delegate.Combine delegates" />
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate[] delegates);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (delegates As Delegate()) As Delegate" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(cli::array &lt;Delegate ^&gt; ^ delegates);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates"><span data-ttu-id="60f23-201">組み合わせるデリゲートの配列。</span><span class="sxs-lookup"><span data-stu-id="60f23-201">The array of delegates to combine.</span></span></param>
        <summary><span data-ttu-id="60f23-202">デリゲートの配列の呼び出しリストを連結します。</span><span class="sxs-lookup"><span data-stu-id="60f23-202">Concatenates the invocation lists of an array of delegates.</span></span></summary>
        <returns><span data-ttu-id="60f23-203"><paramref name="delegates" /> 配列内のデリゲートの呼び出しリストが連結された単一の呼び出しリストを持つ新しいデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-203">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span></span> <span data-ttu-id="60f23-204"><see langword="null" /> が <paramref name="delegates" /> の場合、<see langword="null" /> の要素が 0 個の場合、または <paramref name="delegates" /> のすべてのエントリが <paramref name="delegates" /> の場合は、<see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-204">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-205">`delegates` 配列に `null`れるエントリが含まれている場合、それらのエントリは無視されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-205">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="60f23-206">呼び出しリストには、重複するエントリを含めることができます。つまり、同じオブジェクトで同じメソッドを参照するエントリです。</span><span class="sxs-lookup"><span data-stu-id="60f23-206">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-207">分散によって割り当て互換性がある汎用デリゲートは、必ずしも組み合わせ可能であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="60f23-207">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="60f23-208">組み合わせ可能にするには、型が正確に一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-208">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="60f23-209">たとえば、`Derived` という名前のクラスが `Base`という名前のクラスから派生しているとします。</span><span class="sxs-lookup"><span data-stu-id="60f23-209">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="60f23-210">`Action<Base>` (Visual Basic 内の`Action(Of Base)`) のデリゲートは `Action<Derived>`型の変数に割り当てることができますが、「[共変性と反変性](~/docs/standard/generics/covariance-and-contravariance.md)」で説明されていますが、型が正確に一致しないため、2つのデリゲートを組み合わせることはできません。</span><span class="sxs-lookup"><span data-stu-id="60f23-210">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="60f23-211"><xref:System.Delegate.Combine%2A> は、イベントが発生するたびに複数のメソッドを呼び出すイベントハンドラーを作成する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="60f23-211"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-212"><paramref name="delegates" /> 内の null でないすべてのエントリが同じデリゲート型のインスタンスではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-212">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span></span></exception>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Combine (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="60f23-213">連結後のリスト内で前に配置する呼び出しリストを持つデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-213">The delegate whose invocation list comes first.</span></span></param>
        <param name="b"><span data-ttu-id="60f23-214">連結後のリスト内で後に配置する呼び出しリストを持つデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-214">The delegate whose invocation list comes last.</span></span></param>
        <summary><span data-ttu-id="60f23-215">2 つのデリゲートの呼び出しリストを連結します。</span><span class="sxs-lookup"><span data-stu-id="60f23-215">Concatenates the invocation lists of two delegates.</span></span></summary>
        <returns><span data-ttu-id="60f23-216"><paramref name="a" /> と <paramref name="b" /> の呼び出しリストをこの順番で連結した単一の呼び出しリストを持つ新しいデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-216">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span></span> <span data-ttu-id="60f23-217"><paramref name="a" /> が <paramref name="b" /> の場合は <see langword="null" /> を、<paramref name="b" /> が null 参照の場合は <paramref name="a" /> を返します。また、<paramref name="a" /> と <paramref name="b" /> の両方が null 参照の場合は null 参照を返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-217">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-218">呼び出しリストには、重複するエントリを含めることができます。つまり、同じオブジェクトで同じメソッドを参照するエントリです。</span><span class="sxs-lookup"><span data-stu-id="60f23-218">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-219">分散によって割り当て互換性がある汎用デリゲートは、必ずしも組み合わせ可能であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="60f23-219">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="60f23-220">組み合わせ可能にするには、型が正確に一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-220">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="60f23-221">たとえば、`Derived` という名前のクラスが `Base`という名前のクラスから派生しているとします。</span><span class="sxs-lookup"><span data-stu-id="60f23-221">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="60f23-222">`Action<Base>` (Visual Basic 内の`Action(Of Base)`) のデリゲートは `Action<Derived>`型の変数に割り当てることができますが、「[共変性と反変性](~/docs/standard/generics/covariance-and-contravariance.md)」で説明されていますが、型が正確に一致しないため、2つのデリゲートを組み合わせることはできません。</span><span class="sxs-lookup"><span data-stu-id="60f23-222">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="60f23-223"><xref:System.Delegate.Combine%2A> は、イベントが発生するたびに複数のメソッドを呼び出すイベントハンドラーを作成する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="60f23-223"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-224"><paramref name="a" /> と <paramref name="b" /> の両方が <see langword="null" /> ではなく、<paramref name="a" /> と <paramref name="b" /> が同じデリゲート型のインスタンスではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-224">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span></span></exception>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member CombineImpl : Delegate -&gt; Delegate&#xA;override this.CombineImpl : Delegate -&gt; Delegate" Usage="delegate.CombineImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="60f23-225">現在のマルチキャスト (組み合わせ可能) デリゲートの呼び出しリストの末尾に追加される呼び出しリストを持つマルチキャスト (組み合わせ可能) デリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-225">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span></span></param>
        <summary><span data-ttu-id="60f23-226">指定したマルチキャスト (組み合わせ可能) デリゲートと現在のマルチキャスト (組み合わせ可能) デリゲートの呼び出しリストを連結します。</span><span class="sxs-lookup"><span data-stu-id="60f23-226">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span></span></summary>
        <returns><span data-ttu-id="60f23-227">現在のマルチキャスト (組み合わせ可能) デリゲートの呼び出しリストと <paramref name="d" /> の呼び出しリストを連結した単一の呼び出しリストを持つ新しいマルチキャスト (組み合わせ可能) デリゲート。<paramref name="d" /> が <see langword="null" /> の場合は、現在のマルチキャスト (組み合わせ可能) デリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-227">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-228">このメソッドは、現在のデリゲートがマルチキャスト (組み合わせ可能) である場合にのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-228">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="60f23-229">現在の実装では、単に <xref:System.MulticastNotSupportedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-229">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="60f23-230">呼び出しリストには、重複するエントリを含めることができます。つまり、同じオブジェクトで同じメソッドを参照するエントリです。</span><span class="sxs-lookup"><span data-stu-id="60f23-230">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException"><span data-ttu-id="60f23-231">常にスローされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-231">Always thrown.</span></span></exception>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60f23-232">指定した型のデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-232">Creates a delegate of the specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60f23-233">作成するデリゲートの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-233">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="method"><span data-ttu-id="60f23-234">デリゲートが表す静的メソッドまたはインスタンス メソッドの情報を保持する <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-234">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span> <span data-ttu-id="60f23-235">.NET Framework Version 1.0 および 1.1 では、静的メソッドのみサポートされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-235">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span></span></param>
        <summary><span data-ttu-id="60f23-236">指定した静的メソッドを表すために、指定した型のデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-236">Creates a delegate of the specified type to represent the specified static method.</span></span></summary>
        <returns><span data-ttu-id="60f23-237">指定した静的メソッドを表すための、指定した型のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-237">A delegate of the specified type to represent the specified static method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-238">.NET Framework バージョン1.0 および1.1 では、このメソッドオーバーロードは静的メソッドに対してのみデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-238">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="60f23-239">.NET Framework バージョン2.0 では、このメソッドオーバーロードは、オープンインスタンスメソッドデリゲートを作成することもできます。つまり、インスタンスメソッドの非表示の最初の引数を明示的に指定するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-239">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="60f23-240">詳細については、「メソッドの <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> 一般的なオーバーロード」を参照してください。これにより、インスタンスまたは静的メソッドのオープンまたはクローズデリゲートのすべての組み合わせを作成できます。また、必要に応じて、最初の引数を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-240">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-241">このメソッドオーバーロードは、デリゲートが最初の引数に対して閉じられていない場合に使用する必要があります。これは、その場合は多少高速になるためです。</span><span class="sxs-lookup"><span data-stu-id="60f23-241">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="60f23-242">このメソッドのオーバーロードは、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> メソッドのオーバーロードを呼び出し、`throwOnBindFailure`に `true` を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="60f23-242">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-243">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]以降では、このメソッドを使用して、呼び出し元に <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> フラグで <xref:System.Security.Permissions.ReflectionPermission> が許可されていて、非パブリックメソッドの許可セットが呼び出し元の許可セットまたはそのサブセットに制限されている場合に、パブリックでないメソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-243">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="60f23-244">(「[リフレクションのセキュリティに関する考慮事項」を](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)参照してください)。</span><span class="sxs-lookup"><span data-stu-id="60f23-244">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60f23-245">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-245">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="60f23-246">互換性のあるパラメーターの型と戻り値の型</span><span class="sxs-lookup"><span data-stu-id="60f23-246">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="60f23-247">.NET Framework バージョン2.0 では、このメソッドオーバーロードを使用して作成されたデリゲートのパラメーターの型と戻り値の型は、デリゲートが表すメソッドのパラメーターの型および戻り値の型と互換性がある必要があります。型が正確に一致する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-247">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="60f23-248">これは .NET Framework バージョン1.0 および1.1 でのバインディング動作の緩和を表します。この場合、型は正確に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-248">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="60f23-249">デリゲートのパラメーターにメソッドのパラメーターよりも限定的な型が指定された場合、両者のパラメーター間に型の互換性があると見なされます。これによって、デリゲートに渡された引数が、メソッドに対して安全に渡されることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-249">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="60f23-250">同様に、メソッドの戻り値の型の制限がデリゲートの戻り値の型より多いと、メソッドの戻り値がデリゲートの戻り値の型に安全にキャストされることが保証されるため、デリゲートの戻り値の型とメソッドの戻り値の型には互換性があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-250">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="60f23-251">たとえば、型 <xref:System.Collections.Hashtable> のパラメーターと <xref:System.Object> の戻り値の型を持つデリゲートは、<xref:System.Object> 型のパラメーターと <xref:System.Collections.Hashtable>型の戻り値を持つメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-251">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60f23-252">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="60f23-252">This section contains two code examples.</span></span> <span data-ttu-id="60f23-253">最初の例は、このメソッドオーバーロードを使用して作成できる2種類のデリゲートを示しています。これは、インスタンスメソッドを開き、静的メソッドで開くことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-253">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="60f23-254">2番目のコード例は、互換性のあるパラメーターの型と戻り値の型を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-254">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="60f23-255">**例 1**</span><span class="sxs-lookup"><span data-stu-id="60f23-255">**Example 1**</span></span>  
  
 <span data-ttu-id="60f23-256">次のコード例は、<xref:System.Delegate.CreateDelegate%2A> メソッドのこのオーバーロードを使用してデリゲートを作成する2つの方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-256">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-257">最初の引数ではなく <xref:System.Reflection.MethodInfo> を指定する <xref:System.Delegate.CreateDelegate%2A> メソッドのオーバーロードが2つあります。これらの機能は同じですが、バインドに失敗した場合にをスローするかどうかを指定でき、もう1つは常にをスローします。</span><span class="sxs-lookup"><span data-stu-id="60f23-257">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="60f23-258">このコード例では、両方のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="60f23-258">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="60f23-259">この例では、静的メソッド `M2`、インスタンスメソッド `M1`、および2つのデリゲート型を使用して `C` クラスを宣言します。 `D1` は、`C` と文字列のインスタンスを受け取り、`D2` は文字列を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="60f23-259">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="60f23-260">`Example` という名前の2番目のクラスには、デリゲートを作成するコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="60f23-260">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="60f23-261">オープンインスタンスメソッドを表す `D1`型のデリゲートが、インスタンスメソッド `M1`に対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-261">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="60f23-262">デリゲートが呼び出されたときに、インスタンスを渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-262">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="60f23-263">オープンな静的メソッドを表す `D2`型のデリゲートは、静的メソッド `M2`に対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-263">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="60f23-264">**例 2**</span><span class="sxs-lookup"><span data-stu-id="60f23-264">**Example 2**</span></span>  
  
 <span data-ttu-id="60f23-265">次のコード例は、パラメーターの型と戻り値の型の互換性を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-265">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="60f23-266">このコード例では、`Base` という名前の基底クラスと、`Base`から派生する `Derived` という名前のクラスを定義しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-266">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="60f23-267">派生クラスには、`Base` 型の1つのパラメーターと `Derived`の戻り値の型を持つ `MyMethod` という名前の `static` (`Shared` Visual Basic) メソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="60f23-267">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="60f23-268">このコード例では、`Derived` 型の1つのパラメーターと `Base`の戻り値の型を持つ `Example` という名前のデリゲートも定義します。</span><span class="sxs-lookup"><span data-stu-id="60f23-268">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="60f23-269">このコード例は、`Example` という名前のデリゲートを使用して、メソッド `MyMethod`を表すことができることを示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-269">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="60f23-270">メソッドは、次の理由によりデリゲートにバインドできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-270">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="60f23-271">デリゲートのパラメーターの型 (`Derived`) は `MyMethod` (`Base`) のパラメーターの型よりも制限が厳しいため、デリゲートの引数を常に `MyMethod`に渡すことが安全です。</span><span class="sxs-lookup"><span data-stu-id="60f23-271">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="60f23-272">`MyMethod` (`Derived`) の戻り値の型は、デリゲートのパラメーターの型 (`Base`) よりも制限が厳しいため、メソッドの戻り値の型をデリゲートの戻り値の型に常にキャストできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-272">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="60f23-273">このコード例では、出力は生成されません。</span><span class="sxs-lookup"><span data-stu-id="60f23-273">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60f23-274"><paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-274"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-275">または</span><span class="sxs-lookup"><span data-stu-id="60f23-275">-or-</span></span> 
 <span data-ttu-id="60f23-276"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-276"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-277"><paramref name="type" /> は <see cref="T:System.MulticastDelegate" /> を継承しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-277"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="60f23-278">または</span><span class="sxs-lookup"><span data-stu-id="60f23-278">-or-</span></span> 
 <span data-ttu-id="60f23-279"><paramref name="type" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-279"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="60f23-280">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-280">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="60f23-281">または</span><span class="sxs-lookup"><span data-stu-id="60f23-281">-or-</span></span> 
 <span data-ttu-id="60f23-282"><paramref name="method" /> は静的メソッドではなく、.NET Framework バージョンは 1.0 または 1.1 です。</span><span class="sxs-lookup"><span data-stu-id="60f23-282"><paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span></span>  
  
<span data-ttu-id="60f23-283">または</span><span class="sxs-lookup"><span data-stu-id="60f23-283">-or-</span></span> 
 <span data-ttu-id="60f23-284"><paramref name="method" /> はバインドできません。</span><span class="sxs-lookup"><span data-stu-id="60f23-284"><paramref name="method" /> cannot be bound.</span></span>  
  
<span data-ttu-id="60f23-285">または</span><span class="sxs-lookup"><span data-stu-id="60f23-285">-or-</span></span> 
 <span data-ttu-id="60f23-286"><paramref name="method" /> が <see langword="RuntimeMethodInfo" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-286"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="60f23-287">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-287">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60f23-288"><see langword="Invoke" /> の <paramref name="type" /> メソッドが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="60f23-288">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60f23-289"><paramref name="method" /> へのアクセスに必要なアクセス許可が呼び出し元にありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-289">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="firstArgument" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60f23-290">作成するデリゲートの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-290">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="firstArgument"><span data-ttu-id="60f23-291">デリゲートのバインド先のオブジェクト。<see langword="null" /> を <paramref name="method" /> (Visual Basic の場合は <see langword="static" />) として扱う場合は <see langword="Shared" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-291">The object to which the delegate is bound, or <see langword="null" /> to treat <paramref name="method" /> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span></span></param>
        <param name="method"><span data-ttu-id="60f23-292">デリゲートが表す静的メソッドまたはインスタンス メソッドの情報を保持する <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-292">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="60f23-293">指定された静的メソッドまたはインスタンス メソッドを表す、指定した型のデリゲートを、第 1 引数を指定して作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-293">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span></span></summary>
        <returns><span data-ttu-id="60f23-294">指定した静的メソッドまたはインスタンス メソッドを表すための、指定した型のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-294">A delegate of the specified type that represents the specified static or instance method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-295">このメソッドのオーバーロードを呼び出すことは、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> メソッドのオーバーロードを呼び出し、`throwOnBindFailure`に `true` を指定することと同じです。</span><span class="sxs-lookup"><span data-stu-id="60f23-295">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="60f23-296">これらの2つのオーバーロードは、最も柔軟なデリゲートを作成する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="60f23-296">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="60f23-297">これらのメソッドを使用して、静的メソッドまたはインスタンスメソッドのデリゲートを作成できます。また、必要に応じて、最初の引数を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-297">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-298">最初の引数を指定しない場合は、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> メソッドのオーバーロードを使用してパフォーマンスを向上させます。</span><span class="sxs-lookup"><span data-stu-id="60f23-298">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="60f23-299">デリゲート型とメソッドは、互換性のある戻り値の型を持っている必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-299">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="60f23-300">つまり、`method` の戻り値の型は `type`の戻り値の型に割り当て可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-300">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="60f23-301">`firstArgument` が指定されている場合、デリゲートが呼び出されるたびに `method` に渡されます。`firstArgument` はデリゲートにバインドされており、デリゲートは最初の引数に対して閉じられていると言います。</span><span class="sxs-lookup"><span data-stu-id="60f23-301">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="60f23-302">`method` が `static` (Visual Basic で`Shared`) の場合、デリゲートを呼び出すときに指定される引数リストには、最初のパラメーターを除くすべてのパラメーターが含まれます。`method` がインスタンスメソッドの場合、`firstArgument` は非表示のインスタンスパラメーターに渡されます (のC#`this` によって表されるか、Visual Basic で `Me`)。</span><span class="sxs-lookup"><span data-stu-id="60f23-302">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="60f23-303">`firstArgument` が指定されている場合、`method` の最初のパラメーターは参照型である必要があり、`firstArgument` はその型と互換性がある必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-303">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="60f23-304">`method` が `static` (Visual Basic で`Shared`) で、その最初のパラメーターの型が <xref:System.Object> または <xref:System.ValueType>の場合は、`firstArgument` 値型にすることができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-304">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="60f23-305">この場合、`firstArgument` は自動的にボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-305">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="60f23-306">C#または Visual Basic 関数呼び出しの場合と同様に、他の引数に対して自動ボックス化は行われません。</span><span class="sxs-lookup"><span data-stu-id="60f23-306">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="60f23-307">`firstArgument` が null 参照で、`method` がインスタンスメソッドの場合、結果は `method`のデリゲート型 `type` およびのシグネチャに依存します。</span><span class="sxs-lookup"><span data-stu-id="60f23-307">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="60f23-308">`type` のシグネチャに `method`の最初の非表示パラメーターが明示的に含まれている場合、デリゲートはオープンインスタンスメソッドを表していると言います。</span><span class="sxs-lookup"><span data-stu-id="60f23-308">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="60f23-309">デリゲートが呼び出されると、引数リストの最初の引数が `method`の非表示インスタンスパラメーターに渡されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-309">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="60f23-310">`method` と `type` のシグネチャが一致する場合 (つまり、すべてのパラメーターの型に互換性がある場合)、デリゲートは null 参照に対して閉じられると言われます。</span><span class="sxs-lookup"><span data-stu-id="60f23-310">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="60f23-311">デリゲートの呼び出しは、null インスタンスでのインスタンスメソッドの呼び出しと似ていますが、これは特に便利な操作ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-311">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="60f23-312">`firstArgument` が null 参照で `method` が静的である場合、結果は `method`のデリゲート型 `type` およびのシグネチャに依存します。</span><span class="sxs-lookup"><span data-stu-id="60f23-312">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="60f23-313">`method` と `type` のシグネチャが一致する場合 (つまり、すべてのパラメーターの型に互換性がある場合)、デリゲートはオープンな静的メソッドを表すと言います。</span><span class="sxs-lookup"><span data-stu-id="60f23-313">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="60f23-314">これは、静的メソッドの最も一般的な例です。</span><span class="sxs-lookup"><span data-stu-id="60f23-314">This is the most common case for static methods.</span></span> <span data-ttu-id="60f23-315">この場合、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> メソッドのオーバーロードを使用すると、パフォーマンスが若干向上します。</span><span class="sxs-lookup"><span data-stu-id="60f23-315">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="60f23-316">`type` のシグネチャが `method` の2番目のパラメーターで始まり、その他のパラメーターの型に互換性がある場合、デリゲートは null 参照で閉じられていると言います。</span><span class="sxs-lookup"><span data-stu-id="60f23-316">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="60f23-317">デリゲートが呼び出されると、`method`の最初のパラメーターに null 参照が渡されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-317">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-318">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]以降では、このメソッドを使用して、呼び出し元に <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> フラグで <xref:System.Security.Permissions.ReflectionPermission> が許可されていて、非パブリックメソッドの許可セットが呼び出し元の許可セットまたはそのサブセットに制限されている場合に、パブリックでないメソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-318">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="60f23-319">(「[リフレクションのセキュリティに関する考慮事項」を](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)参照してください)。</span><span class="sxs-lookup"><span data-stu-id="60f23-319">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60f23-320">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-320">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="60f23-321">互換性のあるパラメーターの型と戻り値の型</span><span class="sxs-lookup"><span data-stu-id="60f23-321">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="60f23-322">デリゲートのパラメーターの型と戻り値の型は、デリゲートが表すメソッドのパラメーターの型および戻り値の型と互換性がある必要があります。型が正確に一致する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-322">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-323">.NET Framework バージョン1.0 および1.1 では、型は正確に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-323">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="60f23-324">デリゲートのパラメーターにメソッドのパラメーターよりも限定的な型が指定された場合、両者のパラメーター間に型の互換性があると見なされます。これによって、デリゲートに渡された引数が、メソッドに対して安全に渡されることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-324">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="60f23-325">同様に、メソッドの戻り値の型の制限がデリゲートの戻り値の型より多いと、メソッドの戻り値がデリゲートの戻り値の型に安全にキャストされることが保証されるため、デリゲートの戻り値の型とメソッドの戻り値の型には互換性があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-325">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="60f23-326">たとえば、型 <xref:System.Collections.Hashtable> のパラメーターと <xref:System.Object> の戻り値の型を持つデリゲートは、<xref:System.Object> 型のパラメーターと <xref:System.Collections.Hashtable>型の戻り値を持つメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-326">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="60f23-327">デリゲートが表すことができるメソッドの決定</span><span class="sxs-lookup"><span data-stu-id="60f23-327">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="60f23-328"><xref:System.Delegate.CreateDelegate%2A> のこのオーバーロードによって提供される柔軟性を考慮するもう1つの便利な方法として、特定のデリゲートは、メソッドシグネチャとメソッドの種類 (静的とインスタンス) の4種類の組み合わせを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-328">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="60f23-329">`C`型の引数を1つ持つ `D` デリゲート型を考えてみます。</span><span class="sxs-lookup"><span data-stu-id="60f23-329">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="60f23-330">次の例では、すべての場合に一致する必要があるため、戻り値の型を無視して `D` が表すことができるメソッドについて説明します。</span><span class="sxs-lookup"><span data-stu-id="60f23-330">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="60f23-331">`D` は、インスタンスメソッドが属する型に関係なく、`C`型の引数を1つだけ持つインスタンスメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-331">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="60f23-332"><xref:System.Delegate.CreateDelegate%2A> が呼び出されると、`firstArgument` は `method` が属している型のインスタンスになり、結果として得られるデリゲートはそのインスタンス上で閉じられると言います。</span><span class="sxs-lookup"><span data-stu-id="60f23-332">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="60f23-333">(`firstArgument` が null 参照である場合は、`D` を null 参照に対しても閉じることができます)。</span><span class="sxs-lookup"><span data-stu-id="60f23-333">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="60f23-334">`D` は、引数を持たない `C` のインスタンスメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-334">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="60f23-335"><xref:System.Delegate.CreateDelegate%2A> が呼び出されると、`firstArgument` は null 参照になります。</span><span class="sxs-lookup"><span data-stu-id="60f23-335">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="60f23-336">結果として得られるデリゲートは、オープンインスタンスメソッドを表します。 `C` のインスタンスは、呼び出されるたびに指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-336">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="60f23-337">`D` は、`C`型の1つの引数を受け取る静的メソッドを表すことができ、そのメソッドは任意の型に属することができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-337">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="60f23-338"><xref:System.Delegate.CreateDelegate%2A> が呼び出されると、`firstArgument` は null 参照になります。</span><span class="sxs-lookup"><span data-stu-id="60f23-338">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="60f23-339">結果として得られるデリゲートは、オープンな静的メソッドを表します。 `C` のインスタンスは、呼び出されるたびに指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-339">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="60f23-340">`D` は、型 `F` に属し、型 `F` および型 `C`の2つの引数を持つ静的メソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-340">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="60f23-341"><xref:System.Delegate.CreateDelegate%2A> が呼び出されると、`firstArgument` は `F`のインスタンスになります。</span><span class="sxs-lookup"><span data-stu-id="60f23-341">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="60f23-342">生成されるデリゲートは、`F`のそのインスタンスで閉じられる静的メソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="60f23-342">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="60f23-343">`F` と `C` が同じ型である場合、静的メソッドにはその型の2つの引数があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-343">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="60f23-344">(この場合、`firstArgument` が null 参照である場合、`D` は null 参照に対して閉じられます)。</span><span class="sxs-lookup"><span data-stu-id="60f23-344">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60f23-345">ここでは、3つのコード例について説明します。</span><span class="sxs-lookup"><span data-stu-id="60f23-345">This section contains three code examples.</span></span> <span data-ttu-id="60f23-346">最初の例では、作成可能な4種類のデリゲートを示しています。これは、インスタンスメソッドで終了し、インスタンスメソッドを開いて、静的メソッドを開いた後、静的メソッドで終了します。</span><span class="sxs-lookup"><span data-stu-id="60f23-346">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="60f23-347">2番目のコード例は、互換性のあるパラメーターの型と戻り値の型を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-347">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="60f23-348">3番目のコード例では、単一のデリゲート型を定義し、デリゲート型が表すことができるすべてのメソッドを示します。</span><span class="sxs-lookup"><span data-stu-id="60f23-348">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="60f23-349">**例 1**</span><span class="sxs-lookup"><span data-stu-id="60f23-349">**Example 1**</span></span>  
  
 <span data-ttu-id="60f23-350">次のコード例は、<xref:System.Delegate.CreateDelegate%2A> メソッドのこのオーバーロードを使用してデリゲートを作成する4つの方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-350">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-351">`firstArgument` と <xref:System.Reflection.MethodInfo>を指定する <xref:System.Delegate.CreateDelegate%2A> メソッドには、2つのオーバーロードがあります。これらの機能は同じですが、バインドに失敗した場合にをスローするかどうかを指定でき、もう1つは常にをスローします。</span><span class="sxs-lookup"><span data-stu-id="60f23-351">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="60f23-352">このコード例では、両方のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="60f23-352">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="60f23-353">この例では、静的メソッド `M2` とインスタンスメソッド `M1`、および3つのデリゲート型を使用して `C` クラスを宣言します。 `D1` は、`C` のインスタンスと文字列を受け取り、`D2` は引数を受け取りません。`D3`</span><span class="sxs-lookup"><span data-stu-id="60f23-353">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="60f23-354">`Example` という名前の2番目のクラスには、デリゲートを作成するコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="60f23-354">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="60f23-355">`C`のインスタンスで終了した `D2`型のデリゲートが、インスタンスメソッド `M1`に対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-355">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="60f23-356">`C` のバインドされたインスタンスが常に使用されることを示すために、異なる文字列を使用して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-356">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="60f23-357">オープンインスタンスメソッドを表す `D1`型のデリゲートが、インスタンスメソッド `M1`に対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-357">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="60f23-358">デリゲートが呼び出されたときに、インスタンスを渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-358">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="60f23-359">オープンな静的メソッドを表す `D2`型のデリゲートは、静的メソッド `M2`に対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-359">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="60f23-360">最後に、文字列に対して閉じられた `D3`型のデリゲートが、静的メソッド `M2`に対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-360">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="60f23-361">メソッドは、バインドされた文字列を使用していることを示すために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-361">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="60f23-362">**例 2**</span><span class="sxs-lookup"><span data-stu-id="60f23-362">**Example 2**</span></span>  
  
 <span data-ttu-id="60f23-363">次のコード例は、パラメーターの型と戻り値の型の互換性を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-363">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-364">このコード例では、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> メソッドのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="60f23-364">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="60f23-365"><xref:System.Reflection.MethodInfo> を受け取る他のオーバーロードの使用は似ています。</span><span class="sxs-lookup"><span data-stu-id="60f23-365">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="60f23-366">このコード例では、`Base` という名前の基底クラスと、`Base`から派生する `Derived` という名前のクラスを定義しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-366">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="60f23-367">派生クラスには、`Base` 型の1つのパラメーターと `Derived`の戻り値の型を持つ `MyMethod` という名前の `static` (`Shared` Visual Basic) メソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="60f23-367">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="60f23-368">このコード例では、`Derived` 型の1つのパラメーターと `Base`の戻り値の型を持つ `Example` という名前のデリゲートも定義します。</span><span class="sxs-lookup"><span data-stu-id="60f23-368">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="60f23-369">このコード例は、`Example` という名前のデリゲートを使用して、メソッド `MyMethod`を表すことができることを示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-369">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="60f23-370">メソッドは、次の理由によりデリゲートにバインドできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-370">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="60f23-371">デリゲートのパラメーターの型 (`Derived`) は `MyMethod` (`Base`) のパラメーターの型よりも制限が厳しいため、デリゲートの引数を常に `MyMethod`に渡すことが安全です。</span><span class="sxs-lookup"><span data-stu-id="60f23-371">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="60f23-372">`MyMethod` (`Derived`) の戻り値の型は、デリゲートのパラメーターの型 (`Base`) よりも制限が厳しいため、メソッドの戻り値の型をデリゲートの戻り値の型に常にキャストできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-372">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="60f23-373">このコード例では、出力は生成されません。</span><span class="sxs-lookup"><span data-stu-id="60f23-373">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="60f23-374">**例 3**</span><span class="sxs-lookup"><span data-stu-id="60f23-374">**Example 3**</span></span>  
  
 <span data-ttu-id="60f23-375">次のコード例は、デリゲートを作成するために <xref:System.Delegate.CreateDelegate%2A> メソッドを使用して、1つのデリゲート型が表すことができるすべてのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-375">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-376">`firstArgument` と <xref:System.Reflection.MethodInfo>を指定する <xref:System.Delegate.CreateDelegate%2A> メソッドには、2つのオーバーロードがあります。これらの機能は同じですが、バインドに失敗した場合にをスローするかどうかを指定でき、もう1つは常にをスローします。</span><span class="sxs-lookup"><span data-stu-id="60f23-376">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="60f23-377">このコード例では、両方のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="60f23-377">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="60f23-378">このコード例では、`C` と `F`の2つのクラスと、`C`型の引数を1つ持つ `D` デリゲート型を定義しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-378">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="60f23-379">クラスは、静的メソッドとインスタンスメソッド `M1`、`M3`、および `M4`に一致します。また、クラス `C` には、引数を持たないインスタンスメソッド `M2` もあります。</span><span class="sxs-lookup"><span data-stu-id="60f23-379">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="60f23-380">`Example` という名前の3番目のクラスには、デリゲートを作成するコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="60f23-380">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="60f23-381">デリゲートは、インスタンスメソッド `M1` `C` 型および型 `F`; に対して作成されます。各は、それぞれの型のインスタンスに対して閉じられます。</span><span class="sxs-lookup"><span data-stu-id="60f23-381">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="60f23-382">`C` 型のメソッド `M1` は、バインドされたインスタンスと引数の `ID` プロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="60f23-382">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="60f23-383">`C`型のメソッド `M2` に対してデリゲートが作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-383">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="60f23-384">これはオープンインスタンスデリゲートであり、デリゲートの引数はインスタンスメソッドの非表示の最初の引数を表します。</span><span class="sxs-lookup"><span data-stu-id="60f23-384">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="60f23-385">メソッドに他の引数はありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-385">The method has no other arguments.</span></span> <span data-ttu-id="60f23-386">静的メソッドであるかのように呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-386">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="60f23-387">デリゲートは、型 `C` 型および型 `F`; の静的メソッド `M3` に対して作成されます。これらはオープンスタティックデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="60f23-387">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="60f23-388">最後に、`C` 型および型 `F`; の静的メソッド `M4` に対してデリゲートが作成されます。各メソッドには、最初の引数として宣言する型があり、型のインスタンスが指定されているため、デリゲートは最初の引数に対して閉じられます。</span><span class="sxs-lookup"><span data-stu-id="60f23-388">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="60f23-389">`C` 型のメソッド `M4` は、バインドされたインスタンスと引数の `ID` プロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="60f23-389">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60f23-390"><paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-390"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-391">または</span><span class="sxs-lookup"><span data-stu-id="60f23-391">-or-</span></span> 
 <span data-ttu-id="60f23-392"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-392"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-393"><paramref name="type" /> は <see cref="T:System.MulticastDelegate" /> を継承しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-393"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="60f23-394">または</span><span class="sxs-lookup"><span data-stu-id="60f23-394">-or-</span></span> 
 <span data-ttu-id="60f23-395"><paramref name="type" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-395"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="60f23-396">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-396">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="60f23-397">または</span><span class="sxs-lookup"><span data-stu-id="60f23-397">-or-</span></span> 
 <span data-ttu-id="60f23-398"><paramref name="method" /> はバインドできません。</span><span class="sxs-lookup"><span data-stu-id="60f23-398"><paramref name="method" /> cannot be bound.</span></span>  
  
<span data-ttu-id="60f23-399">または</span><span class="sxs-lookup"><span data-stu-id="60f23-399">-or-</span></span> 
 <span data-ttu-id="60f23-400"><paramref name="method" /> が <see langword="RuntimeMethodInfo" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-400"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="60f23-401">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-401">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60f23-402"><see langword="Invoke" /> の <paramref name="type" /> メソッドが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="60f23-402">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60f23-403"><paramref name="method" /> へのアクセスに必要なアクセス許可が呼び出し元にありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-403">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="target" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60f23-404">作成するデリゲートの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-404">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="60f23-405"><paramref name="method" /> を呼び出す対象のクラス インスタンス。</span><span class="sxs-lookup"><span data-stu-id="60f23-405">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="60f23-406">デリゲートによって表されるインスタンス メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="60f23-406">The name of the instance method that the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="60f23-407">指定したクラス インスタンスに対して呼び出す指定したインスタンス メソッドを表す、指定した型のデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-407">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></summary>
        <returns><span data-ttu-id="60f23-408">指定したクラス インスタンスに対して呼び出す指定したインスタンス メソッドを表す、指定した型のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-408">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-409">このメソッドは、インスタンスメソッドに対してのみデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-409">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="60f23-410">インスタンスメソッドは、クラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられているメソッドです。</span><span class="sxs-lookup"><span data-stu-id="60f23-410">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="60f23-411">このメソッドのオーバーロードは、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> メソッドのオーバーロードを呼び出し、`throwOnBindFailure`の `ignoreCase` と `true` に `false` を指定した場合と同じです。</span><span class="sxs-lookup"><span data-stu-id="60f23-411">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-412">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]以降では、このメソッドを使用して、呼び出し元に <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> フラグで <xref:System.Security.Permissions.ReflectionPermission> が許可されていて、非パブリックメソッドの許可セットが呼び出し元の許可セットまたはそのサブセットに制限されている場合に、パブリックでないメソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-412">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="60f23-413">(「[リフレクションのセキュリティに関する考慮事項」を](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)参照してください)。</span><span class="sxs-lookup"><span data-stu-id="60f23-413">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60f23-414">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-414">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60f23-415"><paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-415"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-416">または</span><span class="sxs-lookup"><span data-stu-id="60f23-416">-or-</span></span> 
 <span data-ttu-id="60f23-417"><paramref name="target" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-417"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-418">または</span><span class="sxs-lookup"><span data-stu-id="60f23-418">-or-</span></span> 
 <span data-ttu-id="60f23-419"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-419"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-420"><paramref name="type" /> は <see cref="T:System.MulticastDelegate" /> を継承しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-420"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="60f23-421">または</span><span class="sxs-lookup"><span data-stu-id="60f23-421">-or-</span></span> 
 <span data-ttu-id="60f23-422"><paramref name="type" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-422"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="60f23-423">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-423">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="60f23-424">または</span><span class="sxs-lookup"><span data-stu-id="60f23-424">-or-</span></span> 
 <span data-ttu-id="60f23-425"><paramref name="method" /> はインスタンス メソッドではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-425"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="60f23-426">または</span><span class="sxs-lookup"><span data-stu-id="60f23-426">-or-</span></span> 
 <span data-ttu-id="60f23-427"><paramref name="method" /> をバインドできません (たとえば、これが見つからないなど)。</span><span class="sxs-lookup"><span data-stu-id="60f23-427"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60f23-428"><see langword="Invoke" /> の <paramref name="type" /> メソッドが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="60f23-428">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60f23-429"><paramref name="method" /> へのアクセスに必要なアクセス許可が呼び出し元にありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-429">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60f23-430">作成するデリゲートの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-430">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="method"><span data-ttu-id="60f23-431">デリゲートが表す静的メソッドまたはインスタンス メソッドの情報を保持する <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-431">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="60f23-432"><see langword="true" /> をバインドできないときに例外をスローする場合は <paramref name="method" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-432"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="60f23-433">指定された静的メソッドを表す、指定された型のデリゲートを、バインドに失敗した場合の動作を指定して作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-433">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="60f23-434">指定した静的メソッドを表すための、指定した型のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-434">A delegate of the specified type to represent the specified static method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-435">このメソッドオーバーロードは、開いている静的メソッドデリゲートを作成し、インスタンスメソッドデリゲートを開くことができます。つまり、インスタンスメソッドの非表示の最初の引数を公開するデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="60f23-435">This method overload can create open static method delegates and open instance method delegates - that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="60f23-436">詳細については、「メソッドの <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> 一般的なオーバーロード」を参照してください。これにより、インスタンスまたは静的メソッドに対して、オープンまたはクローズされたデリゲートのすべての組み合わせを作成できます。</span><span class="sxs-lookup"><span data-stu-id="60f23-436">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-437">このメソッドオーバーロードは、デリゲートが最初の引数に対して閉じられていない場合に使用する必要があります。これは、その場合は多少高速になるためです。</span><span class="sxs-lookup"><span data-stu-id="60f23-437">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-438">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]以降では、このメソッドを使用して、呼び出し元に <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> フラグで <xref:System.Security.Permissions.ReflectionPermission> が許可されていて、非パブリックメソッドの許可セットが呼び出し元の許可セットまたはそのサブセットに制限されている場合に、パブリックでないメソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-438">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="60f23-439">(「[リフレクションのセキュリティに関する考慮事項」を](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)参照してください)。</span><span class="sxs-lookup"><span data-stu-id="60f23-439">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60f23-440">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-440">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="60f23-441">互換性のあるパラメーターの型と戻り値の型</span><span class="sxs-lookup"><span data-stu-id="60f23-441">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="60f23-442">デリゲートのパラメーターの型と戻り値の型は、デリゲートが表すメソッドのパラメーターの型および戻り値の型と互換性がある必要があります。型が正確に一致する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-442">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-443">.NET Framework バージョン1.0 および1.1 では、型は正確に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-443">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="60f23-444">デリゲートのパラメーターにメソッドのパラメーターよりも限定的な型が指定された場合、両者のパラメーター間に型の互換性があると見なされます。これによって、デリゲートに渡された引数が、メソッドに対して安全に渡されることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-444">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="60f23-445">同様に、メソッドの戻り値の型の制限がデリゲートの戻り値の型より多いと、メソッドの戻り値がデリゲートの戻り値の型に安全にキャストされることが保証されるため、デリゲートの戻り値の型とメソッドの戻り値の型には互換性があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-445">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="60f23-446">たとえば、型 <xref:System.Collections.Hashtable> のパラメーターと <xref:System.Object> の戻り値の型を持つデリゲートは、<xref:System.Object> 型のパラメーターと <xref:System.Collections.Hashtable>型の戻り値を持つメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-446">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60f23-447">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="60f23-447">This section contains two code examples.</span></span> <span data-ttu-id="60f23-448">最初の例は、このメソッドオーバーロードを使用して作成できる2種類のデリゲートを示しています。これは、インスタンスメソッドを開き、静的メソッドで開くことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-448">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="60f23-449">2番目のコード例は、互換性のあるパラメーターの型と戻り値の型を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-449">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="60f23-450">**例 1**</span><span class="sxs-lookup"><span data-stu-id="60f23-450">**Example 1**</span></span>  
  
 <span data-ttu-id="60f23-451">次のコード例は、<xref:System.Delegate.CreateDelegate%2A> メソッドのこのオーバーロードを使用してデリゲートを作成する2つの方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-451">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-452">最初の引数ではなく <xref:System.Reflection.MethodInfo> を指定する <xref:System.Delegate.CreateDelegate%2A> メソッドのオーバーロードが2つあります。これらの機能は同じですが、バインドに失敗した場合にをスローするかどうかを指定でき、もう1つは常にをスローします。</span><span class="sxs-lookup"><span data-stu-id="60f23-452">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="60f23-453">このコード例では、両方のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="60f23-453">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="60f23-454">この例では、静的メソッド `M2`、インスタンスメソッド `M1`、および2つのデリゲート型を使用して `C` クラスを宣言します。 `D1` は、`C` と文字列のインスタンスを受け取り、`D2` は文字列を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="60f23-454">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="60f23-455">`Example` という名前の2番目のクラスには、デリゲートを作成するコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="60f23-455">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="60f23-456">オープンインスタンスメソッドを表す `D1`型のデリゲートが、インスタンスメソッド `M1`に対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-456">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="60f23-457">デリゲートが呼び出されたときに、インスタンスを渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-457">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="60f23-458">オープンな静的メソッドを表す `D2`型のデリゲートは、静的メソッド `M2`に対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-458">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="60f23-459">**例 2**</span><span class="sxs-lookup"><span data-stu-id="60f23-459">**Example 2**</span></span>  
  
 <span data-ttu-id="60f23-460">次のコード例は、パラメーターの型と戻り値の型の互換性を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-460">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-461">このコード例では、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> メソッドのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="60f23-461">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="60f23-462"><xref:System.Reflection.MethodInfo> を受け取る他のオーバーロードの使用は似ています。</span><span class="sxs-lookup"><span data-stu-id="60f23-462">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="60f23-463">このコード例では、`Base` という名前の基底クラスと、`Base`から派生する `Derived` という名前のクラスを定義しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-463">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="60f23-464">派生クラスには、`Base` 型の1つのパラメーターと `Derived`の戻り値の型を持つ `MyMethod` という名前の `static` (`Shared` Visual Basic) メソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="60f23-464">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="60f23-465">このコード例では、`Derived` 型の1つのパラメーターと `Base`の戻り値の型を持つ `Example` という名前のデリゲートも定義します。</span><span class="sxs-lookup"><span data-stu-id="60f23-465">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="60f23-466">このコード例は、`Example` という名前のデリゲートを使用して、メソッド `MyMethod`を表すことができることを示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-466">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="60f23-467">メソッドは、次の理由によりデリゲートにバインドできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-467">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="60f23-468">デリゲートのパラメーターの型 (`Derived`) は `MyMethod` (`Base`) のパラメーターの型よりも制限が厳しいため、デリゲートの引数を常に `MyMethod`に渡すことが安全です。</span><span class="sxs-lookup"><span data-stu-id="60f23-468">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="60f23-469">`MyMethod` (`Derived`) の戻り値の型は、デリゲートのパラメーターの型 (`Base`) よりも制限が厳しいため、メソッドの戻り値の型をデリゲートの戻り値の型に常にキャストできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-469">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="60f23-470">このコード例では、出力は生成されません。</span><span class="sxs-lookup"><span data-stu-id="60f23-470">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60f23-471"><paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-471"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-472">または</span><span class="sxs-lookup"><span data-stu-id="60f23-472">-or-</span></span> 
 <span data-ttu-id="60f23-473"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-473"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-474"><paramref name="type" /> は <see cref="T:System.MulticastDelegate" /> を継承しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-474"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="60f23-475">または</span><span class="sxs-lookup"><span data-stu-id="60f23-475">-or-</span></span> 
 <span data-ttu-id="60f23-476"><paramref name="type" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-476"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="60f23-477">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-477">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="60f23-478">または</span><span class="sxs-lookup"><span data-stu-id="60f23-478">-or-</span></span> 
 <span data-ttu-id="60f23-479"><paramref name="method" /> はバインドできず、<paramref name="throwOnBindFailure" /> は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-479"><paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span>  
  
<span data-ttu-id="60f23-480">または</span><span class="sxs-lookup"><span data-stu-id="60f23-480">-or-</span></span> 
 <span data-ttu-id="60f23-481"><paramref name="method" /> が <see langword="RuntimeMethodInfo" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-481"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="60f23-482">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-482">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60f23-483"><see langword="Invoke" /> の <paramref name="type" /> メソッドが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="60f23-483">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60f23-484"><paramref name="method" /> へのアクセスに必要なアクセス許可が呼び出し元にありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-484">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="target" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60f23-485">作成するデリゲートの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-485">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="60f23-486"><see cref="T:System.Type" /> を実装するクラスを表す <paramref name="method" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-486">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="60f23-487">デリゲートによって表される静的メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="60f23-487">The name of the static method that the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="60f23-488">指定したクラスの指定した静的メソッドを表す、指定した型のデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-488">Creates a delegate of the specified type that represents the specified static method of the specified class.</span></span></summary>
        <returns><span data-ttu-id="60f23-489">指定したクラスの指定した静的メソッドを表す、指定した型のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-489">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-490">このメソッドは、静的メソッドに対してのみデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-490">This method creates delegates for static methods only.</span></span> <span data-ttu-id="60f23-491">インスタンスメソッドは、クラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられているメソッドです。</span><span class="sxs-lookup"><span data-stu-id="60f23-491">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="60f23-492">このメソッドのオーバーロードは、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> メソッドのオーバーロードを呼び出し、`throwOnBindFailure`の `ignoreCase` と `true` に `false` を指定した場合と同じです。</span><span class="sxs-lookup"><span data-stu-id="60f23-492">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-493">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]以降では、このメソッドを使用して、呼び出し元に <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> フラグで <xref:System.Security.Permissions.ReflectionPermission> が許可されていて、非パブリックメソッドの許可セットが呼び出し元の許可セットまたはそのサブセットに制限されている場合に、パブリックでないメソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-493">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="60f23-494">(「[リフレクションのセキュリティに関する考慮事項」を](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)参照してください)。</span><span class="sxs-lookup"><span data-stu-id="60f23-494">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60f23-495">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-495">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60f23-496"><paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-496"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-497">または</span><span class="sxs-lookup"><span data-stu-id="60f23-497">-or-</span></span> 
 <span data-ttu-id="60f23-498"><paramref name="target" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-498"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-499">または</span><span class="sxs-lookup"><span data-stu-id="60f23-499">-or-</span></span> 
 <span data-ttu-id="60f23-500"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-500"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-501"><paramref name="type" /> は <see cref="T:System.MulticastDelegate" /> を継承しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-501"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="60f23-502">または</span><span class="sxs-lookup"><span data-stu-id="60f23-502">-or-</span></span> 
 <span data-ttu-id="60f23-503"><paramref name="type" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-503"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="60f23-504">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-504">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="60f23-505">または</span><span class="sxs-lookup"><span data-stu-id="60f23-505">-or-</span></span> 
 <span data-ttu-id="60f23-506"><paramref name="target" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-506"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="60f23-507">または</span><span class="sxs-lookup"><span data-stu-id="60f23-507">-or-</span></span> 
 <span data-ttu-id="60f23-508"><paramref name="target" /> はオープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="60f23-508"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="60f23-509">つまり、その <see cref="P:System.Type.ContainsGenericParameters" /> プロパティは <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-509">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="60f23-510">または</span><span class="sxs-lookup"><span data-stu-id="60f23-510">-or-</span></span> 
 <span data-ttu-id="60f23-511"><paramref name="method" /> は <see langword="static" /> メソッド (Visual Basic では <see langword="Shared" /> メソッド) ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-511"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="60f23-512">または</span><span class="sxs-lookup"><span data-stu-id="60f23-512">-or-</span></span> 
 <span data-ttu-id="60f23-513">見つからないなどの原因により、<paramref name="method" /> をバインドできません。また、<paramref name="throwOnBindFailure" /> が <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-513"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60f23-514"><see langword="Invoke" /> の <paramref name="type" /> メソッドが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="60f23-514">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60f23-515"><paramref name="method" /> へのアクセスに必要なアクセス許可が呼び出し元にありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-515">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="firstArgument" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60f23-516">作成するデリゲートの型を表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-516">A <see cref="T:System.Type" /> representing the type of delegate to create.</span></span></param>
        <param name="firstArgument"><span data-ttu-id="60f23-517">デリゲートが表すメソッドの第 1 引数である <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-517">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span></span> <span data-ttu-id="60f23-518">インスタンス メソッドの場合は、そのインスタンスの型との互換性が必要です。</span><span class="sxs-lookup"><span data-stu-id="60f23-518">For instance methods, it must be compatible with the instance type.</span></span></param>
        <param name="method"><span data-ttu-id="60f23-519">デリゲートが表す静的メソッドまたはインスタンス メソッドの情報を保持する <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-519">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="60f23-520"><see langword="true" /> をバインドできないときに例外をスローする場合は <paramref name="method" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-520"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="60f23-521">指定された静的メソッドまたはインスタンス メソッドを表す、指定した型のデリゲートを、第 1 引数およびバインドに失敗したときの動作を指定して作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-521">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="60f23-522">指定された静的メソッドまたはインスタンス メソッドを表す、指定された型のデリゲート。<see langword="null" /> が <paramref name="throwOnBindFailure" /> で、デリゲートを <see langword="false" /> にバインドできない場合は <paramref name="method" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-522">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-523">このメソッドのオーバーロードと <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> メソッドのオーバーロードは、バインドに失敗した場合は常にをスローします。これにより、デリゲートを作成するための最も柔軟な方法が提供されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-523">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="60f23-524">これらのメソッドを使用すると、最初の引数の有無にかかわらず、静的メソッドまたはインスタンスメソッドのデリゲートを作成できます。</span><span class="sxs-lookup"><span data-stu-id="60f23-524">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-525">最初の引数を指定しない場合は、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> メソッドのオーバーロードを使用してパフォーマンスを向上させます。</span><span class="sxs-lookup"><span data-stu-id="60f23-525">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="60f23-526">デリゲート型とメソッドは、互換性のある戻り値の型を持っている必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-526">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="60f23-527">つまり、`method` の戻り値の型は `type`の戻り値の型に割り当て可能である必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-527">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="60f23-528">`firstArgument` が指定されている場合、デリゲートが呼び出されるたびに `method` に渡されます。`firstArgument` はデリゲートにバインドされており、デリゲートは最初の引数に対して閉じられていると言います。</span><span class="sxs-lookup"><span data-stu-id="60f23-528">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="60f23-529">`method` が `static` (Visual Basic で`Shared`) の場合、デリゲートを呼び出すときに指定される引数リストには、最初のパラメーターを除くすべてのパラメーターが含まれます。`method` がインスタンスメソッドの場合、`firstArgument` は非表示のインスタンスパラメーターに渡されます (のC#`this` によって表されるか、Visual Basic で `Me`)。</span><span class="sxs-lookup"><span data-stu-id="60f23-529">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="60f23-530">`firstArgument` が指定されている場合、`method` の最初のパラメーターは参照型である必要があり、`firstArgument` はその型と互換性がある必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-530">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="60f23-531">`method` が `static` (Visual Basic で`Shared`) で、その最初のパラメーターの型が <xref:System.Object> または <xref:System.ValueType>の場合は、`firstArgument` 値型にすることができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-531">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="60f23-532">この場合、`firstArgument` は自動的にボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-532">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="60f23-533">C#または Visual Basic 関数呼び出しの場合と同様に、他の引数に対して自動ボックス化は行われません。</span><span class="sxs-lookup"><span data-stu-id="60f23-533">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="60f23-534">`firstArgument` が null 参照で、`method` がインスタンスメソッドの場合、結果は `method`のデリゲート型 `type` およびのシグネチャに依存します。</span><span class="sxs-lookup"><span data-stu-id="60f23-534">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="60f23-535">`type` のシグネチャに `method`の最初の非表示パラメーターが明示的に含まれている場合、デリゲートはオープンインスタンスメソッドを表していると言います。</span><span class="sxs-lookup"><span data-stu-id="60f23-535">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="60f23-536">デリゲートが呼び出されると、引数リストの最初の引数が `method`の非表示インスタンスパラメーターに渡されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-536">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="60f23-537">`method` と `type` のシグネチャが一致する場合 (つまり、すべてのパラメーターの型に互換性がある場合)、デリゲートは null 参照に対して閉じられると言われます。</span><span class="sxs-lookup"><span data-stu-id="60f23-537">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="60f23-538">デリゲートの呼び出しは、null インスタンスでのインスタンスメソッドの呼び出しと似ていますが、これは特に便利な操作ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-538">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="60f23-539">`firstArgument` が null 参照で `method` が静的である場合、結果は `method`のデリゲート型 `type` およびのシグネチャに依存します。</span><span class="sxs-lookup"><span data-stu-id="60f23-539">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="60f23-540">`method` と `type` のシグネチャが一致する場合 (つまり、すべてのパラメーターの型に互換性がある場合)、デリゲートはオープンな静的メソッドを表すと言います。</span><span class="sxs-lookup"><span data-stu-id="60f23-540">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="60f23-541">これは、静的メソッドの最も一般的な例です。</span><span class="sxs-lookup"><span data-stu-id="60f23-541">This is the most common case for static methods.</span></span> <span data-ttu-id="60f23-542">この場合、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> メソッドのオーバーロードを使用すると、パフォーマンスが若干向上します。</span><span class="sxs-lookup"><span data-stu-id="60f23-542">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="60f23-543">`type` のシグネチャが `method` の2番目のパラメーターで始まり、その他のパラメーターの型に互換性がある場合、デリゲートは null 参照で閉じられていると言います。</span><span class="sxs-lookup"><span data-stu-id="60f23-543">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="60f23-544">デリゲートが呼び出されると、`method`の最初のパラメーターに null 参照が渡されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-544">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-545">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]以降では、このメソッドを使用して、呼び出し元に <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> フラグで <xref:System.Security.Permissions.ReflectionPermission> が許可されていて、非パブリックメソッドの許可セットが呼び出し元の許可セットまたはそのサブセットに制限されている場合に、パブリックでないメソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-545">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="60f23-546">(「[リフレクションのセキュリティに関する考慮事項」を](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)参照してください)。</span><span class="sxs-lookup"><span data-stu-id="60f23-546">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60f23-547">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-547">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="60f23-548">互換性のあるパラメーターの型と戻り値の型</span><span class="sxs-lookup"><span data-stu-id="60f23-548">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="60f23-549">デリゲートのパラメーターの型と戻り値の型は、デリゲートが表すメソッドのパラメーターの型および戻り値の型と互換性がある必要があります。型が正確に一致する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-549">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-550">.NET Framework バージョン1.0 および1.1 では、型は正確に一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-550">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="60f23-551">デリゲートのパラメーターにメソッドのパラメーターよりも限定的な型が指定された場合、両者のパラメーター間に型の互換性があると見なされます。これによって、デリゲートに渡された引数が、メソッドに対して安全に渡されることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-551">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="60f23-552">同様に、メソッドの戻り値の型の制限がデリゲートの戻り値の型より多いと、メソッドの戻り値がデリゲートの戻り値の型に安全にキャストされることが保証されるため、デリゲートの戻り値の型とメソッドの戻り値の型には互換性があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-552">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="60f23-553">たとえば、型 <xref:System.Collections.Hashtable> のパラメーターと <xref:System.Object> の戻り値の型を持つデリゲートは、<xref:System.Object> 型のパラメーターと <xref:System.Collections.Hashtable>型の戻り値を持つメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-553">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="60f23-554">デリゲートが表すことができるメソッドの決定</span><span class="sxs-lookup"><span data-stu-id="60f23-554">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="60f23-555"><xref:System.Delegate.CreateDelegate%2A> のこのオーバーロードによって提供される柔軟性を考慮するもう1つの便利な方法として、特定のデリゲートは、メソッドシグネチャとメソッドの種類 (静的とインスタンス) の4種類の組み合わせを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-555">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="60f23-556">`C`型の引数を1つ持つ `D` デリゲート型を考えてみます。</span><span class="sxs-lookup"><span data-stu-id="60f23-556">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="60f23-557">次の例では、すべての場合に一致する必要があるため、戻り値の型を無視して `D` が表すことができるメソッドについて説明します。</span><span class="sxs-lookup"><span data-stu-id="60f23-557">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="60f23-558">`D` は、インスタンスメソッドが属する型に関係なく、`C`型の引数を1つだけ持つインスタンスメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-558">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="60f23-559"><xref:System.Delegate.CreateDelegate%2A> が呼び出されると、`firstArgument` は `method` が属している型のインスタンスになり、結果として得られるデリゲートはそのインスタンス上で閉じられると言います。</span><span class="sxs-lookup"><span data-stu-id="60f23-559">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="60f23-560">(`firstArgument` が `null`ている場合は、null 参照を使用して `D` することもできます)。</span><span class="sxs-lookup"><span data-stu-id="60f23-560">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="60f23-561">`D` は、引数を持たない `C` のインスタンスメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-561">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="60f23-562"><xref:System.Delegate.CreateDelegate%2A> が呼び出されると、`firstArgument` は null 参照になります。</span><span class="sxs-lookup"><span data-stu-id="60f23-562">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="60f23-563">結果として得られるデリゲートは、オープンインスタンスメソッドを表します。 `C` のインスタンスは、呼び出されるたびに指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-563">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="60f23-564">`D` は、`C`型の1つの引数を受け取る静的メソッドを表すことができ、そのメソッドは任意の型に属することができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-564">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="60f23-565"><xref:System.Delegate.CreateDelegate%2A> が呼び出されると、`firstArgument` は null 参照になります。</span><span class="sxs-lookup"><span data-stu-id="60f23-565">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="60f23-566">結果として得られるデリゲートは、オープンな静的メソッドを表します。 `C` のインスタンスは、呼び出されるたびに指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-566">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="60f23-567">`D` は、型 `F` に属し、型 `F` および型 `C`の2つの引数を持つ静的メソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="60f23-567">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="60f23-568"><xref:System.Delegate.CreateDelegate%2A> が呼び出されると、`firstArgument` は `F`のインスタンスになります。</span><span class="sxs-lookup"><span data-stu-id="60f23-568">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="60f23-569">生成されるデリゲートは、`F`のそのインスタンスで閉じられる静的メソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="60f23-569">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="60f23-570">`F` と `C` が同じ型である場合、静的メソッドにはその型の2つの引数があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-570">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="60f23-571">(この場合、`firstArgument` が `null`場合、`D` は null 参照に対して閉じられます)。</span><span class="sxs-lookup"><span data-stu-id="60f23-571">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60f23-572">ここでは、3つのコード例について説明します。</span><span class="sxs-lookup"><span data-stu-id="60f23-572">This section contains three code examples.</span></span> <span data-ttu-id="60f23-573">最初の例では、作成可能な4種類のデリゲートを示しています。これは、インスタンスメソッドで終了し、インスタンスメソッドを開いて、静的メソッドを開いた後、静的メソッドで終了します。</span><span class="sxs-lookup"><span data-stu-id="60f23-573">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="60f23-574">2番目のコード例は、互換性のあるパラメーターの型と戻り値の型を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-574">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="60f23-575">3番目のコード例では、単一のデリゲート型を定義し、デリゲート型が表すことができるすべてのメソッドを示します。</span><span class="sxs-lookup"><span data-stu-id="60f23-575">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="60f23-576">**例 1**</span><span class="sxs-lookup"><span data-stu-id="60f23-576">**Example 1**</span></span>  
  
 <span data-ttu-id="60f23-577">次のコード例は、<xref:System.Delegate.CreateDelegate%2A> メソッドのこのオーバーロードを使用してデリゲートを作成する4つの方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-577">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-578">`firstArgument` と <xref:System.Reflection.MethodInfo>を指定する <xref:System.Delegate.CreateDelegate%2A> メソッドには、2つのオーバーロードがあります。これらの機能は同じですが、バインドに失敗した場合にをスローするかどうかを指定でき、もう1つは常にをスローします。</span><span class="sxs-lookup"><span data-stu-id="60f23-578">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="60f23-579">このコード例では、両方のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="60f23-579">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="60f23-580">この例では、静的メソッド `M2` とインスタンスメソッド `M1`、および3つのデリゲート型を使用して `C` クラスを宣言します。 `D1` は、`C` のインスタンスと文字列を受け取り、`D2` は引数を受け取りません。`D3`</span><span class="sxs-lookup"><span data-stu-id="60f23-580">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="60f23-581">`Example` という名前の2番目のクラスには、デリゲートを作成するコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="60f23-581">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="60f23-582">`C`のインスタンスで終了した `D2`型のデリゲートが、インスタンスメソッド `M1`に対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-582">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="60f23-583">`C` のバインドされたインスタンスが常に使用されることを示すために、異なる文字列を使用して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-583">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="60f23-584">オープンインスタンスメソッドを表す `D1`型のデリゲートが、インスタンスメソッド `M1`に対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-584">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="60f23-585">デリゲートが呼び出されたときに、インスタンスを渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-585">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="60f23-586">オープンな静的メソッドを表す `D2`型のデリゲートは、静的メソッド `M2`に対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-586">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="60f23-587">最後に、文字列に対して閉じられた `D3`型のデリゲートが、静的メソッド `M2`に対して作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-587">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="60f23-588">メソッドは、バインドされた文字列を使用していることを示すために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-588">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="60f23-589">**例 2**</span><span class="sxs-lookup"><span data-stu-id="60f23-589">**Example 2**</span></span>  
  
 <span data-ttu-id="60f23-590">次のコード例は、パラメーターの型と戻り値の型の互換性を示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-590">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-591">このコード例では、<xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> メソッドのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="60f23-591">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="60f23-592"><xref:System.Reflection.MethodInfo> を受け取る他のオーバーロードの使用は似ています。</span><span class="sxs-lookup"><span data-stu-id="60f23-592">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="60f23-593">このコード例では、`Base` という名前の基底クラスと、`Base`から派生する `Derived` という名前のクラスを定義しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-593">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="60f23-594">派生クラスには、`Base` 型の1つのパラメーターと `Derived`の戻り値の型を持つ `MyMethod` という名前の `static` (`Shared` Visual Basic) メソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="60f23-594">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="60f23-595">このコード例では、`Derived` 型の1つのパラメーターと `Base`の戻り値の型を持つ `Example` という名前のデリゲートも定義します。</span><span class="sxs-lookup"><span data-stu-id="60f23-595">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="60f23-596">このコード例は、`Example` という名前のデリゲートを使用して、メソッド `MyMethod`を表すことができることを示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-596">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="60f23-597">メソッドは、次の理由によりデリゲートにバインドできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-597">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="60f23-598">デリゲートのパラメーターの型 (`Derived`) は `MyMethod` (`Base`) のパラメーターの型よりも制限が厳しいため、デリゲートの引数を常に `MyMethod`に渡すことが安全です。</span><span class="sxs-lookup"><span data-stu-id="60f23-598">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="60f23-599">`MyMethod` (`Derived`) の戻り値の型は、デリゲートのパラメーターの型 (`Base`) よりも制限が厳しいため、メソッドの戻り値の型をデリゲートの戻り値の型に常にキャストできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-599">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="60f23-600">このコード例では、出力は生成されません。</span><span class="sxs-lookup"><span data-stu-id="60f23-600">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="60f23-601">**例 3**</span><span class="sxs-lookup"><span data-stu-id="60f23-601">**Example 3**</span></span>  
  
 <span data-ttu-id="60f23-602">次のコード例は、単一のデリゲート型が表すことができるすべてのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-602">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-603">`firstArgument` と <xref:System.Reflection.MethodInfo>を指定する <xref:System.Delegate.CreateDelegate%2A> メソッドには、2つのオーバーロードがあります。これらの機能は同じですが、バインドに失敗した場合にをスローするかどうかを指定でき、もう1つは常にをスローします。</span><span class="sxs-lookup"><span data-stu-id="60f23-603">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="60f23-604">このコード例では、両方のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="60f23-604">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="60f23-605">このコード例では、`C` と `F`の2つのクラスと、`C`型の引数を1つ持つ `D` デリゲート型を定義しています。</span><span class="sxs-lookup"><span data-stu-id="60f23-605">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="60f23-606">クラスは、静的メソッドとインスタンスメソッド `M1`、`M3`、および `M4`に一致します。また、クラス `C` には、引数を持たないインスタンスメソッド `M2` もあります。</span><span class="sxs-lookup"><span data-stu-id="60f23-606">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="60f23-607">`Example` という名前の3番目のクラスには、デリゲートを作成するコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="60f23-607">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="60f23-608">デリゲートは、インスタンスメソッド `M1` `C` 型および型 `F`; に対して作成されます。各は、それぞれの型のインスタンスに対して閉じられます。</span><span class="sxs-lookup"><span data-stu-id="60f23-608">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="60f23-609">`C` 型のメソッド `M1` は、バインドされたインスタンスと引数の `ID` プロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="60f23-609">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="60f23-610">`C`型のメソッド `M2` に対してデリゲートが作成されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-610">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="60f23-611">これはオープンインスタンスデリゲートであり、デリゲートの引数はインスタンスメソッドの非表示の最初の引数を表します。</span><span class="sxs-lookup"><span data-stu-id="60f23-611">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="60f23-612">メソッドに他の引数はありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-612">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="60f23-613">デリゲートは、型 `C` 型および型 `F`; の静的メソッド `M3` に対して作成されます。これらはオープンスタティックデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="60f23-613">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="60f23-614">最後に、`C` 型および型 `F`; の静的メソッド `M4` に対してデリゲートが作成されます。各メソッドには、最初の引数として宣言する型があり、型のインスタンスが指定されているため、デリゲートは最初の引数に対して閉じられます。</span><span class="sxs-lookup"><span data-stu-id="60f23-614">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="60f23-615">`C` 型のメソッド `M4` は、バインドされたインスタンスと引数の `ID` プロパティを表示します。</span><span class="sxs-lookup"><span data-stu-id="60f23-615">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60f23-616"><paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-616"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-617">または</span><span class="sxs-lookup"><span data-stu-id="60f23-617">-or-</span></span> 
 <span data-ttu-id="60f23-618"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-618"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-619"><paramref name="type" /> は <see cref="T:System.MulticastDelegate" /> を継承しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-619"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="60f23-620">または</span><span class="sxs-lookup"><span data-stu-id="60f23-620">-or-</span></span> 
 <span data-ttu-id="60f23-621"><paramref name="type" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-621"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="60f23-622">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-622">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="60f23-623">または</span><span class="sxs-lookup"><span data-stu-id="60f23-623">-or-</span></span> 
 <span data-ttu-id="60f23-624"><paramref name="method" /> はバインドできず、<paramref name="throwOnBindFailure" /> は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-624"><paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span>  
  
<span data-ttu-id="60f23-625">または</span><span class="sxs-lookup"><span data-stu-id="60f23-625">-or-</span></span> 
 <span data-ttu-id="60f23-626"><paramref name="method" /> が <see langword="RuntimeMethodInfo" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-626"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="60f23-627">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-627">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60f23-628"><see langword="Invoke" /> の <paramref name="type" /> メソッドが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="60f23-628">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60f23-629"><paramref name="method" /> へのアクセスに必要なアクセス許可が呼び出し元にありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-629">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="target" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60f23-630">作成するデリゲートの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-630">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="60f23-631"><paramref name="method" /> を呼び出す対象のクラス インスタンス。</span><span class="sxs-lookup"><span data-stu-id="60f23-631">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="60f23-632">デリゲートによって表されるインスタンス メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="60f23-632">The name of the instance method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="60f23-633">メソッドの名前を比較するとき大文字と小文字を無視するかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="60f23-633">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <summary><span data-ttu-id="60f23-634">大文字と小文字の区別方法を指定して、指定したクラス インスタンスに対して呼び出す指定した型のデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-634">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span></span></summary>
        <returns><span data-ttu-id="60f23-635">指定したクラス インスタンスに対して呼び出す指定したインスタンス メソッドを表す、指定した型のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-635">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-636">このメソッドは、インスタンスメソッドに対してのみデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-636">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="60f23-637">インスタンスメソッドは、クラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられているメソッドです。</span><span class="sxs-lookup"><span data-stu-id="60f23-637">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="60f23-638">このメソッドのオーバーロードは、`throwOnBindFailure`に `true` を指定して <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> メソッドのオーバーロードを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="60f23-638">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-639">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]以降では、このメソッドを使用して、呼び出し元に <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> フラグで <xref:System.Security.Permissions.ReflectionPermission> が許可されていて、非パブリックメソッドの許可セットが呼び出し元の許可セットまたはそのサブセットに制限されている場合に、パブリックでないメソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-639">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="60f23-640">(「[リフレクションのセキュリティに関する考慮事項」を](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)参照してください)。</span><span class="sxs-lookup"><span data-stu-id="60f23-640">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60f23-641">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-641">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60f23-642"><paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-642"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-643">または</span><span class="sxs-lookup"><span data-stu-id="60f23-643">-or-</span></span> 
 <span data-ttu-id="60f23-644"><paramref name="target" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-644"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-645">または</span><span class="sxs-lookup"><span data-stu-id="60f23-645">-or-</span></span> 
 <span data-ttu-id="60f23-646"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-646"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-647"><paramref name="type" /> は <see cref="T:System.MulticastDelegate" /> を継承しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-647"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="60f23-648">または</span><span class="sxs-lookup"><span data-stu-id="60f23-648">-or-</span></span> 
 <span data-ttu-id="60f23-649"><paramref name="type" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-649"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="60f23-650">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-650">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="60f23-651">または</span><span class="sxs-lookup"><span data-stu-id="60f23-651">-or-</span></span> 
 <span data-ttu-id="60f23-652"><paramref name="method" /> はインスタンス メソッドではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-652"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="60f23-653">または</span><span class="sxs-lookup"><span data-stu-id="60f23-653">-or-</span></span> 
 <span data-ttu-id="60f23-654"><paramref name="method" /> をバインドできません (たとえば、これが見つからないなど)。</span><span class="sxs-lookup"><span data-stu-id="60f23-654"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60f23-655"><see langword="Invoke" /> の <paramref name="type" /> メソッドが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="60f23-655">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60f23-656"><paramref name="method" /> へのアクセスに必要なアクセス許可が呼び出し元にありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-656">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="target" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60f23-657">作成するデリゲートの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-657">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="60f23-658"><see cref="T:System.Type" /> を実装するクラスを表す <paramref name="method" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-658">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="60f23-659">デリゲートによって表される静的メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="60f23-659">The name of the static method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="60f23-660">メソッドの名前を比較するとき大文字と小文字を無視するかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="60f23-660">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <summary><span data-ttu-id="60f23-661">指定したクラスの指定した静的メソッドを表す、指定した型のデリゲートを、大文字と小文字の区別方法を指定して作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-661">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span></span></summary>
        <returns><span data-ttu-id="60f23-662">指定したクラスの指定した静的メソッドを表す、指定した型のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-662">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-663">このメソッドは、静的メソッドに対してのみデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-663">This method creates delegates for static methods only.</span></span> <span data-ttu-id="60f23-664">インスタンスメソッドは、クラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられているメソッドです。</span><span class="sxs-lookup"><span data-stu-id="60f23-664">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="60f23-665">このメソッドのオーバーロードは、`throwOnBindFailure`に `true` を指定して <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> メソッドのオーバーロードを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="60f23-665">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-666">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]以降では、このメソッドを使用して、呼び出し元に <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> フラグで <xref:System.Security.Permissions.ReflectionPermission> が許可されていて、非パブリックメソッドの許可セットが呼び出し元の許可セットまたはそのサブセットに制限されている場合に、パブリックでないメソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-666">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="60f23-667">(「[リフレクションのセキュリティに関する考慮事項」を](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)参照してください)。</span><span class="sxs-lookup"><span data-stu-id="60f23-667">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60f23-668">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-668">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60f23-669"><paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-669"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-670">または</span><span class="sxs-lookup"><span data-stu-id="60f23-670">-or-</span></span> 
 <span data-ttu-id="60f23-671"><paramref name="target" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-671"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-672">または</span><span class="sxs-lookup"><span data-stu-id="60f23-672">-or-</span></span> 
 <span data-ttu-id="60f23-673"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-673"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-674"><paramref name="type" /> は <see cref="T:System.MulticastDelegate" /> を継承しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-674"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="60f23-675">または</span><span class="sxs-lookup"><span data-stu-id="60f23-675">-or-</span></span> 
 <span data-ttu-id="60f23-676"><paramref name="type" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-676"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="60f23-677">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-677">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="60f23-678">または</span><span class="sxs-lookup"><span data-stu-id="60f23-678">-or-</span></span> 
 <span data-ttu-id="60f23-679"><paramref name="target" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-679"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="60f23-680">または</span><span class="sxs-lookup"><span data-stu-id="60f23-680">-or-</span></span> 
 <span data-ttu-id="60f23-681"><paramref name="target" /> はオープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="60f23-681"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="60f23-682">つまり、その <see cref="P:System.Type.ContainsGenericParameters" /> プロパティは <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-682">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="60f23-683">または</span><span class="sxs-lookup"><span data-stu-id="60f23-683">-or-</span></span> 
 <span data-ttu-id="60f23-684"><paramref name="method" /> は <see langword="static" /> メソッド (Visual Basic では <see langword="Shared" /> メソッド) ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-684"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="60f23-685">または</span><span class="sxs-lookup"><span data-stu-id="60f23-685">-or-</span></span> 
 <span data-ttu-id="60f23-686"><paramref name="method" /> をバインドできません (たとえば、これが見つからないなど)。</span><span class="sxs-lookup"><span data-stu-id="60f23-686"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60f23-687"><see langword="Invoke" /> の <paramref name="type" /> メソッドが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="60f23-687">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60f23-688"><paramref name="method" /> へのアクセスに必要なアクセス許可が呼び出し元にありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-688">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="target" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60f23-689">作成するデリゲートの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-689">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="60f23-690"><paramref name="method" /> を呼び出す対象のクラス インスタンス。</span><span class="sxs-lookup"><span data-stu-id="60f23-690">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="60f23-691">デリゲートによって表されるインスタンス メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="60f23-691">The name of the instance method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="60f23-692">メソッドの名前を比較するとき大文字と小文字を無視するかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="60f23-692">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="60f23-693"><see langword="true" /> をバインドできないときに例外をスローする場合は <paramref name="method" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-693"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="60f23-694">大文字と小文字の区別方法およびバインドに失敗したときの動作を指定して、指定したクラス インスタンスに対して呼び出す指定した型のデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-694">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="60f23-695">指定したクラス インスタンスに対して呼び出す指定したインスタンス メソッドを表す、指定した型のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-695">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-696">このメソッドは、インスタンスメソッドに対してのみデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-696">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="60f23-697">インスタンスメソッドは、クラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられているメソッドです。</span><span class="sxs-lookup"><span data-stu-id="60f23-697">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-698">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]以降では、このメソッドを使用して、呼び出し元に <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> フラグで <xref:System.Security.Permissions.ReflectionPermission> が許可されていて、非パブリックメソッドの許可セットが呼び出し元の許可セットまたはそのサブセットに制限されている場合に、パブリックでないメソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-698">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="60f23-699">(「[リフレクションのセキュリティに関する考慮事項」を](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)参照してください)。</span><span class="sxs-lookup"><span data-stu-id="60f23-699">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60f23-700">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-700">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60f23-701"><paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-701"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-702">または</span><span class="sxs-lookup"><span data-stu-id="60f23-702">-or-</span></span> 
 <span data-ttu-id="60f23-703"><paramref name="target" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-703"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-704">または</span><span class="sxs-lookup"><span data-stu-id="60f23-704">-or-</span></span> 
 <span data-ttu-id="60f23-705"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-705"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-706"><paramref name="type" /> は <see cref="T:System.MulticastDelegate" /> を継承しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-706"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="60f23-707">または</span><span class="sxs-lookup"><span data-stu-id="60f23-707">-or-</span></span> 
 <span data-ttu-id="60f23-708"><paramref name="type" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-708"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="60f23-709">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-709">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="60f23-710">または</span><span class="sxs-lookup"><span data-stu-id="60f23-710">-or-</span></span> 
 <span data-ttu-id="60f23-711"><paramref name="method" /> はインスタンス メソッドではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-711"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="60f23-712">または</span><span class="sxs-lookup"><span data-stu-id="60f23-712">-or-</span></span> 
 <span data-ttu-id="60f23-713">見つからないなどの原因により、<paramref name="method" /> をバインドできません。また、<paramref name="throwOnBindFailure" /> が <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-713"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60f23-714"><see langword="Invoke" /> の <paramref name="type" /> メソッドが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="60f23-714">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60f23-715"><paramref name="method" /> へのアクセスに必要なアクセス許可が呼び出し元にありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-715">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="target" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="60f23-716">作成するデリゲートの <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-716">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="60f23-717"><see cref="T:System.Type" /> を実装するクラスを表す <paramref name="method" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-717">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="60f23-718">デリゲートによって表される静的メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="60f23-718">The name of the static method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="60f23-719">メソッドの名前を比較するとき大文字と小文字を無視するかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="60f23-719">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="60f23-720"><see langword="true" /> をバインドできないときに例外をスローする場合は <paramref name="method" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-720"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="60f23-721">大文字と小文字の区別方法およびバインドに失敗したときの動作を指定して、指定したクラスの指定した静的メソッドを表す、指定した型のデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-721">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="60f23-722">指定したクラスの指定した静的メソッドを表す、指定した型のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-722">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-723">このメソッドは、静的メソッドに対してのみデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="60f23-723">This method creates delegates for static methods only.</span></span> <span data-ttu-id="60f23-724">インスタンスメソッドは、クラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられているメソッドです。</span><span class="sxs-lookup"><span data-stu-id="60f23-724">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60f23-725">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]以降では、このメソッドを使用して、呼び出し元に <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> フラグで <xref:System.Security.Permissions.ReflectionPermission> が許可されていて、非パブリックメソッドの許可セットが呼び出し元の許可セットまたはそのサブセットに制限されている場合に、パブリックでないメソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="60f23-725">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="60f23-726">(「[リフレクションのセキュリティに関する考慮事項」を](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)参照してください)。</span><span class="sxs-lookup"><span data-stu-id="60f23-726">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="60f23-727">この機能を使用するには、アプリケーションで [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 以降を対象とする必要があります。</span><span class="sxs-lookup"><span data-stu-id="60f23-727">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60f23-728"><paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-728"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-729">または</span><span class="sxs-lookup"><span data-stu-id="60f23-729">-or-</span></span> 
 <span data-ttu-id="60f23-730"><paramref name="target" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-730"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-731">または</span><span class="sxs-lookup"><span data-stu-id="60f23-731">-or-</span></span> 
 <span data-ttu-id="60f23-732"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-732"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-733"><paramref name="type" /> は <see cref="T:System.MulticastDelegate" /> を継承しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-733"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="60f23-734">または</span><span class="sxs-lookup"><span data-stu-id="60f23-734">-or-</span></span> 
 <span data-ttu-id="60f23-735"><paramref name="type" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-735"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="60f23-736">「[Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)」 (リフレクションのランタイム型) を参照してください。</span><span class="sxs-lookup"><span data-stu-id="60f23-736">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="60f23-737">または</span><span class="sxs-lookup"><span data-stu-id="60f23-737">-or-</span></span> 
 <span data-ttu-id="60f23-738"><paramref name="target" /> が <see langword="RuntimeType" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-738"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="60f23-739">または</span><span class="sxs-lookup"><span data-stu-id="60f23-739">-or-</span></span> 
 <span data-ttu-id="60f23-740"><paramref name="target" /> はオープン ジェネリック型です。</span><span class="sxs-lookup"><span data-stu-id="60f23-740"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="60f23-741">つまり、その <see cref="P:System.Type.ContainsGenericParameters" /> プロパティは <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-741">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="60f23-742">または</span><span class="sxs-lookup"><span data-stu-id="60f23-742">-or-</span></span> 
 <span data-ttu-id="60f23-743"><paramref name="method" /> は <see langword="static" /> メソッド (Visual Basic では <see langword="Shared" /> メソッド) ではありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-743"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="60f23-744">または</span><span class="sxs-lookup"><span data-stu-id="60f23-744">-or-</span></span> 
 <span data-ttu-id="60f23-745">見つからないなどの原因により、<paramref name="method" /> をバインドできません。また、<paramref name="throwOnBindFailure" /> が <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-745"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="60f23-746"><see langword="Invoke" /> の <paramref name="type" /> メソッドが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="60f23-746">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="60f23-747"><paramref name="method" /> へのアクセスに必要なアクセス許可が呼び出し元にありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-747">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.DynamicInvoke : obj[] -&gt; obj" Usage="delegate.DynamicInvoke args" />
      <MemberSignature Language="C#" Value="public object DynamicInvoke (object[] args);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (args As Object()) As Object" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(cli::array &lt;System::Object ^&gt; ^ args);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="60f23-748">現在のデリゲートが表すメソッドに渡される引数であるオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="60f23-748">An array of objects that are the arguments to pass to the method represented by the current delegate.</span></span>  
  
<span data-ttu-id="60f23-749">または</span><span class="sxs-lookup"><span data-stu-id="60f23-749">-or-</span></span> 
 <span data-ttu-id="60f23-750">現在のデリゲートが表すメソッドが引数を必要としない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-750"><see langword="null" />, if the method represented by the current delegate does not require arguments.</span></span></param>
        <summary><span data-ttu-id="60f23-751">現在のデリゲートが表すメソッドを動的に呼び出します (遅延バインディング)。</span><span class="sxs-lookup"><span data-stu-id="60f23-751">Dynamically invokes (late-bound) the method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="60f23-752">デリゲートが表すメソッドによって返されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="60f23-752">The object returned by the method represented by the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-753">このメソッドは、<xref:System.Delegate.DynamicInvokeImpl%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="60f23-753">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60f23-754">呼び出し元には、デリゲートによって表されるメソッドへのアクセスはありません (たとえば、メソッドがプライベートである)。</span><span class="sxs-lookup"><span data-stu-id="60f23-754">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span>  
  
<span data-ttu-id="60f23-755">または</span><span class="sxs-lookup"><span data-stu-id="60f23-755">-or-</span></span> 
<span data-ttu-id="60f23-756"><paramref name="args" /> にリストされているパラメーターの数、順序、または型が無効です。</span><span class="sxs-lookup"><span data-stu-id="60f23-756">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-757">デリゲートが表すメソッドが、そのメソッドをサポートしないオブジェクトまたはクラスに対して呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="60f23-757">The method represented by the delegate is invoked on an object or a class that does not support it.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60f23-758">デリゲートが表すメソッドがインスタンス メソッドであり、対象オブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-758">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-759">または</span><span class="sxs-lookup"><span data-stu-id="60f23-759">-or-</span></span> 
<span data-ttu-id="60f23-760">カプセル化されたメソッドの 1 つが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="60f23-760">One of the encapsulated methods throws an exception.</span></span></exception>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member DynamicInvokeImpl : obj[] -&gt; obj&#xA;override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="delegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="60f23-761">現在のデリゲートが表すメソッドに渡される引数であるオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="60f23-761">An array of objects that are the arguments to pass to the method represented by the current delegate.</span></span>  
  
<span data-ttu-id="60f23-762">または</span><span class="sxs-lookup"><span data-stu-id="60f23-762">-or-</span></span> 
 <span data-ttu-id="60f23-763">現在のデリゲートが表すメソッドが引数を必要としない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-763"><see langword="null" />, if the method represented by the current delegate does not require arguments.</span></span></param>
        <summary><span data-ttu-id="60f23-764">現在のデリゲートが表すメソッドを動的に呼び出します (遅延バインディング)。</span><span class="sxs-lookup"><span data-stu-id="60f23-764">Dynamically invokes (late-bound) the method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="60f23-765">デリゲートが表すメソッドによって返されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="60f23-765">The object returned by the method represented by the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-766">このメソッドは、 <xref:System.Delegate.DynamicInvoke%2A> メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="60f23-766">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60f23-767">呼び出し元には、デリゲートによって表されるメソッドへのアクセスはありません (たとえば、メソッドがプライベートである)。</span><span class="sxs-lookup"><span data-stu-id="60f23-767">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span>  
  
<span data-ttu-id="60f23-768">または</span><span class="sxs-lookup"><span data-stu-id="60f23-768">-or-</span></span> 
<span data-ttu-id="60f23-769"><paramref name="args" /> にリストされているパラメーターの数、順序、または型が無効です。</span><span class="sxs-lookup"><span data-stu-id="60f23-769">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-770">デリゲートが表すメソッドが、そのメソッドをサポートしないオブジェクトまたはクラスに対して呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="60f23-770">The method represented by the delegate is invoked on an object or a class that does not support it.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="60f23-771">デリゲートが表すメソッドがインスタンス メソッドであり、対象オブジェクトが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="60f23-771">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span></span>  
  
<span data-ttu-id="60f23-772">または</span><span class="sxs-lookup"><span data-stu-id="60f23-772">-or-</span></span> 
<span data-ttu-id="60f23-773">カプセル化されたメソッドの 1 つが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="60f23-773">One of the encapsulated methods throws an exception.</span></span></exception>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="delegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="60f23-774">現在のデリゲートと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="60f23-774">The object to compare with the current delegate.</span></span></param>
        <summary><span data-ttu-id="60f23-775">指定したオブジェクトと現在のデリゲートが同じ型を持ち、同じターゲット、メソッド、および呼び出しリストを共有しているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="60f23-775">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span></span></summary>
        <returns><span data-ttu-id="60f23-776"><see langword="true" /> と現在のデリゲートが、同じターゲット、メソッド、および呼び出しリストを共有している場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-776"><see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-777">2つのデリゲートが同じ型ではない場合は、等価と見なされません。</span><span class="sxs-lookup"><span data-stu-id="60f23-777">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="60f23-778">.NET Framework バージョン1.0 および1.1 では、デリゲートの型が異なる場合でも、ターゲット、メソッド、および呼び出しリストが等しい場合は、2つのデリゲートが等しいと見なされました。</span><span class="sxs-lookup"><span data-stu-id="60f23-778">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="60f23-779">次のように、メソッドとターゲットの等価性が比較されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-779">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="60f23-780">比較する2つのメソッドが両方とも静的であり、同じクラスのメソッドである場合、メソッドは等しいと見なされ、ターゲットも等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-780">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="60f23-781">比較対象の2つのメソッドがインスタンスメソッドであり、同じオブジェクトのメソッドが同じである場合、メソッドは等しいと見なされ、ターゲットも等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-781">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="60f23-782">それ以外の場合、メソッドは等しくないと見なされ、ターゲットも等しいとは見なされません。</span><span class="sxs-lookup"><span data-stu-id="60f23-782">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="60f23-783">2つの呼び出しリストは、順序が同じで、2つのリストの対応する要素が同じメソッドとターゲットを表している場合にのみ同一と見なされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-783">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60f23-784">呼び出し元には、デリゲートによって表されるメソッドへのアクセスはありません (たとえば、メソッドがプライベートである)。</span><span class="sxs-lookup"><span data-stu-id="60f23-784">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="delegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60f23-785">デリゲートのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-785">Returns a hash code for the delegate.</span></span></summary>
        <returns><span data-ttu-id="60f23-786">デリゲートのハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="60f23-786">A hash code for the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-787">このメソッドの戻り値は、2つの理由で永続化することはできません。</span><span class="sxs-lookup"><span data-stu-id="60f23-787">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="60f23-788">まず、クラスのハッシュ関数が変更されて、より適切な分布が生成され、以前のハッシュ関数の値が役に立たなくなります。</span><span class="sxs-lookup"><span data-stu-id="60f23-788">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="60f23-789">第2に、このクラスの既定の実装では、同じ値が異なるインスタンスによって返されることは保証されません。</span><span class="sxs-lookup"><span data-stu-id="60f23-789">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="abstract member GetInvocationList : unit -&gt; Delegate[]&#xA;override this.GetInvocationList : unit -&gt; Delegate[]" Usage="delegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60f23-790">デリゲートの呼び出しリストを返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-790">Returns the invocation list of the delegate.</span></span></summary>
        <returns><span data-ttu-id="60f23-791">現在のデリゲートの呼び出しリストを表すデリゲートの配列。</span><span class="sxs-lookup"><span data-stu-id="60f23-791">An array of delegates representing the invocation list of the current delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-792">配列内の各デリゲートは、1つのメソッドのみを表します。</span><span class="sxs-lookup"><span data-stu-id="60f23-792">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="60f23-793">配列内のデリゲートの順序は、そのデリゲートが表すメソッドを現在のデリゲートが呼び出す順序と同じです。</span><span class="sxs-lookup"><span data-stu-id="60f23-793">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60f23-794">次の例では、デリゲートに3つのメソッドを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="60f23-794">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="60f23-795">次に、<xref:System.Delegate.GetInvocationList%2A> メソッドを呼び出して、デリゲートに割り当てられたメソッドの合計数を取得し、逆の順序でデリゲートを実行し、名前に部分文字列 "File" を含まないメソッドを実行します。</span><span class="sxs-lookup"><span data-stu-id="60f23-795">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="delegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60f23-796">現在のデリゲートによって表される静的メソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="60f23-796">Gets the static method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="60f23-797">現在のデリゲートによって表される静的メソッドについて説明する <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-797">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-798">このメソッドは、現在のデリゲートが静的メソッドを表す場合にのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-798">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60f23-799">呼び出し元には、デリゲートによって表されるメソッドへのアクセスはありません (たとえば、メソッドがプライベートである)。</span><span class="sxs-lookup"><span data-stu-id="60f23-799">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="delegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="60f23-800">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="60f23-800">Not supported.</span></span></param>
        <param name="context"><span data-ttu-id="60f23-801">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="60f23-801">Not supported.</span></span></param>
        <summary><span data-ttu-id="60f23-802">サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="60f23-802">Not supported.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="60f23-803">この方法はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="60f23-803">This method is not supported.</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Delegate.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60f23-804">デリゲートによって表されるメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="60f23-804">Gets the method represented by the delegate.</span></span></summary>
        <value><span data-ttu-id="60f23-805">デリゲートによって表されるメソッドについて説明する <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-805">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60f23-806">呼び出し元には、デリゲートによって表されるメソッドへのアクセスはありません (たとえば、メソッドがプライベートである)。</span><span class="sxs-lookup"><span data-stu-id="60f23-806">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Delegate * Delegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1"><span data-ttu-id="60f23-807">比較する最初のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-807">The first delegate to compare.</span></span></param>
        <param name="d2"><span data-ttu-id="60f23-808">比較する 2 番目のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-808">The second delegate to compare.</span></span></param>
        <summary><span data-ttu-id="60f23-809">指定したデリゲートが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="60f23-809">Determines whether the specified delegates are equal.</span></span></summary>
        <returns><span data-ttu-id="60f23-810"><see langword="true" /> が <paramref name="d1" /> に等しい場合は <paramref name="d2" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-810"><see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-811">同じ型の同じターゲット、メソッド、および呼び出しリストを持つ2つのデリゲートが等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-811">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="60f23-812">2つのデリゲートが同じ型ではない場合は、等価と見なされません。</span><span class="sxs-lookup"><span data-stu-id="60f23-812">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="60f23-813">.NET Framework バージョン1.0 および1.1 では、デリゲートの型が異なる場合でも、ターゲット、メソッド、および呼び出しリストが等しい場合は、2つのデリゲートが等しいと見なされました。</span><span class="sxs-lookup"><span data-stu-id="60f23-813">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="60f23-814">次のように、メソッドとターゲットの等価性が比較されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-814">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="60f23-815">比較する2つのメソッドが両方とも静的であり、同じクラスのメソッドである場合、メソッドは等しいと見なされ、ターゲットも等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-815">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="60f23-816">比較対象の2つのメソッドがインスタンスメソッドであり、同じオブジェクトのメソッドが同じである場合、メソッドは等しいと見なされ、ターゲットも等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-816">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="60f23-817">それ以外の場合、メソッドは等しくないと見なされ、ターゲットも等しいとは見なされません。</span><span class="sxs-lookup"><span data-stu-id="60f23-817">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="60f23-818">2つの呼び出しリストは同じ順序で、2つのリストの対応する要素が同じメソッドとターゲットを表している場合、同一と見なされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-818">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="60f23-819">この演算子の同等のメソッドは <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="60f23-819">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Delegate * Delegate -&gt; bool" Usage="System.Delegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1"><span data-ttu-id="60f23-820">比較する最初のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-820">The first delegate to compare.</span></span></param>
        <param name="d2"><span data-ttu-id="60f23-821">比較する 2 番目のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-821">The second delegate to compare.</span></span></param>
        <summary><span data-ttu-id="60f23-822">指定したデリゲートが等しくないかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="60f23-822">Determines whether the specified delegates are not equal.</span></span></summary>
        <returns><span data-ttu-id="60f23-823"><see langword="true" /> が <paramref name="d1" /> と等しくない場合は <paramref name="d2" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-823"><see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-824">2つのデリゲートは、型が異なる場合、または異なるメソッド、異なるターゲット、または異なる呼び出しリストがある場合、等しくないと見なされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-824">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="60f23-825">2つのデリゲートが同じ型ではない場合は、等価と見なされません。</span><span class="sxs-lookup"><span data-stu-id="60f23-825">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="60f23-826">.NET Framework バージョン1.0 および1.1 では、デリゲートの型が異なる場合でも、ターゲット、メソッド、および呼び出しリストが等しい場合は、2つのデリゲートが等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-826">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="60f23-827">次のように、メソッドとターゲットの等価性が比較されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-827">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="60f23-828">比較する2つのメソッドが両方とも静的であり、同じクラスのメソッドである場合、メソッドは等しいと見なされ、ターゲットも等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-828">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="60f23-829">比較対象の2つのメソッドがインスタンスメソッドであり、同じオブジェクトのメソッドが同じである場合、メソッドは等しいと見なされ、ターゲットも等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="60f23-829">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="60f23-830">それ以外の場合、メソッドは等しくないと見なされ、ターゲットも等しいとは見なされません。</span><span class="sxs-lookup"><span data-stu-id="60f23-830">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="60f23-831">2つの呼び出しリストは、サイズが異なる場合、異なる順序で並べ替えられている場合、または1つのリストの少なくとも1つの要素が、他のリストの対応する要素によって表されるメソッドまたはターゲットを表している場合は、等しくありません。</span><span class="sxs-lookup"><span data-stu-id="60f23-831">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="60f23-832">この演算子の同等のメソッドは <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="60f23-832">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member Remove : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Remove (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="60f23-833"><paramref name="value" /> の呼び出しリストの削除元のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-833">The delegate from which to remove the invocation list of <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="60f23-834"><paramref name="source" /> の呼び出しリストから削除される呼び出しリストを持つデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-834">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="60f23-835">一方のデリゲートの呼び出しリストから、最後に出現した他方のデリゲートの呼び出しリストを削除します。</span><span class="sxs-lookup"><span data-stu-id="60f23-835">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="60f23-836"><paramref name="source" /> の呼び出しリストが <paramref name="value" /> の呼び出しリスト内に存在する場合は、<paramref name="value" /> の呼び出しリストから、最後に出現した <paramref name="source" /> の呼び出しリストを削除して得られる呼び出しリストを持つ新しいデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-836">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="60f23-837"><paramref name="source" /> が <paramref name="value" /> の場合、または <see langword="null" /> の呼び出しリストが <paramref name="value" /> の呼び出しリスト内に見つからない場合は <paramref name="source" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-837">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="60f23-838"><paramref name="value" /> の呼び出しリストが <paramref name="source" /> の呼び出しリストと等しい場合、または <paramref name="source" /> が null 参照の場合は、null 参照を返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-838">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-839">`value` の呼び出しリストが `source`の呼び出しリスト内の一連の連続する要素と一致する場合、`value` の呼び出しリストは `source`の呼び出しリスト内で発生すると言われます。</span><span class="sxs-lookup"><span data-stu-id="60f23-839">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="60f23-840">`value` の呼び出しリストが `source`の呼び出しリストに複数回出現する場合は、最後に見つかったものが削除されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-840">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60f23-841">呼び出し元には、デリゲートによって表されるメソッドへのアクセスはありません (たとえば、メソッドがプライベートである)。</span><span class="sxs-lookup"><span data-stu-id="60f23-841">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-842">デリゲートの型が一致しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-842">The delegate types do not match.</span></span></exception>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveAll : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.RemoveAll (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="60f23-843"><paramref name="value" /> の呼び出しリストの削除元のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-843">The delegate from which to remove the invocation list of <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="60f23-844"><paramref name="source" /> の呼び出しリストから削除される呼び出しリストを持つデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-844">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="60f23-845">一方のデリゲートの呼び出しリストから、そこに出現する他方のデリゲートの呼び出しリストをすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="60f23-845">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="60f23-846"><paramref name="source" /> の呼び出しリストが <paramref name="value" /> の呼び出しリスト内に存在する場合は、<paramref name="value" /> の呼び出しリストから、そこに出現する <paramref name="source" /> の呼び出しリストをすべて削除して得られる呼び出しリストを持つ新しいデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-846">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="60f23-847"><paramref name="source" /> が <paramref name="value" /> の場合、または <see langword="null" /> の呼び出しリストが <paramref name="value" /> の呼び出しリスト内に見つからない場合は <paramref name="source" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-847">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="60f23-848"><paramref name="value" /> の呼び出しリストが <paramref name="source" /> の呼び出しリストに等しい場合、<paramref name="source" /> の呼び出しリストに等しい一連の呼び出しリストだけが <paramref name="value" /> に含まれる場合、または <paramref name="source" /> が null 参照の場合は null 参照を返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-848">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-849">`value` の呼び出しリストが `source`の呼び出しリスト内の一連の連続する要素と一致する場合、`value` の呼び出しリストは `source`の呼び出しリスト内で発生すると言われます。</span><span class="sxs-lookup"><span data-stu-id="60f23-849">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="60f23-850">`value` の呼び出しリストが `source`の呼び出しリストに複数回出現する場合、すべての発生が削除されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-850">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60f23-851">呼び出し元には、デリゲートによって表されるメソッドへのアクセスはありません (たとえば、メソッドがプライベートである)。</span><span class="sxs-lookup"><span data-stu-id="60f23-851">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60f23-852">デリゲートの型が一致しません。</span><span class="sxs-lookup"><span data-stu-id="60f23-852">The delegate types do not match.</span></span></exception>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member RemoveImpl : Delegate -&gt; Delegate&#xA;override this.RemoveImpl : Delegate -&gt; Delegate" Usage="delegate.RemoveImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="60f23-853">現在のデリゲートの呼び出しリストから削除される呼び出しリストを持つデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-853">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span></span></param>
        <summary><span data-ttu-id="60f23-854">一方のデリゲートの呼び出しリストから、他方のデリゲートの呼び出しリストを削除します。</span><span class="sxs-lookup"><span data-stu-id="60f23-854">Removes the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="60f23-855">現在のデリゲートの呼び出しリストを取得し、そのリスト内に <paramref name="value" /> の呼び出しリストがある場合は、現在のデリゲートのリストから <paramref name="value" /> の呼び出しリストを削除した結果のリストを持つ新しいデリゲート。</span><span class="sxs-lookup"><span data-stu-id="60f23-855">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span></span> <span data-ttu-id="60f23-856"><paramref name="value" /> が <see langword="null" /> の場合、または <paramref name="value" /> の呼び出しリストが現在のデリゲートの呼び出しリスト内で見つからなかった場合は現在のデリゲートを返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-856">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span></span> <span data-ttu-id="60f23-857"><see langword="null" /> の呼び出しリストが現在のデリゲートの呼び出しリストと等しい場合は <paramref name="value" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-857">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-858">`value` の呼び出しリストが現在のデリゲートの呼び出しリスト内の連続する要素のセットと一致する場合、`value` の呼び出しリストは、現在のデリゲートの呼び出しリスト内で発生すると言います。</span><span class="sxs-lookup"><span data-stu-id="60f23-858">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="60f23-859">`value` の呼び出しリストが現在のデリゲートの呼び出しリストに複数回出現する場合は、最後に出現したが削除されます。</span><span class="sxs-lookup"><span data-stu-id="60f23-859">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="60f23-860">呼び出し元には、デリゲートによって表されるメソッドへのアクセスはありません (たとえば、メソッドがプライベートである)。</span><span class="sxs-lookup"><span data-stu-id="60f23-860">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target : obj" Usage="System.Delegate.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60f23-861">現在のデリゲートがインスタンス メソッドを呼び出す対象のクラス インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="60f23-861">Gets the class instance on which the current delegate invokes the instance method.</span></span></summary>
        <value><span data-ttu-id="60f23-862">現在のデリゲートがインスタンス メソッドを表す場合は、デリゲートがインスタンス メソッドを呼び出す対象のオブジェクト。デリゲートが静的メソッドを表す場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="60f23-862">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60f23-863">インスタンスメソッドは、クラスのインスタンスに関連付けられているメソッドです。静的メソッドは、クラス自体に関連付けられているメソッドです。</span><span class="sxs-lookup"><span data-stu-id="60f23-863">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="60f23-864">デリゲートが1つ以上のインスタンスメソッドを呼び出す場合、このプロパティは、呼び出しリスト内の最後のインスタンスメソッドのターゲットを返します。</span><span class="sxs-lookup"><span data-stu-id="60f23-864">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
