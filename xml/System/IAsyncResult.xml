<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e51be1fb47a425e31a0aad72576fcfffcf6595e8" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75041492" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9367d-101">非同期操作のステータスを表します。</span><span class="sxs-lookup"><span data-stu-id="9367d-101">Represents the status of an asynchronous operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9367d-102"><xref:System.IAsyncResult> インターフェイスは、非同期的に動作できるメソッドを含むクラスによって実装されます。</span><span class="sxs-lookup"><span data-stu-id="9367d-102">The <xref:System.IAsyncResult> interface is implemented by classes containing methods that can operate asynchronously.</span></span> <span data-ttu-id="9367d-103">これは、<xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>などの非同期操作を開始するメソッドの戻り値の型であり、<xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>などの非同期操作を終了するメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9367d-103">It is the return type of methods that initiate an asynchronous operation, such as <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, and it is passed to methods that conclude an asynchronous operation, such as <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9367d-104"><xref:System.IAsyncResult> オブジェクトは、非同期操作の完了時に <xref:System.AsyncCallback> デリゲートによって呼び出されるメソッドにも渡されます。</span><span class="sxs-lookup"><span data-stu-id="9367d-104"><xref:System.IAsyncResult> objects are also passed to methods invoked by <xref:System.AsyncCallback> delegates when an asynchronous operation completes.</span></span>  
  
 <span data-ttu-id="9367d-105"><xref:System.IAsyncResult> インターフェイスをサポートするオブジェクトは、非同期操作の状態情報を格納し、同期オブジェクトを提供して、操作の完了時にスレッドが通知されるようにします。</span><span class="sxs-lookup"><span data-stu-id="9367d-105">An object that supports the <xref:System.IAsyncResult> interface stores state information for an asynchronous operation and provides a synchronization object to allow threads to be signaled when the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9367d-106"><xref:System.Runtime.Remoting.Messaging.AsyncResult> クラスは、デリゲートを使用してメソッドを非同期的に呼び出すときに `BeginInvoke` メソッドによって返される <xref:System.IAsyncResult> の実装です。</span><span class="sxs-lookup"><span data-stu-id="9367d-106">The <xref:System.Runtime.Remoting.Messaging.AsyncResult> class is the implementation of <xref:System.IAsyncResult> that is returned by the `BeginInvoke` method when you use a delegate to call a method asynchronously.</span></span>  
  
 <span data-ttu-id="9367d-107"><xref:System.IAsyncResult> インターフェイスの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9367d-107">For a detailed description of how the <xref:System.IAsyncResult> interface is used, see the [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9367d-108">次の例では、<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> プロパティを使用して <xref:System.Threading.WaitHandle>を取得する方法と、デリゲートに対する非同期呼び出しを待機する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="9367d-108">The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="9367d-109"><xref:System.Threading.WaitHandle> は非同期呼び出しが完了すると通知され、 <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出すことによってこれを待機できます。</span><span class="sxs-lookup"><span data-stu-id="9367d-109">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="9367d-110">この例は、2つのクラス (非同期に呼び出されるメソッドを含むクラスと、呼び出しを行う `Main` メソッドを含むクラス) で構成されています。</span><span class="sxs-lookup"><span data-stu-id="9367d-110">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="9367d-111">デリゲートを使用した非同期メソッドの呼び出しの詳細と例については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9367d-111">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9367d-112">非同期操作に関する情報を限定または格納するユーザー定義オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="9367d-112">Gets a user-defined object that qualifies or contains information about an asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="9367d-113">非同期操作に関する情報を限定または格納するユーザー定義オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9367d-113">A user-defined object that qualifies or contains information about an asynchronous operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9367d-114">このプロパティは、非同期操作を開始するメソッドの最後のパラメーターであるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="9367d-114">This property returns the object that is the last parameter of the method that initiates an asynchronous operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9367d-115">次のコード例は、<xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> プロパティを使用して、コールバックメソッドに情報を渡す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9367d-115">The following code example demonstrates how the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> property is used to pass information to a callback method.</span></span> <span data-ttu-id="9367d-116">`BeginInvoke` メソッド呼び出しの最後のパラメーターは、書式指定文字列です。この文字列は、コールバックメソッドが出力メッセージを書式設定するために使用します。</span><span class="sxs-lookup"><span data-stu-id="9367d-116">The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.</span></span>  
  
 <span data-ttu-id="9367d-117">この例は、2つのクラス (非同期に呼び出されるメソッドを含むクラスと、呼び出しを行う `Main` メソッドを含むクラス) で構成されています。</span><span class="sxs-lookup"><span data-stu-id="9367d-117">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="9367d-118">このコールバックの例のしくみと、デリゲートを使用してメソッドを非同期で呼び出す方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9367d-118">For more information about how this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9367d-119">非同期操作の呼び出し元が、操作の開始時に指定されたアプリケーション定義のオブジェクトを取得できるようにするには、このプロパティを実装します。</span><span class="sxs-lookup"><span data-stu-id="9367d-119">Implement this property to allow the caller of an asynchronous operation to obtain an application-defined object specified at the start of the operation.</span></span></para></block>
        <block subset="none" type="usage"><para><span data-ttu-id="9367d-120">このオブジェクトを使用すると、指定した <see cref="T:System.AsyncCallback" /> に非同期操作の状態情報を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="9367d-120">This object can be used to pass state information for the asynchronous operation to an <see cref="T:System.AsyncCallback" /> that you provide.</span></span></para></block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9367d-121">非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="9367d-121">Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span></span></summary>
        <value><span data-ttu-id="9367d-122">非同期操作が完了するまで待機するために使用する <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="9367d-122">A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9367d-123">戻り値を使用すると、クライアントは操作が終了するまで、ポーリング <xref:System.IAsyncResult.IsCompleted%2A> ではなく非同期操作が完了するまで待機できます。</span><span class="sxs-lookup"><span data-stu-id="9367d-123">The return value allows the client to wait for an asynchronous operation to complete instead of polling <xref:System.IAsyncResult.IsCompleted%2A> until the operation concludes.</span></span> <span data-ttu-id="9367d-124">戻り値は、<xref:System.Threading.WaitHandle.WaitOne%2A>、<xref:System.Threading.WaitHandle.WaitAny%2A>、または <xref:System.Threading.WaitHandle.WaitAll%2A> 操作を実行するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="9367d-124">The return value can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> operation.</span></span>  
  
 <span data-ttu-id="9367d-125">共通言語ランタイムには、<xref:System.Threading.ManualResetEvent>、<xref:System.Threading.AutoResetEvent>、<xref:System.Threading.Mutex>など、任意の待機可能なオブジェクトが用意されています。これらはすべて、Win32 同期プリミティブをミラー化します。</span><span class="sxs-lookup"><span data-stu-id="9367d-125">The common language runtime supplies a number of waitable objects, such as <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.Mutex>, all of which mirror Win32 synchronization primitives.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9367d-126">次の例では、<xref:System.IAsyncResult.AsyncWaitHandle%2A> プロパティを使用して <xref:System.Threading.WaitHandle>を取得する方法と、デリゲートに対する非同期呼び出しを待機する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="9367d-126">The following example demonstrates how to use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="9367d-127"><xref:System.Threading.WaitHandle> は非同期呼び出しが完了すると通知され、 <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出すことによってこれを待機できます。</span><span class="sxs-lookup"><span data-stu-id="9367d-127">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="9367d-128">この例は、2つのクラス (非同期に呼び出されるメソッドを含むクラスと、呼び出しを行う `Main` メソッドを含むクラス) で構成されています。</span><span class="sxs-lookup"><span data-stu-id="9367d-128">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="9367d-129">デリゲートを使用した非同期メソッドの呼び出しの詳細と例については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9367d-129">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9367d-130"><see cref="T:System.IAsyncResult" /> を実装するオブジェクトは、<see cref="P:System.IAsyncResult.AsyncWaitHandle" /> プロパティが読み込まれるまで、<see cref="T:System.Threading.WaitHandle" /> を作成する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="9367d-130">The object that implements <see cref="T:System.IAsyncResult" /> does not need to create the <see cref="T:System.Threading.WaitHandle" /> until the <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> property is read.</span></span> <span data-ttu-id="9367d-131"><see cref="T:System.IAsyncResult" /> の実装者が選択します。</span><span class="sxs-lookup"><span data-stu-id="9367d-131">It is the choice of the <see cref="T:System.IAsyncResult" /> implementer.</span></span> <span data-ttu-id="9367d-132">ただし、実装者が <see cref="P:System.IAsyncResult.AsyncWaitHandle" />を作成する場合は、適切なタイミングで待機を終了させる <see cref="T:System.Threading.WaitHandle" /> を通知する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9367d-132">However, if the implementer creates <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, it is the responsibility of the implementer to signal the <see cref="T:System.Threading.WaitHandle" /> that will terminate the wait at the appropriate time.</span></span> <span data-ttu-id="9367d-133">たとえば、非同期に呼び出されたメソッドから制御が戻ったときに、<see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> は呼び出し元に代わって待機を終了します。</span><span class="sxs-lookup"><span data-stu-id="9367d-133">For example, <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> terminates the wait on behalf of the caller when an asynchronously invoked method returns.</span></span> <span data-ttu-id="9367d-134">作成した後は、非同期操作を終了したメソッドをユーザーが呼び出すまで、<see cref="P:System.IAsyncResult.AsyncWaitHandle" /> を維持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9367d-134">Once created, <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> should be kept alive until the user calls the method that concludes the asynchronous operation.</span></span> <span data-ttu-id="9367d-135">その時点で <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> の背後にあるオブジェクトを破棄できます。</span><span class="sxs-lookup"><span data-stu-id="9367d-135">At that time the object behind <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> can be discarded.</span></span></para></block>
        <block subset="none" type="usage"><para><span data-ttu-id="9367d-136">(ポーリングではなく) 操作の完了を待機するクライアントは、このプロパティを使用して、待機する同期オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="9367d-136">Clients that wait for the operation to complete (as opposed to polling) use this property to obtain a synchronization object to wait on.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="9367d-137">デリゲートの <see langword="BeginInvoke" /> メソッドを使用してメソッドを非同期に呼び出し、結果の <see cref="T:System.IAsyncResult" />から待機ハンドルを取得する場合、<see cref="M:System.Threading.WaitHandle.Close" /> メソッドを呼び出すことにより、待機ハンドルを終了するとすぐに終了することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="9367d-137">When you use the <see langword="BeginInvoke" /> method of a delegate to call a method asynchronously and obtain a wait handle from the resulting <see cref="T:System.IAsyncResult" />, we recommend that you close the wait handle as soon as you are finished using it, by calling the <see cref="M:System.Threading.WaitHandle.Close" /> method.</span></span> <span data-ttu-id="9367d-138">待機ハンドルへのすべての参照を解放するだけの場合は、ガベージコレクションが待機ハンドルをクリアするときにシステムリソースが解放されますが、破棄可能なオブジェクトが明示的に閉じられるか破棄されると、ガベージコレクションはより効率的に動作します。</span><span class="sxs-lookup"><span data-stu-id="9367d-138">If you simply release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle, but garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</span></span> <span data-ttu-id="9367d-139">詳細については、<see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="9367d-139">For more information, see the <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> property.</span></span>  
  
</para></block></para></block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9367d-140">非同期操作が同期的に完了したかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9367d-140">Gets a value that indicates whether the asynchronous operation completed synchronously.</span></span></summary>
        <value><span data-ttu-id="9367d-141">非同期操作が同期的に完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9367d-141"><see langword="true" /> if the asynchronous operation completed synchronously; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9367d-142">呼び出しの同期完了が <xref:System.AsyncCallback> デリゲートで検出された場合、非同期操作を開始したスレッドが現在のスレッドである可能性があります。</span><span class="sxs-lookup"><span data-stu-id="9367d-142">If the synchronous completion of the call is detected in the <xref:System.AsyncCallback> delegate, it is probable that the thread that initiated the asynchronous operation is the current thread.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9367d-143"><see cref="T:System.IAsyncResult" /> インターフェイスのほとんどの実装者は、このプロパティを使用せず、<see langword="false" />を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9367d-143">Most implementers of the <see cref="T:System.IAsyncResult" /> interface will not use this property and should return <see langword="false" />.</span></span> <span data-ttu-id="9367d-144">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以降では、このプロパティが正しく実装されていない場合、<see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> メソッドを使用して作成されたタスクは完了しません。</span><span class="sxs-lookup"><span data-stu-id="9367d-144">Beginning with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], a task that is created with the <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> method will not complete if this property is not implemented correctly.</span></span> <span data-ttu-id="9367d-145">「 [4.5 のアプリケーションの互換性」を](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md)参照してください。</span><span class="sxs-lookup"><span data-stu-id="9367d-145">See [Application Compatibility in 4.5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</span></span></para></block>
        <block subset="none" type="usage"><para><span data-ttu-id="9367d-146">非同期操作が同期的に完了したかどうかを判断するには、このプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="9367d-146">Use this property to determine if the asynchronous operation completed synchronously.</span></span> <span data-ttu-id="9367d-147">たとえば、このプロパティは、i/o 要求が小さい場合に非同期 i/o 操作の <see langword="true" /> を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="9367d-147">For example, this property can return <see langword="true" /> for an asynchronous I/O operation if the I/O request was small.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9367d-148">非同期操作が完了したかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9367d-148">Gets a value that indicates whether the asynchronous operation has completed.</span></span></summary>
        <value><span data-ttu-id="9367d-149">操作が終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9367d-149"><see langword="true" /> if the operation is complete; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9367d-150">このプロパティが `true`場合、非同期操作で使用するために割り当てたリソースを破棄しても安全であると見なすことができます。</span><span class="sxs-lookup"><span data-stu-id="9367d-150">When this property is `true`, you can assume it is safe to discard any resources you allocate for use by the asynchronous operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9367d-151">次の例は、<xref:System.IAsyncResult> の <xref:System.IAsyncResult.IsCompleted%2A> プロパティを使用して、非同期呼び出しが完了したことを検出する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="9367d-151">The following example shows how to use the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.IAsyncResult> to discover when an asynchronous call completes.</span></span> <span data-ttu-id="9367d-152">この場合、非同期呼び出しは、デリゲートの `BeginInvoke` メソッドを使用して行われます。</span><span class="sxs-lookup"><span data-stu-id="9367d-152">In this case, the asynchronous call is made by using the `BeginInvoke` method of a delegate.</span></span> <span data-ttu-id="9367d-153">ユーザーインターフェイスにサービスを提供するスレッドから非同期呼び出しを行う場合は、<xref:System.IAsyncResult.IsCompleted%2A> プロパティを使用して、完了をポーリングすることができます。</span><span class="sxs-lookup"><span data-stu-id="9367d-153">You might use the <xref:System.IAsyncResult.IsCompleted%2A> property to poll for completion when making the asynchronous call from a thread that services the user interface.</span></span> <span data-ttu-id="9367d-154">完了をポーリングすると、呼び出し元スレッドは、 <xref:System.Threading.ThreadPool> スレッドで非同期呼び出しを実行しながら、実行を継続できます。</span><span class="sxs-lookup"><span data-stu-id="9367d-154">Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.</span></span>  
  
 <span data-ttu-id="9367d-155">この例は、2つのクラス (非同期に呼び出されるメソッドを含むクラスと、呼び出しを行う `Main` メソッドを含むクラス) で構成されています。</span><span class="sxs-lookup"><span data-stu-id="9367d-155">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="9367d-156">デリゲートを使用した非同期メソッドの呼び出しの詳細と例については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="9367d-156">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9367d-157">通常、実装者は、このプロパティの値として、プライベートフィールドまたは内部テストの値を返します。</span><span class="sxs-lookup"><span data-stu-id="9367d-157">Implementers will typically return the value of a private field or internal test as the value of this property.</span></span></para></block>
        <block subset="none" type="usage"><para><span data-ttu-id="9367d-158">(同期オブジェクトで待機するのではなく) 操作の状態をポーリングするクライアントは、このプロパティを使用して操作の状態を決定します。</span><span class="sxs-lookup"><span data-stu-id="9367d-158">Clients that poll for operation status (as opposed to waiting on a synchronization object) use this property to determine the status of the operation.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
