<Type Name="Console" FullName="System.Console">
  <Metadata><Meta Name="ms.openlocfilehash" Value="20d25ccf5bd8a3eb821bcf0a180a32dcd4d3e99f" /><Meta Name="ms.sourcegitcommit" Value="385ff23cc00fe9aa1c93460c62603b45c2041d0b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/22/2019" /><Meta Name="ms.locfileid" Value="74388858" /></Metadata><TypeSignature Language="C#" Value="public static class Console" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Console extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Console" />
  <TypeSignature Language="VB.NET" Value="Public Class Console" />
  <TypeSignature Language="C++ CLI" Value="public ref class Console abstract sealed" />
  <TypeSignature Language="F#" Value="type Console = class" />
  <AssemblyInfo>
    <AssemblyName>System.Console</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>コンソール アプリケーションの標準入力ストリーム、標準出力ストリーム、および標準エラー ストリームを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンソールは、ユーザーがオペレーティングシステムと対話するオペレーティングシステムウィンドウであり、コンピューターのキーボードを使用してテキスト入力を入力することによって、またはコンピューターのターミナルからテキストの出力を読み取ることによって、テキストベースのコンソールアプリケーションと対話します。 たとえば、Windows オペレーティングシステムでは、コンソールはコマンドプロンプトウィンドウと呼ばれ、MS-DOS コマンドを受け取ります。 <xref:System.Console> クラスは、コンソールから文字を読み取ったり、コンソールに文字を書き込んだりするアプリケーションの基本的なサポートを提供します。  
  
 <xref:System.Console> クラスを使用した開発の詳細については、次のセクションを参照してください。  
  
-   [コンソール i/o ストリーム](#Streams)  
  
-   [画面バッファーとコンソールウィンドウ](#Buffer)  
  
-   [コンソールの Unicode サポート](#Unicode)  
  
-   [一般的な操作](#Operations)  
  
-   [.NET Core に関する注意事項](#Core)  
  
<a name="Streams"></a>   
## <a name="console-io-streams"></a>コンソール i/o ストリーム  
 コンソールアプリケーションが起動すると、オペレーティングシステムによって自動的に3つの i/o ストリームがコンソールに関連付けられます。これは、標準入力ストリーム、標準出力ストリーム、および標準エラー出力ストリームです。 アプリケーションでは、標準入力ストリームからユーザー入力を読み取ることができます。標準出力ストリームに通常のデータを書き込みます。とは、エラーデータを標準エラー出力ストリームに書き込みます。 これらのストリームは、<xref:System.Console.In%2A?displayProperty=nameWithType>、<xref:System.Console.Out%2A?displayProperty=nameWithType>、および <xref:System.Console.Error%2A?displayProperty=nameWithType> プロパティの値としてアプリケーションに提示されます。  
  
 既定では、<xref:System.Console.In%2A> プロパティの値は、キーボードを表す <xref:System.IO.TextReader?displayProperty=nameWithType> オブジェクトであり、<xref:System.Console.Out%2A> プロパティと <xref:System.Console.Error%2A> プロパティの値は、コンソールウィンドウを表すオブジェクト <xref:System.IO.TextWriter?displayProperty=nameWithType> ます。 ただし、これらのプロパティは、コンソールウィンドウまたはキーボードを表さないストリームに設定できます。たとえば、これらのプロパティは、ファイルを表すストリームに設定できます。 標準入力、標準出力、または標準エラーストリームをリダイレクトするには、それぞれ <xref:System.Console.SetIn%2A?displayProperty=nameWithType>、<xref:System.Console.SetOut%2A?displayProperty=nameWithType>、または <xref:System.Console.SetError%2A?displayProperty=nameWithType> メソッドを呼び出します。 これらのストリームを使用する i/o 操作は同期されます。つまり、複数のスレッドがストリームの読み取りまたは書き込みを行うことができます。 これは、オブジェクトがコンソールストリームを表す場合に、通常は非同期のメソッド (<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType>など) が同期的に実行されることを意味します。  
  
> [!NOTE]
>  <xref:System.Console> クラスを使用して、サーバーアプリケーションなどの無人アプリケーションで出力を表示することは避けてください。 <xref:System.Console.Write%2A?displayProperty=nameWithType> や <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> などのメソッドの呼び出しは、GUI アプリケーションには影響しません。  
  
 基になるストリームがコンソールに送られたときに正常に動作するクラスメンバー <xref:System.Console>、ストリームがファイルなどにリダイレクトされると、例外がスローされることがあります。 標準ストリームをリダイレクトする場合に <xref:System.IO.IOException?displayProperty=nameWithType> 例外をキャッチするようにアプリケーションをプログラミングします。 また、<xref:System.Console.IsOutputRedirected%2A>、<xref:System.Console.IsInputRedirected%2A>、および <xref:System.Console.IsErrorRedirected%2A> の各プロパティを使用して、<xref:System.IO.IOException?displayProperty=nameWithType> 例外をスローする操作を実行する前に、標準ストリームがリダイレクトされるかどうかを判断することもできます。  
  
 <xref:System.Console.In%2A>、<xref:System.Console.Out%2A>、および <xref:System.Console.Error%2A> プロパティによって表されるストリームオブジェクトのメンバーを明示的に呼び出すと便利な場合があります。 たとえば、既定では、<xref:System.Console.ReadLine%2A?displayProperty=nameWithType> メソッドは標準入力ストリームから入力を読み取ります。 同様に、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドはデータを標準出力ストリームに書き込み、その後に既定の行終了文字列 (復帰とラインフィード ("\r\n")) が続きます。 ただし、<xref:System.Console> クラスには、標準エラー出力ストリームにデータを書き込むための対応するメソッドが用意されていません。また、プロパティを使用して、そのストリームに書き込まれるデータの行終了文字列を変更することもできません。  
  
 この問題を解決するには、<xref:System.Console.Out%2A> または <xref:System.Console.Error%2A> プロパティの <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> プロパティを別の行の終了文字列に設定します。 たとえば、次C#のステートメントは、標準エラー出力ストリームの行終了文字列を、2つの復帰とラインフィードシーケンスに設定します。  
  
 `Console.Error.NewLine = "\r\n\r\n";`  
  
 その後、次C#のステートメントのように、エラー出力ストリームオブジェクトの <xref:System.IO.TextWriter.WriteLine%2A> メソッドを明示的に呼び出すことができます。  
  
 `Console.Error.WriteLine();`  
  
<a name="Buffer"></a>   
## <a name="screen-buffer-and-console-window"></a>画面バッファーとコンソールウィンドウ  
 コンソールの2つの密接に関連する機能は、画面バッファーとコンソールウィンドウです。 テキストは、実際にはコンソールによって所有されているストリームの読み取りまたは書き込みを行いますが、コンソールが所有する領域に対しては、画面バッファーと呼ばれるように見えます。 画面バッファーは、コンソールの属性であり、各グリッドの交差部分または文字セルに文字を含めることができる、行と列の四角形のグリッドとして構成されています。 各文字には独自の前景色があり、各文字セルには独自の背景色があります。  
  
 画面バッファーは、コンソールウィンドウと呼ばれる四角形の領域から表示されます。 コンソールウィンドウは、コンソールのもう1つの属性です。これは、オペレーティングシステムウィンドウであるコンソール自体ではありません。 コンソールウィンドウは、画面バッファーのサイズ以下の行と列に配置されています。移動すると、基になる画面バッファーのさまざまな領域を表示できます。 画面バッファーがコンソールウィンドウよりも大きい場合は、コンソールウィンドウを画面バッファー領域の上に移動できるように、コンソールに自動的にスクロールバーが表示されます。  
  
 カーソルは、テキストが現在読み取られている、または書き込んでいる画面バッファーの位置を示します。 カーソルは非表示にしたり表示したりすることができ、その高さを変更できます。 カーソルが表示されている場合は、カーソルが常に表示されるように、コンソールウィンドウの位置が自動的に移動されます。  
  
 画面バッファー内の文字セル座標の原点は左上隅で、カーソルとコンソールウィンドウの位置はその原点を基準にして測定されます。 位置を指定するには、0から始まるインデックスを使用します。つまり、最上位の行を行0、左端の列を列0として指定します。 行インデックスと列インデックスの最大値は <xref:System.Int16.MaxValue?displayProperty=nameWithType>です。  
  
<a name="Unicode"></a>   
## <a name="unicode-support-for-the-console"></a>コンソールの Unicode サポート  
 一般に、コンソールは、現在のコンソールのコードページを使用して、入力を読み取り、出力を書き込みます。システムロケールは、既定で定義されます。 コードページは、使用可能な Unicode 文字のサブセットのみを処理できるため、特定のコードページによってマップされていない文字を表示しようとしても、コンソールはすべての文字を表示したり、正確に表現したりすることはできません。 この問題を説明する例を次に示します。 このメソッドは、U + 0410 から U + 044F までのキリル文字をコンソールに表示しようとします。 コンソールコードページ437を使用するシステムでこの例を実行した場合、キリル文字はコードページ437の文字にマップされないため、各文字は疑問符 (?) に置き換えられます。  
  
 [!code-csharp[System.Console.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/unicode1.cs#1)]
 [!code-vb[System.Console.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/unicode1.vb#1)]  
  
 <xref:System.Console> クラスでは、コードページのサポートに加えて、<xref:System.Text.UTF8Encoding> クラスを使用した UTF-8 エンコードがサポートされています。 .NET Framework 4.5 以降では、<xref:System.Console> クラスは <xref:System.Text.UnicodeEncoding> クラスを使用した UTF-16 エンコードもサポートしています。 を入力すると、Unicode 文字がコンソールに表示されます。 <xref:System.Console.OutputEncoding%2A> プロパティを <xref:System.Text.UTF8Encoding> または <xref:System.Text.UnicodeEncoding>に設定します。  
  
 Unicode 文字をサポートするには、エンコーダーが特定の Unicode 文字を認識する必要があります。また、その文字を表示するために必要なグリフを持つフォントも必要です。 コンソールに Unicode 文字を正しく表示するには、コンソールのフォントを非ラスターまたは TrueType フォント (Consolas, や Lucida Console など) に設定する必要があります。 次の例では、ラスターフォントのフォントを Lucida Console にプログラムで変更する方法を示します。  
  
 [!code-csharp[System.Console.Class.Unsafe#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class.unsafe/cs/setfont1.cs#3)]
 [!code-vb[System.Console.Class.Unsafe#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class.unsafe/vb/setfont1.vb#3)]  
  
 ただし、TrueType フォントでは、グリフのサブセットのみを表示できます。 たとえば、Lucida コンソールのフォントでは、U + 0021 から U + FB02 までの使用可能な約64000文字が643だけが表示されます。 特定のフォントでサポートされている文字を確認するには、コントロールパネルの **[フォント]** アプレットを開き、**[文字の検索]** オプションを選択します。次に、文字**マップ**の **[フォント]** の一覧で、検査する文字セットのフォントを選択します。windows.  
  
 Windows では、フォントリンクを使用して、特定のフォントで使用できないグリフが表示されます。 追加の文字セットを表示するためのフォントリンクの詳細については、「[グローバリゼーションのステップバイステップ: フォント](https://go.microsoft.com/fwlink/?LinkId=229111)」を参照してください。 リンクされたフォントは、レジストリの HKEY_LOCAL_MACHINE \SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink サブキーで定義されます。 このサブキーに関連付けられている各エントリは、基本フォントの名前に対応します。その値は、フォントファイルと、基本フォントにリンクされているフォントを定義する文字列配列です。 配列の各メンバーは、リンクされたフォントを定義し、*フォントファイル名*と*フォント名*の形式をとります。 次の例では、簡略化された文字を表示する .ttc という名前のフォントファイルで、簡単に使用できるリンクされたフォントをプログラムによって定義する方法を示します。  
  
 [!code-csharp[System.Console.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/fontlink1.cs#2)]
 [!code-vb[System.Console.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/fontlink1.vb#2)]  
  
 コンソールの Unicode サポートには、次の制限があります。  
  
-   32 UTF-8 エンコードはサポートされていません。 サポートされている Unicode エンコーディングは、UTF-8 と UTF-16 だけです。これは、それぞれ <xref:System.Text.UTF8Encoding> クラスと <xref:System.Text.UnicodeEncoding> クラスによって表されます。  
  
-   双方向の出力はサポートされていません。  
  
-   基本多言語プレーン (サロゲートペア) 以外の文字の表示は、リンクされたフォントファイルで定義されていても、サポートされていません。  
  
-   複雑なスクリプトでの文字の表示はサポートされていません。  
  
-   文字シーケンス (つまり、基本文字と1つ以上の組み合わせ文字で構成される文字) を組み合わせると、個別の文字として表示されます。 この制限を回避するには、コンソールに出力を送信する前に、<xref:System.String.Normalize%2A?displayProperty=nameWithType> メソッドを呼び出して、表示される文字列を正規化します。 次の例では、結合文字シーケンス U + 0061 U + 0308 を含む文字列が、出力文字列が正規化される前の2文字としてコンソールに表示され、<xref:System.String.Normalize%2A?displayProperty=nameWithType> メソッドが呼び出された後の1文字として表示されます。  
  
     [!code-csharp[System.Console.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/normalize1.cs#5)]
     [!code-vb[System.Console.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/normalize1.vb#5)]  
  
     正規化は、文字の Unicode 標準に、特定の組み合わせ文字シーケンスに対応する事前に構成された形式が含まれている場合にのみ、実行可能な解決策になることに注意してください。  
  
-   フォントがプライベート使用領域のコードポイントのグリフを提供する場合、そのグリフが表示されます。 ただし、プライベートな使用領域の文字はアプリケーションに固有であるため、これは予期されるグリフではない可能性があります。  
  
 次の例では、Unicode 文字の範囲をコンソールに表示します。 この例では、3つのコマンドラインパラメーター (表示する範囲の先頭、表示する範囲の末尾、現在のコンソールエンコード (`false`) または UTF-16 エンコーディング (`true`) を使用するかどうかを指定します。 コンソールで TrueType フォントが使用されていることを前提としています。  
  
 [!code-csharp[System.Console.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/example3.cs#4)]
 [!code-vb[System.Console.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/example3.vb#4)]  
  
<a name="Operations"></a>   
## <a name="common-operations"></a>一般的な操作  
 <xref:System.Console> クラスには、コンソール入力を読み取り、コンソール出力を書き込むための次のメソッドが含まれています。  
  
-   <xref:System.Console.ReadKey%2A> メソッドのオーバーロードは、個々の文字を読み取ります。  
  
-   <xref:System.Console.ReadLine%2A> メソッドは、入力行全体を読み取ります。  
  
-   <xref:System.Console.Write%2A> メソッドのオーバーロードは、値型のインスタンス、文字の配列、または一連のオブジェクトを書式設定された文字列または書式設定されていない文字列に変換し、その文字列をコンソールに書き込みます。  
  
-   <xref:System.Console.WriteLine%2A> メソッドオーバーロードの並列セットは、<xref:System.Console.Write%2A> オーバーロードと同じ文字列を出力しますが、行終端文字列も追加します。  
  
 <xref:System.Console> クラスには、次の操作を実行するためのメソッドとプロパティも含まれています。  
  
-   画面バッファーのサイズを取得または設定します。 <xref:System.Console.BufferHeight%2A> プロパティと <xref:System.Console.BufferWidth%2A> プロパティを使用すると、バッファーの高さと幅をそれぞれ取得または設定できます。 <xref:System.Console.SetBufferSize%2A> メソッドを使用すると、1回のメソッド呼び出しでバッファーサイズを設定できます。  
  
-   コンソールウィンドウのサイズを取得または設定します。 <xref:System.Console.WindowHeight%2A> プロパティと <xref:System.Console.WindowWidth%2A> プロパティを使用すると、ウィンドウの高さと幅をそれぞれ取得または設定できます。また、<xref:System.Console.SetWindowSize%2A> メソッドを使用すると、1回のメソッド呼び出しでウィンドウのサイズを設定できます。  
  
-   カーソルのサイズを取得または設定します。 <xref:System.Console.CursorSize%2A> プロパティは、文字セル内のカーソルの高さを指定します。  
  
-   画面バッファーに対するコンソールウィンドウの相対位置を取得または設定します。 <xref:System.Console.WindowTop%2A> プロパティと <xref:System.Console.WindowLeft%2A> プロパティを使用すると、コンソールウィンドウに表示される画面バッファーの先頭行と左端の列を取得または設定できます。また、<xref:System.Console.SetWindowPosition%2A> メソッドを使用すると、これらの値を1回のメソッド呼び出しで設定できます。  
  
-   <xref:System.Console.CursorTop%2A> および <xref:System.Console.CursorLeft%2A> プロパティを取得または設定するか、<xref:System.Console.SetCursorPosition%2A> メソッドを呼び出してカーソルの位置を設定することによって、カーソルの位置を取得または設定します。  
  
-   <xref:System.Console.MoveBufferArea%2A> または <xref:System.Console.Clear%2A> メソッドを呼び出して、画面バッファー内のデータを移動またはクリアします。  
  
-   <xref:System.Console.ForegroundColor%2A> と <xref:System.Console.BackgroundColor%2A> のプロパティを使用して、前景色と背景色を取得または設定します。 <xref:System.Console.ResetColor%2A> メソッドを呼び出すことによって、背景と前景の既定の色をリセットします。  
  
-   <xref:System.Console.Beep%2A> メソッドを呼び出して、コンソールのスピーカーからビープ音を再生します。  
  
<a name="Core"></a>   
## <a name="includenet_coreincludesnet-core-mdmd-notes"></a>[!INCLUDE[net_core](~/includes/net-core-md.md)] での注意  
 デスクトップの .NET Framework では、<xref:System.Console> クラスは `GetConsoleCP` および `GetConsoleOutputCP`によって返されるエンコーディングを使用します。これは通常、コードページのエンコーディングです。 コード例として、カルチャが英語 (米国) であるシステムでは、コードページ437が既定で使用されるエンコーディングです。 しかし、[!INCLUDE[net_core](~/includes/net-core-md.md)] では、これらのエンコードの限られたサブセットしか使用できないことがあります。 この場合、コンソールの既定のエンコードとして <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> が使用されます。  
  
 アプリが特定のコードページエンコーディングに依存している場合でも、<xref:System.Console> メソッドを呼び出す*前に*、次の手順を実行して使用可能にすることができます。  
  
1.  プロジェクトに、参照を追加して、コードページ...........................  
  
2.  <xref:System.Text.EncodingProvider> プロパティから、<xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> オブジェクトを取得します。  
  
3.  <xref:System.Text.EncodingProvider> オブジェクトを <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> メソッドに渡すと、エンコーディング プロバイダーでサポートされているその他のエンコードを利用できるようになります。  
  
 <xref:System.Console> クラスは、<xref:System.Console> 出力メソッドを呼び出す前にエンコードプロバイダーを登録した場合、UTF8 ではなく既定のシステムエンコードを自動的に使用します。  
  
   
  
## Examples  
 次の例では、標準入力ストリームと出力ストリームに対してデータの読み取りと書き込みを行う方法を示します。 これらのストリームは、<xref:System.Console.SetIn%2A> および <xref:System.Console.SetOut%2A> メソッドを使用してリダイレクトできます。  
  
 [!code-cpp[Classic Console Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Console Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Console Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Console Example/CS/source.cs#1)]
 [!code-vb[Classic Console Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Console Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.BackgroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BackgroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor BackgroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundColor : ConsoleColor with get, set" Usage="System.Console.BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソールの背景色を取得または設定します。</summary>
        <value>コンソールの背景色、つまり、各文字の背後に表示される色を指定する値。 既定値は黒です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.BackgroundColor%2A> プロパティの変更は、背景色が変更された後に個々の文字セルに書き込まれる出力のみに影響します。 コンソールウィンドウ全体の背景色を変更するには、<xref:System.Console.BackgroundColor%2A> プロパティを設定し、<xref:System.Console.Clear%2A> メソッドを呼び出します。 具体的な例を次に示します。  
  
 [!code-csharp[System.Console.BackgroundColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.backgroundcolor/cs/backgroundcolor1.cs#1)]
 [!code-vb[System.Console.BackgroundColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.backgroundcolor/vb/backgroundcolor1.vb#1)]  
  
 コンソールが存在しない Windows ベースのアプリケーションの get 操作では <xref:System.ConsoleColor.Black?displayProperty=nameWithType>が返されます。  
  
   
  
## Examples  
 次の例では、<xref:System.ConsoleColor> 列挙型の値を配列に保存し、<xref:System.Console.BackgroundColor%2A> および <xref:System.Console.ForegroundColor%2A> プロパティの現在の値を変数に格納します。 次に、現在の背景と一致する色を除き、<xref:System.ConsoleColor> 列挙の前景色をそれぞれの色に変更し、現在のと一致する色を除き、<xref:System.ConsoleColor> 列挙の各色に背景色を変更します。フォア. (前景色が背景色と同じ場合、テキストは表示されません)。最後に、<xref:System.Console.ResetColor%2A> メソッドを呼び出して、元のコンソールの色を復元します。  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で指定された色は、<see cref="T:System.ConsoleColor" /> の有効なメンバーではありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Beep">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コンソールのスピーカーからビープ音を出します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberSignature Language="F#" Value="static member Beep : unit -&gt; unit" Usage="System.Console.Beep " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コンソールのスピーカーからビープ音を出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、ビープ音は200ミリ秒間の800ヘルツの周波数で再生されます。  
  
> [!NOTE]
>  <xref:System.Console.Beep%2A> 方法は、Windows Vista および Windows XP の64ビット版ではサポートされていません。  
  
 <xref:System.Console.Beep%2A> は、Windows[ビープ音関数](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)の呼び出しをラップします。 Windows 7 より前のバージョンの Windows で <xref:System.Console.Beep%2A> が生成されるかどうかは、8254のプログラム可能な期間タイマーチップの有無によって異なります。 Windows 7 以降では、既定のサウンドデバイスに依存しています。  
  
   
  
## Examples  
 <xref:System.Console.Beep%2A>メソッドの例を次に示します。 この例では、1 ~ 9 の数値をコマンドライン引数として受け取り、ビープ音を鳴らします。  
  
 [!code-cpp[console.beep#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep/CPP/beep.cpp#1)]
 [!code-csharp[console.beep#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep/CS/beep.cs#1)]
 [!code-vb[console.beep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep/VB/beep.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.HostProtectionException">このメソッドは、SQL Server などのユーザー インターフェイスへのアクセスを許可しないサーバーで実行されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep (int frequency, int duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep(int32 frequency, int32 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep (frequency As Integer, duration As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep(int frequency, int duration);" />
      <MemberSignature Language="F#" Value="static member Beep : int * int -&gt; unit" Usage="System.Console.Beep (frequency, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frequency" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="duration" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="frequency">ビープ音の周波数。37 Hz から 32767 Hz の範囲で指定できます。</param>
        <param name="duration">ビープ音の再生時間。ミリ秒単位で指定します。</param>
        <summary>周波数と時間を指定して、コンソールのスピーカーからビープ音を出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.Beep%2A> は、Windows[ビープ音関数](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)の呼び出しをラップします。 Windows 7 より前のバージョンの Windows で <xref:System.Console.Beep%2A> が生成されるかどうかは、8254のプログラム可能な期間タイマーチップの有無によって異なります。 Windows 7 以降では、既定のサウンドデバイスに依存しています。  
  
> [!NOTE]
>  <xref:System.Console.Beep%2A> 方法は、Windows Vista および Windows XP の64ビット版ではサポートされていません。  
  
   
  
## Examples  
 この例では、コンソールのスピーカーを使用して楽曲の最初のいくつかのメモを再生することによって <xref:System.Console.Beep%2A> 方法を示します。  
  
 [!code-cpp[console.beep2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep2/CPP/b2.cpp#1)]
 [!code-csharp[console.beep2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep2/CS/b2.cs#1)]
 [!code-vb[console.beep2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep2/VB/b2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="frequency" /> は 37 ヘルツ未満または 32767 ヘルツを超えます。  
  
または 
 <paramref name="duration" /> が 0 以下です。</exception>
        <exception cref="T:System.Security.HostProtectionException">このメソッドは、SQL Server などのコンソールへのアクセスを許可しないサーバーで実行されました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferHeight">
      <MemberSignature Language="C#" Value="public static int BufferHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BufferHeight : int with get, set" Usage="System.Console.BufferHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッファー領域の高さを取得または設定します。</summary>
        <value>バッファー領域の現在の高さを示す行数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、コンソールモードウィンドウによってアクセスされるバッファーに格納される行 (または行) の数を定義します。 これに対し、<xref:System.Console.WindowHeight%2A> プロパティは、特定の時刻にコンソールウィンドウに実際に表示される行の数を定義します。 実際にバッファーに書き込まれた行の数が <xref:System.Console.WindowHeight%2A> プロパティによって定義された行の数を超えている場合は、ウィンドウを垂直方向にスクロールして、<xref:System.Console.WindowHeight%2A> プロパティと同じ連続した数の行を表示し、の任意の場所に配置することができます。バッファー。  
  
 設定操作によって <xref:System.Console.BufferHeight%2A> プロパティの値が減少した場合は、一番上の行が削除されます。 たとえば、行の数が300から250に短縮されると、行 0 ~ 49 が削除され、50から299の既存の行が行0から249になります。  
  
   
  
## Examples  
 この例では、<xref:System.Console.BufferHeight%2A> プロパティと <xref:System.Console.BufferWidth%2A> プロパティを示します。 この例では、オペレーティングシステムウィンドウのサイズが300行と85列のバッファーサイズに設定されています。  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">セット操作の値が 0 以下です。  
  
または 
セット操作の値が <see cref="F:System.Int16.MaxValue" /> 以上です。  
  
または 
セット操作の値が <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" /> 未満です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="BufferWidth">
      <MemberSignature Language="C#" Value="public static int BufferWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BufferWidth : int with get, set" Usage="System.Console.BufferWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッファー領域の幅を取得または設定します。</summary>
        <value>バッファー領域の現在の幅を示す列数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定操作によって <xref:System.Console.BufferWidth%2A> プロパティの値が減少すると、右端の列が削除されます。 たとえば、列の数が80から60に縮小されると、各行の 60 ~ 79 列が削除されます。  
  
   
  
## Examples  
 この例では、<xref:System.Console.BufferHeight%2A> プロパティと <xref:System.Console.BufferWidth%2A> プロパティを示します。 この例では、オペレーティングシステムウィンドウのサイズが300行と85列のバッファーサイズに設定されています。  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">セット操作の値が 0 以下です。  
  
または 
セット操作の値が <see cref="F:System.Int16.MaxValue" /> 以上です。  
  
または 
セット操作の値が <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" /> 未満です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CancelKeyPress">
      <MemberSignature Language="C#" Value="public static event ConsoleCancelEventHandler CancelKeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ConsoleCancelEventHandler CancelKeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Console.CancelKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event CancelKeyPress As ConsoleCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event ConsoleCancelEventHandler ^ CancelKeyPress;" />
      <MemberSignature Language="F#" Value="member this.CancelKeyPress : ConsoleCancelEventHandler " Usage="member this.CancelKeyPress : System.ConsoleCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="F:System.ConsoleModifiers.Control" /> の修飾子キー (Ctrl) と <see cref="F:System.ConsoleKey.C" /> コンソール キー (c) または中断キーが同時にプッシュされた場合 (Ctrl + C または Ctrl + Break) に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントは、<xref:System.ConsoleCancelEventHandler?displayProperty=nameWithType> と <xref:System.ConsoleCancelEventArgs?displayProperty=nameWithType>と組み合わせて使用されます。 <xref:System.Console.CancelKeyPress> イベントを使用すると、コンソールアプリケーションは Ctrl + C 信号を受け取ることができるため、イベントハンドラーは実行を続行するか終了するかを決定できます。 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
 ユーザーが Ctrl + C キーまたは Ctrl + Break キーを押すと、<xref:System.Console.CancelKeyPress> イベントが発生し、アプリケーションの <xref:System.ConsoleCancelEventHandler> イベントハンドラーが実行されます。 イベントハンドラーには、次の2つの便利なプロパティを持つ <xref:System.ConsoleCancelEventArgs> オブジェクトが渡されます。  
  
-   <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>を使用すると、ユーザーが Ctrl + C キーを押した結果としてハンドラーが呼び出されたかどうか (プロパティ値は <xref:System.ConsoleSpecialKey.ControlC?displayProperty=nameWithType>) または Ctrl + Break (プロパティ値は <xref:System.ConsoleSpecialKey.ControlBreak?displayProperty=nameWithType>) を確認できます。  
  
-   <xref:System.ConsoleCancelEventArgs.Cancel%2A>。アプリケーションがユーザーに対して Ctrl + C または Ctrl + Break キーを押して応答する方法を決定できます。 既定では、<xref:System.ConsoleCancelEventArgs.Cancel%2A> プロパティは `false`であり、これにより、イベントハンドラーが終了したときにプログラムの実行が終了します。 プロパティを `true` に変更すると、アプリケーションの実行を継続する必要があることが指定されます。  
  
> [!TIP]
>  アプリケーションに単純な要件がある場合は、このイベントの代わりに <xref:System.Console.TreatControlCAsInput%2A> プロパティを使用できます。 このプロパティを `false`に設定すると、ユーザーが Ctrl + C キーを押した場合にアプリケーションが常に終了するように設定できます。 `true`に設定することにより、Ctrl + C キーを押してもアプリケーションが終了しないようにすることができます。  
  
 このイベントのイベントハンドラーは、スレッドプールのスレッドで実行されます。  
  
   
  
## Examples  
 次の例は、<xref:System.Console.CancelKeyPress> イベントの使用方法を示しています。 Ctrl + C キーを押すと、読み取り操作が中断され、`myHandler` イベントハンドラーが呼び出されます。 イベントハンドラーへの入力時には、<xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType> プロパティが `false`ます。これは、イベントハンドラーが終了したときに現在のプロセスが終了することを意味します。 ただし、イベントハンドラーは、<xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType> プロパティを `true`に設定します。これは、プロセスが終了せず、読み取り操作が再開されることを意味します。  
  
 [!code-cpp[console.cancelkeypress#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cancelkeypress/cpp/ckp.cpp#1)]
 [!code-csharp[console.cancelkeypress#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cancelkeypress/cs/ckp.cs#1)]
 [!code-vb[console.cancelkeypress#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cancelkeypress/vb/ckp.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.ConsoleCancelEventArgs" />
        <altmember cref="T:System.ConsoleCancelEventHandler" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public static bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CapsLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CapsLock : bool" Usage="System.Console.CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>CapsLock がオンかオフかを示す値を取得します。</summary>
        <value>CapsLock がオンの場合は <see langword="true" />、CapsLock がオフの場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">取得操作は Windows 以外のオペレーティング システムで呼び出されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Clear();" />
      <MemberSignature Language="F#" Value="static member Clear : unit -&gt; unit" Usage="System.Console.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コンソール バッファーおよび対応するコンソール ウィンドウをクリアします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.Clear%2A> メソッドを使用することは、コマンドプロンプトウィンドウで MS-DOS `cls` コマンドを呼び出すことと同じです。 <xref:System.Console.Clear%2A> メソッドが呼び出されると、カーソルはウィンドウの左上隅に自動的にスクロールし、現在の前景色を使用して画面バッファーの内容が空白に設定されます。  
  
> [!NOTE]
>  コンソールアプリケーションの出力がファイルにリダイレクトされるときに <xref:System.Console.Clear%2A> メソッドを呼び出そうとすると、<xref:System.IO.IOException>がスローされます。 これを回避するには、常に `try`...`catch` の <xref:System.Console.Clear%2A> メソッドの呼び出しをラップします。 ブロックです。  
  
   
  
## Examples  
 次の例では、<xref:System.Console.Clear%2A> メソッドを使用して、ループを実行する前にコンソールをクリアし、前景色と背景色を選択して、表示する文字列を入力するようにユーザーに求めます。 ユーザーがプログラムを終了しないことを選択した場合は、コンソールの元の前景色と背景色が復元され、ループを再実行する前に <xref:System.Console.Clear%2A> メソッドが再度呼び出されます。  
  
 [!code-csharp[System.Console.Clear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.clear/cs/clear1.cs#1)]
 [!code-vb[System.Console.Clear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.clear/vb/clear1.vb#1)]  
  
 この例では、`GetKeyPress` メソッドを使用して、ユーザーによる前景色と背景色の選択を検証します。  
  
 この例では、<xref:System.Console.CursorLeft%2A> と <xref:System.Console.CursorTop%2A> のプロパティ、および <xref:System.Console.SetCursorPosition%2A> および <xref:System.Console.Clear%2A> メソッドを示します。 この例では、カーソルを移動し、次の書き込みが行われる場所を決定します。これにより、"+"、"&#124;"、および "-" の文字列を組み合わせて、5文字の四角形で5文字を描画します。 四角形は、他の文字列の組み合わせを使用して、より少数の手順で描画できます。  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CursorLeft">
      <MemberSignature Language="C#" Value="public static int CursorLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorLeft : int with get, set" Usage="System.Console.CursorLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッファー領域におけるカーソルの列位置を取得または設定します。</summary>
        <value>カーソルの現在位置 (列)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 この例では、<xref:System.Console.CursorLeft%2A> と <xref:System.Console.CursorTop%2A> のプロパティ、および <xref:System.Console.SetCursorPosition%2A> および <xref:System.Console.Clear%2A> メソッドを示します。 この例では、カーソルを移動し、次の書き込みが行われる場所を決定します。これにより、"+"、"&#124;"、および "-" の文字列を組み合わせて、5文字の四角形で5文字を描画します。 四角形は、他の文字列の組み合わせを使用して、より少数の手順で描画できます。  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作の値が 0 より小さい値です。  
  
または 
セット操作の値が <see cref="P:System.Console.BufferWidth" /> 以上です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorSize">
      <MemberSignature Language="C#" Value="public static int CursorSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorSize" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorSize : int with get, set" Usage="System.Console.CursorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>文字セル内のカーソルの高さを取得または設定します。</summary>
        <value>文字セルの高さに対する割合で表されたカーソルのサイズ。 プロパティ値の範囲は、1 ～ 100 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カーソルの外観は、プロパティ値が1の場合にセルの下部にある水平線から、プロパティ値が100のときにセルを完全に埋めるように変化します。  
  
   
  
## Examples  
 この例では、<xref:System.Console.CursorSize%2A> プロパティを示します。 この例では、コンソールキーが押されるたびにカーソルのサイズを増やし、終了する前にカーソルを元のサイズに戻します。  
  
 [!code-cpp[console.cursorsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorsize/CPP/csize.cpp#1)]
 [!code-csharp[console.cursorsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorsize/CS/csize.cs#1)]
 [!code-vb[console.cursorsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorsize/VB/csize.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作で指定された値は、1 より小さい値か、100 より大きい値になります。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorTop">
      <MemberSignature Language="C#" Value="public static int CursorTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorTop : int with get, set" Usage="System.Console.CursorTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッファー領域におけるカーソルの行位置を取得または設定します。</summary>
        <value>カーソルの現在位置 (行)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 この例では、<xref:System.Console.CursorLeft%2A> と <xref:System.Console.CursorTop%2A> のプロパティ、および <xref:System.Console.SetCursorPosition%2A> および <xref:System.Console.Clear%2A> メソッドを示します。 この例では、カーソルを移動し、次の書き込みが行われる場所を決定します。これにより、"+"、"&#124;"、および "-" の文字列を組み合わせて、5文字の四角形で5文字を描画します。 四角形は、他の文字列の組み合わせを使用して、より少数の手順で描画できます。  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作の値が 0 より小さい値です。  
  
または 
セット操作の値が <see cref="P:System.Console.BufferHeight" /> 以上です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorVisible">
      <MemberSignature Language="C#" Value="public static bool CursorVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CursorVisible" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorVisible" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CursorVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CursorVisible : bool with get, set" Usage="System.Console.CursorVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルを表示するかどうかを示す値を取得または設定します。</summary>
        <value>カーソルを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 この例では、<xref:System.Console.CursorVisible%2A> プロパティを示します。 この例では、入力の最初の列が ' + ' 文字の場合はカーソルが表示され、入力が '-' 文字の場合は非表示になります。  
  
 [!code-cpp[console.cursorvis#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorvis/CPP/vis.cpp#1)]
 [!code-csharp[console.cursorvis#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorvis/CS/vis.cs#1)]
 [!code-vb[console.cursorvis#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorvis/VB/vis.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">取得操作は Windows 以外のオペレーティング システムで呼び出されています。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Error" />
      <MemberSignature Language="DocId" Value="P:System.Console.Error" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Error As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Error { System::IO::TextWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Error : System.IO.TextWriter" Usage="System.Console.Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>標準エラー出力ストリームを取得します。</summary>
        <value>標準エラー出力ストリームを表す <see cref="T:System.IO.TextWriter" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、この標準エラーストリームはコンソールに設定されています。 <xref:System.Console.SetError%2A> メソッドを使用して、別のストリームに設定できます。 標準エラーストリームがリダイレクトされたら、<xref:System.Console.OpenStandardError%2A> メソッドを呼び出すことによって再獲得できます。  
  
 多くの場合、情報出力がファイルにリダイレクトされるコンソールアプリケーションでは、出力がリダイレクトされる場合でも、<xref:System.Console.Error%2A> プロパティを介して使用できる標準エラーストリームを使用して、コンソールに情報を表示できます。 次の例では、1から始まる10個の数値の製品テーブルを表示します。 10個の数値の各セットの後に、<xref:System.Console.Error%2A> プロパティを使用して、次のセットを表示するかどうかをユーザーに要求します。 標準出力がファイルにリダイレクトされた場合でも、ルーチンが次の製品セットを生成するかどうかを確認するメッセージが表示されます。  
  
 [!code-csharp[System.Console.Error#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.error/cs/error1.cs#1)]
 [!code-vb[System.Console.Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.error/vb/error1.vb#1)]  
  
   
  
## Examples  
 次の例は、ExpandTabs という名前のコマンドラインユーティリティで、テキストファイル内のタブ文字が、`tabSize` 変数によって定義された値である4つのスペースに置き換えられています。 標準の入力ストリームと出力ストリームをファイルにリダイレクトしますが、<xref:System.Console.Error%2A> プロパティを使用して、標準エラーストリームをコンソールに書き込みます。 タブ文字を含むファイルの名前と出力ファイルの名前を指定することで、コマンドラインから起動できます。  
  
 [!code-cpp[Console-EXPANDTABSEX#1](~/samples/snippets/cpp/VS_Snippets_CLR/Console-EXPANDTABSEX/CPP/expandtabsex.cpp#1)]
 [!code-csharp[Console-EXPANDTABSEX#1](~/samples/snippets/csharp/VS_Snippets_CLR/Console-EXPANDTABSEX/CS/expandtabsex.cs#1)]
 [!code-vb[Console-EXPANDTABSEX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Console-EXPANDTABSEX/VB/expandtabsex.vb#1)]  
  
 次の例は、コンソールに1つ以上のテキストファイルの内容を表示する単純なテキストファイルビューアーです。 コマンドライン引数がない場合、またはコマンドライン引数として渡されたファイルが存在しない場合、この例では <xref:System.Console.SetError%2A> メソッドを呼び出して、エラー情報をファイルにリダイレクトし、標準エラーストリームを reacquiring するプロセスで <xref:System.Console.OpenStandardError%2A> メソッドを呼び出します。、およびは、エラー情報がファイルに書き込まれたことを示します。  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 エラーストリームを reacquiring する前に、<xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> プロパティが `true` に設定されていることに注意してください。 これにより、バッファーではなく、直ちに出力がコンソールに送信されるようになります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ForegroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor ForegroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor ForegroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.ForegroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ForegroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor ForegroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberSignature Language="F#" Value="member this.ForegroundColor : ConsoleColor with get, set" Usage="System.Console.ForegroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソールの前景色を取得または設定します。</summary>
        <value>コンソールの前景色、つまり、表示される各文字の色を指定する <see cref="T:System.ConsoleColor" />。 既定値は灰色です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンソールが存在しない Windows ベースのアプリケーションの get 操作では <xref:System.ConsoleColor.Gray>が返されます。  
  
   
  
## Examples  
 次の例では、コンソールの背景色が黒であるかどうかを確認し、存在する場合は背景色を赤に、前景色を黒に変更します。  
  
 [!code-csharp[System.ConsoleColor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/Example2.cs#2)] 
 [!code-vb[System.ConsoleColor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/Example2.vb#2)]  
  
 次の例では、<xref:System.ConsoleColor> 列挙型の値を配列に保存し、<xref:System.Console.BackgroundColor%2A> および <xref:System.Console.ForegroundColor%2A> プロパティの現在の値を変数に格納します。 次に、現在の背景と一致する色を除き、<xref:System.ConsoleColor> 列挙の前景色をそれぞれの色に変更し、現在のと一致する色を除き、<xref:System.ConsoleColor> 列挙の各色に背景色を変更します。フォア. (前景色が背景色と同じ場合、テキストは表示されません)。最後に、<xref:System.Console.ResetColor%2A> メソッドを呼び出して、元のコンソールの色を復元します。  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で指定された色は、<see cref="T:System.ConsoleColor" /> の有効なメンバーではありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public static System.IO.TextReader In { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextReader In" />
      <MemberSignature Language="DocId" Value="P:System.Console.In" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property In As TextReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextReader ^ In { System::IO::TextReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.In : System.IO.TextReader" Usage="System.Console.In" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>標準入力ストリームを取得します。</summary>
        <value>標準入力ストリームを表す <see cref="T:System.IO.TextReader" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、既定で標準入力ストリームに設定されます。 このプロパティは、<xref:System.Console.SetIn%2A> メソッドを使用して別のストリームに設定できます。  
  
 標準入力ストリームに対する読み取り操作は、同期的に実行されます。 つまり、指定した読み取り操作が完了するまでブロックします。 これは、<xref:System.IO.TextReader.ReadLineAsync%2A>などの非同期メソッドが、<xref:System.Console.In%2A> プロパティによって返される <xref:System.IO.TextReader> オブジェクトで呼び出された場合にも当てはまります。  
  
   
  
## Examples  
 次の例は、`In` プロパティの使用方法を示しています。  
  
 [!code-cpp[consolein#1](~/samples/snippets/cpp/VS_Snippets_CLR/consolein/CPP/consolein.cpp#1)]
 [!code-csharp[consolein#1](~/samples/snippets/csharp/VS_Snippets_CLR/consolein/CS/consolein.cs#1)]
 [!code-vb[consolein#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/consolein/VB/consolein.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Console.OpenStandardInput" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="InputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding InputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding InputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.InputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property InputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ InputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputEncoding : System.Text.Encoding with get, set" Usage="System.Console.InputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソールが入力内容の読み取り時に使用するエンコーディングを取得または設定します。</summary>
        <value>コンソールが入力内容の読み取りに使用するエンコーディング。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンソールは入力エンコーディングを使用して、キーボード入力を対応する文字に変換します。 入力エンコードには、256のキーボード文字コードを個々の文字にマップするコードページが組み込まれています。 異なるコード ページには異なる特殊文字が含まれ、それらは通常は 1 つの言語または言語グループ用にカスタマイズされています。  
  
 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、プロパティの取得操作によって、コンソールの現在の入力エンコーディングではなく、キャッシュされた値が返される場合があります。 これは、<xref:System.Console.InputEncoding%2A> プロパティの値が、<xref:System.Console.InputEncoding%2A> プロパティへの割り当て以外の何らかの方法で変更された場合に発生する可能性があります。たとえば、Windows `SetConsoleCP` 関数を呼び出したり、PowerShell スクリプトから `chcp` コマンドを使用したりすることができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作でのプロパティ値は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">この操作の実行中にエラーが発生しました。</exception>
        <exception cref="T:System.Security.SecurityException">アプリケーションに、この操作を実行するための権限がありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">トップレベルウィンドウおよびサブウィンドウの読み取りと書き込みを行う場合。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="IsErrorRedirected">
      <MemberSignature Language="C#" Value="public static bool IsErrorRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsErrorRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsErrorRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsErrorRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsErrorRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsErrorRedirected : bool" Usage="System.Console.IsErrorRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エラー出力ストリームが標準エラー ストリームからリダイレクトされているかどうかを示す値を取得します。</summary>
        <value>エラー出力がリダイレクトされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="IsInputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsInputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsInputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsInputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsInputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsInputRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputRedirected : bool" Usage="System.Console.IsInputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>入力が標準入力ストリームからリダイレクトされているかどうかを示す値を取得します。</summary>
        <value>入力がリダイレクトされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
        <altmember cref="M:System.Console.OpenStandardInput" />
      </Docs>
    </Member>
    <Member MemberName="IsOutputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsOutputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsOutputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsOutputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsOutputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsOutputRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutputRedirected : bool" Usage="System.Console.IsOutputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>出力が標準出力ストリームからリダイレクトされているかどうかを示す値を取得します。</summary>
        <value>出力がリダイレクトされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="KeyAvailable">
      <MemberSignature Language="C#" Value="public static bool KeyAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool KeyAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Console.KeyAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property KeyAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool KeyAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyAvailable : bool" Usage="System.Console.KeyAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キーが押されたかどうか、つまり、押されたキーが入力ストリームに存在するかどうかを示す値を取得します。</summary>
        <value>押されたキーが入力ストリームに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ値は直ちに返されます。つまり、<xref:System.Console.KeyAvailable%2A> プロパティは、キー押下が使用可能になるまで入力をブロックしません。  
  
 <xref:System.Console.KeyAvailable%2A> プロパティは、<xref:System.Console.Read%2A> または <xref:System.Console.ReadLine%2A> メソッドではなく、<xref:System.Console.ReadKey%2A> メソッドのみと組み合わせて使用します。  
  
   
  
## Examples  
 次の例では、<xref:System.Console.KeyAvailable%2A> プロパティを使用して、キーが押されるまで実行されるループを作成する方法を示します。  
  
 [!code-cpp[console.keyavailable#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.keyavailable/CPP/ka.cpp#1)]
 [!code-csharp[console.keyavailable#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.keyavailable/CS/ka.cs#1)]
 [!code-vb[console.keyavailable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.keyavailable/VB/ka.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">標準入力は、キーボードではなくファイルにリダイレクトされています。</exception>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowHeight">
      <MemberSignature Language="C#" Value="public static int LargestWindowHeight { get; }" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowHeight As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowHeight { int get(); };" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.LargestWindowHeight : int" Usage="System.Console.LargestWindowHeight" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static int LargestWindowHeight { get; set; }" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LargestWindowHeight As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowHeight { int get(); void set(int value); };" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="member this.LargestWindowHeight : int with get, set" Usage="System.Console.LargestWindowHeight" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のフォントおよび画面解像度に基づいて、コンソール ウィンドウの最大行数を取得します。</summary>
        <value>コンソール ウィンドウの高さの最大値 (行数)。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowWidth">
      <MemberSignature Language="C#" Value="public static int LargestWindowWidth { get; }" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowWidth As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowWidth { int get(); };" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.LargestWindowWidth : int" Usage="System.Console.LargestWindowWidth" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static int LargestWindowWidth { get; set; }" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LargestWindowWidth As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowWidth { int get(); void set(int value); };" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="member this.LargestWindowWidth : int with get, set" Usage="System.Console.LargestWindowWidth" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のフォントおよび画面解像度に基づいて、コンソール ウィンドウの最大列数を取得します。</summary>
        <value>コンソール ウィンドウの幅の最大値 (列数)。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveBufferArea">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>画面バッファーの特定の領域を、指定した領域にコピーします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="F#" Value="static member MoveBufferArea : int * int * int * int * int * int -&gt; unit" Usage="System.Console.MoveBufferArea (sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTop" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceWidth" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceHeight" Type="System.Int32" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetLeft" Type="System.Int32" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetTop" Type="System.Int32" Index="5" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">コピー元領域の左端の列。</param>
        <param name="sourceTop">コピー元領域の最上行。</param>
        <param name="sourceWidth">コピー元領域内の列数。</param>
        <param name="sourceHeight">コピー元領域内の行数。</param>
        <param name="targetLeft">コピー先領域の左端の列。</param>
        <param name="targetTop">コピー先領域の最上行。</param>
        <summary>画面バッファーの特定の領域を、指定した領域にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コピー先とコピー元のパラメーターで、現在の画面バッファーの境界の外側に位置が指定されている場合、コピー先の領域内に収まる部分のみがコピーされます。 つまり、ソース領域は、現在の画面バッファーに合うようにクリップされます。  
  
 <xref:System.Console.MoveBufferArea%2A> メソッドは、コピー元の領域をコピー先の領域にコピーします。 コピー先の領域がコピー元の領域と交差しない場合、現在の前景色と背景色を使用して、ソース領域に空白が挿入されます。 それ以外の場合、ソース領域の交差部分は塗りつぶされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">1 つ以上のパラメーターが 0 未満です。  
  
または 
 <paramref name="sourceLeft" /> または <paramref name="targetLeft" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。  
  
または 
 <paramref name="sourceTop" /> または <paramref name="targetTop" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。  
  
または 
 <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。  
  
または 
 <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows ではありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop, char sourceChar, valuetype System.ConsoleColor sourceForeColor, valuetype System.ConsoleColor sourceBackColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer, sourceChar As Char, sourceForeColor As ConsoleColor, sourceBackColor As ConsoleColor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="F#" Value="static member MoveBufferArea : int * int * int * int * int * int * char * ConsoleColor * ConsoleColor -&gt; unit" Usage="System.Console.MoveBufferArea (sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop, sourceChar, sourceForeColor, sourceBackColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTop" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceWidth" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceHeight" Type="System.Int32" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetLeft" Type="System.Int32" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetTop" Type="System.Int32" Index="5" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceChar" Type="System.Char" Index="6" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceForeColor" Type="System.ConsoleColor" Index="7" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceBackColor" Type="System.ConsoleColor" Index="8" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">コピー元領域の左端の列。</param>
        <param name="sourceTop">コピー元領域の最上行。</param>
        <param name="sourceWidth">コピー元領域内の列数。</param>
        <param name="sourceHeight">コピー元領域内の行数。</param>
        <param name="targetLeft">コピー先領域の左端の列。</param>
        <param name="targetTop">コピー先領域の最上行。</param>
        <param name="sourceChar">コピー元領域に挿入する文字。</param>
        <param name="sourceForeColor">コピー元領域を上書きするときに使用する前景色。</param>
        <param name="sourceBackColor">コピー元領域を上書きするときに使用する背景色。</param>
        <summary>画面バッファーの特定の領域を、指定した領域にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コピー先とコピー元のパラメーターで、現在の画面バッファーの境界を超える位置が指定されている場合は、コピー先の領域内に収まる部分のみがコピーされます。 つまり、ソース領域は、現在の画面バッファーに合うようにクリップされます。  
  
 <xref:System.Console.MoveBufferArea%2A> メソッドは、コピー元の領域をコピー先の領域にコピーします。 コピー先の領域がコピー元の領域と交差しない場合、`sourceForeColor` と `sourceBackColor`で指定された色を使用して、`sourceChar`によって指定された文字がコピー元の領域に格納されます。 それ以外の場合、ソース領域の交差部分は塗りつぶされません。  
  
 <xref:System.Console.MoveBufferArea%2A> メソッドは、`sourceWidth` または `sourceHeight` が0の場合、操作を実行しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">1 つ以上のパラメーターが 0 未満です。  
  
または 
 <paramref name="sourceLeft" /> または <paramref name="targetLeft" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。  
  
または 
 <paramref name="sourceTop" /> または <paramref name="targetTop" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。  
  
または 
 <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。  
  
または 
 <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。</exception>
        <exception cref="T:System.ArgumentException">一方または両方の色パラメーターが <see cref="T:System.ConsoleColor" /> 列挙のメンバーではありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows ではありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="NumberLock">
      <MemberSignature Language="C#" Value="public static bool NumberLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool NumberLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.NumberLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NumberLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool NumberLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberLock : bool" Usage="System.Console.NumberLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>NumLock がオンかオフかを示す値を取得します。</summary>
        <value>NumLock がオンの場合は <see langword="true" />、NumLock がオフの場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">取得操作は Windows 以外のオペレーティング システムで呼び出されています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardError">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>標準エラー ストリームを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError();" />
      <MemberSignature Language="F#" Value="static member OpenStandardError : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>標準エラー ストリームを取得します。</summary>
        <returns>標準エラー ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Console.SetError%2A> メソッドによって変更された後に、標準エラーストリームを再取得するために使用できます。  
  
   
  
## Examples  
 次の例は、コンソールに1つ以上のテキストファイルの内容を表示する単純なテキストファイルビューアーです。 コマンドライン引数がない場合、またはコマンドライン引数として渡されたファイルが存在しない場合、この例では <xref:System.Console.SetError%2A> メソッドを呼び出して、エラー情報をファイルにリダイレクトし、標準エラーストリームを reacquiring するプロセスで <xref:System.Console.OpenStandardError%2A> メソッドを呼び出します。、およびは、エラー情報がファイルに書き込まれたことを示します。  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 エラーストリームを reacquiring する前に、<xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> プロパティが `true` に設定されていることに注意してください。 これにより、バッファーではなく、直ちに出力がコンソールに送信されるようになります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardError : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardError bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bufferSize">内部ストリーム バッファー サイズ。</param>
        <summary>指定したバッファー サイズに設定された標準エラー ストリームを取得します。</summary>
        <returns>標準エラー ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Console.SetError%2A> メソッドによって変更された後に、標準エラーストリームを再取得するために使用できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> が 0 以下です。</exception>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardInput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>標準入力ストリームを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput();" />
      <MemberSignature Language="F#" Value="static member OpenStandardInput : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardInput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>標準入力ストリームを取得します。</summary>
        <returns>標準入力ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Console.SetIn%2A> メソッドによって変更された後に、標準入力ストリームを再取得するために使用できます。  
  
   
  
## Examples  
 次の例は、`OpenStandardInput` プロパティの使用方法を示しています。  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardInput : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardInput bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bufferSize">内部ストリーム バッファー サイズ。</param>
        <summary>指定したバッファー サイズに設定された標準入力ストリームを取得します。</summary>
        <returns>標準入力ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Console.SetIn%2A> メソッドによって変更された後に、標準出力ストリームを再取得するために使用できます。  
  
   
  
## Examples  
 次の例は、`OpenStandardInput` プロパティの使用方法を示しています。  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> が 0 以下です。</exception>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardOutput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>標準出力ストリームを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput();" />
      <MemberSignature Language="F#" Value="static member OpenStandardOutput : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardOutput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>標準出力ストリームを取得します。</summary>
        <returns>標準出力ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Console.SetOut%2A> メソッドによって変更された後に、標準出力ストリームを再取得するために使用できます。  
  
   
  
## Examples  
 <xref:System.Console.OpenStandardOutput%2A>メソッドの使用例を次に示します。 これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。 これを実行するには、2つのコマンドライン引数を指定する必要があります。 1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。 2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。 このファイルは存在する必要はありません。 ファイルが存在する場合は、その内容が上書きされます。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardOutput : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardOutput bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bufferSize">内部ストリーム バッファー サイズ。</param>
        <summary>指定したバッファー サイズに設定された標準出力ストリームを取得します。</summary>
        <returns>標準出力ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Console.SetOut%2A> メソッドによって変更された後に、標準出力ストリームを再取得するために使用できます。  
  
   
  
## Examples  
 <xref:System.Console.OpenStandardOutput%2A>メソッドの使用例を次に示します。 これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。 これを実行するには、2つのコマンドライン引数を指定する必要があります。 1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。 2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。 このファイルは存在する必要はありません。 ファイルが存在する場合は、その内容が上書きされます。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> が 0 以下です。</exception>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="Out">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Out { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Out" />
      <MemberSignature Language="DocId" Value="P:System.Console.Out" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Out As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Out { System::IO::TextWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Out : System.IO.TextWriter" Usage="System.Console.Out" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>標準出力ストリームを取得します。</summary>
        <value>標準出力ストリームを表す <see cref="T:System.IO.TextWriter" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、既定で標準出力ストリームに設定されます。 このプロパティは、<xref:System.Console.SetOut%2A> メソッドを使用して別のストリームに設定できます。  
  
 `Console.Out.WriteLine` メソッドの呼び出しは、対応する <xref:System.Console.WriteLine%2A> メソッドの呼び出しと同じであることに注意してください。  
  
   
  
## Examples  
 次の例では、<xref:System.Console.Out%2A> プロパティを使用して、アプリケーションの現在のディレクトリにあるファイルの名前を含む配列を標準出力デバイスに表示します。 次に、標準出力をファイル .txt という名前のファイルに設定し、配列要素をファイルに一覧表示します。 最後に、出力を標準出力ストリームに設定し、配列要素を標準出力デバイスに再び表示します。  
  
 [!code-csharp[System.Console.Out#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.out/cs/out1.cs#1)]
 [!code-vb[System.Console.Out#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.out/vb/out1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OutputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding OutputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding OutputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.OutputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property OutputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ OutputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OutputEncoding : System.Text.Encoding with get, set" Usage="System.Console.OutputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソールが出力内容の書き込み時に使用するエンコーディングを取得または設定します。</summary>
        <value>コンソールが出力内容の書き込みに使用するエンコーディング。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンソールでは、出力エンコーディングを使用して、アプリケーションによって書き込まれた文字を、対応するコンソールの表示文字に変換します。 コンソールで使用される既定のコードページは、システムロケールによって決まります。  
  
 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、プロパティの取得操作によって、コンソールの現在の出力エンコーディングではなく、キャッシュされた値が返される場合があります。 これは、<xref:System.Console.OutputEncoding%2A> プロパティの値が、Windows `SetConsoleOutputCP` 関数の呼び出しなど、<xref:System.Console.OutputEncoding%2A> プロパティへの割り当て以外の方法で変更された場合に発生する可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作でのプロパティ値は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">この操作の実行中にエラーが発生しました。</exception>
        <exception cref="T:System.Security.SecurityException">アプリケーションに、この操作を実行するための権限がありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">トップレベルウィンドウおよびサブウィンドウの読み取りと書き込みを行う場合。  関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage"><para>Unicode エンコーディングの <see cref="T:System.Console" /> クラスは、<see cref="T:System.Text.UTF8Encoding" /> クラスを使用した UTF-8 エンコーディングをサポートしています。また、[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以降では、<see cref="T:System.Text.UnicodeEncoding" /> クラスを使用した UTF-16 エンコーディングがサポートされています。 <see cref="T:System.Text.UTF32Encoding" /> クラスを使用した 32 UTF-8 エンコードはサポートされていません。 出力エンコードを UTF-32 に設定しようとすると、<see cref="T:System.IO.IOException" />がスローされます。  
  
コンソールに Unicode 文字を正常に表示するには、次のものが必要です。 
-コンソールは、文字を表示するために、Lucida Console や Consolas, などの TrueType フォントを使用する必要があります。  
  
-コンソールで使用されるフォントでは、表示する特定のグリフまたはグリフを定義する必要があります。 コンソールでは、フォントリンクを利用して、基本フォントにそのグリフの定義が含まれていない場合に、リンクされたフォントのグリフを表示できます。  
  
コンソールによる Unicode エンコーディングのサポートの詳細については、<see cref="T:System.Console" /> クラスの「コンソールの Unicode サポート」セクションを参照してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Read" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Read();" />
      <MemberSignature Language="F#" Value="static member Read : unit -&gt; int" Usage="System.Console.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>標準入力ストリームから次の文字を読み取ります。</summary>
        <returns>入力ストリームの次の文字。または次の文字がない場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.Read%2A> メソッドは、入力文字を入力するときにその戻り値をブロックします。<xref:System.ConsoleKey.Enter> キーを押すと終了します。 Enter キーを押すと、プラットフォームに依存する行の終了シーケンスが入力に追加されます (たとえば、Windows は復帰と改行のシーケンスを追加します)。 後続の <xref:System.Console.Read%2A> メソッドの呼び出しでは、一度に1文字ずつ入力を取得します。 最後の文字が取得されると、<xref:System.Console.Read%2A> によって再び返され、サイクルが繰り返されます。  
  
> [!IMPORTANT]
>  <xref:System.Console.ReadLine%2A> メソッド、または <xref:System.Console.KeyAvailable%2A> プロパティと <xref:System.Console.ReadKey%2A> メソッドは、<xref:System.Console.Read%2A> メソッドを使用することをお勧めします。  
  
 次のいずれかの操作を実行しない限り、メソッドは-1 を返しません。  
  
-   <xref:System.ConsoleModifiers.Control> 修飾キーを同時に押し、コンソールキー (Ctrl + Z) を押す <xref:System.ConsoleKey.Z> と、ファイルの終わりの条件が通知されます。  
  
-   Windows の F6 関数キーなど、ファイルの終わりの条件を通知する同等のキーを押します。  
  
-   実際のファイル終端文字を持つテキストファイルなどのソースに入力ストリームをリダイレクトします。  
  
   
  
## Examples  
 <xref:System.Console.Read%2A>メソッドの例を次に示します。  
  
 [!code-cpp[console.read#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.read/CPP/read.cpp#1)]
 [!code-csharp[console.read#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.read/CS/read.cs#1)]
 [!code-vb[console.read#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.read/VB/read.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadKey">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ユーザーによって押された次の文字キーまたはファンクション キーを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey () As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey();" />
      <MemberSignature Language="F#" Value="static member ReadKey : unit -&gt; ConsoleKeyInfo" Usage="System.Console.ReadKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ユーザーによって押された次の文字キーまたはファンクション キーを取得します。 押されたキーは、コンソール ウィンドウに表示されます。</summary>
        <returns>押されたコンソール キーに対応する <see cref="T:System.ConsoleKey" /> 定数と Unicode 文字 (存在する場合) を記述するオブジェクト。 また、<see cref="T:System.ConsoleKeyInfo" /> オブジェクトは、1 つ以上の Shift、Alt、Ctrl の各修飾子キーがコンソール キーと同時に押されたかどうかを <see cref="T:System.ConsoleModifiers" /> 値のビットごとの組み合わせで記述します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.ReadKey%2A> メソッドは、文字または関数キーが押されるまで、<xref:System.Console.ReadKey%2A> メソッドを発行するスレッドのブロックを待機します。 文字または関数キーは、1つ以上の Alt、Ctrl、または Shift 修飾子キーと組み合わせて押すことができます。 ただし、修飾子キーを単独で押すと、<xref:System.Console.ReadKey%2A> メソッドが返されることはありません。  
  
 アプリケーションによっては、<xref:System.Console.KeyAvailable%2A> プロパティと共に <xref:System.Console.ReadKey%2A> メソッドを使用することもできます。  
  
 <xref:System.Console.ReadKey%2A> メソッドは、標準入力が <xref:System.Console.SetIn%2A> メソッドを使用してファイルにリダイレクトされた場合でも、キーボードから読み取りを行います。  
  
   
  
## Examples  
 <xref:System.Console.ReadKey> メソッドを使用する最も一般的な用途の1つは、ユーザーがキーを押すまでプログラムの実行を中断し、アプリが終了するか、追加の情報ウィンドウを表示することです。 次の例では、<xref:System.Console.ReadKey> メソッドを使用して、ユーザーがアプリを終了する前に Enter キーを押すのを待ちます。  
  
 [!code-csharp[System.Console.ReadKey#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey1.cs#1)]
 [!code-vb[System.Console.ReadKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey1.vb#1)]  
  
 <xref:System.Console.ReadKey%2A> メソッドのこのオーバーロードは、既定では、ユーザーがコンソールに押した任意のキーがエコーされることに注意してください。 これを抑制するには、`true`の `intercept` 引数を使用して <xref:System.Console.ReadKey%2A> メソッドを呼び出します。  
  
 次の例では、<xref:System.Console.ReadKey> メソッドを使用して、ユーザーが押したキーに関する情報を表示します。 
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Console.In" /> プロパティは、コンソール以外のストリームからリダイレクトされます。</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey (bool intercept);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey(bool intercept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey (intercept As Boolean) As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey(bool intercept);" />
      <MemberSignature Language="F#" Value="static member ReadKey : bool -&gt; ConsoleKeyInfo" Usage="System.Console.ReadKey intercept" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intercept" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="intercept">押されたキーをコンソール ウィンドウに表示するかどうかを決定します。 押されたキーを表示しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>ユーザーによって押された次の文字キーまたはファンクション キーを取得します。 押されたキーは、オプションでコンソール ウィンドウに表示されます。</summary>
        <returns>押されたコンソール キーに対応する <see cref="T:System.ConsoleKey" /> 定数と Unicode 文字 (存在する場合) を記述するオブジェクト。 また、<see cref="T:System.ConsoleKeyInfo" /> オブジェクトは、1 つ以上の Shift、Alt、Ctrl の各修飾子キーがコンソール キーと同時に押されたかどうかを <see cref="T:System.ConsoleModifiers" /> 値のビットごとの組み合わせで記述します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.ReadKey%2A> メソッドは、文字または関数キーが押されるまで、<xref:System.Console.ReadKey%2A> メソッドを発行するスレッドのブロックを待機します。 文字または関数キーは、1つ以上の Alt、Ctrl、または Shift 修飾子キーと組み合わせて押すことができます。 ただし、修飾子キーを単独で押すと、<xref:System.Console.ReadKey%2A> メソッドが返されることはありません。  
  
 `intercept` パラメーターが `true`の場合、押されたキーはインターセプトされ、コンソールウィンドウに表示されません。それ以外の場合は、押されたキーが表示されます。  
  
 アプリケーションによっては、<xref:System.Console.KeyAvailable%2A> プロパティと共に <xref:System.Console.ReadKey%2A> メソッドを使用することもできます。  
  
 <xref:System.Console.ReadKey%2A> メソッドは、標準入力が <xref:System.Console.SetIn%2A> メソッドを使用してファイルにリダイレクトされた場合でも、キーボードから読み取りを行います。  
  
   
  
## Examples  
 <xref:System.Console.ReadKey%2A> メソッドを使用する最も一般的な用途の1つは、ユーザーがキーを押すまでプログラムの実行を中断し、アプリが終了するか、追加の情報ウィンドウを表示することです。 次の例では、<xref:System.Console.ReadKey%28System.Boolean%29> メソッドを使用して、ユーザーがアプリを終了する前に Enter キーを押すのを待ちます。 ユーザーが他のキーを押すと、コンソールにエコーされないことに注意してください。  
  
 [!code-csharp[System.Console.ReadKey#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey2.cs#2)]
 [!code-vb[System.Console.ReadKey#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey2.vb#2)]  
  
 次の例では、<xref:System.Console.ReadKey%28System.Boolean%29> メソッドを使用して、そのキーをコンソールにエコーせずに、ユーザーが押したキーに関する情報を表示します。  
  
 [!code-cpp[console.readkey2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey2/CPP/rkbool.cpp#1)]
 [!code-csharp[console.readkey2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey2/CS/rkbool.cs#1)]
 [!code-vb[console.readkey2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey2/VB/rkbool.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Console.In" /> プロパティは、コンソール以外のストリームからリダイレクトされます。</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public static string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="static member ReadLine : unit -&gt; string" Usage="System.Console.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>標準入力ストリームから次の 1 行分の文字を読み取ります。</summary>
        <returns>入力ストリームの次の行。または次の行がない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.ReadLine%2A> メソッドは、標準入力ストリームから行を読み取ります。 (行の定義については、次の一覧の後の段落を参照してください)。これは、次のことを意味します。  
  
-   標準入力デバイスがキーボードの場合、<xref:System.Console.ReadLine%2A> メソッドは、ユーザーが**enter**キーを押すまでブロックします。  
  
     <xref:System.Console.ReadLine%2A> メソッドを使用する最も一般的な用途の1つは、コンソールをクリアして新しい情報を表示する前にプログラムの実行を一時停止すること、またはアプリケーションを終了する前に Enter キーを押すようにユーザーに求めることです。 これを次の例に示します。  
  
     [!code-cpp[System.Console.ReadLine#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/ReadLineSimple.cpp#6)]
     [!code-csharp[System.Console.ReadLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLineSimple.cs#6)]
     [!code-vb[System.Console.ReadLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLineSimple.vb#6)]  
  
-   標準入力がファイルにリダイレクトされた場合、<xref:System.Console.ReadLine%2A> メソッドは、ファイルからテキスト行を読み取ります。 たとえば、ReadLine1 という名前のテキストファイルを次に示します。  
  
    ```  
  
    This is the first line.  
    This is the second line.  
    This is the third line.  
    This is the fourth line.  
  
    ```  
  
     次の例では、<xref:System.Console.ReadLine%2A> メソッドを使用して、ファイルからリダイレクトされる入力を読み取ります。 メソッドから `null`が返されると、読み取り操作は終了します。これは、読み取られる行が残っていないことを示します。  
  
     [!code-csharp[System.Console.ReadLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine3.cs#3)]
     [!code-vb[System.Console.ReadLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine3.vb#3)]  
  
     この例を ReadLine1 という名前の実行可能ファイルにコンパイルした後、構文を使用してコマンドラインから実行できます。  
  
    ```  
    ReadLine1 < ReadLine1.txt  
    ```  
  
     ファイルの内容を読み取り、コンソールに表示します。  
  
 行は、文字のシーケンス (16 進数の 0x000d)、ラインフィード (16 進数の 0x000d)、または <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> プロパティの値として定義されます。 返された文字列に終端文字が含まれていません。 既定では、メソッドは256文字の入力バッファーから入力を読み取ります。 これには <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> 文字が含まれているため、メソッドは最大254文字を含む行を読み取ることができます。 長い行を読み取るには、<xref:System.Console.OpenStandardInput%28System.Int32%29> メソッドを呼び出します。  
  
 <xref:System.Console.ReadLine%2A> メソッドは同期的に実行されます。 つまり、行が読み込まれるか、Ctrl + Z キーの組み合わせが押されるまでブロックされます。 <xref:System.Console.In%2A> プロパティは、標準入力ストリームを表す <xref:System.IO.TextReader> オブジェクトを返し、同期 <xref:System.IO.TextReader.ReadLine%2A?displayProperty=nameWithType> メソッドと非同期 <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType> メソッドの両方を持ちます。 ただし、コンソールの標準入力ストリームとして使用する場合、<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType> は非同期ではなく同期的に実行され、読み取り操作が完了した後にのみ `Task<String>` を返します。  
  
 このメソッドが <xref:System.OutOfMemoryException> 例外をスローした場合、基になる <xref:System.IO.Stream> オブジェクトのリーダーの位置は、メソッドが読み取ることができた文字数だけ進んでいますが、内部 <xref:System.Console.ReadLine%2A> バッファーに既に読み込まれている文字は破棄されます。 ストリーム内のリーダーの位置は変更できないため、既に読み取られている文字は回復できないため、<xref:System.IO.TextReader>を再初期化することによってのみアクセスできます。 ストリーム内の初期位置が不明な場合、またはストリームがシークをサポートしていない場合は、基になる <xref:System.IO.Stream> も再初期化する必要があります。 このような状況を回避し、堅牢なコードを生成するには、<xref:System.Console.KeyAvailable%2A> プロパティと <xref:System.Console.ReadKey%2A> メソッドを使用し、事前に割り当てられたバッファーに読み取り文字を格納する必要があります。  
  
 メソッドがコンソールから入力を読み取っているときに Ctrl + Z 文字が押された場合、メソッドは `null`を返します。 これにより、ループで <xref:System.Console.ReadLine%2A> メソッドが呼び出されたときに、ユーザーはそれ以上キーボード入力を行うことができなくなります。 次の例は、このシナリオを示しています。  
  
 [!code-cpp[System.Console.ReadLine#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/readline2.cpp#1)]
 [!code-csharp[System.Console.ReadLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine2.cs#1)]
 [!code-vb[System.Console.ReadLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine2.vb#1)]  
  
   
  
## Examples  
 次の例では、既存のテキストファイルの名前と出力を書き込むファイルの名前の2つのコマンドライン引数が必要です。 既存のテキストファイルを開き、キーボードからそのファイルに標準入力をリダイレクトします。 また、標準出力をコンソールから出力ファイルにリダイレクトします。 次に、<xref:System.Console.ReadLine%2A?displayProperty=nameWithType> メソッドを使用してファイル内の各行を読み取り、4つのスペースのすべてのシーケンスをタブ文字に置き換え、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドを使用して結果を出力ファイルに書き込みます。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.OutOfMemoryException">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">次の文字行の文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="ResetColor">
      <MemberSignature Language="C#" Value="public static void ResetColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ResetColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetColor();" />
      <MemberSignature Language="F#" Value="static member ResetColor : unit -&gt; unit" Usage="System.Console.ResetColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コンソールの前景色および背景色を既定値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前景色と背景色は、現在のプロセスの開始時に存在していた色に復元されます。 詳細については、「<xref:System.Console.ForegroundColor%2A> と <xref:System.Console.BackgroundColor%2A> のプロパティ」を参照してください。  
  
   
  
## Examples  
 次の例では、<xref:System.ConsoleColor> 列挙型の値を配列に保存し、<xref:System.Console.BackgroundColor%2A> および <xref:System.Console.ForegroundColor%2A> プロパティの現在の値を変数に格納します。 次に、現在の背景と一致する色を除き、<xref:System.ConsoleColor> 列挙の前景色をそれぞれの色に変更し、現在のと一致する色を除き、<xref:System.ConsoleColor> 列挙の各色に背景色を変更します。フォア. (前景色が背景色と同じ場合、テキストは表示されません)。最後に、<xref:System.Console.ResetColor%2A> メソッドを呼び出して、元のコンソールの色を復元します。  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetBufferSize">
      <MemberSignature Language="C#" Value="public static void SetBufferSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBufferSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetBufferSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetBufferSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetBufferSize(int width, int height);" />
      <MemberSignature Language="F#" Value="static member SetBufferSize : int * int -&gt; unit" Usage="System.Console.SetBufferSize (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="height" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="width">列数で指定されたバッファー領域の幅。</param>
        <param name="height">行数で指定されたバッファー領域の高さ。</param>
        <summary>画面バッファー領域の高さと幅を指定された値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Console.WindowLeft%2A>、<xref:System.Console.WindowTop%2A>、<xref:System.Console.WindowWidth%2A>、<xref:System.Console.WindowHeight%2A>、<xref:System.Console.BufferWidth%2A>、<xref:System.Console.BufferHeight%2A>、および <xref:System.Console.CursorVisible%2A> の各プロパティについて説明します。および <xref:System.Console.SetWindowPosition%2A>、<xref:System.Console.SetBufferSize%2A>、および <xref:System.Console.ReadKey%2A> メソッド。 この例では、画面バッファーの幅に基づいて、画面バッファーにグリッドパターンを描画します。 次に、上矢印、下矢印、左矢印、または右矢印の各コンソールキーが押されたときに、コンソールウィンドウが移動します。 グリッドパターンを使用すると、画面バッファーに対するコンソールウィンドウの移動を確認できます。  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
 [!code-fsharp[console.windowLT#1](~/samples/snippets/fsharp/VS_Snippets_CLR/console.windowLT/FS/wlt.fs#1)] 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="height" /> または <paramref name="width" /> が 0 以下です。  
  
または 
 <paramref name="height" /> または <paramref name="width" /> が <see cref="F:System.Int16.MaxValue" /> 以上です。  
  
または 
 <paramref name="width" /> は <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" /> より小さい値です。  
  
または 
 <paramref name="height" /> は <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" /> より小さい値です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows ではありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPosition">
      <MemberSignature Language="C#" Value="public static void SetCursorPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCursorPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetCursorPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCursorPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCursorPosition(int left, int top);" />
      <MemberSignature Language="F#" Value="static member SetCursorPosition : int * int -&gt; unit" Usage="System.Console.SetCursorPosition (left, top)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="top" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left">カーソルを置く列の位置。 列は左から右に向かって、0 から始まる番号が付けられます。</param>
        <param name="top">カーソルを置く行の位置。 行には、上から下に向かって 0 から始まる番号が付けられます。</param>
        <summary>カーソルの位置を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.SetCursorPosition%2A> メソッドを使用して、コンソールウィンドウで次の書き込み操作を開始する場所を指定します。 指定したカーソル位置が、コンソールウィンドウに現在表示されている領域の外側にある場合は、ウィンドウの原点が自動的に変更され、カーソルが表示されます。  
  
 カーソルは、文字がコンソールウィンドウに書き込まれるたびに、次の文字位置に自動的に移動します。 カーソルがコンソールウィンドウの右下の文字位置にある場合は、次の書き込み操作によってコンソールウィンドウがスクロールされ、カーソルが表示されたままになります。 コンソールウィンドウのスクロールを行わずに、末尾の文字位置に文字を記述する場合は、<xref:System.Console.MoveBufferArea%2A> メソッドを使用して、文字をその位置に移動します。  
  
   
  
## Examples  
 この例では、<xref:System.Console.CursorLeft%2A> と <xref:System.Console.CursorTop%2A> のプロパティ、および <xref:System.Console.SetCursorPosition%2A> および <xref:System.Console.Clear%2A> メソッドを示します。 この例では、カーソルを移動し、次の書き込みが行われる場所を決定します。これにより、"+"、"&#124;"、および "-" の文字列を組み合わせて、5文字の四角形で5文字を描画します。 四角形は、他の文字列の組み合わせを使用して、より少数の手順で描画できます。  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="left" /> または <paramref name="top" /> が 0 未満です。  
  
または 
 <paramref name="left" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。  
  
または 
 <paramref name="top" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetError">
      <MemberSignature Language="C#" Value="public static void SetError (System.IO.TextWriter newError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetError(class System.IO.TextWriter newError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetError(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetError (newError As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetError(System::IO::TextWriter ^ newError);" />
      <MemberSignature Language="F#" Value="static member SetError : System.IO.TextWriter -&gt; unit" Usage="System.Console.SetError newError" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newError" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newError">新しい標準エラー出力であるストリーム。</param>
        <summary><see cref="P:System.Console.Error" /> プロパティを、指定した <see cref="T:System.IO.TextWriter" /> オブジェクトに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、<xref:System.Console.Error%2A> プロパティは、標準エラー出力ストリームに設定されます。  
  
 <xref:System.IO.FileStream> をカプセル化した <xref:System.IO.StreamWriter> は、エラーメッセージをファイルに送信するために使用できます。  
  
   
  
## Examples  
 次の例は、標準エラーストリームをファイルにリダイレクトする方法を示しています。  
  
 [!code-cpp[System.Console.SetError#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.SetError/cpp/seterror1.cpp#1)]
 [!code-csharp[System.Console.SetError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.SetError/cs/SetError1.cs#1)]
 [!code-vb[System.Console.SetError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.SetError/vb/SetError1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="newError" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="P:System.Console.Error" />
      </Docs>
    </Member>
    <Member MemberName="SetIn">
      <MemberSignature Language="C#" Value="public static void SetIn (System.IO.TextReader newIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIn(class System.IO.TextReader newIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetIn(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetIn (newIn As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIn(System::IO::TextReader ^ newIn);" />
      <MemberSignature Language="F#" Value="static member SetIn : System.IO.TextReader -&gt; unit" Usage="System.Console.SetIn newIn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newIn" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="newIn">新しい標準入力であるストリーム。</param>
        <summary><see cref="P:System.Console.In" /> プロパティを、指定した <see cref="T:System.IO.TextReader" /> オブジェクトに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、<xref:System.Console.In%2A> プロパティは標準入力ストリームに設定されます。  
  
 <xref:System.IO.FileStream> をカプセル化した <xref:System.IO.StreamReader> は、ファイルからの入力を受信するために使用できます。  
  
   
  
## Examples  
 <xref:System.Console.SetIn%2A>メソッドの使用例を次に示します。 これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。 これを実行するには、2つのコマンドライン引数を指定する必要があります。 1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。 2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。 このファイルは存在する必要はありません。 ファイルが存在する場合は、その内容が上書きされます。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="newIn" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextReader" />
        <altmember cref="P:System.Console.In" />
      </Docs>
    </Member>
    <Member MemberName="SetOut">
      <MemberSignature Language="C#" Value="public static void SetOut (System.IO.TextWriter newOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOut(class System.IO.TextWriter newOut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetOut(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetOut (newOut As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetOut(System::IO::TextWriter ^ newOut);" />
      <MemberSignature Language="F#" Value="static member SetOut : System.IO.TextWriter -&gt; unit" Usage="System.Console.SetOut newOut" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newOut" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newOut">新しい標準出力として使用されるテキスト ライター。</param>
        <summary><see cref="P:System.Console.Out" /> プロパティを <see cref="T:System.IO.TextWriter" /> オブジェクトをターゲットとするように設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、<xref:System.Console.Out%2A> プロパティは標準出力ストリームに設定されます。  
  
 <xref:System.IO.FileStream> をカプセル化する <xref:System.IO.StreamWriter> は、出力をファイルに送信するために使用できます。 例 :  
  
 [!code-cpp[System.Console.SetOut#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.setout/cpp/source.cpp#1)]
 [!code-csharp[System.Console.SetOut#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.setout/cs/source.cs#1)]
 [!code-vb[System.Console.SetOut#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.setout/vb/source.vb#1)]  
  
 <xref:System.Console.Out%2A> によって返される実際のオブジェクトは、指定されたテキストライターを囲む同期ラッパーである場合があります。
  
## Examples  
 <xref:System.Console.SetOut%2A>メソッドの使用例を次に示します。 これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。 これを実行するには、2つのコマンドライン引数を指定する必要があります。 1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。 2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。 このファイルは存在する必要はありません。 ファイルが存在する場合は、その内容が上書きされます。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="newOut" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージコードを呼び出すための。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="SetWindowPosition">
      <MemberSignature Language="C#" Value="public static void SetWindowPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowPosition(int left, int top);" />
      <MemberSignature Language="F#" Value="static member SetWindowPosition : int * int -&gt; unit" Usage="System.Console.SetWindowPosition (left, top)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="top" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left">コンソール ウィンドウの左上隅の列位置。</param>
        <param name="top">コンソール ウィンドウの左上隅の行位置。</param>
        <summary>画面バッファーに対するコンソール ウィンドウの相対位置を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [オペレーティングシステム] ウィンドウにコンソールウィンドウが表示され、コンソールウィンドウに画面バッファーの一部が表示されます。 <xref:System.Console.SetWindowPosition%2A> メソッドは、画面バッファーに対するコンソールウィンドウの相対位置に影響しますが、デスクトップに関連するオペレーティングシステムウィンドウの位置には影響しません。  
  
 コンソールとオペレーティングシステムのウィンドウは、通常、互いに影響しません。 ただし、コンソールウィンドウの現在の境界に画面バッファーを表示できない場合、オペレーティングシステムは自動的にオペレーティングシステムウィンドウにスクロールバーを追加します。 この場合、オペレーティングシステムのウィンドウのスクロールバーを移動すると、コンソールウィンドウの位置に影響し、<xref:System.Console.SetWindowPosition%2A> メソッドを使用してコンソールウィンドウを移動すると、オペレーティングシステムのウィンドウのスクロールバーの位置に影響します。  
  
   
  
## Examples  
 次の例では、<xref:System.Console.WindowLeft%2A>、<xref:System.Console.WindowTop%2A>、<xref:System.Console.WindowWidth%2A>、<xref:System.Console.WindowHeight%2A>、<xref:System.Console.BufferWidth%2A>、<xref:System.Console.BufferHeight%2A>、および <xref:System.Console.CursorVisible%2A> の各プロパティについて説明します。および <xref:System.Console.SetWindowPosition%2A>、<xref:System.Console.SetBufferSize%2A>、および <xref:System.Console.ReadKey%2A> メソッド。 この例では、画面バッファーの幅に基づいて、画面バッファーにグリッドパターンを描画します。 次に、上矢印、下矢印、左矢印、または右矢印の各コンソールキーが押されたときに、コンソールウィンドウが移動します。 グリッドパターンを使用すると、画面バッファーに対するコンソールウィンドウの移動を確認できます。  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
 [!code-fsharp[console.windowLT#1](~/samples/snippets/fsharp/VS_Snippets_CLR/console.windowLT/FS/wlt.fs#1)] 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="left" /> または <paramref name="top" /> が 0 未満です。  
  
または 
 <paramref name="left" /> + <see cref="P:System.Console.WindowWidth" /> は <see cref="P:System.Console.BufferWidth" /> より大きくなっています。  
  
または 
 <paramref name="top" /> + <see cref="P:System.Console.WindowHeight" /> は <see cref="P:System.Console.BufferHeight" /> より大きくなっています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows ではありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetWindowSize">
      <MemberSignature Language="C#" Value="public static void SetWindowSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowSize(int width, int height);" />
      <MemberSignature Language="F#" Value="static member SetWindowSize : int * int -&gt; unit" Usage="System.Console.SetWindowSize (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="height" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="width">列数で指定されたコンソール ウィンドウの幅。</param>
        <param name="height">行数で指定されたコンソール ウィンドウの高さ。</param>
        <summary>コンソール ウィンドウの高さと幅を指定された値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 この例では、<xref:System.Console.SetWindowSize%2A> メソッドと、<xref:System.Console.WindowWidth%2A> プロパティと <xref:System.Console.WindowHeight%2A> プロパティについて説明します。 この例を実行して、コンソールウィンドウのサイズを変更した場合の影響をすべて確認する必要があります。  
  
 この例では、コンソールウィンドウのサイズを85列と43行に設定し、キーが押されるのを待機します。 いずれかのキーが押されると、コンソールウィンドウの大きさが半分になり、新しい寸法が報告されます。この例では、別のキー押下を待機します。 最後に、いずれかのキーが押されると、コンソールウィンドウが元のディメンションに復元され、例が終了します。  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="width" /> または <paramref name="height" /> が 0 以下です。  
  
または 
 <paramref name="width" /> に <see cref="P:System.Console.WindowLeft" /> を加算した値、または <paramref name="height" /> に <see cref="P:System.Console.WindowTop" /> を加算した値が <see cref="F:System.Int16.MaxValue" /> 以上です。  
  
または 
 <paramref name="width" /> または <paramref name="height" /> が、現在の画面解像度とコンソールのフォントで利用可能なウィンドウの最大幅または高さを超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows ではありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public static string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string Title" />
      <MemberSignature Language="DocId" Value="P:System.Console.Title" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Console.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソールのタイトル バーに表示するタイトルを取得または設定します。</summary>
        <value>コンソールのタイトル バーに表示される文字列。 タイトル文字列の最大長は 24500 文字です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 この例では、<xref:System.Console.Title%2A> プロパティを示します。 この例では、オペレーティングシステムウィンドウの現在のタイトルが表示され、キーが押されるのを待ってから、新しいタイトルが表示されます。  
  
 [!code-cpp[console.title#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.title/CPP/mytitle.cpp#1)]
 [!code-csharp[console.title#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.title/CS/mytitle.cs#1)]
 [!code-vb[console.title#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.title/VB/mytitle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">取得操作において、取得したタイトルが 24500 文字を超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、指定されたしたタイトルが 24500 文字を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作で、指定されたタイトルが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">取得操作は Windows 以外のオペレーティング システムで呼び出されています。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="TreatControlCAsInput">
      <MemberSignature Language="C#" Value="public static bool TreatControlCAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool TreatControlCAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Console.TreatControlCAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TreatControlCAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool TreatControlCAsInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TreatControlCAsInput : bool with get, set" Usage="System.Console.TreatControlCAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="F:System.ConsoleModifiers.Control" /> 修飾キーと <see cref="F:System.ConsoleKey.C" /> コンソール キーの組み合わせ (Ctrl + C) を、通常の入力として扱うか、オペレーティング システムにより処理される割り込みとして扱うかを示す値を取得または設定します。</summary>
        <value>Ctrl + C を通常の入力として扱う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.TreatControlCAsInput%2A> プロパティの値が `false` で Ctrl + C キーを押すと、押されたキーは入力バッファーに格納されず、オペレーティングシステムは現在実行中のプロセスを終了します。 これが既定値です。  
  
> [!CAUTION]
>  このプロパティを `true` に設定すると、非常に大きな効果があるため、慎重に使用してください。 ほとんどのユーザーは、Ctrl + C キーを押してコンソールアプリケーションを終了します。 Ctrl + C の効果を無効にした場合、ユーザーは、Ctrl + Break キーを使用してアプリケーションを終了することを覚えておく必要があります。これは、あまりなじみのないキーの組み合わせです。  
  
   
  
## Examples  
 <xref:System.Console.TreatControlCAsInput%2A>プロパティの例を次に示します。  
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">コンソールの入力バッファーの入力モードを取得または設定できません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="F:System.ConsoleModifiers.Control" />
        <altmember cref="F:System.ConsoleKey.C" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="WindowHeight">
      <MemberSignature Language="C#" Value="public static int WindowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowHeight : int with get, set" Usage="System.Console.WindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソール ウィンドウ領域の高さを取得または設定します。</summary>
        <value>行数で指定されたコンソール ウィンドウの高さ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 出力がリダイレクトされるときに <xref:System.Console.WindowHeight%2A> プロパティの値を設定しようとすると、<xref:System.ArgumentOutOfRangeException> または <xref:System.IO.IOException> 例外がスローされます。 例外を回避するには、<xref:System.Console.IsOutputRedirected%2A> プロパティが `false`を返す場合にのみ、このプロパティの値を設定できます。  
  
   
  
## Examples  
 この例では、<xref:System.Console.SetWindowSize%2A> メソッドと、<xref:System.Console.WindowWidth%2A> プロパティと <xref:System.Console.WindowHeight%2A> プロパティについて説明します。 この例を実行して、コンソールウィンドウのサイズを変更した場合の影響をすべて確認する必要があります。  
  
 この例では、コンソールウィンドウのサイズを85列と43行に設定し、キーを押すまで待機します。 いずれかのキーが押されると、コンソールウィンドウの大きさが半分になり、新しい寸法が報告されます。この例では、別のキー押下を待機します。 最後に、いずれかのキーを押すと、コンソールウィンドウが元のディメンションに復元され、例が終了します。  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Console.WindowWidth" /> プロパティの値または <see cref="P:System.Console.WindowHeight" /> プロパティの値が 0 以下です。  
  
または 
<see cref="P:System.Console.WindowHeight" /> プロパティの値と <see cref="P:System.Console.WindowTop" /> プロパティの値を加算した値が <see cref="F:System.Int16.MaxValue" /> 以上です。  
  
または 
<see cref="P:System.Console.WindowWidth" /> プロパティの値または <see cref="P:System.Console.WindowHeight" /> プロパティの値が、現在の画面の解像度およびコンソールのフォントで利用可能なウィンドウの最大幅か最大の高さを超えています。</exception>
        <exception cref="T:System.IO.IOException">読み取りまたは書き込み情報エラー。</exception>
        <exception cref="T:System.PlatformNotSupportedException">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowLeft">
      <MemberSignature Language="C#" Value="public static int WindowLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowLeft : int with get, set" Usage="System.Console.WindowLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソール ウィンドウ領域の左端の位置を、画面バッファーに対する相対位置として取得または設定します。</summary>
        <value>コンソール ウィンドウの左端の位置 (列)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンソールは、四角形のウィンドウを四角形の大きなバッファー領域に表します。 ウィンドウとバッファーは両方とも、行の数によって垂直方向に、列の数で水平に計測されます。 バッファー領域の大きさは、<xref:System.Console.BufferHeight%2A> プロパティと <xref:System.Console.BufferWidth%2A> プロパティによって定義されます。 コンソール領域の大きさは、<xref:System.Console.WindowHeight%2A> プロパティと <xref:System.Console.WindowWidth%2A> プロパティによって定義されます。 <xref:System.Console.WindowLeft%2A> プロパティによって、コンソールウィンドウの最初の列に表示されるバッファー領域の列が決まります。 <xref:System.Console.WindowLeft%2A> プロパティの値は、0から <xref:System.Console.BufferWidth%2A> - <xref:System.Console.WindowWidth%2A>までの範囲で指定できます。 この範囲外の値に設定しようとすると、<xref:System.ArgumentOutOfRangeException>がスローされます。  
  
 コンソールウィンドウを初めて開いたときは、<xref:System.Console.WindowLeft%2A> プロパティの既定値は0です。これは、コンソールに表示される最初の列が、バッファー領域の最初の列 (位置0の列) に対応することを示します。 コンソールウィンドウとバッファー領域の既定の幅は、どちらも80列です。 これは、コンソールウィンドウの幅が狭い場合や、バッファー領域の幅が広くなっている場合にのみ、<xref:System.Console.WindowLeft%2A> プロパティを変更できることを意味します。  
  
 バッファー領域の幅がコンソールウィンドウの幅を超える場合は、ユーザーが水平スクロールバーを使用してバッファー領域へのウィンドウの関係を定義すると、<xref:System.Console.WindowLeft%2A> プロパティの値が自動的に調整されることに注意してください。  
  
 出力のリダイレクト時に <xref:System.Console.WindowLeft%2A> プロパティの値を設定しようとすると、<xref:System.IO.IOException> 例外がスローされます。 この例外を回避するには、<xref:System.Console.IsOutputRedirected%2A> プロパティが `false`を返す場合にのみ、このプロパティの値を設定できます。  
  
   
  
## Examples  
 次の例では、80列のコンソールウィンドウを開き、120列幅のバッファー領域を定義します。 ウィンドウとバッファーサイズに関する情報を表示し、ユーザーが左方向キーまたは右方向キーを押すまで待機します。 前者の場合、結果が有効な値である場合は、<xref:System.Console.WindowLeft%2A> プロパティの値が1ずつ減少します。 後者の場合、結果が有効である場合は、<xref:System.Console.WindowLeft%2A> プロパティの値が1ずつ増加します。 この例では、<xref:System.ArgumentOutOfRangeException>を処理する必要がないことに注意してください。これは、<xref:System.Console.WindowLeft%2A> プロパティに割り当てられる値が負でないことをチェックし、<xref:System.Console.WindowLeft%2A> および <xref:System.Console.WindowWidth%2A> プロパティの合計が <xref:System.Console.BufferWidth%2A> プロパティ値を超えることがないことを確認します。  
  
 [!code-cpp[System.Console.WindowLeft#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.windowleft/cpp/windowleft1.cpp#1)]
 [!code-csharp[System.Console.WindowLeft#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.windowleft/cs/windowleft1.cs#1)]
 [!code-vb[System.Console.WindowLeft#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.windowleft/vb/windowleft1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作で、割り当てられる値が 0 未満です。  
  
または 
代入結果として、<see cref="P:System.Console.WindowLeft" /> に <see cref="P:System.Console.WindowWidth" /> を加算すると <see cref="P:System.Console.BufferWidth" /> より大きくなります。</exception>
        <exception cref="T:System.IO.IOException">読み取りまたは書き込み情報エラー。</exception>
        <exception cref="T:System.PlatformNotSupportedException">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowTop">
      <MemberSignature Language="C#" Value="public static int WindowTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowTop : int with get, set" Usage="System.Console.WindowTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソール ウィンドウ領域の上端の位置を、画面バッファーに対する相対位置として取得または設定します。</summary>
        <value>コンソール ウィンドウの上端の位置 (行)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンソールは、四角形のウィンドウを四角形の大きなバッファー領域に表します。 ウィンドウとバッファーは両方とも、行の数によって垂直方向に、列の数で水平に計測されます。 バッファー領域の大きさは、<xref:System.Console.BufferHeight%2A> プロパティと <xref:System.Console.BufferWidth%2A> プロパティによって定義されます。 コンソール領域の大きさは、<xref:System.Console.WindowHeight%2A> プロパティと <xref:System.Console.WindowWidth%2A> プロパティによって定義されます。 <xref:System.Console.WindowTop%2A> プロパティによって、コンソールウィンドウの最初の列に表示されるバッファー領域の行が決まります。 <xref:System.Console.WindowTop%2A> プロパティの値は、0から <xref:System.Console.BufferHeight%2A> - <xref:System.Console.WindowHeight%2A>までの範囲で指定できます。 この範囲外の値に設定しようとすると、<xref:System.ArgumentOutOfRangeException>がスローされます。  
  
 出力のリダイレクト時に <xref:System.Console.WindowTop%2A> プロパティの値を設定しようとすると、<xref:System.IO.IOException> 例外がスローされます。 この例外を回避するには、<xref:System.Console.IsOutputRedirected%2A> プロパティが `false`を返す場合にのみ、このプロパティの値を設定できます。  
  
   
  
## Examples  
 次の例では、<xref:System.Console.WindowLeft%2A>、<xref:System.Console.WindowTop%2A>、<xref:System.Console.WindowWidth%2A>、<xref:System.Console.WindowHeight%2A>、<xref:System.Console.BufferWidth%2A>、<xref:System.Console.BufferHeight%2A>、および <xref:System.Console.CursorVisible%2A> の各プロパティについて説明します。および <xref:System.Console.SetWindowPosition%2A>、<xref:System.Console.SetBufferSize%2A>、および <xref:System.Console.ReadKey%2A> メソッド。 この例では、画面バッファーの幅に基づいて、画面バッファーにグリッドパターンを描画します。 次に、上矢印、下矢印、左矢印、または右矢印の各コンソールキーが押されたときに、コンソールウィンドウが移動します。 グリッドパターンを使用すると、画面バッファーに対するコンソールウィンドウの移動を確認できます。  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
 [!code-fsharp[console.windowLT#1](~/samples/snippets/fsharp/VS_Snippets_CLR/console.windowLT/FS/wlt.fs#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作で、割り当てられる値が 0 未満です。  
  
または 
代入結果として、<see cref="P:System.Console.WindowTop" /> に <see cref="P:System.Console.WindowHeight" /> を加算すると <see cref="P:System.Console.BufferHeight" /> より大きくなります。</exception>
        <exception cref="T:System.IO.IOException">読み取りまたは書き込み情報エラー。</exception>
        <exception cref="T:System.PlatformNotSupportedException">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowWidth">
      <MemberSignature Language="C#" Value="public static int WindowWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowWidth : int with get, set" Usage="System.Console.WindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソール ウィンドウの幅を取得または設定します。</summary>
        <value>列数で指定されたコンソール ウィンドウの幅。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 出力がリダイレクトされるときに <xref:System.Console.WindowWidth%2A> プロパティの値を設定しようとすると、<xref:System.ArgumentOutOfRangeException> または <xref:System.IO.IOException> 例外がスローされます。 例外を回避するには、<xref:System.Console.IsOutputRedirected%2A> プロパティが `false`を返す場合にのみ、このプロパティの値を設定できます。  
  
   
  
## Examples  
 この例では、<xref:System.Console.SetWindowSize%2A> メソッドと、<xref:System.Console.WindowWidth%2A> プロパティと <xref:System.Console.WindowHeight%2A> プロパティについて説明します。 この例を実行して、コンソールウィンドウのサイズを変更した場合の影響をすべて確認する必要があります。  
  
 この例では、コンソールウィンドウのサイズを85列と43行に設定し、キーを押すまで待機します。 いずれかのキーが押されると、コンソールウィンドウの大きさが半分になり、新しい寸法が報告されます。この例では、別のキー押下を待機します。 最後に、いずれかのキーを押すと、コンソールウィンドウが元のディメンションに復元され、例が終了します。  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Console.WindowWidth" /> プロパティの値または <see cref="P:System.Console.WindowHeight" /> プロパティの値が 0 以下です。  
  
または 
<see cref="P:System.Console.WindowHeight" /> プロパティの値と <see cref="P:System.Console.WindowTop" /> プロパティの値を加算した値が <see cref="F:System.Int16.MaxValue" /> 以上です。  
  
または 
<see cref="P:System.Console.WindowWidth" /> プロパティの値または <see cref="P:System.Console.WindowHeight" /> プロパティの値が、現在の画面の解像度およびコンソールのフォントで利用可能なウィンドウの最大幅か最大の高さを超えています。</exception>
        <exception cref="T:System.IO.IOException">読み取りまたは書き込み情報エラー。</exception>
        <exception cref="T:System.PlatformNotSupportedException">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した値のテキスト形式を標準出力ストリームに書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(bool value);" />
      <MemberSignature Language="F#" Value="static member Write : bool -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した Boolean 値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.Boolean.TrueString?displayProperty=nameWithType> または <xref:System.Boolean.FalseString?displayProperty=nameWithType>を出力する <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>を呼び出すことによって生成されます。  
  
   
  
## Examples  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(char value);" />
      <MemberSignature Language="F#" Value="static member Write : char -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した Unicode 文字値を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="static member Write : char[] -&gt; unit" Usage="System.Console.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 文字配列。</param>
        <summary>指定した Unicode 文字配列を標準出力ストリームに書き込みます。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member Write : decimal -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した <see cref="T:System.Decimal" /> 値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.Decimal.ToString%2A?displayProperty=nameWithType>を呼び出すことによって生成されます。  
  
   
  
## Examples  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(double value);" />
      <MemberSignature Language="F#" Value="static member Write : double -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した倍精度浮動小数点値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.Double.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
   
  
## Examples  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int value);" />
      <MemberSignature Language="F#" Value="static member Write : int -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 32 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.Int32.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
   
  
## Examples  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(long value);" />
      <MemberSignature Language="F#" Value="static member Write : int64 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 64 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.Int64.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
   
  
## Examples  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : obj -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値または <see langword="null" />。</param>
        <summary>指定したオブジェクトのテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` が `null`場合、何も書き込まれず、例外はスローされません。 それ以外の場合、文字列形式を生成するために `value` の `ToString` メソッドが呼び出され、結果の文字列が標準出力ストリームに書き込まれます。  
  
   
  
## Examples  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(float value);" />
      <MemberSignature Language="F#" Value="static member Write : single -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した単精度浮動小数点値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.Single.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
   
  
## Examples  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : string -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した文字列値を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Value が `null`場合、標準出力ストリームには何も書き込まれません。  
  
   
  
## Examples  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member Write : uint32 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 32 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.UInt32.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
   
  
## Examples  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member Write : uint64 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 64 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.UInt64.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
   
  
## Examples  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj -&gt; unit" Usage="System.Console.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0"><paramref name="format" /> を使用して書き込むオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。 結果の文字列が出力ストリームに書き込まれます。  
  
 `format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。 書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。  
  
 書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。  
  
 .NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。  
  
-   <xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。  
  
-   数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。  
  
-   日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  
  
-   列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。  
  
-   書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、`WriteLine` メソッドを使用して、数値、日付、および列挙体の標準的な書式指定子を示します。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)] 
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 <xref:System.Console.Write%2A>メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式設定</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj[] -&gt; unit" Usage="System.Console.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-1.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg"><paramref name="format" /> を使用して書き込むオブジェクトの配列。</param>
        <summary>指定された書式情報を使用して、指定したオブジェクト配列のテキスト表現を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。 結果の文字列が出力ストリームに書き込まれます。  
  
 `format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。 書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。  
  
 書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。  
  
 .NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。  
  
-   <xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。  
  
-   数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。  
  
-   日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  
  
-   列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。  
  
-   書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。  
  
 `arg` パラメーターはパラメーター配列です。 引数は、配列として、または5つ以上の項目のリストとしてメソッドに渡すことができます。 この例は、メソッド呼び出しの両方の形式を示しています。  
  
   
  
## Examples  
 次の例では、ユーザーに関する情報を提供する多数のプロパティを持つ `Person` クラスを定義します。 `GetDescription` メソッドは、1つを除くすべてのプロパティ値を含む配列を返します。 この例では、`GetDescription` メソッドによって返された配列を使用して Person オブジェクトの値を表示します。  
  
 [!code-csharp[System.Console.Write#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams1.cs#1)]
 [!code-vb[System.Console.Write#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams1.vb#1)]  
  
 この例では、`Person.Remarks` プロパティの値を同じ行に表示しようとしているため、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29> メソッドではなく <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29> メソッドを呼び出していることに注意してください。 これを行うために、<xref:System.Console.CursorLeft%2A> の値と <xref:System.Console.WindowWidth%2A> プロパティを調べて、注釈を収めるのに十分な領域があるかどうかを判断します。  存在する場合は、行が表示されます。 そうでない場合は、行を書き込み、3つのスペースをインデントし、コメントを表示します。  
  
 次の例は、パラメーター配列ではなく `arg` の引数として5つの項目のリストを提供する点を除いて、最初の例と同じです。  
  
 [!code-csharp[System.Console.Write#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams2.cs#2)]
 [!code-vb[System.Console.Write#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> または <paramref name="arg" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage"><para>このメソッドは、コードにC++よって呼び出されません。 コンパイラC++は、文字列と4つ以上のオブジェクトパラメーターのリストを含む[system.string への](xref:System.Console.Write*)呼び出しを、<see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />の呼び出しとして解決します。 これは、<see cref="M:System.Console.Write(System.String,System.Object)" />の呼び出しとして文字列とオブジェクト配列を含む、 [system.string への](xref:System.Console.Write*)呼び出しを解決します。</para></block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式設定</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="static member Write : char[] * int * int -&gt; unit" Usage="System.Console.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 文字の配列。</param>
        <param name="index"><paramref name="buffer" /> 内の開始位置。</param>
        <param name="count">書き込む文字数。</param>
        <summary>指定した Unicode 文字の部分配列を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`buffer` の `index` 位置から開始して、標準出力ストリームに `count` 文字を書き込みます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> と <paramref name="count" /> の合計が指定する位置は、<paramref name="buffer" /> 内ではありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0"><paramref name="format" /> を使用して書き込む最初のオブジェクト。</param>
        <param name="arg1"><paramref name="format" /> を使用して書き込む 2 番目のオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。 結果の文字列が出力ストリームに書き込まれます。  
  
 `format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。 書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。  
  
 書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。  
  
 .NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。  
  
-   <xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。  
  
-   数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。  
  
-   日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  
  
-   列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。  
  
-   書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、`WriteLine` メソッドを使用して、数値、日付、および列挙体の標準的な書式指定子を示します。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式設定</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0"><paramref name="format" /> を使用して書き込む最初のオブジェクト。</param>
        <param name="arg1"><paramref name="format" /> を使用して書き込む 2 番目のオブジェクト。</param>
        <param name="arg2"><paramref name="format" /> を使用して書き込む 3 番目のオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。 結果の文字列が出力ストリームに書き込まれます。  
  
 `format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。 書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。  
  
 書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。  
  
 .NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。  
  
-   <xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。  
  
-   数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。  
  
-   日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  
  
-   列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。  
  
-   書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、`WriteLine` メソッドを使用して、数値、日付、および列挙体の標準的な書式指定子を示します。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 `Write`メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式設定</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg3" Type="System.Object" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0"><paramref name="format" /> を使用して書き込む最初のオブジェクト。</param>
        <param name="arg1"><paramref name="format" /> を使用して書き込む 2 番目のオブジェクト。</param>
        <param name="arg2"><paramref name="format" /> を使用して書き込む 3 番目のオブジェクト。</param>
        <param name="arg3"><paramref name="format" /> を使用して書き込む 4 番目のオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現と可変長パラメーター リストを標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  この API は、CLS に準拠していません。 CLS 準拠の代わりとして <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> を使用できます。 およびC# Visual Basic コンパイラは、このメソッドへの呼び出しを <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>の呼び出しとして自動的に解決します。  
  
 このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。 結果の文字列が出力ストリームに書き込まれます。  
  
 `format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。 書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。  
  
 書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。  
  
 .NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。  
  
-   <xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。  
  
-   数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。  
  
-   日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  
  
-   列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。  
  
-   書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.Console.Write%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> メソッドでの変数パラメーターの使用方法を示しています。 メソッドは、複合書式指定文字列と5つの書式項目を使用して呼び出されます。  
  
 [!code-cpp[System.Console.Write#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.write/cpp/con_write.cpp#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage"><para>このメソッドは <see langword="vararg" /> キーワードでマークされています。これは、可変個のパラメーターをサポートしていることを意味します。 メソッドはビジュアルC++から呼び出すことができますが、または Visual Basic C#コードから呼び出すことはできません。 およびC# Visual Basic コンパイラは、<see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" /> の呼び出しを <see cref="M:System.Console.Write(System.String,System.Object[])" />の呼び出しとして解決します。</para></block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式設定</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したデータを標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の行終端記号は、値がキャリッジリターンの後に改行が続く文字列 (のC#場合は "\r\n"、Visual Basic の場合は `vbCrLf`) です。 行終端記号を変更するには、<xref:System.Console.Out%2A> プロパティの <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> プロパティを別の文字列に設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine();" />
      <MemberSignature Language="F#" Value="static member WriteLine : unit -&gt; unit" Usage="System.Console.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の行終端記号を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の行終端記号は、値がキャリッジリターンの後に改行が続く文字列 (のC#場合は "\r\n"、Visual Basic の場合は `vbCrLf`) です。 行終端記号を変更するには、<xref:System.Console.Out%2A> プロパティの <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> プロパティを別の文字列に設定します。 具体的な例を次に示します。  
  
   
  
## Examples  
 この例では、行終端記号を既定値の "\r\n" から、または `vbCrLf` を "\r\n \r\n" または `vbCrLf` + `vbCrLf`に変更します。 次に、<xref:System.Console.WriteLine> と <xref:System.Console.WriteLine%28System.String%29> メソッドを呼び出して、コンソールに出力を表示します。  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : bool -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した Boolean 値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.Boolean.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例では、10個のランダムな整数が生成され、<xref:System.Console.WriteLine%28System.Boolean%29?displayProperty=nameWithType> メソッドを使用して、偶数であるかどうかが示されます。  
  
 [!code-cpp[System.Console.WriteLine#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_boolean1.cpp#4)]
 [!code-csharp[System.Console.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_boolean1.cs#4)]
 [!code-vb[System.Console.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_boolean1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した Unicode 文字を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。 この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char[] -&gt; unit" Usage="System.Console.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 文字配列。</param>
        <summary>指定した Unicode 文字配列を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : decimal -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した <see cref="T:System.Decimal" /> 値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.Decimal.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。 この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : double -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した倍精度浮動小数点値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.Double.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。 この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 32 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.Int32.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。 この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int64 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 64 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.Int64.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。 この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定したオブジェクトのテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` が `null` の場合は、行終端記号だけを書き込みます。 それ以外の場合、文字列形式を生成するために `value` の `ToString` メソッドが呼び出され、結果の文字列が標準出力ストリームに書き込まれます。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例では、<xref:System.Console.WriteLine%28System.Object%29> メソッドを使用して、オブジェクト配列の各値をコンソールに表示します。  
  
 [!code-cpp[System.Console.WriteLine#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_obj1.cpp#3)]
 [!code-csharp[System.Console.WriteLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_obj1.cs#3)]
 [!code-vb[System.Console.WriteLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_obj1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : single -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した単精度浮動小数点値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.Single.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。 この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した文字列値を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Value が `null`場合は、行終端記号だけが標準出力ストリームに書き込まれます。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 この例では、行終端記号を既定値の "\r\n" から、または `vbCrLf` を "\r\n \r\n" または `vbCrLf` + `vbCrLf`に変更します。 次に、<xref:System.Console.WriteLine> と <xref:System.Console.WriteLine%28System.String%29> メソッドを呼び出して、コンソールに出力を表示します。  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : uint32 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 32 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.UInt32.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。 この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : uint64 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 64 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` のテキスト表現は、<xref:System.UInt64.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。 この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0"><paramref name="format" /> を使用して書き込むオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。 結果の文字列が出力ストリームに書き込まれます。  
  
 `format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。 書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。  
  
 書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。  
  
 .NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。  
  
-   <xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。  
  
-   数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。  
  
-   日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  
  
-   列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。  
  
-   書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例では、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29> メソッドを呼び出して、ランダムに生成された5つの <xref:System.Boolean> 値を表示します。  
  
 [!code-csharp[System.Console.WriteLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine6.cs#6)]
 [!code-vb[System.Console.WriteLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine6.vb#6)]  
  
 次の例では、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29> メソッドを呼び出して、現在の日付を表示します。   `format` 引数の書式指定項目は、"D"[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)を使用して、現在のカルチャの長い日付形式で日付を表示することに注意してください。  
  
 [!code-csharp[System.Console.WriteLine#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine7.cs#7)]
 [!code-vb[System.Console.WriteLine#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine7.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式設定</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj[] -&gt; unit" Usage="System.Console.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-1.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg"><paramref name="format" /> を使用して書き込むオブジェクトの配列。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクト配列のテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。 結果の文字列が出力ストリームに書き込まれます。  
  
 `format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。 書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。  
  
 書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。  
  
 .NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。  
  
-   <xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。  
  
-   数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。  
  
-   日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  
  
-   列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。  
  
-   書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例では、数値、日付、および列挙体の標準的な書式指定子を示します。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。 この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> または <paramref name="arg" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage"><para>このメソッドは、コードにC++よって呼び出されません。 コンパイラC++は、文字列と4つ以上のオブジェクトパラメーターのリストを <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />の呼び出しとして含む、system.string の[呼び出しを解決します。](xref:System.Console.WriteLine*) これは、文字列とオブジェクト配列を <see cref="M:System.Console.WriteLine(System.String,System.Object)" />の呼び出しとして含む、system.string への呼び出しを解決[します。](xref:System.Console.WriteLine*)</para></block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式設定</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char[] * int * int -&gt; unit" Usage="System.Console.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 文字の配列。</param>
        <param name="index"><paramref name="buffer" /> 内の開始位置。</param>
        <param name="count">書き込む文字数。</param>
        <summary>指定した Unicode 文字の部分配列を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`buffer` の `index` 位置から開始して、標準出力ストリームに `count` 文字を書き込みます。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> と <paramref name="count" /> の合計が指定する位置は、<paramref name="buffer" /> 内ではありません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0"><paramref name="format" /> を使用して書き込む最初のオブジェクト。</param>
        <param name="arg1"><paramref name="format" /> を使用して書き込む 2 番目のオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。 結果の文字列が出力ストリームに書き込まれます。  
  
 `format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。 書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。  
  
 書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。  
  
 .NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。  
  
-   <xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。  
  
-   数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。  
  
-   日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  
  
-   列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。  
  
-   書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例では、数値、日付、および列挙体の標準的な書式指定子を示します。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。 この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式設定</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0"><paramref name="format" /> を使用して書き込む最初のオブジェクト。</param>
        <param name="arg1"><paramref name="format" /> を使用して書き込む 2 番目のオブジェクト。</param>
        <param name="arg2"><paramref name="format" /> を使用して書き込む 3 番目のオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。 結果の文字列が出力ストリームに書き込まれます。  
  
 `format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。 書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。  
  
 書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。  
  
 .NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。  
  
-   <xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。  
  
-   数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。  
  
-   日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  
  
-   列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。  
  
-   書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例では、数値、日付、および列挙体の標準的な書式指定子を示します。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。 この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式設定</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg3" Type="System.Object" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format">複合書式設定文字列。</param>
        <param name="arg0"><paramref name="format" /> を使用して書き込む最初のオブジェクト。</param>
        <param name="arg1"><paramref name="format" /> を使用して書き込む 2 番目のオブジェクト。</param>
        <param name="arg2"><paramref name="format" /> を使用して書き込む 3 番目のオブジェクト。</param>
        <param name="arg3"><paramref name="format" /> を使用して書き込む 4 番目のオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現と可変長パラメーター リストを標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  この API は、CLS に準拠していません。 CLS 準拠の代わりとして <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> を使用できます。 およびC# Visual Basic コンパイラは、このメソッドへの呼び出しを <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>の呼び出しとして自動的に解決します。  
  
 このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。 結果の文字列が出力ストリームに書き込まれます。  
  
 `format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。 書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。  
  
 書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。  
  
 .NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。  
  
-   <xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。  
  
-   数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。  
  
-   日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  
  
-   列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。  
  
-   書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。  
  
 行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> メソッドでの変数引数の使用方法を示しています。 メソッドは、複合書式指定文字列と5つの書式項目を使用して呼び出されます。  
  
 [!code-cpp[System.Console.WriteLine#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_vararg.cpp#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">安全なトップレベルウィンドウおよびサブウィンドウを変更するために使用します。 関連付けられた列挙型: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage"><para>このメソッドは <see langword="vararg" /> キーワードでマークされています。これは、可変個のパラメーターをサポートしていることを意味します。 メソッドはビジュアルC++から呼び出すことができますが、または Visual Basic C#コードから呼び出すことはできません。 およびC# Visual Basic コンパイラは、<see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" /> の呼び出しを <see cref="M:System.Console.WriteLine(System.String,System.Object[])" />の呼び出しとして解決します。</para></block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式設定</related>
      </Docs>
    </Member>
  </Members>
</Type>
