<Type Name="Console" FullName="System.Console">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a357edc233a4c3fcec01ff15bbe616cb5321cc8e" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83520870" /></Metadata><TypeSignature Language="C#" Value="public static class Console" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Console extends System.Object" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Console" />
  <TypeSignature Language="VB.NET" Value="Public Class Console" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Console abstract sealed" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Console = class" />
  <TypeSignature Language="C#" Value="public sealed class Console" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Console extends System.Object" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Console" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Console sealed" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Console extends System.Object" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Console</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Console" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8bfe0-101">コンソール アプリケーションの標準入力ストリーム、標準出力ストリーム、および標準エラー ストリームを表します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-101">Represents the standard input, output, and error streams for console applications.</span></span> <span data-ttu-id="8bfe0-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-103">コンソールは、ユーザーがオペレーティングシステムと対話するオペレーティングシステムウィンドウであり、コンピューターのキーボードを使用してテキスト入力を入力することによって、またはコンピューターのターミナルからテキストの出力を読み取ることによって、テキストベースのコンソールアプリケーションと対話します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-103">The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the computer terminal.</span></span> <span data-ttu-id="8bfe0-104">たとえば、Windows オペレーティングシステムでは、コンソールはコマンドプロンプトウィンドウと呼ばれ、MS-DOS コマンドを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-104">For example, in the Windows operating system, the console is called the Command Prompt window and accepts MS-DOS commands.</span></span> <span data-ttu-id="8bfe0-105"><xref:System.Console> クラスは、コンソールから文字を読み取ったり、コンソールに文字を書き込んだりするアプリケーションの基本的なサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-105">The <xref:System.Console> class provides basic support for applications that read characters from, and write characters to, the console.</span></span>  
  
 <span data-ttu-id="8bfe0-106"><xref:System.Console> クラスを使用した開発の詳細については、次のセクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-106">For information about developing with the <xref:System.Console> class, see the following sections:</span></span>  
  
-   [<span data-ttu-id="8bfe0-107">コンソール i/o ストリーム</span><span class="sxs-lookup"><span data-stu-id="8bfe0-107">Console I/O Streams</span></span>](#Streams)  
  
-   [<span data-ttu-id="8bfe0-108">画面バッファーとコンソールウィンドウ</span><span class="sxs-lookup"><span data-stu-id="8bfe0-108">Screen Buffer and Console Window</span></span>](#Buffer)  
  
-   [<span data-ttu-id="8bfe0-109">コンソールの Unicode サポート</span><span class="sxs-lookup"><span data-stu-id="8bfe0-109">Unicode Support for the Console</span></span>](#Unicode)  
  
-   [<span data-ttu-id="8bfe0-110">一般的な操作</span><span class="sxs-lookup"><span data-stu-id="8bfe0-110">Common Operations</span></span>](#Operations)  
  
-   [<span data-ttu-id="8bfe0-111">.NET Core に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="8bfe0-111">.NET Core Notes</span></span>](#Core)  
  
<a name="Streams"></a>   
## <a name="console-io-streams"></a><span data-ttu-id="8bfe0-112">コンソール i/o ストリーム</span><span class="sxs-lookup"><span data-stu-id="8bfe0-112">Console I/O Streams</span></span>  
 <span data-ttu-id="8bfe0-113">コンソールアプリケーションが起動すると、オペレーティングシステムによって自動的に3つの i/o ストリームがコンソールに関連付けられます。これは、標準入力ストリーム、標準出力ストリーム、および標準エラー出力ストリームです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-113">When a console application starts, the operating system automatically associates three I/O streams with the console: standard input stream, standard output stream, and standard error output stream.</span></span> <span data-ttu-id="8bfe0-114">アプリケーションでは、標準入力ストリームからユーザー入力を読み取ることができます。標準出力ストリームに通常のデータを書き込みます。とは、エラーデータを標準エラー出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-114">Your application can read user input from the standard input stream; write normal data to the standard output stream; and write error data to the standard error output stream.</span></span> <span data-ttu-id="8bfe0-115">これらのストリームは、<xref:System.Console.In%2A?displayProperty=nameWithType>、<xref:System.Console.Out%2A?displayProperty=nameWithType>、および <xref:System.Console.Error%2A?displayProperty=nameWithType> プロパティの値としてアプリケーションに提示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-115">These streams are presented to your application as the values of the <xref:System.Console.In%2A?displayProperty=nameWithType>, <xref:System.Console.Out%2A?displayProperty=nameWithType>, and <xref:System.Console.Error%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="8bfe0-116">既定では、<xref:System.Console.In%2A> プロパティの値は、キーボードを表す <xref:System.IO.TextReader?displayProperty=nameWithType> オブジェクトであり、<xref:System.Console.Out%2A> プロパティと <xref:System.Console.Error%2A> プロパティの値は、コンソールウィンドウを表すオブジェクト <xref:System.IO.TextWriter?displayProperty=nameWithType> ます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-116">By default, the value of the <xref:System.Console.In%2A> property is a <xref:System.IO.TextReader?displayProperty=nameWithType> object that represents the keyboard, and the values of the <xref:System.Console.Out%2A> and <xref:System.Console.Error%2A> properties are <xref:System.IO.TextWriter?displayProperty=nameWithType> objects that represent a console window.</span></span> <span data-ttu-id="8bfe0-117">ただし、これらのプロパティは、コンソールウィンドウまたはキーボードを表さないストリームに設定できます。たとえば、これらのプロパティは、ファイルを表すストリームに設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-117">However, you can set these properties to streams that do not represent the console window or keyboard; for example, you can set these properties to streams that represent files.</span></span> <span data-ttu-id="8bfe0-118">標準入力、標準出力、または標準エラーストリームをリダイレクトするには、それぞれ <xref:System.Console.SetIn%2A?displayProperty=nameWithType>、<xref:System.Console.SetOut%2A?displayProperty=nameWithType>、または <xref:System.Console.SetError%2A?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-118">To redirect the standard input, standard output, or standard error stream, call the <xref:System.Console.SetIn%2A?displayProperty=nameWithType>, <xref:System.Console.SetOut%2A?displayProperty=nameWithType>, or <xref:System.Console.SetError%2A?displayProperty=nameWithType> method, respectively.</span></span> <span data-ttu-id="8bfe0-119">これらのストリームを使用する i/o 操作は同期されます。つまり、複数のスレッドがストリームの読み取りまたは書き込みを行うことができます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-119">I/O operations that use these streams are synchronized, which means that multiple threads can read from, or write to, the streams.</span></span> <span data-ttu-id="8bfe0-120">これは、オブジェクトがコンソールストリームを表す場合に、通常は非同期のメソッド (<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType>など) が同期的に実行されることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-120">This means that methods that are ordinarily asynchronous, such as <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType>, execute synchronously if the object represents a console stream.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8bfe0-121"><xref:System.Console> クラスを使用して、サーバーアプリケーションなどの無人アプリケーションで出力を表示することは避けてください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-121">Do not use the <xref:System.Console> class to display output in unattended applications, such as server applications.</span></span> <span data-ttu-id="8bfe0-122"><xref:System.Console.Write%2A?displayProperty=nameWithType> や <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> などのメソッドの呼び出しは、GUI アプリケーションには影響しません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-122">Calls to methods such as <xref:System.Console.Write%2A?displayProperty=nameWithType> and <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> have no effect in GUI applications.</span></span>  
  
 <span data-ttu-id="8bfe0-123">基になるストリームがコンソールに送られたときに正常に動作するクラスメンバー <xref:System.Console>、ストリームがファイルなどにリダイレクトされると、例外がスローされることがあります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-123"><xref:System.Console> class members that work normally when the underlying stream is directed to a console might throw an exception if the stream is redirected, for example, to a file.</span></span> <span data-ttu-id="8bfe0-124">標準ストリームをリダイレクトする場合に <xref:System.IO.IOException?displayProperty=nameWithType> 例外をキャッチするようにアプリケーションをプログラミングします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-124">Program your application to catch <xref:System.IO.IOException?displayProperty=nameWithType> exceptions if you redirect a standard stream.</span></span> <span data-ttu-id="8bfe0-125">また、<xref:System.Console.IsOutputRedirected%2A>、<xref:System.Console.IsInputRedirected%2A>、および <xref:System.Console.IsErrorRedirected%2A> の各プロパティを使用して、<xref:System.IO.IOException?displayProperty=nameWithType> 例外をスローする操作を実行する前に、標準ストリームがリダイレクトされるかどうかを判断することもできます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-125">You can also use the <xref:System.Console.IsOutputRedirected%2A>, <xref:System.Console.IsInputRedirected%2A>, and <xref:System.Console.IsErrorRedirected%2A> properties to determine whether a standard stream is redirected before performing an operation that throws an <xref:System.IO.IOException?displayProperty=nameWithType> exception.</span></span>  
  
 <span data-ttu-id="8bfe0-126"><xref:System.Console.In%2A>、<xref:System.Console.Out%2A>、および <xref:System.Console.Error%2A> プロパティによって表されるストリームオブジェクトのメンバーを明示的に呼び出すと便利な場合があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-126">It is sometimes useful to explicitly call the members of the stream objects represented by the <xref:System.Console.In%2A>, <xref:System.Console.Out%2A>, and <xref:System.Console.Error%2A> properties.</span></span> <span data-ttu-id="8bfe0-127">たとえば、既定では、<xref:System.Console.ReadLine%2A?displayProperty=nameWithType> メソッドは標準入力ストリームから入力を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-127">For example, by default, the <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method reads input from the standard input stream.</span></span> <span data-ttu-id="8bfe0-128">同様に、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドはデータを標準出力ストリームに書き込み、その後に既定の行終了文字列 (復帰とラインフィード ("\r\n")) が続きます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-128">Similarly, the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method writes data to the standard output stream, and the data is followed by the default line termination string, which is  a carriage return and line feed ("\r\n").</span></span> <span data-ttu-id="8bfe0-129">ただし、<xref:System.Console> クラスには、標準エラー出力ストリームにデータを書き込むための対応するメソッドが用意されていません。また、プロパティを使用して、そのストリームに書き込まれるデータの行終了文字列を変更することもできません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-129">However, the <xref:System.Console> class does not provide a corresponding method to write data to the standard error output stream, or a property to change the line termination string for data written to that stream.</span></span>  
  
 <span data-ttu-id="8bfe0-130">この問題を解決するには、<xref:System.Console.Out%2A> または <xref:System.Console.Error%2A> プロパティの <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> プロパティを別の行の終了文字列に設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-130">You can solve this problem by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> property of the <xref:System.Console.Out%2A> or <xref:System.Console.Error%2A> property to another line termination string.</span></span> <span data-ttu-id="8bfe0-131">たとえば、次C#のステートメントは、標準エラー出力ストリームの行終了文字列を、2つの復帰とラインフィードシーケンスに設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-131">For example, the following C# statement sets the line termination string for the standard error output stream to two carriage return and line feed sequences:</span></span>  
  
 `Console.Error.NewLine = "\r\n\r\n";`  
  
 <span data-ttu-id="8bfe0-132">その後、次C#のステートメントのように、エラー出力ストリームオブジェクトの <xref:System.IO.TextWriter.WriteLine%2A> メソッドを明示的に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-132">You can then explicitly call the <xref:System.IO.TextWriter.WriteLine%2A> method of the error output stream object, as in the following C# statement:</span></span>  
  
 `Console.Error.WriteLine();`  
  
<a name="Buffer"></a>   
## <a name="screen-buffer-and-console-window"></a><span data-ttu-id="8bfe0-133">画面バッファーとコンソールウィンドウ</span><span class="sxs-lookup"><span data-stu-id="8bfe0-133">Screen Buffer and Console Window</span></span>  
 <span data-ttu-id="8bfe0-134">コンソールの2つの密接に関連する機能は、画面バッファーとコンソールウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-134">Two closely related features of the console are the screen buffer and the console window.</span></span> <span data-ttu-id="8bfe0-135">テキストは、実際にはコンソールによって所有されているストリームの読み取りまたは書き込みを行いますが、コンソールが所有する領域に対しては、画面バッファーと呼ばれるように見えます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-135">Text is actually read from or written to streams owned by the console, but appear to be read from or written to an area owned by the console called the screen buffer.</span></span> <span data-ttu-id="8bfe0-136">画面バッファーは、コンソールの属性であり、各グリッドの交差部分または文字セルに文字を含めることができる、行と列の四角形のグリッドとして構成されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-136">The screen buffer is an attribute of the console, and is organized as a rectangular grid of rows and columns where each grid intersection, or character cell, can contain a character.</span></span> <span data-ttu-id="8bfe0-137">各文字には独自の前景色があり、各文字セルには独自の背景色があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-137">Each character has its own foreground color, and each character cell has its own background color.</span></span>  
  
 <span data-ttu-id="8bfe0-138">画面バッファーは、コンソールウィンドウと呼ばれる四角形の領域から表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-138">The screen buffer is viewed through a rectangular region called the console window.</span></span> <span data-ttu-id="8bfe0-139">コンソールウィンドウは、コンソールのもう1つの属性です。これは、オペレーティングシステムウィンドウであるコンソール自体ではありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-139">The console window is another attribute of the console; it is not the console itself, which is an operating system window.</span></span> <span data-ttu-id="8bfe0-140">コンソールウィンドウは、画面バッファーのサイズ以下の行と列に配置されています。移動すると、基になる画面バッファーのさまざまな領域を表示できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-140">The console window is arranged in rows and columns, is less than or equal to the size of the screen buffer, and can be moved to view different areas of the underlying screen buffer.</span></span> <span data-ttu-id="8bfe0-141">画面バッファーがコンソールウィンドウよりも大きい場合は、コンソールウィンドウを画面バッファー領域の上に移動できるように、コンソールに自動的にスクロールバーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-141">If the screen buffer is larger than the console window, the console automatically displays scroll bars so the console window can be repositioned over the screen buffer area.</span></span>  
  
 <span data-ttu-id="8bfe0-142">カーソルは、テキストが現在読み取られている、または書き込んでいる画面バッファーの位置を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-142">A cursor indicates the screen buffer position where text is currently read or written.</span></span> <span data-ttu-id="8bfe0-143">カーソルは非表示にしたり表示したりすることができ、その高さを変更できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-143">The cursor can be hidden or made visible, and its height can be changed.</span></span> <span data-ttu-id="8bfe0-144">カーソルが表示されている場合は、カーソルが常に表示されるように、コンソールウィンドウの位置が自動的に移動されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-144">If the cursor is visible, the console window position is moved automatically so the cursor is always in view.</span></span>  
  
 <span data-ttu-id="8bfe0-145">画面バッファー内の文字セル座標の原点は左上隅で、カーソルとコンソールウィンドウの位置はその原点を基準にして測定されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-145">The origin for character cell coordinates in the screen buffer is the upper left corner, and the positions of the cursor and the console window are measured relative to that origin.</span></span> <span data-ttu-id="8bfe0-146">位置を指定するには、0から始まるインデックスを使用します。つまり、最上位の行を行0、左端の列を列0として指定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-146">Use zero-based indexes to specify positions; that is, specify the topmost row as row 0, and the leftmost column as column 0.</span></span> <span data-ttu-id="8bfe0-147">行インデックスと列インデックスの最大値は <xref:System.Int16.MaxValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-147">The maximum value for the row and column indexes is <xref:System.Int16.MaxValue?displayProperty=nameWithType>.</span></span>  
  
<a name="Unicode"></a>   
## <a name="unicode-support-for-the-console"></a><span data-ttu-id="8bfe0-148">コンソールの Unicode サポート</span><span class="sxs-lookup"><span data-stu-id="8bfe0-148">Unicode Support for the Console</span></span>  
 <span data-ttu-id="8bfe0-149">一般に、コンソールは、現在のコンソールのコードページを使用して、入力を読み取り、出力を書き込みます。システムロケールは、既定で定義されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-149">In general, the console reads input and writes output by using the current console code page, which the system locale defines by default.</span></span> <span data-ttu-id="8bfe0-150">コードページは、使用可能な Unicode 文字のサブセットのみを処理できるため、特定のコードページによってマップされていない文字を表示しようとしても、コンソールはすべての文字を表示したり、正確に表現したりすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-150">A code page can handle only a subset of available Unicode characters, so if you try to display characters that are not mapped by a particular code page, the console won't be able to display all characters or represent them accurately.</span></span> <span data-ttu-id="8bfe0-151">この問題を説明する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-151">The following example illustrates this problem.</span></span> <span data-ttu-id="8bfe0-152">このメソッドは、U + 0410 から U + 044F までのキリル文字をコンソールに表示しようとします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-152">It tries to display the characters of the Cyrillic alphabet from U+0410 to U+044F to the console.</span></span> <span data-ttu-id="8bfe0-153">コンソールコードページ437を使用するシステムでこの例を実行した場合、キリル文字はコードページ437の文字にマップされないため、各文字は疑問符 (?) に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-153">If you run the example on a system that uses console code page 437, each character is replaced by a question mark (?), because Cyrillic characters do not map to the characters in code page 437.</span></span>  
  
 [!code-csharp[System.Console.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/unicode1.cs#1)]
 [!code-vb[System.Console.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/unicode1.vb#1)]  
 [!code-fsharp[System.Console.Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.console.class/fs/unicode1.fs#1)]
  
 <span data-ttu-id="8bfe0-154"><xref:System.Console> クラスでは、コードページのサポートに加えて、<xref:System.Text.UTF8Encoding> クラスを使用した UTF-8 エンコードがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-154">In addition to supporting code pages, the <xref:System.Console> class supports UTF-8 encoding with the <xref:System.Text.UTF8Encoding> class.</span></span> <span data-ttu-id="8bfe0-155">.NET Framework 4.5 以降では、<xref:System.Console> クラスは <xref:System.Text.UnicodeEncoding> クラスを使用した UTF-16 エンコードもサポートしています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-155">Beginning with the .NET Framework 4.5, the <xref:System.Console> class also supports UTF-16 encoding with the <xref:System.Text.UnicodeEncoding> class.</span></span> <span data-ttu-id="8bfe0-156">を入力すると、Unicode 文字がコンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-156">To display Unicode characters to the console.</span></span> <span data-ttu-id="8bfe0-157"><xref:System.Console.OutputEncoding%2A> プロパティを <xref:System.Text.UTF8Encoding> または <xref:System.Text.UnicodeEncoding>に設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-157">you set the <xref:System.Console.OutputEncoding%2A> property to either <xref:System.Text.UTF8Encoding> or  <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 <span data-ttu-id="8bfe0-158">Unicode 文字をサポートするには、エンコーダーが特定の Unicode 文字を認識する必要があります。また、その文字を表示するために必要なグリフを持つフォントも必要です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-158">Support for Unicode characters requires the encoder to recognize a particular Unicode character, and also requires a font that has the glyphs needed to render that character.</span></span> <span data-ttu-id="8bfe0-159">コンソールに Unicode 文字を正しく表示するには、コンソールのフォントを非ラスターまたは TrueType フォント (Consolas, や Lucida Console など) に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-159">To successfully display Unicode characters to the console, the console font must be set to a non-raster or TrueType font such as Consolas or Lucida Console.</span></span> <span data-ttu-id="8bfe0-160">次の例では、ラスターフォントのフォントを Lucida Console にプログラムで変更する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-160">The following example shows how you can programmatically change the font from a raster font to Lucida Console.</span></span>  
  
 [!code-csharp[System.Console.Class.Unsafe#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class.unsafe/cs/setfont1.cs#3)]
 [!code-vb[System.Console.Class.Unsafe#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class.unsafe/vb/setfont1.vb#3)]  
 [!code-fsharp[System.Console.Class.Unsafe#3](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.console.class.unsafe/fs/setfont1.fs#3)]
  
 <span data-ttu-id="8bfe0-161">ただし、TrueType フォントでは、グリフのサブセットのみを表示できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-161">However, TrueType fonts can display only a subset of glyphs.</span></span> <span data-ttu-id="8bfe0-162">たとえば、Lucida コンソールのフォントでは、U + 0021 から U + FB02 までの使用可能な約64000文字が643だけが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-162">For example, the Lucida Console font displays only 643 of the approximately 64,000 available characters from U+0021 to U+FB02.</span></span> <span data-ttu-id="8bfe0-163">特定のフォントでサポートされている文字を確認するには、コントロールパネルの **[フォント]** アプレットを開き、**[文字の検索]** オプションを選択します。次に、文字**マップ**ウィンドウの **[フォント]** の一覧で、検査する文字セットのフォントを選択します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-163">To see which characters a particular font supports, open the **Fonts** applet in Control Panel, choose the **Find a character** option, and choose the font whose character set you'd like to examine in the **Font** list of the **Character Map** window.</span></span>  
  
 <span data-ttu-id="8bfe0-164">Windows では、フォントリンクを使用して、特定のフォントで使用できないグリフが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-164">Windows uses font linking to display glyphs that are not available in a particular font.</span></span> <span data-ttu-id="8bfe0-165">追加の文字セットを表示するためのフォントリンクの詳細については、「[グローバリゼーションのステップバイステップ: フォント](https://go.microsoft.com/fwlink/?LinkId=229111)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-165">For information about font linking to display additional character sets, see [Globalization Step-by-Step: Fonts](https://go.microsoft.com/fwlink/?LinkId=229111).</span></span> <span data-ttu-id="8bfe0-166">リンクされたフォントは、レジストリの HKEY_LOCAL_MACHINE \SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink サブキーで定義されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-166">Linked fonts are defined in the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink subkey of the registry.</span></span> <span data-ttu-id="8bfe0-167">このサブキーに関連付けられている各エントリは、基本フォントの名前に対応します。その値は、フォントファイルと、基本フォントにリンクされているフォントを定義する文字列配列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-167">Each entry associated with this subkey corresponds to the name of a base font, and its value is a string array that defines the font files and the fonts that are linked to the base font.</span></span> <span data-ttu-id="8bfe0-168">配列の各メンバーは、リンクされたフォントを定義し、*フォントファイル名*と*フォント名*の形式をとります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-168">Each member of the array defines a linked font and takes the form *font-file-name*,*font-name*.</span></span> <span data-ttu-id="8bfe0-169">次の例では、簡略化された文字を表示する .ttc という名前のフォントファイルで、簡単に使用できるリンクされたフォントをプログラムによって定義する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-169">The following example illustrates how you can programmatically define a linked font named SimSun found in a font file named simsun.ttc that displays Simplified Han characters.</span></span>  
  
 [!code-csharp[System.Console.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/fontlink1.cs#2)]
 [!code-vb[System.Console.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/fontlink1.vb#2)]  
 [!code-fsharp[System.Console.Class#2](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.console.class/fs/fontlink1.fs#2)]
  
 <span data-ttu-id="8bfe0-170">コンソールの Unicode サポートには、次の制限があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-170">Unicode support for the console has the following limitations:</span></span>  
  
-   <span data-ttu-id="8bfe0-171">32 UTF-8 エンコードはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-171">UTF-32 encoding is not supported.</span></span> <span data-ttu-id="8bfe0-172">サポートされている Unicode エンコーディングは、UTF-8 と UTF-16 だけです。これは、それぞれ <xref:System.Text.UTF8Encoding> クラスと <xref:System.Text.UnicodeEncoding> クラスによって表されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-172">The only supported Unicode encodings are UTF-8 and UTF-16, which are represented by the <xref:System.Text.UTF8Encoding> and <xref:System.Text.UnicodeEncoding> classes, respectively.</span></span>  
  
-   <span data-ttu-id="8bfe0-173">双方向の出力はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-173">Bidirectional output is not supported.</span></span>  
  
-   <span data-ttu-id="8bfe0-174">基本多言語プレーン (サロゲートペア) 以外の文字の表示は、リンクされたフォントファイルで定義されていても、サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-174">Display of characters outside the Basic Multilingual Plane (that is, of surrogate pairs) is not supported, even if they are defined in a linked font file.</span></span>  
  
-   <span data-ttu-id="8bfe0-175">複雑なスクリプトでの文字の表示はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-175">Display of characters in complex scripts is not supported.</span></span>  
  
-   <span data-ttu-id="8bfe0-176">文字シーケンス (つまり、基本文字と1つ以上の組み合わせ文字で構成される文字) を組み合わせると、個別の文字として表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-176">Combining character sequences (that is, characters that consist of a base character and one or more combining characters) are displayed as separate characters.</span></span> <span data-ttu-id="8bfe0-177">この制限を回避するには、コンソールに出力を送信する前に、<xref:System.String.Normalize%2A?displayProperty=nameWithType> メソッドを呼び出して、表示される文字列を正規化します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-177">To work around this limitation, you can normalize the string to be displayed by calling the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method before sending output to the console.</span></span> <span data-ttu-id="8bfe0-178">次の例では、結合文字シーケンス U + 0061 U + 0308 を含む文字列が、出力文字列が正規化される前の2文字としてコンソールに表示され、<xref:System.String.Normalize%2A?displayProperty=nameWithType> メソッドが呼び出された後の1文字として表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-178">In the following example, a string that contains the combining character sequence U+0061 U+0308 is displayed to the console as two characters before the output string is normalized, and as a single character after the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method is called.</span></span>  
  
     [!code-csharp[System.Console.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/normalize1.cs#5)]
     [!code-vb[System.Console.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/normalize1.vb#5)]  
     [!code-fsharp[System.Console.Class#5](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.console.class/fs/normalize1.fs#5)]
  
     <span data-ttu-id="8bfe0-179">正規化は、文字の Unicode 標準に、特定の組み合わせ文字シーケンスに対応する事前に構成された形式が含まれている場合にのみ、実行可能な解決策になることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-179">Note that normalization is a viable solution only if the Unicode standard for the character includes a pre-composed form that corresponds to a particular combining character sequence.</span></span>  
  
-   <span data-ttu-id="8bfe0-180">フォントがプライベート使用領域のコードポイントのグリフを提供する場合、そのグリフが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-180">If a font provides a glyph for a code point in the private use area, that glyph will be displayed.</span></span> <span data-ttu-id="8bfe0-181">ただし、プライベートな使用領域の文字はアプリケーションに固有であるため、これは予期されるグリフではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-181">However, because characters in the private use area are application-specific, this may not be the expected glyph.</span></span>  
  
 <span data-ttu-id="8bfe0-182">次の例では、Unicode 文字の範囲をコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-182">The following example displays a range of Unicode characters to the console.</span></span> <span data-ttu-id="8bfe0-183">この例では、3つのコマンドラインパラメーター (表示する範囲の先頭、表示する範囲の末尾、現在のコンソールエンコード (`false`) または UTF-16 エンコーディング (`true`) を使用するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-183">The example accepts three command-line parameters: the start of the range to display, the end of the range to display, and whether to use the current console encoding (`false`) or UTF-16 encoding (`true`).</span></span> <span data-ttu-id="8bfe0-184">コンソールで TrueType フォントが使用されていることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-184">It assumes that the console is using a TrueType font.</span></span>  
  
 [!code-csharp[System.Console.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/example3.cs#4)]
 [!code-vb[System.Console.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/example3.vb#4)]  
 [!code-fsharp[System.Console.Class#4](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.console.class/fs/example3.fs#4)]
  
<a name="Operations"></a>   
## <a name="common-operations"></a><span data-ttu-id="8bfe0-185">一般的な操作</span><span class="sxs-lookup"><span data-stu-id="8bfe0-185">Common Operations</span></span>  
 <span data-ttu-id="8bfe0-186"><xref:System.Console> クラスには、コンソール入力を読み取り、コンソール出力を書き込むための次のメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-186">The <xref:System.Console> class contains the following methods for reading console input and writing console output:</span></span>  
  
-   <span data-ttu-id="8bfe0-187"><xref:System.Console.ReadKey%2A> メソッドのオーバーロードは、個々の文字を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-187">The overloads of the <xref:System.Console.ReadKey%2A> method read an individual character.</span></span>  
  
-   <span data-ttu-id="8bfe0-188"><xref:System.Console.ReadLine%2A> メソッドは、入力行全体を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-188">The <xref:System.Console.ReadLine%2A> method reads an entire line of input.</span></span>  
  
-   <span data-ttu-id="8bfe0-189"><xref:System.Console.Write%2A> メソッドのオーバーロードは、値型のインスタンス、文字の配列、または一連のオブジェクトを書式設定された文字列または書式設定されていない文字列に変換し、その文字列をコンソールに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-189">The <xref:System.Console.Write%2A> method overloads convert an instance of a value type, an array of characters, or a set of objects to a formatted or unformatted string, and then write that string to the console.</span></span>  
  
-   <span data-ttu-id="8bfe0-190"><xref:System.Console.WriteLine%2A> メソッドオーバーロードの並列セットは、<xref:System.Console.Write%2A> オーバーロードと同じ文字列を出力しますが、行終端文字列も追加します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-190">A parallel set of <xref:System.Console.WriteLine%2A> method overloads output the same string as the <xref:System.Console.Write%2A> overloads but also add a line termination string.</span></span>  
  
 <span data-ttu-id="8bfe0-191"><xref:System.Console> クラスには、次の操作を実行するためのメソッドとプロパティも含まれています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-191">The <xref:System.Console> class also contains methods and properties to perform the following operations:</span></span>  
  
-   <span data-ttu-id="8bfe0-192">画面バッファーのサイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-192">Get or set the size of the screen buffer.</span></span> <span data-ttu-id="8bfe0-193"><xref:System.Console.BufferHeight%2A> プロパティと <xref:System.Console.BufferWidth%2A> プロパティを使用すると、バッファーの高さと幅をそれぞれ取得または設定できます。 <xref:System.Console.SetBufferSize%2A> メソッドを使用すると、1回のメソッド呼び出しでバッファーサイズを設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-193">The <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties let you get or set the buffer height and width, respectively, and the <xref:System.Console.SetBufferSize%2A> method lets you set the buffer size in a single method call.</span></span>  
  
-   <span data-ttu-id="8bfe0-194">コンソールウィンドウのサイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-194">Get or set the size of the console window.</span></span> <span data-ttu-id="8bfe0-195"><xref:System.Console.WindowHeight%2A> プロパティと <xref:System.Console.WindowWidth%2A> プロパティを使用すると、ウィンドウの高さと幅をそれぞれ取得または設定できます。また、<xref:System.Console.SetWindowSize%2A> メソッドを使用すると、1回のメソッド呼び出しでウィンドウのサイズを設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-195">The <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties let you get or set the window height and width, respectively, and the <xref:System.Console.SetWindowSize%2A> method lets you set the window size in a single method call.</span></span>  
  
-   <span data-ttu-id="8bfe0-196">カーソルのサイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-196">Get or set the size of the cursor.</span></span> <span data-ttu-id="8bfe0-197"><xref:System.Console.CursorSize%2A> プロパティは、文字セル内のカーソルの高さを指定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-197">The <xref:System.Console.CursorSize%2A> property specifies the height of the cursor in a character cell.</span></span>  
  
-   <span data-ttu-id="8bfe0-198">画面バッファーに対するコンソールウィンドウの相対位置を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-198">Get or set the position of the console window relative to the screen buffer.</span></span> <span data-ttu-id="8bfe0-199"><xref:System.Console.WindowTop%2A> プロパティと <xref:System.Console.WindowLeft%2A> プロパティを使用すると、コンソールウィンドウに表示される画面バッファーの先頭行と左端の列を取得または設定できます。また、<xref:System.Console.SetWindowPosition%2A> メソッドを使用すると、これらの値を1回のメソッド呼び出しで設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-199">The <xref:System.Console.WindowTop%2A> and <xref:System.Console.WindowLeft%2A> properties let you get or set the top row and leftmost column of the screen buffer that appears in the console window, and the <xref:System.Console.SetWindowPosition%2A> method lets you set these values in a single method call.</span></span>  
  
-   <span data-ttu-id="8bfe0-200"><xref:System.Console.CursorTop%2A> および <xref:System.Console.CursorLeft%2A> プロパティを取得または設定するか、<xref:System.Console.SetCursorPosition%2A> メソッドを呼び出してカーソルの位置を設定することによって、カーソルの位置を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-200">Get or set the position of the cursor by getting or setting the <xref:System.Console.CursorTop%2A> and <xref:System.Console.CursorLeft%2A> properties, or set the position of the cursor by calling the <xref:System.Console.SetCursorPosition%2A> method.</span></span>  
  
-   <span data-ttu-id="8bfe0-201"><xref:System.Console.MoveBufferArea%2A> または <xref:System.Console.Clear%2A> メソッドを呼び出して、画面バッファー内のデータを移動またはクリアします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-201">Move or clear data in the screen buffer by calling the <xref:System.Console.MoveBufferArea%2A> or <xref:System.Console.Clear%2A> method.</span></span>  
  
-   <span data-ttu-id="8bfe0-202"><xref:System.Console.ForegroundColor%2A> と <xref:System.Console.BackgroundColor%2A> のプロパティを使用して、前景色と背景色を取得または設定します。 <xref:System.Console.ResetColor%2A> メソッドを呼び出すことによって、背景と前景の既定の色をリセットします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-202">Get or set the foreground and background colors by using the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties, or reset the background and foreground to their default colors by calling the <xref:System.Console.ResetColor%2A> method.</span></span>  
  
-   <span data-ttu-id="8bfe0-203"><xref:System.Console.Beep%2A> メソッドを呼び出して、コンソールのスピーカーからビープ音を再生します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-203">Play the sound of a beep through the console speaker by calling the <xref:System.Console.Beep%2A> method.</span></span>  
  
<a name="Core"></a>   
## <a name="net_core-notes"></a>[!INCLUDE[net_core](~/includes/net-core-md.md)] <span data-ttu-id="8bfe0-204">での注意</span><span class="sxs-lookup"><span data-stu-id="8bfe0-204">Notes</span></span>  
 <span data-ttu-id="8bfe0-205">デスクトップの .NET Framework では、<xref:System.Console> クラスは `GetConsoleCP` および `GetConsoleOutputCP`によって返されるエンコーディングを使用します。これは通常、コードページのエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-205">In the .NET Framework on the desktop, the <xref:System.Console> class uses the encoding returned by `GetConsoleCP` and `GetConsoleOutputCP`, which typically is a code page encoding.</span></span> <span data-ttu-id="8bfe0-206">コード例として、カルチャが英語 (米国) であるシステムでは、コードページ437が既定で使用されるエンコーディングです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-206">For example code, on systems whose culture is English (United States), code page 437 is the encoding that is used by default.</span></span> <span data-ttu-id="8bfe0-207">しかし、[!INCLUDE[net_core](~/includes/net-core-md.md)] では、これらのエンコードの限られたサブセットしか使用できないことがあります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-207">However, [!INCLUDE[net_core](~/includes/net-core-md.md)] may make only a limited subset of these encodings available.</span></span> <span data-ttu-id="8bfe0-208">この場合、コンソールの既定のエンコードとして <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-208">Where this is the case, <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> is used as the default encoding for the console.</span></span>  
  
 <span data-ttu-id="8bfe0-209">アプリが特定のコードページエンコーディングに依存している場合でも、<xref:System.Console> メソッドを呼び出す*前に*、次の手順を実行して使用可能にすることができます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-209">If your app depends on specific code page encodings, you can still make them available by doing the following *before* you call any <xref:System.Console> methods:</span></span>  
  
1.  <span data-ttu-id="8bfe0-210">プロジェクトに、参照を追加して、コードページ...........................</span><span class="sxs-lookup"><span data-stu-id="8bfe0-210">Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.</span></span>  
  
2.  <span data-ttu-id="8bfe0-211"><xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> プロパティから、<xref:System.Text.EncodingProvider> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-211">Retrieve the <xref:System.Text.EncodingProvider> object from the <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> property.</span></span>  
  
3.  <span data-ttu-id="8bfe0-212"><xref:System.Text.EncodingProvider> オブジェクトを <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> メソッドに渡すと、エンコーディング プロバイダーでサポートされているその他のエンコードを利用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-212">Pass the <xref:System.Text.EncodingProvider> object to the <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> method to make the additional encodings supported by the encoding provider available.</span></span>  
  
 <span data-ttu-id="8bfe0-213"><xref:System.Console> クラスは、<xref:System.Console> 出力メソッドを呼び出す前にエンコードプロバイダーを登録した場合、UTF8 ではなく既定のシステムエンコードを自動的に使用します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-213">The <xref:System.Console> class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any <xref:System.Console> output methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-214">次の例では、標準入力ストリームと出力ストリームに対してデータの読み取りと書き込みを行う方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-214">The following example demonstrates how to read data from, and write data to, the standard input and output streams.</span></span> <span data-ttu-id="8bfe0-215">これらのストリームは、<xref:System.Console.SetIn%2A> および <xref:System.Console.SetOut%2A> メソッドを使用してリダイレクトできます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-215">Note that these streams can be redirected by using the <xref:System.Console.SetIn%2A> and <xref:System.Console.SetOut%2A> methods.</span></span>  
  
 [!code-cpp[Classic Console Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Console Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Console Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Console Example/CS/source.cs#1)]
 [!code-vb[Classic Console Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Console Example/VB/source.vb#1)]  
 [!code-fsharp[Classic Console Example#1](~/samples/snippets/fsharp/VS_Snippets_CLR_Classic/classic Console Example/FS/source.fs#1)]
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="8bfe0-216">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-216">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.BackgroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BackgroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor BackgroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundColor : ConsoleColor with get, set" Usage="System.Console.BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-217">コンソールの背景色を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-217">Gets or sets the background color of the console.</span></span></summary>
        <value><span data-ttu-id="8bfe0-218">コンソールの背景色、つまり、各文字の背後に表示される色を指定する値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-218">A value that specifies the background color of the console; that is, the color that appears behind each character.</span></span> <span data-ttu-id="8bfe0-219">既定値は黒です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-219">The default is black.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-220"><xref:System.Console.BackgroundColor%2A> プロパティの変更は、背景色が変更された後に個々の文字セルに書き込まれる出力のみに影響します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-220">A change to the <xref:System.Console.BackgroundColor%2A> property affects only output that is written to individual character cells after the background color is changed.</span></span> <span data-ttu-id="8bfe0-221">コンソールウィンドウ全体の背景色を変更するには、<xref:System.Console.BackgroundColor%2A> プロパティを設定し、<xref:System.Console.Clear%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-221">To change the background color of the console window as a whole, set the <xref:System.Console.BackgroundColor%2A> property and call the <xref:System.Console.Clear%2A> method.</span></span> <span data-ttu-id="8bfe0-222">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-222">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.Console.BackgroundColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.backgroundcolor/cs/backgroundcolor1.cs#1)]
 [!code-vb[System.Console.BackgroundColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.backgroundcolor/vb/backgroundcolor1.vb#1)]  
  
 <span data-ttu-id="8bfe0-223">コンソールが存在しない Windows ベースのアプリケーションの get 操作では <xref:System.ConsoleColor.Black?displayProperty=nameWithType>が返されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-223">A get operation for a Windows-based application, in which a console does not exist, returns <xref:System.ConsoleColor.Black?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-224">次の例では、<xref:System.ConsoleColor> 列挙型の値を配列に保存し、<xref:System.Console.BackgroundColor%2A> および <xref:System.Console.ForegroundColor%2A> プロパティの現在の値を変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-224">The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and <xref:System.Console.ForegroundColor%2A> properties to variables.</span></span> <span data-ttu-id="8bfe0-225">次に、現在の背景と一致する色を除き、<xref:System.ConsoleColor> 列挙の前景色をそれぞれの色に変更し、現在の前景に一致する色以外の <xref:System.ConsoleColor> 列挙体の各色に背景色を変更します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-225">It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground.</span></span> <span data-ttu-id="8bfe0-226">(前景色が背景色と同じ場合、テキストは表示されません)。最後に、<xref:System.Console.ResetColor%2A> メソッドを呼び出して、元のコンソールの色を復元します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-226">(If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.</span></span>  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8bfe0-227">設定操作で指定された色は、<see cref="T:System.ConsoleColor" /> の有効なメンバーではありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-227">The color specified in a set operation is not a valid member of <see cref="T:System.ConsoleColor" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-228">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-228">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-229">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-229">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Beep">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8bfe0-230">コンソールのスピーカーからビープ音を出します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-230">Plays the sound of a beep through the console speaker.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberSignature Language="F#" Value="static member Beep : unit -&gt; unit" Usage="System.Console.Beep " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bfe0-231">コンソールのスピーカーからビープ音を出します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-231">Plays the sound of a beep through the console speaker.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-232">既定では、ビープ音は200ミリ秒間の800ヘルツの周波数で再生されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-232">By default, the beep plays at a frequency of 800 hertz for a duration of 200 milliseconds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8bfe0-233"><xref:System.Console.Beep%2A> 方法は、Windows Vista および Windows XP の64ビット版ではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-233">The <xref:System.Console.Beep%2A> method is not supported on the 64-bit editions of Windows Vista and Windows XP.</span></span>  
  
 <span data-ttu-id="8bfe0-234"><xref:System.Console.Beep%2A> は、Windows[ビープ音関数](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)の呼び出しをラップします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-234"><xref:System.Console.Beep%2A> wraps a call to the Windows [Beep function](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx).</span></span> <span data-ttu-id="8bfe0-235">Windows 7 より前のバージョンの Windows で <xref:System.Console.Beep%2A> が生成されるかどうかは、8254のプログラム可能な期間タイマーチップの有無によって異なります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-235">Whether <xref:System.Console.Beep%2A> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip.</span></span> <span data-ttu-id="8bfe0-236">Windows 7 以降では、既定のサウンドデバイスに依存しています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-236">Starting with Windows 7, it depends on the default sound device.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-237"><xref:System.Console.Beep%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-237">The following example demonstrates the <xref:System.Console.Beep%2A> method.</span></span> <span data-ttu-id="8bfe0-238">この例では、1 ~ 9 の数値をコマンドライン引数として受け取り、ビープ音を鳴らします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-238">The example accepts a number from 1 through 9 as a command line argument, and plays the beep that number of times.</span></span>  
  
 [!code-cpp[console.beep#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep/CPP/beep.cpp#1)]
 [!code-csharp[console.beep#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep/CS/beep.cs#1)]
 [!code-vb[console.beep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep/VB/beep.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.HostProtectionException"><span data-ttu-id="8bfe0-239">このメソッドは、SQL Server などのユーザー インターフェイスへのアクセスを許可しないサーバーで実行されました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-239">This method was executed on a server, such as SQL Server, that does not permit access to a user interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep (int frequency, int duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep(int32 frequency, int32 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep (frequency As Integer, duration As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep(int frequency, int duration);" />
      <MemberSignature Language="F#" Value="static member Beep : int * int -&gt; unit" Usage="System.Console.Beep (frequency, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frequency" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="duration" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="frequency"><span data-ttu-id="8bfe0-240">ビープ音の周波数。37 Hz から 32767 Hz の範囲で指定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-240">The frequency of the beep, ranging from 37 to 32767 hertz.</span></span></param>
        <param name="duration"><span data-ttu-id="8bfe0-241">ビープ音の再生時間。ミリ秒単位で指定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-241">The duration of the beep measured in milliseconds.</span></span></param>
        <summary><span data-ttu-id="8bfe0-242">周波数と時間を指定して、コンソールのスピーカーからビープ音を出します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-242">Plays the sound of a beep of a specified frequency and duration through the console speaker.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-243"><xref:System.Console.Beep%2A> は、Windows[ビープ音関数](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)の呼び出しをラップします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-243"><xref:System.Console.Beep%2A> wraps a call to the Windows [Beep function](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx).</span></span> <span data-ttu-id="8bfe0-244">Windows 7 より前のバージョンの Windows で <xref:System.Console.Beep%2A> が生成されるかどうかは、8254のプログラム可能な期間タイマーチップの有無によって異なります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-244">Whether <xref:System.Console.Beep%2A> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip.</span></span> <span data-ttu-id="8bfe0-245">Windows 7 以降では、既定のサウンドデバイスに依存しています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-245">Starting with Windows 7, it depends on the default sound device.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8bfe0-246"><xref:System.Console.Beep%2A> 方法は、Windows Vista および Windows XP の64ビット版ではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-246">The <xref:System.Console.Beep%2A> method is not supported on the 64-bit editions of Windows Vista and Windows XP.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-247">この例では、コンソールのスピーカーを使用して楽曲の最初のいくつかのメモを再生することによって <xref:System.Console.Beep%2A> 方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-247">This example demonstrates the <xref:System.Console.Beep%2A> method by playing the first few notes of a song through the console speaker.</span></span>  
  
 [!code-cpp[console.beep2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep2/CPP/b2.cpp#1)]
 [!code-csharp[console.beep2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep2/CS/b2.cs#1)]
 [!code-vb[console.beep2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep2/VB/b2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-248"><paramref name="frequency" /> は 37 ヘルツ未満または 32767 ヘルツを超えます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-248"><paramref name="frequency" /> is less than 37 or more than 32767 hertz.</span></span>  
  
<span data-ttu-id="8bfe0-249">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-249">-or-</span></span> 
 <span data-ttu-id="8bfe0-250"><paramref name="duration" /> が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-250"><paramref name="duration" /> is less than or equal to zero.</span></span></exception>
        <exception cref="T:System.Security.HostProtectionException"><span data-ttu-id="8bfe0-251">このメソッドは、SQL Server などのコンソールへのアクセスを許可しないサーバーで実行されました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-251">This method was executed on a server, such as SQL Server, that does not permit access to the console.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-252">現在のオペレーティング システムは Windows ではありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-252">The current operating system is not Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BufferHeight">
      <MemberSignature Language="C#" Value="public static int BufferHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BufferHeight : int with get, set" Usage="System.Console.BufferHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-253">バッファー領域の高さを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-253">Gets or sets the height of the buffer area.</span></span></summary>
        <value><span data-ttu-id="8bfe0-254">バッファー領域の現在の高さを示す行数。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-254">The current height, in rows, of the buffer area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-255">このプロパティは、コンソールモードウィンドウによってアクセスされるバッファーに格納される行 (または行) の数を定義します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-255">This property defines the number of rows (or lines) stored in the buffer that is accessed by a console mode window.</span></span> <span data-ttu-id="8bfe0-256">これに対し、<xref:System.Console.WindowHeight%2A> プロパティは、特定の時刻にコンソールウィンドウに実際に表示される行の数を定義します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-256">In contrast, the <xref:System.Console.WindowHeight%2A> property defines the number of rows that are actually displayed in the console window at any particular time.</span></span> <span data-ttu-id="8bfe0-257">バッファーに実際に書き込まれた行の数が <xref:System.Console.WindowHeight%2A> プロパティによって定義された行の数を超えている場合は、ウィンドウを垂直方向にスクロールして、<xref:System.Console.WindowHeight%2A> プロパティと同じ連続した数の行を表示し、バッファー内の任意の場所に配置することができます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-257">If the number of rows actually written to the buffer exceeds the number of rows defined by the <xref:System.Console.WindowHeight%2A> property, the window can be scrolled vertically so that it displays a contiguous number of rows that are equal to the <xref:System.Console.WindowHeight%2A> property and are located anywhere in the buffer.</span></span>  
  
 <span data-ttu-id="8bfe0-258">設定操作によって <xref:System.Console.BufferHeight%2A> プロパティの値が減少した場合は、一番上の行が削除されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-258">If a set operation decreases the value of the <xref:System.Console.BufferHeight%2A> property, the uppermost lines are removed.</span></span> <span data-ttu-id="8bfe0-259">たとえば、行の数が300から250に短縮されると、行 0 ~ 49 が削除され、50から299の既存の行が行0から249になります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-259">For example, if the number of lines is reduced from 300 to 250, lines 0 through 49 are removed, and the existing lines 50 through 299 become lines 0 through 249.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-260">この例では、<xref:System.Console.BufferHeight%2A> プロパティと <xref:System.Console.BufferWidth%2A> プロパティを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-260">This example demonstrates the <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties.</span></span> <span data-ttu-id="8bfe0-261">この例では、オペレーティングシステムウィンドウのサイズが300行と85列のバッファーサイズに設定されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-261">The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.</span></span>  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-262">セット操作の値が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-262">The value in a set operation is less than or equal to zero.</span></span>  
  
<span data-ttu-id="8bfe0-263">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-263">-or-</span></span> 
<span data-ttu-id="8bfe0-264">セット操作の値が <see cref="F:System.Int16.MaxValue" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-264">The value in a set operation is greater than or equal to <see cref="F:System.Int16.MaxValue" />.</span></span>  
  
<span data-ttu-id="8bfe0-265">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-265">-or-</span></span> 
<span data-ttu-id="8bfe0-266">セット操作の値が <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" /> 未満です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-266">The value in a set operation is less than <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-267">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-267">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-268">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-268">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-269">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-269">The set operation is invoked on an operating system other than Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BufferWidth">
      <MemberSignature Language="C#" Value="public static int BufferWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BufferWidth : int with get, set" Usage="System.Console.BufferWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-270">バッファー領域の幅を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-270">Gets or sets the width of the buffer area.</span></span></summary>
        <value><span data-ttu-id="8bfe0-271">バッファー領域の現在の幅を示す列数。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-271">The current width, in columns, of the buffer area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-272">設定操作によって <xref:System.Console.BufferWidth%2A> プロパティの値が減少すると、右端の列が削除されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-272">If a set operation decreases the value of the <xref:System.Console.BufferWidth%2A> property, the rightmost columns are removed.</span></span> <span data-ttu-id="8bfe0-273">たとえば、列の数が80から60に縮小されると、各行の 60 ~ 79 列が削除されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-273">For example, if the number of columns is reduced from 80 to 60, columns 60 through 79 of each row are removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-274">この例では、<xref:System.Console.BufferHeight%2A> プロパティと <xref:System.Console.BufferWidth%2A> プロパティを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-274">This example demonstrates the <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties.</span></span> <span data-ttu-id="8bfe0-275">この例では、オペレーティングシステムウィンドウのサイズが300行と85列のバッファーサイズに設定されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-275">The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.</span></span>  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-276">セット操作の値が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-276">The value in a set operation is less than or equal to zero.</span></span>  
  
<span data-ttu-id="8bfe0-277">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-277">-or-</span></span> 
<span data-ttu-id="8bfe0-278">セット操作の値が <see cref="F:System.Int16.MaxValue" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-278">The value in a set operation is greater than or equal to <see cref="F:System.Int16.MaxValue" />.</span></span>  
  
<span data-ttu-id="8bfe0-279">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-279">-or-</span></span> 
<span data-ttu-id="8bfe0-280">セット操作の値が <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" /> 未満です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-280">The value in a set operation is less than <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-281">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-281">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-282">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-282">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-283">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-283">The set operation is invoked on an operating system other than Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CancelKeyPress">
      <MemberSignature Language="C#" Value="public static event ConsoleCancelEventHandler CancelKeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ConsoleCancelEventHandler CancelKeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Console.CancelKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event CancelKeyPress As ConsoleCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event ConsoleCancelEventHandler ^ CancelKeyPress;" />
      <MemberSignature Language="F#" Value="member this.CancelKeyPress : ConsoleCancelEventHandler " Usage="member this.CancelKeyPress : System.ConsoleCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-284"><see cref="F:System.ConsoleModifiers.Control" /> の修飾子キー (Ctrl) と <see cref="F:System.ConsoleKey.C" /> コンソール キー (c) または中断キーが同時にプッシュされた場合 (Ctrl + C または Ctrl + Break) に発生します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-284">Occurs when the <see cref="F:System.ConsoleModifiers.Control" /> modifier key (Ctrl) and either the <see cref="F:System.ConsoleKey.C" /> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-285">このイベントは、<xref:System.ConsoleCancelEventHandler?displayProperty=nameWithType> と <xref:System.ConsoleCancelEventArgs?displayProperty=nameWithType>と組み合わせて使用されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-285">This event is used in conjunction with <xref:System.ConsoleCancelEventHandler?displayProperty=nameWithType> and <xref:System.ConsoleCancelEventArgs?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8bfe0-286"><xref:System.Console.CancelKeyPress> イベントを使用すると、コンソールアプリケーションは Ctrl + C 信号を受け取ることができるため、イベントハンドラーは実行を続行するか終了するかを決定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-286">The <xref:System.Console.CancelKeyPress> event enables a console application to intercept the Ctrl+C signal so the event handler can decide whether to continue executing or terminate.</span></span> <span data-ttu-id="8bfe0-287">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-287">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="8bfe0-288">ユーザーが Ctrl + C キーまたは Ctrl + Break キーを押すと、<xref:System.Console.CancelKeyPress> イベントが発生し、アプリケーションの <xref:System.ConsoleCancelEventHandler> イベントハンドラーが実行されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-288">When the user presses either Ctrl+C or Ctrl+Break, the <xref:System.Console.CancelKeyPress> event is fired and the application's <xref:System.ConsoleCancelEventHandler> event handler is executed.</span></span> <span data-ttu-id="8bfe0-289">イベントハンドラーには、次の2つの便利なプロパティを持つ <xref:System.ConsoleCancelEventArgs> オブジェクトが渡されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-289">The event handler is passed a <xref:System.ConsoleCancelEventArgs> object that has two useful properties:</span></span>  
  
-   <span data-ttu-id="8bfe0-290"><xref:System.ConsoleCancelEventArgs.SpecialKey%2A>を使用すると、ユーザーが Ctrl + C キーを押した結果としてハンドラーが呼び出されたかどうか (プロパティ値は <xref:System.ConsoleSpecialKey.ControlC?displayProperty=nameWithType>) または Ctrl + Break (プロパティ値は <xref:System.ConsoleSpecialKey.ControlBreak?displayProperty=nameWithType>) を確認できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-290"><xref:System.ConsoleCancelEventArgs.SpecialKey%2A>, which allows you to determine whether the handler was invoked as a result of the user pressing Ctrl+C (the property value is <xref:System.ConsoleSpecialKey.ControlC?displayProperty=nameWithType>) or Ctrl+Break (the property value is <xref:System.ConsoleSpecialKey.ControlBreak?displayProperty=nameWithType>).</span></span>  
  
-   <span data-ttu-id="8bfe0-291"><xref:System.ConsoleCancelEventArgs.Cancel%2A>。これにより、Ctrl + C または Ctrl + Break キーを押してアプリケーションがユーザーに応答する方法を決定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-291"><xref:System.ConsoleCancelEventArgs.Cancel%2A>, which allows you to determine how your application should respond to the user pressing Ctrl+C or Ctrl+Break.</span></span> <span data-ttu-id="8bfe0-292">既定では、<xref:System.ConsoleCancelEventArgs.Cancel%2A> プロパティは `false`であり、これにより、イベントハンドラーが終了したときにプログラムの実行が終了します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-292">By default, the <xref:System.ConsoleCancelEventArgs.Cancel%2A> property is `false`, which causes program execution to terminate when the event handler exits.</span></span> <span data-ttu-id="8bfe0-293">プロパティを `true` に変更すると、アプリケーションの実行を継続する必要があることが指定されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-293">Changing its property to `true` specifies that the application should continue to execute.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="8bfe0-294">アプリケーションに単純な要件がある場合は、このイベントの代わりに <xref:System.Console.TreatControlCAsInput%2A> プロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-294">If your application has simple requirements, you can use the <xref:System.Console.TreatControlCAsInput%2A> property instead of this event.</span></span> <span data-ttu-id="8bfe0-295">このプロパティを `false`に設定すると、ユーザーが Ctrl + C キーを押した場合にアプリケーションが常に終了するように設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-295">By setting this property to `false`, you can ensure that your application always exits if the user presses Ctrl+C.</span></span> <span data-ttu-id="8bfe0-296">`true`に設定することにより、Ctrl + C キーを押してもアプリケーションが終了しないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-296">By setting it to `true`, you can ensure that pressing Ctrl+C will not terminate the application.</span></span>  
  
 <span data-ttu-id="8bfe0-297">このイベントのイベントハンドラーは、スレッドプールのスレッドで実行されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-297">The event handler for this event is executed on a thread pool thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-298">次の例は、<xref:System.Console.CancelKeyPress> イベントの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-298">The following example demonstrates how the <xref:System.Console.CancelKeyPress> event is used.</span></span> <span data-ttu-id="8bfe0-299">Ctrl + C キーを押すと、読み取り操作が中断され、`myHandler` イベントハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-299">When you press Ctrl+C, the read operation is interrupted and the `myHandler` event handler is invoked.</span></span> <span data-ttu-id="8bfe0-300">イベントハンドラーへの入力時には、<xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType> プロパティが `false`ます。これは、イベントハンドラーが終了したときに現在のプロセスが終了することを意味します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-300">Upon entry to the event handler, the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType> property is `false`, which means that the current process will terminate when the event handler terminates.</span></span> <span data-ttu-id="8bfe0-301">ただし、イベントハンドラーは、<xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType> プロパティを `true`に設定します。これは、プロセスが終了せず、読み取り操作が再開されることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-301">However, the event handler sets the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType> property to `true`, which means that the process will not terminate and the read operation will resume.</span></span>  
  
 [!code-cpp[console.cancelkeypress#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cancelkeypress/cpp/ckp.cpp#1)]
 [!code-csharp[console.cancelkeypress#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cancelkeypress/cs/ckp.cs#1)]
 [!code-vb[console.cancelkeypress#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cancelkeypress/vb/ckp.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ConsoleCancelEventArgs" />
        <altmember cref="T:System.ConsoleCancelEventHandler" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public static bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CapsLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CapsLock : bool" Usage="System.Console.CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-302">CapsLock がオンかオフかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-302">Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.</span></span></summary>
        <value><span data-ttu-id="8bfe0-303">CapsLock がオンの場合は <see langword="true" />、CapsLock がオフの場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-303"><see langword="true" /> if CAPS LOCK is turned on; <see langword="false" /> if CAPS LOCK is turned off.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-304">取得操作は Windows 以外のオペレーティング システムで呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-304">The get operation is invoked on an operating system other than Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Clear();" />
      <MemberSignature Language="F#" Value="static member Clear : unit -&gt; unit" Usage="System.Console.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bfe0-305">コンソール バッファーおよび対応するコンソール ウィンドウをクリアします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-305">Clears the console buffer and corresponding console window of display information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-306"><xref:System.Console.Clear%2A> メソッドを使用することは、コマンドプロンプトウィンドウで MS-DOS `cls` コマンドを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-306">Using the <xref:System.Console.Clear%2A> method is equivalent invoking the MS-DOS `cls` command in the command prompt window.</span></span> <span data-ttu-id="8bfe0-307"><xref:System.Console.Clear%2A> メソッドが呼び出されると、カーソルはウィンドウの左上隅に自動的にスクロールし、現在の前景色を使用して画面バッファーの内容が空白に設定されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-307">When the <xref:System.Console.Clear%2A> method is called, the cursor automatically scrolls to the top-left corner of the window and the contents of the screen buffer are set to blanks using the current foreground background colors.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8bfe0-308">コンソールアプリケーションの出力がファイルにリダイレクトされるときに <xref:System.Console.Clear%2A> メソッドを呼び出そうとすると、<xref:System.IO.IOException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-308">Attempting to call the <xref:System.Console.Clear%2A> method when a console application's output is redirected to a file throws a <xref:System.IO.IOException>.</span></span> <span data-ttu-id="8bfe0-309">これを回避するには、常に `try`...`catch` の <xref:System.Console.Clear%2A> メソッドの呼び出しをラップします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-309">To prevent this, always wrap a call to the <xref:System.Console.Clear%2A> method in a `try`…`catch`</span></span> <span data-ttu-id="8bfe0-310">ブロックです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-310">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-311">次の例では、<xref:System.Console.Clear%2A> メソッドを使用して、ループを実行する前にコンソールをクリアし、前景色と背景色を選択して、表示する文字列を入力するようにユーザーに求めます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-311">The following example uses the <xref:System.Console.Clear%2A> method to clear the console before it executes a loop, prompts the user to select a foreground and background color and to enter a string to display.</span></span> <span data-ttu-id="8bfe0-312">ユーザーがプログラムを終了しないことを選択した場合は、コンソールの元の前景色と背景色が復元され、ループを再実行する前に <xref:System.Console.Clear%2A> メソッドが再度呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-312">If the user chooses not to exit the program, the console's original foreground and background colors are restored and the <xref:System.Console.Clear%2A> method is called again before re-executing the loop.</span></span>  
  
 [!code-csharp[System.Console.Clear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.clear/cs/clear1.cs#1)]
 [!code-vb[System.Console.Clear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.clear/vb/clear1.vb#1)]  
  
 <span data-ttu-id="8bfe0-313">この例では、`GetKeyPress` メソッドを使用して、ユーザーによる前景色と背景色の選択を検証します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-313">The example relies on a `GetKeyPress` method to validate the user's selection of a foreground and background color.</span></span>  
  
 <span data-ttu-id="8bfe0-314">この例では、<xref:System.Console.CursorLeft%2A> と <xref:System.Console.CursorTop%2A> のプロパティ、および <xref:System.Console.SetCursorPosition%2A> および <xref:System.Console.Clear%2A> メソッドを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-314">This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods.</span></span> <span data-ttu-id="8bfe0-315">この例では、カーソルを移動し、次の書き込みが行われる場所を決定します。これにより、"+"、"&#124;"、および "-" の文字列を組み合わせて、5文字の四角形で5文字を描画します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-315">The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "&#124;", and "-" strings.</span></span> <span data-ttu-id="8bfe0-316">四角形は、他の文字列の組み合わせを使用して、より少数の手順で描画できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-316">Note that the rectangle could be drawn with fewer steps using a combination of other strings.</span></span>  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-317">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-317">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CursorLeft">
      <MemberSignature Language="C#" Value="public static int CursorLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorLeft : int with get, set" Usage="System.Console.CursorLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-318">バッファー領域におけるカーソルの列位置を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-318">Gets or sets the column position of the cursor within the buffer area.</span></span></summary>
        <value><span data-ttu-id="8bfe0-319">カーソルの現在位置 (列)。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-319">The current position, in columns, of the cursor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8bfe0-320">この例では、<xref:System.Console.CursorLeft%2A> と <xref:System.Console.CursorTop%2A> のプロパティ、および <xref:System.Console.SetCursorPosition%2A> および <xref:System.Console.Clear%2A> メソッドを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-320">This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods.</span></span> <span data-ttu-id="8bfe0-321">この例では、カーソルを移動し、次の書き込みが行われる場所を決定します。これにより、"+"、"&#124;"、および "-" の文字列を組み合わせて、5文字の四角形で5文字を描画します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-321">The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "&#124;", and "-" strings.</span></span> <span data-ttu-id="8bfe0-322">四角形は、他の文字列の組み合わせを使用して、より少数の手順で描画できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-322">Note that the rectangle could be drawn with fewer steps using a combination of other strings.</span></span>  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-323">設定操作の値が 0 より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-323">The value in a set operation is less than zero.</span></span>  
  
<span data-ttu-id="8bfe0-324">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-324">-or-</span></span> 
<span data-ttu-id="8bfe0-325">セット操作の値が <see cref="P:System.Console.BufferWidth" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-325">The value in a set operation is greater than or equal to <see cref="P:System.Console.BufferWidth" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-326">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-326">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-327">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-327">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CursorSize">
      <MemberSignature Language="C#" Value="public static int CursorSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorSize" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorSize : int with get, set" Usage="System.Console.CursorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-328">文字セル内のカーソルの高さを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-328">Gets or sets the height of the cursor within a character cell.</span></span></summary>
        <value><span data-ttu-id="8bfe0-329">文字セルの高さに対する割合で表されたカーソルのサイズ。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-329">The size of the cursor expressed as a percentage of the height of a character cell.</span></span> <span data-ttu-id="8bfe0-330">プロパティ値の範囲は、1 ～ 100 です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-330">The property value ranges from 1 to 100.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-331">カーソルの外観は、プロパティ値が1の場合にセルの下部にある水平線から、プロパティ値が100のときにセルを完全に埋めるように変化します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-331">The cursor appearance varies, ranging from a horizontal line at the bottom of the cell when the property value is 1, to completely filling the cell when the property value is 100.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-332">この例では、<xref:System.Console.CursorSize%2A> プロパティを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-332">This example demonstrates the <xref:System.Console.CursorSize%2A> property.</span></span> <span data-ttu-id="8bfe0-333">この例では、コンソールキーが押されるたびにカーソルのサイズを増やし、終了する前にカーソルを元のサイズに戻します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-333">The example increases the size of the cursor each time any console key is pressed, then restores the cursor to its original size before terminating.</span></span>  
  
 [!code-cpp[console.cursorsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorsize/CPP/csize.cpp#1)]
 [!code-csharp[console.cursorsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorsize/CS/csize.cs#1)]
 [!code-vb[console.cursorsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorsize/VB/csize.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-334">設定操作で指定された値は、1 より小さい値か、100 より大きい値になります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-334">The value specified in a set operation is less than 1 or greater than 100.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-335">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-335">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-336">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-336">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-337">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-337">The set operation is invoked on an operating system other than Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CursorTop">
      <MemberSignature Language="C#" Value="public static int CursorTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorTop : int with get, set" Usage="System.Console.CursorTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-338">バッファー領域におけるカーソルの行位置を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-338">Gets or sets the row position of the cursor within the buffer area.</span></span></summary>
        <value><span data-ttu-id="8bfe0-339">カーソルの現在位置 (行)。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-339">The current position, in rows, of the cursor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8bfe0-340">この例では、<xref:System.Console.CursorLeft%2A> と <xref:System.Console.CursorTop%2A> のプロパティ、および <xref:System.Console.SetCursorPosition%2A> および <xref:System.Console.Clear%2A> メソッドを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-340">This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods.</span></span> <span data-ttu-id="8bfe0-341">この例では、カーソルを移動し、次の書き込みが行われる場所を決定します。これにより、"+"、"&#124;"、および "-" の文字列を組み合わせて、5文字の四角形で5文字を描画します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-341">The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "&#124;", and "-" strings.</span></span> <span data-ttu-id="8bfe0-342">四角形は、他の文字列の組み合わせを使用して、より少数の手順で描画できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-342">Note that the rectangle could be drawn with fewer steps using a combination of other strings.</span></span>  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-343">設定操作の値が 0 より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-343">The value in a set operation is less than zero.</span></span>  
  
<span data-ttu-id="8bfe0-344">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-344">-or-</span></span> 
<span data-ttu-id="8bfe0-345">セット操作の値が <see cref="P:System.Console.BufferHeight" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-345">The value in a set operation is greater than or equal to <see cref="P:System.Console.BufferHeight" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-346">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-346">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-347">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-347">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CursorVisible">
      <MemberSignature Language="C#" Value="public static bool CursorVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CursorVisible" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorVisible" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CursorVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CursorVisible : bool with get, set" Usage="System.Console.CursorVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-348">カーソルを表示するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-348">Gets or sets a value indicating whether the cursor is visible.</span></span></summary>
        <value><span data-ttu-id="8bfe0-349">カーソルを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-349"><see langword="true" /> if the cursor is visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8bfe0-350">この例では、<xref:System.Console.CursorVisible%2A> プロパティを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-350">This example demonstrates the <xref:System.Console.CursorVisible%2A> property.</span></span> <span data-ttu-id="8bfe0-351">この例では、入力の最初の列が ' + ' 文字の場合はカーソルが表示され、入力が '-' 文字の場合は非表示になります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-351">The example makes the cursor visible if the first column of input is a '+' character or invisible if the input is a '-' character.</span></span>  
  
 [!code-cpp[console.cursorvis#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorvis/CPP/vis.cpp#1)]
 [!code-csharp[console.cursorvis#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorvis/CS/vis.cs#1)]
 [!code-vb[console.cursorvis#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorvis/VB/vis.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-352">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-352">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-353">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-353">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-354">取得操作は Windows 以外のオペレーティング システムで呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-354">The get operation is invoked on an operating system other than Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Error" />
      <MemberSignature Language="DocId" Value="P:System.Console.Error" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Error As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Error { System::IO::TextWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Error : System.IO.TextWriter" Usage="System.Console.Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-355">標準エラー出力ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-355">Gets the standard error output stream.</span></span></summary>
        <value><span data-ttu-id="8bfe0-356">標準エラー出力ストリームを表す <see cref="T:System.IO.TextWriter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-356">A <see cref="T:System.IO.TextWriter" /> that represents the standard error output stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-357">既定では、この標準エラーストリームはコンソールに設定されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-357">This standard error stream is set to the console by default.</span></span> <span data-ttu-id="8bfe0-358"><xref:System.Console.SetError%2A> メソッドを使用して、別のストリームに設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-358">It can be set to another stream with the <xref:System.Console.SetError%2A> method.</span></span> <span data-ttu-id="8bfe0-359">標準エラーストリームがリダイレクトされたら、<xref:System.Console.OpenStandardError%2A> メソッドを呼び出すことによって再獲得できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-359">After the standard error stream is redirected, it can be reacquired by calling the <xref:System.Console.OpenStandardError%2A> method.</span></span>  
  
 <span data-ttu-id="8bfe0-360">多くの場合、情報出力がファイルにリダイレクトされるコンソールアプリケーションでは、出力がリダイレクトされる場合でも、<xref:System.Console.Error%2A> プロパティを介して使用できる標準エラーストリームを使用して、コンソールに情報を表示できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-360">In console applications whose informational output is often redirected to a file, the standard error stream available through the <xref:System.Console.Error%2A> property can be used to display information to the console even if output is redirected.</span></span> <span data-ttu-id="8bfe0-361">次の例では、1から始まる10個の数値の製品テーブルを表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-361">The following example displays product tables for 10 numbers at a time starting with 1.</span></span> <span data-ttu-id="8bfe0-362">10個の数値の各セットの後に、<xref:System.Console.Error%2A> プロパティを使用して、次のセットを表示するかどうかをユーザーに要求します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-362">After every set of 10 numbers, the <xref:System.Console.Error%2A> property is used to ask the user whether to display the next set.</span></span> <span data-ttu-id="8bfe0-363">標準出力がファイルにリダイレクトされた場合でも、ルーチンが次の製品セットを生成するかどうかを確認するメッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-363">If the standard output is redirected to a file, the user is still asked whether the routine should generate the next set of products.</span></span>  
  
 [!code-csharp[System.Console.Error#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.error/cs/error1.cs#1)]
 [!code-vb[System.Console.Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.error/vb/error1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-364">次の例は、ExpandTabs という名前のコマンドラインユーティリティで、テキストファイル内のタブ文字が、`tabSize` 変数によって定義された値である4つのスペースに置き換えられています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-364">The following example is a command line utility named ExpandTabs that replaces tab characters in a text file with four spaces, the value defined by the `tabSize` variable.</span></span> <span data-ttu-id="8bfe0-365">標準の入力ストリームと出力ストリームをファイルにリダイレクトしますが、<xref:System.Console.Error%2A> プロパティを使用して、標準エラーストリームをコンソールに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-365">It redirects the standard input and output streams to files, but uses the <xref:System.Console.Error%2A> property to write the standard error stream to the console.</span></span> <span data-ttu-id="8bfe0-366">タブ文字を含むファイルの名前と出力ファイルの名前を指定することで、コマンドラインから起動できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-366">It can be launched from the command line by supplying the name of the file that contains tab characters and the name of the output file.</span></span>  
  
 [!code-cpp[Console-EXPANDTABSEX#1](~/samples/snippets/cpp/VS_Snippets_CLR/Console-EXPANDTABSEX/CPP/expandtabsex.cpp#1)]
 [!code-csharp[Console-EXPANDTABSEX#1](~/samples/snippets/csharp/VS_Snippets_CLR/Console-EXPANDTABSEX/CS/expandtabsex.cs#1)]
 [!code-vb[Console-EXPANDTABSEX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Console-EXPANDTABSEX/VB/expandtabsex.vb#1)]  
  
 <span data-ttu-id="8bfe0-367">次の例は、コンソールに1つ以上のテキストファイルの内容を表示する単純なテキストファイルビューアーです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-367">The following example is a simple text file viewer that displays the contents of one or more text files to the console.</span></span> <span data-ttu-id="8bfe0-368">コマンドライン引数がない場合、またはコマンドライン引数として渡されたファイルが存在しない場合、この例では <xref:System.Console.SetError%2A> メソッドを呼び出して、エラー情報をファイルにリダイレクトし、標準エラーストリームを reacquiring するプロセスで <xref:System.Console.OpenStandardError%2A> メソッドを呼び出し、エラー情報がファイルに書き込まれたことを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-368">If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the <xref:System.Console.OpenStandardError%2A> method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.</span></span>  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 <span data-ttu-id="8bfe0-369">エラーストリームを reacquiring する前に、<xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> プロパティが `true` に設定されていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-369">Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> property is set to `true` before reacquiring the error stream.</span></span> <span data-ttu-id="8bfe0-370">これにより、バッファーではなく、直ちに出力がコンソールに送信されるようになります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-370">This ensures that output will be sent to the console immediately rather than buffered.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ForegroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor ForegroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor ForegroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.ForegroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ForegroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor ForegroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberSignature Language="F#" Value="member this.ForegroundColor : ConsoleColor with get, set" Usage="System.Console.ForegroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-371">コンソールの前景色を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-371">Gets or sets the foreground color of the console.</span></span></summary>
        <value><span data-ttu-id="8bfe0-372">コンソールの前景色、つまり、表示される各文字の色を指定する <see cref="T:System.ConsoleColor" />。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-372">A <see cref="T:System.ConsoleColor" /> that specifies the foreground color of the console; that is, the color of each character that is displayed.</span></span> <span data-ttu-id="8bfe0-373">既定値は灰色です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-373">The default is gray.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-374">コンソールが存在しない Windows ベースのアプリケーションの get 操作では <xref:System.ConsoleColor.Gray>が返されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-374">A get operation for a Windows-based application, in which a console does not exist, returns <xref:System.ConsoleColor.Gray>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-375">次の例では、コンソールの背景色が黒であるかどうかを確認し、存在する場合は背景色を赤に、前景色を黒に変更します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-375">The following example checks whether the console's background color is black and, if it is, it changes the background color to red and the foreground color to black.</span></span>  
  
 [!code-csharp[System.ConsoleColor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/Example2.cs#2)] 
 [!code-vb[System.ConsoleColor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/Example2.vb#2)]  
  
 <span data-ttu-id="8bfe0-376">次の例では、<xref:System.ConsoleColor> 列挙型の値を配列に保存し、<xref:System.Console.BackgroundColor%2A> および <xref:System.Console.ForegroundColor%2A> プロパティの現在の値を変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-376">The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and <xref:System.Console.ForegroundColor%2A> properties to variables.</span></span> <span data-ttu-id="8bfe0-377">次に、現在の背景と一致する色を除き、<xref:System.ConsoleColor> 列挙の前景色をそれぞれの色に変更し、現在の前景に一致する色以外の <xref:System.ConsoleColor> 列挙体の各色に背景色を変更します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-377">It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground.</span></span> <span data-ttu-id="8bfe0-378">(前景色が背景色と同じ場合、テキストは表示されません)。最後に、<xref:System.Console.ResetColor%2A> メソッドを呼び出して、元のコンソールの色を復元します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-378">(If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.</span></span>  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8bfe0-379">設定操作で指定された色は、<see cref="T:System.ConsoleColor" /> の有効なメンバーではありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-379">The color specified in a set operation is not a valid member of <see cref="T:System.ConsoleColor" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-380">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-380">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-381">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-381">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public static System.IO.TextReader In { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextReader In" />
      <MemberSignature Language="DocId" Value="P:System.Console.In" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property In As TextReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextReader ^ In { System::IO::TextReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.In : System.IO.TextReader" Usage="System.Console.In" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-382">標準入力ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-382">Gets the standard input stream.</span></span></summary>
        <value><span data-ttu-id="8bfe0-383">標準入力ストリームを表す <see cref="T:System.IO.TextReader" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-383">A <see cref="T:System.IO.TextReader" /> that represents the standard input stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-384">このプロパティは、既定で標準入力ストリームに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-384">This property is set to the standard input stream by default.</span></span> <span data-ttu-id="8bfe0-385">このプロパティは、<xref:System.Console.SetIn%2A> メソッドを使用して別のストリームに設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-385">This property can be set to another stream with the <xref:System.Console.SetIn%2A> method.</span></span>  
  
 <span data-ttu-id="8bfe0-386">標準入力ストリームに対する読み取り操作は、同期的に実行されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-386">Read operations on the standard input stream execute synchronously.</span></span> <span data-ttu-id="8bfe0-387">つまり、指定した読み取り操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-387">That is, they block until the specified read operation has completed.</span></span> <span data-ttu-id="8bfe0-388">これは、<xref:System.IO.TextReader.ReadLineAsync%2A>などの非同期メソッドが、<xref:System.Console.In%2A> プロパティによって返される <xref:System.IO.TextReader> オブジェクトで呼び出された場合にも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-388">This is true even if an asynchronous method, such as <xref:System.IO.TextReader.ReadLineAsync%2A>, is called on the <xref:System.IO.TextReader> object returned by the <xref:System.Console.In%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-389">次の例は、`In` プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-389">The following sample illustrates the use of the `In` property.</span></span>  
  
 [!code-cpp[consolein#1](~/samples/snippets/cpp/VS_Snippets_CLR/consolein/CPP/consolein.cpp#1)]
 [!code-csharp[consolein#1](~/samples/snippets/csharp/VS_Snippets_CLR/consolein/CS/consolein.cs#1)]
 [!code-vb[consolein#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/consolein/VB/consolein.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Console.OpenStandardInput" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="InputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding InputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding InputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.InputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property InputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ InputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputEncoding : System.Text.Encoding with get, set" Usage="System.Console.InputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-390">コンソールが入力内容の読み取り時に使用するエンコーディングを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-390">Gets or sets the encoding the console uses to read input.</span></span></summary>
        <value><span data-ttu-id="8bfe0-391">コンソールが入力内容の読み取りに使用するエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-391">The encoding used to read console input.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-392">コンソールは入力エンコーディングを使用して、キーボード入力を対応する文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-392">The console uses the input encoding to translate keyboard input into a corresponding character.</span></span> <span data-ttu-id="8bfe0-393">入力エンコードには、256のキーボード文字コードを個々の文字にマップするコードページが組み込まれています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-393">The input encoding incorporates a code page that maps 256 keyboard character codes to individual characters.</span></span> <span data-ttu-id="8bfe0-394">異なるコード ページには異なる特殊文字が含まれ、それらは通常は 1 つの言語または言語グループ用にカスタマイズされています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-394">Different code pages include different special characters, typically customized for a language or a group of languages.</span></span>  
  
 <span data-ttu-id="8bfe0-395">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、プロパティの取得操作によって、コンソールの現在の入力エンコーディングではなく、キャッシュされた値が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-395">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], a property get operation may return a cached value instead of the console's current input encoding.</span></span> <span data-ttu-id="8bfe0-396">これは、<xref:System.Console.InputEncoding%2A> プロパティの値が、<xref:System.Console.InputEncoding%2A> プロパティへの割り当て以外の何らかの方法で変更された場合に発生する可能性があります。たとえば、Windows `SetConsoleCP` 関数を呼び出したり、PowerShell スクリプトから `chcp` コマンドを使用したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-396">This can occur if the value of the <xref:System.Console.InputEncoding%2A> property is modified by some means other than an assignment to the <xref:System.Console.InputEncoding%2A> property, such as calling the Windows `SetConsoleCP` function or using the `chcp` command from a PowerShell script.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-397">設定操作でのプロパティ値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-397">The property value in a set operation is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-398">この操作の実行中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-398">An error occurred during the execution of this operation.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-399">アプリケーションに、この操作を実行するための権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-399">Your application does not have permission to perform this operation.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="IsErrorRedirected">
      <MemberSignature Language="C#" Value="public static bool IsErrorRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsErrorRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsErrorRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsErrorRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsErrorRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsErrorRedirected : bool" Usage="System.Console.IsErrorRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-400">エラー出力ストリームが標準エラー ストリームからリダイレクトされているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-400">Gets a value that indicates whether the error output stream has been redirected from the standard error stream.</span></span></summary>
        <value><span data-ttu-id="8bfe0-401">エラー出力がリダイレクトされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-401"><see langword="true" /> if error output is redirected; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="IsInputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsInputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsInputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsInputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsInputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsInputRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputRedirected : bool" Usage="System.Console.IsInputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-402">入力が標準入力ストリームからリダイレクトされているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-402">Gets a value that indicates whether input has been redirected from the standard input stream.</span></span></summary>
        <value><span data-ttu-id="8bfe0-403">入力がリダイレクトされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-403"><see langword="true" /> if input is redirected; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
        <altmember cref="M:System.Console.OpenStandardInput" />
      </Docs>
    </Member>
    <Member MemberName="IsOutputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsOutputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsOutputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsOutputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsOutputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsOutputRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutputRedirected : bool" Usage="System.Console.IsOutputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-404">出力が標準出力ストリームからリダイレクトされているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-404">Gets a value that indicates whether output has been redirected from the standard output stream.</span></span></summary>
        <value><span data-ttu-id="8bfe0-405">出力がリダイレクトされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-405"><see langword="true" /> if output is redirected; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="KeyAvailable">
      <MemberSignature Language="C#" Value="public static bool KeyAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool KeyAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Console.KeyAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property KeyAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool KeyAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyAvailable : bool" Usage="System.Console.KeyAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-406">キーが押されたかどうか、つまり、押されたキーが入力ストリームに存在するかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-406">Gets a value indicating whether a key press is available in the input stream.</span></span></summary>
        <value><span data-ttu-id="8bfe0-407">押されたキーが入力ストリームに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-407"><see langword="true" /> if a key press is available; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-408">プロパティ値は直ちに返されます。つまり、<xref:System.Console.KeyAvailable%2A> プロパティは、キー押下が使用可能になるまで入力をブロックしません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-408">The property value is returned immediately; that is, the <xref:System.Console.KeyAvailable%2A> property does not block input until a key press is available.</span></span>  
  
 <span data-ttu-id="8bfe0-409"><xref:System.Console.KeyAvailable%2A> プロパティは、<xref:System.Console.Read%2A> または <xref:System.Console.ReadLine%2A> メソッドではなく、<xref:System.Console.ReadKey%2A> メソッドのみと組み合わせて使用します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-409">Use the <xref:System.Console.KeyAvailable%2A> property in conjunction with only the <xref:System.Console.ReadKey%2A> method, not the <xref:System.Console.Read%2A> or <xref:System.Console.ReadLine%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-410">次の例では、<xref:System.Console.KeyAvailable%2A> プロパティを使用して、キーが押されるまで実行されるループを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-410">The following example demonstrates how to use the <xref:System.Console.KeyAvailable%2A> property to create a loop that runs until a key is pressed.</span></span>  
  
 [!code-cpp[console.keyavailable#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.keyavailable/CPP/ka.cpp#1)]
 [!code-csharp[console.keyavailable#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.keyavailable/CS/ka.cs#1)]
 [!code-vb[console.keyavailable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.keyavailable/VB/ka.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-411">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-411">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8bfe0-412">標準入力は、キーボードではなくファイルにリダイレクトされています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-412">Standard input is redirected to a file instead of the keyboard.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowHeight">
      <MemberSignature Language="C#" Value="public static int LargestWindowHeight { get; }" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowHeight As Integer" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowHeight { int get(); };" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.LargestWindowHeight : int" Usage="System.Console.LargestWindowHeight" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static int LargestWindowHeight { get; set; }" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LargestWindowHeight As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowHeight { int get(); void set(int value); };" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="member this.LargestWindowHeight : int with get, set" Usage="System.Console.LargestWindowHeight" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-413">現在のフォントおよび画面解像度に基づいて、コンソール ウィンドウの最大行数を取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-413">Gets the largest possible number of console window rows, based on the current font and screen resolution.</span></span></summary>
        <value><span data-ttu-id="8bfe0-414">コンソール ウィンドウの高さの最大値 (行数)。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-414">The height of the largest possible console window measured in rows.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowWidth">
      <MemberSignature Language="C#" Value="public static int LargestWindowWidth { get; }" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowWidth As Integer" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowWidth { int get(); };" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.LargestWindowWidth : int" Usage="System.Console.LargestWindowWidth" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static int LargestWindowWidth { get; set; }" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LargestWindowWidth As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowWidth { int get(); void set(int value); };" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberSignature Language="F#" Value="member this.LargestWindowWidth : int with get, set" Usage="System.Console.LargestWindowWidth" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-415">現在のフォントおよび画面解像度に基づいて、コンソール ウィンドウの最大列数を取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-415">Gets the largest possible number of console window columns, based on the current font and screen resolution.</span></span></summary>
        <value><span data-ttu-id="8bfe0-416">コンソール ウィンドウの幅の最大値 (列数)。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-416">The width of the largest possible console window measured in columns.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveBufferArea">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8bfe0-417">画面バッファーの特定の領域を、指定した領域にコピーします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-417">Copies a specified source area of the screen buffer to a specified destination area.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="F#" Value="static member MoveBufferArea : int * int * int * int * int * int -&gt; unit" Usage="System.Console.MoveBufferArea (sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTop" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceWidth" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceHeight" Type="System.Int32" Index="3" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetLeft" Type="System.Int32" Index="4" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetTop" Type="System.Int32" Index="5" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="sourceLeft"><span data-ttu-id="8bfe0-418">コピー元領域の左端の列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-418">The leftmost column of the source area.</span></span></param>
        <param name="sourceTop"><span data-ttu-id="8bfe0-419">コピー元領域の最上行。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-419">The topmost row of the source area.</span></span></param>
        <param name="sourceWidth"><span data-ttu-id="8bfe0-420">コピー元領域内の列数。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-420">The number of columns in the source area.</span></span></param>
        <param name="sourceHeight"><span data-ttu-id="8bfe0-421">コピー元領域内の行数。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-421">The number of rows in the source area.</span></span></param>
        <param name="targetLeft"><span data-ttu-id="8bfe0-422">コピー先領域の左端の列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-422">The leftmost column of the destination area.</span></span></param>
        <param name="targetTop"><span data-ttu-id="8bfe0-423">コピー先領域の最上行。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-423">The topmost row of the destination area.</span></span></param>
        <summary><span data-ttu-id="8bfe0-424">画面バッファーの特定の領域を、指定した領域にコピーします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-424">Copies a specified source area of the screen buffer to a specified destination area.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-425">コピー先とコピー元のパラメーターで、現在の画面バッファーの境界の外側に位置が指定されている場合、コピー先の領域内に収まる部分のみがコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-425">If the destination and source parameters specify a position located outside the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied.</span></span> <span data-ttu-id="8bfe0-426">つまり、ソース領域は、現在の画面バッファーに合うようにクリップされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-426">That is, the source area is clipped to fit the current screen buffer.</span></span>  
  
 <span data-ttu-id="8bfe0-427"><xref:System.Console.MoveBufferArea%2A> メソッドは、コピー元の領域をコピー先の領域にコピーします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-427">The <xref:System.Console.MoveBufferArea%2A> method copies the source area to the destination area.</span></span> <span data-ttu-id="8bfe0-428">コピー先の領域がコピー元の領域と交差しない場合、現在の前景色と背景色を使用して、ソース領域に空白が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-428">If the destination area does not intersect the source area, the source area is filled with blanks using the current foreground and background colors.</span></span> <span data-ttu-id="8bfe0-429">それ以外の場合、ソース領域の交差部分は塗りつぶされません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-429">Otherwise, the intersected portion of the source area is not filled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-430">1 つ以上のパラメーターが 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-430">One or more of the parameters is less than zero.</span></span>  
  
<span data-ttu-id="8bfe0-431">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-431">-or-</span></span> 
 <span data-ttu-id="8bfe0-432"><paramref name="sourceLeft" /> または <paramref name="targetLeft" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-432"><paramref name="sourceLeft" /> or <paramref name="targetLeft" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.</span></span>  
  
<span data-ttu-id="8bfe0-433">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-433">-or-</span></span> 
 <span data-ttu-id="8bfe0-434"><paramref name="sourceTop" /> または <paramref name="targetTop" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-434"><paramref name="sourceTop" /> or <paramref name="targetTop" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.</span></span>  
  
<span data-ttu-id="8bfe0-435">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-435">-or-</span></span> 
 <span data-ttu-id="8bfe0-436"><paramref name="sourceTop" /> + <paramref name="sourceHeight" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-436"><paramref name="sourceTop" /> + <paramref name="sourceHeight" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.</span></span>  
  
<span data-ttu-id="8bfe0-437">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-437">-or-</span></span> 
 <span data-ttu-id="8bfe0-438"><paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-438"><paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-439">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-439">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-440">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-440">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-441">現在のオペレーティング システムは Windows ではありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-441">The current operating system is not Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop, char sourceChar, valuetype System.ConsoleColor sourceForeColor, valuetype System.ConsoleColor sourceBackColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer, sourceChar As Char, sourceForeColor As ConsoleColor, sourceBackColor As ConsoleColor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="F#" Value="static member MoveBufferArea : int * int * int * int * int * int * char * ConsoleColor * ConsoleColor -&gt; unit" Usage="System.Console.MoveBufferArea (sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop, sourceChar, sourceForeColor, sourceBackColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTop" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceWidth" Type="System.Int32" Index="2" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceHeight" Type="System.Int32" Index="3" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetLeft" Type="System.Int32" Index="4" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetTop" Type="System.Int32" Index="5" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceChar" Type="System.Char" Index="6" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceForeColor" Type="System.ConsoleColor" Index="7" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceBackColor" Type="System.ConsoleColor" Index="8" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="sourceLeft"><span data-ttu-id="8bfe0-442">コピー元領域の左端の列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-442">The leftmost column of the source area.</span></span></param>
        <param name="sourceTop"><span data-ttu-id="8bfe0-443">コピー元領域の最上行。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-443">The topmost row of the source area.</span></span></param>
        <param name="sourceWidth"><span data-ttu-id="8bfe0-444">コピー元領域内の列数。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-444">The number of columns in the source area.</span></span></param>
        <param name="sourceHeight"><span data-ttu-id="8bfe0-445">コピー元領域内の行数。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-445">The number of rows in the source area.</span></span></param>
        <param name="targetLeft"><span data-ttu-id="8bfe0-446">コピー先領域の左端の列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-446">The leftmost column of the destination area.</span></span></param>
        <param name="targetTop"><span data-ttu-id="8bfe0-447">コピー先領域の最上行。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-447">The topmost row of the destination area.</span></span></param>
        <param name="sourceChar"><span data-ttu-id="8bfe0-448">コピー元領域に挿入する文字。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-448">The character used to fill the source area.</span></span></param>
        <param name="sourceForeColor"><span data-ttu-id="8bfe0-449">コピー元領域を上書きするときに使用する前景色。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-449">The foreground color used to fill the source area.</span></span></param>
        <param name="sourceBackColor"><span data-ttu-id="8bfe0-450">コピー元領域を上書きするときに使用する背景色。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-450">The background color used to fill the source area.</span></span></param>
        <summary><span data-ttu-id="8bfe0-451">画面バッファーの特定の領域を、指定した領域にコピーします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-451">Copies a specified source area of the screen buffer to a specified destination area.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-452">コピー先とコピー元のパラメーターで、現在の画面バッファーの境界を超える位置が指定されている場合は、コピー先の領域内に収まる部分のみがコピーされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-452">If the destination and source parameters specify a position located beyond the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied.</span></span> <span data-ttu-id="8bfe0-453">つまり、ソース領域は、現在の画面バッファーに合うようにクリップされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-453">That is, the source area is clipped to fit the current screen buffer.</span></span>  
  
 <span data-ttu-id="8bfe0-454"><xref:System.Console.MoveBufferArea%2A> メソッドは、コピー元の領域をコピー先の領域にコピーします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-454">The <xref:System.Console.MoveBufferArea%2A> method copies the source area to the destination area.</span></span> <span data-ttu-id="8bfe0-455">コピー先の領域がコピー元の領域と交差しない場合、`sourceForeColor` と `sourceBackColor`で指定された色を使用して、`sourceChar`によって指定された文字がコピー元の領域に格納されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-455">If the destination area does not intersect the source area, the source area is filled with the character specified by `sourceChar`, using the colors specified by `sourceForeColor` and `sourceBackColor`.</span></span> <span data-ttu-id="8bfe0-456">それ以外の場合、ソース領域の交差部分は塗りつぶされません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-456">Otherwise, the intersected portion of the source area is not filled.</span></span>  
  
 <span data-ttu-id="8bfe0-457"><xref:System.Console.MoveBufferArea%2A> メソッドは、`sourceWidth` または `sourceHeight` が0の場合、操作を実行しません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-457">The <xref:System.Console.MoveBufferArea%2A> method performs no operation if `sourceWidth` or `sourceHeight` is zero.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-458">1 つ以上のパラメーターが 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-458">One or more of the parameters is less than zero.</span></span>  
  
<span data-ttu-id="8bfe0-459">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-459">-or-</span></span> 
 <span data-ttu-id="8bfe0-460"><paramref name="sourceLeft" /> または <paramref name="targetLeft" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-460"><paramref name="sourceLeft" /> or <paramref name="targetLeft" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.</span></span>  
  
<span data-ttu-id="8bfe0-461">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-461">-or-</span></span> 
 <span data-ttu-id="8bfe0-462"><paramref name="sourceTop" /> または <paramref name="targetTop" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-462"><paramref name="sourceTop" /> or <paramref name="targetTop" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.</span></span>  
  
<span data-ttu-id="8bfe0-463">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-463">-or-</span></span> 
 <span data-ttu-id="8bfe0-464"><paramref name="sourceTop" /> + <paramref name="sourceHeight" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-464"><paramref name="sourceTop" /> + <paramref name="sourceHeight" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.</span></span>  
  
<span data-ttu-id="8bfe0-465">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-465">-or-</span></span> 
 <span data-ttu-id="8bfe0-466"><paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-466"><paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8bfe0-467">一方または両方の色パラメーターが <see cref="T:System.ConsoleColor" /> 列挙のメンバーではありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-467">One or both of the color parameters is not a member of the <see cref="T:System.ConsoleColor" /> enumeration.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-468">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-468">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-469">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-469">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-470">現在のオペレーティング システムは Windows ではありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-470">The current operating system is not Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NumberLock">
      <MemberSignature Language="C#" Value="public static bool NumberLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool NumberLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.NumberLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NumberLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool NumberLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberLock : bool" Usage="System.Console.NumberLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-471">NumLock がオンかオフかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-471">Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.</span></span></summary>
        <value><span data-ttu-id="8bfe0-472">NumLock がオンの場合は <see langword="true" />、NumLock がオフの場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-472"><see langword="true" /> if NUM LOCK is turned on; <see langword="false" /> if NUM LOCK is turned off.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-473">取得操作は Windows 以外のオペレーティング システムで呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-473">The get operation is invoked on an operating system other than Windows.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardError">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8bfe0-474">標準エラー ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-474">Acquires the standard error stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError();" />
      <MemberSignature Language="F#" Value="static member OpenStandardError : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bfe0-475">標準エラー ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-475">Acquires the standard error stream.</span></span></summary>
        <returns><span data-ttu-id="8bfe0-476">標準エラー ストリーム。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-476">The standard error stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-477">このメソッドは、<xref:System.Console.SetError%2A> メソッドによって変更された後に、標準エラーストリームを再取得するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-477">This method can be used to reacquire the standard error stream after it has been changed by the <xref:System.Console.SetError%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-478">次の例は、コンソールに1つ以上のテキストファイルの内容を表示する単純なテキストファイルビューアーです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-478">The following example is a simple text file viewer that displays the contents of one or more text files to the console.</span></span> <span data-ttu-id="8bfe0-479">コマンドライン引数がない場合、またはコマンドライン引数として渡されたファイルが存在しない場合、この例では <xref:System.Console.SetError%2A> メソッドを呼び出して、エラー情報をファイルにリダイレクトし、標準エラーストリームを reacquiring するプロセスで <xref:System.Console.OpenStandardError%2A> メソッドを呼び出し、エラー情報がファイルに書き込まれたことを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-479">If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the <xref:System.Console.OpenStandardError%2A> method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.</span></span>  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 <span data-ttu-id="8bfe0-480">エラーストリームを reacquiring する前に、<xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> プロパティが `true` に設定されていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-480">Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> property is set to `true` before reacquiring the error stream.</span></span> <span data-ttu-id="8bfe0-481">これにより、バッファーではなく、直ちに出力がコンソールに送信されるようになります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-481">This ensures that output will be sent to the console immediately rather than buffered.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardError : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardError bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bufferSize"><span data-ttu-id="8bfe0-482">内部ストリーム バッファー サイズ。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-482">The internal stream buffer size.</span></span></param>
        <summary><span data-ttu-id="8bfe0-483">指定したバッファー サイズに設定された標準エラー ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-483">Acquires the standard error stream, which is set to a specified buffer size.</span></span></summary>
        <returns><span data-ttu-id="8bfe0-484">標準エラー ストリーム。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-484">The standard error stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-485">このメソッドは、<xref:System.Console.SetError%2A> メソッドによって変更された後に、標準エラーストリームを再取得するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-485">This method can be used to reacquire the standard error stream after it has been changed by the <xref:System.Console.SetError%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-486"><paramref name="bufferSize" /> が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-486"><paramref name="bufferSize" /> is less than or equal to zero.</span></span></exception>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardInput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8bfe0-487">標準入力ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-487">Acquires the standard input stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput();" />
      <MemberSignature Language="F#" Value="static member OpenStandardInput : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardInput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bfe0-488">標準入力ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-488">Acquires the standard input stream.</span></span></summary>
        <returns><span data-ttu-id="8bfe0-489">標準入力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-489">The standard input stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-490">このメソッドは、<xref:System.Console.SetIn%2A> メソッドによって変更された後に、標準入力ストリームを再取得するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-490">This method can be used to reacquire the standard input stream after it has been changed by the <xref:System.Console.SetIn%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-491">次の例は、`OpenStandardInput` プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-491">The following example illustrates the use of the `OpenStandardInput` property.</span></span>  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardInput : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardInput bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bufferSize"><span data-ttu-id="8bfe0-492">内部ストリーム バッファー サイズ。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-492">The internal stream buffer size.</span></span></param>
        <summary><span data-ttu-id="8bfe0-493">指定したバッファー サイズに設定された標準入力ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-493">Acquires the standard input stream, which is set to a specified buffer size.</span></span></summary>
        <returns><span data-ttu-id="8bfe0-494">標準入力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-494">The standard input stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-495">このメソッドは、<xref:System.Console.SetIn%2A> メソッドによって変更された後に、標準出力ストリームを再取得するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-495">This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetIn%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-496">次の例は、`OpenStandardInput` プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-496">The following example illustrates the use of the `OpenStandardInput` property.</span></span>  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-497"><paramref name="bufferSize" /> が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-497"><paramref name="bufferSize" /> is less than or equal to zero.</span></span></exception>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardOutput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8bfe0-498">標準出力ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-498">Acquires the standard output stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput();" />
      <MemberSignature Language="F#" Value="static member OpenStandardOutput : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardOutput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bfe0-499">標準出力ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-499">Acquires the standard output stream.</span></span></summary>
        <returns><span data-ttu-id="8bfe0-500">標準出力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-500">The standard output stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-501">このメソッドは、<xref:System.Console.SetOut%2A> メソッドによって変更された後に、標準出力ストリームを再取得するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-501">This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetOut%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-502"><xref:System.Console.OpenStandardOutput%2A>メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-502">The following example illustrates the use of the <xref:System.Console.OpenStandardOutput%2A> method.</span></span> <span data-ttu-id="8bfe0-503">これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-503">It replaces four consecutive space characters in a string with a tab character.</span></span> <span data-ttu-id="8bfe0-504">これを実行するには、2つのコマンドライン引数を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-504">To run it, you must supply two command-line arguments.</span></span> <span data-ttu-id="8bfe0-505">1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-505">The first is the name of an existing text file to redirect the standard input stream to.</span></span> <span data-ttu-id="8bfe0-506">2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-506">The second is the name of a file to redirect the standard output stream to.</span></span> <span data-ttu-id="8bfe0-507">このファイルは存在する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-507">This file need not exist.</span></span> <span data-ttu-id="8bfe0-508">ファイルが存在する場合は、その内容が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-508">If it does, its contents will be overwritten.</span></span>  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardOutput : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardOutput bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bufferSize"><span data-ttu-id="8bfe0-509">内部ストリーム バッファー サイズ。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-509">The internal stream buffer size.</span></span></param>
        <summary><span data-ttu-id="8bfe0-510">指定したバッファー サイズに設定された標準出力ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-510">Acquires the standard output stream, which is set to a specified buffer size.</span></span></summary>
        <returns><span data-ttu-id="8bfe0-511">標準出力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-511">The standard output stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-512">このメソッドは、<xref:System.Console.SetOut%2A> メソッドによって変更された後に、標準出力ストリームを再取得するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-512">This method can be used to reacquire the standard output stream after it has been changed by the <xref:System.Console.SetOut%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-513"><xref:System.Console.OpenStandardOutput%2A>メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-513">The following example illustrates the use of the <xref:System.Console.OpenStandardOutput%2A> method.</span></span> <span data-ttu-id="8bfe0-514">これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-514">It replaces four consecutive space characters in a string with a tab character.</span></span> <span data-ttu-id="8bfe0-515">これを実行するには、2つのコマンドライン引数を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-515">To run it, you must supply two command line arguments.</span></span> <span data-ttu-id="8bfe0-516">1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-516">The first is the name of an existing text file to redirect the standard input stream to.</span></span> <span data-ttu-id="8bfe0-517">2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-517">The second is the name of a file to redirect the standard output stream to.</span></span> <span data-ttu-id="8bfe0-518">このファイルは存在する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-518">This file need not exist.</span></span> <span data-ttu-id="8bfe0-519">ファイルが存在する場合は、その内容が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-519">If it does, its contents will be overwritten.</span></span>  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-520"><paramref name="bufferSize" /> が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-520"><paramref name="bufferSize" /> is less than or equal to zero.</span></span></exception>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="Out">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Out { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Out" />
      <MemberSignature Language="DocId" Value="P:System.Console.Out" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Out As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Out { System::IO::TextWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Out : System.IO.TextWriter" Usage="System.Console.Out" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-521">標準出力ストリームを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-521">Gets the standard output stream.</span></span></summary>
        <value><span data-ttu-id="8bfe0-522">標準出力ストリームを表す <see cref="T:System.IO.TextWriter" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-522">A <see cref="T:System.IO.TextWriter" /> that represents the standard output stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-523">このプロパティは、既定で標準出力ストリームに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-523">This property is set to the standard output stream by default.</span></span> <span data-ttu-id="8bfe0-524">このプロパティは、<xref:System.Console.SetOut%2A> メソッドを使用して別のストリームに設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-524">This property can be set to another stream with the <xref:System.Console.SetOut%2A> method.</span></span>  
  
 <span data-ttu-id="8bfe0-525">`Console.Out.WriteLine` メソッドの呼び出しは、対応する <xref:System.Console.WriteLine%2A> メソッドの呼び出しと同じであることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-525">Note that calls to `Console.Out.WriteLine` methods are equivalent to calls to the corresponding <xref:System.Console.WriteLine%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-526">次の例では、<xref:System.Console.Out%2A> プロパティを使用して、アプリケーションの現在のディレクトリにあるファイルの名前を含む配列を標準出力デバイスに表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-526">The following example uses the <xref:System.Console.Out%2A> property to display an array containing the names of files in the application's current directory to the standard output device.</span></span> <span data-ttu-id="8bfe0-527">次に、標準出力をファイル .txt という名前のファイルに設定し、配列要素をファイルに一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-527">It then sets the standard output to a file named Files.txt and lists the array elements to the file.</span></span> <span data-ttu-id="8bfe0-528">最後に、出力を標準出力ストリームに設定し、配列要素を標準出力デバイスに再び表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-528">Finally, it sets the output to the standard output stream and again displays the array elements to the standard output device.</span></span>  
  
 [!code-csharp[System.Console.Out#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.out/cs/out1.cs#1)]
 [!code-vb[System.Console.Out#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.out/vb/out1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OutputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding OutputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding OutputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.OutputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property OutputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ OutputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OutputEncoding : System.Text.Encoding with get, set" Usage="System.Console.OutputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-529">コンソールが出力内容の書き込み時に使用するエンコーディングを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-529">Gets or sets the encoding the console uses to write output.</span></span></summary>
        <value><span data-ttu-id="8bfe0-530">コンソールが出力内容の書き込みに使用するエンコーディング。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-530">The encoding used to write console output.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-531">コンソールでは、出力エンコーディングを使用して、アプリケーションによって書き込まれた文字を、対応するコンソールの表示文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-531">The console uses the output encoding to translate characters written by an application into corresponding console display characters.</span></span> <span data-ttu-id="8bfe0-532">コンソールで使用される既定のコードページは、システムロケールによって決まります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-532">The default code page that the console uses is determined by the system locale.</span></span>  
  
 <span data-ttu-id="8bfe0-533">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以降では、プロパティの取得操作によって、コンソールの現在の出力エンコーディングではなく、キャッシュされた値が返される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-533">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], a property get operation may return a cached value instead of the console's current output encoding.</span></span> <span data-ttu-id="8bfe0-534">これは、<xref:System.Console.OutputEncoding%2A> プロパティの値が、Windows `SetConsoleOutputCP` 関数の呼び出しなど、<xref:System.Console.OutputEncoding%2A> プロパティへの割り当て以外の方法で変更された場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-534">This can occur if the value of the <xref:System.Console.OutputEncoding%2A> property is modified by some means other than an assignment to the <xref:System.Console.OutputEncoding%2A> property, such as calling the Windows `SetConsoleOutputCP` function.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-535">設定操作でのプロパティ値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-535">The property value in a set operation is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-536">この操作の実行中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-536">An error occurred during the execution of this operation.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-537">アプリケーションに、この操作を実行するための権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-537">Your application does not have permission to perform this operation.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="8bfe0-538">Unicode エンコーディングの <see cref="T:System.Console" /> クラスは、<see cref="T:System.Text.UTF8Encoding" /> クラスを使用した UTF-8 エンコーディングをサポートしています。また、[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以降では、<see cref="T:System.Text.UnicodeEncoding" /> クラスを使用した UTF-16 エンコーディングがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-538">Of the Unicode encodings, the <see cref="T:System.Console" /> class supports UTF-8 encoding with the <see cref="T:System.Text.UTF8Encoding" /> class and, starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it supports UTF-16 encoding with the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span> <span data-ttu-id="8bfe0-539"><see cref="T:System.Text.UTF32Encoding" /> クラスを使用した 32 UTF-8 エンコードはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-539">UTF-32 encoding with the <see cref="T:System.Text.UTF32Encoding" /> class is not supported.</span></span> <span data-ttu-id="8bfe0-540">出力エンコードを UTF-32 に設定しようとすると、<see cref="T:System.IO.IOException" />がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-540">Attempting to set the output encoding to UTF-32 throws an <see cref="T:System.IO.IOException" />.</span></span>  
  
<span data-ttu-id="8bfe0-541">コンソールに Unicode 文字を正常に表示するには、次のものが必要です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-541">Note that successfully displaying Unicode characters to the console requires the following:</span></span> 
<span data-ttu-id="8bfe0-542">-コンソールは、文字を表示するために、Lucida Console や Consolas, などの TrueType フォントを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-542">-   The console must use a TrueType font, such as Lucida Console or Consolas, to display characters.</span></span>  
  
<span data-ttu-id="8bfe0-543">-コンソールで使用されるフォントでは、表示する特定のグリフまたはグリフを定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-543">-   A font used by the console must define the particular glyph or glyphs to be displayed.</span></span> <span data-ttu-id="8bfe0-544">コンソールでは、フォントリンクを利用して、基本フォントにそのグリフの定義が含まれていない場合に、リンクされたフォントのグリフを表示できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-544">The console can take advantage of font linking to display glyphs from linked fonts if the base font does not contain a definition for that glyph.</span></span>  
  
<span data-ttu-id="8bfe0-545">コンソールによる Unicode エンコーディングのサポートの詳細については、<see cref="T:System.Console" /> クラスの「コンソールの Unicode サポート」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-545">For more information about support for Unicode encoding by the console, see the "Unicode Support for the Console" section in the <see cref="T:System.Console" /> class.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Read" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Read();" />
      <MemberSignature Language="F#" Value="static member Read : unit -&gt; int" Usage="System.Console.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bfe0-546">標準入力ストリームから次の文字を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-546">Reads the next character from the standard input stream.</span></span></summary>
        <returns><span data-ttu-id="8bfe0-547">入力ストリームの次の文字。または次の文字がない場合は -1。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-547">The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-548"><xref:System.Console.Read%2A> メソッドは、入力文字を入力するときにその戻り値をブロックします。<xref:System.ConsoleKey.Enter> キーを押すと終了します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-548">The <xref:System.Console.Read%2A> method blocks its return while you type input characters; it terminates when you press the <xref:System.ConsoleKey.Enter> key.</span></span> <span data-ttu-id="8bfe0-549">Enter キーを押すと、プラットフォームに依存する行の終了シーケンスが入力に追加されます (たとえば、Windows は復帰と改行のシーケンスを追加します)。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-549">Pressing Enter appends a platform-dependent line termination sequence to your input (for example, Windows appends a carriage return-linefeed sequence).</span></span> <span data-ttu-id="8bfe0-550">後続の <xref:System.Console.Read%2A> メソッドの呼び出しでは、一度に1文字ずつ入力を取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-550">Subsequent calls to the <xref:System.Console.Read%2A> method retrieve your input one character at a time.</span></span> <span data-ttu-id="8bfe0-551">最後の文字が取得されると、<xref:System.Console.Read%2A> によって再び返され、サイクルが繰り返されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-551">After the final character is retrieved, <xref:System.Console.Read%2A> blocks its return again and the cycle repeats.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8bfe0-552"><xref:System.Console.ReadLine%2A> メソッド、または <xref:System.Console.KeyAvailable%2A> プロパティと <xref:System.Console.ReadKey%2A> メソッドは、<xref:System.Console.Read%2A> メソッドを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-552">The <xref:System.Console.ReadLine%2A> method, or the <xref:System.Console.KeyAvailable%2A> property and <xref:System.Console.ReadKey%2A> method are preferable to using the <xref:System.Console.Read%2A> method.</span></span>  
  
 <span data-ttu-id="8bfe0-553">次のいずれかの操作を実行しない限り、メソッドは-1 を返しません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-553">Note that the method does not return -1 unless you perform one of the following actions:</span></span>  
  
-   <span data-ttu-id="8bfe0-554"><xref:System.ConsoleModifiers.Control> 修飾キーを同時に押し、コンソールキー (Ctrl + Z) を押す <xref:System.ConsoleKey.Z> と、ファイルの終わりの条件が通知されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-554">Simultaneously press the <xref:System.ConsoleModifiers.Control> modifier key and <xref:System.ConsoleKey.Z> console key (Ctrl+Z), which signals the end-of-file condition.</span></span>  
  
-   <span data-ttu-id="8bfe0-555">Windows の F6 関数キーなど、ファイルの終わりの条件を通知する同等のキーを押します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-555">Press an equivalent key that signals the end-of-file condition, such as the F6 function key in Windows.</span></span>  
  
-   <span data-ttu-id="8bfe0-556">実際のファイル終端文字を持つテキストファイルなどのソースに入力ストリームをリダイレクトします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-556">Redirect the input stream to a source, such as a text file, that has an actual end-of-file character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-557"><xref:System.Console.Read%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-557">The following example demonstrates the <xref:System.Console.Read%2A> method.</span></span>  
  
 [!code-cpp[console.read#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.read/CPP/read.cpp#1)]
 [!code-csharp[console.read#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.read/CS/read.cs#1)]
 [!code-vb[console.read#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.read/VB/read.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-558">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-558">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadKey">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8bfe0-559">ユーザーによって押された次の文字キーまたはファンクション キーを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-559">Obtains the next character or function key pressed by the user.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey () As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey();" />
      <MemberSignature Language="F#" Value="static member ReadKey : unit -&gt; ConsoleKeyInfo" Usage="System.Console.ReadKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bfe0-560">ユーザーによって押された次の文字キーまたはファンクション キーを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-560">Obtains the next character or function key pressed by the user.</span></span> <span data-ttu-id="8bfe0-561">押されたキーは、コンソール ウィンドウに表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-561">The pressed key is displayed in the console window.</span></span></summary>
        <returns><span data-ttu-id="8bfe0-562">押されたコンソール キーに対応する <see cref="T:System.ConsoleKey" /> 定数と Unicode 文字 (存在する場合) を記述するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-562">An object that describes the <see cref="T:System.ConsoleKey" /> constant and Unicode character, if any, that correspond to the pressed console key.</span></span> <span data-ttu-id="8bfe0-563">また、<see cref="T:System.ConsoleKeyInfo" /> オブジェクトは、1 つ以上の Shift、Alt、Ctrl の各修飾子キーがコンソール キーと同時に押されたかどうかを <see cref="T:System.ConsoleModifiers" /> 値のビットごとの組み合わせで記述します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-563">The <see cref="T:System.ConsoleKeyInfo" /> object also describes, in a bitwise combination of <see cref="T:System.ConsoleModifiers" /> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-564"><xref:System.Console.ReadKey%2A> メソッドは、文字または関数キーが押されるまで、<xref:System.Console.ReadKey%2A> メソッドを発行するスレッドのブロックを待機します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-564">The <xref:System.Console.ReadKey%2A> method waits, that is, blocks on the thread issuing the <xref:System.Console.ReadKey%2A> method, until a character or function key is pressed.</span></span> <span data-ttu-id="8bfe0-565">文字または関数キーは、1つ以上の Alt、Ctrl、または Shift 修飾子キーと組み合わせて押すことができます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-565">A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys.</span></span> <span data-ttu-id="8bfe0-566">ただし、修飾子キーを単独で押すと、<xref:System.Console.ReadKey%2A> メソッドが返されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-566">However, pressing a modifier key by itself will not cause the <xref:System.Console.ReadKey%2A> method to return.</span></span>  
  
 <span data-ttu-id="8bfe0-567">アプリケーションによっては、<xref:System.Console.KeyAvailable%2A> プロパティと共に <xref:System.Console.ReadKey%2A> メソッドを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-567">Depending on your application, you might want to use the <xref:System.Console.ReadKey%2A> method in conjunction with the <xref:System.Console.KeyAvailable%2A> property.</span></span>  
  
 <span data-ttu-id="8bfe0-568"><xref:System.Console.ReadKey%2A> メソッドは、標準入力が <xref:System.Console.SetIn%2A> メソッドを使用してファイルにリダイレクトされた場合でも、キーボードから読み取りを行います。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-568">The <xref:System.Console.ReadKey%2A> method reads from the keyboard even if the standard input is redirected to a file with the <xref:System.Console.SetIn%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-569"><xref:System.Console.ReadKey> メソッドを使用する最も一般的な用途の1つは、ユーザーがキーを押すまでプログラムの実行を中断し、アプリが終了するか、追加の情報ウィンドウを表示することです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-569">One of the most common uses of the <xref:System.Console.ReadKey> method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information.</span></span> <span data-ttu-id="8bfe0-570">次の例では、<xref:System.Console.ReadKey> メソッドを使用して、ユーザーがアプリを終了する前に Enter キーを押すのを待ちます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-570">The following example uses the  <xref:System.Console.ReadKey> method to wait for the user to press the Enter key before terminating the app.</span></span>  
  
 [!code-csharp[System.Console.ReadKey#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey1.cs#1)]
 [!code-vb[System.Console.ReadKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey1.vb#1)]  
  
 <span data-ttu-id="8bfe0-571"><xref:System.Console.ReadKey%2A> メソッドのこのオーバーロードは、既定では、ユーザーがコンソールに押した任意のキーがエコーされることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-571">Note that this overload of the <xref:System.Console.ReadKey%2A> method by default echoes any displayable keys that the user presses to the console.</span></span> <span data-ttu-id="8bfe0-572">これを抑制するには、`true`の `intercept` 引数を使用して <xref:System.Console.ReadKey%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-572">To suppress them, call the  <xref:System.Console.ReadKey%2A> method with an `intercept` argument of `true`.</span></span>  
  
 <span data-ttu-id="8bfe0-573">次の例では、<xref:System.Console.ReadKey> メソッドを使用して、ユーザーが押したキーに関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-573">The following example uses the <xref:System.Console.ReadKey> method to display information about which key the user pressed.</span></span> 
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8bfe0-574"><see cref="P:System.Console.In" /> プロパティは、コンソール以外のストリームからリダイレクトされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-574">The <see cref="P:System.Console.In" /> property is redirected from some stream other than the console.</span></span></exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey (bool intercept);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey(bool intercept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey (intercept As Boolean) As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey(bool intercept);" />
      <MemberSignature Language="F#" Value="static member ReadKey : bool -&gt; ConsoleKeyInfo" Usage="System.Console.ReadKey intercept" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intercept" Type="System.Boolean" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="intercept"><span data-ttu-id="8bfe0-575">押されたキーをコンソール ウィンドウに表示するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-575">Determines whether to display the pressed key in the console window.</span></span> <span data-ttu-id="8bfe0-576">押されたキーを表示しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-576"><see langword="true" /> to not display the pressed key; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="8bfe0-577">ユーザーによって押された次の文字キーまたはファンクション キーを取得します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-577">Obtains the next character or function key pressed by the user.</span></span> <span data-ttu-id="8bfe0-578">押されたキーは、オプションでコンソール ウィンドウに表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-578">The pressed key is optionally displayed in the console window.</span></span></summary>
        <returns><span data-ttu-id="8bfe0-579">押されたコンソール キーに対応する <see cref="T:System.ConsoleKey" /> 定数と Unicode 文字 (存在する場合) を記述するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-579">An object that describes the <see cref="T:System.ConsoleKey" /> constant and Unicode character, if any, that correspond to the pressed console key.</span></span> <span data-ttu-id="8bfe0-580">また、<see cref="T:System.ConsoleKeyInfo" /> オブジェクトは、1 つ以上の Shift、Alt、Ctrl の各修飾子キーがコンソール キーと同時に押されたかどうかを <see cref="T:System.ConsoleModifiers" /> 値のビットごとの組み合わせで記述します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-580">The <see cref="T:System.ConsoleKeyInfo" /> object also describes, in a bitwise combination of <see cref="T:System.ConsoleModifiers" /> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-581"><xref:System.Console.ReadKey%2A> メソッドは、文字または関数キーが押されるまで、<xref:System.Console.ReadKey%2A> メソッドを発行するスレッドのブロックを待機します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-581">The <xref:System.Console.ReadKey%2A> method waits, that is, blocks on the thread issuing the <xref:System.Console.ReadKey%2A> method, until a character or function key is pressed.</span></span> <span data-ttu-id="8bfe0-582">文字または関数キーは、1つ以上の Alt、Ctrl、または Shift 修飾子キーと組み合わせて押すことができます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-582">A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys.</span></span> <span data-ttu-id="8bfe0-583">ただし、修飾子キーを単独で押すと、<xref:System.Console.ReadKey%2A> メソッドが返されることはありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-583">However, pressing a modifier key by itself will not cause the <xref:System.Console.ReadKey%2A> method to return.</span></span>  
  
 <span data-ttu-id="8bfe0-584">`intercept` パラメーターが `true`の場合、押されたキーはインターセプトされ、コンソールウィンドウに表示されません。それ以外の場合は、押されたキーが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-584">If the `intercept` parameter is `true`, the pressed key is intercepted and not displayed in the console window; otherwise, the pressed key is displayed.</span></span>  
  
 <span data-ttu-id="8bfe0-585">アプリケーションによっては、<xref:System.Console.KeyAvailable%2A> プロパティと共に <xref:System.Console.ReadKey%2A> メソッドを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-585">Depending on your application, you might want to use the <xref:System.Console.ReadKey%2A> method in conjunction with the <xref:System.Console.KeyAvailable%2A> property.</span></span>  
  
 <span data-ttu-id="8bfe0-586"><xref:System.Console.ReadKey%2A> メソッドは、標準入力が <xref:System.Console.SetIn%2A> メソッドを使用してファイルにリダイレクトされた場合でも、キーボードから読み取りを行います。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-586">The <xref:System.Console.ReadKey%2A> method reads from the keyboard even if the standard input is redirected to a file with the <xref:System.Console.SetIn%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-587"><xref:System.Console.ReadKey%2A> メソッドを使用する最も一般的な用途の1つは、ユーザーがキーを押すまでプログラムの実行を中断し、アプリが終了するか、追加の情報ウィンドウを表示することです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-587">One of the most common uses of the <xref:System.Console.ReadKey%2A> method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information.</span></span> <span data-ttu-id="8bfe0-588">次の例では、<xref:System.Console.ReadKey%28System.Boolean%29> メソッドを使用して、ユーザーがアプリを終了する前に Enter キーを押すのを待ちます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-588">The following example uses the  <xref:System.Console.ReadKey%28System.Boolean%29> method to wait for the user to press the Enter key before terminating the app.</span></span> <span data-ttu-id="8bfe0-589">ユーザーが他のキーを押すと、コンソールにエコーされないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-589">Note that, if the user presses any other key, it is not echoed to the console.</span></span>  
  
 [!code-csharp[System.Console.ReadKey#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey2.cs#2)]
 [!code-vb[System.Console.ReadKey#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey2.vb#2)]  
  
 <span data-ttu-id="8bfe0-590">次の例では、<xref:System.Console.ReadKey%28System.Boolean%29> メソッドを使用して、そのキーをコンソールにエコーせずに、ユーザーが押したキーに関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-590">The following example uses the <xref:System.Console.ReadKey%28System.Boolean%29> method to display information about the key pressed by a user without echoing that key to the console.</span></span>  
  
 [!code-cpp[console.readkey2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey2/CPP/rkbool.cpp#1)]
 [!code-csharp[console.readkey2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey2/CS/rkbool.cs#1)]
 [!code-vb[console.readkey2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey2/VB/rkbool.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8bfe0-591"><see cref="P:System.Console.In" /> プロパティは、コンソール以外のストリームからリダイレクトされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-591">The <see cref="P:System.Console.In" /> property is redirected from some stream other than the console.</span></span></exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public static string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="static member ReadLine : unit -&gt; string" Usage="System.Console.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bfe0-592">標準入力ストリームから次の 1 行分の文字を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-592">Reads the next line of characters from the standard input stream.</span></span></summary>
        <returns><span data-ttu-id="8bfe0-593">入力ストリームの次の行。または次の行がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-593">The next line of characters from the input stream, or <see langword="null" /> if no more lines are available.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-594"><xref:System.Console.ReadLine%2A> メソッドは、標準入力ストリームから行を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-594">The <xref:System.Console.ReadLine%2A> method reads a line from the standard input stream.</span></span> <span data-ttu-id="8bfe0-595">(行の定義については、次の一覧の後の段落を参照してください)。これは、次のことを意味します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-595">(For the definition of a line, see the paragraph after the following list.) This means that:</span></span>  
  
-   <span data-ttu-id="8bfe0-596">標準入力デバイスがキーボードの場合、<xref:System.Console.ReadLine%2A> メソッドは、ユーザーが**enter**キーを押すまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-596">If the standard input device is the keyboard, the <xref:System.Console.ReadLine%2A> method blocks until the user presses the **Enter** key.</span></span>  
  
     <span data-ttu-id="8bfe0-597"><xref:System.Console.ReadLine%2A> メソッドを使用する最も一般的な用途の1つは、コンソールをクリアして新しい情報を表示する前にプログラムの実行を一時停止すること、またはアプリケーションを終了する前に Enter キーを押すようにユーザーに求めることです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-597">One of the most common uses of the <xref:System.Console.ReadLine%2A> method is to pause program execution before clearing the console and displaying new information to it, or to prompt the user to press the Enter key before terminating the application.</span></span> <span data-ttu-id="8bfe0-598">次の例を使って説明します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-598">The following example illustrates this.</span></span>  
  
     [!code-cpp[System.Console.ReadLine#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/ReadLineSimple.cpp#6)]
     [!code-csharp[System.Console.ReadLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLineSimple.cs#6)]
     [!code-vb[System.Console.ReadLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLineSimple.vb#6)]  
  
-   <span data-ttu-id="8bfe0-599">標準入力がファイルにリダイレクトされた場合、<xref:System.Console.ReadLine%2A> メソッドは、ファイルからテキスト行を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-599">If standard input is redirected to a file, the <xref:System.Console.ReadLine%2A> method reads a line of text from a file.</span></span> <span data-ttu-id="8bfe0-600">たとえば、ReadLine1 という名前のテキストファイルを次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-600">For example, the following is a text file named ReadLine1.txt:</span></span>  
  
    ```  
  
    This is the first line.  
    This is the second line.  
    This is the third line.  
    This is the fourth line.  
  
    ```  
  
     <span data-ttu-id="8bfe0-601">次の例では、<xref:System.Console.ReadLine%2A> メソッドを使用して、ファイルからリダイレクトされる入力を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-601">The following example uses the <xref:System.Console.ReadLine%2A> method to read input that is redirected from a file.</span></span> <span data-ttu-id="8bfe0-602">メソッドから `null`が返されると、読み取り操作は終了します。これは、読み取られる行が残っていないことを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-602">The read operation terminates when the  method returns `null`, which indicates that no lines remain to be read.</span></span>  
  
     [!code-csharp[System.Console.ReadLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine3.cs#3)]
     [!code-vb[System.Console.ReadLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine3.vb#3)]  
  
     <span data-ttu-id="8bfe0-603">この例を ReadLine1 という名前の実行可能ファイルにコンパイルした後、構文を使用してコマンドラインから実行できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-603">After compiling the example to an executable named ReadLine1.exe, you can run it from the command line with the syntax</span></span>  
  
    ```  
    ReadLine1 < ReadLine1.txt  
    ```  
  
     <span data-ttu-id="8bfe0-604">ファイルの内容を読み取り、コンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-604">to read the contents of the file and display them to the console.</span></span>  
  
 <span data-ttu-id="8bfe0-605">行は、文字のシーケンス (16 進数の 0x000d)、ラインフィード (16 進数の 0x000d)、または <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> プロパティの値として定義されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-605">A line is defined as a sequence of characters followed by a carriage return (hexadecimal 0x000d), a line feed (hexadecimal 0x000a), or the value of the <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="8bfe0-606">返された文字列に終端文字が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-606">The returned string does not contain the terminating character(s).</span></span> <span data-ttu-id="8bfe0-607">既定では、メソッドは256文字の入力バッファーから入力を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-607">By default, the method reads input from a 256-character input buffer.</span></span> <span data-ttu-id="8bfe0-608">これには <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> 文字が含まれているため、メソッドは最大254文字を含む行を読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-608">Because this includes the <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> character(s), the method can read lines that contain up to 254 characters.</span></span> <span data-ttu-id="8bfe0-609">長い行を読み取るには、<xref:System.Console.OpenStandardInput%28System.Int32%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-609">To read longer lines, call the <xref:System.Console.OpenStandardInput%28System.Int32%29> method.</span></span>  
  
 <span data-ttu-id="8bfe0-610"><xref:System.Console.ReadLine%2A> メソッドは同期的に実行されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-610">The <xref:System.Console.ReadLine%2A> method executes synchronously.</span></span> <span data-ttu-id="8bfe0-611">つまり、行が読み込まれるか、Ctrl + Z キーの組み合わせが押されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-611">That is, it blocks until a line is read or the Ctrl+Z keyboard combination is pressed.</span></span> <span data-ttu-id="8bfe0-612"><xref:System.Console.In%2A> プロパティは、標準入力ストリームを表す <xref:System.IO.TextReader> オブジェクトを返し、同期 <xref:System.IO.TextReader.ReadLine%2A?displayProperty=nameWithType> メソッドと非同期 <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType> メソッドの両方を持ちます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-612">The <xref:System.Console.In%2A> property returns a <xref:System.IO.TextReader> object that represents the standard input stream and that has both a synchronous <xref:System.IO.TextReader.ReadLine%2A?displayProperty=nameWithType> method and an asynchronous <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8bfe0-613">ただし、コンソールの標準入力ストリームとして使用する場合、<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType> は非同期ではなく同期的に実行され、読み取り操作が完了した後にのみ `Task<String>` を返します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-613">However, when used as the console's standard input stream, the <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType> executes synchronously rather than asynchronously and returns a `Task<String>` only after the read operation has completed.</span></span>  
  
 <span data-ttu-id="8bfe0-614">このメソッドが <xref:System.OutOfMemoryException> 例外をスローした場合、基になる <xref:System.IO.Stream> オブジェクトのリーダーの位置は、メソッドが読み取ることができた文字数だけ進んでいますが、内部 <xref:System.Console.ReadLine%2A> バッファーに既に読み込まれている文字は破棄されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-614">If this method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> object is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref:System.Console.ReadLine%2A> buffer are discarded.</span></span> <span data-ttu-id="8bfe0-615">ストリーム内のリーダーの位置は変更できないため、既に読み取られている文字は回復できないため、<xref:System.IO.TextReader>を再初期化することによってのみアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-615">Since the position of the reader in the stream cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.TextReader>.</span></span> <span data-ttu-id="8bfe0-616">ストリーム内の初期位置が不明な場合、またはストリームがシークをサポートしていない場合は、基になる <xref:System.IO.Stream> も再初期化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-616">If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized.</span></span> <span data-ttu-id="8bfe0-617">このような状況を回避し、堅牢なコードを生成するには、<xref:System.Console.KeyAvailable%2A> プロパティと <xref:System.Console.ReadKey%2A> メソッドを使用し、事前に割り当てられたバッファーに読み取り文字を格納する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-617">To avoid such a situation and to produce robust code, you should use the <xref:System.Console.KeyAvailable%2A> property and <xref:System.Console.ReadKey%2A> method and store the read characters in a pre-allocated buffer.</span></span>  
  
 <span data-ttu-id="8bfe0-618">メソッドがコンソールから入力を読み取っているときに Ctrl + Z 文字が押された場合、メソッドは `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-618">If the Ctrl+Z character is pressed when the method is reading input from the console, the method returns `null`.</span></span> <span data-ttu-id="8bfe0-619">これにより、ループで <xref:System.Console.ReadLine%2A> メソッドが呼び出されたときに、ユーザーはそれ以上キーボード入力を行うことができなくなります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-619">This enables the user to prevent further keyboard input when the <xref:System.Console.ReadLine%2A> method is called in a loop.</span></span> <span data-ttu-id="8bfe0-620">次の例は、このシナリオを示しています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-620">The following example illustrates this scenario.</span></span>  
  
 [!code-cpp[System.Console.ReadLine#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/readline2.cpp#1)]
 [!code-csharp[System.Console.ReadLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine2.cs#1)]
 [!code-vb[System.Console.ReadLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine2.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-621">次の例では、既存のテキストファイルの名前と出力を書き込むファイルの名前の2つのコマンドライン引数が必要です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-621">The following example requires two command line arguments: the name of an existing text file, and the name of a file to write the output to.</span></span> <span data-ttu-id="8bfe0-622">既存のテキストファイルを開き、キーボードからそのファイルに標準入力をリダイレクトします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-622">It opens the existing text file and redirects the standard input from the keyboard to that file.</span></span> <span data-ttu-id="8bfe0-623">また、標準出力をコンソールから出力ファイルにリダイレクトします。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-623">It also redirects the standard output from the console to the output file.</span></span> <span data-ttu-id="8bfe0-624">次に、<xref:System.Console.ReadLine%2A?displayProperty=nameWithType> メソッドを使用してファイル内の各行を読み取り、4つのスペースのすべてのシーケンスをタブ文字に置き換え、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドを使用して結果を出力ファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-624">It then uses the <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method to read each line in the file, replaces every sequence of four spaces with a tab character, and uses the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method to write the result to the output file.</span></span>  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-625">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-625">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="8bfe0-626">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-626">There is insufficient memory to allocate a buffer for the returned string.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-627">次の文字行の文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-627">The number of characters in the next line of characters is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="ResetColor">
      <MemberSignature Language="C#" Value="public static void ResetColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ResetColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetColor();" />
      <MemberSignature Language="F#" Value="static member ResetColor : unit -&gt; unit" Usage="System.Console.ResetColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bfe0-628">コンソールの前景色および背景色を既定値に設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-628">Sets the foreground and background console colors to their defaults.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-629">前景色と背景色は、現在のプロセスの開始時に存在していた色に復元されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-629">The foreground and background colors are restored to the colors that existed when the current process began.</span></span> <span data-ttu-id="8bfe0-630">詳細については、<xref:System.Console.ForegroundColor%2A> プロパティおよび <xref:System.Console.BackgroundColor%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-630">For more information, see the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-631">次の例では、<xref:System.ConsoleColor> 列挙型の値を配列に保存し、<xref:System.Console.BackgroundColor%2A> および <xref:System.Console.ForegroundColor%2A> プロパティの現在の値を変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-631">The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and <xref:System.Console.ForegroundColor%2A> properties to variables.</span></span> <span data-ttu-id="8bfe0-632">次に、現在の背景と一致する色を除き、<xref:System.ConsoleColor> 列挙の前景色をそれぞれの色に変更し、現在の前景に一致する色以外の <xref:System.ConsoleColor> 列挙体の各色に背景色を変更します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-632">It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground.</span></span> <span data-ttu-id="8bfe0-633">(前景色が背景色と同じ場合、テキストは表示されません)。最後に、<xref:System.Console.ResetColor%2A> メソッドを呼び出して、元のコンソールの色を復元します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-633">(If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.</span></span>  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-634">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-634">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-635">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-635">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetBufferSize">
      <MemberSignature Language="C#" Value="public static void SetBufferSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBufferSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetBufferSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetBufferSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetBufferSize(int width, int height);" />
      <MemberSignature Language="F#" Value="static member SetBufferSize : int * int -&gt; unit" Usage="System.Console.SetBufferSize (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="height" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="width"><span data-ttu-id="8bfe0-636">列数で指定されたバッファー領域の幅。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-636">The width of the buffer area measured in columns.</span></span></param>
        <param name="height"><span data-ttu-id="8bfe0-637">行数で指定されたバッファー領域の高さ。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-637">The height of the buffer area measured in rows.</span></span></param>
        <summary><span data-ttu-id="8bfe0-638">画面バッファー領域の高さと幅を指定された値に設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-638">Sets the height and width of the screen buffer area to the specified values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8bfe0-639">次の例では、<xref:System.Console.WindowLeft%2A>、<xref:System.Console.WindowTop%2A>、<xref:System.Console.WindowWidth%2A>、<xref:System.Console.WindowHeight%2A>、<xref:System.Console.BufferWidth%2A>、<xref:System.Console.BufferHeight%2A>、および <xref:System.Console.CursorVisible%2A> の各プロパティについて説明します。および <xref:System.Console.SetWindowPosition%2A>、<xref:System.Console.SetBufferSize%2A>、および <xref:System.Console.ReadKey%2A> メソッド。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-639">The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods.</span></span> <span data-ttu-id="8bfe0-640">この例では、画面バッファーの幅に基づいて、画面バッファーにグリッドパターンを描画します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-640">The example draws a grid pattern in the screen buffer based on the screen buffer width.</span></span> <span data-ttu-id="8bfe0-641">次に、上矢印、下矢印、左矢印、または右矢印の各コンソールキーが押されたときに、コンソールウィンドウが移動します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-641">Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed.</span></span> <span data-ttu-id="8bfe0-642">グリッドパターンを使用すると、画面バッファーに対するコンソールウィンドウの移動を確認できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-642">The grid pattern helps you see the movement of the console window relative to the screen buffer.</span></span>  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
 [!code-fsharp[console.windowLT#1](~/samples/snippets/fsharp/VS_Snippets_CLR/console.windowLT/FS/wlt.fs#1)] 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-643"><paramref name="height" /> または <paramref name="width" /> が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-643"><paramref name="height" /> or <paramref name="width" /> is less than or equal to zero.</span></span>  
  
<span data-ttu-id="8bfe0-644">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-644">-or-</span></span> 
 <span data-ttu-id="8bfe0-645"><paramref name="height" /> または <paramref name="width" /> が <see cref="F:System.Int16.MaxValue" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-645"><paramref name="height" /> or <paramref name="width" /> is greater than or equal to <see cref="F:System.Int16.MaxValue" />.</span></span>  
  
<span data-ttu-id="8bfe0-646">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-646">-or-</span></span> 
 <span data-ttu-id="8bfe0-647"><paramref name="width" /> は <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" /> より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-647"><paramref name="width" /> is less than <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />.</span></span>  
  
<span data-ttu-id="8bfe0-648">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-648">-or-</span></span> 
 <span data-ttu-id="8bfe0-649"><paramref name="height" /> は <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" /> より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-649"><paramref name="height" /> is less than <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-650">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-650">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-651">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-651">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-652">現在のオペレーティング システムは Windows ではありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-652">The current operating system is not Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPosition">
      <MemberSignature Language="C#" Value="public static void SetCursorPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCursorPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetCursorPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCursorPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCursorPosition(int left, int top);" />
      <MemberSignature Language="F#" Value="static member SetCursorPosition : int * int -&gt; unit" Usage="System.Console.SetCursorPosition (left, top)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="top" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8bfe0-653">カーソルを置く列の位置。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-653">The column position of the cursor.</span></span> <span data-ttu-id="8bfe0-654">列は左から右に向かって、0 から始まる番号が付けられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-654">Columns are numbered from left to right starting at 0.</span></span></param>
        <param name="top"><span data-ttu-id="8bfe0-655">カーソルを置く行の位置。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-655">The row position of the cursor.</span></span> <span data-ttu-id="8bfe0-656">行には、上から下に向かって 0 から始まる番号が付けられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-656">Rows are numbered from top to bottom starting at 0.</span></span></param>
        <summary><span data-ttu-id="8bfe0-657">カーソルの位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-657">Sets the position of the cursor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-658"><xref:System.Console.SetCursorPosition%2A> メソッドを使用して、コンソールウィンドウで次の書き込み操作を開始する場所を指定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-658">Use the <xref:System.Console.SetCursorPosition%2A> method to specify where the next write operation in the console window is to begin.</span></span> <span data-ttu-id="8bfe0-659">指定したカーソル位置が、コンソールウィンドウに現在表示されている領域の外側にある場合は、ウィンドウの原点が自動的に変更され、カーソルが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-659">If the specified cursor position is outside the area that is currently visible in the console window, the window origin changes automatically to make the cursor visible.</span></span>  
  
 <span data-ttu-id="8bfe0-660">カーソルは、文字がコンソールウィンドウに書き込まれるたびに、次の文字位置に自動的に移動します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-660">The cursor automatically moves to the next character position each time a character is written to the console window.</span></span> <span data-ttu-id="8bfe0-661">カーソルがコンソールウィンドウの右下の文字位置にある場合は、次の書き込み操作によってコンソールウィンドウがスクロールされ、カーソルが表示されたままになります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-661">If the cursor is at the bottom right character position of the console window, the next write operation causes the console window to scroll so the cursor remains visible.</span></span> <span data-ttu-id="8bfe0-662">コンソールウィンドウのスクロールを行わずに、末尾の文字位置に文字を記述する場合は、<xref:System.Console.MoveBufferArea%2A> メソッドを使用して、文字をその位置に移動します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-662">If you want to write a character to the bottom right character position without causing the console window to scroll, use the <xref:System.Console.MoveBufferArea%2A> method to move a character to that position.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-663">この例では、<xref:System.Console.CursorLeft%2A> と <xref:System.Console.CursorTop%2A> のプロパティ、および <xref:System.Console.SetCursorPosition%2A> および <xref:System.Console.Clear%2A> メソッドを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-663">This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods.</span></span> <span data-ttu-id="8bfe0-664">この例では、カーソルを移動し、次の書き込みが行われる場所を決定します。これにより、"+"、"&#124;"、および "-" の文字列を組み合わせて、5文字の四角形で5文字を描画します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-664">The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "&#124;", and "-" strings.</span></span> <span data-ttu-id="8bfe0-665">四角形は、他の文字列の組み合わせを使用して、より少数の手順で描画できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-665">Note that the rectangle could be drawn with fewer steps using a combination of other strings.</span></span>  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-666"><paramref name="left" /> または <paramref name="top" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-666"><paramref name="left" /> or <paramref name="top" /> is less than zero.</span></span>  
  
<span data-ttu-id="8bfe0-667">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-667">-or-</span></span> 
 <span data-ttu-id="8bfe0-668"><paramref name="left" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-668"><paramref name="left" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.</span></span>  
  
<span data-ttu-id="8bfe0-669">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-669">-or-</span></span> 
 <span data-ttu-id="8bfe0-670"><paramref name="top" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-670"><paramref name="top" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-671">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-671">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-672">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-672">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetError">
      <MemberSignature Language="C#" Value="public static void SetError (System.IO.TextWriter newError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetError(class System.IO.TextWriter newError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetError(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetError (newError As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetError(System::IO::TextWriter ^ newError);" />
      <MemberSignature Language="F#" Value="static member SetError : System.IO.TextWriter -&gt; unit" Usage="System.Console.SetError newError" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newError" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newError"><span data-ttu-id="8bfe0-673">新しい標準エラー出力であるストリーム。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-673">A stream that is the new standard error output.</span></span></param>
        <summary><span data-ttu-id="8bfe0-674"><see cref="P:System.Console.Error" /> プロパティを、指定した <see cref="T:System.IO.TextWriter" /> オブジェクトに設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-674">Sets the <see cref="P:System.Console.Error" /> property to the specified <see cref="T:System.IO.TextWriter" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-675">既定では、<xref:System.Console.Error%2A> プロパティは、標準エラー出力ストリームに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-675">By default, the <xref:System.Console.Error%2A> property is set to the standard error output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-676"><xref:System.IO.FileStream> をカプセル化した <xref:System.IO.StreamWriter> は、エラーメッセージをファイルに送信するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-676">A <xref:System.IO.StreamWriter> that encapsulates a <xref:System.IO.FileStream> can be used to send error messages to a file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-677">次の例は、標準エラーストリームをファイルにリダイレクトする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-677">The following example shows how to redirect the standard error stream to a file.</span></span>  
  
 [!code-cpp[System.Console.SetError#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.SetError/cpp/seterror1.cpp#1)]
 [!code-csharp[System.Console.SetError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.SetError/cs/SetError1.cs#1)]
 [!code-vb[System.Console.SetError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.SetError/vb/SetError1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-678"><paramref name="newError" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-678"><paramref name="newError" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-679">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-679">The caller does not have the required permission.</span></span></exception>
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="P:System.Console.Error" />
      </Docs>
    </Member>
    <Member MemberName="SetIn">
      <MemberSignature Language="C#" Value="public static void SetIn (System.IO.TextReader newIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIn(class System.IO.TextReader newIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetIn(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetIn (newIn As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIn(System::IO::TextReader ^ newIn);" />
      <MemberSignature Language="F#" Value="static member SetIn : System.IO.TextReader -&gt; unit" Usage="System.Console.SetIn newIn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newIn" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="newIn"><span data-ttu-id="8bfe0-680">新しい標準入力であるストリーム。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-680">A stream that is the new standard input.</span></span></param>
        <summary><span data-ttu-id="8bfe0-681"><see cref="P:System.Console.In" /> プロパティを、指定した <see cref="T:System.IO.TextReader" /> オブジェクトに設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-681">Sets the <see cref="P:System.Console.In" /> property to the specified <see cref="T:System.IO.TextReader" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-682">既定では、<xref:System.Console.In%2A> プロパティは標準入力ストリームに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-682">By default, the <xref:System.Console.In%2A> property is set to the standard input stream.</span></span>  
  
 <span data-ttu-id="8bfe0-683"><xref:System.IO.FileStream> をカプセル化した <xref:System.IO.StreamReader> は、ファイルからの入力を受信するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-683">A <xref:System.IO.StreamReader> that encapsulates a <xref:System.IO.FileStream> can be used to receive input from a file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-684"><xref:System.Console.SetIn%2A>メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-684">The following example illustrates the use of the <xref:System.Console.SetIn%2A> method.</span></span> <span data-ttu-id="8bfe0-685">これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-685">It replaces four consecutive space characters in a string with a tab character.</span></span> <span data-ttu-id="8bfe0-686">これを実行するには、2つのコマンドライン引数を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-686">To run it, you must supply two command line arguments.</span></span> <span data-ttu-id="8bfe0-687">1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-687">The first is the name of an existing text file to redirect the standard input stream to.</span></span> <span data-ttu-id="8bfe0-688">2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-688">The second is the name of a file to redirect the standard output stream to.</span></span> <span data-ttu-id="8bfe0-689">このファイルは存在する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-689">This file need not exist.</span></span> <span data-ttu-id="8bfe0-690">ファイルが存在する場合は、その内容が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-690">If it does, its contents will be overwritten.</span></span>  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-691"><paramref name="newIn" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-691"><paramref name="newIn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-692">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-692">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.IO.TextReader" />
        <altmember cref="P:System.Console.In" />
      </Docs>
    </Member>
    <Member MemberName="SetOut">
      <MemberSignature Language="C#" Value="public static void SetOut (System.IO.TextWriter newOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOut(class System.IO.TextWriter newOut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetOut(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetOut (newOut As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetOut(System::IO::TextWriter ^ newOut);" />
      <MemberSignature Language="F#" Value="static member SetOut : System.IO.TextWriter -&gt; unit" Usage="System.Console.SetOut newOut" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newOut" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newOut"><span data-ttu-id="8bfe0-693">新しい標準出力として使用されるテキスト ライター。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-693">A text writer to be used as the new standard output.</span></span></param>
        <summary><span data-ttu-id="8bfe0-694"><see cref="P:System.Console.Out" /> プロパティを <see cref="T:System.IO.TextWriter" /> オブジェクトをターゲットとするように設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-694">Sets the <see cref="P:System.Console.Out" /> property to target the <see cref="T:System.IO.TextWriter" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-695">既定では、<xref:System.Console.Out%2A> プロパティは標準出力ストリームに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-695">By default, the <xref:System.Console.Out%2A> property is set to the standard output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-696"><xref:System.IO.FileStream> をカプセル化する <xref:System.IO.StreamWriter> は、出力をファイルに送信するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-696">A <xref:System.IO.StreamWriter> that encapsulates a <xref:System.IO.FileStream> can be used to send output to a file.</span></span> <span data-ttu-id="8bfe0-697">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-697">For example:</span></span>  
  
 [!code-cpp[System.Console.SetOut#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.setout/cpp/source.cpp#1)]
 [!code-csharp[System.Console.SetOut#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.setout/cs/source.cs#1)]
 [!code-vb[System.Console.SetOut#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.setout/vb/source.vb#1)]  
  
 <span data-ttu-id="8bfe0-698"><xref:System.Console.Out%2A> によって返される実際のオブジェクトは、指定されたテキストライターを囲む同期ラッパーである場合があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-698">The actual object returned by <xref:System.Console.Out%2A> may be a synchronized wrapper around the provided text writer.</span></span>
  
## Examples  
 <span data-ttu-id="8bfe0-699"><xref:System.Console.SetOut%2A>メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-699">The following example illustrates the use of the <xref:System.Console.SetOut%2A> method.</span></span> <span data-ttu-id="8bfe0-700">これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-700">It replaces four consecutive space characters in a string with a tab character.</span></span> <span data-ttu-id="8bfe0-701">これを実行するには、2つのコマンドライン引数を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-701">To run it, you must supply two command line arguments.</span></span> <span data-ttu-id="8bfe0-702">1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-702">The first is the name of an existing text file to redirect the standard input stream to.</span></span> <span data-ttu-id="8bfe0-703">2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-703">The second is the name of a file to redirect the standard output stream to.</span></span> <span data-ttu-id="8bfe0-704">このファイルは存在する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-704">This file need not exist.</span></span> <span data-ttu-id="8bfe0-705">ファイルが存在する場合は、その内容が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-705">If it does, its contents will be overwritten.</span></span>  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-706"><paramref name="newOut" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-706"><paramref name="newOut" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-707">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-707">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="SetWindowPosition">
      <MemberSignature Language="C#" Value="public static void SetWindowPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowPosition(int left, int top);" />
      <MemberSignature Language="F#" Value="static member SetWindowPosition : int * int -&gt; unit" Usage="System.Console.SetWindowPosition (left, top)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="top" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="8bfe0-708">コンソール ウィンドウの左上隅の列位置。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-708">The column position of the upper left  corner of the console window.</span></span></param>
        <param name="top"><span data-ttu-id="8bfe0-709">コンソール ウィンドウの左上隅の行位置。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-709">The row position of the upper left corner of the console window.</span></span></param>
        <summary><span data-ttu-id="8bfe0-710">画面バッファーに対するコンソール ウィンドウの相対位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-710">Sets the position of the console window relative to the screen buffer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-711">[オペレーティングシステム] ウィンドウにコンソールウィンドウが表示され、コンソールウィンドウに画面バッファーの一部が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-711">The operating system window displays the console window, and the console window displays a portion of the screen buffer.</span></span> <span data-ttu-id="8bfe0-712"><xref:System.Console.SetWindowPosition%2A> メソッドは、画面バッファーに対するコンソールウィンドウの相対位置に影響しますが、デスクトップに関連するオペレーティングシステムウィンドウの位置には影響しません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-712">The <xref:System.Console.SetWindowPosition%2A> method affects the position of the console window relative to the screen buffer, but does not affect the position of the operating system window relative to the desktop.</span></span>  
  
 <span data-ttu-id="8bfe0-713">コンソールとオペレーティングシステムのウィンドウは、通常、互いに影響しません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-713">The console and operating system windows generally do not affect each other.</span></span> <span data-ttu-id="8bfe0-714">ただし、コンソールウィンドウの現在の境界に画面バッファーを表示できない場合、オペレーティングシステムは自動的にオペレーティングシステムウィンドウにスクロールバーを追加します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-714">However, if the screen buffer cannot be displayed in the current boundaries of the console window, the operating system automatically appends scroll bars to the operating system window.</span></span> <span data-ttu-id="8bfe0-715">この場合、オペレーティングシステムのウィンドウのスクロールバーを移動すると、コンソールウィンドウの位置に影響し、<xref:System.Console.SetWindowPosition%2A> メソッドを使用してコンソールウィンドウを移動すると、オペレーティングシステムのウィンドウのスクロールバーの位置に影響します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-715">In that case, moving the operating system window scroll bars affects the position of the console window, and moving the console window with the <xref:System.Console.SetWindowPosition%2A> method affects the position of the operating system window scroll bars.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-716">次の例では、<xref:System.Console.WindowLeft%2A>、<xref:System.Console.WindowTop%2A>、<xref:System.Console.WindowWidth%2A>、<xref:System.Console.WindowHeight%2A>、<xref:System.Console.BufferWidth%2A>、<xref:System.Console.BufferHeight%2A>、および <xref:System.Console.CursorVisible%2A> の各プロパティについて説明します。および <xref:System.Console.SetWindowPosition%2A>、<xref:System.Console.SetBufferSize%2A>、および <xref:System.Console.ReadKey%2A> メソッド。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-716">The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods.</span></span> <span data-ttu-id="8bfe0-717">この例では、画面バッファーの幅に基づいて、画面バッファーにグリッドパターンを描画します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-717">The example draws a grid pattern in the screen buffer based on the screen buffer width.</span></span> <span data-ttu-id="8bfe0-718">次に、上矢印、下矢印、左矢印、または右矢印の各コンソールキーが押されたときに、コンソールウィンドウが移動します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-718">Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed.</span></span> <span data-ttu-id="8bfe0-719">グリッドパターンを使用すると、画面バッファーに対するコンソールウィンドウの移動を確認できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-719">The grid pattern helps you see the movement of the console window relative to the screen buffer.</span></span>  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
 [!code-fsharp[console.windowLT#1](~/samples/snippets/fsharp/VS_Snippets_CLR/console.windowLT/FS/wlt.fs#1)] 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-720"><paramref name="left" /> または <paramref name="top" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-720"><paramref name="left" /> or <paramref name="top" /> is less than zero.</span></span>  
  
<span data-ttu-id="8bfe0-721">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-721">-or-</span></span> 
 <span data-ttu-id="8bfe0-722"><paramref name="left" /> + <see cref="P:System.Console.WindowWidth" /> は <see cref="P:System.Console.BufferWidth" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-722"><paramref name="left" /> + <see cref="P:System.Console.WindowWidth" /> is greater than <see cref="P:System.Console.BufferWidth" />.</span></span>  
  
<span data-ttu-id="8bfe0-723">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-723">-or-</span></span> 
 <span data-ttu-id="8bfe0-724"><paramref name="top" /> + <see cref="P:System.Console.WindowHeight" /> は <see cref="P:System.Console.BufferHeight" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-724"><paramref name="top" /> + <see cref="P:System.Console.WindowHeight" /> is greater than <see cref="P:System.Console.BufferHeight" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-725">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-725">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-726">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-726">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-727">現在のオペレーティング システムは Windows ではありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-727">The current operating system is not Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetWindowSize">
      <MemberSignature Language="C#" Value="public static void SetWindowSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowSize(int width, int height);" />
      <MemberSignature Language="F#" Value="static member SetWindowSize : int * int -&gt; unit" Usage="System.Console.SetWindowSize (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="height" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="width"><span data-ttu-id="8bfe0-728">列数で指定されたコンソール ウィンドウの幅。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-728">The width of the console window measured in columns.</span></span></param>
        <param name="height"><span data-ttu-id="8bfe0-729">行数で指定されたコンソール ウィンドウの高さ。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-729">The height of the console window measured in rows.</span></span></param>
        <summary><span data-ttu-id="8bfe0-730">コンソール ウィンドウの高さと幅を指定された値に設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-730">Sets the height and width of the console window to the specified values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8bfe0-731">この例では、<xref:System.Console.SetWindowSize%2A> メソッドと、<xref:System.Console.WindowWidth%2A> プロパティと <xref:System.Console.WindowHeight%2A> プロパティについて説明します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-731">This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the <xref:System.Console.WindowWidth%2A> and <xref:System.Console.WindowHeight%2A> properties.</span></span> <span data-ttu-id="8bfe0-732">この例を実行して、コンソールウィンドウのサイズを変更した場合の影響をすべて確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-732">You must run the example to see the full effect of changing the console window size.</span></span>  
  
 <span data-ttu-id="8bfe0-733">この例では、コンソールウィンドウのサイズを85列と43行に設定し、キーが押されるのを待機します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-733">The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key to be pressed.</span></span> <span data-ttu-id="8bfe0-734">いずれかのキーが押されると、コンソールウィンドウの大きさが半分になり、新しい寸法が報告されます。この例では、別のキー押下を待機します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-734">When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press.</span></span> <span data-ttu-id="8bfe0-735">最後に、いずれかのキーが押されると、コンソールウィンドウが元のディメンションに復元され、例が終了します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-735">Finally, when any key is pressed, the console window is restored to its original dimensions and the example terminates.</span></span>  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-736"><paramref name="width" /> または <paramref name="height" /> が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-736"><paramref name="width" /> or <paramref name="height" /> is less than or equal to zero.</span></span>  
  
<span data-ttu-id="8bfe0-737">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-737">-or-</span></span> 
 <span data-ttu-id="8bfe0-738"><paramref name="width" /> に <see cref="P:System.Console.WindowLeft" /> を加算した値、または <paramref name="height" /> に <see cref="P:System.Console.WindowTop" /> を加算した値が <see cref="F:System.Int16.MaxValue" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-738"><paramref name="width" /> plus <see cref="P:System.Console.WindowLeft" /> or <paramref name="height" /> plus <see cref="P:System.Console.WindowTop" /> is greater than or equal to <see cref="F:System.Int16.MaxValue" />.</span></span>  
  
<span data-ttu-id="8bfe0-739">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-739">-or-</span></span> 
 <span data-ttu-id="8bfe0-740"><paramref name="width" /> または <paramref name="height" /> が、現在の画面解像度とコンソールのフォントで利用可能なウィンドウの最大幅または高さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-740"><paramref name="width" /> or <paramref name="height" /> is greater than the largest possible window width or height for the current screen resolution and console font.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8bfe0-741">ユーザーにはこの操作を実行する権限がありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-741">The user does not have permission to perform this action.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-742">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-742">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-743">現在のオペレーティング システムは Windows ではありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-743">The current operating system is not Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public static string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string Title" />
      <MemberSignature Language="DocId" Value="P:System.Console.Title" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Console.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-744">コンソールのタイトル バーに表示するタイトルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-744">Gets or sets the title to display in the console title bar.</span></span></summary>
        <value><span data-ttu-id="8bfe0-745">コンソールのタイトル バーに表示される文字列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-745">The string to be displayed in the title bar of the console.</span></span> <span data-ttu-id="8bfe0-746">タイトル文字列の最大長は 24500 文字です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-746">The maximum length of the title string is 24500 characters.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8bfe0-747">この例では、<xref:System.Console.Title%2A> プロパティを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-747">This example demonstrates the <xref:System.Console.Title%2A> property.</span></span> <span data-ttu-id="8bfe0-748">この例では、オペレーティングシステムウィンドウの現在のタイトルが表示され、キーが押されるのを待ってから、新しいタイトルが表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-748">The example displays the current title of the operating system window, waits for a key press, then displays a new title.</span></span>  
  
 [!code-cpp[console.title#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.title/CPP/mytitle.cpp#1)]
 [!code-csharp[console.title#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.title/CS/mytitle.cs#1)]
 [!code-vb[console.title#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.title/VB/mytitle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8bfe0-749">取得操作において、取得したタイトルが 24500 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-749">In a get operation, the retrieved title is longer than 24500 characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-750">設定操作において、指定されたしたタイトルが 24500 文字を超えています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-750">In a set operation, the specified title is longer than 24500 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-751">設定操作で、指定されたタイトルが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-751">In a set operation, the specified title is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-752">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-752">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-753">取得操作は Windows 以外のオペレーティング システムで呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-753">The get operation is invoked on an operating system other than Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TreatControlCAsInput">
      <MemberSignature Language="C#" Value="public static bool TreatControlCAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool TreatControlCAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Console.TreatControlCAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TreatControlCAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool TreatControlCAsInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TreatControlCAsInput : bool with get, set" Usage="System.Console.TreatControlCAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-754"><see cref="F:System.ConsoleModifiers.Control" /> 修飾キーと <see cref="F:System.ConsoleKey.C" /> コンソール キーの組み合わせ (Ctrl + C) を、通常の入力として扱うか、オペレーティング システムにより処理される割り込みとして扱うかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-754">Gets or sets a value indicating whether the combination of the <see cref="F:System.ConsoleModifiers.Control" /> modifier key and <see cref="F:System.ConsoleKey.C" /> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.</span></span></summary>
        <value><span data-ttu-id="8bfe0-755">Ctrl + C を通常の入力として扱う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-755"><see langword="true" /> if Ctrl+C is treated as ordinary input; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-756"><xref:System.Console.TreatControlCAsInput%2A> プロパティの値が `false` で Ctrl + C キーを押すと、押されたキーは入力バッファーに格納されず、オペレーティングシステムは現在実行中のプロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-756">If the value of the <xref:System.Console.TreatControlCAsInput%2A> property is `false` and Ctrl+C is pressed, the pressed keys are not stored in the input buffer and the operating system terminates the currently executing process.</span></span> <span data-ttu-id="8bfe0-757">これが既定値です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-757">This is the default value.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="8bfe0-758">このプロパティを `true` に設定すると、非常に大きな効果があるため、慎重に使用してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-758">Use this property judiciously because setting it to `true` has such a dramatic effect.</span></span> <span data-ttu-id="8bfe0-759">ほとんどのユーザーは、Ctrl + C キーを押してコンソールアプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-759">Most users expect Ctrl+C to terminate a console application.</span></span> <span data-ttu-id="8bfe0-760">Ctrl + C の効果を無効にした場合、ユーザーは、Ctrl + Break キーを使用してアプリケーションを終了することを覚えておく必要があります。これは、あまりなじみのないキーの組み合わせです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-760">If you disable the effect of Ctrl+C, the user must remember to use Ctrl+Break to terminate the application, which is a less familiar key combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-761"><xref:System.Console.TreatControlCAsInput%2A>プロパティの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-761">The following example demonstrates the <xref:System.Console.TreatControlCAsInput%2A> property.</span></span>  
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-762">コンソールの入力バッファーの入力モードを取得または設定できません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-762">Unable to get or set the input mode of the console input buffer.</span></span></exception>
        <altmember cref="F:System.ConsoleModifiers.Control" />
        <altmember cref="F:System.ConsoleKey.C" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="WindowHeight">
      <MemberSignature Language="C#" Value="public static int WindowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowHeight : int with get, set" Usage="System.Console.WindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-763">コンソール ウィンドウ領域の高さを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-763">Gets or sets the height of the console window area.</span></span></summary>
        <value><span data-ttu-id="8bfe0-764">行数で指定されたコンソール ウィンドウの高さ。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-764">The height of the console window measured in rows.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-765">出力がリダイレクトされるときに <xref:System.Console.WindowHeight%2A> プロパティの値を設定しようとすると、<xref:System.ArgumentOutOfRangeException> または <xref:System.IO.IOException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-765">Attempting to set the value of the <xref:System.Console.WindowHeight%2A> property when output is redirected throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.IO.IOException> exception.</span></span> <span data-ttu-id="8bfe0-766">例外を回避するには、<xref:System.Console.IsOutputRedirected%2A> プロパティが `false`を返す場合にのみ、このプロパティの値を設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-766">To prevent an exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-767">この例では、<xref:System.Console.SetWindowSize%2A> メソッドと、<xref:System.Console.WindowWidth%2A> プロパティと <xref:System.Console.WindowHeight%2A> プロパティについて説明します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-767">This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the <xref:System.Console.WindowWidth%2A> and <xref:System.Console.WindowHeight%2A> properties.</span></span> <span data-ttu-id="8bfe0-768">この例を実行して、コンソールウィンドウのサイズを変更した場合の影響をすべて確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-768">You must run the example to see the full effect of changing the console window size.</span></span>  
  
 <span data-ttu-id="8bfe0-769">この例では、コンソールウィンドウのサイズを85列と43行に設定し、キーを押すまで待機します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-769">The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press.</span></span> <span data-ttu-id="8bfe0-770">いずれかのキーが押されると、コンソールウィンドウの大きさが半分になり、新しい寸法が報告されます。この例では、別のキー押下を待機します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-770">When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press.</span></span> <span data-ttu-id="8bfe0-771">最後に、いずれかのキーを押すと、コンソールウィンドウが元のディメンションに復元され、例が終了します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-771">Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.</span></span>  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-772"><see cref="P:System.Console.WindowWidth" /> プロパティの値または <see cref="P:System.Console.WindowHeight" /> プロパティの値が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-772">The value of the <see cref="P:System.Console.WindowWidth" /> property or the value of the <see cref="P:System.Console.WindowHeight" /> property is less than or equal to 0.</span></span>  
  
<span data-ttu-id="8bfe0-773">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-773">-or-</span></span> 
<span data-ttu-id="8bfe0-774"><see cref="P:System.Console.WindowHeight" /> プロパティの値と <see cref="P:System.Console.WindowTop" /> プロパティの値を加算した値が <see cref="F:System.Int16.MaxValue" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-774">The value of the <see cref="P:System.Console.WindowHeight" /> property plus the value of the <see cref="P:System.Console.WindowTop" /> property is greater than or equal to <see cref="F:System.Int16.MaxValue" />.</span></span>  
  
<span data-ttu-id="8bfe0-775">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-775">-or-</span></span> 
<span data-ttu-id="8bfe0-776"><see cref="P:System.Console.WindowWidth" /> プロパティの値または <see cref="P:System.Console.WindowHeight" /> プロパティの値が、現在の画面の解像度およびコンソールのフォントで利用可能なウィンドウの最大幅か最大の高さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-776">The value of the <see cref="P:System.Console.WindowWidth" /> property or the value of the <see cref="P:System.Console.WindowHeight" /> property is greater than the largest possible window width or height for the current screen resolution and console font.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-777">読み取りまたは書き込み情報エラー。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-777">Error reading or writing information.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-778">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-778">The set operation is invoked on an operating system other than Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WindowLeft">
      <MemberSignature Language="C#" Value="public static int WindowLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowLeft : int with get, set" Usage="System.Console.WindowLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-779">コンソール ウィンドウ領域の左端の位置を、画面バッファーに対する相対位置として取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-779">Gets or sets the leftmost position of the console window area relative to the screen buffer.</span></span></summary>
        <value><span data-ttu-id="8bfe0-780">コンソール ウィンドウの左端の位置 (列)。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-780">The leftmost console window position measured in columns.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-781">コンソールは、四角形のウィンドウを四角形の大きなバッファー領域に表します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-781">The console represents a rectangular window into a larger rectangular buffer area.</span></span> <span data-ttu-id="8bfe0-782">ウィンドウとバッファーは両方とも、行の数によって垂直方向に、列の数で水平に計測されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-782">Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns.</span></span> <span data-ttu-id="8bfe0-783">バッファー領域の大きさは、<xref:System.Console.BufferHeight%2A> プロパティと <xref:System.Console.BufferWidth%2A> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-783">The dimensions of the buffer area are defined by the <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties.</span></span> <span data-ttu-id="8bfe0-784">コンソール領域の大きさは、<xref:System.Console.WindowHeight%2A> プロパティと <xref:System.Console.WindowWidth%2A> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-784">The dimensions of the console area are defined by the <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties.</span></span> <span data-ttu-id="8bfe0-785"><xref:System.Console.WindowLeft%2A> プロパティによって、コンソールウィンドウの最初の列に表示されるバッファー領域の列が決まります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-785">The <xref:System.Console.WindowLeft%2A> property determines which column of the buffer area is displayed in the first column of the console window.</span></span> <span data-ttu-id="8bfe0-786"><xref:System.Console.WindowLeft%2A> プロパティの値は、0から <xref:System.Console.BufferWidth%2A> - <xref:System.Console.WindowWidth%2A>までの範囲で指定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-786">The value of the <xref:System.Console.WindowLeft%2A> property can range from 0 to <xref:System.Console.BufferWidth%2A> - <xref:System.Console.WindowWidth%2A>.</span></span> <span data-ttu-id="8bfe0-787">この範囲外の値に設定しようとすると、<xref:System.ArgumentOutOfRangeException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-787">Attempting to set it to a value outside that range throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="8bfe0-788">コンソールウィンドウを初めて開いたときは、<xref:System.Console.WindowLeft%2A> プロパティの既定値は0です。これは、コンソールに表示される最初の列が、バッファー領域の最初の列 (位置0の列) に対応することを示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-788">When a console window first opens, the default value of the <xref:System.Console.WindowLeft%2A> property is zero, which indicates that the first column shown by the console corresponds to the first column (the column at position zero) in the buffer area.</span></span> <span data-ttu-id="8bfe0-789">コンソールウィンドウとバッファー領域の既定の幅は、どちらも80列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-789">The default width of both the console window and the buffer area is 80 columns.</span></span> <span data-ttu-id="8bfe0-790">これは、コンソールウィンドウの幅が狭い場合や、バッファー領域の幅が広くなっている場合にのみ、<xref:System.Console.WindowLeft%2A> プロパティを変更できることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-790">This means that the <xref:System.Console.WindowLeft%2A> property can be modified only if the console window is made narrower or the buffer area is made wider.</span></span>  
  
 <span data-ttu-id="8bfe0-791">バッファー領域の幅がコンソールウィンドウの幅を超える場合は、ユーザーが水平スクロールバーを使用してバッファー領域へのウィンドウの関係を定義すると、<xref:System.Console.WindowLeft%2A> プロパティの値が自動的に調整されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-791">Note that if the width of the buffer area exceeds the width of the console window, the value of the <xref:System.Console.WindowLeft%2A> property is automatically adjusted when the user uses the horizontal scroll bar to define the window's relationship to the buffer area.</span></span>  
  
 <span data-ttu-id="8bfe0-792">出力のリダイレクト時に <xref:System.Console.WindowLeft%2A> プロパティの値を設定しようとすると、<xref:System.IO.IOException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-792">Attempting to set the value of the <xref:System.Console.WindowLeft%2A> property when output is redirected throws an <xref:System.IO.IOException> exception.</span></span> <span data-ttu-id="8bfe0-793">この例外を回避するには、<xref:System.Console.IsOutputRedirected%2A> プロパティが `false`を返す場合にのみ、このプロパティの値を設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-793">To prevent the exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-794">次の例では、80列のコンソールウィンドウを開き、120列幅のバッファー領域を定義します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-794">The following example opens an 80-column console window and defines a buffer area that is 120 columns wide.</span></span> <span data-ttu-id="8bfe0-795">ウィンドウとバッファーサイズに関する情報を表示し、ユーザーが左方向キーまたは右方向キーを押すまで待機します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-795">It displays information on window and buffer size, and then waits for the user to press either the LEFT ARROW key or the RIGHT ARROW key.</span></span> <span data-ttu-id="8bfe0-796">前者の場合、結果が有効な値である場合は、<xref:System.Console.WindowLeft%2A> プロパティの値が1ずつ減少します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-796">In the former case, it decrements the value of the <xref:System.Console.WindowLeft%2A> property by one if the result is a legal value.</span></span> <span data-ttu-id="8bfe0-797">後者の場合、結果が有効である場合は、<xref:System.Console.WindowLeft%2A> プロパティの値が1ずつ増加します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-797">In the latter case, it increases the value of the <xref:System.Console.WindowLeft%2A> property by one if the result would be legal.</span></span> <span data-ttu-id="8bfe0-798">この例では、<xref:System.ArgumentOutOfRangeException>を処理する必要がないことに注意してください。これは、<xref:System.Console.WindowLeft%2A> プロパティに割り当てられる値が負でないことをチェックし、<xref:System.Console.WindowLeft%2A> および <xref:System.Console.WindowWidth%2A> プロパティの合計が <xref:System.Console.BufferWidth%2A> プロパティ値を超えることがないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-798">Note that the example does not have to handle an <xref:System.ArgumentOutOfRangeException>, because it checks that the value to be assigned to the <xref:System.Console.WindowLeft%2A> property is not negative and does not cause the sum of the <xref:System.Console.WindowLeft%2A> and <xref:System.Console.WindowWidth%2A> properties to exceed the <xref:System.Console.BufferWidth%2A> property value.</span></span>  
  
 [!code-cpp[System.Console.WindowLeft#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.windowleft/cpp/windowleft1.cpp#1)]
 [!code-csharp[System.Console.WindowLeft#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.windowleft/cs/windowleft1.cs#1)]
 [!code-vb[System.Console.WindowLeft#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.windowleft/vb/windowleft1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-799">設定操作で、割り当てられる値が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-799">In a set operation, the value to be assigned is less than zero.</span></span>  
  
<span data-ttu-id="8bfe0-800">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-800">-or-</span></span> 
<span data-ttu-id="8bfe0-801">代入結果として、<see cref="P:System.Console.WindowLeft" /> に <see cref="P:System.Console.WindowWidth" /> を加算すると <see cref="P:System.Console.BufferWidth" /> より大きくなります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-801">As a result of the assignment, <see cref="P:System.Console.WindowLeft" /> plus <see cref="P:System.Console.WindowWidth" /> would exceed <see cref="P:System.Console.BufferWidth" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-802">読み取りまたは書き込み情報エラー。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-802">Error reading or writing information.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-803">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-803">The set operation is invoked on an operating system other than Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WindowTop">
      <MemberSignature Language="C#" Value="public static int WindowTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowTop : int with get, set" Usage="System.Console.WindowTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-804">コンソール ウィンドウ領域の上端の位置を、画面バッファーに対する相対位置として取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-804">Gets or sets the top position of the console window area relative to the screen buffer.</span></span></summary>
        <value><span data-ttu-id="8bfe0-805">コンソール ウィンドウの上端の位置 (行)。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-805">The uppermost console window position measured in rows.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-806">コンソールは、四角形のウィンドウを四角形の大きなバッファー領域に表します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-806">The console represents a rectangular window into a larger rectangular buffer area.</span></span> <span data-ttu-id="8bfe0-807">ウィンドウとバッファーは両方とも、行の数によって垂直方向に、列の数で水平に計測されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-807">Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns.</span></span> <span data-ttu-id="8bfe0-808">バッファー領域の大きさは、<xref:System.Console.BufferHeight%2A> プロパティと <xref:System.Console.BufferWidth%2A> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-808">The dimensions of the buffer area are defined by the <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties.</span></span> <span data-ttu-id="8bfe0-809">コンソール領域の大きさは、<xref:System.Console.WindowHeight%2A> プロパティと <xref:System.Console.WindowWidth%2A> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-809">The dimensions of the console area are defined by the <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties.</span></span> <span data-ttu-id="8bfe0-810"><xref:System.Console.WindowTop%2A> プロパティによって、コンソールウィンドウの最初の列に表示されるバッファー領域の行が決まります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-810">The <xref:System.Console.WindowTop%2A> property determines which row of the buffer area is displayed in the first column of the console window.</span></span> <span data-ttu-id="8bfe0-811"><xref:System.Console.WindowTop%2A> プロパティの値は、0から <xref:System.Console.BufferHeight%2A> - <xref:System.Console.WindowHeight%2A>までの範囲で指定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-811">The value of the <xref:System.Console.WindowTop%2A> property can range from 0 to <xref:System.Console.BufferHeight%2A> - <xref:System.Console.WindowHeight%2A>.</span></span> <span data-ttu-id="8bfe0-812">この範囲外の値に設定しようとすると、<xref:System.ArgumentOutOfRangeException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-812">Attempting to set it to a value outside that range throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="8bfe0-813">出力のリダイレクト時に <xref:System.Console.WindowTop%2A> プロパティの値を設定しようとすると、<xref:System.IO.IOException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-813">Attempting to set the value of the <xref:System.Console.WindowTop%2A> property when output is redirected throws an <xref:System.IO.IOException> exception.</span></span> <span data-ttu-id="8bfe0-814">この例外を回避するには、<xref:System.Console.IsOutputRedirected%2A> プロパティが `false`を返す場合にのみ、このプロパティの値を設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-814">To prevent the exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-815">次の例では、<xref:System.Console.WindowLeft%2A>、<xref:System.Console.WindowTop%2A>、<xref:System.Console.WindowWidth%2A>、<xref:System.Console.WindowHeight%2A>、<xref:System.Console.BufferWidth%2A>、<xref:System.Console.BufferHeight%2A>、および <xref:System.Console.CursorVisible%2A> の各プロパティについて説明します。および <xref:System.Console.SetWindowPosition%2A>、<xref:System.Console.SetBufferSize%2A>、および <xref:System.Console.ReadKey%2A> メソッド。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-815">The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods.</span></span> <span data-ttu-id="8bfe0-816">この例では、画面バッファーの幅に基づいて、画面バッファーにグリッドパターンを描画します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-816">The example draws a grid pattern in the screen buffer based on the screen buffer width.</span></span> <span data-ttu-id="8bfe0-817">次に、上矢印、下矢印、左矢印、または右矢印の各コンソールキーが押されたときに、コンソールウィンドウが移動します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-817">Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed.</span></span> <span data-ttu-id="8bfe0-818">グリッドパターンを使用すると、画面バッファーに対するコンソールウィンドウの移動を確認できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-818">The grid pattern helps you see the movement of the console window relative to the screen buffer.</span></span>  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
 [!code-fsharp[console.windowLT#1](~/samples/snippets/fsharp/VS_Snippets_CLR/console.windowLT/FS/wlt.fs#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-819">設定操作で、割り当てられる値が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-819">In a set operation, the value to be assigned is less than zero.</span></span>  
  
<span data-ttu-id="8bfe0-820">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-820">-or-</span></span> 
<span data-ttu-id="8bfe0-821">代入結果として、<see cref="P:System.Console.WindowTop" /> に <see cref="P:System.Console.WindowHeight" /> を加算すると <see cref="P:System.Console.BufferHeight" /> より大きくなります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-821">As a result of the assignment, <see cref="P:System.Console.WindowTop" /> plus <see cref="P:System.Console.WindowHeight" /> would exceed <see cref="P:System.Console.BufferHeight" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-822">読み取りまたは書き込み情報エラー。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-822">Error reading or writing information.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-823">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-823">The set operation is invoked on an operating system other than Windows.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WindowWidth">
      <MemberSignature Language="C#" Value="public static int WindowWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowWidth : int with get, set" Usage="System.Console.WindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bfe0-824">コンソール ウィンドウの幅を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-824">Gets or sets the width of the console window.</span></span></summary>
        <value><span data-ttu-id="8bfe0-825">列数で指定されたコンソール ウィンドウの幅。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-825">The width of the console window measured in columns.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-826">出力がリダイレクトされるときに <xref:System.Console.WindowWidth%2A> プロパティの値を設定しようとすると、<xref:System.ArgumentOutOfRangeException> または <xref:System.IO.IOException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-826">Attempting to set the value of the <xref:System.Console.WindowWidth%2A> property when output is redirected throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.IO.IOException> exception.</span></span> <span data-ttu-id="8bfe0-827">例外を回避するには、<xref:System.Console.IsOutputRedirected%2A> プロパティが `false`を返す場合にのみ、このプロパティの値を設定できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-827">To prevent an exception, you can set the value of this property only if the <xref:System.Console.IsOutputRedirected%2A> property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-828">この例では、<xref:System.Console.SetWindowSize%2A> メソッドと、<xref:System.Console.WindowWidth%2A> プロパティと <xref:System.Console.WindowHeight%2A> プロパティについて説明します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-828">This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the <xref:System.Console.WindowWidth%2A> and <xref:System.Console.WindowHeight%2A> properties.</span></span> <span data-ttu-id="8bfe0-829">この例を実行して、コンソールウィンドウのサイズを変更した場合の影響をすべて確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-829">You must run the example to see the full effect of changing the console window size.</span></span>  
  
 <span data-ttu-id="8bfe0-830">この例では、コンソールウィンドウのサイズを85列と43行に設定し、キーを押すまで待機します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-830">The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press.</span></span> <span data-ttu-id="8bfe0-831">いずれかのキーが押されると、コンソールウィンドウの大きさが半分になり、新しい寸法が報告されます。この例では、別のキー押下を待機します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-831">When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press.</span></span> <span data-ttu-id="8bfe0-832">最後に、いずれかのキーを押すと、コンソールウィンドウが元のディメンションに復元され、例が終了します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-832">Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.</span></span>  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-833"><see cref="P:System.Console.WindowWidth" /> プロパティの値または <see cref="P:System.Console.WindowHeight" /> プロパティの値が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-833">The value of the <see cref="P:System.Console.WindowWidth" /> property or the value of the <see cref="P:System.Console.WindowHeight" /> property is less than or equal to 0.</span></span>  
  
<span data-ttu-id="8bfe0-834">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-834">-or-</span></span> 
<span data-ttu-id="8bfe0-835"><see cref="P:System.Console.WindowHeight" /> プロパティの値と <see cref="P:System.Console.WindowTop" /> プロパティの値を加算した値が <see cref="F:System.Int16.MaxValue" /> 以上です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-835">The value of the <see cref="P:System.Console.WindowHeight" /> property plus the value of the <see cref="P:System.Console.WindowTop" /> property is greater than or equal to <see cref="F:System.Int16.MaxValue" />.</span></span>  
  
<span data-ttu-id="8bfe0-836">または</span><span class="sxs-lookup"><span data-stu-id="8bfe0-836">-or-</span></span> 
<span data-ttu-id="8bfe0-837"><see cref="P:System.Console.WindowWidth" /> プロパティの値または <see cref="P:System.Console.WindowHeight" /> プロパティの値が、現在の画面の解像度およびコンソールのフォントで利用可能なウィンドウの最大幅か最大の高さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-837">The value of the <see cref="P:System.Console.WindowWidth" /> property or the value of the <see cref="P:System.Console.WindowHeight" /> property is greater than the largest possible window width or height for the current screen resolution and console font.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-838">読み取りまたは書き込み情報エラー。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-838">Error reading or writing information.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8bfe0-839">セット操作は Windows 以外のオペレーティング システムで呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-839">The set operation is invoked on an operating system other than Windows.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8bfe0-840">指定した値のテキスト形式を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-840">Writes the text representation of the specified value or values to the standard output stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(bool value);" />
      <MemberSignature Language="F#" Value="static member Write : bool -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-841">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-841">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-842">指定した Boolean 値のテキスト形式を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-842">Writes the text representation of the specified Boolean value to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-843">`value` のテキスト表現は、<xref:System.Boolean.TrueString?displayProperty=nameWithType> または <xref:System.Boolean.FalseString?displayProperty=nameWithType>を出力する <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>を呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-843">The text representation of `value` is produced by calling <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>, which outputs either <xref:System.Boolean.TrueString?displayProperty=nameWithType> or <xref:System.Boolean.FalseString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-844">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-844">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-845">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-845">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(char value);" />
      <MemberSignature Language="F#" Value="static member Write : char -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-846">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-846">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-847">指定した Unicode 文字値を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-847">Writes the specified Unicode character value to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8bfe0-848">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-848">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-849">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-849">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="static member Write : char[] -&gt; unit" Usage="System.Console.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8bfe0-850">Unicode 文字配列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-850">A Unicode character array.</span></span></param>
        <summary><span data-ttu-id="8bfe0-851">指定した Unicode 文字配列を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-851">Writes the specified array of Unicode characters to the standard output stream.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-852">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-852">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member Write : decimal -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-853">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-853">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-854">指定した <see cref="T:System.Decimal" /> 値のテキスト形式を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-854">Writes the text representation of the specified <see cref="T:System.Decimal" /> value to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-855">`value` のテキスト表現は、<xref:System.Decimal.ToString%2A?displayProperty=nameWithType>を呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-855">The text representation of `value` is produced by calling <xref:System.Decimal.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-856">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-856">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-857">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-857">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(double value);" />
      <MemberSignature Language="F#" Value="static member Write : double -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-858">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-858">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-859">指定した倍精度浮動小数点値のテキスト形式を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-859">Writes the text representation of the specified double-precision floating-point value to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-860">`value` のテキスト表現は、<xref:System.Double.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-860">The text representation of `value` is produced by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-861">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-861">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-862">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-862">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int value);" />
      <MemberSignature Language="F#" Value="static member Write : int -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-863">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-863">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-864">指定した 32 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-864">Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-865">`value` のテキスト表現は、<xref:System.Int32.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-865">The text representation of `value` is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-866">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-866">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-867">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-867">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(long value);" />
      <MemberSignature Language="F#" Value="static member Write : int64 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-868">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-868">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-869">指定した 64 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-869">Writes the text representation of the specified 64-bit signed integer value to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-870">`value` のテキスト表現は、<xref:System.Int64.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-870">The text representation of `value` is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-871">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-871">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-872">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-872">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : obj -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-873">書き込む値または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-873">The value to write, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="8bfe0-874">指定したオブジェクトのテキスト形式を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-874">Writes the text representation of the specified object to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-875">`value` が `null`場合、何も書き込まれず、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-875">If `value` is `null`, nothing is written and no exception is thrown.</span></span> <span data-ttu-id="8bfe0-876">それ以外の場合、文字列形式を生成するために `value` の `ToString` メソッドが呼び出され、結果の文字列が標準出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-876">Otherwise, the `ToString` method of `value` is called to produce its string representation, and the resulting string is written to the standard output stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-877">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-877">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-878">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-878">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(float value);" />
      <MemberSignature Language="F#" Value="static member Write : single -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-879">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-879">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-880">指定した単精度浮動小数点値のテキスト形式を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-880">Writes the text representation of the specified single-precision floating-point value to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-881">`value` のテキスト表現は、<xref:System.Single.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-881">The text representation of `value` is produced by calling the <xref:System.Single.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-882">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-882">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-883">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-883">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : string -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-884">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-884">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-885">指定した文字列値を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-885">Writes the specified string value to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-886">Value が `null`場合、標準出力ストリームには何も書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-886">If value is `null`, nothing is written to the standard output stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-887">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-887">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-888">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-888">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member Write : uint32 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-889">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-889">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-890">指定した 32 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-890">Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-891">`value` のテキスト表現は、<xref:System.UInt32.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-891">The text representation of `value` is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-892">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-892">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-893">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-893">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member Write : uint64 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-894">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-894">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-895">指定した 64 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-895">Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-896">`value` のテキスト表現は、<xref:System.UInt64.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-896">The text representation of `value` is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-897">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-897">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-898">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-898">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj -&gt; unit" Usage="System.Console.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8bfe0-899">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-899">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="8bfe0-900"><paramref name="format" /> を使用して書き込むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-900">An object to write using <paramref name="format" />.</span></span></param>
        <summary><span data-ttu-id="8bfe0-901">指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-901">Writes the text representation of the specified object to the standard output stream using the specified format information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-902">このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-902">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="8bfe0-903">結果の文字列が出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-903">The resulting string is written to the output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-904">`format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-904">The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</span></span> <span data-ttu-id="8bfe0-905">書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-905">The formatting process replaces each format item with the text representation of the value of the corresponding object.</span></span>  
  
 <span data-ttu-id="8bfe0-906">書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-906">The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</span></span>  
  
 <span data-ttu-id="8bfe0-907">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-907">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</span></span>  
  
-   <span data-ttu-id="8bfe0-908"><xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-908">For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-909">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-909">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-910">日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-910">For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-911">列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-911">For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-912">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-912">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-913">次の例では、`WriteLine` メソッドを使用して、数値、日付、および列挙体の標準的な書式指定子を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-913">The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.</span></span>  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)] 
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 <span data-ttu-id="8bfe0-914"><xref:System.Console.Write%2A>メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-914">The following example illustrates the use of the <xref:System.Console.Write%2A> method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-915">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-915">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-916"><paramref name="format" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-916"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="8bfe0-917"><paramref name="format" /> の書式指定が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-917">The format specification in <paramref name="format" /> is invalid.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="8bfe0-918">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-918">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="8bfe0-919">複合書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-919">Composite Formatting</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj[] -&gt; unit" Usage="System.Console.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8bfe0-920">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-920">A composite format string.</span></span></param>
        <param name="arg"><span data-ttu-id="8bfe0-921"><paramref name="format" /> を使用して書き込むオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-921">An array of objects to write using <paramref name="format" />.</span></span></param>
        <summary><span data-ttu-id="8bfe0-922">指定された書式情報を使用して、指定したオブジェクト配列のテキスト表現を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-922">Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-923">このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-923">This method uses the  [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="8bfe0-924">結果の文字列が出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-924">The resulting string is written to the output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-925">`format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-925">The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</span></span> <span data-ttu-id="8bfe0-926">書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-926">The formatting process replaces each format item with the text representation of the value of the corresponding object.</span></span>  
  
 <span data-ttu-id="8bfe0-927">書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-927">The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</span></span>  
  
 <span data-ttu-id="8bfe0-928">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-928">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</span></span>  
  
-   <span data-ttu-id="8bfe0-929"><xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-929">For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-930">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-930">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-931">日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-931">For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-932">列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-932">For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-933">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-933">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="8bfe0-934">`arg` パラメーターはパラメーター配列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-934">The `arg` parameter is a parameter array.</span></span> <span data-ttu-id="8bfe0-935">引数は、配列として、または5つ以上の項目のリストとしてメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-935">Arguments  can be passed to the method either as an array or as list of five or more items.</span></span> <span data-ttu-id="8bfe0-936">この例は、メソッド呼び出しの両方の形式を示しています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-936">The examples illustrate both forms of method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-937">次の例では、ユーザーに関する情報を提供する多数のプロパティを持つ `Person` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-937">The following example defines a `Person` class with a number of properties that provide information about a person.</span></span> <span data-ttu-id="8bfe0-938">`GetDescription` メソッドは、1つを除くすべてのプロパティ値を含む配列を返します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-938">Its `GetDescription` method returns an array that contains all of the property values except one.</span></span> <span data-ttu-id="8bfe0-939">この例では、`GetDescription` メソッドによって返された配列を使用して Person オブジェクトの値を表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-939">The example then uses the array returned by the  `GetDescription` method  to display the values of the Person object.</span></span>  
  
 [!code-csharp[System.Console.Write#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams1.cs#1)]
 [!code-vb[System.Console.Write#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams1.vb#1)]  
  
 <span data-ttu-id="8bfe0-940">この例では、`Person.Remarks` プロパティの値を同じ行に表示しようとしているため、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29> メソッドではなく <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29> メソッドを呼び出していることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-940">Note that the example calls the <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29> method rather than the <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29> method because it attempts to display the value of the `Person.Remarks` property on the same line.</span></span> <span data-ttu-id="8bfe0-941">これを行うために、<xref:System.Console.CursorLeft%2A> の値と <xref:System.Console.WindowWidth%2A> プロパティを調べて、注釈を収めるのに十分な領域があるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-941">To do this, it examines the value of the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.WindowWidth%2A> properties to determine whether there is enough space for the remark to fit.</span></span>  <span data-ttu-id="8bfe0-942">存在する場合は、行が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-942">If there is, it displays the line.</span></span> <span data-ttu-id="8bfe0-943">そうでない場合は、行を書き込み、3つのスペースをインデントし、コメントを表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-943">If not, it writes a line, indents three spaces, and displays the remark.</span></span>  
  
 <span data-ttu-id="8bfe0-944">次の例は、パラメーター配列ではなく `arg` の引数として5つの項目のリストを提供する点を除いて、最初の例と同じです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-944">The following example is identical to the first, except that it supplies a five-item list as the `arg` argument instead of a parameter array.</span></span>  
  
 [!code-csharp[System.Console.Write#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams2.cs#2)]
 [!code-vb[System.Console.Write#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-945">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-945">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-946"><paramref name="format" /> または <paramref name="arg" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-946"><paramref name="format" /> or <paramref name="arg" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="8bfe0-947"><paramref name="format" /> の書式指定が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-947">The format specification in <paramref name="format" /> is invalid.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="8bfe0-948">このメソッドは、コードにC++よって呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-948">This method is not called by C++ code.</span></span> <span data-ttu-id="8bfe0-949">コンパイラC++は、文字列と4つ以上のオブジェクトパラメーターのリストを含む[system.string への](xref:System.Console.Write*)呼び出しを、<see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />の呼び出しとして解決します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-949">The C++ compiler resolves calls to [System.Console.Write](xref:System.Console.Write*) that include a string and a list of four or more object parameters as a call to <see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />.</span></span> <span data-ttu-id="8bfe0-950">これは、<see cref="M:System.Console.Write(System.String,System.Object)" />の呼び出しとして文字列とオブジェクト配列を含む、 [system.string への](xref:System.Console.Write*)呼び出しを解決します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-950">It resolves calls to [System.Console.Write](xref:System.Console.Write*) that include a string and an object array as a call to <see cref="M:System.Console.Write(System.String,System.Object)" />.</span></span></para></block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="8bfe0-951">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-951">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="8bfe0-952">複合書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-952">Composite Formatting</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="static member Write : char[] * int * int -&gt; unit" Usage="System.Console.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8bfe0-953">Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-953">An array of Unicode characters.</span></span></param>
        <param name="index"><span data-ttu-id="8bfe0-954"><paramref name="buffer" /> 内の開始位置。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-954">The starting position in <paramref name="buffer" />.</span></span></param>
        <param name="count"><span data-ttu-id="8bfe0-955">書き込む文字数。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-955">The number of characters to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-956">指定した Unicode 文字の部分配列を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-956">Writes the specified subarray of Unicode characters to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-957">このメソッドは、`buffer` の `index` 位置から開始して、標準出力ストリームに `count` 文字を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-957">This method writes `count` characters starting at position `index` of `buffer` to the standard output stream.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-958"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-958"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-959"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-959"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8bfe0-960"><paramref name="index" /> と <paramref name="count" /> の合計が指定する位置は、<paramref name="buffer" /> 内ではありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-960"><paramref name="index" /> plus <paramref name="count" /> specify a position that is not within <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-961">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-961">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8bfe0-962">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-962">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="8bfe0-963"><paramref name="format" /> を使用して書き込む最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-963">The first object to write using <paramref name="format" />.</span></span></param>
        <param name="arg1"><span data-ttu-id="8bfe0-964"><paramref name="format" /> を使用して書き込む 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-964">The second object to write using <paramref name="format" />.</span></span></param>
        <summary><span data-ttu-id="8bfe0-965">指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-965">Writes the text representation of the specified objects to the standard output stream using the specified format information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-966">このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-966">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="8bfe0-967">結果の文字列が出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-967">The resulting string is written to the output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-968">`format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-968">The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</span></span> <span data-ttu-id="8bfe0-969">書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-969">The formatting process replaces each format item with the text representation of the value of the corresponding object.</span></span>  
  
 <span data-ttu-id="8bfe0-970">書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-970">The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</span></span>  
  
 <span data-ttu-id="8bfe0-971">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-971">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</span></span>  
  
-   <span data-ttu-id="8bfe0-972"><xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-972">For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-973">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-973">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-974">日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-974">For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-975">列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-975">For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-976">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-976">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-977">次の例では、`WriteLine` メソッドを使用して、数値、日付、および列挙体の標準的な書式指定子を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-977">The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.</span></span>  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 <span data-ttu-id="8bfe0-978">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-978">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-979">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-979">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-980"><paramref name="format" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-980"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="8bfe0-981"><paramref name="format" /> の書式指定が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-981">The format specification in <paramref name="format" /> is invalid.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="8bfe0-982">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-982">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="8bfe0-983">複合書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-983">Composite Formatting</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8bfe0-984">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-984">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="8bfe0-985"><paramref name="format" /> を使用して書き込む最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-985">The first object to write using <paramref name="format" />.</span></span></param>
        <param name="arg1"><span data-ttu-id="8bfe0-986"><paramref name="format" /> を使用して書き込む 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-986">The second object to write using <paramref name="format" />.</span></span></param>
        <param name="arg2"><span data-ttu-id="8bfe0-987"><paramref name="format" /> を使用して書き込む 3 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-987">The third object to write using <paramref name="format" />.</span></span></param>
        <summary><span data-ttu-id="8bfe0-988">指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-988">Writes the text representation of the specified objects to the standard output stream using the specified format information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-989">このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-989">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="8bfe0-990">結果の文字列が出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-990">The resulting string is written to the output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-991">`format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-991">The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</span></span> <span data-ttu-id="8bfe0-992">書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-992">The formatting process replaces each format item with the text representation of the value of the corresponding object.</span></span>  
  
 <span data-ttu-id="8bfe0-993">書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-993">The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</span></span>  
  
 <span data-ttu-id="8bfe0-994">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-994">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</span></span>  
  
-   <span data-ttu-id="8bfe0-995"><xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-995">For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-996">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-996">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-997">日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-997">For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-998">列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-998">For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-999">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-999">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1000">次の例では、`WriteLine` メソッドを使用して、数値、日付、および列挙体の標準的な書式指定子を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1000">The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.</span></span>  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 <span data-ttu-id="8bfe0-1001">`Write`メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1001">The following example illustrates the use of the `Write` method.</span></span>  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1002">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1002">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-1003"><paramref name="format" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1003"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="8bfe0-1004"><paramref name="format" /> の書式指定が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1004">The format specification in <paramref name="format" /> is invalid.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="8bfe0-1005">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1005">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="8bfe0-1006">複合書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1006">Composite Formatting</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg3" Type="System.Object" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8bfe0-1007">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1007">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="8bfe0-1008"><paramref name="format" /> を使用して書き込む最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1008">The first object to write using <paramref name="format" />.</span></span></param>
        <param name="arg1"><span data-ttu-id="8bfe0-1009"><paramref name="format" /> を使用して書き込む 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1009">The second object to write using <paramref name="format" />.</span></span></param>
        <param name="arg2"><span data-ttu-id="8bfe0-1010"><paramref name="format" /> を使用して書き込む 3 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1010">The third object to write using <paramref name="format" />.</span></span></param>
        <param name="arg3"><span data-ttu-id="8bfe0-1011"><paramref name="format" /> を使用して書き込む 4 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1011">The fourth object to write using <paramref name="format" />.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1012">指定した書式情報を使用して、指定したオブジェクトのテキスト表現と可変長パラメーター リストを標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1012">Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="8bfe0-1013">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1013">This API is not CLS-compliant.</span></span> <span data-ttu-id="8bfe0-1014">CLS 準拠の代わりとして <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1014">The CLS-compliant alternative is <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8bfe0-1015">およびC# Visual Basic コンパイラは、このメソッドへの呼び出しを <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>の呼び出しとして自動的に解決します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1015">The C# and Visual Basic compilers automatically resolve a call to this method as a call to <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8bfe0-1016">このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1016">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="8bfe0-1017">結果の文字列が出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1017">The resulting string is written to the output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-1018">`format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1018">The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</span></span> <span data-ttu-id="8bfe0-1019">書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1019">The formatting process replaces each format item with the text representation of the value of the corresponding object.</span></span>  
  
 <span data-ttu-id="8bfe0-1020">書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1020">The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</span></span>  
  
 <span data-ttu-id="8bfe0-1021">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1021">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</span></span>  
  
-   <span data-ttu-id="8bfe0-1022"><xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1022">For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1023">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1023">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1024">日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1024">For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1025">列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1025">For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1026">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1026">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1027">次の例は、<xref:System.Console.Write%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> メソッドでの変数パラメーターの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1027">The following example illustrates the use of variable parameters with the <xref:System.Console.Write%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method.</span></span> <span data-ttu-id="8bfe0-1028">メソッドは、複合書式指定文字列と5つの書式項目を使用して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1028">The method is called with a composite format string and five format items.</span></span>  
  
 [!code-cpp[System.Console.Write#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.write/cpp/con_write.cpp#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1029">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1029">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-1030"><paramref name="format" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1030"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="8bfe0-1031"><paramref name="format" /> の書式指定が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1031">The format specification in <paramref name="format" /> is invalid.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="8bfe0-1032">このメソッドは <see langword="vararg" /> キーワードでマークされています。これは、可変個のパラメーターをサポートしていることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1032">This method is marked with the <see langword="vararg" /> keyword, which means that it supports a variable number of parameters.</span></span> <span data-ttu-id="8bfe0-1033">メソッドはビジュアルC++から呼び出すことができますが、または Visual Basic C#コードから呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1033">The method can be called from Visual C++, but it cannot be called from C# or Visual Basic code.</span></span> <span data-ttu-id="8bfe0-1034">およびC# Visual Basic コンパイラは、<see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" /> の呼び出しを <see cref="M:System.Console.Write(System.String,System.Object[])" />の呼び出しとして解決します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1034">The C# and Visual Basic compilers resolve calls to <see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" /> as calls to <see cref="M:System.Console.Write(System.String,System.Object[])" />.</span></span></para></block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="8bfe0-1035">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1035">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="8bfe0-1036">複合書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1036">Composite Formatting</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8bfe0-1037">指定したデータを標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1037">Writes the specified data, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1038">既定の行終端記号は、値がキャリッジリターンの後に改行が続く文字列 (のC#場合は "\r\n"、Visual Basic の場合は `vbCrLf`) です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1038">The default line terminator is a string whose value is a carriage return followed by a line feed ("\r\n" in C#, or `vbCrLf` in Visual Basic).</span></span> <span data-ttu-id="8bfe0-1039">行終端記号を変更するには、<xref:System.Console.Out%2A> プロパティの <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> プロパティを別の文字列に設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1039">You can change the line terminator by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> property of the <xref:System.Console.Out%2A> property to another string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine();" />
      <MemberSignature Language="F#" Value="static member WriteLine : unit -&gt; unit" Usage="System.Console.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bfe0-1040">現在の行終端記号を標準出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1040">Writes the current line terminator to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1041">既定の行終端記号は、値がキャリッジリターンの後に改行が続く文字列 (のC#場合は "\r\n"、Visual Basic の場合は `vbCrLf`) です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1041">The default line terminator is a string whose value is a carriage return followed by a line feed ("\r\n" in C#, or `vbCrLf` in Visual Basic).</span></span> <span data-ttu-id="8bfe0-1042">行終端記号を変更するには、<xref:System.Console.Out%2A> プロパティの <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> プロパティを別の文字列に設定します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1042">You can change the line terminator by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> property of the <xref:System.Console.Out%2A> property to another string.</span></span> <span data-ttu-id="8bfe0-1043">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1043">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1044">この例では、行終端記号を既定値の "\r\n" から、または `vbCrLf` を "\r\n \r\n" または `vbCrLf` + `vbCrLf`に変更します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1044">The example changes the line terminator from its default value of "\r\n" or `vbCrLf` to "\r\n\r\n" or `vbCrLf` + `vbCrLf`.</span></span> <span data-ttu-id="8bfe0-1045">次に、<xref:System.Console.WriteLine> と <xref:System.Console.WriteLine%28System.String%29> メソッドを呼び出して、コンソールに出力を表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1045">It then calls the <xref:System.Console.WriteLine> and <xref:System.Console.WriteLine%28System.String%29> methods to display output to the console.</span></span>  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp-interactive[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1046">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1046">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : bool -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-1047">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1047">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1048">指定した Boolean 値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1048">Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1049">`value` のテキスト表現は、<xref:System.Boolean.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1049">The text representation of `value` is produced by calling the <xref:System.Boolean.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8bfe0-1050">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1050">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1051">次の例では、10個のランダムな整数が生成され、<xref:System.Console.WriteLine%28System.Boolean%29?displayProperty=nameWithType> メソッドを使用して、偶数であるかどうかが示されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1051">The following example generates ten random integers and uses the <xref:System.Console.WriteLine%28System.Boolean%29?displayProperty=nameWithType> method to indicate whether they are even.</span></span>  
  
 [!code-cpp[System.Console.WriteLine#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_boolean1.cpp#4)]
 [!code-csharp-interactive[System.Console.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_boolean1.cs#4)]
 [!code-vb[System.Console.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_boolean1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1052">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1052">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-1053">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1053">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1054">指定した Unicode 文字を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1054">Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1055">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1055">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1056">次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1056">The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount.</span></span> <span data-ttu-id="8bfe0-1057">この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1057">The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</span></span>  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1058">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1058">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char[] -&gt; unit" Usage="System.Console.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8bfe0-1059">Unicode 文字配列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1059">A Unicode character array.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1060">指定した Unicode 文字配列を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1060">Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1061">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1061">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1062">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1062">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : decimal -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-1063">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1063">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1064">指定した <see cref="T:System.Decimal" /> 値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1064">Writes the text representation of the specified <see cref="T:System.Decimal" /> value, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1065">`value` のテキスト表現は、<xref:System.Decimal.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1065">The text representation of `value` is produced by calling the <xref:System.Decimal.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8bfe0-1066">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1066">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1067">次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1067">The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount.</span></span> <span data-ttu-id="8bfe0-1068">この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1068">The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</span></span>  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1069">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1069">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : double -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-1070">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1070">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1071">指定した倍精度浮動小数点値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1071">Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1072">`value` のテキスト表現は、<xref:System.Double.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1072">The text representation of `value` is produced by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8bfe0-1073">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1073">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1074">次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1074">The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount.</span></span> <span data-ttu-id="8bfe0-1075">この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1075">The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</span></span>  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1076">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1076">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-1077">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1077">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1078">指定した 32 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1078">Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1079">`value` のテキスト表現は、<xref:System.Int32.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1079">The text representation of `value` is produced by calling the <xref:System.Int32.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8bfe0-1080">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1080">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1081">次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1081">The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount.</span></span> <span data-ttu-id="8bfe0-1082">この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1082">The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</span></span>  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1083">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1083">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int64 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-1084">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1084">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1085">指定した 64 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1085">Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1086">`value` のテキスト表現は、<xref:System.Int64.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1086">The text representation of `value` is produced by calling the <xref:System.Int64.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8bfe0-1087">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1087">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1088">次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1088">The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount.</span></span> <span data-ttu-id="8bfe0-1089">この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1089">The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</span></span>  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1090">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1090">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-1091">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1091">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1092">指定したオブジェクトのテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1092">Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1093">`value` が `null` の場合は、行終端記号だけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1093">If `value` is `null`, only the line terminator is written.</span></span> <span data-ttu-id="8bfe0-1094">それ以外の場合、文字列形式を生成するために `value` の `ToString` メソッドが呼び出され、結果の文字列が標準出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1094">Otherwise, the `ToString` method of `value` is called to produce its string representation, and the resulting string is written to the standard output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-1095">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1095">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1096">次の例では、<xref:System.Console.WriteLine%28System.Object%29> メソッドを使用して、オブジェクト配列の各値をコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1096">The following example uses the <xref:System.Console.WriteLine%28System.Object%29> method to display each value in an object array to the console.</span></span>  
  
 [!code-cpp[System.Console.WriteLine#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_obj1.cpp#3)]
 [!code-csharp-interactive[System.Console.WriteLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_obj1.cs#3)]
 [!code-vb[System.Console.WriteLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_obj1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1097">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1097">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : single -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-1098">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1098">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1099">指定した単精度浮動小数点値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1099">Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1100">`value` のテキスト表現は、<xref:System.Single.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1100">The text representation of `value` is produced by calling the <xref:System.Single.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8bfe0-1101">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1101">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1102">次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1102">The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount.</span></span> <span data-ttu-id="8bfe0-1103">この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1103">The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</span></span>  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1104">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1104">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-1105">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1105">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1106">指定した文字列値を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1106">Writes the specified string value, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1107">Value が `null`場合は、行終端記号だけが標準出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1107">If value is `null`, only the line terminator is written to the standard output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-1108">行終端記号の詳細については、<xref:System.Console.WriteLine> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1108">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1109">この例では、行終端記号を既定値の "\r\n" から、または `vbCrLf` を "\r\n \r\n" または `vbCrLf` + `vbCrLf`に変更します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1109">The example changes the line terminator from its default value of "\r\n" or `vbCrLf` to "\r\n\r\n" or `vbCrLf` + `vbCrLf`.</span></span> <span data-ttu-id="8bfe0-1110">次に、<xref:System.Console.WriteLine> と <xref:System.Console.WriteLine%28System.String%29> メソッドを呼び出して、コンソールに出力を表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1110">It then calls the <xref:System.Console.WriteLine> and <xref:System.Console.WriteLine%28System.String%29> methods to display output to the console.</span></span>  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp-interactive[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1111">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1111">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : uint32 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-1112">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1112">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1113">指定した 32 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1113">Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1114">`value` のテキスト表現は、<xref:System.UInt32.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1114">The text representation of `value` is produced by calling the <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8bfe0-1115">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1115">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1116">次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1116">The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount.</span></span> <span data-ttu-id="8bfe0-1117">この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1117">The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</span></span>  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1118">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1118">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : uint64 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8bfe0-1119">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1119">The value to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1120">指定した 64 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1120">Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1121">`value` のテキスト表現は、<xref:System.UInt64.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって生成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1121">The text representation of `value` is produced by calling the <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8bfe0-1122">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1122">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1123">次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1123">The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount.</span></span> <span data-ttu-id="8bfe0-1124">この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1124">The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</span></span>  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1125">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1125">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8bfe0-1126">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1126">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="8bfe0-1127"><paramref name="format" /> を使用して書き込むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1127">An object to write using <paramref name="format" />.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1128">指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1128">Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1129">このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1129">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="8bfe0-1130">結果の文字列が出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1130">The resulting string is written to the output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-1131">`format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1131">The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</span></span> <span data-ttu-id="8bfe0-1132">書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1132">The formatting process replaces each format item with the text representation of the value of the corresponding object.</span></span>  
  
 <span data-ttu-id="8bfe0-1133">書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1133">The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</span></span>  
  
 <span data-ttu-id="8bfe0-1134">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1134">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</span></span>  
  
-   <span data-ttu-id="8bfe0-1135"><xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1135">For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1136">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1136">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1137">日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1137">For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1138">列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1138">For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1139">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1139">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="8bfe0-1140">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1140">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1141">次の例では、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29> メソッドを呼び出して、ランダムに生成された5つの <xref:System.Boolean> 値を表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1141">The following example calls the <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29> method to display five randomly generated <xref:System.Boolean> values.</span></span>  
  
 [!code-csharp-interactive[System.Console.WriteLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine6.cs#6)]
 [!code-vb[System.Console.WriteLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine6.vb#6)]  
  
 <span data-ttu-id="8bfe0-1142">次の例では、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29> メソッドを呼び出して、現在の日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1142">The following example calls the <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29> method to display the current date.</span></span>   <span data-ttu-id="8bfe0-1143">`format` 引数の書式指定項目は、"D"[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)を使用して、現在のカルチャの長い日付形式で日付を表示することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1143">Note that the format item in the `format` argument uses the "D" [standard date and time format string](~/docs/standard/base-types/standard-date-and-time-format-strings.md) to display the date in the long date format of the current culture.</span></span>  
  
 [!code-csharp[System.Console.WriteLine#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine7.cs#7)]
 [!code-vb[System.Console.WriteLine#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine7.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1144">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1144">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-1145"><paramref name="format" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1145"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="8bfe0-1146"><paramref name="format" /> の書式指定が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1146">The format specification in <paramref name="format" /> is invalid.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="8bfe0-1147">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1147">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="8bfe0-1148">複合書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1148">Composite Formatting</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj[] -&gt; unit" Usage="System.Console.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8bfe0-1149">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1149">A composite format string.</span></span></param>
        <param name="arg"><span data-ttu-id="8bfe0-1150"><paramref name="format" /> を使用して書き込むオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1150">An array of objects to write using <paramref name="format" />.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1151">指定した書式情報を使用して、指定したオブジェクト配列のテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1151">Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1152">このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1152">This method uses the  [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="8bfe0-1153">結果の文字列が出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1153">The resulting string is written to the output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-1154">`format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1154">The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</span></span> <span data-ttu-id="8bfe0-1155">書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1155">The formatting process replaces each format item with the text representation of the value of the corresponding object.</span></span>  
  
 <span data-ttu-id="8bfe0-1156">書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1156">The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</span></span>  
  
 <span data-ttu-id="8bfe0-1157">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1157">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</span></span>  
  
-   <span data-ttu-id="8bfe0-1158"><xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1158">For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1159">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1159">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1160">日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1160">For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1161">列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1161">For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1162">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1162">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="8bfe0-1163">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1163">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1164">次の例では、数値、日付、および列挙体の標準的な書式指定子を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1164">The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</span></span>  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 <span data-ttu-id="8bfe0-1165">次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1165">The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount.</span></span> <span data-ttu-id="8bfe0-1166">この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1166">The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</span></span>  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1167">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1167">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-1168"><paramref name="format" /> または <paramref name="arg" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1168"><paramref name="format" /> or <paramref name="arg" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="8bfe0-1169"><paramref name="format" /> の書式指定が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1169">The format specification in <paramref name="format" /> is invalid.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="8bfe0-1170">このメソッドは、コードにC++よって呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1170">This method is not called by C++ code.</span></span> <span data-ttu-id="8bfe0-1171">コンパイラC++は、文字列と4つ以上のオブジェクトパラメーターのリストを <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />の呼び出しとして含む、system.string の[呼び出しを解決します。](xref:System.Console.WriteLine*)</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1171">The C++ compiler resolves calls to [System.Console.WriteLine](xref:System.Console.WriteLine*) that include a string and a list of four or more object parameters as a call to <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />.</span></span> <span data-ttu-id="8bfe0-1172">これは、文字列とオブジェクト配列を <see cref="M:System.Console.WriteLine(System.String,System.Object)" />の呼び出しとして含む、system.string への呼び出しを解決[します。](xref:System.Console.WriteLine*)</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1172">It resolves calls to [System.Console.WriteLine](xref:System.Console.WriteLine*) that include a string and an object array as a call to <see cref="M:System.Console.WriteLine(System.String,System.Object)" />.</span></span></para></block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="8bfe0-1173">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1173">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="8bfe0-1174">複合書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1174">Composite Formatting</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char[] * int * int -&gt; unit" Usage="System.Console.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8bfe0-1175">Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1175">An array of Unicode characters.</span></span></param>
        <param name="index"><span data-ttu-id="8bfe0-1176"><paramref name="buffer" /> 内の開始位置。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1176">The starting position in <paramref name="buffer" />.</span></span></param>
        <param name="count"><span data-ttu-id="8bfe0-1177">書き込む文字数。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1177">The number of characters to write.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1178">指定した Unicode 文字の部分配列を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1178">Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1179">このメソッドは、`buffer` の `index` 位置から開始して、標準出力ストリームに `count` 文字を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1179">This method writes `count` characters starting at position `index` of `buffer` to the standard output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-1180">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1180">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-1181"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1181"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8bfe0-1182"><paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1182"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8bfe0-1183"><paramref name="index" /> と <paramref name="count" /> の合計が指定する位置は、<paramref name="buffer" /> 内ではありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1183"><paramref name="index" /> plus <paramref name="count" /> specify a position that is not within <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1184">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1184">An I/O error occurred.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8bfe0-1185">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1185">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="8bfe0-1186"><paramref name="format" /> を使用して書き込む最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1186">The first object to write using <paramref name="format" />.</span></span></param>
        <param name="arg1"><span data-ttu-id="8bfe0-1187"><paramref name="format" /> を使用して書き込む 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1187">The second object to write using <paramref name="format" />.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1188">指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1188">Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1189">このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1189">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="8bfe0-1190">結果の文字列が出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1190">The resulting string is written to the output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-1191">`format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1191">The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</span></span> <span data-ttu-id="8bfe0-1192">書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1192">The formatting process replaces each format item with the text representation of the value of the corresponding object.</span></span>  
  
 <span data-ttu-id="8bfe0-1193">書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1193">The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</span></span>  
  
 <span data-ttu-id="8bfe0-1194">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1194">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</span></span>  
  
-   <span data-ttu-id="8bfe0-1195"><xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1195">For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1196">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1196">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1197">日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1197">For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1198">列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1198">For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1199">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1199">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="8bfe0-1200">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1200">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1201">次の例では、数値、日付、および列挙体の標準的な書式指定子を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1201">The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</span></span>  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 <span data-ttu-id="8bfe0-1202">次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1202">The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount.</span></span> <span data-ttu-id="8bfe0-1203">この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1203">The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</span></span>  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1204">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1204">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-1205"><paramref name="format" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1205"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="8bfe0-1206"><paramref name="format" /> の書式指定が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1206">The format specification in <paramref name="format" /> is invalid.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="8bfe0-1207">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1207">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="8bfe0-1208">複合書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1208">Composite Formatting</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8bfe0-1209">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1209">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="8bfe0-1210"><paramref name="format" /> を使用して書き込む最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1210">The first object to write using <paramref name="format" />.</span></span></param>
        <param name="arg1"><span data-ttu-id="8bfe0-1211"><paramref name="format" /> を使用して書き込む 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1211">The second object to write using <paramref name="format" />.</span></span></param>
        <param name="arg2"><span data-ttu-id="8bfe0-1212"><paramref name="format" /> を使用して書き込む 3 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1212">The third object to write using <paramref name="format" />.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1213">指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1213">Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bfe0-1214">このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1214">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="8bfe0-1215">結果の文字列が出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1215">The resulting string is written to the output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-1216">`format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1216">The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</span></span> <span data-ttu-id="8bfe0-1217">書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1217">The formatting process replaces each format item with the text representation of the value of the corresponding object.</span></span>  
  
 <span data-ttu-id="8bfe0-1218">書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1218">The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</span></span>  
  
 <span data-ttu-id="8bfe0-1219">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1219">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</span></span>  
  
-   <span data-ttu-id="8bfe0-1220"><xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1220">For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1221">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1221">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1222">日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1222">For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1223">列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1223">For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1224">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1224">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="8bfe0-1225">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1225">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1226">次の例では、数値、日付、および列挙体の標準的な書式指定子を示します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1226">The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</span></span>  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 <span data-ttu-id="8bfe0-1227">次の例は、18% のチップを計算し、<xref:System.Console.WriteLine%2A> メソッドを使用して、元の請求金額、チップの金額、および合計金額を表示するチップ計算ツールです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1227">The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount.</span></span> <span data-ttu-id="8bfe0-1228">この例は、ユーザーがコマンドラインパラメーターとして元の料金の量を指定する必要があるコンソールアプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1228">The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</span></span>  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1229">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1229">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-1230"><paramref name="format" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1230"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="8bfe0-1231"><paramref name="format" /> の書式指定が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1231">The format specification in <paramref name="format" /> is invalid.</span></span></exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="8bfe0-1232">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1232">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="8bfe0-1233">複合書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1233">Composite Formatting</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg3" Type="System.Object" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="8bfe0-1234">複合書式設定文字列。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1234">A composite format string.</span></span></param>
        <param name="arg0"><span data-ttu-id="8bfe0-1235"><paramref name="format" /> を使用して書き込む最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1235">The first object to write using <paramref name="format" />.</span></span></param>
        <param name="arg1"><span data-ttu-id="8bfe0-1236"><paramref name="format" /> を使用して書き込む 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1236">The second object to write using <paramref name="format" />.</span></span></param>
        <param name="arg2"><span data-ttu-id="8bfe0-1237"><paramref name="format" /> を使用して書き込む 3 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1237">The third object to write using <paramref name="format" />.</span></span></param>
        <param name="arg3"><span data-ttu-id="8bfe0-1238"><paramref name="format" /> を使用して書き込む 4 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1238">The fourth object to write using <paramref name="format" />.</span></span></param>
        <summary><span data-ttu-id="8bfe0-1239">指定した書式情報を使用して、指定したオブジェクトのテキスト表現と可変長パラメーター リストを標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1239">Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="8bfe0-1240">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1240">This API is not CLS-compliant.</span></span> <span data-ttu-id="8bfe0-1241">CLS 準拠の代わりとして <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1241">The CLS-compliant alternative is <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8bfe0-1242">およびC# Visual Basic コンパイラは、このメソッドへの呼び出しを <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>の呼び出しとして自動的に解決します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1242">The C# and Visual Basic compilers automatically resolve a call to this method as a call to <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8bfe0-1243">このメソッドは、.NET Framework の[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、オブジェクトの値をテキスト表現に変換し、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1243">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="8bfe0-1244">結果の文字列が出力ストリームに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1244">The resulting string is written to the output stream.</span></span>  
  
 <span data-ttu-id="8bfe0-1245">`format` パラメーターは、このメソッドのパラメーターリスト内のオブジェクトに対応する0個以上のインデックス付きプレースホルダー (書式項目と呼ばれます) と共に、0個以上のテキストの実行で構成されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1245">The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</span></span> <span data-ttu-id="8bfe0-1246">書式設定プロセスでは、各書式項目が対応するオブジェクトの値のテキスト表現に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1246">The formatting process replaces each format item with the text representation of the value of the corresponding object.</span></span>  
  
 <span data-ttu-id="8bfe0-1247">書式指定項目の構文は `{`*index*[`,`*alignment*] [`:`*formatString*]`}`です。これは、必須のインデックス、書式設定されたテキストの長さと配置 (オプション)、および対応するオブジェクトの値を書式設定する方法を制御する省略可能な書式指定子文字の文字列です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1247">The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</span></span>  
  
 <span data-ttu-id="8bfe0-1248">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1248">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</span></span>  
  
-   <span data-ttu-id="8bfe0-1249"><xref:System.String.Format%2A>、<xref:System.Text.StringBuilder.AppendFormat%2A>、<xref:System.Console.WriteLine%2A>のいくつかのオーバーロードなどのメソッドでサポートされている複合書式指定機能の詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1249">For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1250">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1250">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1251">日付と時刻の書式指定子の詳細については、「[標準の日付と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)時刻の書式指定文字列」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1251">For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1252">列挙型書式指定子の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1252">For more information about enumeration format specifiers, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="8bfe0-1253">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1253">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="8bfe0-1254">行終端記号の詳細については、<xref:System.Console.WriteLine%2A> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1254">For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bfe0-1255">次の例は、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> メソッドでの変数引数の使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1255">The following example illustrates the use of variable arguments with the <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method.</span></span> <span data-ttu-id="8bfe0-1256">メソッドは、複合書式指定文字列と5つの書式項目を使用して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1256">The method is called with a composite format string and five format items.</span></span>  
  
 [!code-cpp[System.Console.WriteLine#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_vararg.cpp#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8bfe0-1257">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1257">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8bfe0-1258"><paramref name="format" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1258"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="8bfe0-1259"><paramref name="format" /> の書式指定が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1259">The format specification in <paramref name="format" /> is invalid.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="8bfe0-1260">このメソッドは <see langword="vararg" /> キーワードでマークされています。これは、可変個のパラメーターをサポートしていることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1260">This method is marked with the <see langword="vararg" /> keyword, which means that it supports a variable number of parameters.</span></span> <span data-ttu-id="8bfe0-1261">メソッドはビジュアルC++から呼び出すことができますが、または Visual Basic C#コードから呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1261">The method can be called from Visual C++, but it cannot be called from C# or Visual Basic code.</span></span> <span data-ttu-id="8bfe0-1262">およびC# Visual Basic コンパイラは、<see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" /> の呼び出しを <see cref="M:System.Console.WriteLine(System.String,System.Object[])" />の呼び出しとして解決します。</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1262">The C# and Visual Basic compilers resolve calls to <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" /> as calls to <see cref="M:System.Console.WriteLine(System.String,System.Object[])" />.</span></span></para></block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="8bfe0-1263">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1263">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="8bfe0-1264">複合書式設定</span><span class="sxs-lookup"><span data-stu-id="8bfe0-1264">Composite Formatting</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
