<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f7d5fadb1816bcfd4eee2c9ab0105464480f39e4" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78828085" /></Metadata><TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FlagsAttribute extends System.Attribute" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>列挙体をビット フィールド、つまりフラグのセットとして扱えることを示します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、ビットフィールドは、組み合わせて出現する可能性のある要素のリストに使用されます。一方、列挙定数は、相互に排他的な要素のリストに使用されます。 したがって、ビットフィールドは、名前のない値を生成するためにビットごとの OR 演算と組み合わせて使用するように設計されていますが、列挙定数は使用できません。 言語は、列挙定数と比較して、ビットフィールドの使用方法によって異なります。  
  
## <a name="attributes-of-the-flagsattribute"></a>FlagsAttribute の属性  
 このクラスには <xref:System.AttributeUsageAttribute> が適用され、その <xref:System.AttributeUsageAttribute.Inherited%2A> プロパティは `false`を指定します。 この属性は、列挙型にのみ適用できます。  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>FlagsAttribute と Enum のガイドライン  
  
-   数値に対してビットごとの演算 (AND、OR、EXCLUSIVE OR) を実行する場合にのみ、列挙体の<xref:System.FlagsAttribute>カスタム属性を使用します。  
  
-   1、2、4、8 など、2 の累乗で列挙定数を定義します。 これは、結合された列挙定数内の個々のフラグが重複しないことを意味します。  
  
-   よく使用されるフラグの組み合わせに対して列挙定数を作成することを検討してください。 たとえば、列挙定数`Read = 1`と`Write = 2`を含むファイル I/O 操作に使用する列挙体がある場合、`ReadWrite = Read OR Write`と`Read`を組み合わせた`Write`列挙定数を作成することを検討してください。 また、フラグを結合するために使用されるビットごとの OR 演算は、単純なタスクにとって不必要に高度な概念と見なされる場合があります。  
  
-   フラグの列挙定数として負の数を定義すると、多くのフラグ位置が1に設定されることがあるため、注意してください。これにより、コードの混乱を招く可能性があり、コーディングエラーを助長します。  
  
-   数値でフラグが設定されているかどうかをテストする便利な方法は、数値とフラグ列挙定数の間でビットごとの AND 演算を実行することです。これにより、数値のすべてのビットがフラグに対応しないゼロに設定されます。次に、その操作の結果がフラグ列挙定数と等しいかどうかをテストします。  
  
-   値が 0 であるフラグ列挙定数の名前として`None`を使用します。 ビットごとの and 演算では、結果が常に0であるため、`None`列挙定数を使用してフラグをテストすることはできません。 ただし、数値内のビットが設定されているかどうかを判断するために、数値と`None`に、数値と列挙定数の間でビットごとの比較ではなく論理演算を実行することができます。  
  
     Flags 列挙ではなく値の列挙体を作成する場合でも、`None` 列挙定数を作成することは意味があります。 これは、既定では、列挙体に使用されるメモリが共通言語ランタイムによって0に初期化されるためです。 その結果、値が 0 である定数を定義しなかった場合、列挙体の作成時に無効な値が含まれます。  
  
     アプリケーションで表現する必要がある、明確な既定のケースがある場合は、既定値を表すゼロの値を持つ列挙定数を使用することを検討してください。 既定のケースがない場合は、値が0である列挙定数を使用することを検討してください。これは、他の列挙定数で表されないケースを意味します。  
  
-   列挙型自体の状態を反映するためだけに列挙値を定義しないでください。 たとえば、列挙型の末尾を示すだけの列挙定数は定義しないでください。 列挙体の最後の値を確認する必要がある場合は、その値を明示的に確認します。 また、範囲内のすべての値が有効な場合は、最初と最後に列挙された定数の範囲チェックを実行できます。  
  
-   将来使用するために予約されている列挙定数を指定しないでください。  
  
-   列挙定数を値として受け取るメソッドまたはプロパティを定義する場合は、値を検証することを検討してください。 その数値が列挙体で定義されていない場合でも、数値を列挙型にキャストできることが原因です。  
  
   
  
## Examples  
 次の例は、`FlagsAttribute` 属性の使用方法を示しています。また、<xref:System.Enum> 宣言で `FlagsAttribute` を使用する <xref:System.Enum.ToString%2A> メソッドに与える影響を示しています。  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 前の例では、`SingleHue` と `MultiHue`の2つの色に関連する列挙を定義しています。 後者には `FlagsAttribute` 属性があります。前者は無効です。 この例では、列挙型の基になる値を表さない整数を含む整数の範囲が列挙型にキャストされ、その文字列表現が表示される場合の動作の違いを示しています。   たとえば、3が `SingleHue` メンバーの基になる値ではなく、`FlagsAttribute` 属性によって、`Black, Red`の `MultiHue` 値として3を表すことができるため、3は `SingleHue` 値として表すことができません。  

 次の例では、`FlagsAttribute` 属性を使用して別の列挙を定義し、ビット単位の論理 and 等値演算子を使用して、列挙値に1つ以上のビットフィールドが設定されているかどうかを判断する方法を示します。 <xref:System.Enum.HasFlag%2A?displayProperty=nameWithType> メソッドを使用してこれを行うこともできますが、この例では示していません。
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.FlagsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、電話会社によって提供される形式の通信を表す `PhoneService` 列挙体を定義します。 この例では、3つの異なる世帯に提供されるサービスを表す3つの変数を初期化した後、サービスがない世帯があることを示します。これには、携帯電話サービスのみが含まれ、携帯電話と土地ラインサービスの両方を備えた世帯があります。 最後に、<xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> メソッドを暗黙的に呼び出して、各家庭に提供されるサービスの種類を表示します。  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 次の例は、`FlagsAttribute` 属性の使用方法を示しています。また、<xref:System.Enum> 宣言で `FlagsAttribute` を使用する <xref:System.Enum.ToString%2A> メソッドに与える影響を示しています。  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
