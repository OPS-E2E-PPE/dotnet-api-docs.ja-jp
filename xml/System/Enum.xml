<Type Name="Enum" FullName="System.Enum">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7458574c4d8234b4420f5d2137959782023ff944" /><Meta Name="ms.sourcegitcommit" Value="f6fc130f7b9399b2b130a137d6b0b2b73c1d17b3" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/18/2019" /><Meta Name="ms.locfileid" Value="74153842" /></Metadata><TypeSignature Language="C#" Value="public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Enum extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Enum" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Enum&#xA;Inherits ValueType&#xA;Implements IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enum abstract : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="F#" Value="type Enum = class&#xA;    inherit ValueType&#xA;    interface IComparable&#xA;    interface IFormattable&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4dc47-101">Provides the base class for enumerations.</span><span class="sxs-lookup"><span data-stu-id="4dc47-101">Provides the base class for enumerations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-102">列挙は、基になる型が任意の整数型である名前付き定数のセットです。</span><span class="sxs-lookup"><span data-stu-id="4dc47-102">An enumeration is a set of named constants whose underlying type is any integral type.</span></span> <span data-ttu-id="4dc47-103">基になる型が明示的に宣言されていない場合は、<xref:System.Int32>が使用されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-103">If no underlying type is explicitly declared, <xref:System.Int32> is used.</span></span> <span data-ttu-id="4dc47-104"><xref:System.Enum> は、.NET Framework 内のすべての列挙体の基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="4dc47-104"><xref:System.Enum> is the base class for all enumerations in the .NET Framework.</span></span> <span data-ttu-id="4dc47-105">列挙型は、C#の`enum`キーワードとVisual Basicの`Enum`...`End Enum`構造で定義します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-105">Enumeration types are defined by the `enum` keyword in C# and the `Enum`...`End Enum` construct in Visual Basic.</span></span>  
  
 <span data-ttu-id="4dc47-106"><xref:System.Enum>は、このクラスのインスタンスを比較し、インスタンスの値を文字列形式に変換し、数値の文字列形式をこのクラスのインスタンスに変換し、指定した列挙体と値のインスタンスを作成するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-106"><xref:System.Enum> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</span></span>  
  
 <span data-ttu-id="4dc47-107">列挙体をビットフィールドとして扱うこともできます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-107">You can also treat an enumeration as a bit field.</span></span> <span data-ttu-id="4dc47-108">詳細については、「[非排他的メンバーと Flags 属性](#Flags)」セクションおよび「<xref:System.FlagsAttribute>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-108">For more information, see the [Non-Exclusive Members and the Flags Attribute](#Flags) section and the <xref:System.FlagsAttribute> topic.</span></span>  
  
 <span data-ttu-id="4dc47-109">このトピックの内容:</span><span class="sxs-lookup"><span data-stu-id="4dc47-109">In this topic:</span></span>  
  
 <span data-ttu-id="4dc47-110">[列挙型の作成](#Creating) </span><span class="sxs-lookup"><span data-stu-id="4dc47-110">[Creating an enumeration type](#Creating) </span></span>  
 <span data-ttu-id="4dc47-111">[列挙型のインスタンス](#Instantiating)化 </span><span class="sxs-lookup"><span data-stu-id="4dc47-111">[Instantiating an enumeration type](#Instantiating) </span></span>  
 <span data-ttu-id="4dc47-112">[列挙のベストプラクティス](#BestPractices) </span><span class="sxs-lookup"><span data-stu-id="4dc47-112">[Enumeration best practices](#BestPractices) </span></span>  
 <span data-ttu-id="4dc47-113">[列挙型を使用した操作の実行](#Operations) </span><span class="sxs-lookup"><span data-stu-id="4dc47-113">[Performing operations with enumerations](#Operations) </span></span>  
 [<span data-ttu-id="4dc47-114">変換の実行</span><span class="sxs-lookup"><span data-stu-id="4dc47-114">Performing conversions</span></span>](#conversions)  
 [<span data-ttu-id="4dc47-115">列挙値の解析</span><span class="sxs-lookup"><span data-stu-id="4dc47-115">Parsing enumeration values</span></span>](#parsing)  
 [<span data-ttu-id="4dc47-116">列挙値の書式設定</span><span class="sxs-lookup"><span data-stu-id="4dc47-116">Formatting enumeration values</span></span>](#formatting)  
[<span data-ttu-id="4dc47-117">列挙体メンバーの反復処理</span><span class="sxs-lookup"><span data-stu-id="4dc47-117">Iterating enumeration members</span></span>](#iterating)  
[<span data-ttu-id="4dc47-118">非排他的メンバーと Flags 属性</span><span class="sxs-lookup"><span data-stu-id="4dc47-118">Non-exclusive members and the Flags attribute</span></span>](#Flags)  
[<span data-ttu-id="4dc47-119">列挙メソッドの追加</span><span class="sxs-lookup"><span data-stu-id="4dc47-119">Adding enumeration methods</span></span>](#Methods)  
  
<a name="Creating"></a>   
## <a name="creating-an-enumeration-type"></a><span data-ttu-id="4dc47-120">列挙型の作成</span><span class="sxs-lookup"><span data-stu-id="4dc47-120">Creating an enumeration type</span></span>  
 <span data-ttu-id="4dc47-121">プログラミング言語は、通常、一連の名前付き定数とその値で構成される列挙型を宣言するための構文を提供します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-121">Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</span></span> <span data-ttu-id="4dc47-122">次の例は、列挙体を定義するために C# および Visual Basic によって使用される構文を示しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-122">The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</span></span> <span data-ttu-id="4dc47-123">`ArrivalStatus`、`ArrivalStatus.Early`、および`ArrivalStatus.OnTime`の3つのメンバーを持つ`ArrivalStatus.Late`という名前の列挙体を作成します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-123">It creates an enumeration named `ArrivalStatus` that has three members: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, and `ArrivalStatus.Late`.</span></span> <span data-ttu-id="4dc47-124">どちらの場合も、列挙体は<xref:System.Enum>から明示的に継承されないことに注意してください。継承関係は、コンパイラによって暗黙的に処理されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-124">Note that in both cases, the enumeration does not explicitly inherit from <xref:System.Enum>; the inheritance relationship is handled implicitly by the compiler.</span></span>  
  
 [!code-csharp[System.Enum.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#1)]
 [!code-vb[System.Enum.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#1)]  
  
> [!WARNING]
>  <span data-ttu-id="4dc47-125">基になる型が非整数または <xref:System.Char>である列挙型を作成することは避けてください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-125">You should never create an enumeration type whose underlying type is non-integral or <xref:System.Char>.</span></span> <span data-ttu-id="4dc47-126">リフレクションを使用してこのような列挙型を作成することもできますが、結果の型を使用するメソッド呼び出しは信頼性が低く、追加の例外をスローする場合もあります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-126">Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</span></span>  
  
<a name="Instantiating"></a>   
## <a name="instantiating-an-enumeration-type"></a><span data-ttu-id="4dc47-127">列挙型のインスタンス化</span><span class="sxs-lookup"><span data-stu-id="4dc47-127">Instantiating an enumeration type</span></span>  
 <span data-ttu-id="4dc47-128">他の値型をインスタンス化する場合と同様に、列挙型をインスタンス化するには、変数を宣言し、列挙型の定数の 1 つを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-128">You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</span></span> <span data-ttu-id="4dc47-129">値が`ArrivalStatus`である`ArrivalStatus.OnTime`をインスタンス化する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-129">The following example instantiates an `ArrivalStatus` whose value is `ArrivalStatus.OnTime`.</span></span>  
  
 [!code-csharp[System.Enum.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#2)]
 [!code-vb[System.Enum.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#2)]  
  
 <span data-ttu-id="4dc47-130">列挙値は、次の方法でインスタンス化することもできます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-130">You can also instantiate an enumeration value in the following ways:</span></span>  
  
-   <span data-ttu-id="4dc47-131">特定のプログラミング言語の機能を使用してキャスト (C# の場合) するか、変換する (Visual Basic の場合) ことで、整数値を列挙値に変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-131">By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</span></span> <span data-ttu-id="4dc47-132">次の例では、この方法で`ArrivalStatus`値を持つ`ArrivalStatus.Early`オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-132">The following example creates an `ArrivalStatus` object whose value is `ArrivalStatus.Early` in this way.</span></span>  
  
     [!code-csharp[System.Enum.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#4)]
     [!code-vb[System.Enum.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#4)]  
  
-   <span data-ttu-id="4dc47-133">暗黙のパラメーターなしのコンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-133">By calling its implicit parameterless constructor.</span></span> <span data-ttu-id="4dc47-134">次の例に示すように、この例では、列挙インスタンスの基になる値は0です。</span><span class="sxs-lookup"><span data-stu-id="4dc47-134">As the following example shows, in this case the underlying value of the enumeration instance is 0.</span></span> <span data-ttu-id="4dc47-135">ただし、これは必ずしも列挙体の有効な定数の値であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-135">However, this is not necessarily the value of a valid constant in the enumeration.</span></span>  
  
     [!code-csharp[System.Enum.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#3)]
     [!code-vb[System.Enum.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#3)]  
  
-   <span data-ttu-id="4dc47-136"><xref:System.Enum.Parse%2A> または <xref:System.Enum.TryParse%2A> メソッドを呼び出して、列挙体の定数の名前を含む文字列を解析します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-136">By calling the <xref:System.Enum.Parse%2A> or <xref:System.Enum.TryParse%2A> method to parse a string that contains the name of a constant in the enumeration.</span></span> <span data-ttu-id="4dc47-137">詳細については、「[列挙値の解析](#parsing)」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-137">For more information, see the [Parsing Enumeration Values](#parsing) section.</span></span>  
  
-   <span data-ttu-id="4dc47-138"><xref:System.Enum.ToObject%2A> メソッドを呼び出して、整数値を列挙型に変換する。</span><span class="sxs-lookup"><span data-stu-id="4dc47-138">By calling the <xref:System.Enum.ToObject%2A> method to convert an integral value to an enumeration type.</span></span> <span data-ttu-id="4dc47-139">詳細については、「[変換の実行](#conversions)」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-139">For more information, see the [Performing Conversions](#conversions) section.</span></span>  
  
<a name="BestPractices"></a>   
## <a name="enumeration-best-practices"></a><span data-ttu-id="4dc47-140">列挙のベストプラクティス</span><span class="sxs-lookup"><span data-stu-id="4dc47-140">Enumeration best practices</span></span>  
 <span data-ttu-id="4dc47-141">列挙型を定義するときは、次のベストプラクティスを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="4dc47-141">We recommend that you use the following best practices when you define enumeration types:</span></span>  
  
-   <span data-ttu-id="4dc47-142">値が 0 の列挙メンバーを定義していない場合は、`None`列挙定数を作成することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-142">If you have not defined an enumeration member whose value is 0, consider creating a `None` enumerated constant.</span></span> <span data-ttu-id="4dc47-143">既定では、列挙体に使用されるメモリは、共通言語ランタイムによって 0 に初期化されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-143">By default, the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="4dc47-144">その結果、値が 0 である定数を定義しなかった場合、列挙体の作成時に無効な値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-144">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
-   <span data-ttu-id="4dc47-145">アプリケーションで表現する必要がある明確な既定のケースがある場合は、それを表すために値が0である列挙定数を使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-145">If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</span></span> <span data-ttu-id="4dc47-146">既定のケースが存在しない場合は、その他の列挙定数で表されないケースを指定するために、値が0である列挙定数を使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-146">If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="4dc47-147">将来使用するために予約されている列挙定数を指定しないでください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-147">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="4dc47-148">列挙定数を値として受け取るメソッドまたはプロパティを定義する場合は、値を検証することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-148">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="4dc47-149">その数値が列挙体で定義されていない場合でも、数値を列挙型にキャストできることが原因です。</span><span class="sxs-lookup"><span data-stu-id="4dc47-149">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
 <span data-ttu-id="4dc47-150">定数がビットフィールドである列挙型のその他のベストプラクティスについては、「[非排他的メンバーとフラグ属性](#Flags)」セクションに記載されています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-150">Additional best practices for enumeration types whose constants are bit fields are listed in the [Non-Exclusive Members and the Flags Attribute](#Flags) section.</span></span>  
  
<a name="Operations"></a>   
## <a name="performing-operations-with-enumerations"></a><span data-ttu-id="4dc47-151">列挙型を使用した操作の実行</span><span class="sxs-lookup"><span data-stu-id="4dc47-151">Performing operations with enumerations</span></span>  
 <span data-ttu-id="4dc47-152">列挙体を作成するときに、新しいメソッドを定義することはできません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-152">You cannot define new methods when you are creating an enumeration.</span></span> <span data-ttu-id="4dc47-153">ただし、列挙型は、<xref:System.Enum> クラスから静的メソッドとインスタンスメソッドの完全なセットを継承します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-153">However, an enumeration type inherits a complete set of static and instance methods from the <xref:System.Enum> class.</span></span> <span data-ttu-id="4dc47-154">以下のセクションでは、列挙値を操作するときによく使用されるいくつかのメソッドに加え、これらのメソッドのほとんどについて説明します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-154">The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</span></span>  
  
<a name="conversions"></a>   
### <a name="performing-conversions"></a><span data-ttu-id="4dc47-155">変換の実行</span><span class="sxs-lookup"><span data-stu-id="4dc47-155">Performing conversions</span></span>  
 <span data-ttu-id="4dc47-156">キャスト (C#) または変換 ( Visual Basic) 演算子を使用して、列挙型メンバーとその基になる型の間で変換を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-156">You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</span></span> <span data-ttu-id="4dc47-157">次の例では、キャスト演算子または変換演算子を使用して、整数から列挙値への変換と、列挙値から整数への変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-157">The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</span></span>  
  
 [!code-csharp[System.Enum.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#5)]
 [!code-vb[System.Enum.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#5)]  
  
 <span data-ttu-id="4dc47-158"><xref:System.Enum>クラスには、任意の整数型の値を列挙値に変換する<xref:System.Enum.ToObject%2A>メソッドも含まれています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-158">The <xref:System.Enum> class also includes a <xref:System.Enum.ToObject%2A> method that converts a value of any integral type to an enumeration value.</span></span> <span data-ttu-id="4dc47-159">次の例では、<xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> 、メソッドを使用して、<xref:System.Int32>を`ArrivalStatus`値に変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-159">The following example uses the <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method to convert an <xref:System.Int32> to an `ArrivalStatus` value.</span></span> <span data-ttu-id="4dc47-160"><xref:System.Enum.ToObject%2A>は<xref:System.Object>型の値を返すため、キャスト演算子または変換演算子が、オブジェクトを列挙型にキャストするために必要になる場合があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-160">Note that, because the <xref:System.Enum.ToObject%2A> returns a value of type <xref:System.Object>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#6)]
 [!code-vb[System.Enum.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#6)]  
  
 <span data-ttu-id="4dc47-161">整数を列挙値に変換する場合、実際には列挙体のメンバーではない値を割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-161">When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</span></span> <span data-ttu-id="4dc47-162">これを回避するには、変換を実行する前に、<xref:System.Enum.IsDefined%2A>メソッドに整数を渡します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-162">To prevent this, you can pass the integer to the <xref:System.Enum.IsDefined%2A> method before performing the conversion.</span></span> <span data-ttu-id="4dc47-163">次の例では、このメソッドを使用して、整数値の配列内の要素を `ArrivalStatus` 値に変換できるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-163">The following example uses this method to determine whether the elements in an array of integer values can be converted to `ArrivalStatus` values.</span></span>  
  
 [!code-csharp[System.Enum.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion1.cs#7)]
 [!code-vb[System.Enum.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion1.vb#7)]  
  
 <span data-ttu-id="4dc47-164"><xref:System.Enum>クラスには、列挙値から整数型への変換のための<xref:System.IConvertible>インターフェイスの明示的なインターフェイス実装が用意されていますが、<xref:System.Convert>などの<xref:System.Convert.ToInt32%2A>クラスのメソッドを使用して、これらの変換を実行することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="4dc47-164">Although the <xref:System.Enum> class provides explicit interface implementations of the <xref:System.IConvertible> interface for converting from an enumeration value to an integral type, you should use the methods of the <xref:System.Convert> class, such as <xref:System.Convert.ToInt32%2A>, to perform these conversions.</span></span> <span data-ttu-id="4dc47-165">次の例は、<xref:System.Enum.GetUnderlyingType%2A>メソッドを<xref:System.Convert.ChangeType%2A?displayProperty=nameWithType>メソッドと共に使用して、列挙値を基になる型に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-165">The following example illustrates how you can use the <xref:System.Enum.GetUnderlyingType%2A> method along with the <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method to convert an enumeration value to its underlying type.</span></span> <span data-ttu-id="4dc47-166">この例では、コンパイル時に列挙型の基になる型が認識される必要がないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-166">Note that this example does not require the underlying type of the enumeration to be known at compile time.</span></span>  
  
 [!code-csharp[System.Enum.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion2.cs#8)]
 [!code-vb[System.Enum.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion2.vb#8)]  
  
<a name="parsing"></a>   
### <a name="parsing-enumeration-values"></a><span data-ttu-id="4dc47-167">列挙値の解析</span><span class="sxs-lookup"><span data-stu-id="4dc47-167">Parsing enumeration values</span></span>  
 <span data-ttu-id="4dc47-168"><xref:System.Enum.Parse%2A>メソッドと<xref:System.Enum.TryParse%2A>メソッドを使用すると、列挙値の文字列形式をその値に変換できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-168">The <xref:System.Enum.Parse%2A> and <xref:System.Enum.TryParse%2A> methods allow you to convert the string representation of an enumeration value to that value.</span></span> <span data-ttu-id="4dc47-169">文字列形式には、列挙定数の名前または基になる値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-169">The string representation can be either the name or the underlying value of an enumeration constant.</span></span> <span data-ttu-id="4dc47-170">文字列を列挙型の基になる型の値に変換できる場合、解析メソッドは、特定の列挙体のメンバーではない数値の文字列形式を正常に変換することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-170">Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</span></span> <span data-ttu-id="4dc47-171">これを回避するには、<xref:System.Enum.IsDefined%2A>メソッドを呼び出して、解析メソッドの結果が有効な列挙値であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-171">To prevent this, the <xref:System.Enum.IsDefined%2A> method can be called to ensure that the result of the parsing method is a valid enumeration value.</span></span> <span data-ttu-id="4dc47-172">この例は、この方法を示し、<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>メソッドと<xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType>メソッドの両方の呼び出しを示しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-172">The example illustrates this approach and demonstrates calls to both the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> and <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="4dc47-173">非ジェネリックの Parse メソッドは、適切な列挙型にキャスト (C# の場合) または変換 (Visual Basic の場合) する必要があるオブジェクトを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-173">Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classparse1.cs#9)]
 [!code-vb[System.Enum.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classparse1.vb#9)]  
  
<a name="formatting"></a>   
### <a name="formatting-enumeration-values"></a><span data-ttu-id="4dc47-174">列挙値の書式設定</span><span class="sxs-lookup"><span data-stu-id="4dc47-174">Formatting enumeration values</span></span>  
 <span data-ttu-id="4dc47-175">静的 <xref:System.Enum.Format%2A> メソッドを呼び出すことによって列挙値を文字列形式に変換したり、インスタンス <xref:System.Enum.ToString%2A> メソッドのオーバーロードを呼び出したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-175">You can convert enumeration values to their string representations by calling the static <xref:System.Enum.Format%2A> method, as well as the overloads of the instance <xref:System.Enum.ToString%2A> method.</span></span> <span data-ttu-id="4dc47-176">書式指定文字列を使用すると、列挙値を文字列として表現する正確な方法を制御できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-176">You can use a format string to control the precise way in which an enumeration value is represented as a string.</span></span> <span data-ttu-id="4dc47-177">詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-177">For more information, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="4dc47-178">次の例では、サポートされている各列挙書式指定文字列 ("G" または "g"、"D"、"d"、"X"、"x"、"F"、"f") を使用して、`ArrivalStatus`列挙体のメンバーを文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-178">The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the `ArrivalStatus` enumeration to its string representations.</span></span>  
  
 [!code-csharp[System.Enum.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classformat1.cs#10)]
 [!code-vb[System.Enum.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classformat1.vb#10)]  
  
<a name="iterating"></a>   
### <a name="iterating-enumeration-members"></a><span data-ttu-id="4dc47-179">列挙体メンバーの反復処理</span><span class="sxs-lookup"><span data-stu-id="4dc47-179">Iterating enumeration members</span></span>  
 <span data-ttu-id="4dc47-180"><xref:System.Enum>型は、<xref:System.Collections.IEnumerable>(C#) または<xref:System.Collections.Generic.IEnumerable%601>(Visual Basic) 構造を使用してコレクションのメンバーを反復処理するための、`foreach`または`For Each`インターフェイスを実装していません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-180">The <xref:System.Enum> type does not implement the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interface, which would enable you to iterate members of a collection by using a `foreach` (in C#) or `For Each` (in Visual Basic) construct.</span></span> <span data-ttu-id="4dc47-181">ただし、次の 2 つの方法のいずれかでメンバーを列挙できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-181">However, you can enumerate members in either of two ways.</span></span>  
  
-   <span data-ttu-id="4dc47-182"><xref:System.Enum.GetNames%2A> メソッドを呼び出して、列挙体のメンバーの名前を含む文字列配列を取得できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-182">You can call the <xref:System.Enum.GetNames%2A> method to retrieve a string array containing the names of the enumeration members.</span></span> <span data-ttu-id="4dc47-183">次に、文字列配列の各要素について、<xref:System.Enum.Parse%2A> メソッドを呼び出して、文字列をそれと等価な列挙値に変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-183">Next, for each element of the string array, you can call the <xref:System.Enum.Parse%2A> method to convert the string to its equivalent enumeration value.</span></span> <span data-ttu-id="4dc47-184">このアプローチの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-184">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#11)]
     [!code-vb[System.Enum.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#11)]  
  
-   <span data-ttu-id="4dc47-185"><xref:System.Enum.GetValues%2A> メソッドを呼び出して、列挙体の基になる値を含む配列を取得できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-185">You can call the <xref:System.Enum.GetValues%2A> method to retrieve an array that contains the underlying values in the enumeration.</span></span> <span data-ttu-id="4dc47-186">次に、配列の各要素に対して、<xref:System.Enum.ToObject%2A> メソッドを呼び出して、整数をそれと等価な列挙値に変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-186">Next, for each element of the array, you can call the <xref:System.Enum.ToObject%2A> method to convert the integer to its equivalent enumeration value.</span></span> <span data-ttu-id="4dc47-187">このアプローチの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-187">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#12)]
     [!code-vb[System.Enum.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#12)]  
  
<a name="Flags"></a>   
## <a name="non-exclusive-members-and-the-flags-attribute"></a><span data-ttu-id="4dc47-188">非排他的メンバーと Flags 属性</span><span class="sxs-lookup"><span data-stu-id="4dc47-188">Non-exclusive members and the Flags attribute</span></span>  
 <span data-ttu-id="4dc47-189">列挙型の一般的な用途の 1 つは、相互に排他的な値のセットを表すことです。</span><span class="sxs-lookup"><span data-stu-id="4dc47-189">One common use of an enumeration is to represent a set of mutually exclusive values.</span></span> <span data-ttu-id="4dc47-190">たとえば、`ArrivalStatus` 、インスタンスは、`Early``OnTime`、または`Late`の値を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-190">For example, an `ArrivalStatus` instance can have a value of `Early`, `OnTime`, or `Late`.</span></span> <span data-ttu-id="4dc47-191">複数の列挙定数を反映するために、`ArrivalStatus` インスタンスの値には意味がありません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-191">It makes no sense for the value of an `ArrivalStatus` instance to reflect more than one enumeration constant.</span></span>  
  
 <span data-ttu-id="4dc47-192">ただし別の場合、列挙オブジェクトの値には複数の列挙体メンバーを含めることができ、各メンバーは列挙値のビットフィールドを表します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-192">In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</span></span> <span data-ttu-id="4dc47-193"><xref:System.FlagsAttribute> 属性を使用して、列挙体がビットフィールドで構成されていることを示すことができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-193">The <xref:System.FlagsAttribute> attribute can be used to indicate that the enumeration consists of bit fields.</span></span> <span data-ttu-id="4dc47-194">たとえば、`Pets`という名前の列挙体を使用して、家族のペットの種類を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-194">For example, an enumeration named `Pets` might be used to indicate the kinds of pets in a household.</span></span> <span data-ttu-id="4dc47-195">次のように定義できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-195">It can be defined as follows.</span></span>  
  
 [!code-csharp[System.Enum.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#13)]
 [!code-vb[System.Enum.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#13)]  
  
 <span data-ttu-id="4dc47-196">`Pets`列挙体は、次の例に示すように使用できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-196">The `Pets` enumeration can then be used as shown in the following example.</span></span>  
  
 [!code-csharp[System.Enum.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#14)]
 [!code-vb[System.Enum.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#14)]  
  
 <span data-ttu-id="4dc47-197">ビットごとの列挙を定義し、<xref:System.FlagsAttribute> 属性を適用するときは、次のベストプラクティスを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-197">The following best practices should be used when defining a bitwise enumeration and applying the <xref:System.FlagsAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="4dc47-198">数値に対してビットごとの演算 (AND、OR、EXCLUSIVE OR) を実行する場合にのみ、列挙体の<xref:System.FlagsAttribute>カスタム属性を使用します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-198">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="4dc47-199">1、2、4、8 など、2 の累乗で列挙定数を定義します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-199">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="4dc47-200">これは、結合された列挙定数内の個々のフラグが重複しないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-200">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="4dc47-201">よく使用されるフラグの組み合わせに対して列挙定数を作成することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-201">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="4dc47-202">たとえば、列挙定数`Read = 1`と`Write = 2`を含むファイル I/O 操作に使用する列挙体がある場合、`ReadWrite = Read OR Write`と`Read`を組み合わせた`Write`列挙定数を作成することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-202">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="4dc47-203">また、フラグを結合するために使用されるビットごとの OR 演算は、単純なタスクにとって不必要に高度な概念と見なされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-203">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="4dc47-204">フラグの列挙定数として負の数を定義すると、多くのフラグ位置が1に設定されることがあるため、注意してください。これにより、コードの混乱を招く可能性があり、コーディングエラーを助長します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-204">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="4dc47-205">数値でフラグが設定されているかどうかをテストする便利な方法は、次の例に示すように、<xref:System.Enum.HasFlag%2A>インスタンスメソッドを呼び出すことです。</span><span class="sxs-lookup"><span data-stu-id="4dc47-205">A convenient way to test whether a flag is set in a numeric value is to call the instance <xref:System.Enum.HasFlag%2A> method, as shown in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#15)]
     [!code-vb[System.Enum.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#15)]  
  
     <span data-ttu-id="4dc47-206">これは、数値とフラグで列挙される定数の間でビットごとの AND 演算を実行することと同じです。この場合、数値のすべてのビットをフラグに対応しないゼロに設定し、その操作の結果がフラグ列挙定数と等しいかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="4dc47-206">It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</span></span> <span data-ttu-id="4dc47-207">このことを次の例で説明します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-207">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#16)]
     [!code-vb[System.Enum.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#16)]  
  
-   <span data-ttu-id="4dc47-208">値が 0 であるフラグ列挙定数の名前として`None`を使用します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-208">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="4dc47-209">ビットごとの and 演算では、結果が常に0であるため、`None`列挙定数を使用してフラグをテストすることはできません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-209">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="4dc47-210">ただし、数値内のビットが設定されているかどうかを判断するために、数値と`None`に、数値と列挙定数の間でビットごとの比較ではなく論理演算を実行することができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-210">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span> <span data-ttu-id="4dc47-211">このことを次の例で説明します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-211">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#17)]
     [!code-vb[System.Enum.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#17)]  
  
-   <span data-ttu-id="4dc47-212">列挙型自体の状態を反映するためだけに列挙値を定義しないでください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-212">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="4dc47-213">たとえば、列挙型の末尾を示すだけの列挙定数は定義しないでください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-213">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="4dc47-214">列挙体の最後の値を確認する必要がある場合は、その値を明示的に確認します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-214">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="4dc47-215">また、範囲内のすべての値が有効な場合は、最初と最後に列挙された定数の範囲チェックを実行できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-215">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
<a name="Methods"></a>   
## <a name="adding-enumeration-methods"></a><span data-ttu-id="4dc47-216">列挙メソッドの追加</span><span class="sxs-lookup"><span data-stu-id="4dc47-216">Adding enumeration methods</span></span>  
 <span data-ttu-id="4dc47-217">列挙型は`enum` (C#) や`Enum` (Visual Basic) などの言語構造によって定義されているため、<xref:System.Enum>クラスから継承されたメソッド以外の列挙型のカスタムメソッドを定義することはできません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-217">Because enumeration types are defined by language structures, such as `enum` (C#) and `Enum` (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <xref:System.Enum> class.</span></span>  <span data-ttu-id="4dc47-218">ただし、拡張メソッドを使用して、特定の列挙型に機能を追加することができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-218">However, you can use extension methods to add functionality to a particular enumeration type.</span></span>  
  
 <span data-ttu-id="4dc47-219">次の例では、`Grades` 列挙型は学生が授業で受け取る成績評価を表わしています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-219">In the following example, the `Grades` enumeration represents the possible letter grades that a student may receive in a class.</span></span> <span data-ttu-id="4dc47-220">`Passing` という名前の拡張機能メソッドが `Grades` 型に追加されていて、この型の各インスタンスが合格点を表しているかどうかを自ら "認識" できるようになっています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-220">An extension method named `Passing` is added to the `Grades` type so that each instance of that type now "knows" whether it represents a passing grade or not.</span></span>       <span data-ttu-id="4dc47-221">`Extensions`クラスには、最小合格評価を定義する静的読み取り/書き込み変数も含まれています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-221">The `Extensions` class also contains a static read-write variable that defines the minimum passing grade.</span></span> <span data-ttu-id="4dc47-222">`Passing` 拡張メソッドの戻り値には、その変数の現在の値が反映されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-222">The return value of the `Passing` extension method reflects the current value of that variable.</span></span>  
  
 [!code-csharp[System.Enum.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/Extensions.cs#18)]
 [!code-vb[System.Enum.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/Extensions.vb#18)]  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-223">次の例では、列挙体を使用して名前付きの値を表し、別の列挙体を使用して名前付きビットフィールドを表す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-223">The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</span></span>  
  
 [!code-cpp[enummain#1](~/samples/snippets/cpp/VS_Snippets_CLR/enummain/CPP/EnumMain.cpp#1)]
 [!code-csharp[enummain#1](~/samples/snippets/csharp/VS_Snippets_CLR/enummain/CS/EnumMain.cs#1)]
 [!code-vb[enummain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enummain/VB/EnumMain.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="4dc47-224">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="4dc47-224">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.ValueType" />
    <altmember cref="T:System.FlagsAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Enum ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Enum();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4dc47-225">Initializes a new instance of the <see cref="T:System.Enum" /> class.</span><span class="sxs-lookup"><span data-stu-id="4dc47-225">Initializes a new instance of the <see cref="T:System.Enum" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (target As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ target);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="enum.CompareTo target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="4dc47-226">An object to compare, or <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-226">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="4dc47-227">Compares this instance to a specified object and returns an indication of their relative values.</span><span class="sxs-lookup"><span data-stu-id="4dc47-227">Compares this instance to a specified object and returns an indication of their relative values.</span></span></summary>
        <returns><span data-ttu-id="4dc47-228">A signed number that indicates the relative values of this instance and <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-228">A signed number that indicates the relative values of this instance and <paramref name="target" />.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="4dc47-229">Value</span><span class="sxs-lookup"><span data-stu-id="4dc47-229">Value</span></span> 
 </term><description> <span data-ttu-id="4dc47-230">Meaning</span><span class="sxs-lookup"><span data-stu-id="4dc47-230">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="4dc47-231">Less than zero</span><span class="sxs-lookup"><span data-stu-id="4dc47-231">Less than zero</span></span> 
 </term><description> <span data-ttu-id="4dc47-232">The value of this instance is less than the value of <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-232">The value of this instance is less than the value of <paramref name="target" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="4dc47-233">Zero</span><span class="sxs-lookup"><span data-stu-id="4dc47-233">Zero</span></span> 
 </term><description> <span data-ttu-id="4dc47-234">The value of this instance is equal to the value of <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-234">The value of this instance is equal to the value of <paramref name="target" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="4dc47-235">Greater than zero</span><span class="sxs-lookup"><span data-stu-id="4dc47-235">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="4dc47-236">The value of this instance is greater than the value of <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-236">The value of this instance is greater than the value of <paramref name="target" />.</span></span>  
  
<span data-ttu-id="4dc47-237">-or-</span><span class="sxs-lookup"><span data-stu-id="4dc47-237">-or-</span></span> 
 <span data-ttu-id="4dc47-238"><paramref name="target" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-238"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4dc47-239">次の例は、`CompareTo`のコンテキストで`Enum`を使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-239">The following example illustrates the use of `CompareTo` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumcompareto/CPP/EnumCompareTo.cpp#1)]
 [!code-csharp[enumcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumcompareto/CS/EnumCompareTo.cs#1)]
 [!code-vb[enumcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumcompareto/VB/EnumCompareTo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-240"><paramref name="target" /> and this instance are not the same type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-240"><paramref name="target" /> and this instance are not the same type.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4dc47-241">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-241">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.Equals(System.Object)" />
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="4dc47-242">This instance is null.</span><span class="sxs-lookup"><span data-stu-id="4dc47-242">This instance is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="enum.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="4dc47-243">An object to compare with this instance, or <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-243">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="4dc47-244">Returns a value indicating whether this instance is equal to a specified object.</span><span class="sxs-lookup"><span data-stu-id="4dc47-244">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="4dc47-245"><see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-245"><see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-246"><xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType>メソッドは、列挙メンバーが等しいかどうかを評価する方法を定義するために<xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType>をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="4dc47-246">The <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> to define how enumeration members are evaluated for equality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-247"><xref:System.Enum.Equals%2A>メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-247">The following example illustrates the use of the <xref:System.Enum.Equals%2A> method.</span></span>  
  
 [!code-cpp[enumequals#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumequals/CPP/EnumEquals.cpp#1)]
 [!code-csharp[enumequals#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumequals/CS/EnumEquals.cs#1)]
 [!code-vb[enumequals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumequals/VB/EnumEquals.vb#1)]  
  
 <span data-ttu-id="4dc47-248">次の例では、`SledDog`と`WorkDog`という 2 つの列挙型を定義しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-248">The following example defines two enumeration types, `SledDog` and `WorkDog`.</span></span> <span data-ttu-id="4dc47-249">`SledDog`列挙体には、`SledDog.AlaskanMalamute`と`SledDog.Malamute`という 2 つのメンバーがあり、基になる値が同じです。</span><span class="sxs-lookup"><span data-stu-id="4dc47-249">The `SledDog` enumeration has two members, `SledDog.AlaskanMalamute` and `SledDog.Malamute`, that have the same underlying value.</span></span> <span data-ttu-id="4dc47-250"><xref:System.Enum.Equals%2A>メソッドの呼び出しは、基になる値が同じであるため、これらの値が等しいことを示しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-250">The call to the <xref:System.Enum.Equals%2A> method indicates that these values are equal because their underlying values are the same.</span></span> <span data-ttu-id="4dc47-251">`SledDog.Malamute`メンバーと`WorkDog.Newfoundland`メンバーは、基になる値が同じですが、異なる列挙型を表しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-251">The `SledDog.Malamute` and `WorkDog.Newfoundland` members have the same underlying value, although they represent different enumeration types.</span></span> <span data-ttu-id="4dc47-252"><xref:System.Enum.Equals%2A>メソッドの呼び出しは、これらの値が等しくないことを示します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-252">A call to the <xref:System.Enum.Equals%2A> method indicates that these values are not equal.</span></span>  
  
 [!code-csharp[System.Enum.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.equals/cs/enumequals.cs#1)]
 [!code-vb[System.Enum.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.equals/vb/enumequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Enum.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (Type enumType, object value, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.Type enumType, object value, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (enumType As Type, value As Object, format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(Type ^ enumType, System::Object ^ value, System::String ^ format);" />
      <MemberSignature Language="F#" Value="static member Format : Type * obj * string -&gt; string" Usage="System.Enum.Format (enumType, value, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-253">The enumeration type of the value to convert.</span><span class="sxs-lookup"><span data-stu-id="4dc47-253">The enumeration type of the value to convert.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-254">The value to convert.</span><span class="sxs-lookup"><span data-stu-id="4dc47-254">The value to convert.</span></span></param>
        <param name="format"><span data-ttu-id="4dc47-255">The output format to use.</span><span class="sxs-lookup"><span data-stu-id="4dc47-255">The output format to use.</span></span></param>
        <summary><span data-ttu-id="4dc47-256">Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</span><span class="sxs-lookup"><span data-stu-id="4dc47-256">Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</span></span></summary>
        <returns><span data-ttu-id="4dc47-257">A string representation of <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-257">A string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-258">次の表は、`format` パラメーターの有効な値を示しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-258">The following table shows the valid values for the `format` parameter.</span></span>  
  
|<span data-ttu-id="4dc47-259">形式</span><span class="sxs-lookup"><span data-stu-id="4dc47-259">Format</span></span>|<span data-ttu-id="4dc47-260">説明</span><span class="sxs-lookup"><span data-stu-id="4dc47-260">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="4dc47-261">"G" または "g"</span><span class="sxs-lookup"><span data-stu-id="4dc47-261">"G" or "g"</span></span>|<span data-ttu-id="4dc47-262">`value`が名前付き列挙定数と等しい場合は、その定数の名前が返されます。それ以外の場合は、`value`に相当する 10 進数が返されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-262">If `value` is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of `value` is returned.</span></span><br /><br /> <span data-ttu-id="4dc47-263">たとえば、唯一の列挙型定数の名前が Red で、その値が 1 であるとします。</span><span class="sxs-lookup"><span data-stu-id="4dc47-263">For example, suppose the only enumerated constant is named Red, and its value is 1.</span></span> <span data-ttu-id="4dc47-264">`value`が 1 と指定されている場合、この形式は "Red" を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-264">If `value` is specified as 1, this format returns "Red".</span></span> <span data-ttu-id="4dc47-265">ただし、`value`が 2 と指定されている場合、この形式は "2" を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-265">However, if `value` is specified as 2, this format returns "2".</span></span><br /><br /> <span data-ttu-id="4dc47-266">または</span><span class="sxs-lookup"><span data-stu-id="4dc47-266">-or-</span></span><br /><br /> <span data-ttu-id="4dc47-267"><xref:System.FlagsAttribute>カスタム属性が列挙に適用されている場合、`value`は 1 つ以上のビットで構成される 1 つ以上のフラグを含むビットフィールドとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-267">If the <xref:System.FlagsAttribute> custom attribute is applied to the enumeration, `value` is treated as a bit field that contains one or more flags that consist of one or more bits.</span></span><br /><br /> <span data-ttu-id="4dc47-268">`value`が名前付き列挙定数の組み合わせと等しい場合は、その定数の名前の区切り記号で区切られたリストが返されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-268">If `value` is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</span></span> <span data-ttu-id="4dc47-269">フラグが検索され、最も大きい値を持つフラグから最小値までの範囲で `value` ます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-269">`value` is searched for flags, going from the flag with the largest value to the smallest value.</span></span> <span data-ttu-id="4dc47-270">`value`のビットフィールドに対応するフラグごとに、定数の名前が区切り記号で区切られたリストに連結されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-270">For each flag that corresponds to a bit field in `value`, the name of the constant is concatenated to the delimiter-separated list.</span></span> <span data-ttu-id="4dc47-271">そのフラグの値は、その後の検索から除外され、次のフラグに対して検索が続行されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-271">The value of that flag is then excluded from further consideration, and the search continues for the next flag.</span></span><br /><br /> <span data-ttu-id="4dc47-272">`value`が名前付き列挙定数の組み合わせと等しくない場合は、`value`に相当する 10 進数が返されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-272">If `value` is not equal to a combination of named enumerated constants, the decimal equivalent of `value` is returned.</span></span>|  
|<span data-ttu-id="4dc47-273">"X" または "x"</span><span class="sxs-lookup"><span data-stu-id="4dc47-273">"X" or "x"</span></span>|<span data-ttu-id="4dc47-274">`value`を先頭に "0x" がない 16 進数形式で表します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-274">Represents `value` in hexadecimal format without a leading "0x".</span></span>|  
|<span data-ttu-id="4dc47-275">"D" または "d"</span><span class="sxs-lookup"><span data-stu-id="4dc47-275">"D" or "d"</span></span>|<span data-ttu-id="4dc47-276">`value`を 10 進数形式で表します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-276">Represents `value` in decimal form.</span></span>|  
|<span data-ttu-id="4dc47-277">"F" または "f"</span><span class="sxs-lookup"><span data-stu-id="4dc47-277">"F" or "f"</span></span>|<span data-ttu-id="4dc47-278">"G" または "g" と同じように動作しますが、<xref:System.FlagsAttribute>宣言に<xref:System.Enum>が存在する必要がない点が異なります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-278">Behaves identically to "G" or "g", except that the <xref:System.FlagsAttribute> is not required to be present on the <xref:System.Enum> declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-279">次の例は、`Format`のコンテキストで`Enum`を使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-279">The following example illustrates the use of `Format` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumformat/CPP/EnumFormat.cpp#1)]
 [!code-csharp[enumformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumformat/CS/EnumFormat.cs#1)]
 [!code-vb[enumformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumformat/VB/EnumFormat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-280">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-280">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-281">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-281">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.</span></span>  
  
<span data-ttu-id="4dc47-282">-or-</span><span class="sxs-lookup"><span data-stu-id="4dc47-282">-or-</span></span> 
<span data-ttu-id="4dc47-283">The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-283">The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.</span></span>  
  
<span data-ttu-id="4dc47-284">-or-</span><span class="sxs-lookup"><span data-stu-id="4dc47-284">-or-</span></span> 
<span data-ttu-id="4dc47-285">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-285">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="4dc47-286">The <paramref name="format" /> parameter contains an invalid value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-286">The <paramref name="format" /> parameter contains an invalid value.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4dc47-287"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span><span class="sxs-lookup"><span data-stu-id="4dc47-287"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.ToString(System.String)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="4dc47-288">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="4dc47-288">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="4dc47-289">列挙型書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="4dc47-289">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="enum.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4dc47-290">Returns the hash code for the value of this instance.</span><span class="sxs-lookup"><span data-stu-id="4dc47-290">Returns the hash code for the value of this instance.</span></span></summary>
        <returns><span data-ttu-id="4dc47-291">A 32-bit signed integer hash code.</span><span class="sxs-lookup"><span data-stu-id="4dc47-291">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetName(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetName(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetName (enumType As Type, value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetName(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member GetName : Type * obj -&gt; string" Usage="System.Enum.GetName (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-292">An enumeration type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-292">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-293">The value of a particular enumerated constant in terms of its underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-293">The value of a particular enumerated constant in terms of its underlying type.</span></span></param>
        <summary><span data-ttu-id="4dc47-294">Retrieves the name of the constant in the specified enumeration that has the specified value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-294">Retrieves the name of the constant in the specified enumeration that has the specified value.</span></span></summary>
        <returns><span data-ttu-id="4dc47-295">A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</span><span class="sxs-lookup"><span data-stu-id="4dc47-295">A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-296">複数の列挙メンバーの基になる値が同じである場合、<xref:System.Enum.GetName%2A>メソッドは、列挙体のいずれかのメンバーの名前が返されることを保証します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-296">If multiple enumeration members have the same underlying value, the <xref:System.Enum.GetName%2A> method guarantees that it will return the name of one of those enumeration members.</span></span> <span data-ttu-id="4dc47-297">ただし、常に同じ列挙メンバーの名前が返されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-297">However, it does not guarantee that it will always return the name of the same enumeration member.</span></span> <span data-ttu-id="4dc47-298">その結果、複数の列挙体メンバーが同じ値を持つ場合、アプリケーションコードは、特定のメンバーの名前を返すメソッドに依存しないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-298">As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-299">次の例は、`GetName`の使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-299">The following example illustrates the use of `GetName`.</span></span>  
  
 [!code-cpp[enumgetname#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetname/CPP/EnumGetName.cpp#1)]
 [!code-csharp[enumgetname#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetname/CS/EnumGetName.cs#1)]
 [!code-vb[enumgetname#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetname/VB/EnumGetName.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-300"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-300"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-301"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-301"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
<span data-ttu-id="4dc47-302">-or-</span><span class="sxs-lookup"><span data-stu-id="4dc47-302">-or-</span></span> 
 <span data-ttu-id="4dc47-303"><paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-303"><paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public static string[] GetNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetNames(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetNames : Type -&gt; string[]" Usage="System.Enum.GetNames enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-304">An enumeration type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-304">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="4dc47-305">Retrieves an array of the names of the constants in a specified enumeration.</span><span class="sxs-lookup"><span data-stu-id="4dc47-305">Retrieves an array of the names of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="4dc47-306">A string array of the names of the constants in <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-306">A string array of the names of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-307">戻り値の配列の要素は、列挙定数のバイナリ値 (つまり、符号なしの大きさ) によって並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-307">The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="4dc47-308">次の例では、負の値、ゼロ、および正の値を含む列挙体に対して、<xref:System.Enum.GetNames%2A>メソッドによって返される配列に関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-308">The following example provides displays information about the array returned by the <xref:System.Enum.GetNames%2A> method for an enumeration that includes a negative, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getnames/cs/getnames1.cs#1)]
 [!code-vb[System.Enum.GetNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getnames/vb/getnames1.vb#1)]  
  
 <span data-ttu-id="4dc47-309">同じ値を持つ列挙定数がある場合、対応する名前の順序は不定です。</span><span class="sxs-lookup"><span data-stu-id="4dc47-309">If there are enumerated constants with same value, the order of their corresponding names is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-310"><xref:System.Enum.GetNames%2A>メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-310">The following example illustrates the use of the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 [!code-cpp[enumgetnames#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetnames/CPP/EnumGetNames.cpp#1)]
 [!code-csharp[enumgetnames#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetnames/CS/EnumGetNames.cs#1)]
 [!code-vb[enumgetnames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetnames/VB/EnumGetNames.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-311"><paramref name="enumType" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-311"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-312"><paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-312"><paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TypeCode GetTypeCode() cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCode GetTypeCode();" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="F#" Value="member this.GetTypeCode : unit -&gt; TypeCode" Usage="enum.GetTypeCode " FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="enum.GetTypeCode " FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4dc47-313">Returns the type code of the underlying type of this enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-313">Returns the type code of the underlying type of this enumeration member.</span></span></summary>
        <returns><span data-ttu-id="4dc47-314">The type code of the underlying type of this instance.</span><span class="sxs-lookup"><span data-stu-id="4dc47-314">The type code of the underlying type of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4dc47-315">The enumeration type is unknown.</span><span class="sxs-lookup"><span data-stu-id="4dc47-315">The enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.GetUnderlyingType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnderlyingType">
      <MemberSignature Language="C#" Value="public static Type GetUnderlyingType (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetUnderlyingType(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetUnderlyingType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnderlyingType (enumType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetUnderlyingType(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetUnderlyingType : Type -&gt; Type" Usage="System.Enum.GetUnderlyingType enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-316">The enumeration whose underlying type will be retrieved.</span><span class="sxs-lookup"><span data-stu-id="4dc47-316">The enumeration whose underlying type will be retrieved.</span></span></param>
        <summary><span data-ttu-id="4dc47-317">Returns the underlying type of the specified enumeration.</span><span class="sxs-lookup"><span data-stu-id="4dc47-317">Returns the underlying type of the specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="4dc47-318">The underlying type of <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-318">The underlying type of <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-319"><xref:System.Enum>構造体を使用すると、値を名前付き定数として表すことができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-319">The <xref:System.Enum> structure enables values to be represented as named constants.</span></span> <span data-ttu-id="4dc47-320">列挙値のデータ型は、基になる型と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-320">The data type of the enumeration's values is known as its underlying type.</span></span> <span data-ttu-id="4dc47-321">たとえば、 <xref:System.DayOfWeek>列挙型の基になる型は、曜日 (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>、 <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>など) を表す定数で構成されていて、<xref:System.Int32>です。</span><span class="sxs-lookup"><span data-stu-id="4dc47-321">For example, the underlying type of the <xref:System.DayOfWeek> enumeration, which consists of constants that represent each day of the week (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, and so on), is <xref:System.Int32>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-322">次の例では、<xref:System.Enum.GetUnderlyingType%2A>メソッドを呼び出して、列挙型のメンバーの基になる型を表示しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-322">The following example calls the <xref:System.Enum.GetUnderlyingType%2A> method to display the underlying type of some enumeration members.</span></span>  
  
 [!code-csharp[System.Enum.GetUnderlyingType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getunderlyingtype/cs/getunderlyingtype1.cs#1)]
 [!code-vb[System.Enum.GetUnderlyingType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getunderlyingtype/vb/getunderlyingtype1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-323"><paramref name="enumType" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-323"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-324"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-324"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.GetTypeCode" />
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public static Array GetValues (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array GetValues(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetValues(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValues (enumType As Type) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ GetValues(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetValues : Type -&gt; Array" Usage="System.Enum.GetValues enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-325">An enumeration type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-325">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="4dc47-326">Retrieves an array of the values of the constants in a specified enumeration.</span><span class="sxs-lookup"><span data-stu-id="4dc47-326">Retrieves an array of the values of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="4dc47-327">An array that contains the values of the constants in <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-327">An array that contains the values of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-328">配列の要素は、列挙定数のバイナリ値 (つまり、符号なしの大きさ) によって並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-328">The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="4dc47-329">次の例では、負の値、0、正の値を含む列挙体に対して、<xref:System.Enum.GetValues%2A>メソッドによって返される配列に関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-329">The following example displays information about the array returned by the <xref:System.Enum.GetValues%2A> method for an enumeration that includes a negative value, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues1.cs#1)]
 [!code-vb[System.Enum.GetValues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues1.vb#1)]  
  
 <span data-ttu-id="4dc47-330"><xref:System.Enum.GetValues%2A>メソッドは、 `enumType`列挙体の各メンバーの値を格納する配列を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-330">The <xref:System.Enum.GetValues%2A> method returns an array that contains a value for each member of the `enumType` enumeration.</span></span> <span data-ttu-id="4dc47-331">複数のメンバーが同じ値を持つ場合、返される配列には重複する値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-331">If multiple members have the same value, the returned array includes duplicate values.</span></span> <span data-ttu-id="4dc47-332">この場合、返された配列内の各値を使用して<xref:System.Enum.GetName%2A>メソッドを呼び出すと、重複する値を持つメンバーに割り当てられた一意の名前は復元されません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-332">In this case, calling the <xref:System.Enum.GetName%2A> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</span></span> <span data-ttu-id="4dc47-333">列挙メンバーのすべての名前を正常に取得するには、<xref:System.Enum.GetNames%2A>メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-333">To retrieve all the names of enumeration members successfully, call the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 <span data-ttu-id="4dc47-334">リフレクションのみのコンテキストでは、リフレクションを使用して<xref:System.Enum.GetValues%2A>メソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-334">The <xref:System.Enum.GetValues%2A> method cannot be invoked by using reflection in a reflection-only context.</span></span> <span data-ttu-id="4dc47-335">代わりに、<xref:System.Type.GetFields%2A?displayProperty=nameWithType>メソッドを使用して列挙体のメンバーを表すオブジェクトの<xref:System.Reflection.FieldInfo>配列を取得し、配列の各要素に対して<xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType>メソッドを呼び出すことで、すべての列挙体メンバーの値を取得できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-335">Instead, you can retrieve the value of all enumeration members by using the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get an array of <xref:System.Reflection.FieldInfo> objects that represent enumeration members and then call the <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> method on each element of the array.</span></span> <span data-ttu-id="4dc47-336">次の例は、この手法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-336">The following example illustrates this technique.</span></span> <span data-ttu-id="4dc47-337">このためには、Enumerations.dll という名前のアセンブリに次の列挙型を定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-337">It requires that you define the following enumeration in an assembly named Enumerations.dll:</span></span>  
  
 [!code-csharp[System.Enum.GetValues#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#2)]
 [!code-vb[System.Enum.GetValues#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#2)]  
  
 <span data-ttu-id="4dc47-338">アセンブリはリフレクションのみのコンテキストで読み込まれます。<xref:System.Type>列挙体を表す`Pets`オブジェクトがインスタンス化され、<xref:System.Reflection.FieldInfo>オブジェクトの配列が取得され、フィールド値がコンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-338">The assembly is loaded in a reflection-only context, a <xref:System.Type> object that represents the `Pets` enumeration is instantiated, an array of <xref:System.Reflection.FieldInfo> objects is retrieved, and the field values are displayed to the console.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#3)]
 [!code-vb[System.Enum.GetValues#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-339">次の例は、<xref:System.Enum.GetValues%2A>の使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-339">The following example illustrates the use of <xref:System.Enum.GetValues%2A>.</span></span>  
  
 [!code-cpp[enumgetvalues#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetvalues/CPP/EnumGetValues.cpp#1)]
 [!code-csharp[enumgetvalues#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetvalues/CS/EnumGetValues.cs#1)]
 [!code-vb[enumgetvalues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetvalues/VB/EnumGetValues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-340"><paramref name="enumType" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-340"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-341"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-341"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4dc47-342">The method is invoked by reflection in a reflection-only context,</span><span class="sxs-lookup"><span data-stu-id="4dc47-342">The method is invoked by reflection in a reflection-only context,</span></span> 
<span data-ttu-id="4dc47-343">-or-</span><span class="sxs-lookup"><span data-stu-id="4dc47-343">-or-</span></span> 
 <span data-ttu-id="4dc47-344"><paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</span><span class="sxs-lookup"><span data-stu-id="4dc47-344"><paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasFlag">
      <MemberSignature Language="C#" Value="public bool HasFlag (Enum flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasFlag(class System.Enum flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.HasFlag(System.Enum)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFlag (flag As Enum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFlag(Enum ^ flag);" />
      <MemberSignature Language="F#" Value="member this.HasFlag : Enum -&gt; bool" Usage="enum.HasFlag flag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Enum" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="4dc47-345">An enumeration value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-345">An enumeration value.</span></span></param>
        <summary><span data-ttu-id="4dc47-346">Determines whether one or more bit fields are set in the current instance.</span><span class="sxs-lookup"><span data-stu-id="4dc47-346">Determines whether one or more bit fields are set in the current instance.</span></span></summary>
        <returns><span data-ttu-id="4dc47-347"><see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-347"><see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-348"><xref:System.Enum.HasFlag%2A>メソッドは、次のブール式の結果を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-348">The <xref:System.Enum.HasFlag%2A> method returns the result of the following Boolean expression.</span></span>  
  
```  
thisInstance And flag = flag   
```  
  
 <span data-ttu-id="4dc47-349">`flag`の基になる値がゼロの場合、メソッドは`true`を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-349">If the underlying value of `flag` is zero, the method returns `true`.</span></span> <span data-ttu-id="4dc47-350">この動作が望ましくない場合は、次の例に示すように、<xref:System.Enum.Equals%2A>メソッドを使用してゼロと等しいかどうかをテストし、<xref:System.Enum.HasFlag%2A>の基になる値が 0 以外の場合にのみ`flag`を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-350">If this behavior is not desirable, you can use the <xref:System.Enum.Equals%2A> method to test for equality with zero and call <xref:System.Enum.HasFlag%2A> only if the underlying value of `flag` is non-zero, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag0.cs#1)]
 [!code-vb[System.Enum.HasFlag#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag0.vb#1)]  
  
 <span data-ttu-id="4dc47-351"><xref:System.Enum.HasFlag%2A>メソッドは、<xref:System.FlagsAttribute>属性でマークされた列挙型と共に使用するように設計されており、複数のビットフィールドが設定されているかどうかを判断するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-351">The <xref:System.Enum.HasFlag%2A> method is designed to be used with enumeration types that are marked with the <xref:System.FlagsAttribute> attribute and can be used to determine whether multiple bit fields are set.</span></span> <span data-ttu-id="4dc47-352"><xref:System.FlagsAttribute>属性でマークされていない列挙型の場合は、<xref:System.Enum.Equals%2A>メソッドまたは<xref:System.Enum.CompareTo%2A>メソッドのいずれかを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-352">For enumeration types that are not marked with the <xref:System.FlagsAttribute> attribute, call either the <xref:System.Enum.Equals%2A> method or the <xref:System.Enum.CompareTo%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-353">次の例では、顧客がレストランで注文できる項目のカテゴリを反映する`ItemsOrdered`列挙体を定義します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-353">The following example defines an `ItemsOrdered` enumeration that reflects categories of items that a customer can order in a restaurant.</span></span> <span data-ttu-id="4dc47-354">この例では、顧客が前菜と飲み物の両方を発注したかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="4dc47-354">The example tests whether the customer has ordered both an entrée and a beverage.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag1.cs#2)]
 [!code-vb[System.Enum.HasFlag#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-355"><paramref name="flag" /> is a different type than the current instance.</span><span class="sxs-lookup"><span data-stu-id="4dc47-355"><paramref name="flag" /> is a different type than the current instance.</span></span></exception>
        <altmember cref="T:System.FlagsAttribute" />
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.IsDefined(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefined (enumType As Type, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefined(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member IsDefined : Type * obj -&gt; bool" Usage="System.Enum.IsDefined (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-356">An enumeration type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-356">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-357">The value or name of a constant in <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-357">The value or name of a constant in <paramref name="enumType" />.</span></span></param>
        <summary><span data-ttu-id="4dc47-358">Returns a Boolean telling whether a given integral value, or its name as a string, exists in a specified enumeration.</span><span class="sxs-lookup"><span data-stu-id="4dc47-358">Returns a Boolean telling whether a given integral value, or its name as a string, exists in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="4dc47-359"><see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-359"><see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-360">`value`パラメーターには、次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-360">The `value` parameter can be any of the following:</span></span>  
  
-   <span data-ttu-id="4dc47-361">`enumType`型の任意のメンバー。</span><span class="sxs-lookup"><span data-stu-id="4dc47-361">Any member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="4dc47-362">値が`enumType`型の列挙体メンバーである変数。</span><span class="sxs-lookup"><span data-stu-id="4dc47-362">A variable whose value is an enumeration member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="4dc47-363">列挙メンバーの名前の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="4dc47-363">The string representation of the name of an enumeration member.</span></span> <span data-ttu-id="4dc47-364">文字列内の文字の大文字と小文字の区別は、列挙体のメンバー名と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-364">The characters in the string must have the same case as the enumeration member name.</span></span>  
  
-   <span data-ttu-id="4dc47-365">`enumType`の基になる型の値。</span><span class="sxs-lookup"><span data-stu-id="4dc47-365">A value of the underlying type of `enumType`.</span></span>  
  
 <span data-ttu-id="4dc47-366">`enumType`の定数がビットフィールドのセットを定義し、`value`が複数のビットフィールドの値、名前、または基になる値を含んでいる場合、<xref:System.Enum.IsDefined%2A>メソッドは`false`ます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-366">If the constants in `enumType` define a set of bit fields and `value` contains the values, names, or underlying values of multiple bit fields, the <xref:System.Enum.IsDefined%2A> method returns `false`.</span></span> <span data-ttu-id="4dc47-367">つまり、ビットフィールドのセットを定義する列挙型では、1つのビットフィールドが列挙体に属しているかどうかのみが決定されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-367">In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</span></span> <span data-ttu-id="4dc47-368"><xref:System.FlagsAttribute> 属性でタグ付けされた列挙型に複数のビットフィールドが設定されているかどうかを確認するには、<xref:System.Enum.HasFlag%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-368">To determine whether multiple bit fields are set in an enumeration type that is tagged with the <xref:System.FlagsAttribute> attribute, you can call the <xref:System.Enum.HasFlag%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-369">次の例では、個々のビットフィールドで構成される`PetType`という名前の列挙を定義します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-369">The following example defines an enumeration named `PetType` that consists of individual bit fields.</span></span> <span data-ttu-id="4dc47-370">次に、基になる列挙値、文字列名、および複数のビットフィールドを設定した結果として得られる複合値を使用して<xref:System.Enum.IsDefined%2A>メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-370">It then calls the <xref:System.Enum.IsDefined%2A> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined1.cs#1)]
 [!code-vb[System.Enum.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/IsDefined1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-371"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-371"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-372"><paramref name="enumType" /> is not an <see langword="Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-372"><paramref name="enumType" /> is not an <see langword="Enum" />.</span></span>  
  
<span data-ttu-id="4dc47-373">-or-</span><span class="sxs-lookup"><span data-stu-id="4dc47-373">-or-</span></span> 
<span data-ttu-id="4dc47-374">The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-374">The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.</span></span>  
  
<span data-ttu-id="4dc47-375">-or-</span><span class="sxs-lookup"><span data-stu-id="4dc47-375">-or-</span></span> 
<span data-ttu-id="4dc47-376">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-376">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4dc47-377"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-377"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="4dc47-378"><paramref name="enumType" /> が <see cref="T:System.FlagsAttribute" /> 属性を使用して定義された列挙型である場合、<paramref name="value" /> 内の複数のビットフィールドが設定されていても、<paramref name="value" /> が複合列挙値に対応していない場合、または <paramref name="value" /> がの文字列連結である場合、メソッドは <see langword="false" /> を返します。複数のビットフラグの名前。</span><span class="sxs-lookup"><span data-stu-id="4dc47-378">If <paramref name="enumType" /> is an enumeration that is defined by using the <see cref="T:System.FlagsAttribute" /> attribute, the method returns <see langword="false" /> if multiple bit fields in <paramref name="value" /> are set but <paramref name="value" /> does not correspond to a composite enumeration value, or if <paramref name="value" /> is a string concatenation of the names of multiple bit flags.</span></span> <span data-ttu-id="4dc47-379">次の例では、<see cref="T:System.FlagsAttribute" /> 属性を使用して<c>ペット</c>列挙が定義されています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-379">In the following example, a <c>Pets</c> enumeration is defined with the <see cref="T:System.FlagsAttribute" /> attribute.</span></span> <span data-ttu-id="4dc47-380"><see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> メソッドは、2つのビットフィールド ( <c>Pets.Cat と</c>) が設定された列挙値を渡し、その列挙値の文字列<c>形式 ("</c> Dog, Cat") を渡すと、<see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-380">The <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> method returns <see langword="false" /> when you pass it an enumeration value that has two bit fields (<c>Pets.Dog</c> and <c>Pets.Cat</c>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").</span></span>  
  
<span data-ttu-id="4dc47-381">[!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)] [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="4dc47-381">[!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)] [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]</span></span> 
<span data-ttu-id="4dc47-382"><see cref="M:System.Enum.HasFlag(System.Enum)" /> メソッドを呼び出すことによって、複数のビットフィールドが設定されているかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-382">You can determine whether multiple bit fields are set by calling the <see cref="M:System.Enum.HasFlag(System.Enum)" /> method.</span></span></para></block>
        <altmember cref="M:System.Enum.GetName(System.Type,System.Object)" />
        <altmember cref="M:System.Enum.GetNames(System.Type)" />
        <altmember cref="M:System.Enum.GetValues(System.Type)" />
        <altmember cref="M:System.Enum.HasFlag(System.Enum)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4dc47-383">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span><span class="sxs-lookup"><span data-stu-id="4dc47-383">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <altmember cref="M:System.Enum.TryParse``1(System.String,``0@)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : Type * string -&gt; obj" Usage="System.Enum.Parse (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-384">An enumeration type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-384">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-385">A string containing the name or value to convert.</span><span class="sxs-lookup"><span data-stu-id="4dc47-385">A string containing the name or value to convert.</span></span></param>
        <summary><span data-ttu-id="4dc47-386">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span><span class="sxs-lookup"><span data-stu-id="4dc47-386">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <returns><span data-ttu-id="4dc47-387">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-387">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-388">`value`パラメーターには、列挙メンバーの基になる値または名前付き定数の文字列形式、またはコンマ (,) で区切られた名前付き定数のリストが含まれます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-388">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="4dc47-389">`value`では、各値、名前、またはコンマの前または後に 1 つ以上の空白文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-389">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="4dc47-390">`value`がリストの場合、戻り値は指定された名前の値を、ビットごとに`OR`演算で組み合わせた値となります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-390">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="4dc47-391">`value`が`enumType`の名前付き定数に対応しない名前である場合、メソッドは<xref:System.ArgumentException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="4dc47-391">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="4dc47-392">`value`が`enumType`列挙体の基になる値を表さない整数の文字列表現の場合、メソッドは、基になる値が整数型に変換された`value`である列挙体のメンバーを返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-392">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="4dc47-393">この動作が望ましくない場合は、<xref:System.Enum.IsDefined%2A>メソッドを呼び出して、整数の特定の文字列形式が実際に`enumType`のメンバーであることを確認します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-393">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="4dc47-394">次の例では、`Colors`列挙体を定義し、<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>メソッドを呼び出して文字列を対応する列挙値に変換し、<xref:System.Enum.IsDefined%2A>メソッドを呼び出して、特定の整数値が`Colors`列挙体の基になる値であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-394">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample1.cs#1)]
 [!code-vb[System.Enum.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample1.vb#1)]  
  
 <span data-ttu-id="4dc47-395">この操作では、大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-395">This operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-396">次の例では、<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>、メソッドを使用して、<xref:System.Enum.GetNames%2A>メソッドを呼び出すことによって作成された文字列の配列を解析します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-396">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="4dc47-397">また、<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>メソッドを使用して、ビットフィールドで構成される列挙値を解析します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-397">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-cpp[enumparse#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumparse/CPP/EnumParse.cpp#1)]
 [!code-csharp[enumparse#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumparse/CS/EnumParse.cs#1)]
 [!code-vb[enumparse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumparse/VB/EnumParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-398"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-398"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-399"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-399"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
<span data-ttu-id="4dc47-400">-or-</span><span class="sxs-lookup"><span data-stu-id="4dc47-400">-or-</span></span> 
 <span data-ttu-id="4dc47-401"><paramref name="value" /> is either an empty string or only contains white space.</span><span class="sxs-lookup"><span data-stu-id="4dc47-401"><paramref name="value" /> is either an empty string or only contains white space.</span></span>  
  
<span data-ttu-id="4dc47-402">-or-</span><span class="sxs-lookup"><span data-stu-id="4dc47-402">-or-</span></span> 
 <span data-ttu-id="4dc47-403"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span><span class="sxs-lookup"><span data-stu-id="4dc47-403"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4dc47-404"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-404"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Parse : Type * string * bool -&gt; obj" Usage="System.Enum.Parse (enumType, value, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-405">An enumeration type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-405">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-406">A string containing the name or value to convert.</span><span class="sxs-lookup"><span data-stu-id="4dc47-406">A string containing the name or value to convert.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="4dc47-407"><see langword="true" /> to ignore case; <see langword="false" /> to regard case.</span><span class="sxs-lookup"><span data-stu-id="4dc47-407"><see langword="true" /> to ignore case; <see langword="false" /> to regard case.</span></span></param>
        <summary><span data-ttu-id="4dc47-408">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span><span class="sxs-lookup"><span data-stu-id="4dc47-408">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="4dc47-409">A parameter specifies whether the operation is case-insensitive.</span><span class="sxs-lookup"><span data-stu-id="4dc47-409">A parameter specifies whether the operation is case-insensitive.</span></span></summary>
        <returns><span data-ttu-id="4dc47-410">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-410">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-411">`value`パラメーターには、列挙メンバーの基になる値または名前付き定数の文字列形式、またはコンマ (,) で区切られた名前付き定数のリストが含まれます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-411">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="4dc47-412">`value`では、各値、名前、またはコンマの前または後に 1 つ以上の空白文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-412">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="4dc47-413">`value`がリストの場合、戻り値は指定された名前の値を、ビットごとに`OR`演算で組み合わせた値となります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-413">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="4dc47-414">`value`が`enumType`の名前付き定数に対応しない名前である場合、メソッドは<xref:System.ArgumentException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="4dc47-414">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="4dc47-415">`value`が`enumType`列挙体の基になる値を表さない整数の文字列表現の場合、メソッドは、基になる値が整数型に変換された`value`である列挙体のメンバーを返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-415">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="4dc47-416">この動作が望ましくない場合は、<xref:System.Enum.IsDefined%2A>メソッドを呼び出して、整数の特定の文字列形式が実際に`enumType`のメンバーであることを確認します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-416">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="4dc47-417">次の例では、`Colors`列挙体を定義し、<xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29>メソッドを呼び出して文字列を対応する列挙値に変換し、<xref:System.Enum.IsDefined%2A>メソッドを呼び出して、特定の整数値が`Colors`列挙体の基になる値であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-417">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 <span data-ttu-id="4dc47-418">`ignoreCase`パラメーターは、この操作で大文字と小文字を区別するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-418">The `ignoreCase` parameter specifies whether this operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-419">次の例では、<xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29>、メソッドを使用して、<xref:System.Enum.GetNames%2A>メソッドを呼び出すことによって作成された文字列の配列を解析します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-419">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="4dc47-420">また、<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>メソッドを使用して、ビットフィールドで構成される列挙値を解析します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-420">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-421"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-421"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-422"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-422"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
<span data-ttu-id="4dc47-423">-or-</span><span class="sxs-lookup"><span data-stu-id="4dc47-423">-or-</span></span> 
 <span data-ttu-id="4dc47-424"><paramref name="value" /> is either an empty string ("") or only contains white space.</span><span class="sxs-lookup"><span data-stu-id="4dc47-424"><paramref name="value" /> is either an empty string ("") or only contains white space.</span></span>  
  
<span data-ttu-id="4dc47-425">-or-</span><span class="sxs-lookup"><span data-stu-id="4dc47-425">-or-</span></span> 
 <span data-ttu-id="4dc47-426"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span><span class="sxs-lookup"><span data-stu-id="4dc47-426"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="4dc47-427"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-427"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; 'Enum (requires 'Enum : struct)" Usage="System.Enum.Parse value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value, bool ignoreCase) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String, ignoreCase As Boolean) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Parse : string * bool -&gt; 'Enum (requires 'Enum : struct)" Usage="System.Enum.Parse (value, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-428">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-428">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-429">Converts the current value to a Boolean value based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-429">Converts the current value to a Boolean value based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-430">This member always throws an exception.</span><span class="sxs-lookup"><span data-stu-id="4dc47-430">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-431">現在、実装されていません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-431">Currently not implemented.</span></span> <span data-ttu-id="4dc47-432">常に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-432">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="4dc47-433">In all cases.</span><span class="sxs-lookup"><span data-stu-id="4dc47-433">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-434">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-434">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-435">Converts the current value to an 8-bit unsigned integer based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-435">Converts the current value to an 8-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-436">The converted value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-436">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-437"><xref:System.Convert>を使用して変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-437">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-438">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-438">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-439">Converts the current value to a Unicode character based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-439">Converts the current value to a Unicode character based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-440">This member always throws an exception.</span><span class="sxs-lookup"><span data-stu-id="4dc47-440">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-441">現在、実装されていません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-441">Currently not implemented.</span></span> <span data-ttu-id="4dc47-442">常に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-442">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="4dc47-443">In all cases.</span><span class="sxs-lookup"><span data-stu-id="4dc47-443">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-444">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-444">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-445">Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-445">Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-446">This member always throws an exception.</span><span class="sxs-lookup"><span data-stu-id="4dc47-446">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-447">現在、実装されていません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-447">Currently not implemented.</span></span> <span data-ttu-id="4dc47-448">常に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-448">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="4dc47-449">In all cases.</span><span class="sxs-lookup"><span data-stu-id="4dc47-449">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-450">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-450">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-451">Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-451">Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-452">This member always throws an exception.</span><span class="sxs-lookup"><span data-stu-id="4dc47-452">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-453">現在、実装されていません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-453">Currently not implemented.</span></span> <span data-ttu-id="4dc47-454">常に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-454">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="4dc47-455">In all cases.</span><span class="sxs-lookup"><span data-stu-id="4dc47-455">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-456">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-456">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-457">Converts the current value to a double-precision floating point number based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-457">Converts the current value to a double-precision floating point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-458">This member always throws an exception.</span><span class="sxs-lookup"><span data-stu-id="4dc47-458">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-459">現在、実装されていません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-459">Currently not implemented.</span></span> <span data-ttu-id="4dc47-460">常に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-460">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="4dc47-461">In all cases.</span><span class="sxs-lookup"><span data-stu-id="4dc47-461">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-462">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-462">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-463">Converts the current value to a 16-bit signed integer based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-463">Converts the current value to a 16-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-464">The converted value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-464">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-465"><xref:System.Convert>を使用して変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-465">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-466">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-466">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-467">Converts the current value to a 32-bit signed integer based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-467">Converts the current value to a 32-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-468">The converted value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-468">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-469"><xref:System.Convert>を使用して変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-469">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-470">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-470">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-471">Converts the current value to a 64-bit signed integer based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-471">Converts the current value to a 64-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-472">The converted value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-472">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-473"><xref:System.Convert>を使用して変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-473">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-474">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-474">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-475">Converts the current value to an 8-bit signed integer based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-475">Converts the current value to an 8-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-476">The converted value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-476">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-477"><xref:System.Convert>を使用して変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-477">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-478">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-478">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-479">Converts the current value to a single-precision floating-point number based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-479">Converts the current value to a single-precision floating-point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-480">This member always throws an exception.</span><span class="sxs-lookup"><span data-stu-id="4dc47-480">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-481">現在、実装されていません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-481">Currently not implemented.</span></span> <span data-ttu-id="4dc47-482">常に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-482">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="4dc47-483">In all cases.</span><span class="sxs-lookup"><span data-stu-id="4dc47-483">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="4dc47-484">The type to convert to.</span><span class="sxs-lookup"><span data-stu-id="4dc47-484">The type to convert to.</span></span></param>
        <param name="provider"><span data-ttu-id="4dc47-485">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-485">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-486">Converts the current value to a specified type based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-486">Converts the current value to a specified type based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-487">The converted value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-487">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-488"><xref:System.Convert>を使用して変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-488">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-489">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-489">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-490">Converts the current value to a 16-bit unsigned integer based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-490">Converts the current value to a 16-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-491">The converted value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-491">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-492"><xref:System.Convert>を使用して変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-492">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-493">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-493">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-494">Converts the current value to a 32-bit unsigned integer based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-494">Converts the current value to a 32-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-495">The converted value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-495">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-496"><xref:System.Convert>を使用して変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-496">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-497">An object that supplies culture-specific formatting information.</span><span class="sxs-lookup"><span data-stu-id="4dc47-497">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="4dc47-498">Converts the current value to a 64-bit unsigned integer based on the underlying type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-498">Converts the current value to a 64-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="4dc47-499">The converted value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-499">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-500"><xref:System.Convert>を使用して変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-500">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;dotnet-uwp-10.0">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="4dc47-501">A format specification.</span><span class="sxs-lookup"><span data-stu-id="4dc47-501">A format specification.</span></span></param>
        <param name="provider">To be added.</param>
        <summary><span data-ttu-id="4dc47-502">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-502">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="4dc47-503">The string representation of the value of this instance, as specified by <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-503">The string representation of the value of this instance, as specified by <paramref name="format" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4dc47-504"><paramref name="format" /> does not contain a valid format specification.</span><span class="sxs-lookup"><span data-stu-id="4dc47-504"><paramref name="format" /> does not contain a valid format specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4dc47-505"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span><span class="sxs-lookup"><span data-stu-id="4dc47-505"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4dc47-506">Converts a specified integer value to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-506">Converts a specified integer value to an enumeration member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Byte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * byte -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-507">The enumeration type to return.</span><span class="sxs-lookup"><span data-stu-id="4dc47-507">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-508">The value to convert to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-508">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="4dc47-509">Converts the specified 8-bit unsigned integer to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-509">Converts the specified 8-bit unsigned integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="4dc47-510">An instance of the enumeration set to <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-510">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-511"><xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29>メソッドは、 `value`を基になる値が`value`である列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-511">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="4dc47-512">値が`enumType`メンバーの境界の外側にある場合でも、変換は成功します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-512">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="4dc47-513">`value`が`enumType`列挙体の有効な基になる値であることを確認するには、それを<xref:System.Enum.IsDefined%2A>メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-513">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="4dc47-514">この変換メソッドは、<xref:System.Object>型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-514">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="4dc47-515">その後、これをキャストするか、`enumType`型のオブジェクトに変換できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-515">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-516"><paramref name="enumType" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-516"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-517"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-517"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Short) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, short value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int16 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Int16" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-518">The enumeration type to return.</span><span class="sxs-lookup"><span data-stu-id="4dc47-518">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-519">The value to convert to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-519">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="4dc47-520">Converts the specified 16-bit signed integer to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-520">Converts the specified 16-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="4dc47-521">An instance of the enumeration set to <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-521">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-522"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29>メソッドは、 `value`を基になる値が`value`である列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-522">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="4dc47-523">値が`enumType`メンバーの境界の外側にある場合でも、変換は成功します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-523">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="4dc47-524">`value`が`enumType`列挙体の有効な基になる値であることを確認するには、それを<xref:System.Enum.IsDefined%2A>メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-524">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="4dc47-525">この変換メソッドは、<xref:System.Object>型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-525">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="4dc47-526">その後、これをキャストするか、`enumType`型のオブジェクトに変換できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-526">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-527"><paramref name="enumType" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-527"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-528"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-528"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, int value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-529">The enumeration type to return.</span><span class="sxs-lookup"><span data-stu-id="4dc47-529">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-530">The value to convert to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-530">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="4dc47-531">Converts the specified 32-bit signed integer to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-531">Converts the specified 32-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="4dc47-532">An instance of the enumeration set to <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-532">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-533"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29>メソッドは、 `value`を基になる値が`value`である列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-533">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="4dc47-534">値が`enumType`メンバーの境界の外側にある場合でも、変換は成功します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-534">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="4dc47-535">`value`が`enumType`列挙体の有効な基になる値であることを確認するには、それを<xref:System.Enum.IsDefined%2A>メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-535">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="4dc47-536">この変換メソッドは、<xref:System.Object>型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-536">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="4dc47-537">その後、これをキャストするか、`enumType`型のオブジェクトに変換できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-537">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-538"><paramref name="enumType" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-538"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-539"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-539"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, long value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int64 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-540">The enumeration type to return.</span><span class="sxs-lookup"><span data-stu-id="4dc47-540">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-541">The value to convert to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-541">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="4dc47-542">Converts the specified 64-bit signed integer to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-542">Converts the specified 64-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="4dc47-543">An instance of the enumeration set to <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-543">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-544"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29>メソッドは、 `value`を基になる値が`value`である列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-544">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="4dc47-545">値が`enumType`メンバーの境界の外側にある場合でも、変換は成功します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-545">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="4dc47-546">`value`が`enumType`列挙体の有効な基になる値であることを確認するには、それを<xref:System.Enum.IsDefined%2A>メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-546">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="4dc47-547">この変換メソッドは、<xref:System.Object>型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-547">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="4dc47-548">その後、これをキャストするか、`enumType`型のオブジェクトに変換できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-548">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-549"><paramref name="enumType" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-549"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-550"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-550"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * obj -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-551">The enumeration type to return.</span><span class="sxs-lookup"><span data-stu-id="4dc47-551">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-552">The value convert to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-552">The value convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="4dc47-553">Converts the specified object with an integer value to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-553">Converts the specified object with an integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="4dc47-554">An enumeration object whose value is <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-554">An enumeration object whose value is <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-555"><xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29>メソッドは、 整数値`value`を基になる値が`value`である列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-555">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> method converts the integral value `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="4dc47-556">値が`enumType`メンバーの境界の外側にある場合でも、変換は成功します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-556">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="4dc47-557">`value`が`enumType`列挙体の有効な基になる値であることを確認するには、それを<xref:System.Enum.IsDefined%2A>メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-557">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="4dc47-558">この変換メソッドは、<xref:System.Object>型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-558">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="4dc47-559">その後、これをキャストするか、`enumType`型のオブジェクトに変換できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-559">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-560"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-560"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-561"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-561"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
<span data-ttu-id="4dc47-562">-or-</span><span class="sxs-lookup"><span data-stu-id="4dc47-562">-or-</span></span> 
 <span data-ttu-id="4dc47-563"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-563"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As SByte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * sbyte -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.SByte" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-564">The enumeration type to return.</span><span class="sxs-lookup"><span data-stu-id="4dc47-564">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-565">The value to convert to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-565">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="4dc47-566">Converts the specified 8-bit signed integer value to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-566">Converts the specified 8-bit signed integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="4dc47-567">An instance of the enumeration set to <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-567">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-568"><xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29>メソッドは、 `value`を基になる値が`value`である列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-568">The <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="4dc47-569">値が`enumType`メンバーの境界の外側にある場合でも、変換は成功します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-569">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="4dc47-570">`value`が`enumType`列挙体の有効な基になる値であることを確認するには、それを<xref:System.Enum.IsDefined%2A>メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-570">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="4dc47-571">この変換メソッドは、<xref:System.Object>型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-571">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="4dc47-572">その後、これをキャストするか、`enumType`型のオブジェクトに変換できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-572">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-573"><paramref name="enumType" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-573"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-574"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-574"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UShort) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint16 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.UInt16" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-575">The enumeration type to return.</span><span class="sxs-lookup"><span data-stu-id="4dc47-575">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-576">The value to convert to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-576">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="4dc47-577">Converts the specified 16-bit unsigned integer value to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-577">Converts the specified 16-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="4dc47-578">An instance of the enumeration set to <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-578">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-579"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29>メソッドは、 `value`を基になる値が`value`である列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-579">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="4dc47-580">値が`enumType`メンバーの境界の外側にある場合でも、変換は成功します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-580">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="4dc47-581">`value`が`enumType`列挙体の有効な基になる値であることを確認するには、それを<xref:System.Enum.IsDefined%2A>メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-581">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="4dc47-582">この変換メソッドは、<xref:System.Object>型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-582">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="4dc47-583">その後、これをキャストするか、`enumType`型のオブジェクトに変換できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-583">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-584"><paramref name="enumType" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-584"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-585"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-585"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UInteger) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint32 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.UInt32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-586">The enumeration type to return.</span><span class="sxs-lookup"><span data-stu-id="4dc47-586">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-587">The value to convert to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-587">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="4dc47-588">Converts the specified 32-bit unsigned integer value to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-588">Converts the specified 32-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="4dc47-589">An instance of the enumeration set to <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-589">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-590"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29>メソッドは、 `value`を基になる値が`value`である列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-590">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="4dc47-591">値が`enumType`メンバーの境界の外側にある場合でも、変換は成功します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-591">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="4dc47-592">`value`が`enumType`列挙体の有効な基になる値であることを確認するには、それを<xref:System.Enum.IsDefined%2A>メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-592">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="4dc47-593">この変換メソッドは、<xref:System.Object>型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-593">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="4dc47-594">その後、これをキャストするか、`enumType`型のオブジェクトに変換できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-594">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-595"><paramref name="enumType" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-595"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-596"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-596"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As ULong) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint64 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.UInt64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-597">The enumeration type to return.</span><span class="sxs-lookup"><span data-stu-id="4dc47-597">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-598">The value to convert to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-598">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="4dc47-599">Converts the specified 64-bit unsigned integer value to an enumeration member.</span><span class="sxs-lookup"><span data-stu-id="4dc47-599">Converts the specified 64-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="4dc47-600">An instance of the enumeration set to <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-600">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-601"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29>メソッドは、 `value`を基になる値が`value`である列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-601">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="4dc47-602">値が`enumType`メンバーの境界の外側にある場合でも、変換は成功します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-602">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="4dc47-603">`value`が`enumType`列挙体の有効な基になる値であることを確認するには、それを<xref:System.Enum.IsDefined%2A>メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-603">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="4dc47-604">この変換メソッドは、<xref:System.Object>型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-604">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="4dc47-605">その後、これをキャストするか、`enumType`型のオブジェクトに変換できます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-605">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4dc47-606"><paramref name="enumType" /> is <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-606"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-607"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-607"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4dc47-608">Converts the value of this instance to its equivalent string representation.</span><span class="sxs-lookup"><span data-stu-id="4dc47-608">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="4dc47-609">列挙型書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="4dc47-609">Enumeration Format Strings</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="enum.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4dc47-610">Converts the value of this instance to its equivalent string representation.</span><span class="sxs-lookup"><span data-stu-id="4dc47-610">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="4dc47-611">The string representation of the value of this instance.</span><span class="sxs-lookup"><span data-stu-id="4dc47-611">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-612">戻り値は、一般的な書式指定子 ("G") で書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-612">The return value is formatted with the general format specifier ("G").</span></span> <span data-ttu-id="4dc47-613">つまり、<xref:System.FlagsAttribute>がこの列挙型に適用されず、このインスタンスの値と等しい名前付き定数がある場合、戻り値は定数の名前を含む文字列になります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-613">That is, if the <xref:System.FlagsAttribute> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</span></span> <span data-ttu-id="4dc47-614"><xref:System.FlagsAttribute> が適用され、このインスタンスの値と等しい1つ以上の名前付き定数が組み合わされている場合、戻り値は、定数の名前の区切り記号で区切られたリストを含む文字列になります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-614">If the <xref:System.FlagsAttribute> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</span></span> <span data-ttu-id="4dc47-615">それ以外の場合、戻り値は、このインスタンスの数値の文字列表現になります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-615">Otherwise, the return value is the string representation of the numeric value of this instance.</span></span> <span data-ttu-id="4dc47-616">列挙値の書式設定の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-616">For more information about formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="4dc47-617">一般的な書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-617">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-618">次の例では、列挙値を文字列に変換する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-618">The following example demonstrates converting an enumerated value to a string.</span></span>  
  
 [!code-cpp[Classic Enum.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Enum.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic Enum.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="4dc47-619">複数の列挙体メンバーの基になる値が同じで、その基になる値に基づいて列挙メンバーの名前の文字列形式を取得しようとする場合、コードでは、メソッドが返す名前については想定しないでください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-619">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="4dc47-620">たとえば、次の列挙体は、同じ基になる値を持つ2つのメンバー (<c>Shade.Gray</c>と<c>Shade.Gray</c>) を定義しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-620">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
<span data-ttu-id="4dc47-621">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span><span class="sxs-lookup"><span data-stu-id="4dc47-621">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span></span> 
<span data-ttu-id="4dc47-622">次のメソッド呼び出しは、基になる値が 1 である、<c>Shade</c>列挙体のメンバーの名前を取得しようとします。</span><span class="sxs-lookup"><span data-stu-id="4dc47-622">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="4dc47-623">メソッドは、"Gray" または "Grey" を返すことができ、どの文字列が返されるかをコードで想定してはいけません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-623">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
<span data-ttu-id="4dc47-624">[!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)] [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="4dc47-624">[!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)] [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</span></span></para></block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="enum.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="4dc47-625">(obsolete)</span><span class="sxs-lookup"><span data-stu-id="4dc47-625">(obsolete)</span></span></param>
        <summary><span data-ttu-id="4dc47-626">This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-626">This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</span></span></summary>
        <returns><span data-ttu-id="4dc47-627">The string representation of the value of this instance.</span><span class="sxs-lookup"><span data-stu-id="4dc47-627">The string representation of the value of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="enum.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="4dc47-628">A format string.</span><span class="sxs-lookup"><span data-stu-id="4dc47-628">A format string.</span></span></param>
        <summary><span data-ttu-id="4dc47-629">Converts the value of this instance to its equivalent string representation using the specified format.</span><span class="sxs-lookup"><span data-stu-id="4dc47-629">Converts the value of this instance to its equivalent string representation using the specified format.</span></span></summary>
        <returns><span data-ttu-id="4dc47-630">The string representation of the value of this instance as specified by <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-630">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-631">`format` パラメーターには、"G" または "g"、"D"、"d"、"X"、"x"、"F"、"f" のいずれかの書式指定文字列を指定できます (書式指定文字列では大文字と小文字は区別されません)。</span><span class="sxs-lookup"><span data-stu-id="4dc47-631">The `format` parameter can be one of the following format strings: "G" or "g", "D" or "d", "X" or "x", and "F" or "f" (the format string is not case-sensitive).</span></span> <span data-ttu-id="4dc47-632">`format` が `null` または空の文字列 ("") の場合は、一般書式指定子 ("G") が使用されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-632">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="4dc47-633">列挙型書式指定文字列と列挙値の書式設定の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-633">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="4dc47-634">一般的な書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-634">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-635">次の例は、列挙値を文字列に変換する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-635">The following example demonstrates how to convert an enumerated value to a string.</span></span>  
  
 [!code-cpp[enum.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/enum.tostring/CPP/tostr.cpp#1)]
 [!code-csharp[enum.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/enum.tostring/CS/tostr.cs#1)]
 [!code-vb[enum.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enum.tostring/VB/tostr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4dc47-636"><paramref name="format" /> contains an invalid specification.</span><span class="sxs-lookup"><span data-stu-id="4dc47-636"><paramref name="format" /> contains an invalid specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4dc47-637"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span><span class="sxs-lookup"><span data-stu-id="4dc47-637"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="4dc47-638">複数の列挙体メンバーの基になる値が同じで、その基になる値に基づいて列挙メンバーの名前の文字列形式を取得しようとする場合、コードでは、メソッドが返す名前については想定しないでください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-638">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="4dc47-639">たとえば、次の列挙体は、同じ基になる値を持つ2つのメンバー (<c>Shade.Gray</c>と<c>Shade.Gray</c>) を定義しています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-639">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
<span data-ttu-id="4dc47-640">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span><span class="sxs-lookup"><span data-stu-id="4dc47-640">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span></span> 
<span data-ttu-id="4dc47-641">次のメソッド呼び出しは、基になる値が 1 である、<c>Shade</c>列挙体のメンバーの名前を取得しようとします。</span><span class="sxs-lookup"><span data-stu-id="4dc47-641">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="4dc47-642">メソッドは、"Gray" または "Grey" を返すことができ、どの文字列が返されるかをコードで想定してはいけません。</span><span class="sxs-lookup"><span data-stu-id="4dc47-642">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
<span data-ttu-id="4dc47-643">[!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)] [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</span><span class="sxs-lookup"><span data-stu-id="4dc47-643">[!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)] [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</span></span></para></block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
        <altmember cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="4dc47-644">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="4dc47-644">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="4dc47-645">列挙型書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="4dc47-645">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="enum.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="4dc47-646">A format specification.</span><span class="sxs-lookup"><span data-stu-id="4dc47-646">A format specification.</span></span></param>
        <param name="provider"><span data-ttu-id="4dc47-647">(Obsolete.)</span><span class="sxs-lookup"><span data-stu-id="4dc47-647">(Obsolete.)</span></span></param>
        <summary><span data-ttu-id="4dc47-648">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-648">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="4dc47-649">The string representation of the value of this instance as specified by <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-649">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-650">`format` パラメーターには、"G" または "g"、"D"、"d"、"X"、"x"、"F"、"f" のいずれかの書式指定文字列を指定できます (書式指定文字列では大文字と小文字は区別されません)。</span><span class="sxs-lookup"><span data-stu-id="4dc47-650">The `format` parameter can be one of the following format strings: "G" or "g", "D" or "d", "X" or "x", and "F" or "f" (the format string is not case-sensitive).</span></span> <span data-ttu-id="4dc47-651">`format` が `null` または空の文字列 ("") の場合は、一般書式指定子 ("G") が使用されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-651">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="4dc47-652">列挙型書式指定文字列と列挙値の書式設定の詳細については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-652">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="4dc47-653">一般的な書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="4dc47-653">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="4dc47-654">`format`のみを指定します。`provider`パラメーターは互換性のために残されています。</span><span class="sxs-lookup"><span data-stu-id="4dc47-654">Specify only `format`; the `provider` parameter is obsolete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4dc47-655"><paramref name="format" /> does not contain a valid format specification.</span><span class="sxs-lookup"><span data-stu-id="4dc47-655"><paramref name="format" /> does not contain a valid format specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4dc47-656"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span><span class="sxs-lookup"><span data-stu-id="4dc47-656"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="4dc47-657">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="4dc47-657">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="4dc47-658">列挙型書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="4dc47-658">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4dc47-659">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span><span class="sxs-lookup"><span data-stu-id="4dc47-659">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="4dc47-660">The return value indicates whether the conversion succeeded.</span><span class="sxs-lookup"><span data-stu-id="4dc47-660">The return value indicates whether the conversion succeeded.</span></span></summary>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : Type * string * obj -&gt; bool" Usage="System.Enum.TryParse (enumType, value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.Object" RefType="out" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-661">The enum type to use for parsing.</span><span class="sxs-lookup"><span data-stu-id="4dc47-661">The enum type to use for parsing.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-662">The string representation of the name or numeric value of one or more enumerated constants.</span><span class="sxs-lookup"><span data-stu-id="4dc47-662">The string representation of the name or numeric value of one or more enumerated constants.</span></span></param>
        <param name="result"><span data-ttu-id="4dc47-663">When this method returns <see langword="true" />, an object containing an enumeration constant representing the parsed value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-663">When this method returns <see langword="true" />, an object containing an enumeration constant representing the parsed value.</span></span></param>
        <summary><span data-ttu-id="4dc47-664">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span><span class="sxs-lookup"><span data-stu-id="4dc47-664">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <returns><span data-ttu-id="4dc47-665"><see langword="true" /> if the conversion succeeded; <see langword="false" /> otherwise.</span><span class="sxs-lookup"><span data-stu-id="4dc47-665"><see langword="true" /> if the conversion succeeded; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, bool ignoreCase, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, bool ignoreCase, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ignoreCase As Boolean, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : Type * string * bool * obj -&gt; bool" Usage="System.Enum.TryParse (enumType, value, ignoreCase, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.Object" RefType="out" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="4dc47-666">The enum type to use for parsing.</span><span class="sxs-lookup"><span data-stu-id="4dc47-666">The enum type to use for parsing.</span></span></param>
        <param name="value"><span data-ttu-id="4dc47-667">The string representation of the name or numeric value of one or more enumerated constants.</span><span class="sxs-lookup"><span data-stu-id="4dc47-667">The string representation of the name or numeric value of one or more enumerated constants.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="4dc47-668"><see langword="true" /> to read <paramref name="value" /> in case insensitive mode; <see langword="false" /> to read <paramref name="value" /> in case sensitive mode.</span><span class="sxs-lookup"><span data-stu-id="4dc47-668"><see langword="true" /> to read <paramref name="value" /> in case insensitive mode; <see langword="false" /> to read <paramref name="value" /> in case sensitive mode.</span></span></param>
        <param name="result"><span data-ttu-id="4dc47-669">When this method returns <see langword="true" />, an object containing an enumeration constant representing the parsed value.</span><span class="sxs-lookup"><span data-stu-id="4dc47-669">When this method returns <see langword="true" />, an object containing an enumeration constant representing the parsed value.</span></span></param>
        <summary><span data-ttu-id="4dc47-670">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span><span class="sxs-lookup"><span data-stu-id="4dc47-670">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <returns><span data-ttu-id="4dc47-671"><see langword="true" /> if the conversion succeeded; <see langword="false" /> otherwise.</span><span class="sxs-lookup"><span data-stu-id="4dc47-671"><see langword="true" /> if the conversion succeeded; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * 'Enum -&gt; bool (requires 'Enum : struct)" Usage="System.Enum.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="TEnum" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="4dc47-672"><paramref name="value" /> の変換先の列挙型。</span><span class="sxs-lookup"><span data-stu-id="4dc47-672">The enumeration type to which to convert <paramref name="value" />.</span></span></typeparam>
        <param name="value"><span data-ttu-id="4dc47-673">The case-sensitive string representation of the enumeration name or underlying value to convert.</span><span class="sxs-lookup"><span data-stu-id="4dc47-673">The case-sensitive string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="result"><span data-ttu-id="4dc47-674">When this method returns, <paramref name="result" /> contains an object of type <c>TEnum</c> whose value is represented by <paramref name="value" /> if the parse operation succeeds.</span><span class="sxs-lookup"><span data-stu-id="4dc47-674">When this method returns, <paramref name="result" /> contains an object of type <c>TEnum</c> whose value is represented by <paramref name="value" /> if the parse operation succeeds.</span></span> <span data-ttu-id="4dc47-675">If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="4dc47-675">If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="4dc47-676">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span><span class="sxs-lookup"><span data-stu-id="4dc47-676">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="4dc47-677">This parameter is passed uninitialized.</span><span class="sxs-lookup"><span data-stu-id="4dc47-677">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="4dc47-678">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span><span class="sxs-lookup"><span data-stu-id="4dc47-678">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="4dc47-679">The return value indicates whether the conversion succeeded.</span><span class="sxs-lookup"><span data-stu-id="4dc47-679">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="4dc47-680"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-680"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-681"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29>は<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>メソッドと同じですが、例外をスローするのではなく、変換に失敗した場合は`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-681"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="4dc47-682">これにより、列挙値の文字列形式を解析するときに例外処理を行う必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-682">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="4dc47-683">`value`パラメーターには、列挙メンバーの基になる値または名前付き定数の文字列形式、またはコンマ (,) で区切られた名前付き定数または基になる値のリストが含まれます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-683">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="4dc47-684">`value`に複数の名前付き定数または値が含まれている場合は、`value`の各値、名前、またはコンマの前または後に 1 つ以上の空白文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-684">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="4dc47-685">`value`がリストの場合、`result`は、指定された名前または基になる値を、ビットごとに`OR`演算で組み合わせた値となります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-685">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="4dc47-686">`value`が列挙値の名前の文字列表現である場合、`value`と列挙型の比較では大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-686">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names is case-sensitive.</span></span>  
  
 <span data-ttu-id="4dc47-687">`value`が`TEnum`の名前付き定数に対応しない名前である場合、メソッドは`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-687">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="4dc47-688">`value`が`TEnum`列挙体の基になる値を表さない整数の文字列表現の場合、メソッドは、基になる値が整数型に変換された`value`である列挙体のメンバーを返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-688">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="4dc47-689">この動作が望ましくない場合は、<xref:System.Enum.IsDefined%2A>メソッドを呼び出して、整数の特定の文字列形式が実際に`TEnum`のメンバーであることを確認します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-689">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-690">次の例では、`Colors`列挙体を定義し、<xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29>メソッドを呼び出して文字列を対応する列挙値に変換し、<xref:System.Enum.IsDefined%2A>メソッドを呼び出して、特定の整数値が`Colors`列挙体の基になる値であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-690">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Enum.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-691"><paramref name="TEnum" /> is not an enumeration type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-691"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, bool ignoreCase, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * bool * 'Enum -&gt; bool (requires 'Enum : struct)" Usage="System.Enum.TryParse (value, ignoreCase, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="TEnum" RefType="out" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="4dc47-692"><paramref name="value" /> の変換先の列挙型。</span><span class="sxs-lookup"><span data-stu-id="4dc47-692">The enumeration type to which to convert <paramref name="value" />.</span></span></typeparam>
        <param name="value"><span data-ttu-id="4dc47-693">The string representation of the enumeration name or underlying value to convert.</span><span class="sxs-lookup"><span data-stu-id="4dc47-693">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="4dc47-694"><see langword="true" /> to ignore case; <see langword="false" /> to consider case.</span><span class="sxs-lookup"><span data-stu-id="4dc47-694"><see langword="true" /> to ignore case; <see langword="false" /> to consider case.</span></span></param>
        <param name="result"><span data-ttu-id="4dc47-695">When this method returns, <paramref name="result" /> contains an object of type <c>TEnum</c> whose value is represented by <paramref name="value" /> if the parse operation succeeds.</span><span class="sxs-lookup"><span data-stu-id="4dc47-695">When this method returns, <paramref name="result" /> contains an object of type <c>TEnum</c> whose value is represented by <paramref name="value" /> if the parse operation succeeds.</span></span> <span data-ttu-id="4dc47-696">If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="4dc47-696">If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="4dc47-697">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span><span class="sxs-lookup"><span data-stu-id="4dc47-697">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="4dc47-698">This parameter is passed uninitialized.</span><span class="sxs-lookup"><span data-stu-id="4dc47-698">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="4dc47-699">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span><span class="sxs-lookup"><span data-stu-id="4dc47-699">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="4dc47-700">A parameter specifies whether the operation is case-sensitive.</span><span class="sxs-lookup"><span data-stu-id="4dc47-700">A parameter specifies whether the operation is case-sensitive.</span></span> <span data-ttu-id="4dc47-701">The return value indicates whether the conversion succeeded.</span><span class="sxs-lookup"><span data-stu-id="4dc47-701">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="4dc47-702"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4dc47-702"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4dc47-703"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29>は<xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29>メソッドと同じですが、例外をスローするのではなく、変換に失敗した場合は`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-703"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="4dc47-704">これにより、列挙値の文字列形式を解析するときに例外処理を行う必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-704">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="4dc47-705">`value`パラメーターには、列挙メンバーの基になる値または名前付き定数の文字列形式、またはコンマ (,) で区切られた名前付き定数または基になる値のリストが含まれます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-705">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="4dc47-706">`value`に複数の名前付き定数または値が含まれている場合は、`value`の各値、名前、またはコンマの前または後に 1 つ以上の空白文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-706">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="4dc47-707">`value`がリストの場合、`result`は、指定された名前または基になる値を、ビットごとに`OR`演算で組み合わせた値となります。</span><span class="sxs-lookup"><span data-stu-id="4dc47-707">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="4dc47-708">`value` が列挙値の名前の文字列表現である場合、列挙名と `value` の比較は `ignoreCase` パラメーターに依存します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-708">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names depends on the `ignoreCase` parameter.</span></span> <span data-ttu-id="4dc47-709">`true`の場合、比較では大文字と小文字が区別されません。`false`の場合は、大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="4dc47-709">If `true`, the comparison is case-insensitive; if `false`, it is case-sensitive.</span></span>  
  
 <span data-ttu-id="4dc47-710">`value`が`TEnum`の名前付き定数に対応しない名前である場合、メソッドは`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-710">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="4dc47-711">`value`が`TEnum`列挙体の基になる値を表さない整数の文字列表現の場合、メソッドは、基になる値が整数型に変換された`value`である列挙体のメンバーを返します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-711">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="4dc47-712">この動作が望ましくない場合は、<xref:System.Enum.IsDefined%2A>メソッドを呼び出して、整数の特定の文字列形式が実際に`TEnum`のメンバーであることを確認します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-712">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4dc47-713">次の例では、`Colors`列挙体を定義し、<xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29>メソッドを呼び出して文字列を対応する列挙値に変換し、<xref:System.Enum.IsDefined%2A>メソッドを呼び出して、特定の整数値が`Colors`列挙体の基になる値であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-713">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span> <span data-ttu-id="4dc47-714"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29>メソッドは、名前付き定数の文字列形式を等価の列挙値に変換しようとしたときに、大文字と小文字を区別しない比較を使用します。</span><span class="sxs-lookup"><span data-stu-id="4dc47-714">The <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse2.cs#2)]
 [!code-vb[System.Enum.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4dc47-715"><paramref name="TEnum" /> is not an enumeration type.</span><span class="sxs-lookup"><span data-stu-id="4dc47-715"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>
