<Type Name="IAsyncDisposable" FullName="System.IAsyncDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="035d274ca5a9ecc8ab3117cecd31008a8622abd3" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82285434" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type IAsyncDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="Microsoft.Bcl.AsyncInterfaces" FromVersion="1.0.0.0" To="netstandard" ToVersion="2.1.0.0" FrameworkAlternate="dotnet-plat-ext-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0e428-101">アンマネージ リソースを非同期的に解放するためのメカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="0e428-101">Provides a mechanism for releasing unmanaged resources asynchronously.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="0e428-102">.NET では、アンマネージリソースを所有するクラスは通常、アンマネージリソースを同期的に解放するためのメカニズムを提供するために <xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="0e428-102">In .NET, classes that own unmanaged resources usually implement the <xref:System.IDisposable> interface to provide a mechanism for releasing unmanaged resources synchronously.</span></span> <span data-ttu-id="0e428-103">ただし、場合によっては、同期されたリソース (またはその代わり) に加えて、アンマネージリソースを解放するための非同期機構を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e428-103">However, in some cases they need to provide an asynchronous mechanism for releasing unmanaged resources in addition to (or instead of) the synchronous one.</span></span> <span data-ttu-id="0e428-104">このようなメカニズムを提供することで、コンシューマーは、GUI アプリケーションのメインスレッドを長時間ブロックすることなく、リソースを集中的に使用する dispose 操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="0e428-104">Providing such a mechanism enables the consumer to perform resource-intensive dispose operations without blocking the main thread of a GUI application for a long time.</span></span>

<span data-ttu-id="0e428-105">このインターフェイスの <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> メソッドは、非同期の破棄操作を表す <xref:System.Threading.Tasks.ValueTask> を返します。</span><span class="sxs-lookup"><span data-stu-id="0e428-105">The <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> method of this interface returns a <xref:System.Threading.Tasks.ValueTask> that represents the asynchronous dispose operation.</span></span> <span data-ttu-id="0e428-106">アンマネージリソースを所有するクラスは、このメソッドを実装します。これらのクラスのコンシューマーは、不要になったオブジェクトに対してこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0e428-106">Classes that own unmanaged resources implement this method, and the consumer of these classes calls this method on an object when it is no longer needed.</span></span>

<span data-ttu-id="0e428-107">非同期メソッドは、および Visual Basic のC# `async` および `await` キーワードと組み合わせて使用されます。</span><span class="sxs-lookup"><span data-stu-id="0e428-107">The async methods are used in conjunction with the `async` and `await` keywords in C# and Visual Basic.</span></span> <span data-ttu-id="0e428-108">詳細については、「 [」 C#の「非同期プログラミングモデル](/dotnet/csharp/programming-guide/concepts/async/index)」または「 [Async と Await を使用した非同期プログラミング」 (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e428-108">For more insformation, see [The Task asynchronous programming model in C#](/dotnet/csharp/programming-guide/concepts/async/index) or [Asynchronous Programming with Async and Await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).</span></span>

### <a name="using-an-object-that-implements-iasyncdisposable"></a><span data-ttu-id="0e428-109">IAsyncDisposable を実装するオブジェクトの使用</span><span class="sxs-lookup"><span data-stu-id="0e428-109">Using an object that implements IAsyncDisposable</span></span>

<span data-ttu-id="0e428-110">アプリケーションで `IAsyncDisposable`を実装するオブジェクトを使用している場合は、オブジェクトの使用が終了したときに、そのオブジェクトの <xref:System.IAsyncDisposable.DisposeAsync%2A> の実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e428-110">If your application uses an object that implements `IAsyncDisposable`, you should call the object's <xref:System.IAsyncDisposable.DisposeAsync%2A> implementation when you are finished using it.</span></span> <span data-ttu-id="0e428-111">例外が発生した場合でもリソースが解放されるようにするには、`IAsyncDisposable` オブジェクトを使用[using](~/docs/csharp/language-reference/keywords/using.md)するコードを using C#ステートメント (バージョン8.0 以降) に配置するか、`try`/`finally` ステートメントの `finally` 句の内部で <xref:System.IAsyncDisposable.DisposeAsync%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0e428-111">To make sure resources are released even in case of an exception, put the code that uses the `IAsyncDisposable` object into the [using](~/docs/csharp/language-reference/keywords/using.md) statement (in C# beginning from version 8.0) or call the <xref:System.IAsyncDisposable.DisposeAsync%2A> method inside a `finally` clause of the `try`/`finally` statement.</span></span> <span data-ttu-id="0e428-112">`try`/`finally` パターンの詳細については、「 [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#)」または「try...」を参照してください。 [キャッチ...Finally ステートメント](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)(Visual Basic)。</span><span class="sxs-lookup"><span data-stu-id="0e428-112">For more information about the `try`/`finally` pattern, see [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) or [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).</span></span>

### <a name="implementing-iasyncdisposable"></a><span data-ttu-id="0e428-113">IAsyncDisposable を実装する</span><span class="sxs-lookup"><span data-stu-id="0e428-113">Implementing IAsyncDisposable</span></span>   
    
<span data-ttu-id="0e428-114">次のような場合に `IAsyncDisposable` を実装することがあります。</span><span class="sxs-lookup"><span data-stu-id="0e428-114">You might implement `IAsyncDisposable` in the following situations:</span></span>

- <span data-ttu-id="0e428-115">アンマネージリソースを所有する非同期列挙子を開発する場合。</span><span class="sxs-lookup"><span data-stu-id="0e428-115">When developing an asynchronous enumerator that owns unmanaged resources.</span></span> <span data-ttu-id="0e428-116">非同期列挙子は、 C# 8.0 非同期ストリーム機能で使用されます。</span><span class="sxs-lookup"><span data-stu-id="0e428-116">Asynchronous enumerators are used with the C# 8.0 async streams feature.</span></span> <span data-ttu-id="0e428-117">非同期ストリームの詳細については、「[チュートリアル: 8.0 および .Net Core C# 3.0 を使用した非同期ストリームの生成と使用](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e428-117">For more information about async streams, see [Tutorial: Generate and consume async streams using C# 8.0 and .NET Core 3.0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream).</span></span>

- <span data-ttu-id="0e428-118">クラスがアンマネージリソースを所有して解放する場合は、中間バッファーの内容をファイルにフラッシュしたり、ネットワーク経由でパケットを送信して接続を閉じるなど、リソースを集中的に使用する i/o 操作が必要になります。</span><span class="sxs-lookup"><span data-stu-id="0e428-118">When your class owns unmanaged resources and releasing them requires a resource-intensive I/O operation, such as flushing the contents of an intermediate buffer into a file or sending a packet over a network to close a connection.</span></span>

<span data-ttu-id="0e428-119">アンマネージリソースの解放、解放、またはリセットなど、アンマネージリソースを使用した後に必要なすべてのクリーンアップを実行するには、<xref:System.IAsyncDisposable.DisposeAsync%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="0e428-119">Use the <xref:System.IAsyncDisposable.DisposeAsync%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span> <span data-ttu-id="0e428-120">.NET でのアンマネージリソースの詳細については、「[アンマネージリソースのクリーンアップ](/dotnet/standard/garbage-collection/unmanaged)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e428-120">For more information about unmanaged resources in .NET, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IAsyncDisposable.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="iAsyncDisposable.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e428-121">アンマネージ リソースの非同期の解放およびリセットに関連付けられているアプリケーション定義のタスクを実行します。</span><span class="sxs-lookup"><span data-stu-id="0e428-121">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</span></span></summary>
        <returns><span data-ttu-id="0e428-122">非同期の破棄操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="0e428-122">A task that represents the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="0e428-123">このメソッドを使用して、このインターフェイスを実装するクラスのインスタンスによって保持されているファイル、ストリーム、ハンドルなどのアンマネージリソースを非同期的に終了または解放します。</span><span class="sxs-lookup"><span data-stu-id="0e428-123">Use this method to asynchronously close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="0e428-124"><xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> の代わりにこのメソッドを使用すると、GUI アプリケーションのメインスレッドを長時間ブロックすることなく、リソースを集中的に使用する dispose 操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="0e428-124">Using this method instead of <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> enables you to perform a resource-intensive dispose operation without blocking the main thread of a GUI application for a long time.</span></span>

> [!WARNING]
>  <span data-ttu-id="0e428-125"><xref:System.IAsyncDisposable>インターフェイスを実装するクラスを使用している場合は、クラスの使用が終了したら、その`DisposeAsync`実装を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e428-125">If you are using a class that implements the <xref:System.IAsyncDisposable> interface, you should call its `DisposeAsync` implementation when you are finished using the class.</span></span> <span data-ttu-id="0e428-126">詳細については、「<xref:System.IAsyncDisposable>」トピックの「IAsyncDisposable を実装するオブジェクトの使用」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="0e428-126">For more information, see the "Using an object that implements IAsyncDisposable" section in the <xref:System.IAsyncDisposable> topic.</span></span>

<span data-ttu-id="0e428-127">このメソッドを実装する場合は、包含階層を介して呼び出しを伝達することによって、保持されているすべてのリソースが解放されるようにします。</span><span class="sxs-lookup"><span data-stu-id="0e428-127">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="0e428-128">たとえば、オブジェクト A がオブジェクト B を割り当て、オブジェクト B がオブジェクト C を割り当てる場合、の `DisposeAsync` の実装では、B で `DisposeAsync` を呼び出す必要があります。 B は、C で `DisposeAsync` を呼び出す必要があります。基底クラスが <xref:System.IAsyncDisposable>を実装している場合は、オブジェクトがその基底クラスの `DisposeAsync` メソッドを呼び出す必要もあります。</span><span class="sxs-lookup"><span data-stu-id="0e428-128">For example, if an object A allocates an object B, and object B allocates an object C, then A's `DisposeAsync` implementation must call `DisposeAsync` on B, which must in turn call `DisposeAsync` on C. An object must also call the `DisposeAsync` method of its base class if the base class implements <xref:System.IAsyncDisposable>.</span></span>

<span data-ttu-id="0e428-129">オブジェクトの `DisposeAsync` メソッドが2回以上呼び出された場合、オブジェクトは、最初の呼び出しの後にすべての呼び出しを無視し、正常に完了した <xref:System.Threading.Tasks.ValueTask>を同期的に返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="0e428-129">If an object's `DisposeAsync` method is called more than once, the object must ignore all calls after the first one and synchronously return a successfully completed <xref:System.Threading.Tasks.ValueTask>.</span></span> <span data-ttu-id="0e428-130">`DisposeAsync` メソッドが複数回呼び出された場合、オブジェクトは例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="0e428-130">The object must not throw an exception if its `DisposeAsync` method is called multiple times.</span></span> <span data-ttu-id="0e428-131">リソースが既に破棄されている場合、`DisposeAsync`以外のインスタンスメソッドは<xref:System.ObjectDisposedException>をスローする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="0e428-131">Instance methods other than `DisposeAsync` can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
