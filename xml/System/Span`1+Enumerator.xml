<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8c58ae08575e34fc4d0b9769d0e6d8b394544ca5" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82285371" /></Metadata><TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Memory" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7cace-101"><see cref="T:System.Span`1" /> の要素の列挙子を提供します。</span><span class="sxs-lookup"><span data-stu-id="7cace-101">Provides an enumerator for the elements of a <see cref="T:System.Span`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

<span data-ttu-id="7cace-102">C# の[foreach](~/docs/csharp/language-reference/keywords/foreach-in.md)とVisual Basicの[For Each...Next](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)構造は、列挙子の複雑さを隠します。</span><span class="sxs-lookup"><span data-stu-id="7cace-102">The C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) of the C# language and the [For Each...Next](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) construct in Visual Basic hides the complexity of enumerators.</span></span> <span data-ttu-id="7cace-103">列挙子を直接操作するのではなく、`foreach`または`For Each...Next`を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="7cace-103">Instead of directly manipulating the enumerator, using `foreach` or `For Each...Next` is recommended.</span></span> 

<span data-ttu-id="7cace-104">初期状態で、列挙子は<xref:System.Span%601>内の最初の要素の前に配置されます。</span><span class="sxs-lookup"><span data-stu-id="7cace-104">Initially, the enumerator is positioned before the first element in the <xref:System.Span%601>.</span></span> <span data-ttu-id="7cace-105">この位置では、<xref:System.Span%601.Enumerator.Current> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="7cace-105">At this position, <xref:System.Span%601.Enumerator.Current> is undefined.</span></span> <span data-ttu-id="7cace-106"><xref:System.Span%601.Enumerator.MoveNext%2A>の値を読み取る前に、<xref:System.Span%601>を呼び出し、列挙子を<xref:System.Span%601.Enumerator.Current>の最初の項目に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="7cace-106">You must call <xref:System.Span%601.Enumerator.MoveNext%2A> to advance the enumerator to the first item in the <xref:System.Span%601> before reading the value of <xref:System.Span%601.Enumerator.Current>.</span></span>

<span data-ttu-id="7cace-107"><xref:System.Span%601.Enumerator.Current>が呼び出されるまで、<xref:System.Span%601.Enumerator.MoveNext%2A>は同じ値を返します。</span><span class="sxs-lookup"><span data-stu-id="7cace-107"><xref:System.Span%601.Enumerator.Current> returns the same value until <xref:System.Span%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="7cace-108"><xref:System.Span%601.Enumerator.MoveNext%2A>は、<xref:System.Span%601.Enumerator.Current>を<xref:System.Span%601>の次の項目に設定します。</span><span class="sxs-lookup"><span data-stu-id="7cace-108"><xref:System.Span%601.Enumerator.MoveNext%2A> sets <xref:System.Span%601.Enumerator.Current> to the next item in the <xref:System.Span%601>.</span></span>

<span data-ttu-id="7cace-109"><xref:System.Span%601.Enumerator.MoveNext%2A>が<xref:System.Span%601>の末尾を超えた場合、<xref:System.Span%601.Enumerator.MoveNext%2A>は`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="7cace-109">If <xref:System.Span%601.Enumerator.MoveNext%2A> passes the end of the <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="7cace-110">列挙子がこの状態にある場合、<xref:System.Span%601.Enumerator.MoveNext%2A>の後続の呼び出しも`false`を返し、<xref:System.Span%601.Enumerator.Current>は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="7cace-110">When the enumerator is at this state, subsequent calls to <xref:System.Span%601.Enumerator.MoveNext%2A> also return `false` and <xref:System.Span%601.Enumerator.Current> is undefined.</span></span> <span data-ttu-id="7cace-111"><xref:System.Span%601.Enumerator.Current>に再度<xref:System.Span%601>の最初の項目を設定することはできません。列挙子の新しいインスタンスを代わりに作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7cace-111">You cannot set <xref:System.Span%601.Enumerator.Current> to the first item in the <xref:System.Span%601> again; you must create a new enumerator instance instead.</span></span> 

<span data-ttu-id="7cace-112">列挙子は<xref:System.Span%601>への排他アクセスがありません。</span><span class="sxs-lookup"><span data-stu-id="7cace-112">The enumerator does not have exclusive access to the <xref:System.Span%601>.</span></span> <span data-ttu-id="7cace-113">さらに、スパンの基になる基底データも変更できます。</span><span class="sxs-lookup"><span data-stu-id="7cace-113">In addition, the underlying data on which the span is based can also be modified.</span></span> <span data-ttu-id="7cace-114">そのため、スパンの列挙処理は、本質的にはスレッド セーフな手順ではありません。</span><span class="sxs-lookup"><span data-stu-id="7cace-114">Therefore, enumerating through a span is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="7cace-115">列挙中のスレッドセーフを保証するには、独自の同期を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7cace-115">To guarantee thread safety during enumeration, you must implement your own synchronization.</span></span> <span data-ttu-id="7cace-116">たとえば、次のコードには競合状態があります。</span><span class="sxs-lookup"><span data-stu-id="7cace-116">For example, the following code has a race condition.</span></span> <span data-ttu-id="7cace-117">`ClearContents`メソッドを実行する前に、スパンが列挙されることは保証されません。</span><span class="sxs-lookup"><span data-stu-id="7cace-117">It does not ensure that the span will be enumerated before the `ClearContents` method executes.</span></span> <span data-ttu-id="7cace-118">その結果、スパンの列挙中に、基となる配列がクリアされます。</span><span class="sxs-lookup"><span data-stu-id="7cace-118">As a result, the underlying array is cleared during enumeration of the span:</span></span>

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/Program.cs)]

<span data-ttu-id="7cace-119">次の例に挙げる`EnumerateSpan`メソッドの改訂版のように、スパンの列挙前に配列へのアクセスを同期する場合、`ClearContents`メソッドは列挙中に、基底のスパンデータを変更しません。</span><span class="sxs-lookup"><span data-stu-id="7cace-119">If you synchronize access to the array before enumerating the span, as the revised version of the `EnumerateSpan` method does in the following example, the `ClearContents` method doesn't modify underlying span data during enumeration.</span></span> <span data-ttu-id="7cace-120">この例がスパンの基になる、基底の配列をロックすることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="7cace-120">Note that the example locks the underlying array on which the span is based.</span></span>  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/Program.cs#1)]

<span data-ttu-id="7cace-121"><xref:System.Span%601.Enumerator>は、.NETの他の列挙子構造体とは異なります。</span><span class="sxs-lookup"><span data-stu-id="7cace-121">Unlike some other enumerator structures in .NET, the <xref:System.Span%601.Enumerator>:</span></span>

- <span data-ttu-id="7cace-122"><xref:System.Collections.IEnumerator>または<xref:System.Collections.Generic.IEnumerator%601>インターフェイスを実装しません。</span><span class="sxs-lookup"><span data-stu-id="7cace-122">Does not implement the <xref:System.Collections.IEnumerator> or <xref:System.Collections.Generic.IEnumerator%601> interface.</span></span> <span data-ttu-id="7cace-123">これは、<xref:System.Span%601.Enumerator>が[ref 構造体](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type)であるためです。</span><span class="sxs-lookup"><span data-stu-id="7cace-123">This is because <xref:System.Span%601.Enumerator> is a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span></span>

- <span data-ttu-id="7cace-124">列挙子をスパン内の最初の要素より前の初期位置に設定する、`Reset`メソッドは含まれません。</span><span class="sxs-lookup"><span data-stu-id="7cace-124">Does not include a `Reset` method, which can set the enumerator to its initial position before the first element in the span.</span></span> <span data-ttu-id="7cace-125">(<xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType>メソッドは、インターフェイスの一部として実装する必要がありますが、ほとんどの実装が例外をスローするか、実装されていません。)</span><span class="sxs-lookup"><span data-stu-id="7cace-125">(The <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> method must be implemented as part of the interface, but most implementors either throw an exception or provide no implementation.)</span></span> 
 
]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public ref T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7cace-126">列挙子の現在位置にある項目への参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="7cace-126">Gets a reference to the item at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="7cace-127"><see cref="T:System.Span`1" /> のうち、列挙子の現在位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="7cace-127">The element in the <see cref="T:System.Span`1" /> at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="7cace-128">`Current`は、次の条件のいずれかの場合に未定義です</span><span class="sxs-lookup"><span data-stu-id="7cace-128">`Current` is undefined under either of the following conditions:</span></span> 

- <span data-ttu-id="7cace-129">列挙子が作成された直後、列挙子はスパンの最初の要素の前に配置されます。</span><span class="sxs-lookup"><span data-stu-id="7cace-129">Immediately after the enumerator is created, the enumerator is positioned before the first element in the span.</span></span> <span data-ttu-id="7cace-130"><xref:System.Span%601.Enumerator.MoveNext%2A>の値を読み取る前に、`Current`を呼び出して、範囲の最初の要素へ列挙子を進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="7cace-130"><xref:System.Span%601.Enumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the span before reading the value of `Current`.</span></span>

- <span data-ttu-id="7cace-131"><xref:System.Span%601.Enumerator.MoveNext%2A>の最後の呼び出しが`false`を返した。これはスパンの終わりを示します。</span><span class="sxs-lookup"><span data-stu-id="7cace-131">The last call to <xref:System.Span%601.Enumerator.MoveNext%2A> returned `false`, which indicates the end of the span.</span></span> 

<span data-ttu-id="7cace-132">`Current`が呼び出されるまで、<xref:System.Span%601.Enumerator.MoveNext%2A>は同じ値を返します。</span><span class="sxs-lookup"><span data-stu-id="7cace-132">`Current` returns the same value until <xref:System.Span%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="7cace-133"><xref:System.Span%601.Enumerator.MoveNext%2A>は`Current`をスパンの次の項目に設定します。</span><span class="sxs-lookup"><span data-stu-id="7cace-133"><xref:System.Span%601.Enumerator.MoveNext%2A> sets `Current` to the next item in the span.</span></span> 

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7cace-134">列挙子を <see cref="T:System.Span`1" /> の次の項目に進めます。</span><span class="sxs-lookup"><span data-stu-id="7cace-134">Advances the enumerator to the next item of the <see cref="T:System.Span`1" />.</span></span></summary>
        <returns><span data-ttu-id="7cace-135">列挙子が次の項目に正常に進んだ場合は <see langword="true" />、範囲の末尾を超えた場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="7cace-135"><see langword="true" /> if the enumerator successfully advanced to the next item; <see langword="false" /> if the end of the span has been passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="7cace-136">列挙子が作成された後、列挙子はスパンの最初の要素の前に配置されます。`MoveNext`の最初の呼び出しで、列挙子をスパンの最初の項目に進めます。</span><span class="sxs-lookup"><span data-stu-id="7cace-136">After an enumerator is created, it is positioned before the first element in the span, and the first call to `MoveNext` advances the enumerator to the first item in the span.</span></span> 

<span data-ttu-id="7cace-137">`MoveNext`が範囲の末尾を超えた場合、`MoveNext`は`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="7cace-137">If `MoveNext` passes the end of the span, `MoveNext` returns `false`.</span></span> <span data-ttu-id="7cace-138">列挙子がこの状態にある場合、`MoveNext`の後続の呼び出しも`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="7cace-138">When the enumerator is at this state, subsequent calls to `MoveNext` also return `false`.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
