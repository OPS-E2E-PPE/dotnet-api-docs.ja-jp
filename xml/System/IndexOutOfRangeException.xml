<Type Name="IndexOutOfRangeException" FullName="System.IndexOutOfRangeException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="507e4e590781768d71116e80745f7fc4958d35c1" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172766" /></Metadata><TypeSignature Language="C#" Value="public sealed class IndexOutOfRangeException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IndexOutOfRangeException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.IndexOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndexOutOfRangeException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class IndexOutOfRangeException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type IndexOutOfRangeException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>境界外のインデックスを使用して配列またはコレクションの要素にアクセスしようとしたときにスローされる例外。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 無効なインデックスを使用して、配列またはコレクションのメンバーにアクセスする、またはバッファー内の特定の場所から読み取り/書き込みした場合<xref:System.IndexOutOfRangeException>例外がスローされます。 この例外は<xref:System.Exception>クラスを継承しますが、一意のメンバーの追加はありません。  
  
 通常、<xref:System.IndexOutOfRangeException>例外は開発者のエラーの結果としてスローされます。 例外を処理する代わりに、エラーの原因を診断し、コードを修正する必要があります。 このエラーの最も一般的な原因は次のとおりです。  
  
-   次の例が示すように、コレクションまたは 0 ベースの配列の上限が、メンバーまたは要素数よりも 1 少ないことを忘れる。  
  
     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]
     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  
  
     エラーを修正するには、次のようなコードを使用できます。  
  
     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]
     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  
  
     または、配列内のすべての要素をインデックスで反復処理する代わりに、`foreach`ステートメント (C#)または`For Each`ステートメント (Visual Basic)を使用することができます。  
  
-   適切な大きさでなく、元の配列よりも要素の数が少ない別の配列に、配列の要素を割り当てようとしています。 次の例は、`value1`配列内の最後の要素を、`value2`配列の同じ要素に代入しようとしています。 ただし、`value2`配列は 7 ではなく 6 つの要素を持つ、適切でない大きさになっています。 その結果、割り当てによって<xref:System.IndexOutOfRangeException>例外がスローされます。  
  
     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]
     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  
  
-   検索メソッドから返された値を使用して、特定のインデックス位置から配列またはコレクションの一部を反復処理します。 検索操作で一致が見つかったかどうかを確認し忘れた場合、この例で示すようにランタイムは<xref:System.IndexOutOfRangeException>例外をスローします。  
  
     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]
     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  
  
     ここで、<xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>メソッドは、検索に失敗した場合、無効なインデックス値である -1 を返します。 このエラーを修正するには、この例で示すように、配列を反復処理する前に、検索メソッドの戻り値を確認します。  
  
     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]
     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  
  
-   返されたオブジェクトに有効なデータがあるかどうかをテストせずに、クエリから返された結果セット、コレクション、または配列を使用、または列挙しようとしました。  
  
-   計算値を使用して、開始インデックス、終了インデックス、または反復する項目数を定義します。 計算の結果が予期しないものである場合、<xref:System.IndexOutOfRangeException>例外が発生する可能性があります。 配列またはコレクションを反復処理する前に、インデックス値の計算のときにプログラムのロジックを確認し、値を検証する必要があります。 次の条件をすべて満たす必要があります。そうでない場合、<xref:System.IndexOutOfRangeException>例外がスローされます。  
  
    -   開始インデックスは、配列の次元を反復する場合は<xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType>以上、コレクションの場合は 0 以上である必要があります。  
  
    -   終了インデックスは、配列の次元を反復する場合は<xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType>よりも大きい値を指定、またはコレクションの`Count`プロパティ以上にできません。  
  
    -   次の式は、配列の次元を反復する場合は true である必要があります。  
  
        ```  
        start_index >= lower_bound And start_index + items_to_iterate - 1 <= upper_bound  
        ```  
  
         コレクション場合は、次の式を満たす必要があります。  
  
        ```  
        start_index >= 0 And start_index + items_to_iterate <= Count  
        ```  
  
        > [!TIP]
        >  配列またはコレクションの開始インデックスは、負の数値を指定することはできません。  
  
-   配列が0から始まる必要があると仮定します。 0 以外から始まる配列は<xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType>メソッドで作成でき、COM 相互運用機能で返すことができますが、CLS に準拠していません。 次の例は、<xref:System.IndexOutOfRangeException>メソッドで作成された、 0 から始まらない配列を反復処理するときにスローされる<xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType>を示しています。  
  
     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]
     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  
  
     このエラーを解決するには、次の例に示すように、配列の開始インデックスに関する仮定を行うのではなく、<xref:System.Array.GetLowerBound%2A> メソッドを呼び出すことができます。  
  
     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]
     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  
  
     <xref:System.Array.GetLowerBound%2A>メソッドを呼び出して配列の開始インデックスを取得するときには、<xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType>も呼び出して終了インデックスを取得する必要があることに注意してください。  
  
-   数値の配列またはコレクション内のインデックスと、そのインデックスにある値を混同する。 通常、この問題は`foreach`ステートメント (C#) または`For Each`ステートメント (Visual Basic)を使用した場合に発生します。 この問題の例を次に示します。  
  
     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]
     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  
  
     イテレーションの構成体は、インデックスではなく、配列またはコレクションの各値を返します。 この例外を回避するには、次のコードを使用します。  
  
     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]
     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  
  
-   <xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType>プロパティで、無効な列名を指定する。  
  
-   スレッド セーフに違反する。 同じ<xref:System.IO.StreamReader>オブジェクトからの読み取り、複数のスレッドからの同じ<xref:System.IO.StreamWriter>オブジェクトへの書き込み、または異なるスレッドからの<xref:System.Collections.Hashtable>内のオブジェクトの列挙などの操作は、オブジェクトがスレッド セーフな方法でアクセスされていない場合、<xref:System.IndexOutOfRangeException>をスローします。 この例外は競合状態に依存するために、通常は断続的です。  
  
 ハード コーディングされたインデックス値を使用して配列を操作するとき、インデックス値が正しくないか無効な場合、または操作されている配列のサイズが予期されていない場合は、例外をスローする可能性があります。 操作が<xref:System.IndexOutOfRangeException>例外をスローすることを防ぐためには、次のようにします。  
  
-   インデックスを使用して要素を反復処理する代わりに、[foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx)ステートメント(C#)または[For Each...Next](https://msdn.microsoft.com/library/5ebk1751.aspx)構造(Visual Basic)を使用して、配列の要素を反復処理します。  
  
-   <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType>メソッドによって返されるインデックスで始まり、<xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType>メソッドによって返されるインデックスで終わるインデックスを使用して要素を反復処理します。  
  
-   ある配列の要素を別の配列に割り当てる場合は、<xref:System.Array.Length%2A?displayProperty=nameWithType>プロパティを比較して、対象の配列に、少なくともソース配列と同じ数の要素があることを確認してください。  
  
 <xref:System.IndexOutOfRangeException>インスタンスの初期プロパティ値の一覧については、<xref:System.IndexOutOfRangeException>コンストラクターを参照してください。  
  
 次の中間言語 (IL) 命令は、 <xref:System.IndexOutOfRangeException>をスローします。  
  
-   ldelem。\<の種類 >  
  
-   ldelema  
  
-   stelem。\<の種類 >  
  
 <xref:System.IndexOutOfRangeException>は、値が 0x80131508 の HRESULT COR_E_INDEXOUTOFRANGE を使用します。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">.NET での例外の処理とスロー</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、新しいインスタンスの<xref:System.Exception.Message%2A>プロパティを「配列のインデックスが範囲外です」など、エラーを説明するシステム提供のメッセージに初期化します。 このメッセージは、システムの現在のカルチャを考慮して指定します。  
  
 <xref:System.IndexOutOfRangeException> インスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 参照 (Visual Basic の場合は `Nothing`)。|  
|<xref:System.Exception.Message%2A>|ローカライズされたエラー メッセージの文字列です。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">エラーについて説明するメッセージ。</param>
        <summary>指定したエラー メッセージを使用して、<see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、<xref:System.Exception.Message%2A?displayProperty=nameWithType>パラメーターを使用して、新しい例外の`message`プロパティを初期化します。 `message` の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステム環境向けにローカライズされていることを確認する必要があります。  
  
 <xref:System.IndexOutOfRangeException> インスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 参照 (Visual Basic の場合は `Nothing`)。|  
|<xref:System.Exception.Message%2A>|エラー メッセージ文字列です。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string * Exception -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">例外の原因を説明するエラー メッセージ。</param>
        <param name="innerException">現在の例外の原因になった例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
        <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前の例外の直接の結果としてスローされる例外については、<xref:System.Exception.InnerException%2A> プロパティに、前の例外への参照を含める必要があります。 `InnerException` プロパティは、コンストラクターに渡されたものと同じ値を返します。内部例外値がコンストラクターに渡されなかった場合、`Nothing` プロパティはnull 参照 (Visual Basic の場合は `InnerException`) を返します。  
  
 <xref:System.IndexOutOfRangeException> インスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|内部例外の参照です。|  
|<xref:System.Exception.Message%2A>|エラー メッセージ文字列です。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>
