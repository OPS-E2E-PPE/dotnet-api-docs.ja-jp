<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fc03f60815c45feff273fbba07f7601058a46bd" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78828293" /></Metadata><TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IEquatable(Of DateTimeOffset), IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface IDeserializationCallback&#xA;    interface ISerializable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>特定の時点を表します。通常、世界協定時刻 (UTC) を基準とする相対的な日時として表されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset> 構造体には、現在の <xref:System.DateTimeOffset> インスタンスの日付と時刻と世界協定時刻 (UTC) との差を定義する <xref:System.DateTimeOffset.Offset%2A> プロパティと共に <xref:System.DateTime> 値が含まれます。 UTC を基準とする日付と時刻を正確に定義するので、<xref:System.DateTimeOffset> 構造体には、<xref:System.DateTime> 構造体と同様に `Kind` メンバーは含まれません。 この値は、UTC の範囲が12:00:00 午前1時時 (キリスト)、0001年1月1日午前11:59:59 時 (共通時代 (年号))、9999年12月31日の日付と時刻を表します。 (紀元)。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 <xref:System.DateTimeOffset> 値の時間部分は、タイマー刻みと呼ばれる100ナノ秒単位で測定されます。特定の日付は、0001年1月1日午前0時12:00 からのタイマー刻みの数を示します。 西暦<xref:System.Globalization.GregorianCalendar> カレンダーに含まれています。 <xref:System.DateTimeOffset> 値は常に、明示的または既定の暦のコンテキストで表されます。 うるう秒に起因するティックは、ティックの合計数に含まれません。  
  
 <xref:System.DateTimeOffset> 値にはオフセットが含まれますが、タイムゾーンに対応した完全なデータ構造ではありません。 UTC からのオフセットはタイムゾーンの特性の1つですが、タイムゾーンを明確に識別することはできません。 複数のタイムゾーンが UTC と同じオフセットを共有するだけでなく、1つのタイムゾーンのオフセットは、夏時間を監視する場合に変更されます。 つまり、<xref:System.DateTimeOffset> 値がそのタイムゾーンとの関連付けが解除されるとすぐに、元のタイムゾーンに明確にリンクすることができなくなります。  
  
 <xref:System.DateTimeOffset> は構造体であるため、宣言されているが、それ以外の方法で初期化されていない <xref:System.DateTimeOffset> オブジェクトには、各メンバーフィールドの既定値が含まれます。 これは、その <xref:System.DateTimeOffset.DateTime%2A> プロパティが <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> に設定され、その <xref:System.DateTimeOffset.Offset%2A> プロパティが <xref:System.TimeSpan.Zero?displayProperty=nameWithType>に設定されていることを意味します。  
  
 コンストラクターのオーバーロードのいずれかを呼び出すことによって、新しい <xref:System.DateTimeOffset> 値を作成できます。これは、<xref:System.DateTime> 構造体のオーバーロードされたコンストラクターに似ています。 <xref:System.DateTime> 値を割り当てることによって新しい <xref:System.DateTimeOffset> 値を作成することもできます。 これは暗黙的な変換です。キャスト演算子 (でC#は) または変換メソッド (Visual Basic) の呼び出しは必要ありません。 また、<xref:System.DateTimeOffset.Parse%2A>、<xref:System.DateTimeOffset.ParseExact%2A>、<xref:System.DateTimeOffset.TryParse%2A>、<xref:System.DateTimeOffset.TryParseExact%2A>を含む多数の静的な文字列解析メソッドを呼び出すことによって、日付と時刻の文字列形式から <xref:System.DateTimeOffset> 値を初期化することもできます。  
  
 <xref:System.DateTimeOffset> 構造体のメンバーは、次の領域に機能を提供します。  
  
-   日付と時刻の演算。  
  
     特定の <xref:System.DateTimeOffset> 値から日付または時間間隔を加算または減算することができます。 <xref:System.DateTimeOffset> 値を持つ算術演算は、<xref:System.DateTime> 値とは異なり、結果を返すときに時間オフセットの差を調整します。 たとえば、次のコードでは <xref:System.DateTime> 変数を使用して、現在の UTC 時刻から現在の現地時刻を減算しています。 次に、コードは <xref:System.DateTimeOffset> 変数を使用して同じ操作を実行します。 <xref:System.DateTime> 値を持つ減算はローカルタイムゾーンの UTC との差を返し、<xref:System.DateTimeOffset> 値を持つ減算は <xref:System.TimeSpan.Zero?displayProperty=nameWithType>を返します。  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   型変換操作。  
  
     <xref:System.DateTimeOffset> 値を <xref:System.DateTime> 値に、またはその逆に変換することができます。  
  
-   時間の操作と抽出操作。  
  
     <xref:System.DateTimeOffset> 値の日付または時刻を抽出できます。 また、年や月など、特定の <xref:System.DateTimeOffset> コンポーネントの値を取得することもできます。  

   > [!NOTE]
   >  分数や秒などの他の時間間隔に変換するティック値を使用している場合は、変換を実行するために、<xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>、<xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>、<xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>、<xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>、または <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> 定数を使用する必要があります。 たとえば、指定されたタイマー刻みの数で表される秒数を <xref:System.DateTimeOffset> 値の <xref:System.DateTimeOffset.Second%2A> コンポーネントに追加するには、`dateValue.Second + nTicks/Timespan.TicksPerSecond`式を使用します。  
  

-   日付と時刻の変換。  
  
     <xref:System.DateTimeOffset> 値は、別のタイムゾーンの同じ時点を表す別の <xref:System.DateTimeOffset> 値に変換できます。 ただし、タイムゾーンの調整規則は、<xref:System.DateTimeOffset.ToLocalTime%2A> メソッドの場合にのみ適用されます。これにより、<xref:System.DateTimeOffset> 値がローカルシステムゾーンの日付と時刻に変換されます。  
  
-   日付と時刻の比較。  
  
     特定の <xref:System.DateTimeOffset> 値が、別の <xref:System.DateTimeOffset> 値よりも前か、同じか、または後かを判断できます。 比較を実行する前に、すべての値が UTC に変換されます。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">DateTime、DateTimeOffset、TimeSpan、および TimeZoneInfo の使い分け</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">サンプル: .NET Core WinForms 書式指定ユーティリティC#()</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">サンプル: .NET Core WinForms の書式設定ユーティリティ (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dateTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻。</param>
        <summary><see cref="T:System.DateTime" /> 値を指定して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターの動作は、`dateTime` パラメーターの <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> プロパティの値によって異なります。  
  
-   <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> の値が <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>場合、新しいインスタンスの <xref:System.DateTimeOffset.DateTime%2A> プロパティは `dateTime`に等しい値に設定され、<xref:System.DateTimeOffset.Offset%2A> プロパティは <xref:System.TimeSpan.Zero>に設定されます。  
  
-   <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> の値が <xref:System.DateTimeKind.Local?displayProperty=nameWithType> または <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>の場合、新しいインスタンスの <xref:System.DateTimeOffset.DateTime%2A> プロパティは `dateTime`に設定され、<xref:System.DateTimeOffset.Offset%2A> プロパティはローカルシステムの現在のタイムゾーンのオフセットに等しい値に設定されます。  
  
   
  
## Examples  
 次の例は、`dateTime` パラメーターの <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> プロパティの値が、このコンストラクターによって返される日付と時刻の値にどのように影響するかを示しています。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">オフセットを適用した結果の世界協定時刻 (UTC) の日時が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。  
  
- または - 
オフセットを適用した結果の UTC 日時が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset オブジェクトのインスタンス化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dateTime As DateTime, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻。</param>
        <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
        <summary>指定された <see cref="T:System.DateTime" /> 値およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターの動作は、`dateTime` パラメーターの <xref:System.DateTime.Kind%2A> プロパティの値によって異なります。  
  
-   <xref:System.DateTime.Kind%2A> の値が <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>の場合、`offset` パラメーターの値が0であるか、<xref:System.ArgumentException> がスローされます。  
  
-   <xref:System.DateTime.Kind%2A> の値が <xref:System.DateTimeKind.Local?displayProperty=nameWithType>の場合、`offset` パラメーターの値は、その特定の日付の世界協定時刻 (UTC) からのローカルタイムゾーンのオフセットと同じである必要があります。それ以外の場合、<xref:System.ArgumentException> がスローされます。  
  
-   <xref:System.DateTime.Kind%2A> の値が <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>の場合、`offset` パラメーターには任意の有効な値を指定できます。  
  
   
  
## Examples  
 次の例では、タイムゾーンが事前にわからない場合に、日付と時刻およびローカルタイムゾーンのオフセットを使用して <xref:System.DateTimeOffset> オブジェクトを初期化する方法を示します。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime.Kind" /> は <see cref="F:System.DateTimeKind.Utc" /> と等しく、<paramref name="offset" /> は 0 と等しくありません。  
  
- または - 
 <paramref name="dateTime.Kind" /> は <see cref="F:System.DateTimeKind.Local" /> と等しく、<paramref name="offset" /> はシステムのローカル タイム ゾーンのオフセットと等しくありません。  
  
- または - 
 <paramref name="offset" /> が端数なしの分数で指定されていません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> が -14 時間より小さいか、14 時間を超えています。  
  
- または - 
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> が <see cref="F:System.DateTimeOffset.MinValue" /> より小さいか <see cref="F:System.DateTimeOffset.MaxValue" /> より大きいです。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset オブジェクトのインスタンス化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">日時を 0001 年 1 月 1 日午前 00:00:00 以降の経過時間 (100 ナノ秒単位) で表した値。</param>
        <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
        <summary>指定されたタイマー刻みの数とオフセットで、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常は、<xref:System.DateTimeOffset.%23ctor%2A> コンストラクターを呼び出して、ローカル時刻で <xref:System.DateTimeOffset> 値をインスタンス化し、ローカルタイムゾーンのオフセット以外のオフセットを使用して <xref:System.ArgumentException>をスローします。 <xref:System.DateTimeOffset> コンストラクターのこのオーバーロードを使用して、この制限を回避できます。 次の例では、ローカル時刻のタイマー刻みの数を使用して、オフセットがローカル時刻の値を表しているとは限らない <xref:System.DateTimeOffset> 値をインスタンス化します。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 次の例では、任意の日付のタイマー刻み数を使用して <xref:System.DateTimeOffset> オブジェクトを初期化します (この例では、2007年7月16日、は 1:32 PM)。オフセットは-5 です。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> が端数なしの分数で指定されていません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> よりも前か、<see cref="F:System.DateTimeOffset.MaxValue" /> よりも後です。  
  
- または - 
 <paramref name="ticks" /> が <see langword="DateTimeOffset.MinValue.Ticks" /> より小さいか <see langword="DateTimeOffset.MaxValue.Ticks" /> より大きいです。  
  
- または - 
 <paramref name="Offset" /> が -14 時間未満か、または 14 時間を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset オブジェクトのインスタンス化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
        <summary>指定した年、月、日、時、分、秒、およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、グレゴリオ暦の年、月、および日として、`year`、`month`、および `day` を解釈します。 別の暦の年、月、日を使用して <xref:System.DateTimeOffset> 値をインスタンス化するには、<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> コンストラクターを呼び出します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターのオーバーロードを使用して、<xref:System.DateTimeOffset> オブジェクトをインスタンス化します。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> が端数なしの分数を表していません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
- または - 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、<paramref name="month" /> の月の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、23 を超えています。  
  
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="offset" /> が -14 時間より小さいか、14 時間を超えています。  
  
- または - 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> よりも前か、<see cref="F:System.DateTimeOffset.MaxValue" /> よりも後です。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset オブジェクトのインスタンス化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
        <summary>指定した年、月、日、時、分、秒、ミリ秒、およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、グレゴリオ暦の年、月、および日として、`year`、`month`、および `day` を解釈します。 別の暦の年、月、日を使用して <xref:System.DateTimeOffset> 値をインスタンス化するには、<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> コンストラクターを呼び出します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> コンストラクターのオーバーロードを使用して、<xref:System.DateTimeOffset> オブジェクトをインスタンス化します。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> が端数なしの分数を表していません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
- または - 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、<paramref name="month" /> の月の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、23 を超えています。  
  
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。  
  
- または - 
 <paramref name="offset" /> が -14 未満か、14 を超えています。  
  
- または - 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> よりも前か、<see cref="F:System.DateTimeOffset.MaxValue" /> よりも後です。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset オブジェクトのインスタンス化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, calendar As Calendar, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="offset" Type="System.TimeSpan" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="year">年。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="calendar"><paramref name="year" />、<paramref name="month" />、および <paramref name="day" /> を解釈するために使用される暦。</param>
        <param name="offset">世界協定時刻 (UTC) からの時刻のオフセット。</param>
        <summary>指定した暦の指定した年、月、日、時、分、秒、ミリ秒、およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`、`month`、`day`、`hour`、`minute`、`second`、および `millisecond` の各パラメーターには、`calendar` パラメーターで指定した暦で表される値がすべて反映されます。 これらの値が、この暦を使用して表現できない日付と時刻を形成すると、例外がスローされます。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]   

## Examples  
 次の例では、<xref:System.Globalization.HebrewCalendar> クラスと <xref:System.Globalization.HijriCalendar> クラスの両方のインスタンスを使用して、<xref:System.DateTimeOffset> 値をインスタンス化します。 その日付は、それぞれのカレンダーとグレゴリオ暦を使用してコンソールに表示されます。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> が端数なしの分数を表していません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> として <see langword="null" /> を使用することはできません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が <paramref name="calendar" /> パラメーターの <see langword="MinSupportedDateTime.Year" /> に満たないか、 <see langword="MaxSupportedDateTime.Year" />を超えています。  
  
- または - 
 <paramref name="month" /> が、<paramref name="calendar" /> の <paramref name="year" /> の月数に満たないか、月数を超えています。  
  
- または - 
 <paramref name="day" /> が 1 未満であるか、<paramref name="month" /> の月の日数を超えています。  
  
- または - 
 <paramref name="hour" /> が 0 未満であるか、23 を超えています。  
  
- または - 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
- または - 
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。  
  
- または - 
 <paramref name="offset" /> が -14 時間より小さいか、14 時間を超えています。  
  
- または - 
<paramref name="year" />、<paramref name="month" />、および <paramref name="day" /> の各パラメーターを日時の値として表すことができません。  
  
- または - 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> よりも前か、<see cref="F:System.DateTimeOffset.MaxValue" /> よりも後です。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset オブジェクトのインスタンス化</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (timeSpan As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">正や負の時間間隔を表す <see cref="T:System.TimeSpan" /> オブジェクト。</param>
        <summary>このインスタンスの値に、指定された時間間隔を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="timeSpan" /> で表された時間間隔を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Add%2A> メソッドを使用すると、1回の操作で複数の種類の時間間隔 (日、時間、分、秒、またはミリ秒) を追加できます。 このメソッドの動作は、加算演算子と同じです。 <xref:System.DateTimeOffset> 構造体は、各時間間隔に対して特殊な追加メソッド (<xref:System.DateTimeOffset.AddDays%2A>、<xref:System.DateTimeOffset.AddHours%2A>、<xref:System.DateTimeOffset.AddMinutes%2A>など) もサポートします。  
  
> [!NOTE]
>  このメソッドは、新しい <xref:System.DateTimeOffset> オブジェクトを返します。 日付と時刻に `timeSpan` を追加することによって、現在のオブジェクトの値を変更することはありません。  
  
 <xref:System.DateTimeOffset.Add%2A> メソッドは、現在の <xref:System.DateTimeOffset> オブジェクトの <xref:System.DateTimeOffset.Offset%2A> プロパティの値には影響しません。  
  
 <xref:System.DateTimeOffset> オブジェクトは特定のタイムゾーンの日付と時刻を表していないため、<xref:System.DateTimeOffset.Add%2A> メソッドは、日付と時刻の演算を実行するときに特定のタイムゾーンの調整規則を考慮しません。  
  
 `timeSpan` パラメーターが `null`の場合、このメソッドは元の <xref:System.DateTimeOffset> オブジェクトの値を変更せずに返します。  
  
   
  
## Examples  
 次の例では、変換先の間のフライト時間を表す <xref:System.TimeSpan> オブジェクトの配列を作成します。 次に、<xref:System.DateTimeOffset.Add%2A> メソッドは、フライトの初期の離陸時間を表す <xref:System.DateTimeOffset> オブジェクトにこれらの時刻を追加します。 結果には、各宛先でのスケジュールされた到着時刻が反映されます。  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">整数部と小数部から成る日数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された整数部と小数部から成る日数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="days" /> で表された日数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `days` パラメーターの小数部は、1日の小数部です。 たとえば、4.5 は、4日、12時間、0分、0秒、0ミリ秒に相当します。 `days` パラメーターは、ミリ秒単位で丸められます。  
  
> [!NOTE]
>  このメソッドは、新しい <xref:System.DateTimeOffset> オブジェクトを返します。 日付と時刻に `days` を追加することによって、現在のオブジェクトの値を変更することはありません。  
  
 <xref:System.DateTimeOffset> オブジェクトは特定のタイムゾーンの日付と時刻を表していないため、<xref:System.DateTimeOffset.AddDays%2A> メソッドは、日付と時刻の演算を実行するときに特定のタイムゾーンの調整規則を考慮しません。  
  
 1日未満の時間間隔を分数に変換すると、精度が失われることがあります。 この問題が発生した場合は、<xref:System.DateTimeOffset.Add%2A> メソッドを使用できます。これにより、1回のメソッド呼び出しで複数の種類の時間間隔を指定できるようになり、時間間隔を1日の小数部分に変換する必要がなくなります。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.AddDays%2A> メソッドを使用して、2008年3月に月曜日の営業週の開始日を一覧表示します。  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">整数部と小数部から成る時間数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された整数部と小数部から成る時間数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="hours" /> で表された時間数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `hours` パラメーターの小数部は、1時間の小数部です。 たとえば、4.5 は、4時間、30分、0秒、0ミリ秒に相当します。 `hours` パラメーターは、ミリ秒単位で丸められます。  
  
> [!NOTE]
>  このメソッドは、新しい <xref:System.DateTimeOffset> オブジェクトを返します。 日付と時刻に `hours` を追加することによって、現在のオブジェクトの値を変更することはありません。  
  
 <xref:System.DateTimeOffset> オブジェクトは特定のタイムゾーンの日付と時刻を表していないため、<xref:System.DateTimeOffset.AddHours%2A> メソッドは、日付と時刻の演算を実行するときに特定のタイムゾーンの調整規則を考慮しません。  
  
 時間間隔を1時間未満に変換すると、精度が低下する可能性があります。 (たとえば、1分は0.01666 時間です)。この問題が発生した場合は、<xref:System.DateTimeOffset.Add%2A> メソッドを使用できます。これにより、1回のメソッド呼び出しで複数の種類の時間間隔を指定できるようになり、時間間隔を1時間の小数部分に変換する必要がなくなります。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.AddHours%2A> メソッドを使用して、1日あたり 2 8 時間のシフトを持つオフィスの特定の週の作業シフトの開始時刻を一覧表示します。  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">整数部と小数部から成るミリ秒数。 正数または負数を指定できます。</param>
        <summary>指定されたミリ秒数をこのインスタンスの値に加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表される日時に <paramref name="milliseconds" /> で表される整数のミリ秒数を加算した値をもつオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `milliseconds` パラメーターの小数部は、ミリ秒の小数部です。 たとえば、4.5 は、4ミリ秒と5000ティックに相当します。1ミリ秒は1万ティックとなります。 ただし、`milliseconds` はミリ秒単位に丸められます。 .5 以上のすべての値が切り上げられます。  
  
> [!NOTE]
>  このメソッドは、新しい <xref:System.DateTimeOffset> オブジェクトを返します。 日付と時刻に `milliseconds` を追加することによって、現在のオブジェクトの値を変更することはありません。  
  
 <xref:System.DateTimeOffset> オブジェクトは特定のタイムゾーンの日付と時刻を表していないため、<xref:System.DateTimeOffset.AddMilliseconds%2A> メソッドは、日付と時刻の演算を実行するときに特定のタイムゾーンの調整規則を考慮しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">整数部と小数部から成る分数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された整数部と小数部から成る分数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="minutes" /> で表された分数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `minutes` パラメーターの小数部は、分の小数部です。 たとえば、4.5 は、4分、30秒、0ミリ秒に相当します。 `minutes` パラメーターは、ミリ秒単位で丸められます。  
  
> [!NOTE]
>  このメソッドは、新しい <xref:System.DateTimeOffset> オブジェクトを返します。 日付と時刻に `minutes` を追加することによって、現在のオブジェクトの値を変更することはありません。  
  
 <xref:System.DateTimeOffset> オブジェクトは特定のタイムゾーンの日付と時刻を表していないため、<xref:System.DateTimeOffset.AddMinutes%2A> メソッドは、日付と時刻の演算を実行するときに特定のタイムゾーンの調整規則を考慮しません。  
  
 1分未満の時間間隔を分数に変換すると、精度が失われる可能性があります。 (たとえば、1秒は0.01666 分です)。この問題が発生した場合は、<xref:System.DateTimeOffset.Add%2A> メソッドを使用できます。これにより、1回のメソッド呼び出しで複数の種類の時間間隔を指定できるようになり、時間間隔を分の小数部分に変換する必要がなくなります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">整数の月数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された月数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="months" /> で表された月数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1つの時間間隔単位 (分や日など) を日付と時刻の値に追加するその他の方法とは異なり、<xref:System.DateTimeOffset.AddMonths%2A> では、月の小数部を追加することはできません。 <xref:System.DateTimeOffset> のオブジェクトに対して他の時間単位で構成される時間を追加するには、<xref:System.DateTimeOffset.Add%2A> メソッドを使用します。  
  
> [!NOTE]
>  このメソッドは、新しい <xref:System.DateTimeOffset> オブジェクトを返します。 日付と時刻に `months` を追加することによって、現在のオブジェクトの値を変更することはありません。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.AddMonths%2A> メソッドを使用して、2007年の各四半期の開始日を表示します。  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">整数部と小数部から成る秒数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された整数部と小数部から成る秒数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="seconds" /> で表された秒数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `seconds` パラメーターの小数部は、秒の小数部です。 次の表に、秒の小数部の値を示します。  
  
|2番目の値|同等の表記|  
|------------------|----------------|  
|..1 秒|100 ミリ秒|  
|. 01 秒|10ミリ秒|  
|001秒|1ミリ秒|  
  
 `seconds` パラメーターは、ミリ秒単位で丸められます。  
  
> [!NOTE]
>  このメソッドは、新しい <xref:System.DateTimeOffset> オブジェクトを返します。 日付と時刻に `minutes` を追加することによって、現在のオブジェクトの値を変更することはありません。  
  
 <xref:System.DateTimeOffset> オブジェクトは特定のタイムゾーンの日付と時刻を表していないため、<xref:System.DateTimeOffset.AddSeconds%2A> メソッドは、日付と時刻の演算を実行するときに特定のタイムゾーンの調整規則を考慮しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">100 ナノ秒タイマー刻み数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定されたタイマー刻みの数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="ticks" /> で表されたタイマー刻みの数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ティックは、100ナノ秒または1秒間の万を表します。 ティックは非常に小さく、正確な時間間隔であるため、有効桁数が失われることなく、より大きな時間単位をタイマー刻みの数として表すことができます。  
  
> [!NOTE]
>  このメソッドは、新しい <xref:System.DateTimeOffset> オブジェクトを返します。 日付と時刻に `minutes` を追加することによって、現在のオブジェクトの値を変更することはありません。  
  
 次の表に、特定の時間間隔におけるタイマー刻みの数を示します。  
  
|間隔|タイマー刻みの数|  
|-------------------|---------------------|  
|Second|10,000,000|  
|Minute|600,000,000|  
|Hour|36,000,000,000|  
|Day|864,000,000,000|  
|週|6,048,000,000,000|  
|月|月の日数に依存します。|  
|うるう年以外|315,360,000,000,000|  
|閏年|316,224,000,000,000|  
  
 <xref:System.DateTimeOffset> オブジェクトは特定のタイムゾーンの日付と時刻を表していないため、<xref:System.DateTimeOffset.AddTicks%2A> メソッドは、日付と時刻の演算を実行するときに特定のタイムゾーンの調整規則を考慮しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">年数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された年数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="years" /> で表された年数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1つの時間間隔の単位 (分、日など) を日付と時刻の値に追加するその他の方法とは異なり、<xref:System.DateTimeOffset.AddYears%2A> では、年の小数部を追加することはできません。 <xref:System.DateTimeOffset> オブジェクトに対して年に加えて他の時間単位で構成される時間を追加するには、<xref:System.DateTimeOffset.Add%2A> メソッドを使用します。  
  
> [!NOTE]
>  このメソッドは、新しい <xref:System.DateTimeOffset> オブジェクトを返します。 日付と時刻に `months` を追加することによって、現在のオブジェクトの値を変更することはありません。  
  
   
  
## Examples  
 米国では、16歳未満の運転者に対してドライバーのライセンスを発行することはできません。 次の例では、合法的に運転免許証を発行するために、個人を生まれなければならない最新の日付が表示されます。  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">比較する最初のオブジェクト。</param>
        <param name="second">比較する 2 番目のオブジェクト。</param>
        <summary>2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトを比較し、1 つ目のオブジェクトが 2 つ目のオブジェクトの前か後か、または等しいかを示します。</summary>
        <returns><paramref name="first" /> パラメーターの値が <paramref name="second" /> パラメーターの値よりも前か後か、または等しいかを示す符号付き整数。次の表を参照してください。  
  
 <list type="table"><listheader><term> 戻り値 
 </term><description> 説明 
 </description></listheader><item><term> 0 より小さい値 
 </term><description><paramref name="first" /> が <paramref name="second" /> よりも前の日時です。  
  
 </description></item><item><term> 0 
 </term><description><paramref name="first" /> と <paramref name="second" /> が等価です。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description><paramref name="first" /> が <paramref name="second" /> より後の日時です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 比較を実行する場合、メソッドは、比較を実行する前に、`first` と `second` の両方のパラメーターを世界協定時刻 (UTC) に変換します。 メソッドは、次の場合と同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 言い換えると、<xref:System.DateTimeOffset.Compare%2A> メソッドは、2つの <xref:System.DateTimeOffset> オブジェクトが1つの時点を表しているかどうかを判断します。 日付、時刻、およびオフセットは直接比較されません。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTimeOffset> オブジェクトを比較するための <xref:System.DateTimeOffset.Compare%2A> メソッドの呼び出しを示しています。  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと、指定された <see cref="T:System.DateTimeOffset" /> オブジェクトとを比較し、現在のオブジェクトがもう一方の <see cref="T:System.DateTimeOffset" /> オブジェクトと比べて前か後か、または等しいかを示します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと <paramref name="other" /> との関係を示す符号付き整数。次の表を参照してください。  
  
 <list type="table"><listheader><term> 戻り値 
 </term><description> 説明 
 </description></listheader><item><term> 0 より小さい値 
 </term><description> 現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="other" /> よりも前の日時です。  
  
 </description></item><item><term> 0 
 </term><description> 現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと <paramref name="other" /> は等価です。  
  
 </description></item><item><term> 0 より大きい値  
  
 </term><description> 現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="other" /> よりも後の日時です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.DateTimeOffset.UtcDateTime%2A> 値を比較することによって <xref:System.DateTimeOffset> オブジェクトを比較します。つまり、このメソッドは、2つのオブジェクトが単一点を表しているかどうかを判断し、現在のオブジェクトが `other` パラメーターと同じか、それよりも前か、または同じかを示します。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTimeOffset> オブジェクトを比較するための <xref:System.DateTimeOffset.CompareTo%2A> メソッドの呼び出しを示しています。  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの日付要素を表す <see cref="T:System.DateTimeOffset" /> 値を取得します。</summary>
        <value>現在の <see cref="T:System.DateTime" /> オブジェクトの日付要素を表す <see cref="T:System.DateTimeOffset" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、<xref:System.DateTimeOffset> オブジェクトから時間部分の重要な部分を削除し、その重要な日付部分のみを返します。 たとえば、<xref:System.DateTimeOffset> オブジェクトの日付と時刻の値が "1/12/07 4: 01pm + 7:30" の場合、プロパティは <xref:System.DateTime> 値 "1/12/07 12:00:00 AM" を返します。 <xref:System.DateTime> 値は、日付のみを表示する標準またはカスタムの書式指定子を使用して表示できます。 (例については、「例」を参照してください)。  
  
 返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> プロパティの値は常に <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>ます。 <xref:System.DateTimeOffset.Offset%2A> プロパティの値の影響を受けません。  
  
 時刻部分を含まない日付を表示するには、"D" または "d" 書式指定子を使用することもできます。図については、「例」のセクションを参照してください。  
  
   
  
## Examples  
 次の例では、特定の日付の <xref:System.DateTimeOffset.Date%2A> プロパティの値を取得します。 次に、標準およびカスタムの日付専用書式指定子を使用して、その値をコンソールに表示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の DateTime 書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタムの DateTime 書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時を表す <see cref="T:System.DateTime" /> 値を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.DateTime%2A> プロパティは、<xref:System.DateTimeOffset.Offset%2A> プロパティの値の影響を受けません。  
  
 このプロパティは、<xref:System.DateTimeOffset> オブジェクトの日付と時刻の両方の部分を返します。これにより、変換を <xref:System.DateTime> <xref:System.DateTimeOffset> を実行する際に便利です。 たとえば、<xref:System.DateTimeOffset> オブジェクトの日付と時刻の値が "1/12/07 4: 01pm + 7:30" の場合、プロパティは "1/12/07 4: 01pm" の日付を返します。  
  
 返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> プロパティの値が <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.DateTime%2A> プロパティを使用して、<xref:System.DateTimeOffset.Now%2A> プロパティと <xref:System.DateTimeOffset.UtcNow%2A> プロパティによって返された時刻を <xref:System.DateTime> 値に変換する方法を示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-datetime-and-offset.md">DateTime と DateTimeOffset 間の変換</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトによって表される月の日付を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 1 ～ 31 の値で表される日付要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Day%2A> プロパティは、<xref:System.DateTimeOffset.Offset%2A> プロパティの値の影響を受けません。  
  
 また、"d" または "dd" カスタム書式指定子を使用して <xref:System.DateTimeOffset.ToString%2A> メソッドを呼び出すことによって、<xref:System.DateTimeOffset> オブジェクトの day コンポーネントの文字列形式を作成することもできます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset> オブジェクトの日部分を3つの異なる方法で表示します。  
  
-   <xref:System.DateTimeOffset.Day%2A> プロパティの値を取得する。  
  
-   "D" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
-   "Dd" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトによって表される曜日を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの曜日を示す列挙値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DayOfWeek> 列挙型の定数の値は、<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> から <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>までの範囲です。 整数にキャストする場合、値は 0 (<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>を示す) から 6 (<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>を示す) までの範囲内で指定します。  
  
 "D" 書式指定子または "dddd" カスタム書式指定子を使用して、特定の日付の曜日名を表示することもできます。 次に例を示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 このプロパティによって返される <xref:System.DayOfWeek> 列挙メンバーの `ToString` メソッドを呼び出すことによって返される文字列はローカライズされていないことに注意してください。 現在のカルチャまたは特定のカルチャの曜日名を含む文字列を抽出するには、"dddd" カスタム書式指定子を使用して <xref:System.DateTimeOffset.ToString%2A> メソッドを呼び出します。 たとえば、次のコードは、`fr-fr` カルチャを使用して日付の曜日名を表示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 次の例では、2008年の各月の最初の日の曜日名を表示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトによって表される年間積算日を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの年間積算日を表す 1 ～ 366 の値。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが等しいかどうか、つまり、<see cref="T:System.DateTimeOffset" /> オブジェクトが、指定されたオブジェクトと等しいかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが、指定された <see cref="T:System.DateTimeOffset" /> オブジェクトと同じ特定の時点を表しているかどうかを判断します。</summary>
        <returns>両方の <see cref="T:System.DateTimeOffset" /> オブジェクトが同じ <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、比較を実行する前に、両方の <xref:System.DateTimeOffset> オブジェクトの値を世界協定時刻 (UTC) に変換します。 メソッドは、次の場合と同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 言い換えると、<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> メソッドは、2つの <xref:System.DateTimeOffset> オブジェクトが1つの時点を表しているかどうかを判断します。 日付、時刻、およびオフセットは直接比較されません。 2つの <xref:System.DateTimeOffset> オブジェクトが同じ時刻を表し、同じオフセット値を持つかどうかを確認するには、<xref:System.DateTimeOffset.EqualsExact%2A> メソッドを使用します。  
  
 `null` されていない <xref:System.DateTimeOffset> オブジェクトは、`null`されているものと同じであると見なされます。  
  
 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> メソッドのこのオーバーロードは、<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> メソッドを実装します。 `other` パラメーターをオブジェクトから変換する必要がないため、<xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> のオーバーロードよりも若干優れたパフォーマンスを提供します。  
  
   
  
## Examples  
 次の例は、現在の <xref:System.DateTimeOffset> オブジェクトと等しいかどうか <xref:System.DateTimeOffset> オブジェクトをテストするための <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> メソッドの呼び出しを示しています。  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
        <summary><see cref="T:System.DateTimeOffset" /> オブジェクトが、指定されたオブジェクトと同じ特定の時点を表しているかどうかを判断します。</summary>
        <returns><paramref name="obj" /> パラメーターが <see cref="T:System.DateTimeOffset" /> オブジェクトであり、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと同じ特定の時点を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、比較を実行する前に、現在の <xref:System.DateTimeOffset> オブジェクトと `obj` パラメーターの両方の値を世界協定時刻 (UTC) に変換します。 メソッドは、次の場合と同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 言い換えると、<xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> メソッドは、現在の <xref:System.DateTimeOffset> オブジェクトと指定されたオブジェクトが単一点を表しているかどうかを判断します。 日付、時刻、およびオフセットは直接比較されません。 2つの <xref:System.DateTimeOffset> オブジェクトが同じ時刻を表し、同じオフセット値を持つかどうかを確認するには、<xref:System.DateTimeOffset.EqualsExact%2A> メソッドを使用します。  
  
 `obj` が `null`の場合、または `obj` の実行時の型が <xref:System.DateTimeOffset>ない場合、メソッドは `false`を返します。  
  
   
  
## Examples  
 次の例では、現在の <xref:System.DateTimeOffset> オブジェクトが、null 参照および <xref:System.DateTime> オブジェクトと同様に、他のいくつかの <xref:System.DateTimeOffset> オブジェクトと等しいかどうかを示します。  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">比較する最初のオブジェクト。</param>
        <param name="second">比較する 2 番目のオブジェクト。</param>
        <summary>指定された 2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが、同じ特定の時点を表しているかどうかを判断します。</summary>
        <returns>2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが同じ <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、比較を実行する前に、両方の <xref:System.DateTimeOffset> オブジェクトを世界協定時刻 (UTC) に変換します。 メソッドは、次の場合と同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 言い換えると、<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> メソッドは、2つの <xref:System.DateTimeOffset> オブジェクトが1つの時点を表しているかどうかを判断します。 日付、時刻、およびオフセットは直接比較されません。 2つの <xref:System.DateTimeOffset> オブジェクトが同じ時刻を表し、同じオフセット値を持つかどうかを確認するには、<xref:System.DateTimeOffset.EqualsExact%2A> メソッドを使用します。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> メソッドを呼び出して、<xref:System.DateTimeOffset> オブジェクトのさまざまなペアが等しいかどうかをテストする方法を示しています。  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが、指定された <see cref="T:System.DateTimeOffset" /> オブジェクトと同じ特定の時点を表しており、かつ、同じオフセットを持つかどうかを判断します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと <paramref name="other" /> が同じ日時の値を持ち、かつ同じ <see cref="P:System.DateTimeOffset.Offset" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数のタイムゾーンが1つのオフセットを共有するため、`true` の戻り値は、現在のオブジェクトと `other` オブジェクトが同じタイムゾーンの時刻を表すことを保証しません。  
  
 <xref:System.DateTimeOffset.EqualsExact%2A> メソッドとは異なり、<xref:System.DateTimeOffset.Equals%2A> メソッドのオーバーロードによって、2つの <xref:System.DateTimeOffset> 値が1つの時点を表すかどうかが決まります。 2つの値が同じ日付と時刻、および同じオフセットを持つことを示していません。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTimeOffset.EqualsExact%2A> メソッドを使用して、類似する <xref:System.DateTimeOffset> オブジェクトを比較する方法を示しています。  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">タイマー刻み単位で表した Windows ファイルの時刻。</param>
        <summary>指定された Windows ファイル時刻を同等の現地時刻に変換します。</summary>
        <returns><paramref name="fileTime" /> の日時を表すオブジェクト。オフセットは現地時刻のオフセットに設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻は、64年1月 1601 1 日の午前0時から12:00 に経過した100ナノ秒間隔の数を表すビット値です。 西暦協定世界時 (UTC)。 Windows では、ファイルの作成、アクセス、またはファイルへの書き込みを行うときに、ファイルの時刻が記録されます。  
  
 Windows ファイルの時刻には、`FILETIME` 構造体を返す `GetFileTime` 関数を呼び出すことによって、Windows API から直接アクセスできます。 1つの関数パラメーターは、ファイルの時刻情報を取得するファイルのハンドルです。 ファイルハンドルは、`CreateFile` 関数を呼び出すことによって取得されます。 `FILETIME` 構造体の `dwHighDateTime` メンバーには、ファイル時間の上位4バイトが含まれ、その `dwLowDateTime` メンバーには、4つの下位バイトが含まれます。 次の例は、Windows ファイルの時刻値を取得して <xref:System.DateTimeOffset> 値に変換する方法を示しています。  
  
 また、<xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType> メソッドと <xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType> メソッドを呼び出すことによって <xref:System.DateTime> 値から、また <xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType> メソッドを呼び出すことによって <xref:System.DateTimeOffset> 値から、Windows ファイル時刻値を作成することもできます。  
  
   
  
## Examples  
 次の例では、Windows API を使用して、ワードパッド実行可能ファイルの Windows ファイルの時刻を取得します。  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="filetime" /> が 0 未満です。  
  
- または - 
 <paramref name="filetime" /> が <see langword="DateTimeOffset.MaxValue.Ticks" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="milliseconds">1970-01-01T00:00:00Z (1970 年 1 月 1 日、12:00 AM UTC) からの経過時間をミリ秒で示す Unix 時間。 これ以前の場合、Unix 時間は負の値になります。</param>
        <summary>1970-01-01T00:00:00Z からの経過時間をミリ秒で示す Unix 時間を <see cref="T:System.DateTimeOffset" /> 値に変換します。</summary>
        <returns>Unix 時間と同じ時間を表す日時の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返された <xref:System.DateTimeOffset> インスタンスの <xref:System.DateTimeOffset.Offset%2A> プロパティ値は <xref:System.TimeSpan.Zero?displayProperty=nameWithType>で、世界協定時刻を表します。 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> メソッドを呼び出すことにより、特定のタイムゾーンの時刻に変換することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="milliseconds" /> が -62,135,596,800,000 未満です。  
  
- または - 
 <paramref name="milliseconds" /> が 253,402,300,799,999 を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="seconds">1970-01-01T00:00:00Z (1970 年 1 月 1 日、12:00 AM UTC) からの経過時間を秒で示す Unix 時間。 これ以前の場合、Unix 時間は負の値になります。</param>
        <summary>1970-01-01T00:00:00Z からの経過時間を秒で示す Unix 時間を <see cref="T:System.DateTimeOffset" /> 値に変換します。</summary>
        <returns>Unix 時間と同じ時間を表す日時の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返された <xref:System.DateTimeOffset> インスタンスの <xref:System.DateTimeOffset.Offset%2A> プロパティ値は <xref:System.TimeSpan.Zero?displayProperty=nameWithType>で、世界協定時刻を表します。 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> メソッドを呼び出すことにより、特定のタイムゾーンの時刻に変換することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds" /> が -62,135,596,800 未満です。  
  
- または - 
 <paramref name="seconds" /> が 253,402,300,799 を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す時刻の時間要素を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの時間要素。 このプロパティには、0 ～ 23 の値の範囲をとる 24 時間制が使用されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Hour%2A> プロパティは、<xref:System.DateTimeOffset.Offset%2A> プロパティの値の影響を受けません。  
  
 また、"H" または "HH" カスタム書式指定子を使用して <xref:System.DateTimeOffset.ToString%2A> メソッドを呼び出すことによって、<xref:System.DateTimeOffset> オブジェクトの時間部分の文字列形式を作成することもできます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset> オブジェクトの時間部分を3つの異なる方法で表示します。  
  
-   <xref:System.DateTimeOffset.Hour%2A> プロパティの値を取得する。  
  
-   "H" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
-   "HH" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの現地日時を表す <see cref="T:System.DateTimeOffset" /> 値を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの現地日時。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必要に応じて、<xref:System.DateTimeOffset.LocalDateTime%2A> プロパティは、現在の <xref:System.DateTimeOffset> オブジェクトの日付と時刻をローカルシステムの日付と時刻に変換します。 変換は、2段階の操作です。  
  
1.  プロパティは、現在の <xref:System.DateTimeOffset> オブジェクトの時刻を世界協定時刻 (UTC) に変換します。  
  
2.  次に、プロパティは UTC を現地時刻に変換します。  
  
 無効な時刻はありません。あいまいな時刻はローカルゾーンの標準時刻にマップされます。 (ただし、変換によって異常が発生する可能性があります。ローカルコンピューターから派生した <xref:System.DateTimeOffset> 値にあいまいな日付と時刻が反映されている場合、その値を UTC に変換し、元の時刻とは異なる現地時刻に戻すことができます)。 プロパティは、この変換を実行するときに、ローカルタイムゾーンの調整規則を適用します。  
  
 このプロパティは、<xref:System.DateTimeOffset> オブジェクトの日付と時刻の両方の部分を返します。これにより、変換を <xref:System.DateTime> <xref:System.DateTimeOffset> に役立ちます。 このプロパティは、必要な時間変換を実行するだけでなく、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティの値を <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定することによって、<xref:System.DateTimeOffset.DateTime%2A> プロパティとは異なります。  
  
   
  
## Examples  
 次の例では、米国太平洋標準時ゾーンでの <xref:System.DateTimeOffset> 値から現地時刻への変換をいくつか示します。 最後の3回はすべてあいまいであることに注意してください。プロパティは、すべてのプロパティを太平洋標準時ゾーンの1つの日付と時刻にマップします。  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTimeOffset" /> の最大有効値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数の値は 12/31/9999 11:59:59 PM + 00:00 です。  
  
 <xref:System.DateTimeOffset.MaxValue> プロパティは、新しい <xref:System.DateTimeOffset> オブジェクトの値、または算術演算によって返された <xref:System.DateTimeOffset> 値が、この最大範囲の値と同じかそれ以前であるかを判断するために使用されます。 そうでない場合、メソッドは <xref:System.ArgumentOutOfRangeException>をスローします。 <xref:System.DateTimeOffset> 値は、メソッドが <xref:System.DateTimeOffset.MaxValue>と比較する前に、世界協定時刻 (UTC) に変換されます。  これは、日付と時刻が最大範囲に近いが、オフセットが負である <xref:System.DateTimeOffset> 値が例外をスローする可能性があることを意味します。 たとえば、値 12/31/9999 11:00 PM-02:00 は、UTC に変換されるとき <xref:System.DateTimeOffset.MaxValue> より1時間後であるため、範囲外です。  
  
 <xref:System.Globalization.UmAlQuraCalendar>などの一部のカレンダーでは、<xref:System.DateTime.MaxValue>よりも前の日付範囲がサポートされています。 このような場合は、変数の割り当てまたは書式設定および解析操作で <xref:System.DateTime.MaxValue> にアクセスしようとすると、<xref:System.ArgumentOutOfRangeException>がスローされる可能性があります。 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>の値を取得する代わりに、<xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType> プロパティから、指定したカルチャの最新の有効な日付の値を取得できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="F:System.DateTime.MaxValue" /> が、現在または指定したカルチャの既定の暦の範囲外です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す時刻のミリ秒要素を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ～ 999 の整数で表されるミリ秒要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 また、"fff" カスタム書式指定子を使用して <xref:System.DateTimeOffset.ToString%2A> メソッドを呼び出すことによって、<xref:System.DateTimeOffset> オブジェクトのミリ秒部分の文字列形式を作成することもできます。  
  
 <xref:System.DateTimeOffset.Now%2A> や <xref:System.DateTimeOffset.UtcNow%2A> などのプロパティを使用して経過ミリ秒数を正確に追跡する場合、時間のミリ秒部分の精度は、システムクロックの解決によって異なります。 Windows NT 3.5 以降および Windows Vista オペレーティング システムでは、クロックの解像力は約 10-15 ミリ秒です。  
  
   
  
## Examples  
 次の例では、カスタム書式指定子を使用し、<xref:System.DateTimeOffset.Millisecond%2A> プロパティに直接アクセスすることによって、<xref:System.DateTimeOffset> オブジェクトのミリ秒数を表示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す時刻の分要素を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ～ 59 の整数で表される分要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Minute%2A> プロパティは、<xref:System.DateTimeOffset.Offset%2A> プロパティの値の影響を受けません。  
  
 また、"m" または "mm" カスタム書式指定子を使用して <xref:System.DateTimeOffset.ToString%2A> メソッドを呼び出すことによって、<xref:System.DateTimeOffset> オブジェクトの分の部分の文字列形式を作成することもできます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset> オブジェクトの分の部分を3つの異なる方法で表示します。  
  
-   <xref:System.DateTimeOffset.Minute%2A> プロパティの値を取得する。  
  
-   "M" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
-   "Mm" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTimeOffset" /> の最小有効値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数の値は 1/1/0001 12:00:00 AM + 00:00 です。  
  
 <xref:System.DateTimeOffset.MinValue> プロパティは、新しい <xref:System.DateTimeOffset> オブジェクトの値、または算術演算によって返された <xref:System.DateTimeOffset> 値が、この最小範囲の値と同じかそれより後であるかを判断するために使用されます。 そうでない場合、メソッドは <xref:System.ArgumentOutOfRangeException>をスローします。 <xref:System.DateTimeOffset> 値は、メソッドが <xref:System.DateTimeOffset.MinValue>との比較を実行する前に、世界協定時刻 (UTC) に変換されます。  つまり、日付と時刻が最小範囲に近いが、オフセットが正である <xref:System.DateTimeOffset> 値は、例外をスローすることがあります。 たとえば、値 1/1/0001 1:00:00 AM + 02:00 は範囲外です。これは、UTC に変換されるときの <xref:System.DateTimeOffset.MinValue> より1時間早いためです。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトによって表される日付の月要素を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 1 ～ 12 の整数で表される月要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Month%2A> プロパティは、<xref:System.DateTimeOffset.Offset%2A> プロパティの値の影響を受けません。  
  
 また、"M" または "MM" カスタム書式指定子を使用して <xref:System.DateTimeOffset.ToString%2A> メソッドを呼び出すことによって、<xref:System.DateTimeOffset> オブジェクトの month コンポーネントの文字列形式を作成することもできます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset> 値の月の部分を3つの異なる方法で表示します。  
  
-   <xref:System.DateTimeOffset.Month%2A> プロパティの値を取得する。  
  
-   "M" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
-   "MM" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現地時刻と世界協定時刻 (UTC) の差をオフセットとして持つ、現在のコンピューターの現在日時に設定された <see cref="T:System.DateTimeOffset" /> オブジェクトを取得します。</summary>
        <value>ローカル タイム ゾーンと世界協定時刻 (UTC) の差をオフセットとして持つ、現在の現地時刻に設定された <see cref="T:System.DateTimeOffset" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の現地時刻のミリ秒部分の精度は、システムクロックの解決によって異なります。 Windows NT 3.5 以降および Windows Vista オペレーティング システムでは、クロックの解像力は約 10-15 ミリ秒です。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.Now%2A> プロパティを使用して現在の日付と時刻を取得し、<xref:System.DateTimeOffset> の種類でサポートされている[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)をそれぞれ使用して表示します。  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 次の例では、<xref:System.DateTimeOffset.Now%2A> と <xref:System.DateTimeOffset.Millisecond%2A> のプロパティを使用して、システムクロックの解像度を決定します。 ミリ秒部分の値が変更された場合にのみ、時間が表示されます。  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>世界協定時刻 (UTC) からの時刻のオフセットを取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの時刻値と世界協定時刻 (UTC) 間の差。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返された <xref:System.TimeSpan> オブジェクトの <xref:System.TimeSpan.Hours%2A> プロパティの値は、-14 時間から14時間までの範囲で指定できます。  
  
 <xref:System.DateTimeOffset.Offset%2A> プロパティの値は、分単位で指定します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.Offset%2A> プロパティを使用して、現地時刻と世界協定時刻 (UTC) との差を表示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (dateTimeOffset As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (dateTimeTz As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz + timeSpan" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">時間間隔を加算するオブジェクト。</param>
        <param name="dateTimeTz">時間間隔を加算するオブジェクト。</param>
        <param name="timeSpan">加算する時間間隔。</param>
        <summary>特定の日時を持つ <see cref="T:System.DateTimeOffset" /> オブジェクトに指定された時間間隔を加算し、新しい日時を持った <see cref="T:System.DateTimeOffset" /> オブジェクトを作成します。</summary>
        <returns><paramref name="dateTimeTz" /> と <paramref name="timeSpan" /> の値の合計を値とするオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Addition%2A> メソッドは、<xref:System.DateTimeOffset> 値の加算演算を定義します。 次のようなコードが有効になります。  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 カスタム演算子と演算子のオーバーロードをサポートしない言語では、代わりに <xref:System.DateTimeOffset.Add%2A> メソッドを呼び出すことができます。  
  
 この演算子の同等のメソッドは <xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>です。]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>指定された 2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが、同じ特定の時点を表しているかどうかを判断します。</summary>
        <returns>両方の <see cref="T:System.DateTimeOffset" /> オブジェクトが同じ <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Equality%2A> メソッドは、<xref:System.DateTimeOffset> オブジェクトの等値演算子の演算を定義します。 次のようなコードが有効になります。  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 `left` と `right` オペランドが等しいかどうかを評価する前に、演算子は両方の値を世界協定時刻 (UTC) に変換します。 操作は、次の場合と同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 言い換えると、<xref:System.DateTimeOffset.op_Equality%2A> メソッドは、2つの <xref:System.DateTimeOffset> オブジェクトが1つの時点を表しているかどうかを判断します。 日付、時刻、およびオフセットは直接比較されません。 2つの <xref:System.DateTimeOffset> オブジェクトが同じ時刻を表し、同じオフセット値を持つかどうかを確認するには、<xref:System.DateTimeOffset.EqualsExact%2A> メソッドを使用します。  
  
 この演算子の同等のメソッドは <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>最初に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトが 2 番目に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトよりも大きい (後) かどうかを判断します。</summary>
        <returns><paramref name="left" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値が <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値よりも後の日時を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A> メソッドは、<xref:System.DateTimeOffset> オブジェクトの大なり演算子の演算を定義します。 次のようなコードが有効になります。  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 カスタム演算子をサポートしない言語では、代わりに <xref:System.DateTimeOffset.Compare%2A> メソッドを呼び出すことができます。 また、次の例に示すように、<xref:System.DateTimeOffset.op_GreaterThan%2A> メソッドを直接呼び出すこともできます。  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 演算子は、`left` と `right` オペランドを評価する前に、両方の値を世界協定時刻 (UTC) に変換します。 操作は、次の場合と同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 この演算子の同等のメソッドは <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>最初に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトが 2 番目に指定した <see cref="T:System.DateTimeOffset" /> オブジェクト以上かどうかを判断します。</summary>
        <returns><paramref name="left" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値が <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値と同じかそれよりも後であった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A> メソッドでは、<xref:System.DateTimeOffset> オブジェクトの "以上" 演算子の演算を定義します。 次のようなコードが有効になります。  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 カスタム演算子をサポートしない言語では、代わりに <xref:System.DateTimeOffset.Compare%2A> メソッドを呼び出すことができます。 次の例に示すように、一部の言語では、<xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A> メソッドを直接呼び出すこともできます。  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 演算子は、`left` と `right` オペランドを評価する前に、両方の値を世界協定時刻 (UTC) に変換します。 操作は、次の場合と同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 この演算子の同等のメソッドは <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (dateTime As DateTime) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換対象のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" /> オブジェクトから <see cref="T:System.DateTimeOffset" /> オブジェクトへの暗黙の型変換を定義します。</summary>
        <returns>変換後のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Implicit%2A> メソッドを使用すると、コンパイラは、明示的なキャスト演算子 (のC#場合) または変換関数の呼び出し (Visual Basic) を使用せずに、<xref:System.DateTime> オブジェクトを <xref:System.DateTimeOffset> オブジェクトに自動的に変換できます。 これは、データ損失を伴わない拡大変換を定義し、<xref:System.OverflowException>をスローしません。 <xref:System.DateTimeOffset.op_Implicit%2A> メソッドを使用すると、次のようなコードを作成できます。  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 このメソッドは、<xref:System.DateTimeOffset.%23ctor%2A> コンストラクターに相当します。 結果の <xref:System.DateTimeOffset> オブジェクトのオフセットは、`dateTime` パラメーターの <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> プロパティの値によって異なります。  
  
-   <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> プロパティの値が <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>の場合、<xref:System.DateTimeOffset> オブジェクトの日付と時刻は `dateTime`に等しい値に設定され、その <xref:System.DateTimeOffset.Offset%2A> プロパティは0に設定されます。  
  
-   <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> プロパティの値が <xref:System.DateTimeKind.Local?displayProperty=nameWithType> または <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>の場合は、<xref:System.DateTimeOffset> オブジェクトの日付と時刻が `dateTime`に設定され、その <xref:System.DateTimeOffset.Offset%2A> プロパティがローカルシステムの現在のタイムゾーンのオフセットに等しい値に設定されます。  
  
 この演算子の同等のメソッドは <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">オフセットを適用した結果の世界協定時刻 (UTC) の日時が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。  
  
- または - 
オフセットを適用した結果の UTC 日時が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>指定された 2 つの <see cref="T:System.DateTimeOffset" /> オブジェクトが異なる時点を表しているかどうかを判断します。</summary>
        <returns><paramref name="left" /> と <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値が異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Inequality%2A> メソッドは、<xref:System.DateTimeOffset> オブジェクトの非等値演算子の演算を定義します。 <xref:System.DateTimeOffset.op_Equality%2A>からは、常に逆の結果が返されます。 <xref:System.DateTimeOffset.op_Inequality%2A> メソッドは、次のようなコードを有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 `left` と `right` オペランドが等しいかどうかを評価する前に、演算子は両方の値を世界協定時刻 (UTC) に変換します。 操作は、次の場合と同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 言い換えると、<xref:System.DateTimeOffset.op_Inequality%2A> メソッドは、2つの <xref:System.DateTimeOffset> オブジェクトが異なる時点を表しているかどうかを判断します。 日付、時刻、およびオフセットは直接比較されません。  
  
 カスタム演算子をサポートしない言語では、代わりに <xref:System.DateTimeOffset.Compare%2A> メソッドを呼び出すことができます。 また、次の例に示すように、一部の言語では、<xref:System.DateTimeOffset.op_Inequality%2A> メソッドを直接呼び出すこともできます。  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 この演算子の同等のメソッドは <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>最初に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトが 2 番目に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトより小さいかどうかを判断します。</summary>
        <returns><paramref name="left" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値が <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値より前の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThan%2A> メソッドは、<xref:System.DateTimeOffset> オブジェクトの小なり演算子の演算を定義します。 次のようなコードが有効になります。  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 演算子は、オペランド `left` と `right` を評価する前に、両方のオペランドを世界協定時刻 (UTC) に変換します。 操作は、次の場合と同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 カスタム演算子をサポートしない言語では、代わりに <xref:System.DateTimeOffset.Compare%2A> メソッドを呼び出すことができます。 また、次の例に示すように、一部の言語では、<xref:System.DateTimeOffset.op_LessThan%2A> メソッドを直接呼び出すこともできます。  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 この演算子の同等のメソッドは <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>最初に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトが 2 番目に指定した <see cref="T:System.DateTimeOffset" /> オブジェクトより小さいかどうかを判断します。</summary>
        <returns><paramref name="left" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値が <paramref name="right" /> の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値より前の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> メソッドは、<xref:System.DateTimeOffset> オブジェクトの以下演算子の操作を定義します。 次のようなコードが有効になります。  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 カスタム演算子をサポートしない言語では、代わりに <xref:System.DateTimeOffset.Compare%2A> メソッドを呼び出すことができます。 次の例に示すように、一部の言語では、<xref:System.DateTimeOffset.op_LessThanOrEqual%2A> メソッドを直接呼び出すこともできます。  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 演算子は、`left` と `right` オペランドを評価する前に、両方の値を世界協定時刻 (UTC) に変換します。 操作は、次の場合と同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 この演算子の同等のメソッドは <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された <see cref="T:System.DateTimeOffset" /> オブジェクトまたは <see cref="T:System.TimeSpan" /> オブジェクトを <see cref="T:System.DateTimeOffset" /> オブジェクトから減算します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">被減数。</param>
        <param name="right">減数。</param>
        <summary>一方の <see cref="T:System.DateTimeOffset" /> オブジェクトをもう一方のオブジェクトから減算し、時間間隔を生成します。</summary>
        <returns><paramref name="left" /> と <paramref name="right" /> の差を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A> メソッドは、<xref:System.DateTimeOffset> オブジェクトの減算演算を定義します。 次のようなコードが有効になります。  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 カスタム演算子と演算子のオーバーロードをサポートしない言語では、代わりに <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> メソッドを呼び出すことができます。  
  
 この演算子の同等のメソッドは <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>です。]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (dateTimeOffset As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (dateTimeTz As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz - timeSpan" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">減算される日時オブジェクト。</param>
        <param name="dateTimeTz">減算される日時オブジェクト。</param>
        <param name="timeSpan">減算する時間間隔。</param>
        <summary>指定した日付と時刻から指定した時間間隔を減算して、新しい日付と時刻を作成します。</summary>
        <returns><paramref name="dateTimeOffset" /> から <paramref name="timeSpan" /> を減算した値と等しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A> メソッドは、<xref:System.DateTimeOffset> オブジェクトの減算演算を定義します。 次のようなコードが有効になります。  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 カスタム演算子と演算子のオーバーロードをサポートしない言語では、代わりに <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> メソッドを呼び出すことができます。  
  
 この演算子の同等のメソッドは <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>です。]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満であるか、<see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <summary>指定した文字列形式の日付、時刻、およびオフセットを等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
        <returns><paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> は、任意の順序で使用でき、空白で区切られた3つの要素を持つ文字列を解析します。 これら3つの要素を次の表に示します。  
  
|要素|例|  
|-------------|-------------|  
|\<日付 >|"2/10/2007"|  
|\<時刻 >|"1:02:03 PM"|  
|\<オフセット >|"-7:30"|  
  
 これらの各要素は省略可能ですが、\<オフセット > を単独で表示することはできません。 \<Date > または \<Time > と共に指定する必要があります。 \<日付 > が指定されていない場合は、その既定値が現在の日付になります。 \<時間 > が指定されていない場合、既定値は 12:00:00 AM です。 \<日付 > が存在するが、その年の部分が2桁のみで構成されている場合、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> プロパティの値に基づいて、現在のカルチャの現在の暦で年に変換されます。 \<オフセット > が指定されていない場合、既定値はローカルタイムゾーンのオフセットになります。 \<オフセット > は、世界協定時刻 (UTC) からの負または正のオフセットを表すことができます。 どちらの場合も、\<オフセット > には記号を含める必要があります。  
  
 `input` 文字列は、現在のカルチャに対して初期化された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの書式情報を使用して解析されます。 現在のカルチャの書式に必ずしも一致しない、指定された書式設定を含む文字列を解析するには、<xref:System.DateTimeOffset.ParseExact%2A> メソッドを使用して、書式指定子を指定します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.Parse%28System.String%29> メソッドを呼び出して、複数の日付と時刻の文字列を解析します。 この例では、カルチャが en-us であるシステムで2007年3月22日の出力が含まれています。  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
- または - 
 <paramref name="input" /> に日付または時刻のないオフセット値の文字列形式が含まれています。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
        <returns><paramref name="formatProvider" /> で指定された書式に従って表記された、<paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、任意の順序で使用でき、空白で区切られた3つの要素を含む文字列を解析します。 次の表に、これら3つの要素を示します。  
  
|要素|例|  
|-------------|-------------|  
|\<日付 >|"2/10/2007"|  
|\<時刻 >|"1:02:03 PM"|  
|\<オフセット >|"-7:30"|  
  
 これらの各要素は省略可能ですが、\<オフセット > を単独で表示することはできません。 \<Date > または \<Time > と共に指定する必要があります。 \<日付 > が指定されていない場合は、その既定値が現在の日付になります。 \<日付 > が存在するが、その年の部分が2桁のみで構成されている場合、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> プロパティの値に基づいて、`provider` パラメーターの現在の暦で年に変換されます。 \<時間 > が指定されていない場合、既定値は 12:00:00 AM です。 \<オフセット > が指定されていない場合、既定値はローカルタイムゾーンのオフセットになります。 \<オフセット > は、世界協定時刻 (UTC) からの負または正のオフセットを表すことができます。 どちらの場合も、\<オフセット > には記号を含める必要があります。  
  
 これら3つの要素の形式は `formatProvider` パラメーターによって定義されます。これは次のいずれかになります。  
  
-   書式設定が `input` パラメーターで使用されているカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、`input`で使用される書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 `formatprovider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 \<オフセット > で使用される正または負の符号は、+ または-のいずれかである必要があります。 これは、`formatProvider` パラメーターの <xref:System.Globalization.NumberFormatInfo> オブジェクトの <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> または <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> プロパティで定義されていません。  
  
   
  
## Examples  
 次の例では、fr-fr カルチャに対して書式設定された日付と時刻の文字列を解析し、ローカルシステムの既定の en-us カルチャを使用して表示します。  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
- または - 
 <paramref name="input" /> に日付または時刻のないオフセット値の文字列形式が含まれています。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = default, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="input">変換する日付と時刻を表す文字を格納しているスパン。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles"><paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>指定したカルチャ固有の書式情報と書式スタイルを使用して、指定した日付と時刻のスパン表現を等価の <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
        <returns><paramref name="formatProvider" /> と <paramref name="styles" /> で指定された <paramref name="input" /> に格納される日時と等価のオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles"><paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>指定したカルチャ固有の書式情報と書式スタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
        <returns><paramref name="formatProvider" /> と <paramref name="styles" /> で指定された <paramref name="input" /> に格納される日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、任意の順序で使用でき、空白で区切られた3つの要素を含む文字列を解析します。 次の表に、これら3つの要素を示します。  
  
|要素|例|  
|-------------|-------------|  
|\<日付 >|"2/10/2007"|  
|\<時刻 >|"1:02:03 PM"|  
|\<オフセット >|"-7:30"|  
  
 これらの各要素は省略可能ですが、\<オフセット > を単独で表示することはできません。 \<Date > または \<Time > と共に指定する必要があります。 \<日付 > が指定されていない場合は、その既定値が現在の日付になります。 \<日付 > が存在するが、その年の部分が2桁のみで構成されている場合、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> プロパティの値に基づいて、`provider` パラメーターの現在の暦で年に変換されます。 \<時間 > が指定されていない場合、既定値は 12:00:00 AM です。 \<オフセット > が存在しない場合、既定値はローカルタイムゾーンのオフセット、または <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> パラメーターで <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> または `styles` のいずれかの値が指定されている場合は <xref:System.TimeSpan.Zero?displayProperty=nameWithType> になります。 \<オフセット > が存在する場合は、世界協定時刻 (UTC) からの負または正のオフセットを表すことができます。 どちらの場合も、\<オフセット > には記号を含める必要があります。  
  
 これら3つの要素の形式は `formatProvider` パラメーターによって定義されます。これは次のいずれかになります。  
  
-   書式設定が `input` パラメーターで使用されているカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、`input`で使用される書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 各要素は、先頭または末尾の空白で囲むこともできます。また、\<Date > と \<Time > 要素には、内部の空白 (6: 00:00 など) を含めることができます。 内部の空白を含めることができるのは、\<オフセット > コンポーネントのみです。  
  
 `formatprovider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 \<オフセット > で使用される正または負の符号は、+ または-のいずれかである必要があります。 これは、`formatProvider` パラメーターによって返される <xref:System.Globalization.NumberFormatInfo> オブジェクトの <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> または <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> プロパティによって定義されていません。  
  
 次の表は、サポートされている <xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType> 列挙型のメンバーを示しています。  
  
|DateTimeStyles メンバー|説明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` によって表される文字列を解析し、必要に応じて UTC に変換します。 これは、文字列を解析し、返された <xref:System.DateTimeOffset> オブジェクトの <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> メソッドを呼び出すことと同じです。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|有効ですが、この値は無視されます。 内部の空白は、\<日付 > と \<時刻 > 要素で使用できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|有効ですが、この値は無視されます。 先頭の空白文字は、解析された文字列内の各コンポーネントの前に使用できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|有効ですが、この値は無視されます。 末尾の空白文字は、解析された文字列内の各コンポーネントの前に使用できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|これが既定の動作です。 <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>など、より制限の厳しい <xref:System.Globalization.DateTimeStyles> 列挙値を指定することによってオーバーライドすることはできません。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|`input` パラメーターに \<オフセット > 要素がない場合に、ローカルタイムゾーンのオフセットを指定する必要があることを示します。 これは、<xref:System.DateTimeOffset.Parse%2A> メソッドの既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|`input` パラメーターに \<オフセット > 要素がない場合、UTC オフセット (00:00) を指定する必要があることを示します。|  
|<xref:System.Globalization.DateTimeStyles.None>|有効ですが、この値は無視され、効果はありません。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset> 構造体には `Kind` プロパティが含まれていないため、この値は無効です。|  
  
 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 値のみがサポートされていません。 この値が `styles` パラメーターに含まれている場合、<xref:System.ArgumentException> がスローされます。  
  
   
  
## Examples  
 次の例は、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>、および <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> の値を <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> メソッドの `styles` パラメーターに渡すことによる影響を示しています。  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。  
  
- または - 
 <paramref name="styles" /> は有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。  
  
- または - 
 サポートされていない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> に含まれています。  
  
- または - 
 同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> に含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
- または - 
 <paramref name="input" /> に日付または時刻のないオフセット値の文字列形式が含まれています。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="format"><paramref name="input" /> の有効な書式を定義する書式指定子。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式とカルチャ固有の書式情報を使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns><paramref name="format" /> と <paramref name="formatProvider" /> で指定された <paramref name="input" /> に格納される日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> メソッドは、日付の文字列形式を解析します。これは、`format` パラメーターで定義された形式である必要があります。 また、日付と時刻の文字列形式の要素を \<によって指定された順序で表示されるように、\<日付 >、\<時刻 >、および > オフセットが必要です。`format` `input` 文字列がこの `format` パラメーターと一致しない場合、メソッドは <xref:System.FormatException>をスローします。  これに対し、<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドは、書式プロバイダーの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトによって認識される形式のいずれかで、日付の文字列形式を解析します。 <xref:System.DateTimeOffset.Parse%2A> では、日付と時刻の文字列形式の要素を任意の順序で表示するために、\<日付 >、\<時 >、および \<オフセットを使用することもできます。  
  
 `format` パラメーターは、1つの標準書式指定子、または `input` パラメーターの必要な書式を定義する1つ以上のカスタム書式指定子のいずれかを含む文字列です。 有効な書式指定コードの詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。 `format` に `z`、`zz`、または `zzz` カスタム書式指定子が含まれている場合は、オフセットが `input`に存在する必要があることを示すため、そのオフセットには負の符号または正の符号を含める必要があります。 符号が指定されていない場合、メソッドは <xref:System.FormatException>をスローします。  
  
 `format` で、`input` に日付が含まれている必要がありますが、時刻が指定されていない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには深夜0時 (0:00:00) が割り当てられます。 `format` が時刻を含み、日付が含まれていない `input` ことが要求された場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには、ローカルシステムの現在の日付が割り当てられます。 `format` がオフセットを含む `input` を必要としない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには、ローカルシステムのタイムゾーンオフセットが割り当てられます。  
  
 `input` で使用される特定の日付と時刻の記号および文字列は、`formatProvider` パラメーターによって定義されます。これは、`format` が標準書式指定子の文字列である場合の `input` の正確な形式です。 `formatProvider` パラメーターには、次のいずれかを指定できます。  
  
-   `input` が解釈されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは `input`のシンボルと書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 `formatprovider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを標準およびカスタムの書式指定子とインバリアントカルチャを使用して、複数の日付と時刻の文字列を解析します。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  

次の例では、 [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)に準拠していると想定される文字列の配列を解析します。 この例の出力に示すように、範囲外の日付と時刻の要素を含む文字列として、先頭または末尾のスペースを含む文字列は正常に解析できません。

[!code-csharp[Parsing an ISO 8601 string](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601.cs)]
[!code-vb[Parsing an ISO 8601 string](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="format" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> が空の文字列 ("") です。  
  
- または - 
 <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
- または - 
 <paramref name="format" /> が空の文字列です。  
  
- または - 
<paramref name="input" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]では、解析対象の文字列に1時間の部分と、アグリーメントに含まれていない AM/PM 指定子が含まれている場合、<see cref="Overload:System.DateTimeOffset.ParseExact" /> メソッドは <see cref="T:System.FormatException" /> をスローします。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="input">日付と時刻を表す文字範囲です。</param>
        <param name="format"><paramref name="input" /> の有効な書式を定義する書式指定子を含む文字範囲です。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles"><paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、日付と時刻を表す文字範囲を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 日付と時刻を表すための書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns><paramref name="format" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の各パラメーターで指定された書式に従って表記された、<paramref name="input" /> パラメーターに含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

このメソッドは、日付を表す文字範囲を解析します。これは、`format` パラメーターで定義された形式である必要があります。 また、日付と時刻の文字列形式の要素を \<によって指定された順序で表示されるように、\<日付 >、\<時刻 >、および > オフセットが必要です。`format` `input` が `format` パターンと一致しない場合、メソッドは <xref:System.FormatException>をスローします。  これに対し、<xref:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> メソッドは、書式プロバイダーの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトによって認識される形式のいずれかで、日付の文字列形式を解析します。 <xref:System.DateTimeOffset.Parse%2A> では、日付と時刻の文字列形式の要素を任意の順序で表示するために、\<日付 >、\<時 >、および \<オフセットを使用することもできます。  
  
 `format` パラメーターは、1文字の標準書式指定子、または `input` パラメーターの必要な書式を定義する1つ以上のカスタム書式指定子を含む文字範囲です。 有効な書式指定コードの詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。 `format` に `z`、`zz`、または `zzz` カスタム書式指定子が含まれている場合は、オフセットが `input`に存在する必要があることを示すため、そのオフセットには負の符号または正の符号を含める必要があります。 符号が指定されていない場合、メソッドは <xref:System.FormatException>をスローします。  
  
 `format` で、`input` に日付が含まれている必要がありますが、時刻が指定されていない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには深夜0時 (0:00:00) が割り当てられます。 `format` が時刻を含み、日付が含まれていない `input` ことが要求された場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには、ローカルシステムの現在の日付が割り当てられます。 `format` がオフセットを含む `input` を必要としない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには、ローカルシステムのタイムゾーンオフセットが割り当てられます。  
  
 `input` で使用される特定の日付と時刻の記号および文字列は、`formatProvider` パラメーターによって定義されます。これは、`format` が標準書式指定子である場合の `input` の正確な形式です。 `formatProvider` パラメーターには、次のいずれかを指定できます。  
  
-   `input` が解釈されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは `input`のシンボルと書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 `formatprovider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。  
- または -  
サポートされていない値が <paramref name="styles" /> パラメーターに含まれています。  
- または -  
同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> パラメーターに含まれています。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> は空の文字範囲です。  
 または、<paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
 または、<paramref name="format" /> は空の文字範囲です。  
 - または -  
 <paramref name="input" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="input">変換する日付と時刻を含む文字範囲。</param>
        <param name="formats"><paramref name="input" /> の有効な書式を定義する書式指定子の配列。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles"><paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、日付と時刻の文字列表現を含む文字範囲を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 日付と時刻を表すための書式は、指定した書式のいずれかと完全に一致する必要があります。</summary>
        <returns><paramref name="formats" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の各パラメーターで指定された書式に従って表記された、<paramref name="input" /> パラメーターに含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
このメソッドは、`formats` パラメーターに割り当てられているパターンのいずれかと一致する日付を表す文字範囲を解析します。 `input` が、`styles` パラメーターで定義されたいずれのバリエーションとも一致しない場合、メソッドは <xref:System.FormatException>をスローします。 `input` と複数の書式設定パターンを比較する以外に、このオーバーロードは <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> メソッドと同じように動作します。  
  
 `formats` パラメーターは、単一の標準書式指定子、または `input` パラメーターのパターンを定義する1つ以上のカスタム書式指定子を含む要素を持つ文字列配列です。 メソッドが呼び出された場合、`input` は、これらのパターンのいずれかと一致する必要があります。 有効な書式指定コードの詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。 `formats` 内の一致する要素に `z`、`zz`、または `zzz` カスタム書式指定子が含まれている場合は、オフセットが `input`に存在する必要があることを示すために、そのオフセットには負の符号または正の符号を含める必要があります。 符号が指定されていない場合、メソッドは <xref:System.FormatException>をスローします。  
  
> [!IMPORTANT]
>  このオーバーロードの `formats` パラメーターを使用して複数の形式を指定すると、日付と時刻を入力したときの多くのユーザーエクスペリエンスのストレスを軽減するのに役立ちます。 特に、複数の入力パターンを定義する機能により、アプリケーションでは、月、日、時間、分、秒の先頭にゼロを含めるか、または指定しない日付と時刻の表現を処理することができます。
  
 `formats` 内の一致する要素で、`input` に日付が含まれている必要がありますが、時刻は含まれていない場合、生成される <xref:System.DateTimeOffset> オブジェクトには深夜0時 (0:00:00) が割り当てられます。 `input` `formats` 内の一致する要素が時刻を含み、日付が含まれていない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには、ローカルシステムの現在の日付が割り当てられます。 `formats` 内の一致する要素がオフセットを含む `input` を必要としない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトのオフセットは `styles` パラメーターの値によって決まります。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal>が含まれている場合は、ローカルタイムゾーンのオフセットが <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeUniversal>が含まれている場合は、世界協定時刻 (UTC) のオフセットまたは + 00:00 が <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 どちらの値も指定しない場合は、ローカルタイムゾーンのオフセットが使用されます。  
  
 `input` で使用される特定の日付と時刻のシンボルおよび文字列は、`formatProvider` パラメーターによって定義されます。 `formats` の一致する要素が標準書式指定子の文字列である場合も、`input`の正確な形式に当てはまります。 `formatProvider` パラメーターには、次のいずれかを指定できます。  
  
-   `input` が解釈されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは `input`のシンボルと書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 `formatprovider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 `styles` パラメーターは、入力文字列で空白文字を許可するかどうかを定義し、明示的なオフセットコンポーネントのない文字列を解析して解析操作の一部として UTC 変換をサポートするかどうかを指定します。 <xref:System.Globalization.DateTimeStyles> 列挙のすべてのメンバーは、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>を除き、サポートされます。 次の表に、サポートされている各メンバーの影響を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` を解析し、必要に応じて UTC に変換します。 これは、文字列を解析し、返された <xref:System.DateTimeOffset> オブジェクトの <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> メソッドを呼び出すことと同じです。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|`formats` 内の一致する要素で、`input` にオフセット値が含まれている必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトにローカルタイムゾーンのオフセットが与えられます。 これが既定値です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|`formats` 内の一致する要素で、`input` にオフセット値が含まれている必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトに UTC オフセット (+ 00:00) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|`format`によって指定されていない内部の空白文字を含めることを `input` に許可します。 余分な空白は、日付と時刻のコンポーネントと個々のコンポーネント (オフセットを除く) の間で使用できます。文字列の解析時には無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|`formats`によって指定されていない先頭のスペースを `input` に含めることができるようにします。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|`formats`によって指定されていない末尾のスペースを `input` に含めることができます。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`formats`によって指定されていない先頭、末尾、および内部スペースを含めることを `input` できます。 文字列の解析時に、`formats` 内の一致する要素で指定されていない余分な空白文字はすべて無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|`input`で余分な空白が許可されていないことを示します。 一致と見なされるためには、空白が `formats` の特定の要素で指定されたとおりに表示される必要があります。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset> 構造体に `Kind` プロパティが含まれていないため、効果はありません。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。  
または、サポートされていない値が <paramref name="styles" /> に含まれています。  
- または -  
同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> パラメーターに含まれています。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> は空の文字範囲です。  
または、<paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
- または -  
<paramref name="formats" /> の要素に有効な書式指定子が含まれていません。  
- または -  
<paramref name="input" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="format"><paramref name="input" /> の有効な書式を定義する書式指定子。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles"><paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns><paramref name="format" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の各パラメーターで指定された書式に従って表記された、<paramref name="input" /> パラメーターに含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドは、日付の文字列形式を解析します。これは、`format` パラメーターで定義された形式である必要があります。 また、日付と時刻の文字列形式の要素を \<によって指定された順序で表示されるように、\<日付 >、\<時刻 >、および > オフセットが必要です。`format` `input` 文字列が、`styles` パラメーターで定義されたバリエーションと共に `format` パラメーターのパターンと一致しない場合、メソッドは <xref:System.FormatException>をスローします。  これに対し、<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドは、書式プロバイダーの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトによって認識される形式のいずれかで、日付の文字列形式を解析します。 <xref:System.DateTimeOffset.Parse%2A> では、日付と時刻の文字列形式の要素を任意の順序で表示するために、\<日付 >、\<時 >、および \<オフセットを使用することもできます。  
  
 `format` パラメーターは、1つの標準書式指定子、または `input` パラメーターの必要なパターンを定義する1つ以上のカスタム書式指定子のいずれかを含む文字列です。 有効な書式指定コードの詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。 `format` に `z`、`zz`、または `zzz` カスタム書式指定子が含まれている場合は、オフセットが `input`に存在する必要があることを示すため、そのオフセットには負の符号または正の符号を含める必要があります。 符号が指定されていない場合、メソッドは <xref:System.FormatException>をスローします。  
  
 `format` で、`input` に日付が含まれている必要がありますが、時刻が指定されていない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには深夜0時 (0:00:00) が割り当てられます。 `format` が時刻を含み、日付が含まれていない `input` ことが要求された場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには、ローカルシステムの現在の日付が割り当てられます。 `input` にオフセットが含まれている必要が `format` 場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトのオフセットは `styles` パラメーターの値によって決まります。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal>が含まれている場合は、ローカルタイムゾーンのオフセットが <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeUniversal>が含まれている場合は、世界協定時刻 (UTC) のオフセットまたは + 00:00 が <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 どちらの値も指定しない場合は、ローカルタイムゾーンのオフセットが使用されます。  
  
 `input` で使用される特定の日付と時刻のシンボルおよび文字列は、`formatProvider` パラメーターによって定義されます。 `format` が標準書式指定子の文字列である場合も、`input`の正確な形式に当てはまります。 `formatProvider` パラメーターには、次のいずれかを指定できます。  
  
-   `input` が解釈されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは `input`のシンボルと書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 `formatprovider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 `styles` パラメーターは、入力文字列で空白を許可するかどうかを定義し、明示的なオフセットコンポーネントのない文字列を解析し、解析操作の一部として UTC 変換をサポートするかどうかを指定します。 <xref:System.Globalization.DateTimeStyles> 列挙のすべてのメンバーは、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>を除き、サポートされます。 次の表に、サポートされている各メンバーの影響を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` を解析し、必要に応じて UTC に変換します。 これは、文字列を解析し、返された <xref:System.DateTimeOffset> オブジェクトの <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> メソッドを呼び出すことと同じです。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|`format` がオフセット値を格納 `input` する必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトにローカルタイムゾーンのオフセットが与えられます。 これが既定値です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|`format` がオフセット値を格納 `input` する必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトに UTC オフセット (+ 00:00) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|`format`によって指定されていない内部の空白文字を含めることを `input` に許可します。 余分な空白は、日付と時刻のコンポーネントと個々のコンポーネントの間に表示され、文字列の解析時には無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|`format`によって指定されていない先頭のスペースを `input` に含めることができるようにします。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|`format`によって指定されていない末尾のスペースを `input` に含めることができます。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`format`によって指定されていない先頭、末尾、および内部スペースを含めることを `input` できます。 文字列の解析時に、`format` で指定されていない余分な空白文字はすべて無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|`input`で余分な空白が許可されていないことを示します。 空白は、`format`で指定されたとおりに表示される必要があります。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset> 構造体に `Kind` プロパティが含まれていないため、効果はありません。|  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドを使用して、標準およびカスタムの書式指定子、インバリアントカルチャ、およびさまざまな <xref:System.Globalization.DateTimeStyles> 値を使用して、複数の日付と時刻の文字列を解析します。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  

次の例では、さまざまな <xref:System.Globalization.DateTimeStyles> 値を使用して、 [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)に準拠していると想定される文字列の配列を解析します。 例の出力が示すように、適切な形式の文字列は、次の場合に解析できません。

- これらには空白が含まれており、適切な <xref:System.Globalization.DateTimeStyles> フラグ (<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> などがメソッドの呼び出しで指定されていません。

- 範囲外の日付と時刻の要素が含まれています。

UTC オフセットを指定しない文字列は、メソッド呼び出しで <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> フラグが指定されていない限り、ローカルタイムゾーン (この場合は-07:00) のオフセットを持つと見なされます。 その場合は、世界協定時刻であると見なされます。

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。  
  
- または - 
サポートされていない値が <paramref name="styles" /> パラメーターに含まれています。  
  
- または - 
同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> パラメーターに含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="format" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> が空の文字列 ("") です。  
  
- または - 
 <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
- または - 
 <paramref name="format" /> が空の文字列です。  
  
- または - 
<paramref name="input" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]では、解析対象の文字列に1時間の部分と、アグリーメントに含まれていない AM/PM 指定子が含まれている場合、<see cref="Overload:System.DateTimeOffset.ParseExact" /> メソッドは <see cref="T:System.FormatException" /> をスローします。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formats"><paramref name="input" /> の有効な書式を定義する書式指定子の配列。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles"><paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
        <returns><paramref name="formats" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の各パラメーターで指定された書式に従って表記された、<paramref name="input" /> パラメーターに含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドは、`formats` パラメーターに割り当てられているパターンのいずれかと一致する日付の文字列形式を解析します。 `input` 文字列が、`styles` パラメーターで定義されたいずれのバリエーションとも一致しない場合、メソッドは <xref:System.FormatException>をスローします。 `input` と複数の書式設定パターンを比較する以外に、このオーバーロードは <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドと同じように動作します。  
  
 `formats` パラメーターは、単一の標準書式指定子、または `input` パラメーターのパターンを定義する1つ以上のカスタム書式指定子を含む要素を持つ文字列配列です。 メソッドが呼び出された場合、`input` は、これらのパターンのいずれかと一致する必要があります。 有効な書式指定コードの詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。 `formats` 内の一致する要素に `z`、`zz`、または `zzz` カスタム書式指定子が含まれている場合は、オフセットが `input`に存在する必要があることを示すために、そのオフセットには負の符号または正の符号を含める必要があります。 符号が指定されていない場合、メソッドは <xref:System.FormatException>をスローします。  
  
> [!IMPORTANT]
>  このオーバーロードの `formats` パラメーターを使用して複数の形式を指定すると、日付と時刻を入力したときの多くのユーザーエクスペリエンスのストレスを軽減するのに役立ちます。 特に、複数の入力パターンを定義する機能により、アプリケーションでは、月、日、時間、分、秒の先頭にゼロを含めるか、または指定しない日付と時刻の表現を処理することができます。 この例では、この例を示します。  
  
 `formats` 内の一致する要素で、`input` に日付が含まれている必要がありますが、時刻は含まれていない場合、生成される <xref:System.DateTimeOffset> オブジェクトには深夜0時 (0:00:00) が割り当てられます。 `input` `formats` 内の一致する要素が時刻を含み、日付が含まれていない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには、ローカルシステムの現在の日付が割り当てられます。 `formats` 内の一致する要素がオフセットを含む `input` を必要としない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトのオフセットは `styles` パラメーターの値によって決まります。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal>が含まれている場合は、ローカルタイムゾーンのオフセットが <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeUniversal>が含まれている場合は、世界協定時刻 (UTC) のオフセットまたは + 00:00 が <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 どちらの値も指定しない場合は、ローカルタイムゾーンのオフセットが使用されます。  
  
 `input` で使用される特定の日付と時刻のシンボルおよび文字列は、`formatProvider` パラメーターによって定義されます。 `formats` の一致する要素が標準書式指定子の文字列である場合も、`input`の正確な形式に当てはまります。 `formatProvider` パラメーターには、次のいずれかを指定できます。  
  
-   `input` が解釈されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは `input`のシンボルと書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 `formatprovider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 `styles` パラメーターは、入力文字列で空白文字を許可するかどうかを定義し、明示的なオフセットコンポーネントのない文字列を解析して解析操作の一部として UTC 変換をサポートするかどうかを指定します。 <xref:System.Globalization.DateTimeStyles> 列挙のすべてのメンバーは、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>を除き、サポートされます。 次の表に、サポートされている各メンバーの影響を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` を解析し、必要に応じて UTC に変換します。 これは、文字列を解析し、返された <xref:System.DateTimeOffset> オブジェクトの <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> メソッドを呼び出すことと同じです。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|`formats` 内の一致する要素で、`input` にオフセット値が含まれている必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトにローカルタイムゾーンのオフセットが与えられます。 これが既定値です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|`formats` 内の一致する要素で、`input` にオフセット値が含まれている必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトに UTC オフセット (+ 00:00) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|`format`によって指定されていない内部の空白文字を含めることを `input` に許可します。 余分な空白は、日付と時刻のコンポーネントと個々のコンポーネント (オフセットを除く) の間で使用できます。文字列の解析時には無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|`formats`によって指定されていない先頭のスペースを `input` に含めることができるようにします。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|`formats`によって指定されていない末尾のスペースを `input` に含めることができます。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`formats`によって指定されていない先頭、末尾、および内部スペースを含めることを `input` できます。 文字列の解析時に、`formats` 内の一致する要素で指定されていない余分な空白文字はすべて無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|`input`で余分な空白が許可されていないことを示します。 一致と見なされるためには、空白が `formats` の特定の要素で指定されたとおりに表示される必要があります。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset> 構造体に `Kind` プロパティが含まれていないため、効果はありません。|  
  
   
  
## Examples  
 次の例では、日付と時刻およびオフセット値の文字列形式に対して複数の入力形式を定義し、ユーザーが入力した文字列を <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドに渡します。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが -14 時間より小さいか、14 時間を超えています。  
  
- または - 
 サポートされていない値が <paramref name="styles" /> に含まれています。  
  
- または - 
同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> パラメーターに含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> が空の文字列 ("") です。  
  
- または - 
 <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
- または - 
<paramref name="formats" /> の要素に有効な書式指定子が含まれていません。  
  
- または - 
<paramref name="input" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]では、解析対象の文字列に1時間の部分と、アグリーメントに含まれていない AM/PM 指定子が含まれている場合、<see cref="Overload:System.DateTimeOffset.ParseExact" /> メソッドは <see cref="T:System.FormatException" /> をスローします。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す時刻の秒要素を取得します。</summary>
        <value><see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ～ 59 の整数値で表される秒要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Second%2A> プロパティは、<xref:System.DateTimeOffset.Offset%2A> プロパティの値の影響を受けません。  
  
 また、"s" または "ss" カスタム書式指定子を使用して <xref:System.DateTimeOffset.ToString%2A> メソッドを呼び出すことによって、<xref:System.DateTimeOffset> オブジェクトの2番目のコンポーネントの文字列形式を作成することもできます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset> オブジェクトの2番目のコンポーネントを3つの異なる方法で表示します。  
  
-   <xref:System.DateTimeOffset.Second%2A> プロパティの値を取得する。  
  
-   "S" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
-   "Ss" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトから、指定された時間または期間を減算します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">減算する値を表すオブジェクト。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトから、特定の日時を表す <see cref="T:System.DateTimeOffset" /> 値を減算します。</summary>
        <returns>2 つの <see cref="T:System.DateTimeOffset" /> オブジェクト間の間隔を指定するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、両方の <xref:System.DateTimeOffset> オブジェクトを世界協定時刻 (UTC) に変換してから、それらを分離する時間間隔を計算します。 これにより、UTC からの異なるオフセットによって比較が発生する可能性がなくなります。  
  
> [!NOTE]
>  カスタム演算子をサポートする言語の場合は、減算演算子を使用して日付と時刻の減算を実行することもできます。 詳細については、<xref:System.DateTimeOffset.op_Subtraction%2A> メソッドを参照してください。  
  
 現在の <xref:System.DateTimeOffset> オブジェクトも `value` パラメーターも、特定のタイムゾーンの日付と時刻を表していないので、<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> メソッドでは、日付と時刻を減算するときに特定のタイムゾーンの調整規則は考慮されません。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> メソッドを使用する減算を示しています。  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">減算する時間間隔。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトから、指定された時間間隔を減算します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す日時から、<paramref name="value" /> が表す時間間隔を減算した値と等価なオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Subtract%2A> メソッドを使用すると、1回の操作で複数の種類の時間間隔 (日、時間、分、秒、またはミリ秒) を減算できます。 その動作は、減算演算子を定義する <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29> メソッドと同じです。 <xref:System.DateTimeOffset> 構造体は、メソッドパラメーターに負の値を代入することによって減算を実行できる、<xref:System.DateTimeOffset.AddDays%2A>、<xref:System.DateTimeOffset.AddHours%2A>、<xref:System.DateTimeOffset.AddMinutes%2A>などの特殊な追加メソッドもサポートしています。  
  
> [!NOTE]
>  このメソッドは、新しい <xref:System.DateTimeOffset> オブジェクトを返します。 日付と時刻に `timeSpan` を追加することによって、現在のオブジェクトの値を変更することはありません。  
  
 <xref:System.DateTimeOffset.Subtract%2A> メソッドは、<xref:System.DateTimeOffset> オブジェクトの <xref:System.DateTimeOffset.Offset%2A> プロパティの値には影響しません。 返される <xref:System.DateTimeOffset> オブジェクトは、元のオブジェクトと同じオフセットを持ちます。  
  
 現在の <xref:System.DateTimeOffset> オブジェクトは特定のタイムゾーンの日付と時刻を表していないので、<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29> メソッドは、減算を実行するときに特定のタイムゾーンの調整規則を考慮しません。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTimeOffset.Subtract%2A> メソッドを使用する減算を示しています。  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="dateTimeOffset.System.IComparable.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を同じ型の別のオブジェクトと比較します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが、<paramref name="obj" /> より小さいか大きい、または等しいかどうかを示す 32 ビット符号付き整数。 メソッドの戻り値の意味を次に示します。 
 <list type="table"><listheader><term> 戻り値 
 </term><description> 説明 
 </description></listheader><item><term> 0 より小さい値 
 </term><description> 現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="obj" /> よりも小さい (前の) 日時です。  
  
 </description></item><item><term> 0 
 </term><description> 現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="obj" /> と等価です。つまり、同じ特定の時点を表しています。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description> 現在の <see cref="T:System.DateTimeOffset" /> オブジェクトは <paramref name="obj" /> よりも大きい (後の) 日時です。  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.IDeserializationCallback.OnDeserialization : obj -&gt; unit&#xA;override this.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization : obj -&gt; unit" Usage="dateTimeOffset.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization sender" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sender">コールバックを開始したオブジェクト。 このパラメーターの機能は、現在実装されていません。</param>
        <summary>オブジェクトの逆シリアル化の完了後に実行します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dateTimeOffset.System.Runtime.Serialization.ISerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info">データを読み込む先のオブジェクト。</param>
        <param name="context">このシリアル化のシリアル化先 (<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照)。</param>
        <summary>現在の <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトをシリアル化するために必要なデータを <see cref="T:System.DateTimeOffset" /> オブジェクトに格納します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時を表すタイマー刻み数を取得します。</summary>
        <value><see cref="T:System.DateTimeOffset" /> オブジェクトの時刻のタイマー刻みの数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Ticks%2A> プロパティは、<xref:System.DateTimeOffset.Offset%2A> プロパティの値の影響を受けません。  
  
 <xref:System.DateTimeOffset.Ticks%2A> プロパティの値は、0001年1月1日 (<xref:System.DateTimeOffset.MinValue>の値) に12:00:00 午前0時から経過した100ナノ秒間隔の数を表します。 これには、閏月によって追加されるティックは含まれません。 ナノ秒の10億分は1秒です。1秒間に1000万タイマー刻みがあります。 <xref:System.DateTimeOffset.Ticks%2A> プロパティの値は、`DateTimeOffset.MinValue.Ticks` から `DateTimeOffset.MaxValue.Ticks`までの範囲です。  
  
 <xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29> コンストラクターのオーバーロードを使用して、<xref:System.DateTimeOffset> オブジェクトにタイマー刻みの数を割り当てることができます。  
  
   
  
## Examples  
 次の例では、1:23:07 2008 年7月1日の日付のティック数を概算して <xref:System.DateTimeOffset> オブジェクトを初期化します。 次に、日付とその日付で表されるタイマー刻みの数がコンソールに表示されます。  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの時刻を取得します。</summary>
        <value>現在の日付の午前 0 時からの経過時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TimeOfDay%2A> プロパティは、<xref:System.DateTimeOffset.Offset%2A> プロパティの値の影響を受けません。  
  
 <xref:System.DateTimeOffset.TimeOfDay%2A> プロパティは、<xref:System.DateTimeOffset> オブジェクトの時刻部分を <xref:System.TimeSpan> オブジェクトの形式で返します。 これは、<xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType> プロパティと同じです。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.TimeOfDay%2A> プロパティを使用して時間を抽出し、コンソールに表示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を Windows ファイル時刻に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を Windows ファイル時刻で表した値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻は、64年1月 1601 1 日の午前0時から12:00 に経過した100ナノ秒間隔の数を表すビット値です。 西暦協定世界時 (UTC)。 Windows では、ファイルの作成、アクセス、またはファイルへの書き込みを行うときに、ファイルの時刻が記録されます。  
  
 <xref:System.DateTimeOffset.ToFileTime%2A> メソッドは、変換を実行する前に、現在の <xref:System.DateTimeOffset> オブジェクトの日付と時刻を UTC に変換します。 言い換えると、<xref:System.DateTimeOffset.ToFileTime%2A> メソッドを呼び出すことは、次のメソッド呼び出しに相当します。  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果のファイル時刻は、世界協定時刻 (UTC) の西暦 1601 年 1 月 1 日深夜 12:00 時よりも前の日時を 世界協定時刻 (UTC: Coordinated Universal Time)。</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトを、現地時刻を表す <see cref="T:System.DateTimeOffset" /> オブジェクトに変換します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時を現地時刻に変換した値を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現地時刻への変換では、メソッドは、時刻からオフセットを減算して、現在の <xref:System.DateTimeOffset> オブジェクトの日付と時刻を世界協定時刻 (UTC) に変換します。 次に、ローカルタイムゾーンオフセットを追加して、UTC の日付と時刻を現地時刻に変換します。 これにより、ローカルタイムゾーンの調整規則が考慮されます。  
  
 現在の <xref:System.DateTimeOffset> オブジェクトの値と、メソッドの呼び出しによって返された <xref:System.DateTimeOffset> オブジェクトの値の両方が、同じ時点を表します。 つまり、両方が <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> メソッドに渡されると、メソッドは `true`を返します。  
  
 変換によって <xref:System.DateTimeOffset> 型の範囲外の時間が発生した場合、<xref:System.DateTimeOffset.ToLocalTime%2A> メソッドは、<xref:System.DateTimeOffset.MaxValue> または <xref:System.DateTimeOffset.MinValue> のいずれかに設定された日付と時刻を持ち、オフセットがローカルタイムゾーンオフセットに設定されている <xref:System.DateTimeOffset> オブジェクトを返します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ToLocalTime%2A> メソッドを使用して、<xref:System.DateTimeOffset> 値を太平洋標準時ゾーンの現地時刻に変換します。 また、ローカルタイムゾーンの調整規則に対するメソッドのサポートについても説明します。  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">変換後の <see cref="T:System.DateTimeOffset" /> 値のオフセット。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を、オフセット値で指定された日時に変換します。</summary>
        <returns>元の <see cref="T:System.DateTimeOffset" /> オブジェクトと等しく (つまり、<see cref="M:System.DateTimeOffset.ToUniversalTime" /> メソッドで同じ特定の時点が返される)、かつ、<see cref="P:System.DateTimeOffset.Offset" /> プロパティが <paramref name="offset" /> に設定されているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ToOffset%2A> メソッドは、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> メソッドを呼び出す方法の1つです。 これは、協定世界時 (UTC) からのタイムゾーンのオフセットがわかっている場合に、あるタイムゾーンから別のタイムゾーンへの単純な変換を実行する場合に便利です。 ただし、メソッドの呼び出しによって返された元の <xref:System.DateTimeOffset> オブジェクトも新しい <xref:System.DateTimeOffset> オブジェクトも、特定のタイムゾーンに明確に関連付けられているわけではないため、このメソッドでは、変換にタイムゾーン調整規則は適用されません。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTimeOffset.ToOffset%2A> メソッドを使用して、<xref:System.DateTimeOffset> オブジェクトを別のオフセットを持つ <xref:System.DateTimeOffset> オブジェクトに変換する方法を示しています。  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">結果として得られる <see cref="T:System.DateTimeOffset" /> オブジェクトの <see cref="P:System.DateTimeOffset.DateTime" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。  
  
- または - 
結果として得られる <see cref="T:System.DateTimeOffset" /> オブジェクトの <see cref="P:System.DateTimeOffset.DateTime" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> が -14 時間未満です。  
  
- または - 
 <paramref name="offset" /> が 14 時間を超えています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
        <returns><see cref="T:System.DateTimeOffset" /> オブジェクトの文字列形式。文字列の末尾にオフセットが追加されています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの戻り値は、<xref:System.DateTime.ToString?displayProperty=nameWithType> メソッドの戻り値と同じですが、文字列の末尾にスペースが追加され、その後にオフセットが追加される点が異なります。 つまり、短い日付パターン、長い時間パターン、`zzz` カスタム書式指定文字列を使用して出力を書式設定します。各要素は、前の要素から空白で区切られています。 たとえば、<xref:System.DateTime.ToString?displayProperty=nameWithType> が 1/12/2008 6:15:50 PM の値を返す場合、<xref:System.DateTimeOffset.ToString> は世界協定時刻 (UTC) の8時間後の 1/12/2008 6:15:50 PM-08:00 の値を返します。  
  
 このメソッドは、現在のカルチャから派生した書式設定情報を使用します。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A>」を参照してください。 <xref:System.DateTimeOffset.ToString%2A> メソッドの他のオーバーロードを使用すると、書式設定を使用するカルチャを指定し、<xref:System.DateTimeOffset> 値の出力パターンを定義できます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ToString> メソッドの呼び出しを示し、現在のカルチャが en-us であるシステムでその出力を表示します。  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、現在のカルチャで使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString" /> メソッドは、現在のカルチャで使用されている暦での日付と時刻の文字列形式を返します。 現在の <see cref="T:System.DateTimeOffset" /> インスタンスの値が <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> より前または <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />よりも前の場合、メソッドは <see cref="T:System.ArgumentOutOfRangeException" />をスローします。 具体的な例を次に示します。 現在のカルチャがアラビア語 (シリア) の場合、<see cref="T:System.Globalization.HijriCalendar" /> クラスの範囲外の日付の書式を設定しようとします。  
  
[![ArgumentOutOfRangeException # 2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)] を入力します。[! コード-vb[ArgumentOutOfRangeException # 2]。](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
        <returns><paramref name="formatProvider" /> により指定された、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの戻り値は、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType> メソッドの等価のオーバーロードと同じですが、文字列の末尾にスペースが追加され、その後にオフセットが追加される点が異なります。 つまり、短い日付パターン、長い時間パターン、`zzz` カスタム書式指定文字列を使用して出力を書式設定します。各要素は、前の要素から空白で区切られています。  
  
 これら3つの要素の形式は `formatProvider` パラメーターによって定義されます。 `formatProvider` パラメーターには、次のいずれかを指定できます。  
  
-   返される文字列に書式規則が適用されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、返される文字列の書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 `formatProvider` が `null`場合は、現在のカルチャに関連付けられている <xref:System.Globalization.DateTimeFormatInfo> オブジェクトが使用されます (「<xref:System.Globalization.CultureInfo.CurrentCulture%2A>」を参照してください)。  
  
   
  
## Examples  
 次の例では、インバリアントカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト、およびその他4つのカルチャを使用して、<xref:System.DateTimeOffset> オブジェクトを表示します。  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="formatProvider" /> で使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" /> メソッドは、<paramref name="formatProvider" /> パラメーターによって表されるカルチャによって使用される暦での日付と時刻の文字列形式を返します。 そのカレンダーは、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> プロパティによって定義されます。 現在の <see cref="T:System.DateTimeOffset" /> インスタンスの値が <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> より前または <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />よりも前の場合、メソッドは <see cref="T:System.ArgumentOutOfRangeException" />をスローします。 具体的な例を次に示します。 <see cref="T:System.Globalization.JapaneseCalendar" /> クラスの範囲外の日付の書式を設定しようとします。  
  
[! code-csharp[ArgumentOutOfRangeException # 1]。](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)[! コード-vb[ArgumentOutOfRangeException # 1]。](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">書式指定文字列。</param>
        <summary>指定した書式を使用して、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
        <returns><paramref name="format" /> により指定された、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format` パラメーターには、返される文字列の形式を定義する1つの書式指定子文字 ([標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)を参照) またはカスタム書式パターン (「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照) のいずれかを含める必要があります。 `format` が null または空の文字列 ("") の場合、<xref:System.DateTimeOffset> の値は既定の形式を使用して出力されます。  
  
 次の表は、<xref:System.DateTimeOffset>と共に使用する場合の特定の書式指定子の正確な操作を示しています。これは、<xref:System.DateTime>と共に使用する場合の動作とは異なります。  
  
|既存の書式指定子|新しい動作|  
|-------------------------------|------------------|  
|"K"|日付と時刻をラウンドトリップするように設計されています。 <xref:System.DateTimeOffset>では、は "zzz" にマップされます (オフセットは常に時間と分で表示されます)。 "K" はカスタム書式指定子であることに注意してください。`format`に1つの文字として表示することはできません。|  
|"U"|サポートされていません。|  
|"r"|<xref:System.DateTimeOffset> オブジェクトを世界協定時刻 (UTC) に変換し、`ddd, dd MMM yyyy HH:mm:ss GMT`カスタム書式指定文字列を使用して出力します。|  
|"u"|<xref:System.DateTimeOffset> オブジェクトを UTC に変換し、`yyyy-MM-dd HH:mm:ssZ`形式を使用して出力します。|  
  
 残りの標準日時書式指定子は、<xref:System.DateTime.ToString%2A> メソッドと同様に、<xref:System.DateTimeOffset.ToString%28System.String%29> メソッドでも同じように動作します。  
  
 このメソッドは、現在のカルチャから派生した書式設定情報を使用します。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A>」を参照してください。  
  
   
  
## Examples  
 次の例では、標準の日時書式指定子をそれぞれ使用して、コンソールに <xref:System.DateTimeOffset> オブジェクトを表示します。 出力は en-us カルチャを使用して書式設定されます。  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> の長さは 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> で定義されている標準書式指定子文字の 1 つではありません。  
  
- または - 
 <paramref name="format" /> には有効なカスタム書式パターンがありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、現在のカルチャで使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.String)" /> メソッドは、現在のカルチャで使用されている暦での日付と時刻の文字列形式を返します。 現在の <see cref="T:System.DateTimeOffset" /> インスタンスの値が <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> より前または <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />よりも前の場合、メソッドは <see cref="T:System.ArgumentOutOfRangeException" />をスローします。 具体的な例を次に示します。 現在のカルチャがヘブライ語 (イスラエル) の場合、<see cref="T:System.Globalization.HebrewCalendar" /> クラスの範囲外の日付の書式を設定しようとします。  
  
[! code-csharp[ArgumentOutOfRangeException # 3]。](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)[! コード-vb[ArgumentOutOfRangeException # 3]。](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">書式指定文字列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式およびカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値をそれと等価の文字列形式に変換します。</summary>
        <returns><paramref name="format" /> および <paramref name="provider" /> により指定された、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format` パラメーターには、1つの書式指定子文字 ([標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)を参照) またはカスタム書式パターン (「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照) のいずれかを含める必要があります。 `format` が null または空の文字列 ("") の場合、<xref:System.DateTimeOffset> オブジェクトは既定の形式を使用して出力されます。  
  
 次の表は、<xref:System.DateTimeOffset>と共に使用する場合の特定の書式指定子の正確な操作を示しています。これは、<xref:System.DateTime>と共に使用する場合の動作とは異なります。  
  
|既存の書式指定子|新しい動作|  
|-------------------------------|------------------|  
|"K"|日付と時刻をラウンドトリップするように設計されています。 <xref:System.DateTimeOffset>では、は "zzz" にマップされます (オフセットは常に時間と分で表示されます)。 "K" はカスタム書式指定子であることに注意してください。`format`に1つの文字として表示することはできません。|  
|"U"|サポートされていません。|  
|"r"|<xref:System.DateTimeOffset> オブジェクトを世界協定時刻 (UTC) に変換し、`ddd, dd MMM yyyy HH:mm:ss GMT`カスタム書式指定文字列を使用して出力します。|  
|"u"|<xref:System.DateTimeOffset> 値を UTC に変換し、`yyyy-MM-dd HH:mm:ssZ`形式を使用して出力します。|  
  
 残りの標準日時書式指定子は、<xref:System.DateTime.ToString%2A> メソッドと同様に、<xref:System.DateTimeOffset.ToString%28System.String%29> メソッドでも同じように動作します。  
  
 標準書式指定子に対応するパターン、および日付と時刻のコンポーネントのシンボルと名前は、`formatProvider` パラメーターによって定義されます。 `formatProvider` パラメーターには、次のいずれかを指定できます。  
  
-   書式設定が `input`で使用されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、`input`で使用される書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 `formatProvider` が `null`場合は、現在のカルチャに関連付けられている <xref:System.Globalization.DateTimeFormatInfo> オブジェクトが使用されます (「<xref:System.Globalization.CultureInfo.CurrentCulture%2A>」を参照してください)。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29> メソッドを使用して、複数の異なるカルチャに対してカスタム書式指定文字列を使用して <xref:System.DateTimeOffset> オブジェクトを表示します。  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> の長さは 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> で定義されている標準書式指定子文字の 1 つではありません。  
  
- または - 
 <paramref name="format" /> には有効なカスタム書式パターンがありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="formatProvider" /> で使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" /> メソッドは、<paramref name="formatProvider" /> パラメーターで使用される暦での日付と時刻の文字列形式を返します。 そのカレンダーは、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> プロパティによって定義されます。 現在の <see cref="T:System.DateTimeOffset" /> インスタンスの値が <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> より前または <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />よりも前の場合、メソッドは <see cref="T:System.ArgumentOutOfRangeException" />をスローします。 具体的な例を次に示します。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> クラスの範囲外の日付の書式を設定しようとします。  
  
[! code-csharp[ArgumentOutOfRangeException # 4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)] を入力します。[! コード-vb[ArgumentOutOfRangeException # 4]。](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時形式文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">サンプル: .NET Core WinForms 書式指定ユーティリティC#()</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">サンプル: .NET Core WinForms の書式設定ユーティリティ (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトを、世界協定時刻 (UTC) を表す <see cref="T:System.DateTimeOffset" /> 値に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時を世界協定時刻 (UTC) に変換した値を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.DateTimeOffset.Offset%2A> プロパティが0に設定されている <xref:System.DateTimeOffset> オブジェクトを返します。  
  
 現在の <xref:System.DateTimeOffset> オブジェクトの値と、メソッドの呼び出しによって返された <xref:System.DateTimeOffset> オブジェクトの値の両方が、同じ時点を表します。 つまり、両方が <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> メソッドに渡されると、メソッドは `true`を返します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ToUniversalTime%2A> メソッドを呼び出して、現地時刻と他のいくつかの時刻を世界協定時刻 (UTC) に変換します。  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1970-01-01T00:00:00.000Z からの経過時間をミリ秒で返します。</summary>
        <returns>1970-01-01T00:00:00.000Z からの経過時間 (ミリ秒)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix 時間は、1970-01-01T00:00: 00Z (1970 年1月1日から 12:00 AM UTC) 以降に経過した秒数を表します。 ここでは、うるう年を考慮しません。 このメソッドは、Unix 時間のミリ秒数を返します。  
  
 このメソッドは、最初に現在のインスタンスを UTC に変換してから、その Unix 時間のミリ秒数を返します。 1970-01-01T00:00: 00Z より前の日付と時刻の値の場合、このメソッドは負の値を返します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1970-01-01T00:00:00Z からの経過時間を秒で返します。</summary>
        <returns>1970-01-01T00:00:00Z からの経過時間 (秒)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix 時間は、1970-01-01T00:00: 00Z (1970 年1月1日から 12:00 AM UTC) 以降に経過した秒数を表します。 ここでは、うるう年を考慮しません。  
  
 このメソッドは、最初に現在のインスタンスを UTC に変換してから、Unix 時刻を返します。 1970-01-01T00:00: 00Z より前の日付と時刻の値の場合、このメソッドは負の値を返します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.ToUnixTimeSeconds%2A> メソッドを呼び出して、1970-01-01T00:00: 00Z の直後と直後に等しい値の Unix 時刻を返します。  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider formatProvider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="destination">このメソッドから制御が戻るときは、文字のスパンとして書式設定されているこのインスタンスの値。</param>
        <param name="charsWritten">このメソッドから戻るときに、<paramref name="destination" /> に書き込まれた文字数。</param>
        <param name="format"><paramref name="destination" /> に許容される書式を定義する、標準またはカスタムの書式指定文字列を表す文字を含んでいるスパン。</param>
        <param name="formatProvider"><paramref name="destination" /> のカルチャ固有の書式情報を指定するオプションのオブジェクト。</param>
        <summary>現在の datetime オフセット インスタンスの値の、指定した文字スパンへの書式設定を試みます。</summary>
        <returns>書式設定が正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="input">変換する日付と時刻を表す文字を格納しているスパン。</param>
        <param name="result">このメソッドが戻るときに、変換に成功した場合は <paramref name="input" /> の日時と等しい <see cref="T:System.DateTimeOffset" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <paramref name="input" /> パラメーターが <see langword="null" /> の場合、または、日付と時刻を表す有効な文字列形式が指定されていない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した日付と時刻のスパン表現の、等価の <see cref="T:System.DateTimeOffset" /> への変換を試み、変換に成功したかどうかを示す値を返します。</summary>
        <returns><paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="result">このメソッドが戻るときに、変換に成功した場合は <paramref name="input" /> の日時と等しい <see cref="T:System.DateTimeOffset" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <paramref name="input" /> パラメーターが <see langword="null" /> の場合、または、日付と時刻を表す有効な文字列形式が指定されていない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した文字列表現の日時を対応する <see cref="T:System.DateTimeOffset" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
        <returns><paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> メソッドのこのオーバーロードは、変換に失敗した場合に例外をスローしない点を除いて、<xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType> メソッドに似ています。 このメソッドは、任意の順序で使用でき、空白で区切られた3つの要素で構成される文字列を解析します。 次の表に、これら3つの要素を示します。  
  
|要素|例|  
|-------------|-------------|  
|\<日付 >|"2/10/2007"|  
|\<時刻 >|"1:02:03 PM"|  
|\<オフセット >|"-7:30"|  
  
 これらの各要素は省略可能ですが、\<オフセット > を単独で表示することはできません。 \<Date > または \<Time > と共に指定する必要があります。 \<日付 > が指定されていない場合は、その既定値が現在の日付になります。 \<日付 > が存在するが、その年の部分が2桁のみで構成されている場合、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> プロパティの値に基づいて、現在のカルチャの現在の暦で年に変換されます。 \<時間 > が指定されていない場合、既定値は 12:00:00 AM です。 \<オフセット > が指定されていない場合、既定値はローカルタイムゾーンのオフセットになります。 \<オフセット > が存在する場合は、世界協定時刻 (UTC) からの負または正のオフセットを表すことができます。 どちらの場合も、\<オフセット > には記号を含める必要があります。そうしないと、メソッドは `false`を返します。  
  
 `input` 文字列は、現在のカルチャに対して初期化された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの書式情報を使用して解析されます。 現在のカルチャのものと必ずしも一致しない、指定された書式設定を含む文字列を解析するには、<xref:System.DateTimeOffset.TryParseExact%2A> メソッドを使用して、書式指定子を指定します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> メソッドを呼び出して、さまざまな日付と時刻の書式を持つ複数の文字列を解析します。  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">サンプル: .NET Core WinForms 書式指定ユーティリティC#()</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">サンプル: .NET Core WinForms の書式設定ユーティリティ (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="input">変換する日付と時刻を表す文字を含むスパン。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles"><paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</param>
        <param name="result">このメソッドが戻る時に、変換に成功した場合は、<see cref="T:System.DateTimeOffset" /> の日時と等しい <paramref name="input" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <paramref name="input" /> パラメーターが <see langword="null" /> の場合、または、日付と時刻を表す有効な文字列形式が指定されていない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した日付と時刻のスパン表現の、等価の <see cref="T:System.DateTimeOffset" /> への変換を試み、変換に成功したかどうかを示す値を返します。</summary>
        <returns><paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles"><paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</param>
        <param name="result">このメソッドが戻る時に、変換に成功した場合は、<see cref="T:System.DateTimeOffset" /> の日時と等しい <paramref name="input" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <paramref name="input" /> パラメーターが <see langword="null" /> の場合、または、日付と時刻を表す有効な文字列形式が指定されていない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した文字列形式の日時を対応する <see cref="T:System.DateTimeOffset" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
        <returns><paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> メソッドのこのオーバーロードは、変換に失敗した場合に例外をスローしない点を除いて、<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドに似ています。 メソッドは、任意の順序で使用でき、空白で区切られた3つの要素を含む文字列を解析します。 次の表に、これら3つの要素を示します。  
  
|要素|例|  
|-------------|-------------|  
|\<日付 >|"2/10/2007"|  
|\<時刻 >|"1:02:03 PM"|  
|\<オフセット >|"-7:30"|  
  
 これらの各要素は省略可能ですが、\<オフセット > を単独で表示することはできません。 \<Date > または \<Time > と共に指定する必要があります。 \<日付 > が指定されていない場合は、その既定値が現在の日付になります。 \<日付 > が存在するが、その年の部分が2桁のみで構成されている場合、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> プロパティの値に基づいて、`provider` パラメーターの現在の暦で年に変換されます。 \<時間 > が指定されていない場合、既定値は 12:00:00 AM です。 \<オフセット > が存在しない場合、既定値はローカルタイムゾーンのオフセット、または <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> で <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> または `styles`のいずれかの値が指定されている場合は <xref:System.TimeSpan.Zero> になります。 \<オフセット > が存在する場合は、世界協定時刻 (UTC) からの負または正のオフセットを表すことができます。 どちらの場合も、\<オフセット > には記号を含める必要があります。そうしないと、メソッドは `false`を返します。  
  
 `input` 文字列は、`formatProvider` パラメーターによって提供される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトでカルチャ固有の書式情報を使用して解析されます。 `formatProvider` パラメーターには、次のいずれかを指定できます。  
  
-   書式設定が `input`で使用されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、`input`で使用される形式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 また、各要素は先頭または末尾の空白で区切ることができ、\<Date > と \<Time > コンポーネントには内側の空白 (6: 00:00 など) を含めることができます。 内部の空白を含めることができるのは、\<オフセット > コンポーネントのみです。  
  
 `provider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 \<オフセット > で使用される正または負の符号は、+ または-のいずれかである必要があります。 これは、`formatprovider` パラメーターの <xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティによって返される <xref:System.Globalization.NumberFormatInfo> オブジェクトの <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> または <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> プロパティによって定義されていません。  
  
 <xref:System.Globalization.DateTimeStyles> 列挙体の次のメンバーがサポートされています。  
  
|DateTimeStyles メンバー|コメント|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` によって表される文字列を解析し、必要に応じて UTC に変換します。 これは、文字列を解析し、返されたオブジェクトの <xref:System.DateTimeOffset.ToUniversalTime> メソッドを呼び出すことと同じです。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|有効ですが、この値は無視されます。 内部の空白は、\<日付 > と \<時刻 > コンポーネントで使用できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|有効ですが、この値は無視されます。 先頭の空白文字は、解析された文字列内の各コンポーネントの前に使用できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|有効ですが、この値は無視されます。 末尾の空白文字は、解析された文字列内の各コンポーネントの前に使用できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|これが既定の動作です。 <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>など、より制限の厳しい <xref:System.Globalization.DateTimeStyles> 列挙値を指定することによってオーバーライドすることはできません。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|`input` パラメーターに \<オフセット > 要素がない場合に、ローカルタイムゾーンのオフセットを指定する必要があることを示します。 これは、<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> メソッドの既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|`input` パラメーターに \<オフセット > 要素がない場合、UTC オフセット (00:00) を指定する必要があることを示します。|  
|<xref:System.Globalization.DateTimeStyles.None>|有効ですが、この値は無視され、効果はありません。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset> 構造体には `Kind` プロパティが含まれていないため、この値は無効です。|  
  
 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 値のみがサポートされていません。 この値が `styles` パラメーターに含まれている場合、<xref:System.ArgumentException> がスローされます。  
  
   
  
## Examples  
 次の例では、さまざまな <xref:System.Globalization.DateTimeStyles> 値を使用して <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> メソッドを呼び出し、さまざまな日付と時刻の書式を使用して一部の文字列を解析します。  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
  
- または - 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
  
- または - 
 <paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="input">変換する日付と時刻を表す文字を含むスパン。</param>
        <param name="format"><paramref name="input" /> の必要な形式を定義する形式指定子。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles"><paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <param name="result">このメソッドが戻るときに、変換に成功した場合は <paramref name="input" /> の日時と等しい <see cref="T:System.DateTimeOffset" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 次の場合、変換は失敗します</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、文字範囲に含まれる日付と時刻の表現を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 日付と時刻を表すための書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns><paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

このオーバーロードは <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> メソッドに似ていますが、変換に失敗した場合に、このメソッドが例外をスローしない点が異なります。 このメソッドは、`format` パラメーターで指定されたパターンと正確に一致する必要がある日付と時刻の表現を解析します。 `input` がこのパターンに一致しない場合、`styles` パラメーターによって定義された空白文字のバリエーションがあると、解析操作は失敗し、メソッドは `false`を返します。  
  
`format` パラメーターは、1つの標準書式指定子、または必要な `input`のパターンを定義する1つ以上のカスタム書式指定子のいずれかを含む文字範囲です。 有効な書式指定コードの詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。 `format` に `z`、`zz`、または `zzz` カスタム書式指定子が含まれている場合は、オフセットが `input`に存在する必要があることを示すため、そのオフセットには負の符号または正の符号を含める必要があります。 符号が指定されていない場合、解析操作は失敗し、メソッドは `false`を返します。  
  
`format` で、`input` に日付が含まれている必要がありますが、時刻が指定されていない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには深夜0時 (0:00:00) が割り当てられます。 `format` が時刻を含み、日付が含まれていない `input` ことが要求された場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには、ローカルシステムの現在の日付が割り当てられます。 `input` にオフセットが含まれている必要が `format` 場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトのオフセットは `styles` パラメーターの値によって決まります。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal>が含まれている場合は、ローカルタイムゾーンのオフセットが <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeUniversal>が含まれている場合は、世界協定時刻 (UTC) のオフセットまたは + 00:00 が <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 どちらの値も指定しない場合は、ローカルタイムゾーンのオフセットが使用されます。  
  
`input` で使用される特定の日付と時刻のシンボルおよび文字列は、`formatProvider` パラメーターによって定義されます。 これは、`format` が標準書式指定子の文字列の場合に `input` の正確なパターンにも当てはまります。 `formatProvider` パラメーターには、次のいずれかを指定できます。  
  
-   `input` が解釈されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、`input`で使用できるシンボルと標準形式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 `formatprovider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 `styles` パラメーターは、入力文字列で空白を許可するかどうかを定義し、明示的なオフセットコンポーネントのない文字列を解析し、解析操作の一部として UTC 変換をサポートするかどうかを指定します。 <xref:System.Globalization.DateTimeStyles> 列挙のすべてのメンバーは、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>を除き、サポートされます。 次の表に、サポートされている各メンバーの影響を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` を解析し、必要に応じて UTC に変換します。 これは、日付と時刻の表現を解析し、返された <xref:System.DateTimeOffset> オブジェクトの <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> メソッドを呼び出すことと同じです。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|`format` がオフセット値を格納 `input` する必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトにローカルタイムゾーンのオフセットが与えられます。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|`format` がオフセット値を格納 `input` する必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトに UTC オフセット (+ 00:00) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|形式で指定されていない内部の空白を含めることを `input` できます。 余分な空白は、日付と時刻のコンポーネントの間、およびオフセット以外の個々のコンポーネント内で使用でき、文字列の解析時には無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|`format`によって指定されていない先頭のスペースを `input` に含めることができるようにします。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|`format`によって指定されていない末尾のスペースを `input` に含めることができます。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`format`によって指定されていない先頭、末尾、および内部スペースを含めることを `input` できます。 文字列の解析時に、`format` で指定されていない余分な空白文字はすべて無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|`input`で余分な空白が許可されていないことを示します。 空白は、`format`で指定されたとおりに表示される必要があります。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset> 構造体に `Kind` プロパティが含まれていないため、効果はありません。|  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
または、<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
または、<paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="input">変換する日付と時刻を表す文字を含むスパン。</param>
        <param name="formats"><paramref name="input" /> に許容される書式を定義する標準またはカスタムの書式指定文字列の配列。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles"><paramref name="input" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <param name="result">このメソッドが戻るときに、変換に成功した場合は <paramref name="input" /> の日時と等しい <see cref="T:System.DateTimeOffset" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 次の場合、変換は失敗します</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、文字スパンによる日付と時刻の表現を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 日付と時刻を表すための書式は、指定した書式のいずれかと完全に一致する必要があります。</summary>
        <returns><paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
 
このメソッドは、`formats` 配列に割り当てられているパターンのいずれかと一致する日付の文字列形式を解析します。 `input` が、`styles` パラメーターで定義されているどのバリエーションとも一致しない場合、解析操作は失敗し、メソッドは `false`を返します。 `input` と書式指定子を含む複数の文字列を比較する以外に、このオーバーロードは <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> メソッドと同じように動作します。  
  
 `formats` パラメーターは、単一の標準書式指定子または `input`のパターンを定義する1つ以上のカスタム書式指定子のいずれかを要素に含む文字列配列です。 有効な書式指定コードの詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。 `formats` 内の一致する要素に `z`、`zz`、または `zzz` カスタム書式指定子が含まれている場合は、オフセットが `input`に存在する必要があることを示すために、そのオフセットには負の符号または正の符号を含める必要があります。 符号が指定されていない場合、解析操作は失敗し、メソッドは `false`を返します。  
  
> [!IMPORTANT]
>  このオーバーロードの `formats` パラメーターを使用して複数の形式を指定すると、日付と時刻を入力したときの多くのユーザーエクスペリエンスのストレスを軽減するのに役立ちます。 特に、複数の入力パターンを定義する機能により、アプリケーションでは、月、日、時間、分、秒の先頭にゼロを含めるか、または指定しない日付と時刻の表現を処理することができます。 この例では、この例を示します。  
  
 `formats` 内の一致する要素で、`input` に日付が含まれている必要がありますが、時刻は含まれていない場合、生成される <xref:System.DateTimeOffset> オブジェクトには深夜0時 (0:00:00) が割り当てられます。 `formats` 内の一致する要素が、入力に時刻が含まれている必要がありますが、日付が含まれていない場合、結果の <xref:System.DateTimeOffset> オブジェクトには、ローカルシステムの現在の日付が割り当てられます。 `formats` 内の一致する要素がオフセットを含む `input` を必要としない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトのオフセットは `styles` パラメーターの値によって決まります。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>が含まれている場合は、ローカルタイムゾーンのオフセットが <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>が含まれている場合は、世界協定時刻 (UTC) のオフセットまたは + 00:00 が <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 どちらの値も指定しない場合は、ローカルタイムゾーンのオフセットが使用されます。  
  
 `input` で使用される特定の日付と時刻のシンボルは、`formatProvider` パラメーターによって定義されます。 `formats` の一致する要素が標準書式指定子の文字列の場合も、`input` の正確なパターンに当てはまります。 `formatProvider` パラメーターには、次のいずれかを指定できます。  
  
-   `input` が解釈されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは `input`のシンボルと書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 `formatprovider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 `styles` パラメーターは、入力文字列で空白文字を許可するかどうかを定義し、明示的なオフセットコンポーネントのない文字列を解析して解析操作の一部として UTC 変換をサポートするかどうかを指定します。 <xref:System.Globalization.DateTimeStyles> 列挙のすべてのメンバーは、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>を除き、サポートされます。 次の表に、サポートされている各メンバーの影響を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` を解析し、必要に応じて UTC に変換します。 これは、文字列を解析し、返された <xref:System.DateTimeOffset> オブジェクトの <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> メソッドを呼び出すことと同じです。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|`formats` 内の一致する要素で、`input` にオフセット値が含まれている必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトにローカルタイムゾーンのオフセットが与えられます。 これが既定値です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|`formats` 内の一致する要素で、`input` にオフセット値が含まれている必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトに UTC オフセット (+ 00:00) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|`formats`内の要素によって指定されていない内部の空白を含めることを `input` できます。 余分な空白は、日付と時刻のコンポーネントと個々のコンポーネント (オフセットを除く) の間で使用でき、文字列の解析時には無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|`formats`内の要素によって指定されていない先頭のスペースを `input` に含めることができるようにします。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|`formats`内の要素によって指定されていない末尾のスペースを含めることを `input` できます。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`formats`内の要素によって指定されていない先頭、末尾、および内部スペースを含めることを `input` できます。 文字列の解析時に、`formats` 内の一致する要素で指定されていない余分な空白文字はすべて無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|`input`で余分な空白が許可されていないことを示します。 一致が正常に行われるようにするには、空白を `formats` の特定の要素で指定されたとおりに表示する必要があります。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset> 構造体に `Kind` プロパティが含まれていないため、効果はありません。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
または、<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
または、<paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="format"><paramref name="input" /> の必要な形式を定義する形式指定子。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">input に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see langword="None" /> です。</param>
        <param name="result">このメソッドが戻るときに、変換に成功した場合は <paramref name="input" /> の日時と等しい <see cref="T:System.DateTimeOffset" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <paramref name="input" /> パラメーターが <see langword="null" /> の場合、または、指定された日時の文字列形式が <paramref name="format" /> と <c>provider</c> で定義された書式に従っていない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns><paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> メソッドのこのオーバーロードは、変換に失敗した場合にこのメソッドが例外をスローしない点を除いて、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドに似ています。 このメソッドは、`format` パラメーターで指定されたパターンと正確に一致する必要がある日付と時刻の文字列形式を解析します。 `input` 文字列が、このパターンに一致しない場合、`styles` パラメーターによって定義された空白文字のバリエーションがあると、解析操作は失敗し、メソッドは `false`を返します。  
  
 `format` パラメーターは、1つの標準書式指定子、または必要な `input`のパターンを定義する1つ以上のカスタム書式指定子のいずれかを含む文字列です。 有効な書式指定コードの詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。 `format` に `z`、`zz`、または `zzz` カスタム書式指定子が含まれている場合は、オフセットが `input`に存在する必要があることを示すため、そのオフセットには負の符号または正の符号を含める必要があります。 符号が指定されていない場合、解析操作は失敗し、メソッドは `false`を返します。  
  
 `format` で、`input` に日付が含まれている必要がありますが、時刻が指定されていない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには深夜0時 (0:00:00) が割り当てられます。 `format` が時刻を含み、日付が含まれていない `input` ことが要求された場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトには、ローカルシステムの現在の日付が割り当てられます。 `input` にオフセットが含まれている必要が `format` 場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトのオフセットは `styles` パラメーターの値によって決まります。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal>が含まれている場合は、ローカルタイムゾーンのオフセットが <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeUniversal>が含まれている場合は、世界協定時刻 (UTC) のオフセットまたは + 00:00 が <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 どちらの値も指定しない場合は、ローカルタイムゾーンのオフセットが使用されます。  
  
 `input` で使用される特定の日付と時刻のシンボルおよび文字列は、`formatProvider` パラメーターによって定義されます。 これは、`format` が標準書式指定子の文字列の場合に `input` の正確なパターンにも当てはまります。 `formatProvider` パラメーターには、次のいずれかを指定できます。  
  
-   `input` が解釈されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、`input`で使用できるシンボルと標準形式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 `formatprovider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 `styles` パラメーターは、入力文字列で空白を許可するかどうかを定義し、明示的なオフセットコンポーネントのない文字列を解析し、解析操作の一部として UTC 変換をサポートするかどうかを指定します。 <xref:System.Globalization.DateTimeStyles> 列挙のすべてのメンバーは、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>を除き、サポートされます。 次の表に、サポートされている各メンバーの影響を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` を解析し、必要に応じて UTC に変換します。 これは、文字列を解析し、返された <xref:System.DateTimeOffset> オブジェクトの <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> メソッドを呼び出すことと同じです。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|`format` がオフセット値を格納 `input` する必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトにローカルタイムゾーンのオフセットが与えられます。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|`format` がオフセット値を格納 `input` する必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトに UTC オフセット (+ 00:00) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|形式で指定されていない内部の空白を含めることを `input` できます。 余分な空白は、日付と時刻のコンポーネントの間、およびオフセット以外の個々のコンポーネント内で使用でき、文字列の解析時には無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|`format`によって指定されていない先頭のスペースを `input` に含めることができるようにします。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|`format`によって指定されていない末尾のスペースを `input` に含めることができます。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`format`によって指定されていない先頭、末尾、および内部スペースを含めることを `input` できます。 文字列の解析時に、`format` で指定されていない余分な空白文字はすべて無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|`input`で余分な空白が許可されていないことを示します。 空白は、`format`で指定されたとおりに表示される必要があります。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset> 構造体に `Kind` プロパティが含まれていないため、効果はありません。|  
  
## Examples 

 次の例では、<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> メソッドを使用して、標準およびカスタムの書式指定子、インバリアントカルチャ、およびさまざまな <xref:System.Globalization.DateTimeStyles> 値を使用して、複数の日付と時刻の文字列を解析します。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  

次の例では、さまざまな <xref:System.Globalization.DateTimeStyles> 値を使用して、 [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)に準拠していると想定される文字列の配列を解析します。 例の出力が示すように、適切な形式の文字列は、次の場合に解析できません。

- これらには空白が含まれており、適切な <xref:System.Globalization.DateTimeStyles> フラグ (<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> などがメソッドの呼び出しで指定されていません。

- 範囲外の日付と時刻の要素が含まれています。

UTC オフセットを指定しない文字列は、メソッドの呼び出しで <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> フラグが指定されていない限り、ローカルタイムゾーンのオフセット (この例では、太平洋標準時ゾーンのオフセットを反映する-07:00) を使用していると見なされます。 その場合は、世界協定時刻であると見なされます。

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.vb)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
  
- または - 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
  
- または - 
 <paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]では、解析対象の文字列に1時間の部分と、アグリーメントに含まれていない AM/PM 指定子が含まれている場合、<see cref="Overload:System.DateTimeOffset.TryParseExact" /> は <see langword="false" /> を返します。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formats"><paramref name="input" /> の有効な書式を定義する配列。</param>
        <param name="formatProvider"><paramref name="input" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">input に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see langword="None" /> です。</param>
        <param name="result">このメソッドが戻るときに、変換に成功した場合は <paramref name="input" /> の日時と等しい <see cref="T:System.DateTimeOffset" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。 <paramref name="input" /> が正しい文字列形式の日時を含んでいない場合、<paramref name="format" /> で定義された書式に従う日時が含まれていない場合、または、<paramref name="formats" /> が <see langword="null" /> の場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式の配列、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
        <returns><paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> メソッドは、`formats` 配列に割り当てられているパターンのいずれかと一致する日付の文字列形式を解析します。 `input` 文字列が、`styles` パラメーターで定義されているどのバリエーションとも一致しない場合、解析操作は失敗し、メソッドは `false`を返します。 `input` と書式指定子を含む複数の文字列を比較する以外に、このオーバーロードは <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドと同じように動作します。  
  
 `formats` パラメーターは、単一の標準書式指定子または `input`のパターンを定義する1つ以上のカスタム書式指定子のいずれかを要素に含む文字列配列です。 有効な書式指定コードの詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。 `formats` 内の一致する要素に `z`、`zz`、または `zzz` カスタム書式指定子が含まれている場合は、オフセットが `input`に存在する必要があることを示すために、そのオフセットには負の符号または正の符号を含める必要があります。 符号が指定されていない場合、解析操作は失敗し、メソッドは `false`を返します。  
  
> [!IMPORTANT]
>  このオーバーロードの `formats` パラメーターを使用して複数の形式を指定すると、日付と時刻を入力したときの多くのユーザーエクスペリエンスのストレスを軽減するのに役立ちます。 特に、複数の入力パターンを定義する機能により、アプリケーションでは、月、日、時間、分、秒の先頭にゼロを含めるか、または指定しない日付と時刻の表現を処理することができます。 この例では、この例を示します。  
  
 `formats` 内の一致する要素で、`input` に日付が含まれている必要がありますが、時刻は含まれていない場合、生成される <xref:System.DateTimeOffset> オブジェクトには深夜0時 (0:00:00) が割り当てられます。 `formats` 内の一致する要素が、入力に時刻が含まれている必要がありますが、日付が含まれていない場合、結果の <xref:System.DateTimeOffset> オブジェクトには、ローカルシステムの現在の日付が割り当てられます。 `formats` 内の一致する要素がオフセットを含む `input` を必要としない場合、結果として得られる <xref:System.DateTimeOffset> オブジェクトのオフセットは `styles` パラメーターの値によって決まります。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal>が含まれている場合は、ローカルタイムゾーンのオフセットが <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 `styles` に <xref:System.Globalization.DateTimeStyles.AssumeUniversal>が含まれている場合は、世界協定時刻 (UTC) のオフセットまたは + 00:00 が <xref:System.DateTimeOffset> オブジェクトに割り当てられます。 どちらの値も指定しない場合は、ローカルタイムゾーンのオフセットが使用されます。  
  
 `input` で使用される特定の日付と時刻のシンボルおよび文字列は、`formatProvider` パラメーターによって定義されます。 `formats` の一致する要素が標準書式指定子の文字列の場合も、`input` の正確なパターンに当てはまります。 `formatProvider` パラメーターには、次のいずれかを指定できます。  
  
-   `input` が解釈されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは `input`のシンボルと書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
 `formatprovider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 `styles` パラメーターは、入力文字列で空白文字を許可するかどうかを定義し、明示的なオフセットコンポーネントのない文字列を解析して解析操作の一部として UTC 変換をサポートするかどうかを指定します。 <xref:System.Globalization.DateTimeStyles> 列挙のすべてのメンバーは、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>を除き、サポートされます。 次の表に、サポートされている各メンバーの影響を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` を解析し、必要に応じて UTC に変換します。 これは、文字列を解析し、返された <xref:System.DateTimeOffset> オブジェクトの <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> メソッドを呼び出すことと同じです。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|`formats` 内の一致する要素で、`input` にオフセット値が含まれている必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトにローカルタイムゾーンのオフセットが与えられます。 これが既定値です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|`formats` 内の一致する要素で、`input` にオフセット値が含まれている必要がない場合は、返された <xref:System.DateTimeOffset> オブジェクトに UTC オフセット (+ 00:00) が与えられます。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|`formats`内の要素によって指定されていない内部の空白を含めることを `input` できます。 余分な空白は、日付と時刻のコンポーネントと個々のコンポーネント (オフセットを除く) の間で使用でき、文字列の解析時には無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|`formats`内の要素によって指定されていない先頭のスペースを `input` に含めることができるようにします。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|`formats`内の要素によって指定されていない末尾のスペースを含めることを `input` できます。 これらは、文字列を解析するときには無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`formats`内の要素によって指定されていない先頭、末尾、および内部スペースを含めることを `input` できます。 文字列の解析時に、`formats` 内の一致する要素で指定されていない余分な空白文字はすべて無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|`input`で余分な空白が許可されていないことを示します。 一致が正常に行われるようにするには、空白を `formats` の特定の要素で指定されたとおりに表示する必要があります。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset> 構造体に `Kind` プロパティが含まれていないため、効果はありません。|  
  
   
  
## Examples  
 次の例では、日付と時刻およびオフセット値の文字列形式に対して複数の入力形式を定義し、ユーザーが入力した文字列を <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> メソッドに渡します。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
  
- または - 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
  
- または - 
 <paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]では、解析対象の文字列に1時間の部分と、アグリーメントに含まれていない AM/PM 指定子が含まれている場合、<see cref="Overload:System.DateTimeOffset.TryParseExact" /> は <see langword="false" /> を返します。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、AM/PM 指定子は無視されます。</para></block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この定数の値は、グレゴリオ暦での 1970 年 1 月 1 日 00:00:00.0000000 UTC に相当します。 <see cref="F:System.DateTimeOffset.UnixEpoch" /> によって、Unix 時間が 0 に等しい時点が定義されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの世界協定時刻 (UTC) の日時を表す <see cref="T:System.DateTimeOffset" /> 値を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの世界協定時刻 (UTC) の日時。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcDateTime%2A> プロパティは、次の2つの変換を実行します。  
  
-   現在の <xref:System.DateTimeOffset> オブジェクトの日付と時刻を世界協定時刻 (UTC) に変換します。 変換は、現在の <xref:System.DateTimeOffset> オブジェクトの日付と時刻から <xref:System.DateTimeOffset.Offset%2A> プロパティの値を減算することによって行われます。  
  
-   <xref:System.DateTimeOffset> 値を <xref:System.DateTime> 値に変換します。  
  
 返された <xref:System.DateTimeOffset.DateTime%2A> 値の <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定されます。  
  
 <xref:System.DateTimeOffset.UtcDateTime%2A> プロパティの値を取得することは、現在の <xref:System.DateTimeOffset> オブジェクトの `ToUniversalTime.DateTime` プロパティを呼び出すことと同じです。ただし、後者の <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>です。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset.UtcDateTime%2A> プロパティを使用して、<xref:System.DateTimeOffset> 値とそれに対応する UTC 時刻を表示する方法を示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>日時とオフセットがそれぞれ現在の世界協定時刻 (UTC) および <see cref="T:System.DateTimeOffset" /> に設定された <see cref="F:System.TimeSpan.Zero" /> オブジェクトを取得します。</summary>
        <value>日時とオフセットがぞれぞれ現在の世界協定時刻 (UTC) および <see cref="F:System.TimeSpan.Zero" /> に設定されたオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcNow%2A> プロパティは、ローカルシステムのクロック時間とローカルシステムのタイムゾーンによって定義されたオフセットに基づいて、現在の世界協定時刻 (UTC) を計算します。  
  
 現在の UTC 時刻のミリ秒部分の精度は、システムクロックの解決によって異なります。 Windows NT 3.5 以降および Windows Vista オペレーティング システムでは、クロックの解像力は約 10-15 ミリ秒です。  
  
   
  
## Examples  
 次の例は、世界協定時刻 (UTC) と現地時刻の関係を示しています。  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの世界協定時刻 (UTC) での日時を表すタイマー刻み数を取得します。</summary>
        <value><see cref="T:System.DateTimeOffset" /> オブジェクトの世界協定時刻 (UTC) でのタイマー刻みの数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcTicks%2A> プロパティの値は、0001年1月1日 (<xref:System.DateTimeOffset.MinValue>の値) に12:00:00 午前0時から経過した100ナノ秒間隔の数を表します。 これには、閏月によって追加されるティックは含まれません。 ナノ秒の10億分は1秒です。1秒間に1000万タイマー刻みがあります。 <xref:System.DateTimeOffset.UtcTicks%2A> プロパティの値は、`DateTimeOffset.MinValue.Ticks` から `DateTimeOffset.MaxValue.Ticks`までの範囲です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表される日付の年要素を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ～ 9999 の整数値で表される年要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Year%2A> プロパティは、<xref:System.DateTimeOffset.Offset%2A> プロパティの値の影響を受けません。  
  
 また、"y"、"yy"、または "yyyy" カスタム書式指定子を使用して <xref:System.DateTimeOffset.ToString%2A> メソッドを呼び出すことによって、<xref:System.DateTimeOffset> オブジェクトの year コンポーネントの文字列形式を作成することもできます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTimeOffset> 値の年の部分を4つの異なる方法で表示します。  
  
-   <xref:System.DateTimeOffset.Year%2A> プロパティの値を取得する。  
  
-   "Y" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
-   "Yy" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
-   "Yyyy" 書式指定子を使用して <xref:System.DateTimeOffset.ToString%28System.String%29> メソッドを呼び出す。  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
