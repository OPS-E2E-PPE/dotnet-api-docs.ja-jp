<Type Name="GC" FullName="System.GC">
  <Metadata><Meta Name="ms.openlocfilehash" Value="99be1f6b3828a68ff971af7260a5b065315a8293" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83486761" /></Metadata><TypeSignature Language="C#" Value="public static class GC" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit GC extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.GC" />
  <TypeSignature Language="VB.NET" Value="Public Class GC" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class GC abstract sealed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type GC = class" />
  <TypeSignature Language="C#" Value="public sealed class GC" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GC extends System.Object" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GC" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class GC sealed" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="70d68-101">未使用メモリを自動的に収集するサービスであるシステム ガベージ コレクターを制御します。</span><span class="sxs-lookup"><span data-stu-id="70d68-101">Controls the system garbage collector, a service that automatically reclaims unused memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-102">ガベージコレクターは、マネージメモリの割り当てと解放を制御する共通言語ランタイムコンポーネントです。</span><span class="sxs-lookup"><span data-stu-id="70d68-102">The garbage collector is a common language runtime component that controls the allocation and release of managed memory.</span></span> <span data-ttu-id="70d68-103">このクラスのメソッドは、オブジェクトに対してガベージコレクションを実行する場合と、オブジェクトによって割り当てられたリソースが解放される場合に影響を及ぼします。</span><span class="sxs-lookup"><span data-stu-id="70d68-103">The methods in this class influence when garbage collection is performed on an object and when resources allocated by an object are released.</span></span> <span data-ttu-id="70d68-104">このクラスのプロパティは、システムで使用可能なメモリの合計量と、オブジェクトに割り当てられたメモリの経過期間カテゴリ (ジェネレーション) に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="70d68-104">Properties in this class provide information about the total amount of memory available in the system and the age category, or generation, of memory allocated to an object.</span></span>  
  
 <span data-ttu-id="70d68-105">ガベージコレクターは、マネージメモリに割り当てられたオブジェクトを追跡して再利用します。</span><span class="sxs-lookup"><span data-stu-id="70d68-105">The garbage collector tracks and reclaims objects allocated in managed memory.</span></span> <span data-ttu-id="70d68-106">ガベージコレクターは、ガベージコレクションを定期的に実行して、有効な参照がないオブジェクトに割り当てられたメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="70d68-106">Periodically, the garbage collector performs garbage collection to reclaim memory allocated to objects for which there are no valid references.</span></span> <span data-ttu-id="70d68-107">ガベージコレクションは、使用可能な空きメモリを使用してメモリの要求を満たすことができない場合に自動的に発生します。</span><span class="sxs-lookup"><span data-stu-id="70d68-107">Garbage collection happens automatically when a request for memory cannot be satisfied using available free memory.</span></span> <span data-ttu-id="70d68-108">また、アプリケーションで <xref:System.GC.Collect%2A> メソッドを使用してガベージコレクションを強制することもできます。</span><span class="sxs-lookup"><span data-stu-id="70d68-108">Alternatively, an application can force garbage collection using the <xref:System.GC.Collect%2A> method.</span></span>  
  
 <span data-ttu-id="70d68-109">ガベージコレクションは、次の手順で構成されています。</span><span class="sxs-lookup"><span data-stu-id="70d68-109">Garbage collection consists of the following steps:</span></span>  
  
1.  <span data-ttu-id="70d68-110">ガベージコレクターは、マネージコードで参照されているマネージオブジェクトを検索します。</span><span class="sxs-lookup"><span data-stu-id="70d68-110">The garbage collector searches for managed objects that are referenced in managed code.</span></span>  
  
2.  <span data-ttu-id="70d68-111">ガベージコレクターは、参照されていないオブジェクトの最終処理を試みます。</span><span class="sxs-lookup"><span data-stu-id="70d68-111">The garbage collector tries to finalize objects that are not referenced.</span></span>  
  
3.  <span data-ttu-id="70d68-112">ガベージコレクターは、参照されていないオブジェクトを解放し、そのメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="70d68-112">The garbage collector frees objects that are not referenced and reclaims their memory.</span></span>  
  
 <span data-ttu-id="70d68-113">このトピックのセクションは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="70d68-113">This topic includes the following sections:</span></span>  
  
 <span data-ttu-id="70d68-114">[ガベージコレクターとアンマネージリソース](#unmanaged) </span><span class="sxs-lookup"><span data-stu-id="70d68-114">[The garbage collector and unmanaged resources](#unmanaged) </span></span>  
 <span data-ttu-id="70d68-115">[オブジェクトのエージングと生成の](#generations) </span><span class="sxs-lookup"><span data-stu-id="70d68-115">[Object aging and generations](#generations) </span></span>  
 [<span data-ttu-id="70d68-116">ガベージコレクションを禁止</span><span class="sxs-lookup"><span data-stu-id="70d68-116">Disallowing garbage collection</span></span>](#NoGCRegion)  
  
<a name="unmanaged"></a>   
## <a name="the-garbage-collector-and-unmanaged-resources"></a><span data-ttu-id="70d68-117">ガベージコレクターとアンマネージリソース</span><span class="sxs-lookup"><span data-stu-id="70d68-117">The garbage collector and unmanaged resources</span></span>  
 <span data-ttu-id="70d68-118">コレクションでは、マネージコード内でオブジェクトへの参照が1つ以上見つかった場合、ガベージコレクターはオブジェクトを解放しません。</span><span class="sxs-lookup"><span data-stu-id="70d68-118">During a collection, the garbage collector will not free an object if it finds one or more references to the object in managed code.</span></span> <span data-ttu-id="70d68-119">ただし、ガベージコレクターはアンマネージコードからのオブジェクトへの参照を認識しないため、明示的に禁止されている場合を除き、アンマネージコードで排他的に使用されているオブジェクトが解放される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-119">However, the garbage collector does not recognize references to an object from unmanaged code, and might free objects that are being used exclusively in unmanaged code unless explicitly prevented from doing so.</span></span> <span data-ttu-id="70d68-120"><xref:System.GC.KeepAlive%2A> メソッドは、アンマネージコードでまだ使用されているオブジェクトがガベージコレクターによって収集されないようにするメカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="70d68-120">The <xref:System.GC.KeepAlive%2A> method provides a mechanism that prevents the garbage collector from collecting objects that are still in use in unmanaged code.</span></span>  
  
 <span data-ttu-id="70d68-121">マネージメモリの割り当て以外に、ガベージコレクターの実装では、ファイルハンドルやデータベース接続など、オブジェクトによって保持されているリソースに関する情報は保持されません。</span><span class="sxs-lookup"><span data-stu-id="70d68-121">Aside from managed memory allocations, implementations of the garbage collector do not maintain information about resources held by an object, such as file handles or database connections.</span></span> <span data-ttu-id="70d68-122">型のインスタンスが解放される前に解放する必要があるアンマネージリソースを型が使用する場合、型はファイナライザーを実装できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-122">When a type uses unmanaged resources that must be released before instances of the type are reclaimed, the type can implement a finalizer.</span></span>  
  
 <span data-ttu-id="70d68-123">ほとんどの場合、ファイナライザーは <xref:System.Object.Finalize%2A?displayProperty=nameWithType> メソッドをオーバーライドすることによって実装されます。ただし、型が記述C#さC++れているか、デストラクターを実装しています。これにより、コンパイラは <xref:System.Object.Finalize%2A?displayProperty=nameWithType>をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="70d68-123">In most cases, finalizers are implemented by overriding the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method; however, types written in C# or C++ implement destructors, which compilers turn into an override of <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="70d68-124">ほとんどの場合、オブジェクトにファイナライザーがあると、ガベージコレクターは、オブジェクトを解放する前にそのオブジェクトを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="70d68-124">In most cases, if an object has a finalizer, the garbage collector calls it prior to freeing the object.</span></span> <span data-ttu-id="70d68-125">ただし、ガベージコレクターは、すべての状況でファイナライザーを呼び出す必要はありません。たとえば、<xref:System.GC.SuppressFinalize%2A> メソッドは、オブジェクトのファイナライザーが呼び出されないように明示的に禁止します。</span><span class="sxs-lookup"><span data-stu-id="70d68-125">However, the garbage collector is not required to call finalizers in all situations; for example, the <xref:System.GC.SuppressFinalize%2A> method explicitly prevents an object's finalizer from being called.</span></span> <span data-ttu-id="70d68-126">また、ガベージコレクターは、オブジェクトを終了するために特定のスレッドを使用する必要はありません。また、相互参照するオブジェクトに対してファイナライザーが呼び出される順序を保証しますが、それ以外の場合はガベージコレクションに使用できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-126">Also, the garbage collector is not required to use a specific thread to finalize objects, or guarantee the order in which finalizers are called for objects that reference each other but are otherwise available for garbage collection.</span></span>  
  
 <span data-ttu-id="70d68-127">リソースを特定の時点でリリースする必要があるシナリオでは、クラスで <xref:System.IDisposable> インターフェイスを実装できます。このインターフェイスには、リソース管理タスクとクリーンアップタスクを実行する <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> メソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="70d68-127">In scenarios where resources must be released at a specific time, classes can implement the <xref:System.IDisposable> interface, which contains the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method that performs resource management and cleanup tasks.</span></span> <span data-ttu-id="70d68-128">クラスのコンシューマーがメソッドを呼び出してオブジェクトをクリーンアップする場合、<xref:System.IDisposable.Dispose%2A> を実装するクラスは、クラスコントラクトの一部としてを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-128">Classes that implement <xref:System.IDisposable.Dispose%2A> must specify, as part of their class contract, if and when class consumers call the method to clean up the object.</span></span> <span data-ttu-id="70d68-129">既定では、ガベージコレクターは <xref:System.IDisposable.Dispose%2A> メソッドを呼び出しません。ただし、<xref:System.IDisposable.Dispose%2A> メソッドの実装では、<xref:System.GC> クラスのメソッドを呼び出して、ガベージコレクターの終了動作をカスタマイズできます。</span><span class="sxs-lookup"><span data-stu-id="70d68-129">The garbage collector does not, by default, call the <xref:System.IDisposable.Dispose%2A> method; however, implementations of the <xref:System.IDisposable.Dispose%2A> method can call methods in the <xref:System.GC> class to customize the finalization behavior of the garbage collector.</span></span>  
  
 <span data-ttu-id="70d68-130">オブジェクトの終了と dispose パターンの詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="70d68-130">For more information on object finalization and the dispose pattern, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
<a name="generations"></a>   
## <a name="object-aging-and-generations"></a><span data-ttu-id="70d68-131">オブジェクトのエージングと生成</span><span class="sxs-lookup"><span data-stu-id="70d68-131">Object aging and generations</span></span>  
 <span data-ttu-id="70d68-132">共通言語ランタイムのガベージコレクターは、ジェネレーションを使用したオブジェクトのエージングをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="70d68-132">The garbage collector in the common language runtime supports object aging using generations.</span></span> <span data-ttu-id="70d68-133">ジェネレーションは、メモリ内のオブジェクトの相対的な経過期間の単位です。</span><span class="sxs-lookup"><span data-stu-id="70d68-133">A generation is a unit of measure of the relative age of objects in memory.</span></span> <span data-ttu-id="70d68-134">オブジェクトの世代番号 (age) は、オブジェクトが属する世代を示します。</span><span class="sxs-lookup"><span data-stu-id="70d68-134">The generation number, or age, of an object indicates the generation to which an object belongs.</span></span> <span data-ttu-id="70d68-135">最近作成されたオブジェクトは、新しい世代の一部であり、アプリケーションのライフサイクルの前に作成されたオブジェクトよりも世代数が低くなります。</span><span class="sxs-lookup"><span data-stu-id="70d68-135">Objects created more recently are part of newer generations, and have lower generation numbers than objects created earlier in the application life cycle.</span></span> <span data-ttu-id="70d68-136">最新世代のオブジェクトは、ジェネレーション0にあります。</span><span class="sxs-lookup"><span data-stu-id="70d68-136">Objects in the most recent generation are in generation 0.</span></span> <span data-ttu-id="70d68-137">このガベージコレクターの実装では、ジェネレーション0、1、および2の3つのジェネレーションのオブジェクトがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="70d68-137">This implementation of the garbage collector supports three generations of objects, generations 0, 1, and 2.</span></span> <span data-ttu-id="70d68-138"><xref:System.GC.MaxGeneration%2A> プロパティの値を取得して、システムでサポートされている最大のジェネレーション番号を確認できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-138">You can retrieve the value of the <xref:System.GC.MaxGeneration%2A> property to determine the maximum generation number supported by the system.</span></span>  
  
 <span data-ttu-id="70d68-139">オブジェクトのエージングにより、アプリケーションは、ガベージコレクターがすべての生成結果を評価するのではなく、特定のジェネレーションのセットでガベージコレクションをターゲットにすることができます。</span><span class="sxs-lookup"><span data-stu-id="70d68-139">Object aging allows applications to target garbage collection at a specific set of generations rather than requiring the garbage collector to evaluate all generations.</span></span> <span data-ttu-id="70d68-140">`generation` パラメーターを含む <xref:System.GC.Collect%2A> メソッドのオーバーロードを使用すると、ガベージコレクションの対象となる最も古い世代を指定できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-140">Overloads of the <xref:System.GC.Collect%2A> method that include a `generation` parameter allow you to specify the oldest generation to be garbage collected.</span></span>  
  
<a name="NoGCRegion"></a>   
## <a name="disallowing-garbage-collection"></a><span data-ttu-id="70d68-141">ガベージコレクションを禁止</span><span class="sxs-lookup"><span data-stu-id="70d68-141">Disallowing garbage collection</span></span>  
 <span data-ttu-id="70d68-142">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]以降では、ガベージコレクターは、ガベージコレクションがアプリのパフォーマンスに悪影響を及ぼす可能性のある重要なパスの実行中に使用できる、GC 領域の無待機モードをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="70d68-142">Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the garbage collector supports a no GC region latency mode that can be used during the execution of critical paths in which garbage collection can adversely affect an app's performance.</span></span> <span data-ttu-id="70d68-143">GC 領域の無待機モードでは、ガベージコレクターからの干渉なしに割り当てることができるメモリ量を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-143">The no GC region latency mode requires that you specify an amount of memory that can be allocated without interference from the garbage collector.</span></span> <span data-ttu-id="70d68-144">ランタイムは、そのメモリを割り当てることができる場合、クリティカルパスのコードの実行中にガベージコレクションを実行しません。</span><span class="sxs-lookup"><span data-stu-id="70d68-144">If the runtime can allocate that memory, the runtime will not perform a garbage collection while code in the critical path is executing.</span></span>  
  
 <span data-ttu-id="70d68-145">GC 領域のないクリティカルパスの先頭を定義するには、<xref:System.GC.TryStartNoGCRegion%2A>のいずれかのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="70d68-145">You define the beginning of the critical path of the no GC region by calling one of the overloads of the <xref:System.GC.TryStartNoGCRegion%2A>.</span></span> <span data-ttu-id="70d68-146"><xref:System.GC.EndNoGCRegion%2A> メソッドを呼び出して、クリティカルパスの末尾を指定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-146">You specify the end of its critical path by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 <span data-ttu-id="70d68-147"><xref:System.GC.TryStartNoGCRegion%2A> メソッドへの呼び出しを入れ子にすることはできません。また、ランタイムが現在 GC 領域の待機時間モードでない場合にのみ、<xref:System.GC.EndNoGCRegion%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-147">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="70d68-148">つまり、<xref:System.GC.TryStartNoGCRegion%2A> を何度も呼び出さないでください (最初のメソッド呼び出しの後、以降の呼び出しは成功しません)。 <xref:System.GC.TryStartNoGCRegion%2A> の最初の呼び出しが成功したため、<xref:System.GC.EndNoGCRegion%2A> への呼び出しが成功するとは限りません。</span><span class="sxs-lookup"><span data-stu-id="70d68-148">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-149">次の例では、いくつかの GC メソッドを使用して、未使用のオブジェクトのブロックに関するジェネレーションとメモリの情報を取得し、それをコンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="70d68-149">The following example uses several GC methods to get generation and memory information about a block of unused objects and print it to the console.</span></span> <span data-ttu-id="70d68-150">その後、未使用のオブジェクトが収集され、結果として得られるメモリの合計が表示されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-150">The unused objects are then collected, and the resulting memory totals are displayed.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.GCSettings" />
    <related type="Article" href="~/docs/standard/garbage-collection/index.md"><span data-ttu-id="70d68-151">ガベージ コレクション</span><span class="sxs-lookup"><span data-stu-id="70d68-151">Garbage Collection</span></span></related>
    <related type="Article" href="~/docs/standard/garbage-collection/fundamentals.md"><span data-ttu-id="70d68-152">ガベージ コレクションの基礎</span><span class="sxs-lookup"><span data-stu-id="70d68-152">Fundamentals of Garbage Collection</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AddMemoryPressure">
      <MemberSignature Language="C#" Value="public static void AddMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.AddMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMemoryPressure(long bytesAllocated);" />
      <MemberSignature Language="F#" Value="static member AddMemoryPressure : int64 -&gt; unit" Usage="System.GC.AddMemoryPressure bytesAllocated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated"><span data-ttu-id="70d68-153">割り当てられたアンマネージ メモリの増加量。</span><span class="sxs-lookup"><span data-stu-id="70d68-153">The incremental amount of unmanaged memory that has been allocated.</span></span></param>
        <summary><span data-ttu-id="70d68-154">アンマネージ メモリが大規模に割り当てられたため、ガベージ コレクションをスケジュールするときに考慮する必要があることが、ランタイムに通知されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-154">Informs the runtime of a large allocation of unmanaged memory that should be taken into account when scheduling garbage collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-155">ガベージコレクションをスケジュールするタイミングを決定するときに、ランタイムは、割り当てられているマネージメモリの量を考慮します。</span><span class="sxs-lookup"><span data-stu-id="70d68-155">In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated.</span></span> <span data-ttu-id="70d68-156">小さいマネージオブジェクトによって大量のアンマネージメモリが割り当てられている場合、ランタイムはマネージメモリだけを考慮して、ガベージコレクションのスケジュールの緊急度を過小評価します。</span><span class="sxs-lookup"><span data-stu-id="70d68-156">If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection.</span></span> <span data-ttu-id="70d68-157"><xref:System.GC.AddMemoryPressure%2A> メソッドは、システムメモリに対するこの追加の負荷をランタイムに通知します。</span><span class="sxs-lookup"><span data-stu-id="70d68-157">The <xref:System.GC.AddMemoryPressure%2A> method informs the runtime of this additional pressure on system memory.</span></span>  
  
 <span data-ttu-id="70d68-158">最も単純な使用パターンでは、マネージオブジェクトはアンマネージメモリをコンストラクターに割り当て、`Dispose` または `Finalize` メソッドで解放します。</span><span class="sxs-lookup"><span data-stu-id="70d68-158">In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the `Dispose` or `Finalize` method.</span></span> <span data-ttu-id="70d68-159">アンマネージメモリを割り当てた後、<xref:System.GC.AddMemoryPressure%2A> メソッドを呼び出し、<xref:System.GC.RemoveMemoryPressure%2A> メソッドを解放した後に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="70d68-159">Call the <xref:System.GC.AddMemoryPressure%2A> method after allocating the unmanaged memory, and call the <xref:System.GC.RemoveMemoryPressure%2A> method after releasing it.</span></span>  
  
 <span data-ttu-id="70d68-160">マネージオブジェクトの有効期間中にアンマネージメモリの割り当てが大幅に変更される、より複雑なシナリオでは、<xref:System.GC.AddMemoryPressure%2A> および <xref:System.GC.RemoveMemoryPressure%2A> メソッドを呼び出して、これらの増分変更をランタイムに通知できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-160">In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the <xref:System.GC.AddMemoryPressure%2A> and <xref:System.GC.RemoveMemoryPressure%2A> methods to communicate these incremental changes to the runtime.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="70d68-161">追加する圧力の量を正確に取り除く必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-161">You must ensure that you remove exactly the amount of pressure you add.</span></span> <span data-ttu-id="70d68-162">この操作を行わないと、長時間にわたって実行されるアプリケーションのシステムのパフォーマンスに悪影響を及ぼす可能性があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-162">Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="70d68-163"><paramref name="bytesAllocated" /> が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="70d68-163"><paramref name="bytesAllocated" /> is less than or equal to 0.</span></span>  
  
<span data-ttu-id="70d68-164">または</span><span class="sxs-lookup"><span data-stu-id="70d68-164">-or-</span></span> 
<span data-ttu-id="70d68-165">32 ビットのコンピューターで、<paramref name="bytesAllocated" /> の値が <see cref="F:System.Int32.MaxValue" /> の値を超えています。</span><span class="sxs-lookup"><span data-stu-id="70d68-165">On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllocateArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] AllocateArray&lt;T&gt; (int length, bool pinned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] AllocateArray&lt;T&gt;(int32 length, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.AllocateArray``1(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateArray(Of T) (length As Integer, Optional pinned As Boolean = false) As T()" />
      <MemberSignature Language="F#" Value="static member AllocateArray : int * bool -&gt; 'T[]" Usage="System.GC.AllocateArray (length, pinned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="pinned" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="length">To be added.</param>
        <param name="pinned">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateUninitializedArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] AllocateUninitializedArray&lt;T&gt; (int length, bool pinned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] AllocateUninitializedArray&lt;T&gt;(int32 length, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.AllocateUninitializedArray``1(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateUninitializedArray(Of T) (length As Integer, Optional pinned As Boolean = false) As T()" />
      <MemberSignature Language="F#" Value="static member AllocateUninitializedArray : int * bool -&gt; 'T[]" Usage="System.GC.AllocateUninitializedArray (length, pinned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="pinned" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="length">To be added.</param>
        <param name="pinned">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelFullGCNotification">
      <MemberSignature Language="C#" Value="public static void CancelFullGCNotification ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelFullGCNotification() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CancelFullGCNotification" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CancelFullGCNotification ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CancelFullGCNotification();" />
      <MemberSignature Language="F#" Value="static member CancelFullGCNotification : unit -&gt; unit" Usage="System.GC.CancelFullGCNotification " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70d68-166">ガベージ コレクションの通知の登録をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="70d68-166">Cancels the registration of a garbage collection notification.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-167">このメソッドは、<xref:System.GC.RegisterForFullGCNotification%2A> メソッドを使用して登録されたガベージコレクションの通知をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="70d68-167">This method cancels a garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="70d68-168">後続の <xref:System.GC.RegisterForFullGCNotification%2A> メソッドの呼び出しでしきい値パラメーター値を調整する前に、このメソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="70d68-168">You do not have to call this method before adjusting threshold parameter values in subsequent calls to the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-169">次の例では、ガベージコレクションの登録をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="70d68-169">The following example cancels a garbage collection registration.</span></span> <span data-ttu-id="70d68-170">この例は、[ガベージコレクションの通知](~/docs/standard/garbage-collection/notifications.md)に関するトピックで提供されている、より大きな例の一部です。</span><span class="sxs-lookup"><span data-stu-id="70d68-170">This example is part of a larger example provided for the [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#7](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#7)]
 [!code-csharp[GCNotification#7](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#7)]
 [!code-vb[GCNotification#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="70d68-171">同時実行ガベージ コレクションが有効の場合、このメンバーは使用できません。</span><span class="sxs-lookup"><span data-stu-id="70d68-171">This member is not available when concurrent garbage collection is enabled.</span></span> <span data-ttu-id="70d68-172">同時実行ガベージ コレクションを無効にする方法については、[&lt;gcConcurrent&gt;](~/docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md) 実行時設定をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="70d68-172">See the [&lt;gcConcurrent&gt;](~/docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md) runtime setting for information about how to disable concurrent garbage collection.</span></span></exception>
        <related type="Article" href="~/docs/standard/garbage-collection/notifications.md"><span data-ttu-id="70d68-173">ガベージ コレクションの通知</span><span class="sxs-lookup"><span data-stu-id="70d68-173">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Collect">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="70d68-174">強制的にガベージ コレクションを行います。</span><span class="sxs-lookup"><span data-stu-id="70d68-174">Forces garbage collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect();" />
      <MemberSignature Language="F#" Value="static member Collect : unit -&gt; unit" Usage="System.GC.Collect " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70d68-175">すべてのジェネレーションのガベージ コレクションを直ちに強制実行します。</span><span class="sxs-lookup"><span data-stu-id="70d68-175">Forces an immediate garbage collection of all generations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-176">このメソッドは、アクセスできないすべてのメモリを再利用するために使用します。</span><span class="sxs-lookup"><span data-stu-id="70d68-176">Use this method to try to reclaim all memory that is inaccessible.</span></span> <span data-ttu-id="70d68-177">すべてのジェネレーションのブロッキングガベージコレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="70d68-177">It performs a blocking garbage collection of all generations.</span></span>  
  
 <span data-ttu-id="70d68-178">メモリ内にあった時間に関係なく、すべてのオブジェクトはコレクションと見なされます。ただし、マネージコードで参照されているオブジェクトは収集されません。</span><span class="sxs-lookup"><span data-stu-id="70d68-178">All objects, regardless of how long they have been in memory, are considered for collection; however, objects that are referenced in managed code are not collected.</span></span> <span data-ttu-id="70d68-179">このメソッドを使用して、使用可能なメモリの最大量をシステムが強制的に再利用するようにします。</span><span class="sxs-lookup"><span data-stu-id="70d68-179">Use this method to force the system to try to reclaim the maximum amount of available memory.</span></span>  
  
 <span data-ttu-id="70d68-180">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]以降では、次の例に示すように、<xref:System.GC.Collect%2A> メソッドを呼び出す前に <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> プロパティを <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> に設定することによって、大きなオブジェクトヒープ (LOH) を圧縮できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-180">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)], you can compact the large object heap (LOH) by setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> before calling the <xref:System.GC.Collect%2A> method, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]
 [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="70d68-181">次の例では、<xref:System.GC.Collect%2A> メソッドを使用して、すべてのジェネレーションのメモリでコレクションを実行する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="70d68-181">The following example demonstrates how to use the <xref:System.GC.Collect%2A> method to perform a collection on all generations of memory.</span></span> <span data-ttu-id="70d68-182">このコードは、使用されていないオブジェクトを多数生成し、<xref:System.GC.Collect%2A> メソッドを呼び出してメモリから消去します。</span><span class="sxs-lookup"><span data-stu-id="70d68-182">The code generates a number of unused objects, and then calls the <xref:System.GC.Collect%2A> method to clean them from memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.Collect Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.Collect Example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.Collect Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/induced.md"><span data-ttu-id="70d68-183">発生したコレクション</span><span class="sxs-lookup"><span data-stu-id="70d68-183">Induced Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation);" />
      <MemberSignature Language="F#" Value="static member Collect : int -&gt; unit" Usage="System.GC.Collect generation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="70d68-184">ガベージ コレクションを行うべき最も古いジェネレーションの番号。</span><span class="sxs-lookup"><span data-stu-id="70d68-184">The number of the oldest generation to be garbage collected.</span></span></param>
        <summary><span data-ttu-id="70d68-185">ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを直ちに強制実行します。</span><span class="sxs-lookup"><span data-stu-id="70d68-185">Forces an immediate garbage collection from generation 0 through a specified generation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-186">このメソッドは、アクセスできないメモリを再利用するために使用します。</span><span class="sxs-lookup"><span data-stu-id="70d68-186">Use this method to try to reclaim memory that is inaccessible.</span></span> <span data-ttu-id="70d68-187">ただし、このメソッドを使用しても、指定したジェネレーションのすべてのアクセスできないメモリが解放されることは保証されません。</span><span class="sxs-lookup"><span data-stu-id="70d68-187">However, using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.</span></span>  
  
 <span data-ttu-id="70d68-188">オブジェクトのエージングが実装されている場合、ガベージコレクターは、指定されたジェネレーションよりも上位のジェネレーション番号を持つオブジェクトを収集しません。</span><span class="sxs-lookup"><span data-stu-id="70d68-188">If object aging is implemented, the garbage collector does not collect objects with a generation number that is higher than the specified generation.</span></span> <span data-ttu-id="70d68-189">オブジェクトのエージングが実装されていない場合、ガベージコレクターは、ガベージコレクション中にすべてのオブジェクトを検討します。</span><span class="sxs-lookup"><span data-stu-id="70d68-189">If object aging is not implemented, the garbage collector considers all objects during the garbage collection.</span></span>  
  
 <span data-ttu-id="70d68-190">`generation` パラメーターの最大有効値を確認するには、<xref:System.GC.MaxGeneration%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="70d68-190">Use the <xref:System.GC.MaxGeneration%2A> property to determine the maximum valid value of the `generation` parameter.</span></span>  
  
 <span data-ttu-id="70d68-191">ガベージコレクターによってすべてのオブジェクトが生成されると見なされるようにするには、パラメーターを受け取らない、このメソッドのバージョンを使用します。</span><span class="sxs-lookup"><span data-stu-id="70d68-191">To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters.</span></span> <span data-ttu-id="70d68-192"><xref:System.GCCollectionMode> 設定に基づいてガベージコレクターがオブジェクトを再利用できるようにするには、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=nameWithType> メソッドオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="70d68-192">To have the garbage collector reclaim objects based on a <xref:System.GCCollectionMode> setting, use the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=nameWithType> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-193">次の例では、<xref:System.GC.Collect%2A> メソッドを使用して、メモリの個々のレイヤーでコレクションを実行する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="70d68-193">The following example demonstrates how to use the <xref:System.GC.Collect%2A> method to perform a collection on individual layers of memory.</span></span> <span data-ttu-id="70d68-194">このコードは、使用されていないオブジェクトを多数生成し、<xref:System.GC.Collect%2A> メソッドを呼び出してメモリから消去します。</span><span class="sxs-lookup"><span data-stu-id="70d68-194">The code generates a number of unused objects, and then calls the <xref:System.GC.Collect%2A> method to clean them from memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="70d68-195"><paramref name="generation" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="70d68-195"><paramref name="generation" /> is not valid.</span></span></exception>
        <related type="Article" href="~/docs/standard/garbage-collection/induced.md"><span data-ttu-id="70d68-196">発生したコレクション</span><span class="sxs-lookup"><span data-stu-id="70d68-196">Induced Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode -&gt; unit" Usage="System.GC.Collect (generation, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.GCCollectionMode" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="70d68-197">ガベージ コレクションを行うべき最も古いジェネレーションの番号。</span><span class="sxs-lookup"><span data-stu-id="70d68-197">The number of the oldest generation to be garbage collected.</span></span></param>
        <param name="mode"><span data-ttu-id="70d68-198">ガベージ コレクションが強制実行になっている (<see cref="F:System.GCCollectionMode.Default" /> または <see cref="F:System.GCCollectionMode.Forced" />) か、最適化になっている (<see cref="F:System.GCCollectionMode.Optimized" />) かを示す列挙値。</span><span class="sxs-lookup"><span data-stu-id="70d68-198">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span></span></param>
        <summary><span data-ttu-id="70d68-199"><see cref="T:System.GCCollectionMode" /> 値によって指定したタイミングで、ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを強制的に実行します。</span><span class="sxs-lookup"><span data-stu-id="70d68-199">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-200">`mode` パラメーターを使用して、ガベージコレクションを直ちに実行するか、またはオブジェクトを再利用するために時間が最適な場合にのみ実行するかを指定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-200">Use the `mode` parameter to specify whether garbage collection should occur immediately or only if the time is optimal to reclaim objects.</span></span> <span data-ttu-id="70d68-201">このメソッドを使用しても、指定したジェネレーションのアクセス不可能なメモリがすべて回収されることは保証されません。</span><span class="sxs-lookup"><span data-stu-id="70d68-201">Using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.</span></span>  
  
 <span data-ttu-id="70d68-202">アプリケーションの重要な期間中にガベージコレクションの割り込みを調整するには、<xref:System.Runtime.GCSettings.LatencyMode%2A> プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-202">To adjust the intrusiveness of garbage collection during critical periods in your application, set the <xref:System.Runtime.GCSettings.LatencyMode%2A> property.</span></span>  
  
 <span data-ttu-id="70d68-203">ガベージコレクターは、`generation` パラメーターによって指定されたよりも大きいジェネレーション番号を持つオブジェクトを収集しません。</span><span class="sxs-lookup"><span data-stu-id="70d68-203">The garbage collector does not collect objects with a generation number higher than specified by the `generation` parameter.</span></span> <span data-ttu-id="70d68-204">`generation`の最大有効値を確認するには、<xref:System.GC.MaxGeneration%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="70d68-204">Use the <xref:System.GC.MaxGeneration%2A> property to determine the maximum valid value of `generation`.</span></span>  
  
 <span data-ttu-id="70d68-205">ガベージコレクターによってすべてのオブジェクトが生成されると見なされるようにするには、パラメーターを受け取らない、このメソッドのバージョンを使用します。</span><span class="sxs-lookup"><span data-stu-id="70d68-205">To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters.</span></span>  
  
 <span data-ttu-id="70d68-206">ガベージコレクターが、指定されたジェネレーションのオブジェクトまでオブジェクトを再利用できるようにするには、<xref:System.GC.Collect%28System.Int32%29?displayProperty=nameWithType> メソッドのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="70d68-206">To have the garbage collector reclaim objects up to a specified generation of objects, use the <xref:System.GC.Collect%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="70d68-207">最大生成を指定すると、すべてのオブジェクトが収集されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-207">When you specify the maximum generation, all objects are collected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-208">次の例では、<xref:System.GCCollectionMode.Optimized> 設定を使用して第2世代オブジェクトのガベージコレクションを強制的に実行します。</span><span class="sxs-lookup"><span data-stu-id="70d68-208">The following example forces a garbage collection for generation 2 objects with the <xref:System.GCCollectionMode.Optimized> setting.</span></span>  
  
 [!code-csharp[System.GC.GCCollectionMode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GCCollectionMode/cs/Program.cs#1)]
 [!code-vb[System.GC.GCCollectionMode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GCCollectionMode/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="70d68-209"><paramref name="generation" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="70d68-209"><paramref name="generation" /> is not valid.</span></span>  
  
<span data-ttu-id="70d68-210">または</span><span class="sxs-lookup"><span data-stu-id="70d68-210">-or-</span></span> 
 <span data-ttu-id="70d68-211"><paramref name="mode" /> は <see cref="T:System.GCCollectionMode" /> 値のいずれでもありません。</span><span class="sxs-lookup"><span data-stu-id="70d68-211"><paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</span></span></exception>
        <related type="Article" href="~/docs/standard/garbage-collection/induced.md"><span data-ttu-id="70d68-212">発生したコレクション</span><span class="sxs-lookup"><span data-stu-id="70d68-212">Induced Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode * bool -&gt; unit" Usage="System.GC.Collect (generation, mode, blocking)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.GCCollectionMode" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="blocking" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="70d68-213">ガベージ コレクションを行うべき最も古いジェネレーションの番号。</span><span class="sxs-lookup"><span data-stu-id="70d68-213">The number of the oldest generation to be garbage collected.</span></span></param>
        <param name="mode"><span data-ttu-id="70d68-214">ガベージ コレクションが強制実行になっている (<see cref="F:System.GCCollectionMode.Default" /> または <see cref="F:System.GCCollectionMode.Forced" />) か、最適化になっている (<see cref="F:System.GCCollectionMode.Optimized" />) かを示す列挙値。</span><span class="sxs-lookup"><span data-stu-id="70d68-214">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span></span></param>
        <param name="blocking"><span data-ttu-id="70d68-215">ブロッキング ガベージ コレクションを実行する場合は <see langword="true" />。可能な限りバックグラウンド ガベージ コレクションを実行する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70d68-215"><see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</span></span></param>
        <summary><span data-ttu-id="70d68-216">ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを、 <see cref="T:System.GCCollectionMode" /> 値で指定したタイミングで強制実行します。コレクションをブロックする必要があるかどうかを指定する値を指定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-216">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with a value specifying whether the collection should be blocking.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-217">次の表は、`mode` と `blocking` パラメーターの相互作用をまとめたものです。</span><span class="sxs-lookup"><span data-stu-id="70d68-217">The following table summarizes the interaction of the `mode` and `blocking` parameters:</span></span>  
  
|`mode`|<span data-ttu-id="70d68-218">`blocking` は `true` です</span><span class="sxs-lookup"><span data-stu-id="70d68-218">`blocking` is `true`</span></span>|<span data-ttu-id="70d68-219">`blocking` は `false` です</span><span class="sxs-lookup"><span data-stu-id="70d68-219">`blocking` is `false`</span></span>|  
|-|-|-|  
|<span data-ttu-id="70d68-220"><xref:System.GCCollectionMode.Forced> または <xref:System.GCCollectionMode.Default></span><span class="sxs-lookup"><span data-stu-id="70d68-220"><xref:System.GCCollectionMode.Forced> or <xref:System.GCCollectionMode.Default></span></span>|<span data-ttu-id="70d68-221">ブロッキング コレクションはできるだけ早く実行されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-221">A blocking collection is performed as soon as possible.</span></span> <span data-ttu-id="70d68-222">バックグラウンドのコレクションが進行中で、`generation` が0または1の場合、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> メソッドは直ちにブロッキングコレクションをトリガーし、コレクションが終了したときにを返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-222">If a background collection is in progress and `generation` is 0 or 1, the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method immediately triggers a blocking collection and returns when the collection is finished.</span></span> <span data-ttu-id="70d68-223">バックグラウンドのコレクションが進行中で、`generation` が2の場合、メソッドはバックグラウンドコレクションが終了するまで待機し、ジェネレーション2のブロッキングコレクションをトリガーしてから、を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-223">If a background collection is in progress and `generation` is 2, the method waits until the background collection is finished, triggers a blocking generation 2 collection, and then returns.</span></span>|<span data-ttu-id="70d68-224">コレクションはできるだけ早く実行されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-224">A collection is performed as soon as possible.</span></span> <span data-ttu-id="70d68-225"><xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> メソッドはバックグラウンド コレクションを要求しますが、それは保証されず、状況によってはブロッキング コレクションが実行される場合もあります。</span><span class="sxs-lookup"><span data-stu-id="70d68-225">The <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed.</span></span> <span data-ttu-id="70d68-226">バックグラウンド コレクションが既に実行中の場合、メソッドはすぐに制御を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-226">If a background collection is already in progress, the method returns immediately.</span></span>|  
|<xref:System.GCCollectionMode.Optimized>|<span data-ttu-id="70d68-227">ガベージ コレクターおよび `generation` パラメーターの状態によっては、ブロッキング コレクションが実行される場合があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-227">A blocking collection may be performed, depending on the state of the garbage collector and the `generation` parameter.</span></span> <span data-ttu-id="70d68-228">ガベージ コレクターは最適なパフォーマンスを提供しようとします。</span><span class="sxs-lookup"><span data-stu-id="70d68-228">The garbage collector tries to provide optimal performance.</span></span>|<span data-ttu-id="70d68-229">ガベージ コレクターの状態によっては、コレクションが実行される場合があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-229">A collection may be performed, depending on the state of the garbage collector.</span></span> <span data-ttu-id="70d68-230"><xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> メソッドはバックグラウンド コレクションを要求しますが、それは保証されず、状況によってはブロッキング コレクションが実行される場合もあります。</span><span class="sxs-lookup"><span data-stu-id="70d68-230">The <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed.</span></span> <span data-ttu-id="70d68-231">ガベージ コレクターは最適なパフォーマンスを提供しようとします。</span><span class="sxs-lookup"><span data-stu-id="70d68-231">The garbage collector tries to provide optimal performance.</span></span> <span data-ttu-id="70d68-232">バックグラウンド コレクションが既に実行中の場合、メソッドはすぐに制御を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-232">If a background collection is already in progress, the method returns immediately.</span></span>|  
  
 <span data-ttu-id="70d68-233"><xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> メソッドの呼び出しでフルブロッキングガベージコレクションが実行される場合は、<xref:System.GC.Collect%2A> メソッドを呼び出す前に <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> プロパティを <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> に設定することによって、大きなオブジェクトヒープを圧縮することもできます。</span><span class="sxs-lookup"><span data-stu-id="70d68-233">If a call to the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method performs a full blocking garbage collection, you can also compact the large object heap by setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> before calling the <xref:System.GC.Collect%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="70d68-234"><paramref name="generation" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="70d68-234"><paramref name="generation" /> is not valid.</span></span>  
  
<span data-ttu-id="70d68-235">または</span><span class="sxs-lookup"><span data-stu-id="70d68-235">-or-</span></span> 
 <span data-ttu-id="70d68-236"><paramref name="mode" /> は <see cref="T:System.GCCollectionMode" /> 値のいずれでもありません。</span><span class="sxs-lookup"><span data-stu-id="70d68-236"><paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking, bool compacting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean, compacting As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode * bool * bool -&gt; unit" Usage="System.GC.Collect (generation, mode, blocking, compacting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="mode" Type="System.GCCollectionMode" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="blocking" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="compacting" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="70d68-237">ガベージ コレクションを行うべき最も古いジェネレーションの番号。</span><span class="sxs-lookup"><span data-stu-id="70d68-237">The number of the oldest generation to be garbage collected.</span></span></param>
        <param name="mode"><span data-ttu-id="70d68-238">ガベージ コレクションが強制実行になっている (<see cref="F:System.GCCollectionMode.Default" /> または <see cref="F:System.GCCollectionMode.Forced" />) か、最適化になっている (<see cref="F:System.GCCollectionMode.Optimized" />) かを示す列挙値。</span><span class="sxs-lookup"><span data-stu-id="70d68-238">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span></span></param>
        <param name="blocking"><span data-ttu-id="70d68-239">ブロッキング ガベージ コレクションを実行する場合は <see langword="true" />。可能な限りバックグラウンド ガベージ コレクションを実行する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70d68-239"><see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</span></span></param>
        <param name="compacting"><span data-ttu-id="70d68-240">小さなオブジェクト ヒープの圧縮を行う場合は <see langword="true" />、スイープのみ行う場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70d68-240"><see langword="true" /> to compact the small object heap; <see langword="false" /> to sweep only.</span></span></param>
        <summary><span data-ttu-id="70d68-241">ジェネレーション 0 から指定ジェネレーションまでのガベージ コレクションを、 <see cref="T:System.GCCollectionMode" /> 値で指定したタイミングで強制実行します。コレクションをブロックおよび圧縮する必要があるかどうかを指定する値を指定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-241">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with values that specify whether the collection should be blocking and compacting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-242">`blocking` が `false`場合、GC は、バックグラウンドまたはブロッキングガベージコレクションを実行するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-242">If `blocking` is `false`, the GC decides whether to perform a background or a blocking garbage collection.</span></span> <span data-ttu-id="70d68-243">`compacting` が `true`場合は、ブロッキングガベージコレクションが実行されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-243">If `compacting` is `true`, it performs a blocking garbage collection.</span></span>  
  
 <span data-ttu-id="70d68-244">`compacting` が `true`場合、ランタイムは小さいオブジェクトヒープ (SOH) を圧縮します。</span><span class="sxs-lookup"><span data-stu-id="70d68-244">If `compacting` is `true`, the runtime compacts the small object heap (SOH).</span></span> <span data-ttu-id="70d68-245"><xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> プロパティが <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>に設定されていない限り、大きなオブジェクトヒープ (LOH) は圧縮されません。</span><span class="sxs-lookup"><span data-stu-id="70d68-245">The large object heap (LOH) is not compacted unless the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property is set to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>.</span></span> <span data-ttu-id="70d68-246">これには、フルブロッキングガベージコレクションだけでなく、すべてのブロッキングガベージコレクションが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="70d68-246">Note that this includes all blocking garbage collections, not just full blocking garbage collections.</span></span>  
  
 <span data-ttu-id="70d68-247">次のコードフラグメントに示すように、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> メソッドを呼び出して、マネージヒープをできるだけ小さいサイズに減らすことができます。</span><span class="sxs-lookup"><span data-stu-id="70d68-247">You can call the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method to reduce the managed heap to the smallest size possible, as the following code fragment illustrates.</span></span>  
  
 [!code-csharp[System.GC.Collect#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect/cs/collect4.cs#1)]
 [!code-vb[System.GC.Collect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect/vb/collect4.vb#1)]  
  
 <span data-ttu-id="70d68-248">`compacting` 引数に `true` を指定すると、圧縮、フルブロッキングのガベージコレクションが保証されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-248">Specifying `true` for the `compacting` argument guarantees a compacting, full blocking garbage collection.</span></span> <span data-ttu-id="70d68-249"><xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> プロパティを <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> に設定すると、LOH と SOH の両方が確実に圧縮されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-249">Setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> ensures that both the LOH and SOH are compacted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionCount">
      <MemberSignature Language="C#" Value="public static int CollectionCount (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CollectionCount(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CollectionCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionCount (generation As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CollectionCount(int generation);" />
      <MemberSignature Language="F#" Value="static member CollectionCount : int -&gt; int" Usage="System.GC.CollectionCount generation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="70d68-250">ガベージ コレクションの回数を確認するオブジェクトのジェネレーション。</span><span class="sxs-lookup"><span data-stu-id="70d68-250">The generation of objects for which the garbage collection count is to be determined.</span></span></param>
        <summary><span data-ttu-id="70d68-251">指定したジェネレーションのオブジェクトに対するガベージ コレクションの発生回数を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-251">Returns the number of times garbage collection has occurred for the specified generation of objects.</span></span></summary>
        <returns><span data-ttu-id="70d68-252">プロセスの起動後に、指定したジェネレーションに対して発生したガベージ コレクションの回数。</span><span class="sxs-lookup"><span data-stu-id="70d68-252">The number of times garbage collection has occurred for the specified generation since the process was started.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-253">独自のリソース管理を実装する場合は、<xref:System.GC.Collect%2A> メソッドを呼び出すことによって、ガベージコレクションを定期的に強制的に実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-253">If you implement your own resource management, you might need to force garbage collection periodically by calling the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="70d68-254">これは負荷の高い操作であるため、ガベージコレクションが最近発生したときに呼び出しをスキップすることで、パフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="70d68-254">Because this is an expensive operation, you can improve performance by skipping the call when a garbage collection has occurred recently.</span></span> <span data-ttu-id="70d68-255"><xref:System.GC.Collect%2A>を呼び出した直後に <xref:System.GC.CollectionCount%2A> によって返された値を保存します。</span><span class="sxs-lookup"><span data-stu-id="70d68-255">Save the value returned by <xref:System.GC.CollectionCount%2A> immediately after calling <xref:System.GC.Collect%2A>.</span></span> <span data-ttu-id="70d68-256">次に <xref:System.GC.Collect%2A>を呼び出すときに、<xref:System.GC.CollectionCount%2A> によって返された現在の値を保存された値と比較します。</span><span class="sxs-lookup"><span data-stu-id="70d68-256">The next time you need to call <xref:System.GC.Collect%2A>, compare the current value returned by <xref:System.GC.CollectionCount%2A> to the saved value.</span></span> <span data-ttu-id="70d68-257">2つの値が等しい場合は、一時的にコレクションが発生しておらず、<xref:System.GC.Collect%2A> を再度呼び出すのが適切です。</span><span class="sxs-lookup"><span data-stu-id="70d68-257">If the two values are equal, no collection has occurred in the interim and it is reasonable to call <xref:System.GC.Collect%2A> again.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="70d68-258"><paramref name="generation" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="70d68-258"><paramref name="generation" /> is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndNoGCRegion">
      <MemberSignature Language="C#" Value="public static void EndNoGCRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndNoGCRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.EndNoGCRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndNoGCRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndNoGCRegion();" />
      <MemberSignature Language="F#" Value="static member EndNoGCRegion : unit -&gt; unit" Usage="System.GC.EndNoGCRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70d68-259">GC 領域の無待機モードを終了します。</span><span class="sxs-lookup"><span data-stu-id="70d68-259">Ends the no GC region latency mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-260"><xref:System.GC.EndNoGCRegion%2A> メソッドは、ガベージコレクターが GC 領域の無待機モードでない場合に <xref:System.InvalidOperationException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="70d68-260">The <xref:System.GC.EndNoGCRegion%2A> method throws an <xref:System.InvalidOperationException> if the garbage collector is not in no GC region latency mode.</span></span> <span data-ttu-id="70d68-261">これは、次のいずれかの状況で発生します。</span><span class="sxs-lookup"><span data-stu-id="70d68-261">This occurs under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="70d68-262"><xref:System.GC.TryStartNoGCRegion%2A> メソッドは以前に呼び出されませんでした。</span><span class="sxs-lookup"><span data-stu-id="70d68-262">The <xref:System.GC.TryStartNoGCRegion%2A> method was not called previously.</span></span>  
  
-   <span data-ttu-id="70d68-263"><xref:System.GC.TryStartNoGCRegion%2A> メソッドの呼び出しで `false`が返されました。</span><span class="sxs-lookup"><span data-stu-id="70d68-263">The call to the <xref:System.GC.TryStartNoGCRegion%2A> method returned `false`.</span></span>  
  
-   <span data-ttu-id="70d68-264"><xref:System.GC.TryStartNoGCRegion%2A> メソッドの呼び出しで例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="70d68-264">The call to the <xref:System.GC.TryStartNoGCRegion%2A> method threw an exception.</span></span>  
  
 <span data-ttu-id="70d68-265">次のようなコードを使用すると、これらのいずれかの理由で例外を回避できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-265">You can prevent an exception for any of these reasons by using code such as the following:</span></span>  
  
 [!code-csharp[System.GC.EndNoGCRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.endnogcregion/cs/endnogcregion1.cs#1)]
 [!code-vb[System.GC.EndNoGCRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.endnogcregion/vb/endnogcregion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="70d68-266">ガベージ コレクターが、GC 領域の無待機モードではありません。</span><span class="sxs-lookup"><span data-stu-id="70d68-266">The garbage collector is not in no GC region latency mode.</span></span>  
  
<span data-ttu-id="70d68-267">または</span><span class="sxs-lookup"><span data-stu-id="70d68-267">-or-</span></span> 
<span data-ttu-id="70d68-268">ガベージ コレクションが発生したために、GC 領域の無待機モードは前に終了されました。</span><span class="sxs-lookup"><span data-stu-id="70d68-268">The no GC region latency mode was ended previously because a garbage collection was induced.</span></span>  
  
<span data-ttu-id="70d68-269">または</span><span class="sxs-lookup"><span data-stu-id="70d68-269">-or-</span></span> 
<span data-ttu-id="70d68-270">メモリ割り当てが、<see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> メソッドの呼び出しで指定された量を超えています。</span><span class="sxs-lookup"><span data-stu-id="70d68-270">A memory allocation exceeded the amount specified in the call to the <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> method.</span></span></exception>
        <altmember cref="M:System.GC.TryStartNoGCRegion(System.Int64)" />
        <altmember cref="P:System.Runtime.GCSettings.LatencyMode" />
        <related type="Article" href="~/docs/standard/garbage-collection/latency.md"><span data-ttu-id="70d68-271">待機モード</span><span class="sxs-lookup"><span data-stu-id="70d68-271">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAllocatedBytesForCurrentThread">
      <MemberSignature Language="C#" Value="public static long GetAllocatedBytesForCurrentThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetAllocatedBytesForCurrentThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetAllocatedBytesForCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllocatedBytesForCurrentThread () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetAllocatedBytesForCurrentThread();" />
      <MemberSignature Language="F#" Value="static member GetAllocatedBytesForCurrentThread : unit -&gt; int64" Usage="System.GC.GetAllocatedBytesForCurrentThread " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70d68-272">その有効期間の開始以降、現在のスレッドに割り当てられた総バイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="70d68-272">Gets the total number of bytes allocated to the current thread since the beginning of its lifetime.</span></span></summary>
        <returns><span data-ttu-id="70d68-273">その有効期間の開始以降、現在のスレッドに割り当てられた総バイト数。</span><span class="sxs-lookup"><span data-stu-id="70d68-273">The total number of bytes allocated to the current thread since the beginning of its lifetime.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="70d68-274">`GetAllocatedBytesForCurrentThread` メソッドは、スレッドの有効期間中にマネージヒープに割り当てられたバイト数の合計を返します。ガベージコレクションに残った合計バイト数ではありません。</span><span class="sxs-lookup"><span data-stu-id="70d68-274">The `GetAllocatedBytesForCurrentThread` method returns the total number of bytes allocated on the managed heap during the lifetime of a thread, not the total number of bytes that have survived garbage collection.</span></span> <span data-ttu-id="70d68-275">戻り値には、ネイティブの割り当ても含まれません。</span><span class="sxs-lookup"><span data-stu-id="70d68-275">The returned value also does not include any native allocations.</span></span>

<span data-ttu-id="70d68-276">このメソッドは、時間間隔またはイベント間のメモリ割り当ての差を測定するための監視シナリオで最も役立ちます。</span><span class="sxs-lookup"><span data-stu-id="70d68-276">This method is most useful in monitoring scenarios for measuring the difference in memory allocation between time intervals or events.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGCMemoryInfo">
      <MemberSignature Language="C#" Value="public static GCMemoryInfo GetGCMemoryInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCMemoryInfo GetGCMemoryInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGCMemoryInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGCMemoryInfo () As GCMemoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCMemoryInfo GetGCMemoryInfo();" />
      <MemberSignature Language="F#" Value="static member GetGCMemoryInfo : unit -&gt; GCMemoryInfo" Usage="System.GC.GetGCMemoryInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.GCMemoryInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70d68-277">ガベージ コレクションのメモリ情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="70d68-277">Gets garbage collection memory information.</span></span></summary>
        <returns><span data-ttu-id="70d68-278">ガベージ コレクターのメモリ使用量に関する情報が含まれるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="70d68-278">An object that contains information about the garbage collector's memory usage.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGeneration">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="70d68-279">オブジェクトの現在のジェネレーション番号を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-279">Returns the current generation number of an object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetGeneration : obj -&gt; int" Usage="System.GC.GetGeneration obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="70d68-280">ジェネレーションの情報を検索する対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="70d68-280">The object that generation information is retrieved for.</span></span></param>
        <summary><span data-ttu-id="70d68-281">指定したオブジェクトの現在のジェネレーション番号を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-281">Returns the current generation number of the specified object.</span></span></summary>
        <returns><span data-ttu-id="70d68-282"><paramref name="obj" /> の現在のジェネレーション番号。</span><span class="sxs-lookup"><span data-stu-id="70d68-282">The current generation number of <paramref name="obj" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-283">このメソッドを使用してオブジェクトの経過期間を確認し、その情報を <xref:System.GC.Collect%2A> メソッドと共に使用して、ガベージコレクターが同じジェネレーションのオブジェクトを収集するように強制します。</span><span class="sxs-lookup"><span data-stu-id="70d68-283">Use this method to determine the age of an object, and then use that information with the <xref:System.GC.Collect%2A> method to force the garbage collector to collect objects in the same generation.</span></span> <span data-ttu-id="70d68-284">たとえば、グループとして作成され、同時にアクセスできなくなった一連のオブジェクトがある場合に、この方法を使用します。</span><span class="sxs-lookup"><span data-stu-id="70d68-284">For example, use this method when you have a set of objects that are created as a group and that become inaccessible at the same time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-285">次の例では、<xref:System.GC.GetGeneration%2A> メソッドを使用して、オブジェクトの経過期間を確認する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="70d68-285">The following example demonstrates how to use the <xref:System.GC.GetGeneration%2A> method to determine the age of an object.</span></span> <span data-ttu-id="70d68-286">この例では、ガベージコレクションを実行してメモリをクリーンアップし、コンソールの事前コレクションとポストコレクションのメモリの合計を比較します。</span><span class="sxs-lookup"><span data-stu-id="70d68-286">The example then performs garbage collections to clean up memory and compare the pre and post collection memory totals in the console.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (WeakReference wo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(class System.WeakReference wo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.WeakReference)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (wo As WeakReference) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(WeakReference ^ wo);" />
      <MemberSignature Language="F#" Value="static member GetGeneration : WeakReference -&gt; int" Usage="System.GC.GetGeneration wo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wo" Type="System.WeakReference" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="wo"><span data-ttu-id="70d68-287">ジェネレーション番号を確認する対象のオブジェクトを参照する <see cref="T:System.WeakReference" />。</span><span class="sxs-lookup"><span data-stu-id="70d68-287">A <see cref="T:System.WeakReference" /> that refers to the target object whose generation number is to be determined.</span></span></param>
        <summary><span data-ttu-id="70d68-288">指定した弱い参照の対象となる現在のジェネレーション番号を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-288">Returns the current generation number of the target of a specified weak reference.</span></span></summary>
        <returns><span data-ttu-id="70d68-289"><paramref name="wo" /> の対象となる現在のジェネレーション番号。</span><span class="sxs-lookup"><span data-stu-id="70d68-289">The current generation number of the target of <paramref name="wo" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="70d68-290">次の例は、<xref:System.GC.GetGeneration%2A> メソッドを使用して、弱い参照オブジェクトの経過期間を確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="70d68-290">The following example demonstrates the use of the <xref:System.GC.GetGeneration%2A> method to determine the age of a weak reference object.</span></span>  
  
 [!code-cpp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CPP/systemgcgetgenerationweak.cpp#1)]
 [!code-csharp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CS/systemgcgetgenerationweak.cs#1)]
 [!code-vb[System.GC.GetGenerationWeak Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/VB/systemgcgetgenerationweak.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="70d68-291"><paramref name="wo" /> に対して既にガベージ コレクションが実行されています。</span><span class="sxs-lookup"><span data-stu-id="70d68-291">Garbage collection has already been performed on <paramref name="wo" />.</span></span></exception>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetTotalAllocatedBytes">
      <MemberSignature Language="C#" Value="public static long GetTotalAllocatedBytes (bool precise = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTotalAllocatedBytes(bool precise) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetTotalAllocatedBytes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTotalAllocatedBytes (Optional precise As Boolean = false) As Long" />
      <MemberSignature Language="F#" Value="static member GetTotalAllocatedBytes : bool -&gt; int64" Usage="System.GC.GetTotalAllocatedBytes precise" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precise" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="precise"><span data-ttu-id="70d68-292"><see langword="true" /> の場合は正確な数値を収集します。それ以外の場合は概数を収集します。</span><span class="sxs-lookup"><span data-stu-id="70d68-292">If <see langword="true" />, gather a precise number; otherwise, gather an approximate count.</span></span> <span data-ttu-id="70d68-293">正確な値を収集すると、大幅なパフォーマンス ペナルティを伴います。</span><span class="sxs-lookup"><span data-stu-id="70d68-293">Gathering a precise value entails a significant performance penalty.</span></span></param>
        <summary><span data-ttu-id="70d68-294">プロセスの有効期間にわたって割り当てられたバイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="70d68-294">Gets a count of the bytes allocated over the lifetime of the process.</span></span></summary>
        <returns><span data-ttu-id="70d68-295">プロセスの有効期間にわたって割り当てられた合計バイト数。</span><span class="sxs-lookup"><span data-stu-id="70d68-295">The total number of bytes allocated over the lifetime of the process.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTotalMemory">
      <MemberSignature Language="C#" Value="public static long GetTotalMemory (bool forceFullCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTotalMemory(bool forceFullCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetTotalMemory(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTotalMemory (forceFullCollection As Boolean) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTotalMemory(bool forceFullCollection);" />
      <MemberSignature Language="F#" Value="static member GetTotalMemory : bool -&gt; int64" Usage="System.GC.GetTotalMemory forceFullCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forceFullCollection" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="forceFullCollection"><span data-ttu-id="70d68-296">ガベージ コレクションの発生を待ってから制御を戻す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70d68-296"><see langword="true" /> to indicate that this method can wait for garbage collection to occur before returning; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="70d68-297">現在割り当てられていると思われるバイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="70d68-297">Retrieves the number of bytes currently thought to be allocated.</span></span> <span data-ttu-id="70d68-298">パラメーターは、このメソッドが制御を戻す前に短い時間だけ待機して、システムがガベージ コレクションを行い、オブジェクトの終了操作を実行できるようにするかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="70d68-298">A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</span></span></summary>
        <returns><span data-ttu-id="70d68-299">マネージド メモリに現在割り当てられているバイト数の最もよい近似値となる数値。</span><span class="sxs-lookup"><span data-stu-id="70d68-299">A number that is the best available approximation of the number of bytes currently allocated in managed memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-300">`forceFullCollection` パラメーターが `true`の場合、このメソッドは、システムがガベージを収集してオブジェクトを終了するまで、しばらく待機してから制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="70d68-300">If the `forceFullCollection` parameter is `true`, this method waits a short interval before returning while the system collects garbage and finalizes objects.</span></span> <span data-ttu-id="70d68-301">間隔の期間は、完了したガベージコレクションサイクルの数と、サイクル間で復旧されるメモリの量の変化によって決定される、内部的に指定された制限です。</span><span class="sxs-lookup"><span data-stu-id="70d68-301">The duration of the interval is an internally specified limit determined by the number of garbage collection cycles completed and the change in the amount of memory recovered between cycles.</span></span> <span data-ttu-id="70d68-302">ガベージコレクターは、アクセスできないすべてのメモリが収集されることを保証しません。</span><span class="sxs-lookup"><span data-stu-id="70d68-302">The garbage collector does not guarantee that all inaccessible memory is collected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-303">次の例では、<xref:System.GC.GetTotalMemory%2A> メソッドを使用して、マネージメモリに現在割り当てられているバイト数を取得および表示する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="70d68-303">The following example demonstrates how to use the <xref:System.GC.GetTotalMemory%2A> method to get and display the number of bytes currently allocated in managed memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public static void KeepAlive (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void KeepAlive(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.KeepAlive(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub KeepAlive (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void KeepAlive(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member KeepAlive : obj -&gt; unit" Usage="System.GC.KeepAlive obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="70d68-304">参照するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="70d68-304">The object to reference.</span></span></param>
        <summary><span data-ttu-id="70d68-305">指定したオブジェクトを参照することにより、現在のルーチンの開始時からこのメソッドが呼び出される時点までの間、そのオブジェクトをガベージ コレクションの対象から外します。</span><span class="sxs-lookup"><span data-stu-id="70d68-305">References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-306"><xref:System.GC.KeepAlive%2A> メソッドの目的は、ガベージコレクターによって早期に解放されるリスクがあるオブジェクトへの参照を確実に存在させることです。</span><span class="sxs-lookup"><span data-stu-id="70d68-306">The purpose of the <xref:System.GC.KeepAlive%2A> method is to ensure the existence of a reference to an object that is at risk of being prematurely reclaimed by the garbage collector.</span></span> <span data-ttu-id="70d68-307">このような状況が発生する可能性がある一般的なシナリオは、マネージコードまたはデータにオブジェクトへの参照が存在しないが、そのオブジェクトが、Windows Api、アンマネージ Dll、または COM を使用したメソッドなどのアンマネージコードでまだ使用されている場合です。</span><span class="sxs-lookup"><span data-stu-id="70d68-307">A common scenario where this might happen is when there are no references to the object in managed code or data, but the object is still in use in unmanaged code such as Windows APIs, unmanaged DLLs, or methods using COM.</span></span>  
  
 <span data-ttu-id="70d68-308">このメソッドは `obj` パラメーターを参照し、ルーチンの開始から、このメソッドが呼び出される時点までのガベージコレクションに対して、そのオブジェクトの使用を不可能にします。</span><span class="sxs-lookup"><span data-stu-id="70d68-308">This method references the `obj` parameter, making that object ineligible for garbage collection from the start of the routine to the point, in execution order, where this method is called.</span></span> <span data-ttu-id="70d68-309">`obj` が使用可能である必要がある命令の範囲の末尾ではなく、このメソッドにコードを記述します。</span><span class="sxs-lookup"><span data-stu-id="70d68-309">Code this method at the end, not the beginning, of the range of instructions where `obj` must be available.</span></span>  
  
 <span data-ttu-id="70d68-310"><xref:System.GC.KeepAlive%2A> メソッドは操作を実行せず、パラメーターとして渡されたオブジェクトの有効期間を延長する以外の副作用を生成しません。</span><span class="sxs-lookup"><span data-stu-id="70d68-310">The <xref:System.GC.KeepAlive%2A> method performs no operation and produces no side effects other than extending the lifetime of the object passed in as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-311">次のコード例では、`Main` メソッドの先頭にオブジェクトを作成し、<xref:System.GC.KeepAlive%2A> メソッドが呼び出されたときに、オブジェクトを最後まで参照しません。</span><span class="sxs-lookup"><span data-stu-id="70d68-311">The following code example creates an object at the beginning of its `Main` method and does not refer to the object again until the end, when the <xref:System.GC.KeepAlive%2A> method is called.</span></span> <span data-ttu-id="70d68-312">オブジェクトは、<xref:System.GC.Collect%2A> メソッドと <xref:System.GC.WaitForPendingFinalizers%2A> メソッドの呼び出しにもかかわらず、`Main` メソッドの30秒間は永続化されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-312">The object persists for the 30-second duration of the `Main` method, despite calls to the <xref:System.GC.Collect%2A> and <xref:System.GC.WaitForPendingFinalizers%2A> methods.</span></span>  
  
 [!code-cpp[System.GC.KeepAlive Example2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CPP/gckeepalive.cpp#1)]
 [!code-csharp[System.GC.KeepAlive Example2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CS/gckeepalive.cs#1)]
 [!code-vb[System.GC.KeepAlive Example2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/VB/gckeepalive.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxGeneration">
      <MemberSignature Language="C#" Value="public static int MaxGeneration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxGeneration" />
      <MemberSignature Language="DocId" Value="P:System.GC.MaxGeneration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxGeneration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxGeneration { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxGeneration : int" Usage="System.GC.MaxGeneration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="70d68-313">システムが現在サポートしている最大のジェネレーション番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="70d68-313">Gets the maximum number of generations that the system currently supports.</span></span></summary>
        <value><span data-ttu-id="70d68-314">0 からサポートされるジェネレーションの最大番号までの値。</span><span class="sxs-lookup"><span data-stu-id="70d68-314">A value that ranges from zero to the maximum number of supported generations.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-315">オブジェクトの世代番号 (age) は、実装によって定義された、オブジェクトの有効期間の相対測定値です。</span><span class="sxs-lookup"><span data-stu-id="70d68-315">The generation number, or age, of an object is an implementation-defined relative measure of an object's lifespan.</span></span> <span data-ttu-id="70d68-316">最後に作成されたオブジェクトはジェネレーション0にあり、最も古いオブジェクトは、<xref:System.GC.MaxGeneration%2A> プロパティによって返されるジェネレーション以下のジェネレーションにあります。</span><span class="sxs-lookup"><span data-stu-id="70d68-316">The most recently created objects are in generation 0 and the oldest objects are in a generation less than or equal to the generation returned by the <xref:System.GC.MaxGeneration%2A> property.</span></span>  
  
 <span data-ttu-id="70d68-317">ガベージコレクターは、新しいメモリが古いメモリよりもガベージコレクションの対象になる可能性が高いと想定しています。</span><span class="sxs-lookup"><span data-stu-id="70d68-317">The garbage collector assumes that newer memory is more likely to be eligible for garbage collection than older memory.</span></span> <span data-ttu-id="70d68-318">そのため、ガベージコレクターは、メモリを再利用するたびに生成番号を調整することによってパフォーマンスを向上させ、<xref:System.GC.MaxGeneration%2A> のプロパティ値は時間の経過と共に増加することがあります。</span><span class="sxs-lookup"><span data-stu-id="70d68-318">Therefore, the garbage collector improves its performance by adjusting generation numbers each time it reclaims memory, and the <xref:System.GC.MaxGeneration%2A> property value can grow over time.</span></span>  
  
 <span data-ttu-id="70d68-319">オブジェクトのエージングが実装されている場合、<xref:System.GC.MaxGeneration%2A> プロパティは、システムによって使用される最大のジェネレーション番号を返します。それ以外の場合、このプロパティは0を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-319">If object aging is implemented, the <xref:System.GC.MaxGeneration%2A> property returns the maximum generation number used by the system; otherwise, this property returns zero.</span></span>  
  
 <span data-ttu-id="70d68-320">この実装では、<xref:System.GC.MaxGeneration> プロパティによって返される値は、実行中のアプリケーションの有効期間にわたって一定のままであることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-320">For this implementation, the value returned by the <xref:System.GC.MaxGeneration> property is guaranteed to remain constant for the lifetime of an executing application.</span></span>  
  
 <span data-ttu-id="70d68-321"><xref:System.GC.MaxGeneration> プロパティを使用して、生成パラメーターを受け取る <xref:System.GC.Collect%28System.Int32%29> メソッドを呼び出すときに指定できる最大値を決定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-321">Use the <xref:System.GC.MaxGeneration> property to determine the maximum value you can specify when calling the <xref:System.GC.Collect%28System.Int32%29> method that takes a generation parameter.</span></span>
 
 
## Examples  
 <span data-ttu-id="70d68-322">次の例では、<xref:System.GC.MaxGeneration> プロパティを使用して、現在使用されている最大のジェネレーション番号を表示する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="70d68-322">The following example demonstrates how to use the <xref:System.GC.MaxGeneration> property to display the largest generation number currently in use.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.GetGeneration(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForFullGCNotification">
      <MemberSignature Language="C#" Value="public static void RegisterForFullGCNotification (int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForFullGCNotification(int32 maxGenerationThreshold, int32 largeObjectHeapThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RegisterForFullGCNotification(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForFullGCNotification (maxGenerationThreshold As Integer, largeObjectHeapThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForFullGCNotification(int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberSignature Language="F#" Value="static member RegisterForFullGCNotification : int * int -&gt; unit" Usage="System.GC.RegisterForFullGCNotification (maxGenerationThreshold, largeObjectHeapThreshold)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxGenerationThreshold" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="largeObjectHeapThreshold" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="maxGenerationThreshold"><span data-ttu-id="70d68-323">ジェネレーション 2 に割り当てられたオブジェクト数に基づいて通知を発行するタイミングを指定する、1 ～ 99 の数値。</span><span class="sxs-lookup"><span data-stu-id="70d68-323">A number between 1 and 99 that specifies when the notification should be raised based on the objects allocated in generation 2.</span></span></param>
        <param name="largeObjectHeapThreshold"><span data-ttu-id="70d68-324">大きなオブジェクトのヒープに割り当てられたオブジェクト数に基づいて通知を発行するタイミングを指定する、1 ～ 99 の数値。</span><span class="sxs-lookup"><span data-stu-id="70d68-324">A number between 1 and 99 that specifies when the notification should be raised based on objects allocated in the large object heap.</span></span></param>
        <summary><span data-ttu-id="70d68-325">フル ガベージ コレクションの可能性が高い状態のとき、およびガベージ コレクションが完了したときに、ガベージ コレクションの通知を発行する必要があることを指定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-325">Specifies that a garbage collection notification should be raised when conditions favor full garbage collection and when the collection has been completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-326">ガベージコレクターは、生成のたびに、そのジェネレーションに対する割り当てのしきい値を設定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-326">For each generation, the garbage collector sets a threshold for allocations into that generation.</span></span> <span data-ttu-id="70d68-327">割り当てのサイズがこのしきい値を超えると、そのジェネレーションに対してガベージコレクションがトリガーされます。</span><span class="sxs-lookup"><span data-stu-id="70d68-327">When the size of allocations exceeds this threshold, a garbage collection is triggered on that generation.</span></span> <span data-ttu-id="70d68-328">たとえば、ジェネレーション2のしきい値が 20 MB の場合 (20 MB がジェネレーション1のコレクションを保持し、ジェネレーション2に昇格される)、20 MB を超えるジェネレーション1が残っていて、ジェネレーション2に対してメッセージが表示される場合、次のガベージコレクションはジェネレーション2のコレクションとして試行されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-328">For example, if generation 2's threshold is 20MB (which means that 20MB survives generation 1 collections and is promoted into generation 2), and more than 20MB has survived generation 1 and is prompted into generation 2, the next garbage collection will be attempted as a generation 2 collection.</span></span> <span data-ttu-id="70d68-329">同様に、大きなオブジェクトヒープ (LOH) のしきい値が 20 MB で、アプリに大きなオブジェクトが 20 MB を超える量が割り当てられている場合は、次のガベージコレクションもジェネレーション2のコレクションとして試行されます (LOH は gen2 ガベージコレクションでのみ収集されるため)。</span><span class="sxs-lookup"><span data-stu-id="70d68-329">Similarly, if the large object heap's (LOH's) threshold is 20MB and your app has allocated more than 20MB of large objects, the next garbage collection will also be attempted as a generation 2 collection (since the LOH is only collected in gen2 garbage collections).</span></span>  
  
 <span data-ttu-id="70d68-330">`maxGenerationThreshold` と `largeObjectHeapThreshold` のしきい値は、フルガベージコレクションが発生する前に事前に通知する量を制御します。</span><span class="sxs-lookup"><span data-stu-id="70d68-330">The `maxGenerationThreshold` and `largeObjectHeapThreshold` thresholds control how much in advance you are notified before a full garbage collection occurs.</span></span> <span data-ttu-id="70d68-331">しきい値が大きいほど、通知と次のフルガベージコレクションの間に発生する割り当てが増加します。</span><span class="sxs-lookup"><span data-stu-id="70d68-331">The greater the threshold, the more allocations that can occur between notification and the next full garbage collection.</span></span>  
  
 <span data-ttu-id="70d68-332">共通言語ランタイムによるフルガベージコレクションがアプリケーションのパフォーマンスに悪影響を与える場合は、ランタイムがフルガベージコレクションを実行しようとしているときに通知を受け取り、条件が満たされている場合は (<xref:System.GC.Collect%2A> メソッドを使用して) コレクションを回避することができます。</span><span class="sxs-lookup"><span data-stu-id="70d68-332">If you have situations in which a full garbage collection by the common language runtime would adversely affect your application's performance, you can ask to be notified when the runtime is about to do a full garbage collection and circumvent that collection by inducing a collection yourself (using the <xref:System.GC.Collect%2A> method) when conditions are still favorable.</span></span> <span data-ttu-id="70d68-333">ガベージコレクションのスケジュールを自分で変更するだけでなく、完全な GC 通知は、次のシナリオにも役立ちます。</span><span class="sxs-lookup"><span data-stu-id="70d68-333">In addition to changing the garbage collection schedule yourself, full GC notification is useful in following the scenarios:</span></span>  
  
-   <span data-ttu-id="70d68-334">フルガベージコレクションのアプローチを監視し、1つが近づいていることが通知されたら、ライブデータサイズを減らします (キャッシュエントリをいくつか解放するなど)。</span><span class="sxs-lookup"><span data-stu-id="70d68-334">You monitor for the approach of a full garbage collection and, when you are notified that one is approaching, you reduce live data size (for example, by releasing some cache entries).</span></span> <span data-ttu-id="70d68-335">その結果、ガベージコレクションが発生すると、より多くのメモリを再利用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="70d68-335">As a result, when the garbage collection occurs, it is able to reclaim more memory.</span></span>  
  
-   <span data-ttu-id="70d68-336">すべての統計情報を収集できるように、フルガベージコレクションの完了を監視します。</span><span class="sxs-lookup"><span data-stu-id="70d68-336">You monitor for the completion of a full garbage collection so that you can collect some statistics.</span></span>  <span data-ttu-id="70d68-337">たとえば、ライブデータのサイズを把握できるように、GC の完了時にヒープのサイズを測定することができます。</span><span class="sxs-lookup"><span data-stu-id="70d68-337">For example, you might want to measure the size of the heap at GC completion so that you know the size of live data.</span></span> <span data-ttu-id="70d68-338">(完全な GC の後、ヒープのサイズは最小になります)。</span><span class="sxs-lookup"><span data-stu-id="70d68-338">(After a full GC, the heap is at its smallest size.)</span></span>  
  
 <span data-ttu-id="70d68-339">フルガベージコレクションを表す内容の詳細については、「[ガベージコレクションの通知](~/docs/standard/garbage-collection/notifications.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="70d68-339">For more information about what represents a full garbage collection, see [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md).</span></span>  
  
 <span data-ttu-id="70d68-340">ガベージコレクションの通知に登録すると、フルガベージコレクションが近づいたときと完了したときに通知を受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="70d68-340">When you register for a garbage collection notification, you can be notified when a full garbage collection is approaching and when it is completed.</span></span> <span data-ttu-id="70d68-341">このパターンは、オペレーティングシステムがメモリ不足通知を監視する方法に似ています。</span><span class="sxs-lookup"><span data-stu-id="70d68-341">This pattern resembles how the operating system monitors for low memory notifications.</span></span>  
  
 <span data-ttu-id="70d68-342">`maxGenerationThreshold` パラメーターと `largeObjectHeapThreshold` パラメーターを指定する場合は、次のガイドラインに従ってください。</span><span class="sxs-lookup"><span data-stu-id="70d68-342">Use the following guidelines for specifying the `maxGenerationThreshold` and `largeObjectHeapThreshold` parameters:</span></span>  
  
-   <span data-ttu-id="70d68-343">しきい値が大きいほど、通知とフルガベージコレクションの間で割り当てが増えることになります。</span><span class="sxs-lookup"><span data-stu-id="70d68-343">The larger the threshold value, the more allocations will occur between the notification and the full garbage collection.</span></span>  
  
     <span data-ttu-id="70d68-344">しきい値を大きくすると、実行時に近づいているコレクションをチェックする機会が増えます。</span><span class="sxs-lookup"><span data-stu-id="70d68-344">A larger threshold value provides more opportunities for the runtime to check for an approaching collection.</span></span> <span data-ttu-id="70d68-345">これにより、通知される可能性が高くなります。</span><span class="sxs-lookup"><span data-stu-id="70d68-345">This increases the likelihood that you will be notified.</span></span> <span data-ttu-id="70d68-346">ただし、しきい値を設定しないでください。これは、ランタイムが次のコレクションを誘発する前に割り当てが増えるためです。</span><span class="sxs-lookup"><span data-stu-id="70d68-346">However, you should not set the threshold too high because that results in a more allocations before the runtime induces the next collection.</span></span>  
  
     <span data-ttu-id="70d68-347">高いしきい値を使用して通知した後にコレクションを強制的に実行すると、ランタイムの次のコレクションによって再利用されるよりも多くのオブジェクトが解放されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-347">When you induce a collection yourself upon notification using a high threshold value, fewer objects are reclaimed than would be reclaimed by the runtime's next collection.</span></span>  
  
-   <span data-ttu-id="70d68-348">しきい値が小さいほど、通知とフルガベージコレクションの間の割り当てが少なくなります。</span><span class="sxs-lookup"><span data-stu-id="70d68-348">The smaller the threshold value, the fewer the allocations between notification and the full garbage collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-349">次の例は、ガベージコレクションの通知を登録し、ガベージコレクションの通知の状態を監視するスレッドを開始する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="70d68-349">The following example shows how to register a garbage collection notification and start a thread to monitor the status of the garbage collection notification.</span></span> <span data-ttu-id="70d68-350">このコード例は、「[ガベージコレクションの通知](~/docs/standard/garbage-collection/notifications.md)」トピックで提供されている、より大きな例の一部です。</span><span class="sxs-lookup"><span data-stu-id="70d68-350">This code example is part of a larger example provided for [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#2](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#2)]
 [!code-csharp[GCNotification#2](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#2)]
 [!code-vb[GCNotification#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="70d68-351"><paramref name="maxGenerationThreshold" /> または <paramref name="largeObjectHeapThreshold" /> は 1 ～ 99 の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="70d68-351"><paramref name="maxGenerationThreshold" /> or <paramref name="largeObjectHeapThreshold" /> is not between 1 and 99.</span></span></exception>
        <related type="Article" href="~/docs/standard/garbage-collection/notifications.md"><span data-ttu-id="70d68-352">ガベージ コレクションの通知</span><span class="sxs-lookup"><span data-stu-id="70d68-352">Garbage Collection Notifications</span></span></related>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="70d68-353">同時実行ガベージ コレクションが有効の場合、このメンバーは使用できません。</span><span class="sxs-lookup"><span data-stu-id="70d68-353">This member is not available when concurrent garbage collection is enabled.</span></span> <span data-ttu-id="70d68-354">同時実行ガベージ コレクションを無効にする方法については、&lt;gcConcurrent&gt; 実行時設定をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="70d68-354">See the &lt;gcConcurrent&gt; runtime setting for information about how to disable concurrent garbage collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveMemoryPressure">
      <MemberSignature Language="C#" Value="public static void RemoveMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RemoveMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMemoryPressure(long bytesAllocated);" />
      <MemberSignature Language="F#" Value="static member RemoveMemoryPressure : int64 -&gt; unit" Usage="System.GC.RemoveMemoryPressure bytesAllocated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated"><span data-ttu-id="70d68-355">解放されたアンマネージ メモリの量。</span><span class="sxs-lookup"><span data-stu-id="70d68-355">The amount of unmanaged memory that has been released.</span></span></param>
        <summary><span data-ttu-id="70d68-356">アンマネージ メモリが解放され、ガベージ コレクションのスケジュールにこのメモリを考慮する必要がなくなったことをランタイムに通知します。</span><span class="sxs-lookup"><span data-stu-id="70d68-356">Informs the runtime that unmanaged memory has been released and no longer needs to be taken into account when scheduling garbage collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-357">ガベージコレクションをスケジュールするタイミングを決定するときに、ランタイムは、割り当てられているマネージメモリの量を考慮します。</span><span class="sxs-lookup"><span data-stu-id="70d68-357">In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated.</span></span> <span data-ttu-id="70d68-358">小さいマネージオブジェクトによって大量のアンマネージメモリが割り当てられている場合、ランタイムはマネージメモリだけを考慮して、ガベージコレクションのスケジュールの緊急度を過小評価します。</span><span class="sxs-lookup"><span data-stu-id="70d68-358">If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection.</span></span> <span data-ttu-id="70d68-359"><xref:System.GC.AddMemoryPressure%2A> メソッドは、システムメモリに対するこの追加の負荷をランタイムに通知し、<xref:System.GC.RemoveMemoryPressure%2A> メソッドは、追加の負荷が解放されたことをランタイムに通知します。</span><span class="sxs-lookup"><span data-stu-id="70d68-359">The <xref:System.GC.AddMemoryPressure%2A> method informs the runtime of this additional pressure on system memory, and the <xref:System.GC.RemoveMemoryPressure%2A> method informs the runtime that the additional pressure has been released.</span></span>  
  
 <span data-ttu-id="70d68-360">最も単純な使用パターンでは、マネージオブジェクトはアンマネージメモリをコンストラクターに割り当て、`Dispose` または `Finalize` メソッドで解放します。</span><span class="sxs-lookup"><span data-stu-id="70d68-360">In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the `Dispose` or `Finalize` method.</span></span> <span data-ttu-id="70d68-361">アンマネージメモリを割り当てた後、<xref:System.GC.AddMemoryPressure%2A> メソッドを呼び出し、<xref:System.GC.RemoveMemoryPressure%2A> メソッドを解放した後に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="70d68-361">Call the <xref:System.GC.AddMemoryPressure%2A> method after allocating the unmanaged memory, and call the <xref:System.GC.RemoveMemoryPressure%2A> method after releasing it.</span></span>  
  
 <span data-ttu-id="70d68-362">マネージオブジェクトの有効期間中にアンマネージメモリの割り当てが大幅に変更される、より複雑なシナリオでは、<xref:System.GC.AddMemoryPressure%2A> および <xref:System.GC.RemoveMemoryPressure%2A> メソッドを呼び出して、これらの増分変更をランタイムに通知できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-362">In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the <xref:System.GC.AddMemoryPressure%2A> and <xref:System.GC.RemoveMemoryPressure%2A> methods to communicate these incremental changes to the runtime.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="70d68-363">追加する圧力の量を正確に取り除く必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-363">You must ensure that you remove exactly the amount of pressure you add.</span></span> <span data-ttu-id="70d68-364">この操作を行わないと、長時間にわたって実行されるアプリケーションのシステムのパフォーマンスに悪影響を及ぼす可能性があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-364">Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="70d68-365"><paramref name="bytesAllocated" /> が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="70d68-365"><paramref name="bytesAllocated" /> is less than or equal to 0.</span></span>  
  
<span data-ttu-id="70d68-366">または</span><span class="sxs-lookup"><span data-stu-id="70d68-366">-or-</span></span> 
<span data-ttu-id="70d68-367">32 ビットのコンピューターで、<paramref name="bytesAllocated" /> の値が <see cref="F:System.Int32.MaxValue" /> の値を超えています。</span><span class="sxs-lookup"><span data-stu-id="70d68-367">On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReRegisterForFinalize">
      <MemberSignature Language="C#" Value="public static void ReRegisterForFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReRegisterForFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.ReRegisterForFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReRegisterForFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReRegisterForFinalize(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member ReRegisterForFinalize : obj -&gt; unit" Usage="System.GC.ReRegisterForFinalize obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="70d68-368">ファイナライザーの呼び出しが必要なオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="70d68-368">The object that a finalizer must be called for.</span></span></param>
        <summary><span data-ttu-id="70d68-369"><see cref="M:System.GC.SuppressFinalize(System.Object)" /> が事前に呼び出されている指定オブジェクトに対して、ファイナライザーを呼び出すことをシステムに要求します。</span><span class="sxs-lookup"><span data-stu-id="70d68-369">Requests that the system call the finalizer for the specified object for which <see cref="M:System.GC.SuppressFinalize(System.Object)" /> has previously been called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-370"><xref:System.GC.ReRegisterForFinalize%2A> メソッドは、ガベージコレクターがオブジェクトを解放する前に、終了を要求するオブジェクトのリストに `obj` パラメーターを追加します。</span><span class="sxs-lookup"><span data-stu-id="70d68-370">The <xref:System.GC.ReRegisterForFinalize%2A> method adds the `obj` parameter to the list of objects that request finalization before the garbage collector frees the object.</span></span> <span data-ttu-id="70d68-371">`obj` パラメーターは、このメソッドの呼び出し元である必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-371">The `obj` parameter must be the caller of this method.</span></span>  
  
 <span data-ttu-id="70d68-372"><xref:System.GC.ReRegisterForFinalize%2A> メソッドを呼び出すと、ガベージコレクターがオブジェクトのファイナライザーを呼び出すことは保証されません。</span><span class="sxs-lookup"><span data-stu-id="70d68-372">Calling the <xref:System.GC.ReRegisterForFinalize%2A> method does not guarantee that the garbage collector will call an object's finalizer.</span></span>  
  
 <span data-ttu-id="70d68-373">既定では、ファイナライザーを実装するすべてのオブジェクトが、終了を必要とするオブジェクトの一覧に追加されます。ただし、オブジェクトは既に完了しているか、<xref:System.GC.SuppressFinalize%2A> メソッドを呼び出すことによって終了処理が無効になっている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-373">By default, all objects that implement finalizers are added to the list of objects that require finalization; however, an object might have already been finalized or might have disabled finalization by calling the <xref:System.GC.SuppressFinalize%2A> method.</span></span>  
  
 <span data-ttu-id="70d68-374">ファイナライザーは、このメソッドを使用して、自身またはそれが参照するオブジェクトをやり直すすることができます。</span><span class="sxs-lookup"><span data-stu-id="70d68-374">A finalizer can use this method to resurrect itself or an object that it references.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-375">次の例では、<xref:System.GC.ReRegisterForFinalize%2A> メソッドを使用して、ガベージコレクション後にオブジェクトを2回目に終了する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="70d68-375">The following example demonstrates how to use the <xref:System.GC.ReRegisterForFinalize%2A> method to finalize an object a second time after garbage collection.</span></span>  
  
 [!code-cpp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CS/class1.cs#1)]
 [!code-vb[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="70d68-376"><paramref name="obj" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="70d68-376"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.GC.SuppressFinalize(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressFinalize">
      <MemberSignature Language="C#" Value="public static void SuppressFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SuppressFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.SuppressFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SuppressFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SuppressFinalize(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member SuppressFinalize : obj -&gt; unit" Usage="System.GC.SuppressFinalize obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="70d68-377">実行すべきではないファイナライザーを持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="70d68-377">The object whose finalizer must not be executed.</span></span></param>
        <summary><span data-ttu-id="70d68-378">指定したオブジェクトに対してファイナライザーを呼び出さないよう共通言語ランタイムに要求します。</span><span class="sxs-lookup"><span data-stu-id="70d68-378">Requests that the common language runtime not call the finalizer for the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="70d68-379">このメソッドは、`obj`のオブジェクト ヘッダー内のビットを設定しています。このビットは、ファイナライザー呼び出しの際にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="70d68-379">This method sets a bit in the object header of `obj`, which the runtime checks when calling finalizers.</span></span> <span data-ttu-id="70d68-380"><xref:System.Object.Finalize%2A?displayProperty=nameWithType> によって表されるファイナライザーは、オブジェクトがガベージ コレクションされる前に、アンマネージ リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="70d68-380">A finalizer, which is represented by the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, is used to release unmanaged resources before an object is garbage-collected.</span></span> <span data-ttu-id="70d68-381">`obj` にファイナライザーがない場合、または GC がファイナライザーを実行するためにファイナライザースレッドに既にシグナルを通知している場合、<xref:System.GC.SuppressFinalize%2A> メソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="70d68-381">If `obj` does not have a finalizer or the GC has already signaled the finalizer thread to run the finalizer, the call to the <xref:System.GC.SuppressFinalize%2A> method has no effect.</span></span>  
  
 <span data-ttu-id="70d68-382"><xref:System.IDisposable>インターフェイスを実装するオブジェクトは、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>メソッド内でこのメソッドを呼び出すことができます。そのようにして、ガベージ コレクターが不必要にな<xref:System.Object.Finalize%2A?displayProperty=nameWithType>を呼び出すことを避けられます。</span><span class="sxs-lookup"><span data-stu-id="70d68-382">Objects that implement the <xref:System.IDisposable> interface can call this method from the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to prevent the garbage collector from calling <xref:System.Object.Finalize%2A?displayProperty=nameWithType> on an object that does not require it.</span></span> <span data-ttu-id="70d68-383">通常、これは、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>によってすでに解放されているアンマネージ リソースをファイナライザーが解放しようとするのを防ぐために実装されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-383">Typically, this is done to prevent the finalizer from releasing unmanaged resources that have already been freed by the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-384">次の例では、冗長なガベージ コレクション呼び出しを防ぐため、リソース クラスにおいて<xref:System.GC.SuppressFinalize%2A>を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="70d68-384">The following example demonstrates how to use the <xref:System.GC.SuppressFinalize%2A> method in a resource class to prevent a redundant garbage collection from being called.</span></span> <span data-ttu-id="70d68-385">[dispose パターン](~/docs/standard/garbage-collection/implementing-dispose.md)を用いて、マネージ リソース(<xref:System.IDisposable>を実装するオブジェクト)とアンマネージ リソースの両方を解放しています。</span><span class="sxs-lookup"><span data-stu-id="70d68-385">The example uses the [dispose pattern](~/docs/standard/garbage-collection/implementing-dispose.md) to free both managed resources (that is, objects that implement <xref:System.IDisposable>) and unmanaged resources.</span></span>  
  
 [!code-csharp[System.GC.SuppressFinalize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.suppressfinalize/cs/suppressfinalize1.cs#1)]
 [!code-vb[System.GC.SuppressFinalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.suppressfinalize/vb/suppressfinalize1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="70d68-386"><paramref name="obj" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="70d68-386"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.GC.ReRegisterForFinalize(System.Object)" />
        <altmember cref="M:System.Object.Finalize" />
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="70d68-387">Dispose パターン</span><span class="sxs-lookup"><span data-stu-id="70d68-387">Dispose Pattern</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryStartNoGCRegion">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="70d68-388">クリティカル パスの実行中はガベージ コレクションが行われないよう、試行します。</span><span class="sxs-lookup"><span data-stu-id="70d68-388">Attempts to disallow garbage collection during the execution of a critical path.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="70d68-389"><xref:System.GC.TryStartNoGCRegion%2A> メソッドへの呼び出しを入れ子にすることはできません。また、ランタイムが現在 GC 領域の待機時間モードでない場合にのみ、<xref:System.GC.EndNoGCRegion%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-389">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="70d68-390">つまり、<xref:System.GC.TryStartNoGCRegion%2A> を何度も呼び出さないでください (最初のメソッド呼び出しの後、以降の呼び出しは成功しません)。 <xref:System.GC.TryStartNoGCRegion%2A> の最初の呼び出しが成功したため、<xref:System.GC.EndNoGCRegion%2A> への呼び出しが成功するとは限りません。</span><span class="sxs-lookup"><span data-stu-id="70d68-390">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 -&gt; bool" Usage="System.GC.TryStartNoGCRegion totalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="70d68-391">ガベージ コレクションをトリガーすることなく割り当てるメモリの量 (バイト) を指定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-391">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="70d68-392">短期セグメントのサイズ以下でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="70d68-392">It must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="70d68-393">短期セグメントのサイズの詳細については、「[ガベージ コレクションの基礎](~/docs/standard/garbage-collection/fundamentals.md)」記事の "短期のジェネレーションとセグメント" セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="70d68-393">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span></span></param>
        <summary><span data-ttu-id="70d68-394">指定した量のメモリを使用可能な場合、クリティカル パスの実行中にガベージ コレクションが行われないよう、試行します。</span><span class="sxs-lookup"><span data-stu-id="70d68-394">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available.</span></span></summary>
        <returns><span data-ttu-id="70d68-395">ランタイムが、必要な量のメモリをコミットできたため、ガベージ コレクターが GC 領域の無待機モードに入ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70d68-395"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-396"><xref:System.GC.TryStartNoGCRegion%28System.Int64%29> メソッドは、ガベージコレクターを GC 領域の無待機モードで配置しようとします。このモードでは、アプリがコードの重要な領域を実行している間はガベージコレクションを実行できません。</span><span class="sxs-lookup"><span data-stu-id="70d68-396">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="70d68-397">ランタイムが最初に要求された量のメモリを割り当てることができない場合、ガベージコレクターは、追加のメモリを解放するために、フルブロッキングガベージコレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="70d68-397">If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory.</span></span> <span data-ttu-id="70d68-398">必要な量のメモリを割り当てることができる場合、ガベージコレクターは GC 領域の待機モードを開始しません。この場合、実際には 2 \* `totalSize` バイト (小さいオブジェクトヒープの場合は `totalSize` バイト、大きなオブジェクトヒープの場合は `totalSize` バイト) が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="70d68-398">The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 \* `totalSize` bytes (it attempts to allocate `totalSize` bytes for the small object heap and `totalSize` bytes for the large object heap).</span></span>  
  
 <span data-ttu-id="70d68-399">`totalSize` は、クリティカルパスで発生するすべてのメモリ割り当てを処理するのに十分な大きさである必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-399">`totalSize` must be large enough to handle all memory allocations that occur in the critical path.</span></span> <span data-ttu-id="70d68-400">これには、アプリによる割り当てに加え、アプリの代わりにランタイムが行う割り当ても含まれます。</span><span class="sxs-lookup"><span data-stu-id="70d68-400">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="70d68-401"><xref:System.GC.TryStartNoGCRegion%2A> メソッドへの呼び出しを入れ子にすることはできません。また、ランタイムが現在 GC 領域の待機時間モードでない場合にのみ、<xref:System.GC.EndNoGCRegion%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-401">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="70d68-402">つまり、<xref:System.GC.TryStartNoGCRegion%2A> を何度も呼び出さないでください (最初のメソッド呼び出しの後、以降の呼び出しは成功しません)。 <xref:System.GC.TryStartNoGCRegion%2A> の最初の呼び出しが成功したため、<xref:System.GC.EndNoGCRegion%2A> への呼び出しが成功するとは限りません。</span><span class="sxs-lookup"><span data-stu-id="70d68-402">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="70d68-403"><xref:System.GC.EndNoGCRegion%2A> メソッドを呼び出して、GC 領域の無待機モードを終了します。</span><span class="sxs-lookup"><span data-stu-id="70d68-403">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="70d68-404"><paramref name="totalSize" /> は、短期セグメント サイズを超えています。</span><span class="sxs-lookup"><span data-stu-id="70d68-404"><paramref name="totalSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="70d68-405">プロセスは既に、非 GC 領域待機時間モードになっています。</span><span class="sxs-lookup"><span data-stu-id="70d68-405">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="~/docs/standard/garbage-collection/fundamentals.md"><span data-ttu-id="70d68-406">ガベージ コレクションの基礎</span><span class="sxs-lookup"><span data-stu-id="70d68-406">Fundamentals of Garbage Collection</span></span></related>
        <related type="Article" href="~/docs/standard/garbage-collection/latency.md"><span data-ttu-id="70d68-407">待機モード</span><span class="sxs-lookup"><span data-stu-id="70d68-407">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * bool -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, disallowFullBlockingGC)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="70d68-408">ガベージ コレクションをトリガーすることなく割り当てるメモリの量 (バイト) を指定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-408">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="70d68-409">短期セグメントのサイズ以下でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="70d68-409">It must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="70d68-410">短期セグメントのサイズの詳細については、「[ガベージ コレクションの基礎](~/docs/standard/garbage-collection/fundamentals.md)」記事の "短期のジェネレーションとセグメント" セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="70d68-410">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span></span></param>
        <param name="disallowFullBlockingGC"><span data-ttu-id="70d68-411">ガベージ コレクターが最初に <see langword="true" /> バイトを割り当てられなかったときにフル ブロッキング ガベージ コレクションを省略する場合は <paramref name="totalSize" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70d68-411"><see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate <paramref name="totalSize" /> bytes; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="70d68-412">指定した量のメモリを使用可能な場合は、クリティカル パスの実行中にガベージ コレクションが行われないよう、試行します。また、最初に十分な量のメモリを使用できない場合に、ガベージ コレクターがフル ブロッキング ガベージ コレクションを実行するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="70d68-412">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</span></span></summary>
        <returns><span data-ttu-id="70d68-413">ランタイムが、必要な量のメモリをコミットできたため、ガベージ コレクターが GC 領域の無待機モードに入ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70d68-413"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-414"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Boolean%29> メソッドは、ガベージコレクターを GC 領域の無待機モードで配置しようとします。このモードでは、アプリがコードの重要な領域を実行している間はガベージコレクションを実行できません。</span><span class="sxs-lookup"><span data-stu-id="70d68-414">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Boolean%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="70d68-415">ランタイムが最初に要求されたメモリ量を割り当てられず、`disallowFullBlockingGC` 引数が `false`場合、ガベージコレクターは、追加のメモリを解放するために、フルブロッキングガベージコレクションを実行します。それ以外の場合、割り当ては失敗し、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-415">If the runtime is unable to initially allocate the requested amount of memory and the `disallowFullBlockingGC` argument is `false`, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns `false`.</span></span> <span data-ttu-id="70d68-416">必要な量のメモリを割り当てることができる場合、ガベージコレクターは GC 領域の待機モードを開始しません。この場合、実際には 2 \* `totalSize` (小さいオブジェクトヒープの場合は `totalSize` を割り当て、大きなオブジェクトヒープの場合は `totalSize` を割り当てます)。</span><span class="sxs-lookup"><span data-stu-id="70d68-416">The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 \* `totalSize` (it attempts to allocate `totalSize` for the small object heap and `totalSize` for the large object heap).</span></span>  
  
 <span data-ttu-id="70d68-417">`totalSize` は、クリティカルパスで発生するすべてのメモリ割り当てを処理するのに十分な大きさである必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-417">`totalSize` must be large enough to handle all memory allocations that occur in the critical path.</span></span> <span data-ttu-id="70d68-418">これには、アプリによる割り当てに加え、アプリの代わりにランタイムが行う割り当ても含まれます。</span><span class="sxs-lookup"><span data-stu-id="70d68-418">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
 <span data-ttu-id="70d68-419">`disallowFullBlockingGC` を `true` に設定すると、最初から十分なメモリを確保できない場合でも、負荷分散のシナリオで最も役立ちます。1つのシステムがこのメソッドを呼び出し、`true`を返す場合は要求を受け入れる準備完了として報告し、`false`が返された場合はロードバランサーが他のシステムに要求をリダイレクトするようにします。</span><span class="sxs-lookup"><span data-stu-id="70d68-419">Setting `disallowFullBlockingGC` to `true` to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns `true`, and have the load balancer redirect requests to other systems if it returns `false`.</span></span> <span data-ttu-id="70d68-420">その後、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> メソッドを呼び出すことによって要求を処理しない場合は、フルブロッキングガベージコレクションを実行できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-420">It can then do a full blocking garbage collection when it's not handling requests by calling the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="70d68-421"><xref:System.GC.TryStartNoGCRegion%2A> メソッドへの呼び出しを入れ子にすることはできません。また、ランタイムが現在 GC 領域の待機時間モードでない場合にのみ、<xref:System.GC.EndNoGCRegion%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-421">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="70d68-422">つまり、<xref:System.GC.TryStartNoGCRegion%2A> を何度も呼び出さないでください (最初のメソッド呼び出しの後、以降の呼び出しは成功しません)。 <xref:System.GC.TryStartNoGCRegion%2A> の最初の呼び出しが成功したため、<xref:System.GC.EndNoGCRegion%2A> への呼び出しが成功するとは限りません。</span><span class="sxs-lookup"><span data-stu-id="70d68-422">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="70d68-423"><xref:System.GC.EndNoGCRegion%2A> メソッドを呼び出して、GC 領域の無待機モードを終了します。</span><span class="sxs-lookup"><span data-stu-id="70d68-423">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="70d68-424"><paramref name="totalSize" /> は、短期セグメント サイズを超えています。</span><span class="sxs-lookup"><span data-stu-id="70d68-424"><paramref name="totalSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="70d68-425">プロセスは既に、非 GC 領域待機時間モードになっています。</span><span class="sxs-lookup"><span data-stu-id="70d68-425">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="~/docs/standard/garbage-collection/fundamentals.md"><span data-ttu-id="70d68-426">ガベージ コレクションの基礎</span><span class="sxs-lookup"><span data-stu-id="70d68-426">Fundamentals of Garbage Collection</span></span></related>
        <related type="Article" href="~/docs/standard/garbage-collection/latency.md"><span data-ttu-id="70d68-427">待機モード</span><span class="sxs-lookup"><span data-stu-id="70d68-427">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * int64 -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, lohSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="lohSize" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="70d68-428">ガベージ コレクションをトリガーすることなく割り当てるメモリの量 (バイト) を指定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-428">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="70d68-429"><paramref name="totalSize" /> -<paramref name="lohSize" /> は、短期セグメントのサイズ以下でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="70d68-429"><paramref name="totalSize" /> -<paramref name="lohSize" /> must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="70d68-430">短期セグメントのサイズの詳細については、「[ガベージ コレクションの基礎](~/docs/standard/garbage-collection/fundamentals.md)」記事の "短期のジェネレーションとセグメント" セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="70d68-430">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span></span></param>
        <param name="lohSize"><span data-ttu-id="70d68-431"><paramref name="totalSize" /> のうち、に大きなオブジェクト ヒープ (LOH) の割り当てに使用するバイト数。</span><span class="sxs-lookup"><span data-stu-id="70d68-431">The number of bytes in <paramref name="totalSize" /> to use for large object heap (LOH) allocations.</span></span></param>
        <summary><span data-ttu-id="70d68-432">大きなオブジェクト ヒープおよび小さなオブジェクト ヒープに対して、指定した量のメモリを使用可能な場合、クリティカル パスの実行中にガベージ コレクションが行われないよう、試行します。</span><span class="sxs-lookup"><span data-stu-id="70d68-432">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap.</span></span></summary>
        <returns><span data-ttu-id="70d68-433">ランタイムが、必要な量のメモリをコミットできたため、ガベージ コレクターが GC 領域の無待機モードに入ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70d68-433"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-434"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%29> メソッドは、ガベージコレクターを GC 領域の無待機モードで配置しようとします。このモードでは、アプリがコードの重要な領域を実行している間はガベージコレクションを実行できません。</span><span class="sxs-lookup"><span data-stu-id="70d68-434">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="70d68-435">ランタイムが最初に要求された量のメモリを割り当てることができない場合、ガベージコレクターは、追加のメモリを解放するために、フルブロッキングガベージコレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="70d68-435">If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory.</span></span> <span data-ttu-id="70d68-436">このガベージコレクターでは、LOH と `totalSize` - `lohSize` の小さなオブジェクトヒープ (SOH) に対して `lohSize` を割り当てることができる場合、GC 領域の待機時間モードは発生しません。</span><span class="sxs-lookup"><span data-stu-id="70d68-436">The garbage collector enters no GC region latency mode if it is able to allocate `lohSize` for the LOH and `totalSize` - `lohSize` for the small object heap (SOH).</span></span>  
  
 <span data-ttu-id="70d68-437">`lohSize` は、LOH のクリティカルパスで発生するすべてのメモリ割り当てを処理するのに十分な大きさである必要があります。また `totalSize` - `lohSize` は、SOH のクリティカルパスで発生するすべてのメモリ割り当てを処理するのに十分な大きさである必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-437">`lohSize` must be large enough to handle all memory allocations that occur in the critical path for the LOH, and `totalSize` - `lohSize` must be large enough to handle all memory allocations that occur in the critical path for the SOH.</span></span> <span data-ttu-id="70d68-438">これには、アプリによる割り当てに加え、アプリの代わりにランタイムが行う割り当ても含まれます。</span><span class="sxs-lookup"><span data-stu-id="70d68-438">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="70d68-439"><xref:System.GC.TryStartNoGCRegion%2A> メソッドへの呼び出しを入れ子にすることはできません。また、ランタイムが現在 GC 領域の待機時間モードでない場合にのみ、<xref:System.GC.EndNoGCRegion%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-439">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="70d68-440">つまり、<xref:System.GC.TryStartNoGCRegion%2A> を何度も呼び出さないでください (最初のメソッド呼び出しの後、以降の呼び出しは成功しません)。 <xref:System.GC.TryStartNoGCRegion%2A> の最初の呼び出しが成功したため、<xref:System.GC.EndNoGCRegion%2A> への呼び出しが成功するとは限りません。</span><span class="sxs-lookup"><span data-stu-id="70d68-440">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="70d68-441"><xref:System.GC.EndNoGCRegion%2A> メソッドを呼び出して、GC 領域の無待機モードを終了します。</span><span class="sxs-lookup"><span data-stu-id="70d68-441">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="70d68-442"><paramref name="totalSize" /> - <paramref name="lohSize" /> は、短期セグメント サイズを超えています。</span><span class="sxs-lookup"><span data-stu-id="70d68-442"><paramref name="totalSize" /> - <paramref name="lohSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="70d68-443">プロセスは既に、非 GC 領域待機時間モードになっています。</span><span class="sxs-lookup"><span data-stu-id="70d68-443">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="~/docs/standard/garbage-collection/fundamentals.md"><span data-ttu-id="70d68-444">ガベージ コレクションの基礎</span><span class="sxs-lookup"><span data-stu-id="70d68-444">Fundamentals of Garbage Collection</span></span></related>
        <related type="Article" href="~/docs/standard/garbage-collection/latency.md"><span data-ttu-id="70d68-445">待機モード</span><span class="sxs-lookup"><span data-stu-id="70d68-445">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * int64 * bool -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, lohSize, disallowFullBlockingGC)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="lohSize" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="70d68-446">ガベージ コレクションをトリガーすることなく割り当てるメモリの量 (バイト) を指定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-446">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="70d68-447"><paramref name="totalSize" /> -<paramref name="lohSize" /> は、短期セグメントのサイズ以下でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="70d68-447"><paramref name="totalSize" /> -<paramref name="lohSize" /> must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="70d68-448">短期セグメントのサイズの詳細については、「[ガベージ コレクションの基礎](~/docs/standard/garbage-collection/fundamentals.md)」記事の "短期のジェネレーションとセグメント" セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="70d68-448">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span></span></param>
        <param name="lohSize"><span data-ttu-id="70d68-449"><paramref name="totalSize" /> のうち、に大きなオブジェクト ヒープ (LOH) の割り当てに使用するバイト数。</span><span class="sxs-lookup"><span data-stu-id="70d68-449">The number of bytes in <paramref name="totalSize" /> to use for large object heap (LOH) allocations.</span></span></param>
        <param name="disallowFullBlockingGC"><span data-ttu-id="70d68-450">ガベージ コレクターが指定されたメモリを最初に小さなオブジェクト ヒープ (SOH) および LOH に割り当てられないときにフル ブロッキング ガベージ コレクションを省略する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70d68-450"><see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate the specified memory on the small object heap (SOH) and LOH; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="70d68-451">大きなオブジェクト ヒープおよび小さなオブジェクト ヒープに対して、指定した量のメモリを使用可能な場合は、クリティカル パスの実行中にガベージ コレクションが行われないよう、試行します。また、最初に十分な量のメモリを使用できない場合に、ガベージ コレクターがフル ブロッキング ガベージ コレクションを実行するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="70d68-451">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</span></span></summary>
        <returns><span data-ttu-id="70d68-452">ランタイムが、必要な量のメモリをコミットできたため、ガベージ コレクターが GC 領域の無待機モードに入ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="70d68-452"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-453"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29> メソッドは、ガベージコレクターを GC 領域の無待機モードで配置しようとします。このモードでは、アプリがコードの重要な領域を実行している間はガベージコレクションを実行できません。</span><span class="sxs-lookup"><span data-stu-id="70d68-453">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="70d68-454">ランタイムが最初に要求されたメモリ量を割り当てられず、`disallowFullBlockingGC` 引数が `false`場合、ガベージコレクターは、追加のメモリを解放するために、フルブロッキングガベージコレクションを実行します。それ以外の場合、割り当ては失敗し、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-454">If the runtime is unable to initially allocate the requested amount of memory and the `disallowFullBlockingGC` argument is `false`, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns `false`.</span></span> <span data-ttu-id="70d68-455">このガベージコレクターでは、LOH と `totalSize` - `lohSize` の小さなオブジェクトヒープ (SOH) に対して `lohSize` を割り当てることができる場合、GC 領域の待機時間モードは発生しません。</span><span class="sxs-lookup"><span data-stu-id="70d68-455">The garbage collector enters no GC region latency mode if it is able to allocate `lohSize` for the LOH and `totalSize` - `lohSize` for the small object heap (SOH).</span></span>  
  
 <span data-ttu-id="70d68-456">`lohSize` は、LOH のクリティカルパスで発生するすべてのメモリ割り当てを処理するのに十分な大きさである必要があります。また `totalSize` - `lohSize` は、SOH のクリティカルパスで発生するすべてのメモリ割り当てを処理するのに十分な大きさである必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-456">`lohSize` must be large enough to handle all memory allocations that occur in the critical path for the LOH, and `totalSize` - `lohSize` must be large enough to handle all memory allocations that occur in the critical path for the SOH.</span></span> <span data-ttu-id="70d68-457">これには、アプリによる割り当てに加え、アプリの代わりにランタイムが行う割り当ても含まれます。</span><span class="sxs-lookup"><span data-stu-id="70d68-457">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
 <span data-ttu-id="70d68-458">`disallowFullBlockingGC` を `true` に設定すると、最初から十分なメモリを確保できない場合でも、負荷分散のシナリオで最も役立ちます。1つのシステムがこのメソッドを呼び出し、`true`を返す場合は要求を受け入れる準備完了として報告し、`false`が返された場合はロードバランサーが他のシステムに要求をリダイレクトするようにします。</span><span class="sxs-lookup"><span data-stu-id="70d68-458">Setting `disallowFullBlockingGC` to `true` to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns `true`, and have the load balancer redirect requests to other systems if it returns `false`.</span></span> <span data-ttu-id="70d68-459">その後、<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> メソッドを呼び出すことによって要求を処理しない場合は、フルブロッキングガベージコレクションを実行できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-459">It can then do a full blocking garbage collection when it's not handling requests by calling the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="70d68-460"><xref:System.GC.TryStartNoGCRegion%2A> メソッドへの呼び出しを入れ子にすることはできません。また、ランタイムが現在 GC 領域の待機時間モードでない場合にのみ、<xref:System.GC.EndNoGCRegion%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-460">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="70d68-461">つまり、<xref:System.GC.TryStartNoGCRegion%2A> を何度も呼び出さないでください (最初のメソッド呼び出しの後、以降の呼び出しは成功しません)。 <xref:System.GC.TryStartNoGCRegion%2A> の最初の呼び出しが成功したため、<xref:System.GC.EndNoGCRegion%2A> への呼び出しが成功するとは限りません。</span><span class="sxs-lookup"><span data-stu-id="70d68-461">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="70d68-462"><xref:System.GC.EndNoGCRegion%2A> メソッドを呼び出して、GC 領域の無待機モードを終了します。</span><span class="sxs-lookup"><span data-stu-id="70d68-462">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="70d68-463"><paramref name="totalSize" /> - <paramref name="lohSize" /> は、短期セグメント サイズを超えています。</span><span class="sxs-lookup"><span data-stu-id="70d68-463"><paramref name="totalSize" /> - <paramref name="lohSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="70d68-464">プロセスは既に、非 GC 領域待機時間モードになっています。</span><span class="sxs-lookup"><span data-stu-id="70d68-464">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="~/docs/standard/garbage-collection/fundamentals.md"><span data-ttu-id="70d68-465">ガベージ コレクションの基礎</span><span class="sxs-lookup"><span data-stu-id="70d68-465">Fundamentals of Garbage Collection</span></span></related>
        <related type="Article" href="~/docs/standard/garbage-collection/latency.md"><span data-ttu-id="70d68-466">待機モード</span><span class="sxs-lookup"><span data-stu-id="70d68-466">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCApproach">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="70d68-467">共通言語ランタイムによるフル ブロッキング ガベージ コレクションが近づいているかどうかを確認するための、登録済みの通知の状態を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-467">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach();" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCApproach : unit -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCApproach " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70d68-468">共通言語ランタイムによるフル ブロッキング ガベージ コレクションが近づいているかどうかを確認するための、登録済みの通知の状態を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-468">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span></span></summary>
        <returns><span data-ttu-id="70d68-469">登録済みのガベージ コレクションの通知の状態。</span><span class="sxs-lookup"><span data-stu-id="70d68-469">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-470">このメソッドによって返される <xref:System.GCNotificationStatus> 列挙体を使用して、<xref:System.GC.RegisterForFullGCNotification%2A> メソッドを使用して登録された現在のガベージコレクションの通知の状態を確認します。</span><span class="sxs-lookup"><span data-stu-id="70d68-470">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="70d68-471"><xref:System.GC.WaitForFullGCComplete%2A> メソッドを使用して、フルガベージコレクションが完了したかどうかを確認することもできます。</span><span class="sxs-lookup"><span data-stu-id="70d68-471">You can also use the <xref:System.GC.WaitForFullGCComplete%2A> method to determine whether the full garbage collection has completed.</span></span>  
  
 <span data-ttu-id="70d68-472">列挙型から <xref:System.GCNotificationStatus.Succeeded>が返された場合は、追加のオブジェクトが割り当てられないようにしたり、<xref:System.GC.Collect%2A> メソッドを使用してコレクションを強制的に実行したりするなどのタスクを実行できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-472">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="70d68-473">この通知では、フルガベージコレクションが発生することは保証されません。フルガベージコレクションの実行に適したしきい値に達しただけです。</span><span class="sxs-lookup"><span data-stu-id="70d68-473">Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.</span></span>  
  
 <span data-ttu-id="70d68-474">このメソッドは、ガベージコレクションの通知が取得されるまで無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="70d68-474">This method waits indefinitely for a garbage collection notification to be obtained.</span></span> <span data-ttu-id="70d68-475">通知を取得できない場合にメソッドが返すタイムアウト期間を指定するには、<xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> メソッドのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="70d68-475">If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="70d68-476">タイムアウトを指定せずにこのメソッドを呼び出した場合は、<xref:System.GC.CancelFullGCNotification%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="70d68-476">If you call this method without specifying a time-out, you can call the <xref:System.GC.CancelFullGCNotification%2A> method if you are waiting longer than preferred.</span></span>  
  
 <span data-ttu-id="70d68-477">このメソッドには、<xref:System.GC.WaitForFullGCComplete%2A> メソッドを呼び出して、フルガベージコレクションがあることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-477">You should follow this method with a call to the <xref:System.GC.WaitForFullGCComplete%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="70d68-478">このメソッドだけを呼び出すと、不確定な結果になります。</span><span class="sxs-lookup"><span data-stu-id="70d68-478">Calling this method alone causes indeterminate results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-479">次の例は、このメソッドを使用して、フルブロッキングガベージコレクションが近づいているかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="70d68-479">The following example shows how to use this method to determine whether a full, blocking garbage collection is approaching.</span></span> <span data-ttu-id="70d68-480">通知の状態が <xref:System.GCNotificationStatus.Succeeded>たびに、ユーザーメソッド `OnFullGCApproachNotify` が呼び出され、近づいているコレクションに応答してアクションが実行されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-480">Whenever the status of the notification is <xref:System.GCNotificationStatus.Succeeded>, the user method `OnFullGCApproachNotify` is called to perform actions in response to the approaching collection.</span></span> <span data-ttu-id="70d68-481">このコード例は、「[ガベージコレクションの通知](~/docs/standard/garbage-collection/notifications.md)」トピックで提供されている、より大きな例の一部です。</span><span class="sxs-lookup"><span data-stu-id="70d68-481">This code example is part of a larger example provided for [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#3](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#3)]
 [!code-csharp[GCNotification#3](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#3)]
 [!code-vb[GCNotification#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/notifications.md"><span data-ttu-id="70d68-482">ガベージ コレクションの通知</span><span class="sxs-lookup"><span data-stu-id="70d68-482">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCApproach : int -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCApproach millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="70d68-483">通知の状態が取得されるまで待機する時間。</span><span class="sxs-lookup"><span data-stu-id="70d68-483">The length of time to wait before a notification status can be obtained.</span></span> <span data-ttu-id="70d68-484">無期限に待機するには -1 を指定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-484">Specify -1 to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="70d68-485">共通言語ランタイムによるフル ブロッキング ガベージ コレクションが近づいているかどうかを確認するための登録済みの通知の状態を、指定したタイムアウト時間で返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-485">Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span></span></summary>
        <returns><span data-ttu-id="70d68-486">登録済みのガベージ コレクションの通知の状態。</span><span class="sxs-lookup"><span data-stu-id="70d68-486">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-487">このメソッドによって返される <xref:System.GCNotificationStatus> 列挙体を使用して、<xref:System.GC.RegisterForFullGCNotification%2A> メソッドを使用して登録された現在のガベージコレクションの通知の状態を確認します。</span><span class="sxs-lookup"><span data-stu-id="70d68-487">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="70d68-488"><xref:System.GC.WaitForFullGCComplete%2A> メソッドを使用して、フルガベージコレクションが完了したかどうかを確認することもできます。</span><span class="sxs-lookup"><span data-stu-id="70d68-488">You can also use the <xref:System.GC.WaitForFullGCComplete%2A> method to determine whether the full garbage collection has completed.</span></span>  
  
 <span data-ttu-id="70d68-489">`millisecondsTimeout`によって指定された値に関係なく、ガベージコレクションの通知状態が取得されるたびに、このメソッドは直ちに戻ります。</span><span class="sxs-lookup"><span data-stu-id="70d68-489">Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by `millisecondsTimeout`.</span></span> <span data-ttu-id="70d68-490">`millisecondsTimeout` がタイムアウトする前にガベージコレクションの通知状態が取得されなかった場合、このメソッドは <xref:System.GCNotificationStatus.NotApplicable>を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-490">If a garbage collection notification status is not obtained before `millisecondsTimeout` times out, this method returns <xref:System.GCNotificationStatus.NotApplicable>.</span></span>  
  
 <span data-ttu-id="70d68-491">列挙型から <xref:System.GCNotificationStatus.Succeeded>が返された場合は、追加のオブジェクトが割り当てられないようにしたり、<xref:System.GC.Collect%2A> メソッドを使用してコレクションを強制的に実行したりするなどのタスクを実行できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-491">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="70d68-492">この通知では、フルガベージコレクションが発生することは保証されません。フルガベージコレクションの実行に適したしきい値に達しただけです。</span><span class="sxs-lookup"><span data-stu-id="70d68-492">Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.</span></span>  
  
 <span data-ttu-id="70d68-493">タイムアウト期間が経過するまで待機できない場合は、<xref:System.GC.CancelFullGCNotification%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="70d68-493">You can call the <xref:System.GC.CancelFullGCNotification%2A> method when you cannot wait for the time-out period to elapse.</span></span>  
  
 <span data-ttu-id="70d68-494">このメソッドには、<xref:System.GC.WaitForFullGCComplete%2A> メソッドを呼び出して、フルガベージコレクションがあることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-494">You should follow this method with a call to the <xref:System.GC.WaitForFullGCComplete%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="70d68-495">このメソッドだけを呼び出すと、不確定な結果になります。</span><span class="sxs-lookup"><span data-stu-id="70d68-495">Calling this method alone causes indeterminate results.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="70d68-496"><paramref name="millisecondsTimeout" /> は負でない数値、<see cref="F:System.Int32.MaxValue" /> 以下の数値、または -1 である必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-496"><paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</span></span></exception>
        <related type="Article" href="~/docs/standard/garbage-collection/notifications.md"><span data-ttu-id="70d68-497">ガベージ コレクションの通知</span><span class="sxs-lookup"><span data-stu-id="70d68-497">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCComplete">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="70d68-498">共通言語ランタイムによるフル ブロッキング ガベージ コレクションが完了したかどうかを確認するための、登録済みの通知の状態を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-498">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete();" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCComplete : unit -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70d68-499">共通言語ランタイムによるフル ブロッキング ガベージ コレクションが完了したかどうかを確認するための、登録済みの通知の状態を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-499">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</span></span></summary>
        <returns><span data-ttu-id="70d68-500">登録済みのガベージ コレクションの通知の状態。</span><span class="sxs-lookup"><span data-stu-id="70d68-500">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-501">このメソッドによって返される <xref:System.GCNotificationStatus> 列挙体を使用して、<xref:System.GC.RegisterForFullGCNotification%2A> メソッドを使用して登録された現在のガベージコレクションの通知の状態を確認します。</span><span class="sxs-lookup"><span data-stu-id="70d68-501">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="70d68-502"><xref:System.GC.WaitForFullGCApproach%2A> メソッドを使用して、フルガベージコレクションが近づいているかどうかを確認することもできます。</span><span class="sxs-lookup"><span data-stu-id="70d68-502">You can also use the <xref:System.GC.WaitForFullGCApproach%2A> method to determine whether a full garbage collection is imminent.</span></span>  
  
 <span data-ttu-id="70d68-503">列挙型から <xref:System.GCNotificationStatus.Succeeded>が返された場合は、作業の再開やコレクション数の取得などのタスクを <xref:System.GC.CollectionCount%2A> プロパティを使用して実行できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-503">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as resuming work and obtaining a collection count with the <xref:System.GC.CollectionCount%2A> property.</span></span>  
  
 <span data-ttu-id="70d68-504">このメソッドは、ガベージコレクションの通知が取得されるまで無期限に待機します。</span><span class="sxs-lookup"><span data-stu-id="70d68-504">This method waits indefinitely for a garbage collection notification to be obtained.</span></span> <span data-ttu-id="70d68-505">通知を取得できない場合にメソッドが返すタイムアウト期間を指定するには、<xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> メソッドのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="70d68-505">If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="70d68-506">タイムアウトを指定せずにこのメソッドを呼び出した場合は、<xref:System.GC.CancelFullGCNotification%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="70d68-506">If you call this method without specifying a time-out, you can call the <xref:System.GC.CancelFullGCNotification%2A> method if you are waiting longer than preferred.</span></span>  
  
 <span data-ttu-id="70d68-507">このメソッドの呼び出しの前に、<xref:System.GC.WaitForFullGCApproach%2A> メソッドを呼び出して、フルガベージコレクションがあることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="70d68-507">This method call should be preceded with a call to the <xref:System.GC.WaitForFullGCApproach%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="70d68-508">このメソッドだけを呼び出すと、不確定の結果が生成される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-508">Calling this method alone can produce indeterminate results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-509">次の例は、このメソッドを使用して、フルガベージコレクションが完了したかどうかを確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="70d68-509">The following example shows how to use this method to determine whether a full garbage collection has completed.</span></span> <span data-ttu-id="70d68-510">通知の状態が <xref:System.GCNotificationStatus.Succeeded>たびに、完了したコレクションに応答してアクションを実行するために、ユーザーメソッド `OnFullGCCompletedNotify` が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-510">Whenever the status of the notification is <xref:System.GCNotificationStatus.Succeeded>, the user method `OnFullGCCompletedNotify` is called to perform actions in response to the completed collection.</span></span> <span data-ttu-id="70d68-511">このコード例は、「[ガベージコレクションの通知](~/docs/standard/garbage-collection/notifications.md)」トピックで提供されている、より大きな例の一部です。</span><span class="sxs-lookup"><span data-stu-id="70d68-511">This code example is part of a larger example provided for [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#4](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#4)]
 [!code-csharp[GCNotification#4](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#4)]
 [!code-vb[GCNotification#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/notifications.md"><span data-ttu-id="70d68-512">ガベージ コレクションの通知</span><span class="sxs-lookup"><span data-stu-id="70d68-512">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCComplete : int -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCComplete millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="70d68-513">通知の状態が取得されるまで待機する時間。</span><span class="sxs-lookup"><span data-stu-id="70d68-513">The length of time to wait before a notification status can be obtained.</span></span> <span data-ttu-id="70d68-514">無期限に待機するには -1 を指定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-514">Specify -1 to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="70d68-515">共通言語ランタイムによるフル ブロッキング ガベージ コレクションが完了したかどうかを確認するための登録済みの通知の状態を、指定したタイムアウト時間で返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-515">Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by common language the runtime has completed.</span></span></summary>
        <returns><span data-ttu-id="70d68-516">登録済みのガベージ コレクションの通知の状態。</span><span class="sxs-lookup"><span data-stu-id="70d68-516">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-517">このメソッドによって返される <xref:System.GCNotificationStatus> 列挙体を使用して、<xref:System.GC.RegisterForFullGCNotification%2A> メソッドを使用して登録された現在のガベージコレクションの通知の状態を確認します。</span><span class="sxs-lookup"><span data-stu-id="70d68-517">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="70d68-518"><xref:System.GC.WaitForFullGCApproach%2A> メソッドを使用して、フルガベージコレクションが近づいているかどうかを確認することもできます。</span><span class="sxs-lookup"><span data-stu-id="70d68-518">You can also use the <xref:System.GC.WaitForFullGCApproach%2A> method to determine whether a full garbage collection is imminent.</span></span>  
  
 <span data-ttu-id="70d68-519">`millisecondsTimeout`によって指定された値に関係なく、ガベージコレクションの通知状態が取得されるたびに、このメソッドは直ちに戻ります。</span><span class="sxs-lookup"><span data-stu-id="70d68-519">Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by `millisecondsTimeout`.</span></span> <span data-ttu-id="70d68-520">`millisecondsTimeout` がタイムアウトする前にガベージコレクションの通知状態が取得されなかった場合、このメソッドは <xref:System.GCNotificationStatus.NotApplicable>を返します。</span><span class="sxs-lookup"><span data-stu-id="70d68-520">If a garbage collection notification status is not obtained before `millisecondsTimeout` times out, this method returns <xref:System.GCNotificationStatus.NotApplicable>.</span></span>  
  
 <span data-ttu-id="70d68-521">列挙型から <xref:System.GCNotificationStatus.Succeeded>が返された場合は、作業の再開やコレクション数の取得などのタスクを <xref:System.GC.CollectionCount%2A> プロパティを使用して実行できます。</span><span class="sxs-lookup"><span data-stu-id="70d68-521">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as resuming work and obtaining a collection count with the <xref:System.GC.CollectionCount%2A> property.</span></span>  
  
 <span data-ttu-id="70d68-522">タイムアウト期間が経過するまで待機できない場合は、<xref:System.GC.CancelFullGCNotification%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="70d68-522">You can call the <xref:System.GC.CancelFullGCNotification%2A> method when you cannot wait for the time-out period to elapse.</span></span>  
  
 <span data-ttu-id="70d68-523">このメソッドの呼び出しの前に、<xref:System.GC.WaitForFullGCApproach%2A> メソッドを呼び出して、フルガベージコレクションがあることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="70d68-523">This method call should be preceded with a call to the <xref:System.GC.WaitForFullGCApproach%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="70d68-524">このメソッドだけを呼び出すと、不確定の結果が生成される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-524">Calling this method alone can produce indeterminate results.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="70d68-525"><paramref name="millisecondsTimeout" /> は負でない数値、<see cref="F:System.Int32.MaxValue" /> 以下の数値、または -1 である必要があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-525"><paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</span></span></exception>
        <related type="Article" href="~/docs/standard/garbage-collection/notifications.md"><span data-ttu-id="70d68-526">ガベージ コレクションの通知</span><span class="sxs-lookup"><span data-stu-id="70d68-526">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WaitForPendingFinalizers">
      <MemberSignature Language="C#" Value="public static void WaitForPendingFinalizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitForPendingFinalizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForPendingFinalizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitForPendingFinalizers ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitForPendingFinalizers();" />
      <MemberSignature Language="F#" Value="static member WaitForPendingFinalizers : unit -&gt; unit" Usage="System.GC.WaitForPendingFinalizers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70d68-527">ファイナライザーのキューを処理するスレッドがそのキューを空にするまで、現在のスレッドを中断します。</span><span class="sxs-lookup"><span data-stu-id="70d68-527">Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70d68-528">ガベージコレクターは、解放できるオブジェクトを検出すると、各オブジェクトをチェックして、オブジェクトの終了の要件を決定します。</span><span class="sxs-lookup"><span data-stu-id="70d68-528">When the garbage collector finds objects that can be reclaimed, it checks each object to determine the object's finalization requirements.</span></span> <span data-ttu-id="70d68-529">オブジェクトがファイナライザーを実装し、<xref:System.GC.SuppressFinalize%2A>を呼び出すことによって終了処理を無効にしていない場合、オブジェクトは、終了準備完了としてマークされているオブジェクトのリストに配置されます。</span><span class="sxs-lookup"><span data-stu-id="70d68-529">If an object implements a finalizer and has not disabled finalization by calling <xref:System.GC.SuppressFinalize%2A>, the object is placed in a list of objects that are marked as ready for finalization.</span></span> <span data-ttu-id="70d68-530">ガベージコレクターは、このリスト内のオブジェクトの <xref:System.Object.Finalize%2A> メソッドを呼び出し、リストからエントリを削除します。</span><span class="sxs-lookup"><span data-stu-id="70d68-530">The garbage collector calls the <xref:System.Object.Finalize%2A> methods for the objects in this list and removes the entries from the list.</span></span> <span data-ttu-id="70d68-531">このメソッドは、すべてのファイナライザーの実行が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="70d68-531">This method blocks until all finalizers have run to completion.</span></span>  
  
 <span data-ttu-id="70d68-532">ファイナライザーが実行されるスレッドは指定されていないため、このメソッドが終了する保証はありません。</span><span class="sxs-lookup"><span data-stu-id="70d68-532">The thread on which finalizers are run is unspecified, so there is no guarantee that this method will terminate.</span></span> <span data-ttu-id="70d68-533">ただし、このスレッドは、<xref:System.GC.WaitForPendingFinalizers%2A> メソッドの実行中に別のスレッドによって中断される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="70d68-533">However, this thread can be interrupted by another thread while the <xref:System.GC.WaitForPendingFinalizers%2A> method is in progress.</span></span> <span data-ttu-id="70d68-534">たとえば、ある期間待機する別のスレッドを開始し、このスレッドが中断されている場合は、このスレッドを中断することができます。</span><span class="sxs-lookup"><span data-stu-id="70d68-534">For example, you can start another thread that waits for a period of time and then interrupts this thread if this thread is still suspended.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70d68-535">次の例は、<xref:System.GC.WaitForPendingFinalizers%2A> メソッドを使用して、収集されたすべてのオブジェクトの終了処理が完了するまで、現在のスレッドを中断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="70d68-535">The following example demonstrates how to use the <xref:System.GC.WaitForPendingFinalizers%2A> method to suspend the current thread until finalization of all the collected objects is complete.</span></span>  
  
 [!code-cpp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CS/class1.cs#1)]
 [!code-vb[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
